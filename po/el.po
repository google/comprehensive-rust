msgid ""
msgstr ""
"Project-Id-Version: Comprehensive Rust 🦀\n"
"POT-Creation-Date: 2024-01-24T13:24:49+01:00\n"
"PO-Revision-Date: 2023-08-25 13:24-0700\n"
"Last-Translator: root <andrikopoulos@google.com>\n"
"Language-Team: Greek <team@lists.gnome.gr>\n"
"Language: el\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.3.2\n"

#: src/SUMMARY.md src/index.md
msgid "Welcome to Comprehensive Rust 🦀"
msgstr "Καλώς ήρθατε στην Comprehensive Rust 🦀"

#: src/SUMMARY.md src/running-the-course.md
msgid "Running the Course"
msgstr "Διεξαγωγή του μαθήματος"

#: src/SUMMARY.md src/running-the-course/course-structure.md
msgid "Course Structure"
msgstr "Δομή Μαθήματος"

#: src/SUMMARY.md src/running-the-course/keyboard-shortcuts.md
msgid "Keyboard Shortcuts"
msgstr "Συντομεύσεις πληκτρολογίου"

#: src/SUMMARY.md src/running-the-course/translations.md
msgid "Translations"
msgstr "Μεταφράσεις"

#: src/SUMMARY.md src/cargo.md
msgid "Using Cargo"
msgstr "Χρήση Cargo"

#: src/SUMMARY.md
msgid "Rust Ecosystem"
msgstr "Rust Οικοσύστημα"

#: src/SUMMARY.md
msgid "Code Samples"
msgstr "Δείγματα κώδικα"

#: src/SUMMARY.md
msgid "Running Cargo Locally"
msgstr "Εκτέλεση Cargo τοπικά"

#: src/SUMMARY.md
msgid "Day 1: Morning"
msgstr "1η μέρα: Πρωί"

#: src/SUMMARY.md
msgid "Welcome"
msgstr "Καλως Ήρθατε"

#: src/SUMMARY.md src/hello-world.md src/hello-world/hello-world.md
#, fuzzy
msgid "Hello, World"
msgstr "Γειά σου Κόσμε!"

#: src/SUMMARY.md src/hello-world/what-is-rust.md
msgid "What is Rust?"
msgstr "Τι είναι η Rust;"

#: src/SUMMARY.md src/hello-world/benefits.md
msgid "Benefits of Rust"
msgstr ""

#: src/SUMMARY.md src/hello-world/playground.md
msgid "Playground"
msgstr ""

#: src/SUMMARY.md src/types-and-values.md
msgid "Types and Values"
msgstr ""

#: src/SUMMARY.md src/types-and-values/variables.md
msgid "Variables"
msgstr "Μεταβλητές"

#: src/SUMMARY.md src/types-and-values/values.md
msgid "Values"
msgstr ""

#: src/SUMMARY.md src/types-and-values/arithmetic.md
msgid "Arithmetic"
msgstr ""

#: src/SUMMARY.md src/types-and-values/strings.md
msgid "Strings"
msgstr ""

#: src/SUMMARY.md src/types-and-values/inference.md
msgid "Type Inference"
msgstr "Συμπερασμός Τύπων"

#: src/SUMMARY.md src/types-and-values/exercise.md
msgid "Exercise: Fibonacci"
msgstr ""

#: src/SUMMARY.md src/types-and-values/solution.md
#: src/control-flow-basics/solution.md src/tuples-and-arrays/solution.md
#: src/references/solution.md src/user-defined-types/solution.md
#: src/pattern-matching/solution.md src/methods-and-traits/solution.md
#: src/generics/solution.md src/std-types/solution.md
#: src/std-traits/solution.md src/memory-management/solution.md
#: src/smart-pointers/solution.md src/borrowing/solution.md
#: src/slices-and-lifetimes/solution.md src/iterators/solution.md
#: src/modules/solution.md src/testing/solution.md
#: src/error-handling/solution.md src/unsafe-rust/solution.md
#, fuzzy
msgid "Solution"
msgstr "Λύσεις"

#: src/SUMMARY.md src/control-flow-basics.md
#, fuzzy
msgid "Control Flow Basics"
msgstr "Ροή ελέγχου"

#: src/SUMMARY.md src/control-flow-basics/conditionals.md
msgid "Conditionals"
msgstr ""

#: src/SUMMARY.md src/control-flow-basics/loops.md
#, fuzzy
msgid "Loops"
msgstr "Βρόχοι «για»."

#: src/SUMMARY.md src/control-flow-basics/break-continue.md
#, fuzzy
msgid "`break` and `continue`"
msgstr "«διάλειμμα» και «συνέχεια»."

#: src/SUMMARY.md src/control-flow-basics/blocks-and-scopes.md
msgid "Blocks and Scopes"
msgstr ""

#: src/SUMMARY.md src/control-flow-basics/functions.md
msgid "Functions"
msgstr "Συναρτήσεις"

#: src/SUMMARY.md src/control-flow-basics/macros.md
msgid "Macros"
msgstr ""

#: src/SUMMARY.md src/control-flow-basics/exercise.md
msgid "Exercise: Collatz Sequence"
msgstr ""

#: src/SUMMARY.md
msgid "Day 1: Afternoon"
msgstr "1η μέρα: Απόγευμα"

#: src/SUMMARY.md src/tuples-and-arrays.md
#: src/tuples-and-arrays/tuples-and-arrays.md
msgid "Tuples and Arrays"
msgstr ""

#: src/SUMMARY.md src/tuples-and-arrays/iteration.md
#, fuzzy
msgid "Array Iteration"
msgstr "Iterator"

#: src/SUMMARY.md src/tuples-and-arrays/match.md src/pattern-matching.md
msgid "Pattern Matching"
msgstr "Αντιστοίχιση προτύπων"

#: src/SUMMARY.md src/tuples-and-arrays/destructuring.md
#: src/pattern-matching/destructuring.md
#, fuzzy
msgid "Destructuring"
msgstr "Αποδόμηση Απαριθμήσεων"

#: src/SUMMARY.md src/tuples-and-arrays/exercise.md
msgid "Exercise: Nested Arrays"
msgstr ""

#: src/SUMMARY.md src/references.md
msgid "References"
msgstr "Αναφορές"

#: src/SUMMARY.md src/references/shared.md
#, fuzzy
msgid "Shared References"
msgstr "Αναφορές"

#: src/SUMMARY.md src/references/exclusive.md
#, fuzzy
msgid "Exclusive References"
msgstr "Κρεμασμένες αναφορές"

#: src/SUMMARY.md src/references/exercise.md
msgid "Exercise: Geometry"
msgstr ""

#: src/SUMMARY.md src/user-defined-types.md
msgid "User-Defined Types"
msgstr ""

#: src/SUMMARY.md src/user-defined-types/named-structs.md
#, fuzzy
msgid "Named Structs"
msgstr "Δομές"

#: src/SUMMARY.md src/user-defined-types/tuple-structs.md
msgid "Tuple Structs"
msgstr "Δομές Τούπλας"

#: src/SUMMARY.md src/user-defined-types/enums.md
#: src/pattern-matching/destructuring.md
msgid "Enums"
msgstr "Απαριθμήσεις"

#: src/SUMMARY.md src/user-defined-types/static-and-const.md
#, fuzzy
msgid "Static and Const"
msgstr "static & const"

#: src/SUMMARY.md src/user-defined-types/aliases.md
msgid "Type Aliases"
msgstr ""

#: src/SUMMARY.md src/user-defined-types/exercise.md
msgid "Exercise: Elevator Events"
msgstr ""

#: src/SUMMARY.md
msgid "Day 2: Morning"
msgstr "2η μέρα: Πρωί"

#: src/SUMMARY.md src/pattern-matching/let-control-flow.md
#, fuzzy
msgid "Let Control Flow"
msgstr "Ροή ελέγχου"

#: src/SUMMARY.md src/pattern-matching/exercise.md
msgid "Exercise: Expression Evaluation"
msgstr ""

#: src/SUMMARY.md src/methods-and-traits.md
#, fuzzy
msgid "Methods and Traits"
msgstr "Read και Write"

#: src/SUMMARY.md src/methods-and-traits/methods.md
msgid "Methods"
msgstr "Μέθοδοι"

#: src/SUMMARY.md src/methods-and-traits/traits.md
msgid "Traits"
msgstr "Χαρακτηριστικά"

#: src/SUMMARY.md src/methods-and-traits/deriving.md
#, fuzzy
msgid "Deriving"
msgstr "Εξάγωντας χαρακτηριστικά"

#: src/SUMMARY.md src/methods-and-traits/trait-objects.md
msgid "Trait Objects"
msgstr "Αντικείμενα Χαρακτηριστικών"

#: src/SUMMARY.md src/methods-and-traits/exercise.md
msgid "Exercise: Generic Logger"
msgstr ""

#: src/SUMMARY.md src/generics.md
msgid "Generics"
msgstr "Γενικευσεις"

#: src/SUMMARY.md src/generics/generic-functions.md
#, fuzzy
msgid "Generic Functions"
msgstr "Εξωτερικές Συναρτήσεις"

#: src/SUMMARY.md src/generics/generic-data.md
msgid "Generic Data Types"
msgstr "Γενικοί τύποι δεδομένων"

#: src/SUMMARY.md src/generics/trait-bounds.md
msgid "Trait Bounds"
msgstr "Περιορισμοί χαρακτηριστικών"

#: src/SUMMARY.md src/generics/impl-trait.md
#, fuzzy
msgid "`impl Trait`"
msgstr "`impl Trait`"

#: src/SUMMARY.md src/generics/exercise.md
msgid "Exercise: Generic `min`"
msgstr ""

#: src/SUMMARY.md
msgid "Day 2: Afternoon"
msgstr "2η μέρα: Απόγευμα"

#: src/SUMMARY.md src/std-types.md
#, fuzzy
msgid "Standard Library Types"
msgstr "Στάνταρ Βιβλιοθήκη"

#: src/SUMMARY.md src/std-types/std.md
msgid "Standard Library"
msgstr "Στάνταρ Βιβλιοθήκη"

#: src/SUMMARY.md src/std-types/docs.md
#, fuzzy
msgid "Documentation"
msgstr "Τεστ τεκμηρίωσης"

#: src/SUMMARY.md
msgid "`Option`"
msgstr ""

#: src/SUMMARY.md
msgid "`Result`"
msgstr ""

#: src/SUMMARY.md src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`String`"
msgstr "Συμβολοσειρές"

#: src/SUMMARY.md src/std-types/vec.md
#, fuzzy
msgid "`Vec`"
msgstr "«Vec»."

#: src/SUMMARY.md src/std-types/hashmap.md src/bare-metal/no_std.md
#, fuzzy
msgid "`HashMap`"
msgstr "`HashMap`"

#: src/SUMMARY.md src/std-types/exercise.md
#, fuzzy
msgid "Exercise: Counter"
msgstr "Ασκήσεις"

#: src/SUMMARY.md src/std-traits.md
#, fuzzy
msgid "Standard Library Traits"
msgstr "Στάνταρ Βιβλιοθήκη"

#: src/SUMMARY.md src/std-traits/comparisons.md src/async.md
#, fuzzy
msgid "Comparisons"
msgstr "Σύγκριση"

#: src/SUMMARY.md src/std-traits/operators.md
#, fuzzy
msgid "Operators"
msgstr "Επαναληπτικοί"

#: src/SUMMARY.md src/std-traits/from-and-into.md
#, fuzzy
msgid "`From` and `Into`"
msgstr "«Από» και «Μέσα»."

#: src/SUMMARY.md src/std-traits/casting.md
#, fuzzy
msgid "Casting"
msgstr "Τεστ"

#: src/SUMMARY.md src/std-traits/read-and-write.md
#, fuzzy
msgid "`Read` and `Write`"
msgstr "«Διαβάστε» και «Γράψτε»."

#: src/SUMMARY.md
msgid "`Default`, struct update syntax"
msgstr ""

#: src/SUMMARY.md src/std-traits/closures.md
msgid "Closures"
msgstr "Κλεισίματα"

#: src/SUMMARY.md src/std-traits/exercise.md
#, fuzzy
msgid "Exercise: ROT13"
msgstr "Ασκήσεις"

#: src/SUMMARY.md
msgid "Day 3: Morning"
msgstr "3η μέρα: Πρωί"

#: src/SUMMARY.md src/memory-management.md
msgid "Memory Management"
msgstr "Διαχείριση μνήμης"

#: src/SUMMARY.md src/memory-management/review.md
msgid "Review of Program Memory"
msgstr ""

#: src/SUMMARY.md src/memory-management/approaches.md
#, fuzzy
msgid "Approaches to Memory Management"
msgstr "Αυτόματη διαχείριση μνήμης"

#: src/SUMMARY.md src/memory-management/ownership.md
msgid "Ownership"
msgstr "Ιδιοκτησία"

#: src/SUMMARY.md src/memory-management/move.md
msgid "Move Semantics"
msgstr "Σημασιολογία μετακίνησης"

#: src/SUMMARY.md
msgid "`Clone`"
msgstr ""

#: src/SUMMARY.md src/memory-management/copy-types.md
#, fuzzy
msgid "Copy Types"
msgstr "Σύνθετοι τύποι"

#: src/SUMMARY.md
#, fuzzy
msgid "`Drop`"
msgstr "Drop"

#: src/SUMMARY.md src/memory-management/exercise.md
msgid "Exercise: Builder Type"
msgstr ""

#: src/SUMMARY.md src/smart-pointers.md
msgid "Smart Pointers"
msgstr ""

#: src/SUMMARY.md src/smart-pointers/box.md
#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`Box<T>`"
msgstr "«Κουτί»."

#: src/SUMMARY.md src/smart-pointers/rc.md
#, fuzzy
msgid "`Rc`"
msgstr "«Rc»."

#: src/SUMMARY.md src/smart-pointers/exercise.md
msgid "Exercise: Binary Tree"
msgstr ""

#: src/SUMMARY.md
msgid "Day 3: Afternoon"
msgstr "3η μέρα: Απόγευμα"

#: src/SUMMARY.md src/borrowing.md
msgid "Borrowing"
msgstr "Δανεισμός"

#: src/SUMMARY.md src/borrowing/shared.md
#, fuzzy
msgid "Borrowing a Value"
msgstr "Δανεισμός"

#: src/SUMMARY.md src/borrowing/borrowck.md
#, fuzzy
msgid "Borrow Checking"
msgstr "Δανεισμός"

#: src/SUMMARY.md src/borrowing/interior-mutability.md
#, fuzzy
msgid "Interior Mutability"
msgstr "Διαλειτουργικότητα"

#: src/SUMMARY.md src/borrowing/exercise.md
#, fuzzy
msgid "Exercise: Health Statistics"
msgstr "Στατιστικά Υγείας"

#: src/SUMMARY.md src/slices-and-lifetimes.md
#, fuzzy
msgid "Slices and Lifetimes"
msgstr "Διάρκειες"

#: src/SUMMARY.md
#, fuzzy
msgid "Slices: `&[T]`"
msgstr "Φέτες"

#: src/SUMMARY.md src/slices-and-lifetimes/str.md
#, fuzzy
msgid "String References"
msgstr "Κρεμασμένες αναφορές"

#: src/SUMMARY.md src/slices-and-lifetimes/lifetime-annotations.md
#, fuzzy
msgid "Lifetime Annotations"
msgstr "Διάρκειες σε κλήσεις συναρτήσεων"

#: src/SUMMARY.md
#, fuzzy
msgid "Lifetime Elision"
msgstr "Διάρκειες"

#: src/SUMMARY.md
#, fuzzy
msgid "Struct Lifetimes"
msgstr "Διάρκειες"

#: src/SUMMARY.md src/slices-and-lifetimes/exercise.md
msgid "Exercise: Protobuf Parsing"
msgstr ""

#: src/SUMMARY.md
msgid "Day 4: Morning"
msgstr "4η μέρα: Πρωί"

#: src/SUMMARY.md src/iterators.md
#, fuzzy
msgid "Iterators"
msgstr "Επαναληπτικοί"

#: src/SUMMARY.md src/iterators/iterator.md src/bare-metal/no_std.md
#, fuzzy
msgid "`Iterator`"
msgstr "«Iterator»."

#: src/SUMMARY.md src/iterators/intoiterator.md
#, fuzzy
msgid "`IntoIterator`"
msgstr "«IntoIterator»."

#: src/SUMMARY.md
#, fuzzy
msgid "`FromIterator`"
msgstr "FromIterator"

#: src/SUMMARY.md src/iterators/exercise.md
msgid "Exercise: Iterator Method Chaining"
msgstr ""

#: src/SUMMARY.md src/modules.md src/modules/modules.md
msgid "Modules"
msgstr "Δομικές Μονάδες"

#: src/SUMMARY.md src/modules/filesystem.md
msgid "Filesystem Hierarchy"
msgstr "Ιεραρχία συστήματος αρχείων"

#: src/SUMMARY.md src/modules/visibility.md
msgid "Visibility"
msgstr "Ορατότητα"

#: src/SUMMARY.md
msgid "`use`, `super`, `self`"
msgstr ""

#: src/SUMMARY.md src/modules/exercise.md
msgid "Exercise: Modules for a GUI Library"
msgstr ""

#: src/SUMMARY.md src/testing.md src/chromium/testing.md
msgid "Testing"
msgstr "Τεστ"

#: src/SUMMARY.md
msgid "Test Modules"
msgstr "Δομικές μονάδες τεστ"

#: src/SUMMARY.md src/testing/other.md
#, fuzzy
msgid "Other Types of Tests"
msgstr "Επιπλέον Υλικό"

#: src/SUMMARY.md src/testing/useful-crates.md
msgid "Useful Crates"
msgstr "Χρήσιμα Crates"

#: src/SUMMARY.md src/testing/googletest.md
msgid "GoogleTest"
msgstr ""

#: src/SUMMARY.md src/testing/mocking.md
msgid "Mocking"
msgstr ""

#: src/SUMMARY.md src/testing/lints.md
msgid "Compiler Lints and Clippy"
msgstr ""

#: src/SUMMARY.md src/testing/exercise.md
#, fuzzy
msgid "Exercise: Luhn Algorithm"
msgstr "Αλγόριθμος Luhn"

#: src/SUMMARY.md
#, fuzzy
msgid "Day 4: Afternoon"
msgstr "1η μέρα: Απόγευμα"

#: src/SUMMARY.md src/error-handling.md
msgid "Error Handling"
msgstr "Χειρισμός σφαλμάτων"

#: src/SUMMARY.md src/error-handling/panics.md
msgid "Panics"
msgstr "Πανικοί"

#: src/SUMMARY.md src/error-handling/try.md
#, fuzzy
msgid "Try Operator"
msgstr "Iterator"

#: src/SUMMARY.md src/error-handling/try-conversions.md
#, fuzzy
msgid "Try Conversions"
msgstr "Έμμεσες μετατροπές"

#: src/SUMMARY.md
#, fuzzy
msgid "`Error` Trait"
msgstr "Το χαρακτηριστικό «Drop»."

#: src/SUMMARY.md src/error-handling/thiserror-and-anyhow.md
#, fuzzy
msgid "`thiserror` and `anyhow`"
msgstr "«Από» και «Μέσα»."

#: src/SUMMARY.md
#, fuzzy
msgid "Exercise: Rewriting with `Result`"
msgstr "Χειρισμός δομημένου σφάλματος με «Αποτέλεσμα»."

#: src/SUMMARY.md src/unsafe-rust.md src/unsafe-rust/unsafe.md
msgid "Unsafe Rust"
msgstr "Μη ασφαλής Rust"

#: src/SUMMARY.md
#, fuzzy
msgid "Unsafe"
msgstr "Μη ασφαλής Rust"

#: src/SUMMARY.md src/unsafe-rust/dereferencing.md
msgid "Dereferencing Raw Pointers"
msgstr "Αποαναφορά δεικτών"

#: src/SUMMARY.md src/unsafe-rust/mutable-static.md
msgid "Mutable Static Variables"
msgstr "Μεταβλητές στατικές μεταβλητές"

#: src/SUMMARY.md src/unsafe-rust/unions.md
msgid "Unions"
msgstr "Σωματεία"

#: src/SUMMARY.md src/unsafe-rust/unsafe-functions.md
#, fuzzy
msgid "Unsafe Functions"
msgstr "Κλήση μη ασφαλών συναρτήσεων"

#: src/SUMMARY.md
#, fuzzy
msgid "Unsafe Traits"
msgstr "Υλοποίηση μη ασφαλών χαρακτηριστικών"

#: src/SUMMARY.md
#, fuzzy
msgid "Exercise: FFI Wrapper"
msgstr "Ασφαλές περιτύλιγμα FFI"

#: src/SUMMARY.md src/bare-metal/android.md
msgid "Android"
msgstr "Android"

#: src/SUMMARY.md src/android/setup.md src/chromium/setup.md
msgid "Setup"
msgstr "Προετοιμασία"

#: src/SUMMARY.md src/android/build-rules.md
msgid "Build Rules"
msgstr "Κανόνες Κατασκευής"

#: src/SUMMARY.md
msgid "Binary"
msgstr "Εκτελέσιμα"

#: src/SUMMARY.md
msgid "Library"
msgstr "Βιβλιοθήκες"

#: src/SUMMARY.md src/android/aidl.md
msgid "AIDL"
msgstr "AIDL"

#: src/SUMMARY.md
msgid "Interface"
msgstr "Διεπαφές"

#: src/SUMMARY.md
msgid "Implementation"
msgstr "Υλοποίηση"

#: src/SUMMARY.md
msgid "Server"
msgstr "Εξυπηρετητής"

#: src/SUMMARY.md src/android/aidl/deploy.md
msgid "Deploy"
msgstr "Deploy"

#: src/SUMMARY.md
msgid "Client"
msgstr "Πελάτης"

#: src/SUMMARY.md src/android/aidl/changing.md
msgid "Changing API"
msgstr "Αλλαγή API"

#: src/SUMMARY.md src/android/logging.md src/bare-metal/aps/logging.md
msgid "Logging"
msgstr "Καταγραφή"

#: src/SUMMARY.md src/android/interoperability.md
msgid "Interoperability"
msgstr "Διαλειτουργικότητα"

#: src/SUMMARY.md
msgid "With C"
msgstr "Με C"

#: src/SUMMARY.md
msgid "Calling C with Bindgen"
msgstr "Καλώντας C με Bindgen"

#: src/SUMMARY.md
msgid "Calling Rust from C"
msgstr "Καλώντας Rust από C"

#: src/SUMMARY.md src/android/interoperability/cpp.md
msgid "With C++"
msgstr "Με C++"

#: src/SUMMARY.md src/android/interoperability/cpp/bridge.md
#, fuzzy
msgid "The Bridge Module"
msgstr "Δομικές μονάδες τεστ"

#: src/SUMMARY.md
#, fuzzy
msgid "Rust Bridge"
msgstr "Rust Binaries"

#: src/SUMMARY.md src/android/interoperability/cpp/generated-cpp.md
msgid "Generated C++"
msgstr ""

#: src/SUMMARY.md
msgid "C++ Bridge"
msgstr ""

#: src/SUMMARY.md src/android/interoperability/cpp/shared-types.md
#, fuzzy
msgid "Shared Types"
msgstr "Βαθμωτοί Τύποι"

#: src/SUMMARY.md src/android/interoperability/cpp/shared-enums.md
msgid "Shared Enums"
msgstr ""

#: src/SUMMARY.md src/android/interoperability/cpp/rust-result.md
#, fuzzy
msgid "Rust Error Handling"
msgstr "Χειρισμός σφαλμάτων"

#: src/SUMMARY.md src/android/interoperability/cpp/cpp-exception.md
#, fuzzy
msgid "C++ Error Handling"
msgstr "Χειρισμός σφαλμάτων"

#: src/SUMMARY.md src/android/interoperability/cpp/type-mapping.md
msgid "Additional Types"
msgstr ""

#: src/SUMMARY.md
msgid "Building for Android: C++"
msgstr ""

#: src/SUMMARY.md
#, fuzzy
msgid "Building for Android: Genrules"
msgstr "Δημιουργία Android components με Rust."

#: src/SUMMARY.md
#, fuzzy
msgid "Building for Android: Rust"
msgstr "Δημιουργία Android components με Rust."

#: src/SUMMARY.md
msgid "With Java"
msgstr "Με Java"

#: src/SUMMARY.md src/exercises/android/morning.md
#: src/exercises/bare-metal/morning.md src/exercises/bare-metal/afternoon.md
#: src/exercises/concurrency/morning.md src/exercises/concurrency/afternoon.md
msgid "Exercises"
msgstr "Ασκήσεις"

#: src/SUMMARY.md
msgid "Chromium"
msgstr ""

#: src/SUMMARY.md src/chromium/cargo.md
msgid "Comparing Chromium and Cargo Ecosystems"
msgstr ""

#: src/SUMMARY.md
msgid "Policy"
msgstr ""

#: src/SUMMARY.md
#, fuzzy
msgid "Unsafe Code"
msgstr "Μη ασφαλής Rust"

#: src/SUMMARY.md src/chromium/build-rules/depending.md
msgid "Depending on Rust Code from Chromium C++"
msgstr ""

#: src/SUMMARY.md src/chromium/build-rules/vscode.md
msgid "Visual Studio Code"
msgstr ""

#: src/SUMMARY.md src/exercises/chromium/third-party.md
#, fuzzy
msgid "Exercise"
msgstr "Ασκήσεις"

#: src/SUMMARY.md src/chromium/testing/rust-gtest-interop.md
msgid "`rust_gtest_interop` Library"
msgstr ""

#: src/SUMMARY.md src/chromium/testing/build-gn.md
msgid "GN Rules for Rust Tests"
msgstr ""

#: src/SUMMARY.md src/chromium/testing/chromium-import-macro.md
msgid "`chromium::import!` Macro"
msgstr ""

#: src/SUMMARY.md src/chromium/interoperability-with-cpp.md
#, fuzzy
msgid "Interoperability with C++"
msgstr "Διαλειτουργικότητα με C"

#: src/SUMMARY.md src/chromium/interoperability-with-cpp/example-bindings.md
#, fuzzy
msgid "Example Bindings"
msgstr "Παραδείγματα"

#: src/SUMMARY.md src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid "Limitations of CXX"
msgstr ""

#: src/SUMMARY.md src/chromium/interoperability-with-cpp/error-handling.md
#, fuzzy
msgid "CXX Error Handling"
msgstr "Χειρισμός σφαλμάτων"

#: src/SUMMARY.md
#, fuzzy
msgid "Error Handling: QR Example"
msgstr "Χειρισμός σφαλμάτων"

#: src/SUMMARY.md
#, fuzzy
msgid "Error Handling: PNG Example"
msgstr "Χειρισμός σφαλμάτων"

#: src/SUMMARY.md
msgid "Using CXX in Chromium"
msgstr ""

#: src/SUMMARY.md src/chromium/adding-third-party-crates.md
msgid "Adding Third Party Crates"
msgstr ""

#: src/SUMMARY.md
msgid "Configuring Cargo.toml"
msgstr ""

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid "Configuring `gnrt_config.toml`"
msgstr ""

#: src/SUMMARY.md src/chromium/adding-third-party-crates/downloading-crates.md
msgid "Downloading Crates"
msgstr ""

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid "Generating `gn` Build Rules"
msgstr ""

#: src/SUMMARY.md src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Resolving Problems"
msgstr ""

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid "Build Scripts Which Generate Code"
msgstr ""

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid "Build Scripts Which Build C++ or Take Arbitrary Actions"
msgstr ""

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid "Depending on a Crate"
msgstr ""

#: src/SUMMARY.md
msgid "Reviews and Audits"
msgstr ""

#: src/SUMMARY.md
msgid "Checking into Chromium Source Code"
msgstr ""

#: src/SUMMARY.md src/chromium/adding-third-party-crates/keeping-up-to-date.md
msgid "Keeping Crates Up to Date"
msgstr ""

#: src/SUMMARY.md
msgid "Bringing It Together - Exercise"
msgstr ""

#: src/SUMMARY.md src/exercises/chromium/solutions.md
#, fuzzy
msgid "Exercise Solutions"
msgstr "Λύσεις"

#: src/SUMMARY.md
#, fuzzy
msgid "Bare Metal: Morning"
msgstr "Rust χωρίς λειτουργικό σύστημα: Πρωί;"

#: src/SUMMARY.md src/bare-metal/no_std.md
msgid "`no_std`"
msgstr ""

#: src/SUMMARY.md
msgid "A Minimal Example"
msgstr "Μικρό Παράδειγμα"

#: src/SUMMARY.md src/bare-metal/no_std.md src/bare-metal/alloc.md
msgid "`alloc`"
msgstr ""

#: src/SUMMARY.md src/bare-metal/microcontrollers.md
msgid "Microcontrollers"
msgstr "Μικροεπεξεργαστές"

#: src/SUMMARY.md src/bare-metal/microcontrollers/mmio.md
msgid "Raw MMIO"
msgstr ""

#: src/SUMMARY.md
msgid "PACs"
msgstr ""

#: src/SUMMARY.md
msgid "HAL Crates"
msgstr ""

#: src/SUMMARY.md
msgid "Board Support Crates"
msgstr "Crates υποστήριξης πλακετών"

#: src/SUMMARY.md
msgid "The Type State Pattern"
msgstr "Το μοτίβο Τύπου Κατάστασης"

#: src/SUMMARY.md src/bare-metal/microcontrollers/embedded-hal.md
msgid "`embedded-hal`"
msgstr ""

#: src/SUMMARY.md src/bare-metal/microcontrollers/probe-rs.md
msgid "`probe-rs` and `cargo-embed`"
msgstr ""

#: src/SUMMARY.md src/bare-metal/microcontrollers/debugging.md
msgid "Debugging"
msgstr "Αποσφαλμάτωση"

#: src/SUMMARY.md
msgid "Other Projects"
msgstr "Επιπλέον Projects"

#: src/SUMMARY.md src/exercises/bare-metal/compass.md
#: src/exercises/bare-metal/solutions-morning.md
msgid "Compass"
msgstr "Πυξίδα"

#: src/SUMMARY.md
msgid "Solutions"
msgstr "Λύσεις"

#: src/SUMMARY.md
#, fuzzy
msgid "Bare Metal: Afternoon"
msgstr "Rust χωρίς λειτουργικό σύστημα: Απόγευμα"

#: src/SUMMARY.md
msgid "Application Processors"
msgstr ""

#: src/SUMMARY.md src/bare-metal/aps/entry-point.md
msgid "Getting Ready to Rust"
msgstr ""

#: src/SUMMARY.md
msgid "Inline Assembly"
msgstr ""

#: src/SUMMARY.md
msgid "MMIO"
msgstr ""

#: src/SUMMARY.md
msgid "Let's Write a UART Driver"
msgstr "Ας γράψουμε έναν οδηγό UART"

#: src/SUMMARY.md
msgid "More Traits"
msgstr "Επιπλέον Χαρακτηριστικά"

#: src/SUMMARY.md
msgid "A Better UART Driver"
msgstr "Ένας καλύτερος οδηγός UART"

#: src/SUMMARY.md src/bare-metal/aps/better-uart/bitflags.md
msgid "Bitflags"
msgstr ""

#: src/SUMMARY.md
msgid "Multiple Registers"
msgstr "Πολλαπλοί καταχωρητές"

#: src/SUMMARY.md src/bare-metal/aps/better-uart/driver.md
msgid "Driver"
msgstr "Οδηγός"

#: src/SUMMARY.md
#, fuzzy
msgid "Using It"
msgstr "Χρήση"

#: src/SUMMARY.md src/bare-metal/aps/exceptions.md
#, fuzzy
msgid "Exceptions"
msgstr "Συναρτήσεις"

#: src/SUMMARY.md src/bare-metal/useful-crates/zerocopy.md
msgid "`zerocopy`"
msgstr ""

#: src/SUMMARY.md src/bare-metal/useful-crates/aarch64-paging.md
msgid "`aarch64-paging`"
msgstr ""

#: src/SUMMARY.md src/bare-metal/useful-crates/buddy_system_allocator.md
msgid "`buddy_system_allocator`"
msgstr ""

#: src/SUMMARY.md src/bare-metal/useful-crates/tinyvec.md
msgid "`tinyvec`"
msgstr ""

#: src/SUMMARY.md src/bare-metal/useful-crates/spin.md
#, fuzzy
msgid "`spin`"
msgstr "«στατικό»."

#: src/SUMMARY.md
msgid "`vmbase`"
msgstr ""

#: src/SUMMARY.md
msgid "RTC Driver"
msgstr "Οδηγός RTC"

#: src/SUMMARY.md
#, fuzzy
msgid "Concurrency: Morning"
msgstr "Συγχρονισμός"

#: src/SUMMARY.md src/concurrency/threads.md
msgid "Threads"
msgstr "Νήματα"

#: src/SUMMARY.md src/concurrency/scoped-threads.md
msgid "Scoped Threads"
msgstr "Νήματα με εμβέλεια"

#: src/SUMMARY.md src/concurrency/channels.md
msgid "Channels"
msgstr "Κανάλια"

#: src/SUMMARY.md src/concurrency/channels/unbounded.md
msgid "Unbounded Channels"
msgstr "Κανάλια χωρίς Όρια"

#: src/SUMMARY.md src/concurrency/channels/bounded.md
msgid "Bounded Channels"
msgstr "Κανάλια με Όρια"

#: src/SUMMARY.md src/concurrency/send-sync.md
#, fuzzy
msgid "`Send` and `Sync`"
msgstr "«Αποστολή» και «Συγχρονισμός»."

#: src/SUMMARY.md src/concurrency/send-sync/send.md
#, fuzzy
msgid "`Send`"
msgstr "«Αποστολή»."

#: src/SUMMARY.md src/concurrency/send-sync/sync.md
#, fuzzy
msgid "`Sync`"
msgstr "`Συγχρονισμός`"

#: src/SUMMARY.md src/concurrency/send-sync/examples.md
msgid "Examples"
msgstr "Παραδείγματα"

#: src/SUMMARY.md src/concurrency/shared_state.md
msgid "Shared State"
msgstr "Κοινόχρηστα Δεδομένα"

#: src/SUMMARY.md src/concurrency/shared_state/arc.md
#, fuzzy
msgid "`Arc`"
msgstr "«Τόξο»."

#: src/SUMMARY.md src/concurrency/shared_state/mutex.md
#, fuzzy
msgid "`Mutex`"
msgstr "«Mutex»."

#: src/SUMMARY.md src/memory-management/review.md
#: src/error-handling/try-conversions.md
#: src/concurrency/shared_state/example.md
msgid "Example"
msgstr "Παράδειγμα"

#: src/SUMMARY.md src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/solutions-morning.md
msgid "Dining Philosophers"
msgstr "Δείπνο με φιλόσοφους"

#: src/SUMMARY.md src/exercises/concurrency/link-checker.md
msgid "Multi-threaded Link Checker"
msgstr "Έλεγχος συνδέσμων πολλαπλών νημάτων"

#: src/SUMMARY.md
#, fuzzy
msgid "Concurrency: Afternoon"
msgstr "Συγχρονισμός"

#: src/SUMMARY.md
msgid "Async Basics"
msgstr ""

#: src/SUMMARY.md src/async/async-await.md
msgid "`async`/`await`"
msgstr ""

#: src/SUMMARY.md src/async/futures.md
msgid "Futures"
msgstr ""

#: src/SUMMARY.md src/async/runtimes.md
#, fuzzy
msgid "Runtimes"
msgstr "Εγγυήσεις χρόνου εκτέλεσης"

#: src/SUMMARY.md src/async/runtimes/tokio.md
msgid "Tokio"
msgstr ""

#: src/SUMMARY.md src/exercises/concurrency/link-checker.md src/async/tasks.md
#: src/exercises/concurrency/chat-app.md
#, fuzzy
msgid "Tasks"
msgstr "Καθήκοντα"

#: src/SUMMARY.md src/async/channels.md
#, fuzzy
msgid "Async Channels"
msgstr "Κανάλια"

#: src/SUMMARY.md
msgid "Control Flow"
msgstr "Ροή ελέγχου"

#: src/SUMMARY.md src/async/control-flow/join.md
msgid "Join"
msgstr ""

#: src/SUMMARY.md src/async/control-flow/select.md
msgid "Select"
msgstr ""

#: src/SUMMARY.md
msgid "Pitfalls"
msgstr ""

#: src/SUMMARY.md
msgid "Blocking the Executor"
msgstr ""

#: src/SUMMARY.md src/async/pitfalls/pin.md
msgid "`Pin`"
msgstr ""

#: src/SUMMARY.md src/async/pitfalls/async-traits.md
#, fuzzy
msgid "Async Traits"
msgstr "Χαρακτηριστικά"

#: src/SUMMARY.md src/async/pitfalls/cancellation.md
#, fuzzy
msgid "Cancellation"
msgstr "Εγκατάσταση"

#: src/SUMMARY.md src/exercises/concurrency/chat-app.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "Broadcast Chat Application"
msgstr ""

#: src/SUMMARY.md
msgid "Final Words"
msgstr "Κλείσιμο"

#: src/SUMMARY.md src/thanks.md
msgid "Thanks!"
msgstr "Ευχαριστήρια"

#: src/SUMMARY.md src/glossary.md
msgid "Glossary"
msgstr ""

#: src/SUMMARY.md
msgid "Other Resources"
msgstr "Επιπλέον Υλικό"

#: src/SUMMARY.md src/credits.md
#, fuzzy
msgid "Credits"
msgstr "Πιστώσεις"

#: src/index.md
msgid ""
"[![Build workflow](https://img.shields.io/github/actions/workflow/status/"
"google/comprehensive-rust/build.yml?style=flat-square)](https://github.com/"
"google/comprehensive-rust/actions/workflows/build.yml?query=branch%3Amain) [!"
"[GitHub contributors](https://img.shields.io/github/contributors/google/"
"comprehensive-rust?style=flat-square)](https://github.com/google/"
"comprehensive-rust/graphs/contributors) [![GitHub stars](https://img.shields."
"io/github/stars/google/comprehensive-rust?style=flat-square)](https://github."
"com/google/comprehensive-rust/stargazers)"
msgstr ""

#: src/index.md
#, fuzzy
msgid ""
"This is a free Rust course developed by the Android team at Google. The "
"course covers the full spectrum of Rust, from basic syntax to advanced "
"topics like generics and error handling."
msgstr ""
"Αυτό είναι ένα τετραήμερο μάθημα Rust που αναπτύχθηκε από την ομάδα Android. "
"Το μάθημα καλύπτει το πλήρες φάσμα της Rust, από τη βασική σύνταξη έως τα "
"προηγμένα θέματα όπως οι γενικευμένοι τύποι και διαχείριση σφαλμάτων. "
"Περιλαμβάνει επίσης περιεχόμενο ειδικά για Android την τελευταία ημέρα."

#: src/index.md
msgid ""
"The latest version of the course can be found at <https://google.github.io/"
"comprehensive-rust/>. If you are reading somewhere else, please check there "
"for updates."
msgstr ""

#: src/index.md
msgid ""
"The goal of the course is to teach you Rust. We assume you don't know "
"anything about Rust and hope to:"
msgstr ""
"Ο στόχος του μαθήματος είναι να σας διδάξει τη γλώσσα Rust. Υποθέτουμε ότι "
"δεν ξέρετε τίποτα σχετικά με τη Rust και ελπίζουμε να:"

#: src/index.md
msgid "Give you a comprehensive understanding of the Rust syntax and language."
msgstr ""
"Σας δώσουμε μια ολοκληρωμένη κατανόηση της σύνταξης και της γλώσσας Rust."

#: src/index.md
msgid "Enable you to modify existing programs and write new programs in Rust."
msgstr ""
"Σας καταστήσουμε ικανούς να τροποποιείτε υπάρχοντα προγράμματα και να "
"γράφετε νέα προγράμματα με τη Rust."

#: src/index.md
msgid "Show you common Rust idioms."
msgstr "Σας δείξουμε τους συνήθεις ιδιωματισμούς της Rust."

#: src/index.md
msgid "We call the first four course days Rust Fundamentals."
msgstr ""

#: src/index.md
msgid ""
"Building on this, you're invited to dive into one or more specialized topics:"
msgstr ""

#: src/index.md
msgid ""
"[Android](android.md): a half-day course on using Rust for Android platform "
"development (AOSP). This includes interoperability with C, C++, and Java."
msgstr ""

#: src/index.md
msgid ""
"[Chromium](chromium.md): a half-day course on using Rust within Chromium "
"based browsers. This includes interoperability with C++ and how to include "
"third-party crates in Chromium."
msgstr ""

#: src/index.md
msgid ""
"[Bare-metal](bare-metal.md): a whole-day class on using Rust for bare-metal "
"(embedded) development. Both microcontrollers and application processors are "
"covered."
msgstr ""

#: src/index.md
msgid ""
"[Concurrency](concurrency.md): a whole-day class on concurrency in Rust. We "
"cover both classical concurrency (preemptively scheduling using threads and "
"mutexes) and async/await concurrency (cooperative multitasking using "
"futures)."
msgstr ""

#: src/index.md
msgid "Non-Goals"
msgstr "Μη-Στόχοι"

#: src/index.md
msgid ""
"Rust is a large language and we won't be able to cover all of it in a few "
"days. Some non-goals of this course are:"
msgstr ""
"Η Rust είναι μια μεγάλη γλώσσα και δεν θα μπορούμε να την καλύψουμε όλη σε "
"λίγες μέρες. Μερικοί μη-στόχοι αυτού του μαθήματος είναι:"

#: src/index.md
#, fuzzy
msgid ""
"Learning how to develop macros: please see [Chapter 19.5 in the Rust Book]"
"(https://doc.rust-lang.org/book/ch19-06-macros.html) and [Rust by Example]"
"(https://doc.rust-lang.org/rust-by-example/macros.html) instead."
msgstr ""
"Ανάπτυξη μακροεντολών, ανατρέξτε στο [Κεφάλαιο 19.5 στο Rust Book](https://"
"doc.rust-lang.org/book/ch19-06-macros.html) και [Rust by Example](https://"
"doc.rust-lang.org/rust-by-example/macros.html) αντ' αυτού."

#: src/index.md
msgid "Assumptions"
msgstr "Υποθέσεις"

#: src/index.md
#, fuzzy
msgid ""
"The course assumes that you already know how to program. Rust is a "
"statically-typed language and we will sometimes make comparisons with C and "
"C++ to better explain or contrast the Rust approach."
msgstr ""
"Το μάθημα προϋποθέτει ότι γνωρίζετε ήδη πώς να προγραμματίζετε. Η Rust είναι "
"γλώσσα με στατικό σύτημα τύπων και μερικές φορές θα κάνουμε συγκρίσεις με C "
"και C++ για καλύτερη κατανόηση της προσέγγισης της Rust."

#: src/index.md
#, fuzzy
msgid ""
"If you know how to program in a dynamically-typed language such as Python or "
"JavaScript, then you will be able to follow along just fine too."
msgstr ""
"Εάν γνωρίζετε πώς να προγραμματίζετε σε μια γλώσσα με δυναμικό σύστημα τύπων "
"όπως Python ή JavaScript, τότε θα μπορέσετε να ακολουθήσετε άνεση."

#: src/index.md
msgid ""
"This is an example of a _speaker note_. We will use these to add additional "
"information to the slides. This could be key points which the instructor "
"should cover as well as answers to typical questions which come up in class."
msgstr ""
"Αυτό είναι ένα παράδειγμα _σημειώσεων ομιλητή_. Θα τις χρησιμοποιήσουμε για "
"να προσθέτουμε επιπλέον πληροφορίες στις διαφάνειες. Αυτές θα μπορούσαν να "
"είναι βασικά σημεία που θα πρέπει να καλύψει ο εκπαιδευτής  καθώς και "
"απαντήσεις σε συχνές ερωτήσεις που προκύπτουν στην τάξη."

#: src/running-the-course.md src/running-the-course/course-structure.md
msgid "This page is for the course instructor."
msgstr "Αυτή η σελίδα είναι για τον εκπαιδευτή του μαθήματος."

#: src/running-the-course.md
msgid ""
"Here is a bit of background information about how we've been running the "
"course internally at Google."
msgstr ""
"Ακολουθούν ορισμένες βασικές πληροφορίες σχετικά με τον τρόπο λειτουργίας "
"του μαθήματος εσωτερικά στην Google."

#: src/running-the-course.md
msgid ""
"We typically run classes from 9:00 am to 4:00 pm, with a 1 hour lunch break "
"in the middle. This leaves 3 hours for the morning class and 3 hours for the "
"afternoon class. Both sessions contain multiple breaks and time for students "
"to work on exercises."
msgstr ""

#: src/running-the-course.md
msgid "Before you run the course, you will want to:"
msgstr "Για να διεξάξετε το μάθημα, πρέπει:"

#: src/running-the-course.md
msgid ""
"Make yourself familiar with the course material. We've included speaker "
"notes to help highlight the key points (please help us by contributing more "
"speaker notes!). When presenting, you should make sure to open the speaker "
"notes in a popup (click the link with a little arrow next to \"Speaker "
"Notes\"). This way you have a clean screen to present to the class."
msgstr ""
"Εξοικειωθείτε με το υλικό του μαθήματος. Έχουμε συμπεριλάβει σημειώσεις "
"ομιλητών για να τονίσουμε τα βασικά σημεία (παρακαλούμε βοηθήστε μας "
"συνεισφέροντας περισσότερες σημειώσεις ομιλητή!). Κατά την παρουσίαση, θα "
"πρέπει να βεβαιωθείτε ότι ανοίγετε τις σημειώσεις του ομιλητή σε ένα "
"αναδυόμενο παράθυρο (κάντε κλικ στο σύνδεσμο με ένα μικρό βέλος δίπλα στο "
"\"Speaker Notes\"). Με αυτόν τον τρόπο έχετε μια καθαρή οθόνη για να "
"παρουσιάσετε στην τάξη."

#: src/running-the-course.md
#, fuzzy
msgid ""
"Decide on the dates. Since the course takes four days, we recommend that you "
"schedule the days over two weeks. Course participants have said that they "
"find it helpful to have a gap in the course since it helps them process all "
"the information we give them."
msgstr ""
"Αποφασίστε για τις ημερομηνίες. Επειδή το μάθημα είναι μεγάλο, σας "
"συνιστούμε να προγραμματίσετε τις τέσσερις ημέρες σε δύο εβδομάδες. Οι "
"προηγούμενοι συμμετέχοντες στο μάθημα θεωρούν χρήσιμο να υπάρχει ένα κενό "
"στο μάθημα, καθώς τους βοηθά να επεξεργάζονται όλες τις πληροφορίες που τους "
"δίνουμε."

#: src/running-the-course.md
#, fuzzy
msgid ""
"Find a room large enough for your in-person participants. We recommend a "
"class size of 15-25 people. That's small enough that people are comfortable "
"asking questions --- it's also small enough that one instructor will have "
"time to answer the questions. Make sure the room has _desks_ for yourself "
"and for the students: you will all need to be able to sit and work with your "
"laptops. In particular, you will be doing a lot of live-coding as an "
"instructor, so a lectern won't be very helpful for you."
msgstr ""
"Βρείτε ένα δωμάτιο αρκετά μεγάλο για όλους τους συμμετέχοντες. Προτείνουμε "
"μέγεθος τάξης 15-20 ατόμων. Είναι αρκετά μικρό ώστε οι άνθρωποι να "
"αισθάνονται άνετα να κάνουν ερωτήσεις - είναι επίσης αρκετά μικρό ώστε ένας "
"εκπαιδευτής να έχει χρόνο να απαντήσει. Βεβαιωθείτε ότι το δωμάτιο έχει "
"θρανία για εσάς και τους μαθητές: όλοι θα πρέπει να μπορείτε να καθίσετε και "
"να εργάζεστε με τους φορητούς υπολογιστές σας. Συγκεκριμένα, θα γράψετε πολύ "
"κώδικα ζωντανά ως εκπαιδευτής, επομένως ένα αναλόγιο δεν θα σας βοηθήσει "
"πολύ."

#: src/running-the-course.md
msgid ""
"On the day of your course, show up to the room a little early to set things "
"up. We recommend presenting directly using `mdbook serve` running on your "
"laptop (see the [installation instructions](https://github.com/google/"
"comprehensive-rust#building)). This ensures optimal performance with no lag "
"as you change pages. Using your laptop will also allow you to fix typos as "
"you or the course participants spot them."
msgstr ""
"Την ημέρα του μαθήματος, εμφανιστείτε στην αίθουσα νωρίς για να ρυθμίσετε τα "
"πράγματα. Συνιστούμε την απευθείας παρουσίαση χρησιμοποιώντας την υπηρεσία "
"mdbook που εκτελείται στον φορητό υπολογιστή σας (δείτε τις οδηγίες "
"εγκατάστασης). Αυτό εξασφαλίζει βέλτιστη απόδοση χωρίς καθυστέρηση καθώς "
"αλλάζετε σελίδες. Η χρήση του φορητού υπολογιστή σας θα σας επιτρέψει επίσης "
"να διορθώσετε τυπογραφικά λάθη καθώς τα εντοπίζετε εσείς ή οι συμμετέχοντες "
"στο μάθημα."

#: src/running-the-course.md
#, fuzzy
msgid ""
"Let people solve the exercises by themselves or in small groups. We "
"typically spend 30-45 minutes on exercises in the morning and in the "
"afternoon (including time to review the solutions). Make sure to ask people "
"if they're stuck or if there is anything you can help with. When you see "
"that several people have the same problem, call it out to the class and "
"offer a solution, e.g., by showing people where to find the relevant "
"information in the standard library."
msgstr ""
"Αφήστε τους μαθητές να λύσουν τις ασκήσεις μόνοι τους ή σε μικρές ομάδες. "
"Βεβαιωθείτε ότι τους ρωτάτε εάν έχουν κολλήσει ή εάν υπάρχει κάτι με το "
"οποίο μπορείτε να βοηθήσετε. Όταν δείτε ότι πολλά άτομα έχουν το ίδιο "
"πρόβλημα, αναφέρετέ το στην τάξη και προσφέρετε μια λύση, π.χ., δείχνοντας "
"στους μαθητές πού να βρουν τις σχετικές πληροφορίες στην τυπική βιβλιοθήκη."

#: src/running-the-course.md
msgid ""
"That is all, good luck running the course! We hope it will be as much fun "
"for you as it has been for us!"
msgstr ""
"Αυτό ήταν! Καλή επιτυχία στη διεξαγωγή του μαθήματος! Ελπίζουμε ότι θα είναι "
"τόσο διασκεδαστικό για εσάς όπως ήταν και για εμάς!"

#: src/running-the-course.md
msgid ""
"Please [provide feedback](https://github.com/google/comprehensive-rust/"
"discussions/86) afterwards so that we can keep improving the course. We "
"would love to hear what worked well for you and what can be made better. "
"Your students are also very welcome to [send us feedback](https://github.com/"
"google/comprehensive-rust/discussions/100)!"
msgstr ""
"Παρακαλούμε [παρέχετε σχόλια](https://github.com/google/comprehensive-rust/"
"discussions/86) μετά το μάθημα, ώστε να συνεχίσουμε να βελτιώνουμε το υλικό. "
"Θα θέλαμε να ακούσουμε τι πήγε καλά για εσάς και τι μπορεί να γίνει "
"καλύτερα. Οι μαθητές σας είναι επίσης πολύ ευπρόσδεκτοι να [μας στείλουν "
"σχόλια](https://github.com/google/comprehensive-rust/discussions/100)!"

#: src/running-the-course/course-structure.md
#, fuzzy
msgid "Rust Fundamentals"
msgstr "Rust Binaries"

#: src/running-the-course/course-structure.md
msgid ""
"The first four days make up [Rust Fundamentals](../welcome-day-1.md). The "
"days are fast paced and we cover a lot of ground!"
msgstr ""

#: src/running-the-course/course-structure.md
#, fuzzy
msgid "Course schedule:"
msgstr "Δομή Μαθήματος"

#: src/running-the-course/course-structure.md
msgid "Day 1 Morning (3 hours, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Welcome](../welcome-day-1.md) (5 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Hello, World](../hello-world.md) (20 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Types and Values](../types-and-values.md) (1 hour and 5 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Control Flow Basics](../control-flow-basics.md) (1 hour)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 1 Afternoon (2 hours and 55 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Tuples and Arrays](../tuples-and-arrays.md) (1 hour)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[References](../references.md) (50 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[User-Defined Types](../user-defined-types.md) (50 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 2 Morning (3 hours and 5 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Welcome](../welcome-day-2.md) (3 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
#, fuzzy
msgid "[Pattern Matching](../pattern-matching.md) (50 minutes)"
msgstr ""
"Δείτε το [pattern matching](../pattern-matching.md) για περισσότερες "
"λεπτομέρειες σχετικά με τα μοτίβα στο Σκουριά."

#: src/running-the-course/course-structure.md
msgid "[Methods and Traits](../methods-and-traits.md) (55 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Generics](../generics.md) (45 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
#, fuzzy
msgid "Day 2 Afternoon (3 hours, including breaks)"
msgstr "2η μέρα Απογευματινές Ασκήσεις"

#: src/running-the-course/course-structure.md
msgid "[Standard Library Types](../std-types.md) (1 hour and 10 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Standard Library Traits](../std-traits.md) (1 hour and 40 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 3 Morning (2 hours and 15 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Welcome](../welcome-day-3.md) (3 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Memory Management](../memory-management.md) (1 hour and 10 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Smart Pointers](../smart-pointers.md) (45 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 3 Afternoon (2 hours and 20 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Borrowing](../borrowing.md) (1 hour)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"[Slices and Lifetimes](../slices-and-lifetimes.md) (1 hour and 10 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 4 Morning (3 hours and 5 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Welcome](../welcome-day-4.md) (3 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Iterators](../iterators.md) (45 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Modules](../modules.md) (40 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Testing](../testing.md) (1 hour and 5 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
#, fuzzy
msgid "Day 4 Afternoon (2 hours, including breaks)"
msgstr "4η μέρα: Απόγευμα (Android)"

#: src/running-the-course/course-structure.md
msgid "[Error Handling](../error-handling.md) (45 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "[Unsafe Rust](../unsafe-rust.md) (1 hour and 5 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Deep Dives"
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"In addition to the 4-day class on Rust Fundamentals, we cover some more "
"specialized topics:"
msgstr ""

#: src/running-the-course/course-structure.md
#, fuzzy
msgid "Rust in Android"
msgstr "Rust Binaries"

#: src/running-the-course/course-structure.md
msgid ""
"The [Rust in Android](../android.md) deep dive is a half-day course on using "
"Rust for Android platform development. This includes interoperability with "
"C, C++, and Java."
msgstr ""

#: src/running-the-course/course-structure.md
#, fuzzy
msgid ""
"You will need an [AOSP checkout](https://source.android.com/docs/setup/"
"download/downloading). Make a checkout of the [course repository](https://"
"github.com/google/comprehensive-rust) on the same machine and move the `src/"
"android/` directory into the root of your AOSP checkout. This will ensure "
"that the Android build system sees the `Android.bp` files in `src/android/`."
msgstr ""
"Εάν δεν επιλέξετε τo κομμάτι του Android την 4η Ημέρα, θα χρειαστείτε ένα "
"\\[AOSP checkout\\]\\[1\\]. Δημιουργήστε ένα checkout από το \\[αποθετήριο "
"του μαθήματος\\]\\[2\\] στον ίδιο υπολογιστή και μετακινήστε τον κατάλογο "
"`src/android/` στη ρίζα του AOSP checkout σας. Αυτό θα διασφαλίσει ότι το "
"build system του Android βλέπει τα Αρχεία `Android.bp` κάτω από τον φάκελο "
"`src/android/`."

#: src/running-the-course/course-structure.md
msgid ""
"Ensure that `adb sync` works with your emulator or real device and pre-build "
"all Android examples using `src/android/build_all.sh`. Read the script to "
"see the commands it runs and make sure they work when you run them by hand."
msgstr ""
"Βεβαιωθείτε ότι το \"adb sync\" λειτουργεί με τον εξομοιωτή ή την συσκευή "
"σας και χτίστε όλα τα παραδείγματα του Android χρησιμοποιώντας το `src/"
"android/build_all.sh`. Διαβάστε το script για να δείτε τις εντολές που "
"εκτελεί και βεβαιωθείτε ότι λειτουργούν όταν τις εκτελείτε με το χέρι."

#: src/running-the-course/course-structure.md
#, fuzzy
msgid "Rust in Chromium"
msgstr "Rust Binaries"

#: src/running-the-course/course-structure.md
msgid ""
"The [Rust in Chromium](../chromium.md) deep dive is a half-day course on "
"using Rust as part of the Chromium browser. It includes using Rust in "
"Chromium's `gn` build system, bringing in third-party libraries (\"crates\") "
"and C++ interoperability."
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"You will need to be able to build Chromium --- a debug, component build is "
"[recommended](../chromium/setup.md) for speed but any build will work. "
"Ensure that you can run the Chromium browser that you've built."
msgstr ""

#: src/running-the-course/course-structure.md
#, fuzzy
msgid "Bare-Metal Rust"
msgstr "Rust χωρίς λειτουργικό σύστημα: Πρωί"

#: src/running-the-course/course-structure.md
msgid ""
"The [Bare-Metal Rust](../bare-metal.md) deep dive is a full day class on "
"using Rust for bare-metal (embedded) development. Both microcontrollers and "
"application processors are covered."
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"For the microcontroller part, you will need to buy the [BBC micro:bit]"
"(https://microbit.org/) v2 development board ahead of time. Everybody will "
"need to install a number of packages as described on the [welcome page](../"
"bare-metal.md)."
msgstr ""

#: src/running-the-course/course-structure.md
#, fuzzy
msgid "Concurrency in Rust"
msgstr "Συγχρονισμός"

#: src/running-the-course/course-structure.md
msgid ""
"The [Concurrency in Rust](../concurrency.md) deep dive is a full day class "
"on classical as well as `async`/`await` concurrency."
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"You will need a fresh crate set up and the dependencies downloaded and ready "
"to go. You can then copy/paste the examples into `src/main.rs` to experiment "
"with them:"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Format"
msgstr "Μορφή"

#: src/running-the-course/course-structure.md
msgid ""
"The course is meant to be very interactive and we recommend letting the "
"questions drive the exploration of Rust!"
msgstr ""
"Το μάθημα σχεδιάστηκε να είναι διαδραστικό και συνιστούμε να αφήσετε τις "
"ερωτήσεις να οδηγήσουν την κουβέντα γύρω από τη Rust!"

#: src/running-the-course/keyboard-shortcuts.md
msgid "There are several useful keyboard shortcuts in mdBook:"
msgstr "Υπάρχουν πολλές χρήσιμες συντομεύσεις πληκτρολογίου στο mdBook:"

#: src/running-the-course/keyboard-shortcuts.md
msgid "Arrow-Left"
msgstr "Βέλος-Αριστερά"

#: src/running-the-course/keyboard-shortcuts.md
msgid ": Navigate to the previous page."
msgstr ": Μεταβείτε στην προηγούμενη σελίδα."

#: src/running-the-course/keyboard-shortcuts.md
msgid "Arrow-Right"
msgstr "Βέλος-Δεξιά"

#: src/running-the-course/keyboard-shortcuts.md
msgid ": Navigate to the next page."
msgstr ": Μεταβείτε στην επόμενη σελίδα."

#: src/running-the-course/keyboard-shortcuts.md src/cargo/code-samples.md
msgid "Ctrl + Enter"
msgstr "Ctrl + Enter"

#: src/running-the-course/keyboard-shortcuts.md
msgid ": Execute the code sample that has focus."
msgstr ": Εκτελέστε το δείγμα κώδικα υπό εστίαση."

#: src/running-the-course/keyboard-shortcuts.md
msgid "s"
msgstr "s"

#: src/running-the-course/keyboard-shortcuts.md
msgid ": Activate the search bar."
msgstr ": Ενεργοποιήστε τη γραμμή αναζήτησης."

#: src/running-the-course/translations.md
msgid ""
"The course has been translated into other languages by a set of wonderful "
"volunteers:"
msgstr ""
"Το μάθημα έχουμε μεταφραστεί σε άλλες γλώσσες από ένα σύνολο εκπληκτικών "
"εθελοντών:"

#: src/running-the-course/translations.md
msgid ""
"[Brazilian Portuguese](https://google.github.io/comprehensive-rust/pt-BR/) "
"by [@rastringer](https://github.com/rastringer), [@hugojacob](https://github."
"com/hugojacob), [@joaovicmendes](https://github.com/joaovicmendes), and "
"[@henrif75](https://github.com/henrif75)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Chinese (Simplified)](https://google.github.io/comprehensive-rust/zh-CN/) "
"by [@suetfei](https://github.com/suetfei), [@wnghl](https://github.com/"
"wnghl), [@anlunx](https://github.com/anlunx), [@kongy](https://github.com/"
"kongy), [@noahdragon](https://github.com/noahdragon), [@superwhd](https://"
"github.com/superwhd), [@SketchK](https://github.com/SketchK), and [@nodmp]"
"(https://github.com/nodmp)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Chinese (Traditional)](https://google.github.io/comprehensive-rust/zh-TW/) "
"by [@hueich](https://github.com/hueich), [@victorhsieh](https://github.com/"
"victorhsieh), [@mingyc](https://github.com/mingyc), [@kuanhungchen](https://"
"github.com/kuanhungchen), and [@johnathan79717](https://github.com/"
"johnathan79717)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Korean](https://google.github.io/comprehensive-rust/ko/) by [@keispace]"
"(https://github.com/keispace), [@jiyongp](https://github.com/jiyongp), and "
"[@jooyunghan](https://github.com/jooyunghan)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Spanish](https://google.github.io/comprehensive-rust/es/) by [@deavid]"
"(https://github.com/deavid)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"Use the language picker in the top-right corner to switch between languages."
msgstr ""
"Χρησιμοποιήστε την επιλογή γλώσσας στην πάνω-δεξιά γωνία για να αλλάξετε "
"γλώσσα."

#: src/running-the-course/translations.md
#, fuzzy
msgid "Incomplete Translations"
msgstr "Μεταφράσεις"

#: src/running-the-course/translations.md
msgid ""
"There is a large number of in-progress translations. We link to the most "
"recently updated translations:"
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Bengali](https://google.github.io/comprehensive-rust/bn/) by [@raselmandol]"
"(https://github.com/raselmandol)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[French](https://google.github.io/comprehensive-rust/fr/) by [@KookaS]"
"(https://github.com/KookaS) and [@vcaen](https://github.com/vcaen)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[German](https://google.github.io/comprehensive-rust/de/) by [@Throvn]"
"(https://github.com/Throvn) and [@ronaldfw](https://github.com/ronaldfw)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Japanese](https://google.github.io/comprehensive-rust/ja/) by [@CoinEZ-JPN]"
"(https://github.com/CoinEZ) and [@momotaro1105](https://github.com/"
"momotaro1105)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"If you want to help with this effort, please see [our instructions](https://"
"github.com/google/comprehensive-rust/blob/main/TRANSLATIONS.md) for how to "
"get going. Translations are coordinated on the [issue tracker](https://"
"github.com/google/comprehensive-rust/issues/282)."
msgstr ""
"Εάν θέλετε να βοηθήσετε στη μεταγλώττιση δείτε τις οδηγίες μας για το πώςνα "
"ξεκινήσετε. Οι μεταφράσεις οργανώνονται στον [issue tracker](https://github."
"com/google/comprehensive-rust/issues/282)."

#: src/cargo.md
#, fuzzy
msgid ""
"When you start reading about Rust, you will soon meet [Cargo](https://doc."
"rust-lang.org/cargo/), the standard tool used in the Rust ecosystem to build "
"and run Rust applications. Here we want to give a brief overview of what "
"Cargo is and how it fits into the wider ecosystem and how it fits into this "
"training."
msgstr ""
"Όταν αρχίσετε να διαβάζετε για το Rust, σύντομα θα συναντήσετε το [Cargo]"
"(https://doc.rust-lang.org/cargo/), το τυπικό εργαλείο χρησιμοποιείται στο "
"οικοσύστημα Rust για τη δημιουργία και εκτέλεση εφαρμογών Rust. Εδώ θέλουμε "
"δώστε μια σύντομη επισκόπηση του τι είναι το Cargo και πώς ταιριάζει στο "
"ευρύτερο οικοσύστημα και πώς ταιριάζει σε αυτή την εκπαίδευση."

#: src/cargo.md
#, fuzzy
msgid "Installation"
msgstr "Εγκατάσταση"

#: src/cargo.md
msgid "**Please follow the instructions on <https://rustup.rs/>.**"
msgstr ""

#: src/cargo.md
#, fuzzy
msgid ""
"This will give you the Cargo build tool (`cargo`) and the Rust compiler "
"(`rustc`). You will also get `rustup`, a command line utility that you can "
"use to install to different compiler versions."
msgstr ""
"Μαζί με το cargo και το rustc, το Rustup θα εγκατασταθεί ως βοηθητικό "
"πρόγραμμα γραμμής εντολών που μπορείτε να χρησιμοποιήσετε για να "
"εγκαταστήσετε/εναλλάξετε αλυσίδες εργαλείων, να ρυθμίσετε τη διασταυρούμενη "
"μεταγλώττιση κ.λπ."

#: src/cargo.md
msgid ""
"After installing Rust, you should configure your editor or IDE to work with "
"Rust. Most editors do this by talking to [rust-analyzer](https://rust-"
"analyzer.github.io/), which provides auto-completion and jump-to-definition "
"functionality for [VS Code](https://code.visualstudio.com/), [Emacs](https://"
"rust-analyzer.github.io/manual.html#emacs), [Vim/Neovim](https://rust-"
"analyzer.github.io/manual.html#vimneovim), and many others. There is also a "
"different IDE available called [RustRover](https://www.jetbrains.com/rust/)."
msgstr ""

#: src/cargo.md
#, fuzzy
msgid ""
"On Debian/Ubuntu, you can also install Cargo, the Rust source and the [Rust "
"formatter](https://github.com/rust-lang/rustfmt) via `apt`. However, this "
"gets you an outdated rust version and may lead to unexpected behavior. The "
"command would be:"
msgstr ""
"Στο Debian/Ubuntu, μπορείτε να εγκαταστήσετε το Cargo και την πηγή Rust με"

#: src/cargo/rust-ecosystem.md
#, fuzzy
msgid "The Rust Ecosystem"
msgstr "Το οικοσύστημα της σκουριάς"

#: src/cargo/rust-ecosystem.md
#, fuzzy
msgid ""
"The Rust ecosystem consists of a number of tools, of which the main ones are:"
msgstr ""
"Το οικοσύστημα Rust αποτελείται από μια σειρά από εργαλεία, από τα οποία τα "
"κυριότερα είναι:"

#: src/cargo/rust-ecosystem.md
#, fuzzy
msgid ""
"`rustc`: the Rust compiler which turns `.rs` files into binaries and other "
"intermediate formats."
msgstr ""
"«rustup»: το πρόγραμμα εγκατάστασης και ενημέρωσης της αλυσίδας εργαλείων "
"Rust. Αυτό το εργαλείο χρησιμοποιείται για να εγκαταστήστε και ενημερώστε τα "
"«rustc» και «cargo» όταν κυκλοφορήσουν νέες εκδόσεις του Rust. Επιπλέον, το "
"\"rustup\" μπορεί επίσης να κατεβάσει τεκμηρίωση για το πρότυπο βιβλιοθήκη. "
"Μπορείτε να εγκαταστήσετε πολλές εκδόσεις του Rust ταυτόχρονα και το "
"\"rustup\". θα σας επιτρέψει να κάνετε εναλλαγή μεταξύ τους ανάλογα με τις "
"ανάγκες."

#: src/cargo/rust-ecosystem.md
msgid ""
"`cargo`: the Rust dependency manager and build tool. Cargo knows how to "
"download dependencies, usually hosted on <https://crates.io>, and it will "
"pass them to `rustc` when building your project. Cargo also comes with a "
"built-in test runner which is used to execute unit tests."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"`rustup`: the Rust toolchain installer and updater. This tool is used to "
"install and update `rustc` and `cargo` when new versions of Rust are "
"released. In addition, `rustup` can also download documentation for the "
"standard library. You can have multiple versions of Rust installed at once "
"and `rustup` will let you switch between them as needed."
msgstr ""

#: src/cargo/rust-ecosystem.md src/hello-world/hello-world.md
#: src/tuples-and-arrays/tuples-and-arrays.md src/references/exclusive.md
#: src/pattern-matching/destructuring.md src/memory-management/move.md
#: src/error-handling/try.md src/android/setup.md src/concurrency/threads.md
#: src/async/async-await.md
#, fuzzy
msgid "Key points:"
msgstr "Βασικά σημεία:"

#: src/cargo/rust-ecosystem.md
msgid ""
"Rust has a rapid release schedule with a new release coming out every six "
"weeks. New releases maintain backwards compatibility with old releases --- "
"plus they enable new functionality."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"There are three release channels: \"stable\", \"beta\", and \"nightly\"."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"New features are being tested on \"nightly\", \"beta\" is what becomes "
"\"stable\" every six weeks."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"Dependencies can also be resolved from alternative [registries](https://doc."
"rust-lang.org/cargo/reference/registries.html), git, folders, and more."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"Rust also has [editions](https://doc.rust-lang.org/edition-guide/): the "
"current edition is Rust 2021. Previous editions were Rust 2015 and Rust 2018."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"The editions are allowed to make backwards incompatible changes to the "
"language."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"To prevent breaking code, editions are opt-in: you select the edition for "
"your crate via the `Cargo.toml` file."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"To avoid splitting the ecosystem, Rust compilers can mix code written for "
"different editions."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"Mention that it is quite rare to ever use the compiler directly not through "
"`cargo` (most users never do)."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"It might be worth alluding that Cargo itself is an extremely powerful and "
"comprehensive tool. It is capable of many advanced features including but "
"not limited to:"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid "Project/package structure"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid "[workspaces](https://doc.rust-lang.org/cargo/reference/workspaces.html)"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid "Dev Dependencies and Runtime Dependency management/caching"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"[build scripting](https://doc.rust-lang.org/cargo/reference/build-scripts."
"html)"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"[global installation](https://doc.rust-lang.org/cargo/commands/cargo-install."
"html)"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"It is also extensible with sub command plugins as well (such as [cargo "
"clippy](https://github.com/rust-lang/rust-clippy))."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"Read more from the [official Cargo Book](https://doc.rust-lang.org/cargo/)"
msgstr ""

#: src/cargo/code-samples.md
#, fuzzy
msgid "Code Samples in This Training"
msgstr "Δείγματα κώδικα σε αυτήν την εκπαίδευση"

#: src/cargo/code-samples.md
#, fuzzy
msgid ""
"For this training, we will mostly explore the Rust language through examples "
"which can be executed through your browser. This makes the setup much easier "
"and ensures a consistent experience for everyone."
msgstr ""
"Για αυτήν την εκπαίδευση, θα εξερευνήσουμε κυρίως τη γλώσσα Rust μέσω "
"παραδειγμάτων που μπορεί να εκτελεστεί μέσω του προγράμματος περιήγησής σας. "
"Αυτό κάνει τη ρύθμιση πολύ πιο εύκολη και εξασφαλίζει μια συνεπή εμπειρία "
"για όλους."

#: src/cargo/code-samples.md
#, fuzzy
msgid ""
"Installing Cargo is still encouraged: it will make it easier for you to do "
"the exercises. On the last day, we will do a larger exercise which shows you "
"how to work with dependencies and for that you need Cargo."
msgstr ""
"Η εγκατάσταση Cargo εξακολουθεί να ενθαρρύνεται: θα σας διευκολύνει να το "
"κάνετε γυμνάσια. Την τελευταία μέρα, θα κάνουμε μια μεγαλύτερη άσκηση που "
"σας δείχνει πώς να το κάνετε εργαστείτε με εξαρτήσεις και για αυτό "
"χρειάζεστε Cargo."

#: src/cargo/code-samples.md
#, fuzzy
msgid "The code blocks in this course are fully interactive:"
msgstr "Τα μπλοκ κώδικα σε αυτό το μάθημα είναι πλήρως διαδραστικά:"

#: src/cargo/code-samples.md src/cargo/running-locally.md
msgid "\"Edit me!\""
msgstr ""

#: src/cargo/code-samples.md
#, fuzzy
msgid "You can use "
msgstr "Μπορείτε να χρησιμοποιήσετε το "

#: src/cargo/code-samples.md
#, fuzzy
msgid " to execute the code when focus is in the text box."
msgstr ""
" για να εκτελέσετε τον κώδικα όταν η εστίαση βρίσκεται στο πλαίσιο κειμένου."

#: src/cargo/code-samples.md
#, fuzzy
msgid ""
"Most code samples are editable like shown above. A few code samples are not "
"editable for various reasons:"
msgstr ""
"Τα περισσότερα δείγματα κώδικα είναι επεξεργάσιμα όπως φαίνεται παραπάνω. "
"Μερικά δείγματα κώδικα δεν είναι επεξεργάσιμα για διάφορους λόγους:"

#: src/cargo/code-samples.md
#, fuzzy
msgid ""
"The embedded playgrounds cannot execute unit tests. Copy-paste the code and "
"open it in the real Playground to demonstrate unit tests."
msgstr ""
"Οι ενσωματωμένες παιδικές χαρές χάνουν την κατάστασή τους τη στιγμή που "
"πλοηγείστε μακριά από τη σελίδα! Αυτός είναι ο λόγος που πρέπει οι μαθητές "
"λύστε τις ασκήσεις χρησιμοποιώντας τοπική εγκατάσταση Rust ή μέσω του "
"Παιδική χαρά."

#: src/cargo/code-samples.md
msgid ""
"The embedded playgrounds lose their state the moment you navigate away from "
"the page! This is the reason that the students should solve the exercises "
"using a local Rust installation or via the Playground."
msgstr ""

#: src/cargo/running-locally.md
#, fuzzy
msgid "Running Code Locally with Cargo"
msgstr "Κωδικός λειτουργίας τοπικά με φορτίο"

#: src/cargo/running-locally.md
#, fuzzy
msgid ""
"If you want to experiment with the code on your own system, then you will "
"need to first install Rust. Do this by following the [instructions in the "
"Rust Book](https://doc.rust-lang.org/book/ch01-01-installation.html). This "
"should give you a working `rustc` and `cargo`. At the time of writing, the "
"latest stable Rust release has these version numbers:"
msgstr ""
"Εάν θέλετε να πειραματιστείτε με τον κώδικα στο δικό σας σύστημα, τότε θα "
"χρειαστείτε για να εγκαταστήσετε πρώτα το Rust. Κάντε αυτό ακολουθώντας τις "
"[οδηγίες στο Rust Βιβλίο](https://doc.rust-lang.org/book/ch01-01-"
"installation.html). Αυτό θα σας δώσει ένα λειτουργικό «rustc» και «cargo». "
"Την εποχή του γράφοντας, η τελευταία σταθερή έκδοση Rust έχει αυτούς τους "
"αριθμούς έκδοσης:"

#: src/cargo/running-locally.md
msgid ""
"You can use any later version too since Rust maintains backwards "
"compatibility."
msgstr ""

#: src/cargo/running-locally.md
#, fuzzy
msgid ""
"With this in place, follow these steps to build a Rust binary from one of "
"the examples in this training:"
msgstr ""
"Εφόσον υπάρχει αυτό, ακολουθήστε αυτά τα βήματα για να δημιουργήσετε ένα "
"δυαδικό αρχείο Rust από ένα από τα παραδείγματα αυτής της εκπαίδευσης:"

#: src/cargo/running-locally.md
msgid "Click the \"Copy to clipboard\" button on the example you want to copy."
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"Use `cargo new exercise` to create a new `exercise/` directory for your code:"
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"Navigate into `exercise/` and use `cargo run` to build and run your binary:"
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"Replace the boiler-plate code in `src/main.rs` with your own code. For "
"example, using the example on the previous page, make `src/main.rs` look like"
msgstr ""

#: src/cargo/running-locally.md
msgid "Use `cargo run` to build and run your updated binary:"
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"Use `cargo check` to quickly check your project for errors, use `cargo "
"build` to compile it without running it. You will find the output in `target/"
"debug/` for a normal debug build. Use `cargo build --release` to produce an "
"optimized release build in `target/release/`."
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"You can add dependencies for your project by editing `Cargo.toml`. When you "
"run `cargo` commands, it will automatically download and compile missing "
"dependencies for you."
msgstr ""

#: src/cargo/running-locally.md
#, fuzzy
msgid ""
"Try to encourage the class participants to install Cargo and use a local "
"editor. It will make their life easier since they will have a normal "
"development environment."
msgstr ""
"Προσπαθήστε να ενθαρρύνετε τους συμμετέχοντες στην τάξη να εγκαταστήσουν το "
"Cargo και χρησιμοποιήστε το α τοπικός συντάκτης. Θα τους κάνει τη ζωή πιο "
"εύκολη αφού θα έχουν α κανονικό περιβάλλον ανάπτυξης."

#: src/welcome-day-1.md
#, fuzzy
msgid "Welcome to Day 1"
msgstr "Καλώς ήρθατε στην Ημέρα 1"

#: src/welcome-day-1.md
#, fuzzy
msgid ""
"This is the first day of Rust Fundamentals. We will cover a lot of ground "
"today:"
msgstr ""
"Αυτή είναι η πρώτη μέρα του Comprehensive Rust. Θα καλύψουμε πολύ έδαφος "
"σήμερα:"

#: src/welcome-day-1.md
msgid ""
"Basic Rust syntax: variables, scalar and compound types, enums, structs, "
"references, functions, and methods."
msgstr ""

#: src/welcome-day-1.md
#, fuzzy
msgid "Types and type inference."
msgstr "Συμπερασμός Τύπων"

#: src/welcome-day-1.md
msgid "Control flow constructs: loops, conditionals, and so on."
msgstr ""

#: src/welcome-day-1.md
msgid "User-defined types: structs and enums."
msgstr ""

#: src/welcome-day-1.md
msgid "Pattern matching: destructuring enums, structs, and arrays."
msgstr ""

#: src/welcome-day-1.md src/welcome-day-2.md src/welcome-day-3.md
#: src/welcome-day-4.md
msgid "Schedule"
msgstr ""

#: src/welcome-day-1.md src/welcome-day-1-afternoon.md src/welcome-day-2.md
#: src/welcome-day-2-afternoon.md src/welcome-day-3.md
#: src/welcome-day-3-afternoon.md src/welcome-day-4.md
#: src/welcome-day-4-afternoon.md
msgid "In this session:"
msgstr ""

#: src/welcome-day-1.md
msgid "[Welcome](./welcome-day-1.md) (5 minutes)"
msgstr ""

#: src/welcome-day-1.md
msgid "[Hello, World](./hello-world.md) (20 minutes)"
msgstr ""

#: src/welcome-day-1.md
msgid "[Types and Values](./types-and-values.md) (1 hour and 5 minutes)"
msgstr ""

#: src/welcome-day-1.md
msgid "[Control Flow Basics](./control-flow-basics.md) (1 hour)"
msgstr ""

#: src/welcome-day-1.md src/welcome-day-2-afternoon.md
msgid "Including 10 minute breaks, this session should take about 3 hours"
msgstr ""

#: src/welcome-day-1.md
#, fuzzy
msgid "Please remind the students that:"
msgstr "Υπενθυμίστε στους μαθητές ότι:"

#: src/welcome-day-1.md
#, fuzzy
msgid ""
"They should ask questions when they get them, don't save them to the end."
msgstr ""
"Θα πρέπει να κάνουν ερωτήσεις όταν τις πάρουν, μην τις αποθηκεύσετε μέχρι το "
"τέλος."

#: src/welcome-day-1.md
#, fuzzy
msgid ""
"The class is meant to be interactive and discussions are very much "
"encouraged!"
msgstr ""
"Η τάξη προορίζεται να είναι διαδραστική και οι συζητήσεις ενθαρρύνονται πολύ!"

#: src/welcome-day-1.md
#, fuzzy
msgid ""
"As an instructor, you should try to keep the discussions relevant, i.e., "
"keep the discussions related to how Rust does things vs some other language. "
"It can be hard to find the right balance, but err on the side of allowing "
"discussions since they engage people much more than one-way communication."
msgstr ""
"Ως εκπαιδευτής, θα πρέπει να προσπαθήσετε να διατηρήσετε τις συζητήσεις "
"σχετικές, π.χ. κρατήστε τη σχετική με το πώς κάνει τα πράγματα ο Rust σε "
"σχέση με κάποια άλλη γλώσσα. Μπορεί να είναι δύσκολο να βρεις τη σωστή "
"ισορροπία, αλλά σφάλλησε να επιτρέψεις συζητήσεις αφού εμπλέκουν τους "
"ανθρώπους πολύ περισσότερο από τη μονόδρομη επικοινωνία."

#: src/welcome-day-1.md
#, fuzzy
msgid ""
"The questions will likely mean that we talk about things ahead of the slides."
msgstr ""
"Οι ερωτήσεις πιθανότατα θα σημαίνουν ότι είμαστε για τα πράγματα πριν από "
"τις διαφάνειες."

#: src/welcome-day-1.md
#, fuzzy
msgid ""
"This is perfectly okay! Repetition is an important part of learning. "
"Remember that the slides are just a support and you are free to skip them as "
"you like."
msgstr ""
"Αυτό είναι απολύτως εντάξει! Η επανάληψη είναι ένα σημαντικό μέρος της "
"κλίσης. Θυμάμαι ότι οι διαφάνειες είναι απλώς μια υποστήριξη και είστε "
"ελεύθεροι να τις παραλείψετε όπως εσείς αρέσει."

#: src/welcome-day-1.md
msgid ""
"The idea for the first day is to show the \"basic\" things in Rust that "
"should have immediate parallels in other languages. The more advanced parts "
"of Rust come on the subsequent days."
msgstr ""

#: src/welcome-day-1.md
msgid ""
"If you're teaching this in a classroom, this is a good place to go over the "
"schedule. Note that there is an exercise at the end of each segment, "
"followed by a break. Plan to cover the exercise solution after the break. "
"The times listed here are a suggestion in order to keep the course on "
"schedule. Feel free to be flexible and adjust as necessary!"
msgstr ""

#: src/hello-world.md src/types-and-values.md src/control-flow-basics.md
#: src/tuples-and-arrays.md src/references.md src/user-defined-types.md
#: src/pattern-matching.md src/methods-and-traits.md src/generics.md
#: src/std-types.md src/std-traits.md src/memory-management.md
#: src/smart-pointers.md src/borrowing.md src/slices-and-lifetimes.md
#: src/iterators.md src/modules.md src/testing.md src/error-handling.md
#: src/unsafe-rust.md
msgid "In this segment:"
msgstr ""

#: src/hello-world.md
msgid "[What is Rust?](./hello-world/what-is-rust.md) (10 minutes)"
msgstr ""

#: src/hello-world.md
msgid "[Hello, World](./hello-world/hello-world.md) (5 minutes)"
msgstr ""

#: src/hello-world.md
msgid "[Benefits of Rust](./hello-world/benefits.md) (3 minutes)"
msgstr ""

#: src/hello-world.md
msgid "[Playground](./hello-world/playground.md) (2 minutes)"
msgstr ""

#: src/hello-world.md
msgid "This segment should take about 20 minutes"
msgstr ""

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid ""
"Rust is a new programming language which had its [1.0 release in 2015]"
"(https://blog.rust-lang.org/2015/05/15/Rust-1.0.html):"
msgstr ""
"Η Rust είναι μια νέα γλώσσα προγραμματισμού που κυκλοφόρησε το 1.0 το 2015:"

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "Rust is a statically compiled language in a similar role as C++"
msgstr ""
"Η Rust είναι μια στατικά μεταγλωττισμένη γλώσσα με παρόμοιο ρόλο με τη C++"

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "`rustc` uses LLVM as its backend."
msgstr "Το \"rustc\" χρησιμοποιεί το LLVM ως backend του."

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid ""
"Rust supports many [platforms and architectures](https://doc.rust-lang.org/"
"nightly/rustc/platform-support.html):"
msgstr ""
"Το Rust υποστηρίζει πολλές [πλατφόρμες και αρχιτεκτονικές](https://doc.rust-"
"lang.org/nightly/rustc/platform-support.html):"

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "x86, ARM, WebAssembly, ..."
msgstr "x86, ARM, WebAssembly, ..."

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "Linux, Mac, Windows, ..."
msgstr "Linux, Mac, Windows, ..."

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "Rust is used for a wide range of devices:"
msgstr "Το Rust χρησιμοποιείται για ένα ευρύ φάσμα συσκευών:"

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "firmware and boot loaders,"
msgstr "υλικολογισμικό και φορτωτές εκκίνησης,"

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "smart displays,"
msgstr "έξυπνες οθόνες,"

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "mobile phones,"
msgstr "κινητά τηλέφωνα,"

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "desktops,"
msgstr "επιτραπέζιοι υπολογιστές,"

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "servers."
msgstr "διακομιστές."

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "Rust fits in the same area as C++:"
msgstr "Η σκουριά ταιριάζει στην ίδια περιοχή με το C++:"

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "High flexibility."
msgstr "Υψηλή ευελιξία."

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "High level of control."
msgstr "Υψηλό επίπεδο ελέγχου."

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid ""
"Can be scaled down to very constrained devices such as microcontrollers."
msgstr "Μπορεί να μειωθεί σε πολύ περιορισμένες συσκευές όπως κινητά τηλέφωνα."

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "Has no runtime or garbage collection."
msgstr "Δεν έχει χρόνο εκτέλεσης ή συλλογή σκουπιδιών."

#: src/hello-world/what-is-rust.md
#, fuzzy
msgid "Focuses on reliability and safety without sacrificing performance."
msgstr ""
"Εστιάζει στην αξιοπιστία και την ασφάλεια χωρίς να θυσιάζει την απόδοση."

#: src/hello-world/hello-world.md
#, fuzzy
msgid ""
"Let us jump into the simplest possible Rust program, a classic Hello World "
"program:"
msgstr ""
"Ας μεταβούμε στο απλούστερο δυνατό πρόγραμμα Rust, ένα κλασικό Hello World "
"πρόγραμμα:"

#: src/hello-world/hello-world.md
msgid "\"Hello 🌍!\""
msgstr ""

#: src/hello-world/hello-world.md
#, fuzzy
msgid "What you see:"
msgstr "Τι βλέπεις:"

#: src/hello-world/hello-world.md
#, fuzzy
msgid "Functions are introduced with `fn`."
msgstr "Οι συναρτήσεις εισάγονται με το «fn»."

#: src/hello-world/hello-world.md
#, fuzzy
msgid "Blocks are delimited by curly braces like in C and C++."
msgstr "Τα μπλοκ οριοθετούνται με σγουρά τιράντες όπως στο C και το C++."

#: src/hello-world/hello-world.md
#, fuzzy
msgid "The `main` function is the entry point of the program."
msgstr "Η λειτουργία «κύρια» είναι το σημείο εισόδου του προγράμματος."

#: src/hello-world/hello-world.md
#, fuzzy
msgid "Rust has hygienic macros, `println!` is an example of this."
msgstr ""
"Το Rust έχει υγιεινές μακροεντολές, το «println!» είναι ένα παράδειγμα αυτού."

#: src/hello-world/hello-world.md
#, fuzzy
msgid "Rust strings are UTF-8 encoded and can contain any Unicode character."
msgstr ""
"Οι συμβολοσειρές Rust έχουν κωδικοποίηση UTF-8 και μπορούν να περιέχουν "
"οποιονδήποτε χαρακτήρα Unicode."

#: src/hello-world/hello-world.md
#, fuzzy
msgid ""
"This slide tries to make the students comfortable with Rust code. They will "
"see a ton of it over the next four days so we start small with something "
"familiar."
msgstr ""
"Αυτή η διαφάνεια προσπαθεί να κάνει τους μαθητές άνετα με τον κώδικα Rust. "
"Θα δουν ένας τόνος από αυτό τις επόμενες τέσσερις ημέρες, οπότε ξεκινάμε "
"μικρά με κάτι οικείο."

#: src/hello-world/hello-world.md
msgid ""
"Rust is very much like other languages in the C/C++/Java tradition. It is "
"imperative and it doesn't try to reinvent things unless absolutely necessary."
msgstr ""

#: src/hello-world/hello-world.md
msgid "Rust is modern with full support for things like Unicode."
msgstr ""

#: src/hello-world/hello-world.md
msgid ""
"Rust uses macros for situations where you want to have a variable number of "
"arguments (no function [overloading](../control-flow-basics/functions.md))."
msgstr ""

#: src/hello-world/hello-world.md
msgid ""
"Macros being 'hygienic' means they don't accidentally capture identifiers "
"from the scope they are used in. Rust macros are actually only [partially "
"hygienic](https://veykril.github.io/tlborm/decl-macros/minutiae/hygiene."
"html)."
msgstr ""

#: src/hello-world/hello-world.md
msgid ""
"Rust is multi-paradigm. For example, it has powerful [object-oriented "
"programming features](https://doc.rust-lang.org/book/ch17-00-oop.html), and, "
"while it is not a functional language, it includes a range of [functional "
"concepts](https://doc.rust-lang.org/book/ch13-00-functional-features.html)."
msgstr ""

#: src/hello-world/benefits.md
#, fuzzy
msgid "Some unique selling points of Rust:"
msgstr "Μερικά μοναδικά σημεία πώλησης του Rust:"

#: src/hello-world/benefits.md
msgid ""
"_Compile time memory safety_ - whole classes of memory bugs are prevented at "
"compile time"
msgstr ""

#: src/hello-world/benefits.md
#, fuzzy
msgid "No uninitialized variables."
msgstr "Δεν υπάρχουν μη αρχικοποιημένες μεταβλητές."

#: src/hello-world/benefits.md
#, fuzzy
msgid "No double-frees."
msgstr "Χωρίς διπλό δωρεάν."

#: src/hello-world/benefits.md
#, fuzzy
msgid "No use-after-free."
msgstr "Καμία χρήση-μετά-δωρεάν."

#: src/hello-world/benefits.md
#, fuzzy
msgid "No `NULL` pointers."
msgstr "Δεν υπάρχουν δείκτες «NULL»."

#: src/hello-world/benefits.md
#, fuzzy
msgid "No forgotten locked mutexes."
msgstr "Όχι ξεχασμένα κλειδωμένα mutexes."

#: src/hello-world/benefits.md
#, fuzzy
msgid "No data races between threads."
msgstr "Δεν υπάρχουν αγώνες δεδομένων μεταξύ των νημάτων."

#: src/hello-world/benefits.md
#, fuzzy
msgid "No iterator invalidation."
msgstr "Χωρίς ακύρωση επαναληπτικού."

#: src/hello-world/benefits.md
msgid ""
"_No undefined runtime behavior_ - what a Rust statement does is never left "
"unspecified"
msgstr ""

#: src/hello-world/benefits.md
#, fuzzy
msgid "Array access is bounds checked."
msgstr "Η πρόσβαση σε πίνακα έχει επιλεγεί τα όρια."

#: src/hello-world/benefits.md
#, fuzzy
msgid "Integer overflow is defined (panic or wrap-around)."
msgstr "Ορίζεται υπερχείλιση ακέραιου αριθμού."

#: src/hello-world/benefits.md
msgid ""
"_Modern language features_ - as expressive and ergonomic as higher-level "
"languages"
msgstr ""

#: src/hello-world/benefits.md
#, fuzzy
msgid "Enums and pattern matching."
msgstr "Αριθμοί και αντιστοίχιση μοτίβων."

#: src/hello-world/benefits.md
#, fuzzy
msgid "Generics."
msgstr "Γενόσημα."

#: src/hello-world/benefits.md
#, fuzzy
msgid "No overhead FFI."
msgstr "Όχι γενικά FFI."

#: src/hello-world/benefits.md
#, fuzzy
msgid "Zero-cost abstractions."
msgstr "Αφαιρέσεις μηδενικού κόστους."

#: src/hello-world/benefits.md
#, fuzzy
msgid "Great compiler errors."
msgstr "Μεγάλα λάθη μεταγλωττιστή."

#: src/hello-world/benefits.md
#, fuzzy
msgid "Built-in dependency manager."
msgstr "Ενσωματωμένος διαχειριστής εξαρτήσεων."

#: src/hello-world/benefits.md
#, fuzzy
msgid "Built-in support for testing."
msgstr "Ενσωματωμένη υποστήριξη για δοκιμές."

#: src/hello-world/benefits.md
#, fuzzy
msgid "Excellent Language Server Protocol support."
msgstr "Εξαιρετική υποστήριξη πρωτοκόλλου διακομιστή γλώσσας."

#: src/hello-world/benefits.md
msgid ""
"Do not spend much time here. All of these points will be covered in more "
"depth later."
msgstr ""

#: src/hello-world/benefits.md
#, fuzzy
msgid ""
"Make sure to ask the class which languages they have experience with. "
"Depending on the answer you can highlight different features of Rust:"
msgstr ""
"Φροντίστε να ρωτήσετε την τάξη με ποιες γλώσσες έχουν εμπειρία. Σε συνάρτηση "
"στην απάντηση μπορείτε να επισημάνετε διαφορετικά χαρακτηριστικά του Rust:"

#: src/hello-world/benefits.md
#, fuzzy
msgid ""
"Experience with C or C++: Rust eliminates a whole class of _runtime errors_ "
"via the borrow checker. You get performance like in C and C++, but you don't "
"have the memory unsafety issues. In addition, you get a modern language with "
"constructs like pattern matching and built-in dependency management."
msgstr ""
"Εμπειρία με Java, Go, Python, JavaScript...: Έχετε την ίδια ασφάλεια μνήμης "
"όπως σε αυτές τις γλώσσες, συν ένα παρόμοιο γλωσσικό συναίσθημα υψηλού "
"επιπέδου. Επιπλέον έχετε γρήγορη και προβλέψιμη απόδοση όπως C και C++ "
"(χωρίς σκουπιδοσυλλέκτη) καθώς και πρόσβαση σε υλικό χαμηλού επιπέδου (σε "
"περίπτωση που το χρειάζεστε)"

#: src/hello-world/benefits.md
msgid ""
"Experience with Java, Go, Python, JavaScript...: You get the same memory "
"safety as in those languages, plus a similar high-level language feeling. In "
"addition you get fast and predictable performance like C and C++ (no garbage "
"collector) as well as access to low-level hardware (should you need it)"
msgstr ""

#: src/hello-world/playground.md
msgid ""
"The [Rust Playground](https://play.rust-lang.org/) provides an easy way to "
"run short Rust programs, and is the basis for the examples and exercises in "
"this course. Try running the \"hello-world\" program it starts with. It "
"comes with a few handy features:"
msgstr ""

#: src/hello-world/playground.md
msgid ""
"Under \"Tools\", use the `rustfmt` option to format your code in the "
"\"standard\" way."
msgstr ""

#: src/hello-world/playground.md
msgid ""
"Rust has two main \"profiles\" for generating code: Debug (extra runtime "
"checks, less optimization) and Release (fewer runtime checks, lots of "
"optimization). These are accessible under \"Debug\" at the top."
msgstr ""

#: src/hello-world/playground.md
msgid ""
"If you're interested, use \"ASM\" under \"...\" to see the generated "
"assembly code."
msgstr ""

#: src/hello-world/playground.md
msgid ""
"As students head into the break, encourage them to open up the playground "
"and experiment a little. Encourage them to keep the tab open and try things "
"out during the rest of the course. This is particularly helpful for advanced "
"students who want to know more about Rust's optimizations or generated "
"assembly."
msgstr ""

#: src/types-and-values.md
msgid "[Variables](./types-and-values/variables.md) (5 minutes)"
msgstr ""

#: src/types-and-values.md
msgid "[Values](./types-and-values/values.md) (10 minutes)"
msgstr ""

#: src/types-and-values.md
msgid "[Arithmetic](./types-and-values/arithmetic.md) (5 minutes)"
msgstr ""

#: src/types-and-values.md
msgid "[Strings](./types-and-values/strings.md) (10 minutes)"
msgstr ""

#: src/types-and-values.md
msgid "[Type Inference](./types-and-values/inference.md) (5 minutes)"
msgstr ""

#: src/types-and-values.md
msgid "[Exercise: Fibonacci](./types-and-values/exercise.md) (30 minutes)"
msgstr ""

#: src/types-and-values.md src/testing.md src/unsafe-rust.md
msgid "This segment should take about 1 hour and 5 minutes"
msgstr ""

#: src/types-and-values/variables.md
#, fuzzy
msgid ""
"Rust provides type safety via static typing. Variable bindings are made with "
"`let`:"
msgstr ""
"Το Rust παρέχει ασφάλεια τύπου μέσω στατικής πληκτρολόγησης. Οι δεσμεύσεις "
"μεταβλητών είναι αμετάβλητες κατά Προκαθορισμένο:"

#: src/types-and-values/variables.md src/control-flow-basics/loops.md
#: src/control-flow-basics/break-continue.md
#: src/control-flow-basics/blocks-and-scopes.md
msgid "\"x: {x}\""
msgstr ""

#: src/types-and-values/variables.md
msgid ""
"// x = 20;\n"
"    // println!(\"x: {x}\");\n"
msgstr ""

#: src/types-and-values/variables.md
msgid ""
"Uncomment the `x = 20` to demonstrate that variables are immutable by "
"default. Add the `mut` keyword to allow changes."
msgstr ""

#: src/types-and-values/variables.md
msgid ""
"The `i32` here is the type of the variable. This must be known at compile "
"time, but type inference (covered later) allows the programmer to omit it in "
"many cases."
msgstr ""

#: src/types-and-values/values.md
msgid ""
"Here are some basic built-in types, and the syntax for literal values of "
"each type."
msgstr ""

#: src/types-and-values/values.md src/tuples-and-arrays/tuples-and-arrays.md
#: src/unsafe-rust/exercise.md
#, fuzzy
msgid "Types"
msgstr ""
"\\| | Τύποι | Κυριολεκτικά | "
"\\|------------------------------------------------- "
"-------------------------------------------------- --| \\| Υπογεγραμμένοι "
"ακέραιοι αριθμοί | `i8`, `i16`, `i32`, `i64`, `i128`, `isize` | `-10`, `0`, "
"`1_000`, `123i64` | \\| Ανυπόγραφοι ακέραιοι αριθμοί | «u8», «u16», «u32», "
"«u64», «u128», «χρήση» | `0`, `123`, `10u16` | \\| Αριθμοί κινητής "
"υποδιαστολής | `f32`, `f64` | `3,14`, `-10,0e20`, `2f32` | \\| Χορδές | "
"`&str` | `\"foo\"`, `r#\"\\\\\"#` | \\| Βαθμωτές τιμές Unicode | `χαρ` | "
"`'a', `'α'`, `'∞'`| | Συμβολοσειρές byte |`&\\[u8\\]`|`b\"abc\"`, `br#\" \" "
"\"#\" | \\| Booleans | «μπουλ» | \"αληθές\", \"ψευδές\" |"

#: src/types-and-values/values.md src/tuples-and-arrays/tuples-and-arrays.md
msgid "Literals"
msgstr ""

#: src/types-and-values/values.md
msgid "Signed integers"
msgstr ""

#: src/types-and-values/values.md
msgid "`i8`, `i16`, `i32`, `i64`, `i128`, `isize`"
msgstr ""

#: src/types-and-values/values.md
msgid "`-10`, `0`, `1_000`, `123_i64`"
msgstr ""

#: src/types-and-values/values.md
msgid "Unsigned integers"
msgstr ""

#: src/types-and-values/values.md
msgid "`u8`, `u16`, `u32`, `u64`, `u128`, `usize`"
msgstr ""

#: src/types-and-values/values.md
msgid "`0`, `123`, `10_u16`"
msgstr ""

#: src/types-and-values/values.md
msgid "Floating point numbers"
msgstr ""

#: src/types-and-values/values.md
msgid "`f32`, `f64`"
msgstr ""

#: src/types-and-values/values.md
msgid "`3.14`, `-10.0e20`, `2_f32`"
msgstr ""

#: src/types-and-values/values.md
msgid "Unicode scalar values"
msgstr ""

#: src/types-and-values/values.md
msgid "`char`"
msgstr ""

#: src/types-and-values/values.md
msgid "`'a'`, `'α'`, `'∞'`"
msgstr ""

#: src/types-and-values/values.md
msgid "Booleans"
msgstr ""

#: src/types-and-values/values.md
msgid "`bool`"
msgstr ""

#: src/types-and-values/values.md
msgid "`true`, `false`"
msgstr ""

#: src/types-and-values/values.md
#, fuzzy
msgid "The types have widths as follows:"
msgstr "Οι τύποι έχουν πλάτη ως εξής:"

#: src/types-and-values/values.md
#, fuzzy
msgid "`iN`, `uN`, and `fN` are _N_ bits wide,"
msgstr "Τα \"iN\", \"uN\" και \"fN\" έχουν πλάτος _N_ bit,"

#: src/types-and-values/values.md
#, fuzzy
msgid "`isize` and `usize` are the width of a pointer,"
msgstr "Το \"isize\" και το \"usize\" είναι το πλάτος ενός δείκτη,"

#: src/types-and-values/values.md
#, fuzzy
msgid "`char` is 32 bits wide,"
msgstr "Το \"char\" έχει πλάτος 32 bit,"

#: src/types-and-values/values.md
#, fuzzy
msgid "`bool` is 8 bits wide."
msgstr "Το «bool» έχει πλάτος 8 bit."

#: src/types-and-values/values.md
msgid "There are a few syntaxes which are not shown above:"
msgstr ""

#: src/types-and-values/values.md
msgid ""
"All underscores in numbers can be left out, they are for legibility only. So "
"`1_000` can be written as `1000` (or `10_00`), and `123_i64` can be written "
"as `123i64`."
msgstr ""

#: src/types-and-values/arithmetic.md
msgid "\"result: {}\""
msgstr ""

#: src/types-and-values/arithmetic.md
msgid ""
"This is the first time we've seen a function other than `main`, but the "
"meaning should be clear: it takes three integers, and returns an integer. "
"Functions will be covered in more detail later."
msgstr ""

#: src/types-and-values/arithmetic.md
msgid "Arithmetic is very similar to other languages, with similar precedence."
msgstr ""

#: src/types-and-values/arithmetic.md
msgid ""
"What about integer overflow? In C and C++ overflow of _signed_ integers is "
"actually undefined, and might do different things on different platforms or "
"compilers. In Rust, it's defined."
msgstr ""

#: src/types-and-values/arithmetic.md
msgid ""
"Change the `i32`'s to `i16` to see an integer overflow, which panics "
"(checked) in a debug build and wraps in a release build. There are other "
"options, such as overflowing, saturating, and carrying. These are accessed "
"with method syntax, e.g., `(a * b).saturating_add(b * c).saturating_add(c * "
"a)`."
msgstr ""

#: src/types-and-values/arithmetic.md
msgid ""
"In fact, the compiler will detect overflow of constant expressions, which is "
"why the example requires a separate function."
msgstr ""

#: src/types-and-values/strings.md
msgid ""
"Rust has two types to represent strings, both of which will be covered in "
"more depth later. Both _always_ store UTF-8 encoded strings."
msgstr ""

#: src/types-and-values/strings.md
#, fuzzy
msgid "`String` - a modifiable, owned string."
msgstr "\"String\" ένα μεταβλητό buffer συμβολοσειρών."

#: src/types-and-values/strings.md
msgid "`&str` - a read-only string. String literals have this type."
msgstr ""

#: src/types-and-values/strings.md
msgid "\"Greetings\""
msgstr ""

#: src/types-and-values/strings.md
msgid "\"🪐\""
msgstr ""

#: src/types-and-values/strings.md
msgid "\", \""
msgstr ""

#: src/types-and-values/strings.md
msgid "\"final sentence: {}\""
msgstr ""

#: src/types-and-values/strings.md src/async/control-flow/join.md
msgid "\"{:?}\""
msgstr ""

#: src/types-and-values/strings.md
msgid "//println!(\"{:?}\", &sentence[12..13]);\n"
msgstr ""

#: src/types-and-values/strings.md
msgid ""
"This slide introduces strings. Everything here will be covered in more depth "
"later, but this is enough for subsequent slides and exercises to use strings."
msgstr ""

#: src/types-and-values/strings.md
msgid "Invalid UTF-8 in a string is UB, and this not allowed in safe Rust."
msgstr ""

#: src/types-and-values/strings.md
msgid ""
"`String` is a user-defined type with a constructor (`::new()`) and methods "
"like `s.push_str(..)`."
msgstr ""

#: src/types-and-values/strings.md
msgid ""
"The `&` in `&str` indicates that this is a reference. We will cover "
"references later, so for now just think of `&str` as a unit meaning \"a read-"
"only string\"."
msgstr ""

#: src/types-and-values/strings.md
msgid ""
"The commented-out line is indexing into the string by byte position. "
"`12..13` does not end on a character boundary, so the program panics. Adjust "
"it to a range that does, based on the error message."
msgstr ""

#: src/types-and-values/strings.md
msgid ""
"Raw strings allow you to create a `&str` value with escapes disabled: "
"`r\"\\n\" == \"\\\\n\"`. You can embed double-quotes by using an equal "
"amount of `#` on either side of the quotes:"
msgstr ""

#: src/types-and-values/inference.md
#, fuzzy
msgid "Rust will look at how the variable is _used_ to determine the type:"
msgstr ""
"Το Rust θα εξετάσει πώς χρησιμοποιείται η μεταβλητή για να προσδιορίσει τον "
"τύπο:"

#: src/types-and-values/inference.md
msgid ""
"This slide demonstrates how the Rust compiler infers types based on "
"constraints given by variable declarations and usages."
msgstr ""

#: src/types-and-values/inference.md
#, fuzzy
msgid ""
"It is very important to emphasize that variables declared like this are not "
"of some sort of dynamic \"any type\" that can hold any data. The machine "
"code generated by such declaration is identical to the explicit declaration "
"of a type. The compiler does the job for us and helps us write more concise "
"code."
msgstr ""
"Αυτή η διαφάνεια δείχνει πώς ο μεταγλωττιστής Rust συμπεραίνει τύπους με "
"βάση περιορισμούς που δίνονται από δηλώσεις και χρήσεις μεταβλητών.\n"
"\n"
"Είναι πολύ σημαντικό να τονίσουμε ότι οι μεταβλητές που δηλώνονται όπως αυτή "
"δεν είναι κάποιου είδους δυναμικού \"οποιουδήποτε τύπου\" που μπορεί "
"κρατήστε τυχόν δεδομένα. Ο κωδικός μηχανής που δημιουργείται από μια τέτοια "
"δήλωση είναι πανομοιότυπος με τη ρητή δήλωση ενός τύπου. Ο μεταγλωττιστής "
"κάνει τη δουλειά για εμάς και μας βοηθά να γράψουμε έναν πιο συνοπτικό "
"κώδικα."

#: src/types-and-values/inference.md
msgid ""
"When nothing constrains the type of an integer literal, Rust defaults to "
"`i32`. This sometimes appears as `{integer}` in error messages. Similarly, "
"floating-point literals default to `f64`."
msgstr ""

#: src/types-and-values/inference.md
msgid "// ERROR: no implementation for `{float} == {integer}`\n"
msgstr ""

#: src/types-and-values/exercise.md
msgid ""
"The first and second Fibonacci numbers are both `1`. For n>2, the n'th "
"Fibonacci number is calculated recursively as the sum of the n-1'th and "
"n-2'th Fibonacci numbers."
msgstr ""

#: src/types-and-values/exercise.md
msgid ""
"Write a function `fib(n)` that calculates the n'th Fibonacci number. When "
"will this function panic?"
msgstr ""

#: src/types-and-values/exercise.md
msgid "// The base case.\n"
msgstr ""

#: src/types-and-values/exercise.md src/control-flow-basics/exercise.md
#, fuzzy
msgid "\"Implement this\""
msgstr "Υλοποίηση"

#: src/types-and-values/exercise.md
msgid "// The recursive case.\n"
msgstr ""

#: src/types-and-values/exercise.md src/types-and-values/solution.md
msgid "\"fib(n) = {}\""
msgstr ""

#: src/control-flow-basics.md
msgid "[Conditionals](./control-flow-basics/conditionals.md) (5 minutes)"
msgstr ""

#: src/control-flow-basics.md
msgid "[Loops](./control-flow-basics/loops.md) (5 minutes)"
msgstr ""

#: src/control-flow-basics.md
msgid ""
"[break and continue](./control-flow-basics/break-continue.md) (5 minutes)"
msgstr ""

#: src/control-flow-basics.md
msgid ""
"[Blocks and Scopes](./control-flow-basics/blocks-and-scopes.md) (10 minutes)"
msgstr ""

#: src/control-flow-basics.md
msgid "[Functions](./control-flow-basics/functions.md) (3 minutes)"
msgstr ""

#: src/control-flow-basics.md
msgid "[Macros](./control-flow-basics/macros.md) (2 minutes)"
msgstr ""

#: src/control-flow-basics.md
msgid ""
"[Exercise: Collatz Sequence](./control-flow-basics/exercise.md) (30 minutes)"
msgstr ""

#: src/control-flow-basics.md src/tuples-and-arrays.md src/borrowing.md
msgid "This segment should take about 1 hour"
msgstr ""

#: src/control-flow-basics/conditionals.md
#, fuzzy
msgid "Much of the Rust syntax will be familiar to you from C, C++ or Java:"
msgstr "Μεγάλο μέρος της σύνταξης Rust θα σας είναι οικείο από τη C ή τη C++:"

#: src/control-flow-basics/conditionals.md
#, fuzzy
msgid "Blocks are delimited by curly braces."
msgstr "Τα μπλοκ και τα πεδία οριοθετούνται με σγουρά τιράντες."

#: src/control-flow-basics/conditionals.md
#, fuzzy
msgid ""
"Line comments are started with `//`, block comments are delimited by `/* ... "
"*/`."
msgstr ""
"Τα σχόλια γραμμής ξεκινούν με `//`, τα σχόλια αποκλεισμού οριοθετούνται από "
"`/* ... */`."

#: src/control-flow-basics/conditionals.md
#, fuzzy
msgid "Keywords like `if` and `while` work the same."
msgstr "Λέξεις-κλειδιά όπως «αν» και «ενώ» λειτουργούν το ίδιο."

#: src/control-flow-basics/conditionals.md
#, fuzzy
msgid "Variable assignment is done with `=`, comparison is done with `==`."
msgstr "Η ανάθεση μεταβλητής γίνεται με `=`, η σύγκριση γίνεται με `==`."

#: src/control-flow-basics/conditionals.md
#, fuzzy
msgid "`if` expressions"
msgstr "εκφράσεις \"αν\"."

#: src/control-flow-basics/conditionals.md
msgid ""
"You use [`if` expressions](https://doc.rust-lang.org/reference/expressions/"
"if-expr.html#if-expressions) exactly like `if` statements in other languages:"
msgstr ""

#: src/control-flow-basics/conditionals.md
msgid "\"small\""
msgstr ""

#: src/control-flow-basics/conditionals.md
msgid "\"biggish\""
msgstr ""

#: src/control-flow-basics/conditionals.md
msgid "\"huge\""
msgstr ""

#: src/control-flow-basics/conditionals.md
#, fuzzy
msgid ""
"In addition, you can use `if` as an expression. The last expression of each "
"block becomes the value of the `if` expression:"
msgstr ""
"Επιπλέον, μπορείτε να το χρησιμοποιήσετε ως έκφραση. Αυτό κάνει το ίδιο όπως "
"παραπάνω:"

#: src/control-flow-basics/conditionals.md
msgid "\"large\""
msgstr ""

#: src/control-flow-basics/conditionals.md
msgid "\"number size: {}\""
msgstr ""

#: src/control-flow-basics/conditionals.md
msgid ""
"Because `if` is an expression and must have a particular type, both of its "
"branch blocks must have the same type. Show what happens if you add `;` "
"after `\"small\"` in the second example."
msgstr ""

#: src/control-flow-basics/conditionals.md
msgid ""
"When `if` is used in an expression, the expression must have a `;` to "
"separate it from the next statement. Remove the `;` before `println!` to see "
"the compiler error."
msgstr ""

#: src/control-flow-basics/loops.md
msgid "There are three looping keywords in Rust: `while`, `loop`, and `for`:"
msgstr ""

#: src/control-flow-basics/loops.md
#, fuzzy
msgid "`while`"
msgstr "εκφράσεις «ενώ»."

#: src/control-flow-basics/loops.md
#, fuzzy
msgid ""
"The [`while` keyword](https://doc.rust-lang.org/reference/expressions/loop-"
"expr.html#predicate-loops) works much like in other languages, executing the "
"loop body as long as the condition is true."
msgstr ""
"Όπως και με το \"if\", υπάρχει μια παραλλαγή \"while let\" που ελέγχει "
"επανειλημμένα μια τιμή σε σχέση με ένα μοτίβο:"

#: src/control-flow-basics/loops.md
msgid "\"Final x: {x}\""
msgstr ""

#: src/control-flow-basics/loops.md
#, fuzzy
msgid "`for`"
msgstr "Βρόχοι «για»."

#: src/control-flow-basics/loops.md
#, fuzzy
msgid ""
"The [`for` loop](https://doc.rust-lang.org/std/keyword.for.html) iterates "
"over ranges of values:"
msgstr "«Drop» που χρησιμοποιείται για τον ορισμό των καταστροφέων."

#: src/control-flow-basics/loops.md
msgid "`loop`"
msgstr ""

#: src/control-flow-basics/loops.md
#, fuzzy
msgid ""
"The [`loop` statement](https://doc.rust-lang.org/std/keyword.loop.html) just "
"loops forever, until a `break`."
msgstr "«Drop» που χρησιμοποιείται για τον ορισμό των καταστροφέων."

#: src/control-flow-basics/loops.md
msgid "\"{i}\""
msgstr ""

#: src/control-flow-basics/loops.md
msgid ""
"We will discuss iteration later; for now, just stick to range expressions."
msgstr ""

#: src/control-flow-basics/loops.md
msgid ""
"Note that the `for` loop only iterates to `4`. Show the `1..=5` syntax for "
"an inclusive range."
msgstr ""

#: src/control-flow-basics/break-continue.md
msgid ""
"If you want to exit any kind of loop early, use [`break`](https://doc.rust-"
"lang.org/reference/expressions/loop-expr.html#break-expressions). For "
"`loop`, this can take an optional expression that becomes the value of the "
"`loop` expression."
msgstr ""

#: src/control-flow-basics/break-continue.md
msgid ""
"If you want to immediately start the next iteration use [`continue`](https://"
"doc.rust-lang.org/reference/expressions/loop-expr.html#continue-expressions)."
msgstr ""

#: src/control-flow-basics/break-continue.md
msgid "\"{result}\""
msgstr ""

#: src/control-flow-basics/break-continue.md
#, fuzzy
msgid ""
"Both `continue` and `break` can optionally take a label argument which is "
"used to break out of nested loops:"
msgstr ""
"Εάν θέλετε να βγείτε νωρίς από έναν βρόχο, χρησιμοποιήστε το «διάλειμμα», "
"εάν θέλετε να ξεκινήσετε αμέσως την επόμενη επανάληψη χρησιμοποιήστε "
"«continue». Τόσο το \"continue\" και το \"break\" μπορούν προαιρετικά πάρτε "
"ένα όρισμα ετικέτας που χρησιμοποιείται για να ξεφύγει από ένθετους βρόχους:"

#: src/control-flow-basics/break-continue.md
msgid "\"x: {x}, i: {i}\""
msgstr ""

#: src/control-flow-basics/break-continue.md
#, fuzzy
msgid ""
"In this case we break the outer loop after 3 iterations of the inner loop."
msgstr ""
"Σε αυτή την περίπτωση σπάμε τον εξωτερικό βρόχο μετά από 3 επαναλήψεις του "
"εσωτερικού βρόχου."

#: src/control-flow-basics/break-continue.md
msgid ""
"Note that `loop` is the only looping construct which returns a non-trivial "
"value. This is because it's guaranteed to be entered at least once (unlike "
"`while` and `for` loops)."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid "Blocks"
msgstr "Μπλοκ"

#: src/control-flow-basics/blocks-and-scopes.md
#, fuzzy
msgid ""
"A block in Rust contains a sequence of expressions, enclosed by braces `{}`. "
"Each block has a value and a type, which are those of the last expression of "
"the block:"
msgstr ""
"Ένα μπλοκ στο Rust έχει μια τιμή και έναν τύπο: η τιμή είναι η τελευταία "
"έκφραση του ΟΙΚΟΔΟΜΙΚΟ ΤΕΤΡΑΓΩΝΟ:"

#: src/control-flow-basics/blocks-and-scopes.md
msgid "\"y: {y}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid ""
"If the last expression ends with `;`, then the resulting value and type is "
"`()`."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid "Scopes and Shadowing"
msgstr "Εμβέλια και σκίαση"

#: src/control-flow-basics/blocks-and-scopes.md
msgid "A variable's scope is limited to the enclosing block."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
#, fuzzy
msgid ""
"You can shadow variables, both those from outer scopes and variables from "
"the same scope:"
msgstr ""
"Μπορείτε να σκιάζετε μεταβλητές, τόσο αυτές από εξωτερικά πεδία όσο και "
"μεταβλητές από το ίδιο εύρος:"

#: src/control-flow-basics/blocks-and-scopes.md
msgid "\"before: {a}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md src/std-traits/from-and-into.md
#: src/slices-and-lifetimes/solution.md
msgid "\"hello\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid "\"inner scope: {a}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid "\"shadowed in inner scope: {a}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid "\"after: {a}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
#, fuzzy
msgid ""
"You can show how the value of the block changes by changing the last line in "
"the block. For instance, adding/removing a semicolon or using a `return`."
msgstr ""
"Ο σκοπός αυτής της διαφάνειας είναι να δείξει ότι τα μπλοκ έχουν τύπο και "
"τιμή στο Rust.\n"
"\n"
"Μπορείτε να δείξετε πώς αλλάζει η τιμή του μπλοκ αλλάζοντας την τελευταία "
"γραμμή στο μπλοκ. Για παράδειγμα, προσθέτοντας/αφαιρώντας ένα ερωτηματικό ή "
"χρησιμοποιώντας ένα «return»."

#: src/control-flow-basics/blocks-and-scopes.md
msgid ""
"Show that a variable's scope is limited by adding a `b` in the inner block "
"in the last example, and then trying to access it outside that block."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
#, fuzzy
msgid ""
"Shadowing is different from mutation, because after shadowing both "
"variable's memory locations exist at the same time. Both are available under "
"the same name, depending where you use it in the code."
msgstr ""
"Ορισμός: Η σκίαση είναι διαφορετική από τη μετάλλαξη, γιατί μετά τη σκίαση "
"υπάρχουν και οι δύο θέσεις μνήμης της μεταβλητής ταυτόχρονα. Και τα δύο "
"είναι διαθέσιμα με το ίδιο όνομα, ανάλογα με το πού το χρησιμοποιείτε στον "
"κωδικό."

#: src/control-flow-basics/blocks-and-scopes.md
#, fuzzy
msgid "A shadowing variable can have a different type."
msgstr "Μια μεταβλητή σκίασης μπορεί να έχει διαφορετικό τύπο."

#: src/control-flow-basics/blocks-and-scopes.md
#, fuzzy
msgid ""
"Shadowing looks obscure at first, but is convenient for holding on to values "
"after `.unwrap()`."
msgstr ""
"Η σκίαση φαίνεται ασαφής στην αρχή, αλλά είναι βολική για να κρατάτε τις "
"τιμές μετά το «.unwrap()»."

#: src/control-flow-basics/functions.md
msgid ""
"Declaration parameters are followed by a type (the reverse of some "
"programming languages), then a return type."
msgstr ""

#: src/control-flow-basics/functions.md
msgid ""
"The last expression in a function body (or any block) becomes the return "
"value. Simply omit the `;` at the end of the expression. The `return` "
"keyword can be used for early return, but the \"bare value\" form is "
"idiomatic at the end of a function (refactor `gcd` to use a `return`)."
msgstr ""

#: src/control-flow-basics/functions.md
msgid ""
"Some functions have no return value, and return the 'unit type', `()`. The "
"compiler will infer this if the `-> ()` return type is omitted."
msgstr ""

#: src/control-flow-basics/functions.md
#, fuzzy
msgid ""
"Overloading is not supported -- each function has a single implementation."
msgstr "Κάθε συνάρτηση έχει μια ενιαία υλοποίηση:"

#: src/control-flow-basics/functions.md
msgid ""
"Always takes a fixed number of parameters. Default arguments are not "
"supported. Macros can be used to support variadic functions."
msgstr ""

#: src/control-flow-basics/functions.md
#, fuzzy
msgid ""
"Always takes a single set of parameter types. These types can be generic, "
"which will be covered later."
msgstr "Λαμβάνει πάντα ένα ενιαίο σύνολο τύπων παραμέτρων."

#: src/control-flow-basics/macros.md
msgid ""
"Macros are expanded into Rust code during compilation, and can take a "
"variable number of arguments. They are distinguished by a `!` at the end. "
"The Rust standard library includes an assortment of useful macros."
msgstr ""

#: src/control-flow-basics/macros.md
#, fuzzy
msgid ""
"`println!(format, ..)` prints a line to standard output, applying formatting "
"described in [`std::fmt`](https://doc.rust-lang.org/std/fmt/index.html)."
msgstr ""
"Η υπερφόρτωση χειριστή υλοποιείται μέσω χαρακτηριστικών στο `std::ops`:"

#: src/control-flow-basics/macros.md
msgid ""
"`format!(format, ..)` works just like `println!` but returns the result as a "
"string."
msgstr ""

#: src/control-flow-basics/macros.md
msgid "`dbg!(expression)` logs the value of the expression and returns it."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"`todo!()` marks a bit of code as not-yet-implemented. If executed, it will "
"panic."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"`unreachable!()` marks a bit of code as unreachable. If executed, it will "
"panic."
msgstr ""

#: src/control-flow-basics/macros.md
msgid "\"{n}! = {}\""
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"The takeaway from this section is that these common conveniences exist, and "
"how to use them. Why they are defined as macros, and what they expand to, is "
"not especially critical."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"The course does not cover defining macros, but a later section will describe "
"use of derive macros."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid ""
"The [Collatz Sequence](https://en.wikipedia.org/wiki/Collatz_conjecture) is "
"defined as follows, for an arbitrary n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "1"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid " greater than zero:"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "If _n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "i"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ is 1, then the sequence terminates at _n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ is even, then _n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "i+1"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid " = n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid " / 2_."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ is odd, then _n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid " = 3 * n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid " + 1_."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "For example, beginning with _n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ = 3:"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "3 is odd, so _n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "2"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ = 3 * 3 + 1 = 10;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "10 is even, so _n"
msgstr ""

#: src/control-flow-basics/exercise.md src/bare-metal/aps/better-uart.md
msgid "3"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ = 10 / 2 = 5;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "5 is odd, so _n"
msgstr ""

#: src/control-flow-basics/exercise.md src/bare-metal/aps/better-uart.md
msgid "4"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ = 3 * 5 + 1 = 16;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "16 is even, so _n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "5"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ = 16 / 2 = 8;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "8 is even, so _n"
msgstr ""

#: src/control-flow-basics/exercise.md src/bare-metal/aps/better-uart.md
msgid "6"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ = 8 / 2 = 4;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "4 is even, so _n"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "7"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ = 4 / 2 = 2;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "2 is even, so _n"
msgstr ""

#: src/control-flow-basics/exercise.md src/bare-metal/aps/better-uart.md
msgid "8"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "_ = 1; and"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "the sequence terminates."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid ""
"Write a function to calculate the length of the collatz sequence for a given "
"initial `n`."
msgstr ""

#: src/control-flow-basics/exercise.md src/control-flow-basics/solution.md
msgid "/// Determine the length of the collatz sequence beginning at `n`.\n"
msgstr ""

#: src/control-flow-basics/solution.md src/concurrency/scoped-threads.md
msgid "\"Length: {}\""
msgstr ""

#: src/welcome-day-1-afternoon.md src/welcome-day-2-afternoon.md
#: src/welcome-day-3-afternoon.md src/welcome-day-4-afternoon.md
#, fuzzy
msgid "Welcome Back"
msgstr "Καλως Ήρθατε"

#: src/welcome-day-1-afternoon.md
msgid "[Tuples and Arrays](./tuples-and-arrays.md) (1 hour)"
msgstr ""

#: src/welcome-day-1-afternoon.md
msgid "[References](./references.md) (50 minutes)"
msgstr ""

#: src/welcome-day-1-afternoon.md
msgid "[User-Defined Types](./user-defined-types.md) (50 minutes)"
msgstr ""

#: src/welcome-day-1-afternoon.md
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 55 "
"minutes"
msgstr ""

#: src/tuples-and-arrays.md
msgid ""
"[Tuples and Arrays](./tuples-and-arrays/tuples-and-arrays.md) (10 minutes)"
msgstr ""

#: src/tuples-and-arrays.md
msgid "[Array Iteration](./tuples-and-arrays/iteration.md) (3 minutes)"
msgstr ""

#: src/tuples-and-arrays.md
msgid "[Pattern Matching](./tuples-and-arrays/match.md) (10 minutes)"
msgstr ""

#: src/tuples-and-arrays.md
msgid "[Destructuring](./tuples-and-arrays/destructuring.md) (5 minutes)"
msgstr ""

#: src/tuples-and-arrays.md
msgid "[Exercise: Nested Arrays](./tuples-and-arrays/exercise.md) (30 minutes)"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid ""
"Tuples and arrays are the first \"compound\" types we have seen. All "
"elements of an array have the same type, while tuples can accommodate "
"different types. Both types have a size fixed at compile time."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
#: src/tuples-and-arrays/destructuring.md
msgid "Arrays"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid "`[T; N]`"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid "`[20, 30, 40]`, `[0; 3]`"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
#: src/tuples-and-arrays/destructuring.md
msgid "Tuples"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid "`()`, `(T,)`, `(T1, T2)`, ..."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid "`()`, `('x',)`, `('x', 1.2)`, ..."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
#, fuzzy
msgid "Array assignment and access:"
msgstr "Εκχώρηση πίνακα και πρόσβαση:"

#: src/tuples-and-arrays/tuples-and-arrays.md
#, fuzzy
msgid "Tuple assignment and access:"
msgstr "Διπλή ανάθεση και πρόσβαση:"

#: src/tuples-and-arrays/tuples-and-arrays.md
#, fuzzy
msgid "Arrays:"
msgstr "Πίνακες:"

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid ""
"A value of the array type `[T; N]` holds `N` (a compile-time constant) "
"elements of the same type `T`. Note that the length of the array is _part of "
"its type_, which means that `[u8; 3]` and `[u8; 4]` are considered two "
"different types. Slices, which have a size determined at runtime, are "
"covered later."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid ""
"Try accessing an out-of-bounds array element. Array accesses are checked at "
"runtime. Rust can usually optimize these checks away, and they can be "
"avoided using unsafe Rust."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid "We can use literals to assign values to arrays."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid ""
"The `println!` macro asks for the debug implementation with the `?` format "
"parameter: `{}` gives the default output, `{:?}` gives the debug output. "
"Types such as integers and strings implement the default output, but arrays "
"only implement the debug output. This means that we must use debug output "
"here."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid ""
"Adding `#`, eg `{a:#?}`, invokes a \"pretty printing\" format, which can be "
"easier to read."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
#, fuzzy
msgid "Tuples:"
msgstr "Πλειάδες:"

#: src/tuples-and-arrays/tuples-and-arrays.md
#, fuzzy
msgid "Like arrays, tuples have a fixed length."
msgstr ""
"Η άδεια πλειάδα `()` είναι επίσης γνωστή ως \"τύπος μονάδας\". Είναι και "
"τύπος, και η μόνη έγκυρη τιμή αυτού του τύπου - δηλαδή και ο τύπος και η "
"τιμή του εκφράζονται ως «()». Χρησιμοποιείται για να υποδείξει, για "
"παράδειγμα, ότι μια συνάρτηση ή Η έκφραση δεν έχει τιμή επιστροφής, όπως θα "
"δούμε σε μια μελλοντική διαφάνεια."

#: src/tuples-and-arrays/tuples-and-arrays.md
#, fuzzy
msgid "Tuples group together values of different types into a compound type."
msgstr ""
"Μπορείτε να το σκεφτείτε ως «κενό» που μπορεί να σας είναι οικείο από άλλους "
"γλώσσες προγραμματισμού."

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid ""
"Fields of a tuple can be accessed by the period and the index of the value, "
"e.g. `t.0`, `t.1`."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid ""
"The empty tuple `()` is also known as the \"unit type\". It is both a type, "
"and the only valid value of that type --- that is to say both the type and "
"its value are expressed as `()`. It is used to indicate, for example, that a "
"function or expression has no return value, as we'll see in a future slide."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md
msgid ""
"You can think of it as `void` that can be familiar to you from other "
"programming languages."
msgstr ""

#: src/tuples-and-arrays/iteration.md
msgid "The `for` statement supports iterating over arrays (but not tuples)."
msgstr ""

#: src/tuples-and-arrays/iteration.md
msgid ""
"This functionality uses the `IntoIterator` trait, but we haven't covered "
"that yet."
msgstr ""

#: src/tuples-and-arrays/iteration.md
msgid ""
"The `assert_ne!` macro is new here. There are also `assert_eq!` and `assert!"
"` macros. These are always checked while, debug-only variants like "
"`debug_assert!` compile to nothing in release builds."
msgstr ""

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid ""
"The `match` keyword lets you match a value against one or more _patterns_. "
"The comparisons are done from top to bottom and the first match wins."
msgstr ""
"Η λέξη-κλειδί \"αντιστοιχία\" σάς επιτρέπει να αντιστοιχίσετε μια τιμή με "
"ένα ή περισσότερα _patterns_. ο Οι συγκρίσεις γίνονται από πάνω προς τα κάτω "
"και ο πρώτος αγώνας κερδίζει."

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid "The patterns can be simple values, similarly to `switch` in C and C++:"
msgstr ""
"Τα μοτίβα μπορεί να είναι απλές τιμές, παρόμοια με το «switch» σε C και C++:"

#: src/tuples-and-arrays/match.md
msgid "'x'"
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "'q'"
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "\"Quitting\""
msgstr ""

#: src/tuples-and-arrays/match.md src/std-traits/solution.md
#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "'a'"
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "'s'"
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "'w'"
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "'d'"
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "\"Moving around\""
msgstr ""

#: src/tuples-and-arrays/match.md src/error-handling/exercise.md
#: src/error-handling/solution.md
msgid "'0'"
msgstr ""

#: src/tuples-and-arrays/match.md src/error-handling/exercise.md
#: src/error-handling/solution.md
msgid "'9'"
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "\"Number input\""
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "\"Lowercase: {key}\""
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "\"Something else\""
msgstr ""

#: src/tuples-and-arrays/match.md
msgid ""
"The `_` pattern is a wildcard pattern which matches any value. The "
"expressions _must_ be irrefutable, meaning that it covers every possibility, "
"so `_` is often used as the final catch-all case."
msgstr ""

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid ""
"Match can be used as an expression. Just like `if`, each match arm must have "
"the same type. The type is the last expression of the block, if any. In the "
"example above, the type is `()`."
msgstr ""
"Όπως το \"αν ας\", κάθε βραχίονας αγώνα πρέπει να έχει τον ίδιο τύπο. Ο "
"τύπος είναι ο τελευταίος έκφραση του μπλοκ, εάν υπάρχει. Στο παραπάνω "
"παράδειγμα, ο τύπος είναι `()`."

#: src/tuples-and-arrays/match.md
msgid ""
"A variable in the pattern (`key` in this example) will create a binding that "
"can be used within the match arm."
msgstr ""

#: src/tuples-and-arrays/match.md
msgid "A match guard causes the arm to match only if the condition is true."
msgstr ""

#: src/tuples-and-arrays/match.md src/user-defined-types/named-structs.md
#: src/user-defined-types/enums.md src/methods-and-traits/methods.md
#, fuzzy
msgid "Key Points:"
msgstr "Βασικά σημεία:"

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid ""
"You might point out how some specific characters are being used when in a "
"pattern"
msgstr "\\<λεπτομέρειες>"

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid "`|` as an `or`"
msgstr "Βασικά σημεία:"

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid "`..` can expand as much as it needs to be"
msgstr ""
"Θα μπορούσατε να επισημάνετε πώς χρησιμοποιούνται ορισμένοι συγκεκριμένοι "
"χαρακτήρες όταν βρίσκονται σε ένα δίπλωμα ευρεσιτεχνίας"

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid "`1..=5` represents an inclusive range"
msgstr "«|» ως «ή»."

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid "`_` is a wild card"
msgstr "Το «..» μπορεί να επεκταθεί όσο χρειάζεται"

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid ""
"Match guards as a separate syntax feature are important and necessary when "
"we wish to concisely express more complex ideas than patterns alone would "
"allow."
msgstr "Βασικά σημεία:"

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid ""
"They are not the same as separate `if` expression inside of the match arm. "
"An `if` expression inside of the branch block (after `=>`) happens after the "
"match arm is selected. Failing the `if` condition inside of that block won't "
"result in other arms of the original `match` expression being considered."
msgstr ""
"Οι προστατευτικοί αγώνες ως ξεχωριστό συντακτικό χαρακτηριστικό είναι "
"σημαντικοί και απαραίτητοι."

#: src/tuples-and-arrays/match.md
#, fuzzy
msgid ""
"The condition defined in the guard applies to every expression in a pattern "
"with an `|`."
msgstr ""
"Μπορείτε να χρησιμοποιήσετε τις μεταβλητές που ορίζονται στο μοτίβο στην "
"έκφραση if σας.\n"
"\n"
"Η συνθήκη που ορίζεται στο προστατευτικό ισχύει για κάθε έκφραση σε μοτίβο "
"με ένα `|`."

#: src/tuples-and-arrays/destructuring.md
msgid ""
"Destructuring is a way of extracting data from a data structure by writing a "
"pattern that is matched up to the data structure, binding variables to "
"subcomponents of the data structure."
msgstr ""

#: src/tuples-and-arrays/destructuring.md
#, fuzzy
msgid "You can destructure tuples and arrays by matching on their elements:"
msgstr ""
"Μπορείτε να καταστρέψετε πίνακες, πλειάδες και φέτες ταιριάζοντας στα "
"στοιχεία τους:"

#: src/tuples-and-arrays/destructuring.md
msgid "\"on Y axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "\"on X axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "\"left of Y axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "\"below X axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "\"first quadrant\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "\"Tell me about {triple:?}\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "\"First is 0, y = {y}, and z = {z}\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "\"First is 1 and the rest were ignored\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "\"All elements were ignored\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "Create a new array pattern using `_` to represent an element."
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "Add more values to the array."
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid ""
"Point out that how `..` will expand to account for different number of "
"elements."
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "Show matching against the tail with patterns `[.., b]` and `[a@..,b]`"
msgstr ""

#: src/tuples-and-arrays/exercise.md
msgid "Arrays can contain other arrays:"
msgstr ""

#: src/tuples-and-arrays/exercise.md
#, fuzzy
msgid "What is the type of this variable?"
msgstr "Ποιος είναι ο τύπος της λέξης σε κάθε βρόχο;"

#: src/tuples-and-arrays/exercise.md
#, fuzzy
msgid ""
"Use an array such as the above to write a function `transpose` which will "
"transpose a matrix (turn rows into columns):"
msgstr ""
"Χρησιμοποιήστε τα παραπάνω για να γράψετε μια συνάρτηση «pretty_print» που "
"εκτυπώνει όμορφα έναν πίνακα και μια συνάρτηση \"transpose\" που θα "
"μεταφέρει έναν πίνακα (μετατρέπει τις γραμμές σε στήλες):"

#: src/tuples-and-arrays/exercise.md
#, fuzzy
msgid "Hard-code both functions to operate on 3 × 3 matrices."
msgstr ""
"Σκληρός κώδικας και των δύο συναρτήσεων για λειτουργία σε πίνακες 3 × 3."

#: src/tuples-and-arrays/exercise.md
#, fuzzy
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and implement the "
"functions:"
msgstr ""
"Αντιγράψτε τον παρακάτω κώδικα στο <https://play.rust-lang.org/> και "
"εφαρμόστε το λειτουργίες:"

#: src/tuples-and-arrays/exercise.md src/borrowing/exercise.md
#: src/unsafe-rust/exercise.md
msgid "// TODO: remove this when you're done with your implementation.\n"
msgstr ""

#: src/tuples-and-arrays/exercise.md src/tuples-and-arrays/solution.md
msgid "// <-- the comment makes rustfmt add a newline\n"
msgstr ""

#: src/tuples-and-arrays/exercise.md src/tuples-and-arrays/solution.md
msgid "\"matrix: {:#?}\""
msgstr ""

#: src/tuples-and-arrays/exercise.md src/tuples-and-arrays/solution.md
msgid "\"transposed: {:#?}\""
msgstr ""

#: src/tuples-and-arrays/solution.md
msgid "//\n"
msgstr ""

#: src/references.md
msgid "[Shared References](./references/shared.md) (10 minutes)"
msgstr ""

#: src/references.md
msgid "[Exclusive References](./references/exclusive.md) (10 minutes)"
msgstr ""

#: src/references.md
msgid "[Exercise: Geometry](./references/exercise.md) (30 minutes)"
msgstr ""

#: src/references.md src/user-defined-types.md src/pattern-matching.md
msgid "This segment should take about 50 minutes"
msgstr ""

#: src/references/shared.md
msgid ""
"A reference provides a way to access another value without taking "
"responsibility for the value, and is also called \"borrowing\". Shared "
"references are read-only, and the referenced data cannot change."
msgstr ""

#: src/references/shared.md
msgid ""
"A shared reference to a type `T` has type `&T`. A reference value is made "
"with the `&` operator. The `*` operator \"dereferences\" a reference, "
"yielding its value."
msgstr ""

#: src/references/shared.md
#, fuzzy
msgid "Rust will statically forbid dangling references:"
msgstr "Η σκουριά θα απαγορεύσει στατικά τις κρέμονται αναφορές:"

#: src/references/shared.md
msgid ""
"A reference is said to \"borrow\" the value it refers to, and this is a good "
"model for students not familiar with pointers: code can use the reference to "
"access the value, but is still \"owned\" by the original variable. The "
"course will get into more detail on ownership in day 3."
msgstr ""

#: src/references/shared.md
msgid ""
"References are implemented as pointers, and a key advantage is that they can "
"be much smaller than the thing they point to. Students familiar with C or C+"
"+ will recognize references as pointers. Later parts of the course will "
"cover how Rust prevents the memory-safety bugs that come from using raw "
"pointers."
msgstr ""

#: src/references/shared.md
msgid ""
"Rust does not automatically create references for you - the `&` is always "
"required."
msgstr ""

#: src/references/shared.md
#, fuzzy
msgid ""
"Rust will auto-dereference in some cases, in particular when invoking "
"methods (try `r.count_ones()`). There is no need for an `->` operator like "
"in C++."
msgstr ""
"Το Rust θα επαναφέρει αυτόματα σε ορισμένες περιπτώσεις, ιδιαίτερα κατά την "
"επίκληση μεθόδους (δοκιμάστε το `ref_x.count_ones()`)."

#: src/references/shared.md
msgid ""
"In this example, `r` is mutable so that it can be reassigned (`r = &b`). "
"Note that this re-binds `r`, so that it refers to something else. This is "
"different from C++, where assignment to a reference changes the referenced "
"value."
msgstr ""

#: src/references/shared.md
msgid ""
"A shared reference does not allow modifying the value it refers to, even if "
"that value was mutable. Try `*r = 'X'`."
msgstr ""

#: src/references/shared.md
msgid ""
"Rust is tracking the lifetimes of all references to ensure they live long "
"enough. Dangling references cannot occur in safe Rust. `x_axis` would return "
"a reference to `point`, but `point` will be deallocated when the function "
"returns, so this will not compile."
msgstr ""

#: src/references/shared.md
#, fuzzy
msgid "We will talk more about borrowing when we get to ownership."
msgstr "Θα μιλήσουμε περισσότερο για δανεισμό όταν φτάσουμε στην ιδιοκτησία."

#: src/references/exclusive.md
msgid ""
"Exclusive references, also known as mutable references, allow changing the "
"value they refer to. They have type `&mut T`."
msgstr ""

#: src/references/exclusive.md
msgid ""
"\"Exclusive\" means that only this reference can be used to access the "
"value. No other references (shared or exclusive) can exist at the same time, "
"and the referenced value cannot be accessed while the exclusive reference "
"exists. Try making an `&point.0` or changing `point.0` while `x_coord` is "
"alive."
msgstr ""

#: src/references/exclusive.md
#, fuzzy
msgid ""
"Be sure to note the difference between `let mut x_coord: &i32` and `let "
"x_coord: &mut i32`. The first one represents a shared reference which can be "
"bound to different values, while the second represents an exclusive "
"reference to a mutable value."
msgstr ""
"Φροντίστε να σημειώσετε τη διαφορά μεταξύ του \"let mut ref_x: &i32\" και "
"του \"let ref_x: &mut i32\\`. Η πρώτη αντιπροσωπεύει μια μεταβλητή αναφορά "
"στην οποία μπορεί να συνδεθεί διαφορετικές τιμές, ενώ η δεύτερη "
"αντιπροσωπεύει μια αναφορά σε μια μεταβλητή τιμή."

#: src/references/exercise.md
msgid ""
"We will create a few utility functions for 3-dimensional geometry, "
"representing a point as `[f64;3]`. It is up to you to determine the function "
"signatures."
msgstr ""

#: src/references/exercise.md
msgid ""
"// Calculate the magnitude of a vector by summing the squares of its "
"coordinates\n"
"// and taking the square root. Use the `sqrt()` method to calculate the "
"square\n"
"// root, like `v.sqrt()`.\n"
msgstr ""

#: src/references/exercise.md
msgid ""
"// Normalize a vector by calculating its magnitude and dividing all of its\n"
"// coordinates by that magnitude.\n"
msgstr ""

#: src/references/exercise.md
msgid "// Use the following `main` to test your work.\n"
msgstr ""

#: src/references/exercise.md src/references/solution.md
msgid "\"Magnitude of a unit vector: {}\""
msgstr ""

#: src/references/exercise.md src/references/solution.md
msgid "\"Magnitude of {v:?}: {}\""
msgstr ""

#: src/references/exercise.md src/references/solution.md
msgid "\"Magnitude of {v:?} after normalization: {}\""
msgstr ""

#: src/references/solution.md
msgid "/// Calculate the magnitude of the given vector.\n"
msgstr ""

#: src/references/solution.md
msgid ""
"/// Change the magnitude of the vector to 1.0 without changing its "
"direction.\n"
msgstr ""

#: src/user-defined-types.md
msgid "[Named Structs](./user-defined-types/named-structs.md) (10 minutes)"
msgstr ""

#: src/user-defined-types.md
msgid "[Tuple Structs](./user-defined-types/tuple-structs.md) (10 minutes)"
msgstr ""

#: src/user-defined-types.md
msgid "[Enums](./user-defined-types/enums.md) (5 minutes)"
msgstr ""

#: src/user-defined-types.md
msgid ""
"[Static and Const](./user-defined-types/static-and-const.md) (5 minutes)"
msgstr ""

#: src/user-defined-types.md
msgid "[Type Aliases](./user-defined-types/aliases.md) (2 minutes)"
msgstr ""

#: src/user-defined-types.md
msgid ""
"[Exercise: Elevator Events](./user-defined-types/exercise.md) (15 minutes)"
msgstr ""

#: src/user-defined-types/named-structs.md
#, fuzzy
msgid "Like C and C++, Rust has support for custom structs:"
msgstr "Όπως η C και η C++, η Rust υποστηρίζει προσαρμοσμένες δομές:"

#: src/user-defined-types/named-structs.md
msgid "\"{} is {} years old\""
msgstr ""

#: src/user-defined-types/named-structs.md
#: src/android/interoperability/with-c/bindgen.md
msgid "\"Peter\""
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "\"Avery\""
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "\"Jackie\""
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "Structs work like in C or C++."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "Like in C++, and unlike in C, no typedef is needed to define a type."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "Unlike in C++, there is no inheritance between structs."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid ""
"This may be a good time to let people know there are different types of "
"structs."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid ""
"Zero-sized structs (e.g. `struct Foo;`) might be used when implementing a "
"trait on some type but don’t have any data that you want to store in the "
"value itself."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid ""
"The next slide will introduce Tuple structs, used when the field names are "
"not important."
msgstr ""

#: src/user-defined-types/named-structs.md
#, fuzzy
msgid ""
"If you already have variables with the right names, then you can create the "
"struct using a shorthand."
msgstr ""
"Εάν έχετε ήδη μεταβλητές με τα σωστά ονόματα, τότε μπορείτε να δημιουργήσετε "
"τις δόμηση χρησιμοποιώντας συντομογραφία:"

#: src/user-defined-types/named-structs.md
msgid ""
"The syntax `..avery` allows us to copy the majority of the fields from the "
"old struct without having to explicitly type it all out. It must always be "
"the last element."
msgstr ""

#: src/user-defined-types/tuple-structs.md
#, fuzzy
msgid "If the field names are unimportant, you can use a tuple struct:"
msgstr ""
"Εάν τα ονόματα των πεδίων δεν είναι σημαντικά, μπορείτε να χρησιμοποιήσετε "
"μια δομή πλειάδας:"

#: src/user-defined-types/tuple-structs.md
msgid "\"({}, {})\""
msgstr ""

#: src/user-defined-types/tuple-structs.md
#, fuzzy
msgid "This is often used for single-field wrappers (called newtypes):"
msgstr ""
"Αυτό χρησιμοποιείται συχνά για περιτυλίγματα ενός πεδίου (που ονομάζονται "
"νέοι τύποι):"

#: src/user-defined-types/tuple-structs.md
msgid "\"Ask a rocket scientist at NASA\""
msgstr ""

#: src/user-defined-types/tuple-structs.md
#: src/android/interoperability/cpp/cpp-bridge.md
#: src/bare-metal/microcontrollers/type-state.md
#: src/async/pitfalls/cancellation.md
msgid "// ...\n"
msgstr ""

#: src/user-defined-types/tuple-structs.md
#, fuzzy
msgid ""
"Newtypes are a great way to encode additional information about the value in "
"a primitive type, for example:"
msgstr ""
"Οι νέοι τύποι είναι ένας πολύ καλός τρόπος για να κωδικοποιήσετε πρόσθετες "
"πληροφορίες σχετικά με την τιμή σε έναν πρωτόγονο τύπο, για παράδειγμα:"

#: src/user-defined-types/tuple-structs.md
#, fuzzy
msgid "The number is measured in some units: `Newtons` in the example above."
msgstr ""
"Ο αριθμός μετριέται σε ορισμένες μονάδες: «Newtons» στο παραπάνω παράδειγμα."

#: src/user-defined-types/tuple-structs.md
#, fuzzy
msgid ""
"The value passed some validation when it was created, so you no longer have "
"to validate it again at every use: `PhoneNumber(String)` or `OddNumber(u32)`."
msgstr ""
"Η τιμή πέρασε κάποια επικύρωση όταν δημιουργήθηκε, επομένως δεν χρειάζεται "
"πλέον να την επικυρώνετε ξανά σε κάθε χρήση: «PhoneNumber(String)» ή "
"«OddNumber(u32)»."

#: src/user-defined-types/tuple-structs.md
msgid ""
"Demonstrate how to add a `f64` value to a `Newtons` type by accessing the "
"single field in the newtype."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"Rust generally doesn’t like inexplicit things, like automatic unwrapping or "
"for instance using booleans as integers."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid "Operator overloading is discussed on Day 3 (generics)."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"The example is a subtle reference to the [Mars Climate Orbiter](https://en."
"wikipedia.org/wiki/Mars_Climate_Orbiter) failure."
msgstr ""

#: src/user-defined-types/enums.md
#, fuzzy
msgid ""
"The `enum` keyword allows the creation of a type which has a few different "
"variants:"
msgstr ""
"Η λέξη-κλειδί «enum» επιτρέπει τη δημιουργία ενός τύπου που έχει λίγους "
"διαφορετικές παραλλαγές:"

#: src/user-defined-types/enums.md
msgid "// Simple variant\n"
msgstr ""

#: src/user-defined-types/enums.md
msgid "// Tuple variant\n"
msgstr ""

#: src/user-defined-types/enums.md
msgid "// Struct variant\n"
msgstr ""

#: src/user-defined-types/enums.md
msgid "\"On this turn: {:?}\""
msgstr ""

#: src/user-defined-types/enums.md
#, fuzzy
msgid "Enumerations allow you to collect a set of values under one type."
msgstr ""
"Οι απαριθμήσεις σάς επιτρέπουν να συλλέγετε ένα σύνολο τιμών κάτω από έναν "
"τύπο"

#: src/user-defined-types/enums.md
msgid ""
"`Direction` is a type with variants. There are two values of `Direction`: "
"`Direction::Left` and `Direction::Right`."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"`PlayerMove` is a type with three variants. In addition to the payloads, "
"Rust will store a discriminant so that it knows at runtime which variant is "
"in a `PlayerMove` value."
msgstr ""

#: src/user-defined-types/enums.md
#, fuzzy
msgid "This might be a good time to compare structs and enums:"
msgstr ""
"Αυτή μπορεί να είναι μια καλή στιγμή για να συγκρίνετε Structs και Enums:"

#: src/user-defined-types/enums.md
#, fuzzy
msgid ""
"In both, you can have a simple version without fields (unit struct) or one "
"with different types of fields (variant payloads)."
msgstr ""
"Και στα δύο, μπορείτε να έχετε μια απλή έκδοση χωρίς πεδία (μονάδα δομής) ή "
"μια με διαφορετικούς τύπους πεδίων (ωφέλιμα φορτία παραλλαγής)."

#: src/user-defined-types/enums.md
#, fuzzy
msgid ""
"You could even implement the different variants of an enum with separate "
"structs but then they wouldn’t be the same type as they would if they were "
"all defined in an enum."
msgstr ""
"Θα μπορούσατε ακόμη και να εφαρμόσετε τις διαφορετικές παραλλαγές ενός enum "
"με ξεχωριστές δομές, αλλά τότε δεν θα ήταν του ίδιου τύπου όπως θα ήταν αν "
"είχαν οριστεί όλες σε ένα enum."

#: src/user-defined-types/enums.md
msgid "Rust uses minimal space to store the discriminant."
msgstr ""

#: src/user-defined-types/enums.md
msgid "If necessary, it stores an integer of the smallest required size"
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"If the allowed variant values do not cover all bit patterns, it will use "
"invalid bit patterns to encode the discriminant (the \"niche "
"optimization\"). For example, `Option<&u8>` stores either a pointer to an "
"integer or `NULL` for the `None` variant."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"You can control the discriminant if needed (e.g., for compatibility with C):"
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"Without `repr`, the discriminant type takes 2 bytes, because 10001 fits 2 "
"bytes."
msgstr ""

#: src/user-defined-types/enums.md src/user-defined-types/static-and-const.md
#: src/memory-management/review.md src/memory-management/move.md
#: src/smart-pointers/box.md src/borrowing/shared.md
msgid "More to Explore"
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"Rust has several optimizations it can employ to make enums take up less "
"space."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"Null pointer optimization: For [some types](https://doc.rust-lang.org/std/"
"option/#representation), Rust guarantees that `size_of::<T>()` equals "
"`size_of::<Option<T>>()`."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"Example code if you want to show how the bitwise representation _may_ look "
"like in practice. It's important to note that the compiler provides no "
"guarantees regarding this representation, therefore this is totally unsafe."
msgstr ""

#: src/user-defined-types/static-and-const.md
msgid ""
"Static and constant variables are two different ways to create globally-"
"scoped values that cannot be moved or reallocated during the execution of "
"the program."
msgstr ""

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid "`const`"
msgstr "«const»."

#: src/user-defined-types/static-and-const.md
msgid ""
"Constant variables are evaluated at compile time and their values are "
"inlined wherever they are used:"
msgstr ""

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid ""
"According to the [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html) these are inlined upon use."
msgstr ""
"Σύμφωνα με το [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-const-vs-"
"static.html), αυτά ενσωματώνονται κατά τη χρήση."

#: src/user-defined-types/static-and-const.md
msgid ""
"Only functions marked `const` can be called at compile time to generate "
"`const` values. `const` functions can however be called at runtime."
msgstr ""

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid "`static`"
msgstr "«στατικό»."

#: src/user-defined-types/static-and-const.md
msgid ""
"Static variables will live during the whole execution of the program, and "
"therefore will not move:"
msgstr ""

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid "\"Welcome to RustOS 3.14\""
msgstr "Καλώς ήρθατε στην Ημέρα 1"

#: src/user-defined-types/static-and-const.md
msgid "\"{BANNER}\""
msgstr ""

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid ""
"As noted in the [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html), these are not inlined upon use and have an actual "
"associated memory location. This is useful for unsafe and embedded code, and "
"the variable lives through the entirety of the program execution. When a "
"globally-scoped value does not have a reason to need object identity, "
"`const` is generally preferred."
msgstr ""
"Όπως σημειώνεται στο [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-"
"const-vs-static.html), αυτά δεν είναι ενσωματωμένα κατά τη χρήση και έχουν "
"μια πραγματική συσχετισμένη θέση μνήμης. Αυτό είναι χρήσιμο για μη ασφαλή "
"και ενσωματωμένο κώδικα και η μεταβλητή ζει σε όλη την εκτέλεση του "
"προγράμματος."

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid "Mention that `const` behaves semantically similar to C++'s `constexpr`."
msgstr ""
"Αναφέρετε ότι το «const» συμπεριφέρεται σημασιολογικά παρόμοια με το "
"«constexpr» της C++."

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid ""
"`static`, on the other hand, is much more similar to a `const` or mutable "
"global variable in C++."
msgstr ""
"Το «static», από την άλλη πλευρά, μοιάζει πολύ περισσότερο με μια «const» ή "
"μεταβλητή καθολική μεταβλητή στη C++."

#: src/user-defined-types/static-and-const.md
msgid ""
"`static` provides object identity: an address in memory and state as "
"required by types with interior mutability such as `Mutex<T>`."
msgstr ""

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid ""
"It isn't super common that one would need a runtime evaluated constant, but "
"it is helpful and safer than using a static."
msgstr ""
"Δεν είναι πολύ συνηθισμένο να χρειάζεται κάποιος μια σταθερά αξιολόγησης "
"χρόνου εκτέλεσης, αλλά είναι χρήσιμο και ασφαλέστερο από τη χρήση στατικού."

#: src/user-defined-types/static-and-const.md
msgid "Properties table:"
msgstr ""

#: src/user-defined-types/static-and-const.md
#: src/chromium/adding-third-party-crates.md
msgid "Property"
msgstr ""

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid "Static"
msgstr "«στατικό»."

#: src/user-defined-types/static-and-const.md
msgid "Constant"
msgstr ""

#: src/user-defined-types/static-and-const.md
msgid "Has an address in memory"
msgstr ""

#: src/user-defined-types/static-and-const.md
#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Yes"
msgstr ""

#: src/user-defined-types/static-and-const.md
msgid "No (inlined)"
msgstr ""

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid "Lives for the entire duration of the program"
msgstr "Η λειτουργία «κύρια» είναι το σημείο εισόδου του προγράμματος."

#: src/user-defined-types/static-and-const.md
#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "No"
msgstr ""

#: src/user-defined-types/static-and-const.md
msgid "Can be mutable"
msgstr ""

#: src/user-defined-types/static-and-const.md
msgid "Yes (unsafe)"
msgstr ""

#: src/user-defined-types/static-and-const.md
#, fuzzy
msgid "Evaluated at compile time"
msgstr "Οι τιμές έχουν σταθερά μεγέθη γνωστά κατά το χρόνο μεταγλώττισης."

#: src/user-defined-types/static-and-const.md
msgid "Yes (initialised at compile time)"
msgstr ""

#: src/user-defined-types/static-and-const.md
msgid "Inlined wherever it is used"
msgstr ""

#: src/user-defined-types/static-and-const.md
msgid ""
"Because `static` variables are accessible from any thread, they must be "
"`Sync`. Interior mutability is possible through a [`Mutex`](https://doc.rust-"
"lang.org/std/sync/struct.Mutex.html), atomic or similar."
msgstr ""

#: src/user-defined-types/static-and-const.md
msgid "Thread-local data can be created with the macro `std::thread_local`."
msgstr ""

#: src/user-defined-types/aliases.md
msgid ""
"A type alias creates a name for another type. The two types can be used "
"interchangeably."
msgstr ""

#: src/user-defined-types/aliases.md
msgid "// Aliases are more useful with long, complex types:\n"
msgstr ""

#: src/user-defined-types/aliases.md
msgid "C programmers will recognize this as similar to a `typedef`."
msgstr ""

#: src/user-defined-types/exercise.md
msgid ""
"We will create a data structure to represent an event in an elevator control "
"system. It is up to you to define the types and functions to construct "
"various events. Use `#[derive(Debug)]` to allow the types to be formatted "
"with `{:?}`."
msgstr ""

#: src/user-defined-types/exercise.md
msgid ""
"This exercise only requires creating and populating data structures so that "
"`main` runs without errors. The next part of the course will cover getting "
"data out of these structures."
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid ""
"/// An event in the elevator system that the controller must react to.\n"
msgstr ""

#: src/user-defined-types/exercise.md
msgid "// TODO: add required variants\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "/// A direction of travel.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "/// The car has arrived on the given floor.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "/// The car doors have opened.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "/// The car doors have closed.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid ""
"/// A directional button was pressed in an elevator lobby on the given "
"floor.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "/// A floor button was pressed in the elevator car.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"A ground floor passenger has pressed the up button: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"The car has arrived on the ground floor: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"The car door opened: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"A passenger has pressed the 3rd floor button: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"The car door closed: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"The car has arrived on the 3rd floor: {:?}\""
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A button was pressed.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// The car has arrived at the given floor.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// The car's doors have opened.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// The car's doors have closed.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A floor is represented as an integer.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A user-accessible button.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A button in the elevator lobby on the given floor.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A floor button within the car.\n"
msgstr ""

#: src/welcome-day-2.md
#, fuzzy
msgid "Welcome to Day 2"
msgstr "Καλώς ήρθατε στην Ημέρα 2"

#: src/welcome-day-2.md
#, fuzzy
msgid ""
"Now that we have seen a fair amount of Rust, today will focus on Rust's type "
"system:"
msgstr "Τώρα που είδαμε αρκετή ποσότητα Rust, θα συνεχίσουμε με:"

#: src/welcome-day-2.md
msgid "Pattern matching: extracting data from structures."
msgstr ""

#: src/welcome-day-2.md
msgid "Methods: associating functions with types."
msgstr ""

#: src/welcome-day-2.md
msgid "Traits: behaviors shared by multiple types."
msgstr ""

#: src/welcome-day-2.md
msgid "Generics: parameterizing types on other types."
msgstr ""

#: src/welcome-day-2.md
msgid ""
"Standard library types and traits: a tour of Rust's rich standard library."
msgstr ""

#: src/welcome-day-2.md
msgid "[Welcome](./welcome-day-2.md) (3 minutes)"
msgstr ""

#: src/welcome-day-2.md
#, fuzzy
msgid "[Pattern Matching](./pattern-matching.md) (50 minutes)"
msgstr ""
"Δείτε το [pattern matching](../pattern-matching.md) για περισσότερες "
"λεπτομέρειες σχετικά με τα μοτίβα στο Σκουριά."

#: src/welcome-day-2.md
msgid "[Methods and Traits](./methods-and-traits.md) (55 minutes)"
msgstr ""

#: src/welcome-day-2.md
msgid "[Generics](./generics.md) (45 minutes)"
msgstr ""

#: src/welcome-day-2.md src/welcome-day-4.md
msgid ""
"Including 10 minute breaks, this session should take about 3 hours and 5 "
"minutes"
msgstr ""

#: src/pattern-matching.md
msgid "[Destructuring](./pattern-matching/destructuring.md) (10 minutes)"
msgstr ""

#: src/pattern-matching.md
msgid "[Let Control Flow](./pattern-matching/let-control-flow.md) (10 minutes)"
msgstr ""

#: src/pattern-matching.md
msgid ""
"[Exercise: Expression Evaluation](./pattern-matching/exercise.md) (30 "
"minutes)"
msgstr ""

#: src/pattern-matching/destructuring.md
msgid "Like tuples, structs and enums can also be destructured by matching:"
msgstr ""

#: src/pattern-matching/destructuring.md
msgid "Structs"
msgstr "Δομές"

#: src/pattern-matching/destructuring.md
msgid "\"x.0 = 1, b = {b}, y = {y}\""
msgstr ""

#: src/pattern-matching/destructuring.md
msgid "\"y = 2, x = {i:?}\""
msgstr ""

#: src/pattern-matching/destructuring.md
msgid "\"y = {y}, other fields were ignored\""
msgstr ""

#: src/pattern-matching/destructuring.md
#, fuzzy
msgid ""
"Patterns can also be used to bind variables to parts of your values. This is "
"how you inspect the structure of your types. Let us start with a simple "
"`enum` type:"
msgstr ""
"Τα μοτίβα μπορούν επίσης να χρησιμοποιηθούν για τη σύνδεση μεταβλητών σε "
"μέρη των τιμών σας. Ετσι επιθεωρείτε τη δομή των τύπων σας. Ας ξεκινήσουμε "
"με έναν απλό τύπο «enum»:"

#: src/pattern-matching/destructuring.md
msgid "\"cannot divide {n} into two equal parts\""
msgstr ""

#: src/pattern-matching/destructuring.md
msgid "\"{n} divided in two is {half}\""
msgstr ""

#: src/pattern-matching/destructuring.md
msgid "\"sorry, an error happened: {msg}\""
msgstr ""

#: src/pattern-matching/destructuring.md
#, fuzzy
msgid ""
"Here we have used the arms to _destructure_ the `Result` value. In the first "
"arm, `half` is bound to the value inside the `Ok` variant. In the second "
"arm, `msg` is bound to the error message."
msgstr ""
"Εδώ χρησιμοποιήσαμε τους βραχίονες για να _καταστρέψουμε_ την τιμή "
"\"Αποτέλεσμα\". Κατά την πρώτη βραχίονα, το \"μισό\" είναι δεσμευμένο στην "
"τιμή μέσα στην παραλλαγή \"Ok\". Στο δεύτερο χέρι, Το \"msg\" συνδέεται με "
"το μήνυμα σφάλματος."

#: src/pattern-matching/destructuring.md
msgid "Change the literal values in `foo` to match with the other patterns."
msgstr ""

#: src/pattern-matching/destructuring.md
msgid "Add a new field to `Foo` and make changes to the pattern as needed."
msgstr ""

#: src/pattern-matching/destructuring.md
msgid ""
"The distinction between a capture and a constant expression can be hard to "
"spot. Try changing the `2` in the second arm to a variable, and see that it "
"subtly doesn't work. Change it to a `const` and see it working again."
msgstr ""

#: src/pattern-matching/destructuring.md
#, fuzzy
msgid ""
"The `if`/`else` expression is returning an enum that is later unpacked with "
"a `match`."
msgstr "Βασικά σημεία:"

#: src/pattern-matching/destructuring.md
#, fuzzy
msgid ""
"You can try adding a third variant to the enum definition and displaying the "
"errors when running the code. Point out the places where your code is now "
"inexhaustive and how the compiler tries to give you hints."
msgstr ""
"Η έκφραση `if`/`else` επιστρέφει έναν αριθμό που αργότερα αποσυσκευάζεται με "
"ένα \"match\".\n"
"\n"
"Μπορείτε να δοκιμάσετε να προσθέσετε μια τρίτη παραλλαγή στον ορισμό enum "
"και να εμφανίσετε τα σφάλματα κατά την εκτέλεση του κώδικα. Επισημάνετε τα "
"σημεία όπου ο κώδικας σας είναι πλέον ανεξάντλητος και πώς ο μεταγλωττιστής "
"προσπαθεί να σας δώσει συμβουλές."

#: src/pattern-matching/destructuring.md
#, fuzzy
msgid ""
"The values in the enum variants can only be accessed after being pattern "
"matched."
msgstr ""
"Στο παραπάνω παράδειγμα, η πρόσβαση στο \"char\" στο \"KeyPress\" ή στο "
"\"x\" και \"y\" στο \"Click\" λειτουργεί μόνο μέσα σε μια δήλωση "
"\"ταιριάζουν\"."

#: src/pattern-matching/destructuring.md
msgid ""
"Demonstrate what happens when the search is inexhaustive. Note the advantage "
"the Rust compiler provides by confirming when all cases are handled."
msgstr ""

#: src/pattern-matching/destructuring.md
msgid ""
"Save the result of `divide_in_two` in the `result` variable and `match` it "
"in a loop. That won't compile because `msg` is consumed when matched. To fix "
"it, match `&result` instead of `result`. That will make `msg` a reference so "
"it won't be consumed. This [\"match ergonomics\"](https://rust-lang.github."
"io/rfcs/2005-match-ergonomics.html) appeared in Rust 2018. If you want to "
"support older Rust, replace `msg` with `ref msg` in the pattern."
msgstr ""

#: src/pattern-matching/let-control-flow.md
msgid ""
"Rust has a few control flow constructs which differ from other languages. "
"They are used for pattern matching:"
msgstr ""

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid "`if let` expressions"
msgstr "εκφράσεις \"αν ας\"."

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid "`while let` expressions"
msgstr "εκφράσεις «ενώ ας»."

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid "`match` expressions"
msgstr "«ταιριάζουν» εκφράσεις"

#: src/pattern-matching/let-control-flow.md
msgid ""
"The [`if let` expression](https://doc.rust-lang.org/reference/expressions/if-"
"expr.html#if-let-expressions) lets you execute different code depending on "
"whether a value matches a pattern:"
msgstr ""

#: src/pattern-matching/let-control-flow.md
msgid "\"slept for {:?}\""
msgstr ""

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid "`let else` expressions"
msgstr "εκφράσεις «ενώ ας»."

#: src/pattern-matching/let-control-flow.md
msgid ""
"For the common case of matching a pattern and returning from the function, "
"use [`let else`](https://doc.rust-lang.org/rust-by-example/flow_control/"
"let_else.html). The \"else\" case must diverge (`return`, `break`, or panic "
"- anything but falling off the end of the block)."
msgstr ""

#: src/pattern-matching/let-control-flow.md
msgid "\"got None\""
msgstr ""

#: src/pattern-matching/let-control-flow.md
msgid "\"got empty string\""
msgstr ""

#: src/pattern-matching/let-control-flow.md
msgid "\"not a hex digit\""
msgstr ""

#: src/pattern-matching/let-control-flow.md src/pattern-matching/solution.md
msgid "\"result: {:?}\""
msgstr ""

#: src/pattern-matching/let-control-flow.md src/generics/trait-bounds.md
#: src/smart-pointers/solution.md src/testing/googletest.md
#: src/testing/solution.md
msgid "\"foo\""
msgstr ""

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid ""
"Like with `if let`, there is a [`while let`](https://doc.rust-lang.org/"
"reference/expressions/loop-expr.html#predicate-pattern-loops) variant which "
"repeatedly tests a value against a pattern:"
msgstr ""
"Όπως και με το \"if\", υπάρχει μια παραλλαγή \"while let\" που ελέγχει "
"επανειλημμένα μια τιμή σε σχέση με ένα μοτίβο:"

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid ""
"Here [`String::pop`](https://doc.rust-lang.org/stable/std/string/struct."
"String.html#method.pop) returns `Some(c)` until the string is empty, after "
"which it will return `None`. The `while let` lets us keep iterating through "
"all items."
msgstr ""
"Εδώ ο επαναλήπτης που επιστρέφεται από το `v.iter()` θα επιστρέψει ένα "
"`Option<i32>` σε κάθε κλήση στο `επόμενο()`. Επιστρέφει \"Some(x)\" μέχρι να "
"ολοκληρωθεί, μετά από αυτό θα γίνει επιστροφή «Κανένα». Το \"while let\" μας "
"επιτρέπει να συνεχίσουμε να επαναλαμβάνουμε όλα τα στοιχεία."

#: src/pattern-matching/let-control-flow.md
msgid "if-let"
msgstr ""

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid ""
"Unlike `match`, `if let` does not have to cover all branches. This can make "
"it more concise than `match`."
msgstr ""
"Σε αντίθεση με το \"match\", το \"if let\" δεν υποστηρίζει προστατευτικές "
"ρήτρες για την αντιστοίχιση μοτίβων."

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid "A common usage is handling `Some` values when working with `Option`."
msgstr ""
"Μια κοινή χρήση είναι ο χειρισμός των τιμών \"Μερικών\" όταν εργάζεστε με το "
"\"Option\"."

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid ""
"Unlike `match`, `if let` does not support guard clauses for pattern matching."
msgstr ""
"Σε αντίθεση με το \"match\", το \"if let\" δεν υποστηρίζει προστατευτικές "
"ρήτρες για την αντιστοίχιση μοτίβων."

#: src/pattern-matching/let-control-flow.md
msgid "let-else"
msgstr ""

#: src/pattern-matching/let-control-flow.md
msgid ""
"`if-let`s can pile up, as shown. The `let-else` construct supports "
"flattening this nested code. Rewrite the awkward version for students, so "
"they can see the transformation."
msgstr ""

#: src/pattern-matching/let-control-flow.md
msgid "The rewritten version is:"
msgstr ""

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid "while-let"
msgstr "εκφράσεις «ενώ ας»."

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid ""
"Point out that the `while let` loop will keep going as long as the value "
"matches the pattern."
msgstr ""
"Επισημάνετε ότι ο βρόχος \"while let\" θα συνεχίσει να λειτουργεί όσο η τιμή "
"ταιριάζει με το μοτίβο."

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid ""
"You could rewrite the `while let` loop as an infinite loop with an if "
"statement that breaks when there is no value to unwrap for `name.pop()`. The "
"`while let` provides syntactic sugar for the above scenario."
msgstr ""
"Θα μπορούσατε να ξαναγράψετε τον βρόχο «while let» ως άπειρο βρόχο με μια "
"πρόταση if που διακόπτεται όταν δεν υπάρχει τιμή για ξετύλιγμα για το «iter."
"next()». Το \"while let\" παρέχει συντακτική ζάχαρη για το παραπάνω σενάριο."

#: src/pattern-matching/exercise.md
msgid "Let's write a simple recursive evaluator for arithmetic expressions."
msgstr ""

#: src/pattern-matching/exercise.md
msgid ""
"The `Box` type here is a smart pointer, and will be covered in detail later "
"in the course. An expression can be \"boxed\" with `Box::new` as seen in the "
"tests. To evaluate a boxed expression, use the deref operator (`*`) to "
"\"unbox\" it: `eval(*boxed_expr)`."
msgstr ""

#: src/pattern-matching/exercise.md
msgid ""
"Some expressions cannot be evaluated and will return an error. The standard "
"[`Result<Value, String>`](https://doc.rust-lang.org/std/result/enum.Result."
"html) type is an enum that represents either a successful value "
"(`Ok(Value)`) or an error (`Err(String)`). We will cover this type in detail "
"later."
msgstr ""

#: src/pattern-matching/exercise.md
msgid ""
"Copy and paste the code into the Rust playground, and begin implementing "
"`eval`. The final product should pass the tests. It may be helpful to use "
"`todo!()` and get the tests to pass one-by-one. You can also skip a test "
"temporarily with `#[ignore]`:"
msgstr ""

#: src/pattern-matching/exercise.md
msgid ""
"If you finish early, try writing a test that results in division by zero or "
"integer overflow. How could you handle this with `Result` instead of a panic?"
msgstr ""

#: src/pattern-matching/exercise.md src/pattern-matching/solution.md
msgid "/// An operation to perform on two subexpressions.\n"
msgstr ""

#: src/pattern-matching/exercise.md src/pattern-matching/solution.md
msgid "/// An expression, in tree form.\n"
msgstr ""

#: src/pattern-matching/exercise.md src/pattern-matching/solution.md
msgid "/// An operation on two subexpressions.\n"
msgstr ""

#: src/pattern-matching/exercise.md src/pattern-matching/solution.md
msgid "/// A literal value\n"
msgstr ""

#: src/pattern-matching/exercise.md src/pattern-matching/solution.md
msgid "\"division by zero\""
msgstr ""

#: src/pattern-matching/solution.md
msgid "\"expr: {:?}\""
msgstr ""

#: src/methods-and-traits.md
msgid "[Methods](./methods-and-traits/methods.md) (10 minutes)"
msgstr ""

#: src/methods-and-traits.md
msgid "[Traits](./methods-and-traits/traits.md) (10 minutes)"
msgstr ""

#: src/methods-and-traits.md
msgid "[Deriving](./methods-and-traits/deriving.md) (5 minutes)"
msgstr ""

#: src/methods-and-traits.md
msgid "[Trait Objects](./methods-and-traits/trait-objects.md) (10 minutes)"
msgstr ""

#: src/methods-and-traits.md
msgid ""
"[Exercise: Generic Logger](./methods-and-traits/exercise.md) (20 minutes)"
msgstr ""

#: src/methods-and-traits.md
msgid "This segment should take about 55 minutes"
msgstr ""

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"Rust allows you to associate functions with your new types. You do this with "
"an `impl` block:"
msgstr ""
"Το Rust σάς επιτρέπει να συσχετίζετε λειτουργίες με τους νέους τύπους σας. "
"Το κάνετε αυτό με ένα μπλοκ \"impl\":"

#: src/methods-and-traits/methods.md
msgid "// No receiver, a static method\n"
msgstr ""

#: src/methods-and-traits/methods.md
msgid "// Exclusive borrowed read-write access to self\n"
msgstr ""

#: src/methods-and-traits/methods.md
msgid "// Shared and read-only borrowed access to self\n"
msgstr ""

#: src/methods-and-traits/methods.md
msgid "\"Recorded {} laps for {}:\""
msgstr ""

#: src/methods-and-traits/methods.md
msgid "\"Lap {idx}: {lap} sec\""
msgstr ""

#: src/methods-and-traits/methods.md
msgid "// Exclusive ownership of self\n"
msgstr ""

#: src/methods-and-traits/methods.md
msgid "\"Race {} is finished, total lap time: {}\""
msgstr ""

#: src/methods-and-traits/methods.md
msgid "\"Monaco Grand Prix\""
msgstr ""

#: src/methods-and-traits/methods.md
msgid "// race.add_lap(42);\n"
msgstr ""

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"The `self` arguments specify the \"receiver\" - the object the method acts "
"on. There are several common receivers for a method:"
msgstr ""
"Το \"&self\" παραπάνω υποδεικνύει ότι η μέθοδος δανείζεται το αντικείμενο "
"αμετάβλητα. Εκεί είναι άλλοι πιθανοί δέκτες για μια μέθοδο:"

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"`&self`: borrows the object from the caller using a shared and immutable "
"reference. The object can be used again afterwards."
msgstr ""
"«&self»: δανείζεται το αντικείμενο από τον καλούντα χρησιμοποιώντας ένα "
"κοινόχρηστο και αμετάβλητο αναφορά. Το αντικείμενο μπορεί να χρησιμοποιηθεί "
"ξανά μετά."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"`&mut self`: borrows the object from the caller using a unique and mutable "
"reference. The object can be used again afterwards."
msgstr ""
"\"&mut self\": δανείζεται το αντικείμενο από τον καλούντα χρησιμοποιώντας "
"ένα μοναδικό και ευμετάβλητο αναφορά. Το αντικείμενο μπορεί να "
"χρησιμοποιηθεί ξανά μετά."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"`self`: takes ownership of the object and moves it away from the caller. The "
"method becomes the owner of the object. The object will be dropped "
"(deallocated) when the method returns, unless its ownership is explicitly "
"transmitted. Complete ownership does not automatically mean mutability."
msgstr ""
"«self»: αναλαμβάνει την κυριότητα του αντικειμένου και το απομακρύνει από "
"τον καλούντα. ο μέθοδος γίνεται ο ιδιοκτήτης του αντικειμένου. Το "
"αντικείμενο θα απορριφθεί (κατανεμηθεί) όταν η μέθοδος επιστρέφει, εκτός εάν "
"η ιδιοκτησία της είναι ρητά μεταδόθηκε."

#: src/methods-and-traits/methods.md
msgid "`mut self`: same as above, but the method can mutate the object."
msgstr ""

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"No receiver: this becomes a static method on the struct. Typically used to "
"create constructors which are called `new` by convention."
msgstr ""
"Χωρίς δέκτη: αυτό γίνεται μια στατική μέθοδος στη δομή. Συνήθως "
"χρησιμοποιείται σε δημιουργήστε κατασκευαστές που ονομάζονται «νέοι» κατά "
"σύμβαση."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid "It can be helpful to introduce methods by comparing them to functions."
msgstr "Βασικά σημεία:"

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"Methods are called on an instance of a type (such as a struct or enum), the "
"first parameter represents the instance as `self`."
msgstr ""
"Μπορεί να είναι χρήσιμη η εισαγωγή μεθόδων συγκρίνοντάς τες με συναρτήσεις."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"Developers may choose to use methods to take advantage of method receiver "
"syntax and to help keep them more organized. By using methods we can keep "
"all the implementation code in one predictable place."
msgstr ""
"Οι μέθοδοι καλούνται σε μια παρουσία ενός τύπου (όπως μια δομή ή ένα enum), "
"η πρώτη παράμετρος αντιπροσωπεύει την παρουσία ως \"self\"."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid "Point out the use of the keyword `self`, a method receiver."
msgstr ""
"Οι προγραμματιστές μπορούν να επιλέξουν να χρησιμοποιήσουν μεθόδους για να "
"επωφεληθούν από τη σύνταξη του δέκτη μεθόδων και να τους βοηθήσουν να "
"διατηρηθούν πιο οργανωμένοι. Χρησιμοποιώντας μεθόδους μπορούμε να "
"διατηρήσουμε όλο τον κώδικα υλοποίησης σε ένα προβλέψιμο μέρος."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"Show that it is an abbreviated term for `self: Self` and perhaps show how "
"the struct name could also be used."
msgstr "Επισημάνετε τη χρήση της λέξης-κλειδιού «self», ενός δέκτη μεθόδου."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"Explain that `Self` is a type alias for the type the `impl` block is in and "
"can be used elsewhere in the block."
msgstr ""
"Δείξτε ότι είναι ένας συντομευμένος όρος για το \"self:&Self\" και ίσως "
"δείξετε πώς θα μπορούσε επίσης να χρησιμοποιηθεί το όνομα της δομής."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"Note how `self` is used like other structs and dot notation can be used to "
"refer to individual fields."
msgstr ""
"Εξηγήστε ότι το Self είναι ένα ψευδώνυμο τύπου για τον τύπο στον οποίο "
"βρίσκεται το μπλοκ «impl» και μπορεί να χρησιμοποιηθεί αλλού στο μπλοκ."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"This might be a good time to demonstrate how the `&self` differs from `self` "
"by trying to run `finish` twice."
msgstr ""
"Σημειώστε πώς χρησιμοποιείται ο εαυτός όπως και άλλες δομές και ο "
"συμβολισμός κουκκίδων μπορεί να χρησιμοποιηθεί για αναφορά σε μεμονωμένα "
"πεδία."

#: src/methods-and-traits/methods.md
#, fuzzy
msgid ""
"Beyond variants on `self`, there are also [special wrapper types](https://"
"doc.rust-lang.org/reference/special-types-and-traits.html) allowed to be "
"receiver types, such as `Box<Self>`."
msgstr ""
"Πέρα από παραλλαγές στον «εαυτό», υπάρχουν επίσης [ειδικοί τύποι "
"περιτυλίγματος](https://doc.rust-lang.org/reference/special-types-and-traits."
"html) επιτρέπεται να είναι τύποι δεκτών, όπως \"Box\n"
"\n"
"\"."

#: src/methods-and-traits/traits.md
#, fuzzy
msgid ""
"Rust lets you abstract over types with traits. They're similar to interfaces:"
msgstr ""
"Το Rust σάς επιτρέπει να αφηρείτε τους τύπους με χαρακτηριστικά. Είναι "
"παρόμοια με τις διεπαφές:"

#: src/methods-and-traits/traits.md
msgid "\"Oh you're a cutie! What's your name? {}\""
msgstr ""

#: src/methods-and-traits/traits.md src/methods-and-traits/trait-objects.md
msgid "\"Woof, my name is {}!\""
msgstr ""

#: src/methods-and-traits/traits.md src/methods-and-traits/trait-objects.md
msgid "\"Miau!\""
msgstr ""

#: src/methods-and-traits/traits.md src/methods-and-traits/trait-objects.md
msgid "\"Fido\""
msgstr ""

#: src/methods-and-traits/traits.md
msgid ""
"A trait defines a number of methods that types must have in order to "
"implement the trait."
msgstr ""

#: src/methods-and-traits/traits.md
msgid "Traits are implemented in an `impl <trait> for <type> { .. }` block."
msgstr ""

#: src/methods-and-traits/traits.md
msgid ""
"Traits may specify pre-implemented (provided) methods and methods that users "
"are required to implement themselves. Provided methods can rely on required "
"methods. In this case, `greet` is provided, and relies on `talk`."
msgstr ""

#: src/methods-and-traits/deriving.md
msgid ""
"Supported traits can be automatically implemented for your custom types, as "
"follows:"
msgstr ""

#: src/methods-and-traits/deriving.md
msgid "// Default trait adds `default` constructor.\n"
msgstr ""

#: src/methods-and-traits/deriving.md
msgid "// Clone trait adds `clone` method.\n"
msgstr ""

#: src/methods-and-traits/deriving.md
msgid "\"EldurScrollz\""
msgstr ""

#: src/methods-and-traits/deriving.md
msgid "// Debug trait adds support for printing with `{:?}`.\n"
msgstr ""

#: src/methods-and-traits/deriving.md
msgid "\"{:?} vs. {:?}\""
msgstr ""

#: src/methods-and-traits/deriving.md
msgid ""
"Derivation is implemented with macros, and many crates provide useful derive "
"macros to add useful functionality. For example, `serde` can derive "
"serialization support for a struct using `#[derive(Serialize)]`."
msgstr ""

#: src/methods-and-traits/trait-objects.md
#, fuzzy
msgid ""
"Trait objects allow for values of different types, for instance in a "
"collection:"
msgstr ""
"Μπορείτε να το σκεφτείτε ως «κενό» που μπορεί να σας είναι οικείο από άλλους "
"γλώσσες προγραμματισμού."

#: src/methods-and-traits/trait-objects.md
msgid "\"Hello, who are you? {}\""
msgstr ""

#: src/methods-and-traits/trait-objects.md
#, fuzzy
msgid "Memory layout after allocating `pets`:"
msgstr "Διάταξη μνήμης μετά την εκχώρηση «xs»:"

#: src/methods-and-traits/trait-objects.md
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - "
"- -.\n"
":                           :     :                                             :\n"
":    pets                   :     :                     +----+----+----+----"
"+   :\n"
":   +-----------+-------+   :     :   +-----+-----+  .->| F  | i  | d  | o  "
"|   :\n"
":   | ptr       |   o---+---+-----+-->| o o | o o |  |  +----+----+----+----"
"+   :\n"
":   | len       |     2 |   :     :   +-|-|-+-|-|-+  "
"`---------.                :\n"
":   | capacity  |     2 |   :     :     | |   | |    data      "
"|                :\n"
":   +-----------+-------+   :     :     | |   | |   +-------+--|-------"
"+        :\n"
":                           :     :     | |   | '-->| name  |  o, 4, 4 "
"|        :\n"
":                           :     :     | |   |     | age   |        5 "
"|        :\n"
"`- - - - - - - - - - - - - -'     :     | |   |     +-------+----------"
"+        :\n"
"                                  :     | |   "
"|                                 :\n"
"                                  :     | |   |      "
"vtable                     :\n"
"                                  :     | |   |     +----------------------"
"+    :\n"
"                                  :     | |   '---->| \"<Dog as Pet>::talk\" "
"|    :\n"
"                                  :     | |         +----------------------"
"+    :\n"
"                                  :     | "
"|                                     :\n"
"                                  :     | |    "
"data                             :\n"
"                                  :     | |   +-------+-------"
"+                 :\n"
"                                  :     | '-->| lives |     9 "
"|                 :\n"
"                                  :     |     +-------+-------"
"+                 :\n"
"                                  :     "
"|                                       :\n"
"                                  :     |      "
"vtable                           :\n"
"                                  :     |     +----------------------"
"+          :\n"
"                                  :     '---->| \"<Cat as Pet>::talk\" "
"|          :\n"
"                                  :           +----------------------"
"+          :\n"
"                                  :                                             :\n"
"                                  '- - - - - - - - - - - - - - - - - - - - - "
"- -'\n"
"```"
msgstr ""

#: src/methods-and-traits/trait-objects.md
#, fuzzy
msgid ""
"Types that implement a given trait may be of different sizes. This makes it "
"impossible to have things like `Vec<dyn Pet>` in the example above."
msgstr ""
"Τα χαρακτηριστικά μπορεί να προσδιορίζουν προ-εφαρμοσμένες (προεπιλεγμένες) "
"μεθόδους και μεθόδους που απαιτείται από τους χρήστες να εφαρμόσουν οι "
"ίδιοι. Οι μέθοδοι με προεπιλεγμένες υλοποιήσεις μπορούν να βασίζονται στις "
"απαιτούμενες μεθόδους."

#: src/methods-and-traits/trait-objects.md
#, fuzzy
msgid ""
"`dyn Pet` is a way to tell the compiler about a dynamically sized type that "
"implements `Pet`."
msgstr ""
"Οι τύποι που εφαρμόζουν ένα δεδομένο χαρακτηριστικό μπορεί να είναι "
"διαφορετικών μεγεθών. Αυτό καθιστά αδύνατο να υπάρχουν πράγματα όπως το \"Vec"

#: src/methods-and-traits/trait-objects.md
msgid ""
"In the example, `pets` is allocated on the stack and the vector data is on "
"the heap. The two vector elements are _fat pointers_:"
msgstr ""

#: src/methods-and-traits/trait-objects.md
#, fuzzy
msgid ""
"A fat pointer is a double-width pointer. It has two components: a pointer to "
"the actual object and a pointer to the [virtual method table](https://en."
"wikipedia.org/wiki/Virtual_method_table) (vtable) for the `Pet` "
"implementation of that particular object."
msgstr "\" στο παραπάνω παράδειγμα."

#: src/methods-and-traits/trait-objects.md
msgid ""
"The data for the `Dog` named Fido is the `name` and `age` fields. The `Cat` "
"has a `lives` field."
msgstr ""

#: src/methods-and-traits/trait-objects.md
#, fuzzy
msgid "Compare these outputs in the above example:"
msgstr ""
"Το \"dyn Greet\" είναι ένας τρόπος να πείτε στον μεταγλωττιστή έναν τύπο "
"δυναμικού μεγέθους που υλοποιεί το \"Greet\"."

#: src/methods-and-traits/trait-objects.md src/std-traits/closures.md
msgid "\"{} {}\""
msgstr ""

#: src/methods-and-traits/trait-objects.md src/std-traits/exercise.md
#: src/std-traits/solution.md src/modules/exercise.md src/modules/solution.md
#: src/android/build-rules/library.md
#: src/android/interoperability/cpp/rust-bridge.md
#: src/async/pitfalls/cancellation.md
msgid "\"{}\""
msgstr ""

#: src/methods-and-traits/exercise.md
msgid ""
"Let's design a simple logging utility, using a trait `Logger` with a `log` "
"method. Code which might log its progress can then take an `&impl Logger`. "
"In testing, this might put messages in the test logfile, while in a "
"production build it would send messages to a log server."
msgstr ""

#: src/methods-and-traits/exercise.md
msgid ""
"However, the `StderrLogger` given below logs all messages, regardless of "
"verbosity. Your task is to write a `VerbosityFilter` type that will ignore "
"messages above a maximum verbosity."
msgstr ""

#: src/methods-and-traits/exercise.md
msgid ""
"This is a common pattern: a struct wrapping a trait implementation and "
"implementing that same trait, adding behavior in the process. What other "
"kinds of wrappers might be useful in a logging utility?"
msgstr ""

#: src/methods-and-traits/exercise.md src/methods-and-traits/solution.md
msgid "/// Log a message at the given verbosity level.\n"
msgstr ""

#: src/methods-and-traits/exercise.md src/methods-and-traits/solution.md
msgid "\"verbosity={verbosity}: {message}\""
msgstr ""

#: src/methods-and-traits/exercise.md src/methods-and-traits/solution.md
msgid "\"FYI\""
msgstr ""

#: src/methods-and-traits/exercise.md src/methods-and-traits/solution.md
msgid "\"Uhoh\""
msgstr ""

#: src/methods-and-traits/exercise.md
msgid "// TODO: Define and implement `VerbosityFilter`.\n"
msgstr ""

#: src/methods-and-traits/solution.md
msgid "/// Only log messages up to the given verbosity level.\n"
msgstr ""

#: src/generics.md
msgid "[Generic Functions](./generics/generic-functions.md) (5 minutes)"
msgstr ""

#: src/generics.md
msgid "[Generic Data Types](./generics/generic-data.md) (15 minutes)"
msgstr ""

#: src/generics.md
msgid "[Trait Bounds](./generics/trait-bounds.md) (10 minutes)"
msgstr ""

#: src/generics.md
msgid "[impl Trait](./generics/impl-trait.md) (5 minutes)"
msgstr ""

#: src/generics.md
msgid "[Exercise: Generic min](./generics/exercise.md) (10 minutes)"
msgstr ""

#: src/generics.md src/smart-pointers.md src/iterators.md src/error-handling.md
msgid "This segment should take about 45 minutes"
msgstr ""

#: src/generics/generic-functions.md
#, fuzzy
msgid ""
"Rust supports generics, which lets you abstract algorithms or data "
"structures (such as sorting or a binary tree) over the types used or stored."
msgstr ""
"Γενικά υποστήριξη σκουριάς, που σας επιτρέπει να αφαιρέσετε έναν αλγόριθμο "
"(όπως ταξινόμηση) πάνω από τους τύπους που χρησιμοποιούνται στον αλγόριθμο."

#: src/generics/generic-functions.md
msgid "/// Pick `even` or `odd` depending on the value of `n`.\n"
msgstr ""

#: src/generics/generic-functions.md
msgid "\"picked a number: {:?}\""
msgstr ""

#: src/generics/generic-functions.md
msgid "\"picked a tuple: {:?}\""
msgstr ""

#: src/generics/generic-functions.md
msgid "\"dog\""
msgstr ""

#: src/generics/generic-functions.md
msgid "\"cat\""
msgstr ""

#: src/generics/generic-functions.md
msgid ""
"Rust infers a type for T based on the types of the arguments and return "
"value."
msgstr ""

#: src/generics/generic-functions.md
msgid ""
"This is similar to C++ templates, but Rust partially compiles the generic "
"function immediately, so that function must be valid for all types matching "
"the constraints. For example, try modifying `pick` to return `even + odd` if "
"`n == 0`. Even if only the `pick` instantiation with integers is used, Rust "
"still considers it invalid. C++ would let you do this."
msgstr ""

#: src/generics/generic-functions.md
#, fuzzy
msgid ""
"Generic code is turned into non-generic code based on the call sites. This "
"is a zero-cost abstraction: you get exactly the same result as if you had "
"hand-coded the data structures without the abstraction."
msgstr ""
"Αυτή είναι μια αφαίρεση μηδενικού κόστους: παίρνετε ακριβώς το ίδιο "
"αποτέλεσμα όπως αν είχατε κωδικοποίησαν τις δομές δεδομένων χωρίς την "
"αφαίρεση."

#: src/generics/generic-data.md
#, fuzzy
msgid "You can use generics to abstract over the concrete field type:"
msgstr ""
"Μπορείτε να χρησιμοποιήσετε γενικά για να αφαιρέσετε τον συγκεκριμένο τύπο "
"πεδίου:"

#: src/generics/generic-data.md
msgid "// fn set_x(&mut self, x: T)\n"
msgstr ""

#: src/generics/generic-data.md
msgid "\"{integer:?} and {float:?}\""
msgstr ""

#: src/generics/generic-data.md
msgid "\"coords: {:?}\""
msgstr ""

#: src/generics/generic-data.md
#, fuzzy
msgid ""
"_Q:_ Why `T` is specified twice in `impl<T> Point<T> {}`? Isn't that "
"redundant?"
msgstr ""
"_Ε:_ Γιατί το `T` καθορίζεται δύο φορές στο `impl<T> Point<T> {}`; Δεν είναι "
"περιττό;"

#: src/generics/generic-data.md
#, fuzzy
msgid ""
"This is because it is a generic implementation section for generic type. "
"They are independently generic."
msgstr ""
"Αυτό συμβαίνει επειδή είναι μια γενική ενότητα υλοποίησης για γενικό τύπο. "
"Είναι ανεξάρτητα γενικά."

#: src/generics/generic-data.md
#, fuzzy
msgid "It means these methods are defined for any `T`."
msgstr "Σημαίνει ότι αυτές οι μέθοδοι ορίζονται για οποιοδήποτε «T»."

#: src/generics/generic-data.md
#, fuzzy
msgid "It is possible to write `impl Point<u32> { .. }`."
msgstr "Είναι δυνατό να γράψετε `impl Point<u32> { .. }`."

#: src/generics/generic-data.md
#, fuzzy
msgid ""
"`Point` is still generic and you can use `Point<f64>`, but methods in this "
"block will only be available for `Point<u32>`."
msgstr ""
"Το \"Point\" εξακολουθεί να είναι γενικό και μπορείτε να χρησιμοποιήσετε το "
"\"Point\n"
"\n"
"\", αλλά οι μέθοδοι σε αυτό το μπλοκ θα είναι διαθέσιμες μόνο για το "
"\"Point\n"
"\n"
"\"."

#: src/generics/generic-data.md
msgid ""
"Try declaring a new variable `let p = Point { x: 5, y: 10.0 };`. Update the "
"code to allow points that have elements of different types, by using two "
"type variables, e.g., `T` and `U`."
msgstr ""

#: src/generics/trait-bounds.md
#, fuzzy
msgid ""
"When working with generics, you often want to require the types to implement "
"some trait, so that you can call this trait's methods."
msgstr ""
"Όταν εργάζεστε με γενόσημα, συχνά θέλετε να περιορίσετε τους τύπους. "
"Μπορείτε να το κάνετε αυτό με \"T: Trait\" ή \"immpl Trait\":"

#: src/generics/trait-bounds.md
msgid "You can do this with `T: Trait` or `impl Trait`:"
msgstr ""

#: src/generics/trait-bounds.md
msgid "// struct NotClonable;\n"
msgstr ""

#: src/generics/trait-bounds.md
msgid "\"{pair:?}\""
msgstr ""

#: src/generics/trait-bounds.md
msgid "Try making a `NonClonable` and passing it to `duplicate`."
msgstr ""

#: src/generics/trait-bounds.md
msgid "When multiple traits are necessary, use `+` to join them."
msgstr ""

#: src/generics/trait-bounds.md
msgid "Show a `where` clause, students will encounter it when reading code."
msgstr ""

#: src/generics/trait-bounds.md
#, fuzzy
msgid "It declutters the function signature if you have many parameters."
msgstr "Καταργεί την υπογραφή της συνάρτησης εάν έχετε πολλές παραμέτρους."

#: src/generics/trait-bounds.md
#, fuzzy
msgid "It has additional features making it more powerful."
msgstr "Διαθέτει πρόσθετα χαρακτηριστικά που το κάνουν πιο ισχυρό."

#: src/generics/trait-bounds.md
#, fuzzy
msgid ""
"If someone asks, the extra feature is that the type on the left of \":\" can "
"be arbitrary, like `Option<T>`."
msgstr ""
"Εάν κάποιος ρωτήσει, το επιπλέον χαρακτηριστικό είναι ότι ο τύπος στα "
"αριστερά του \":\" μπορεί να είναι αυθαίρετος, όπως \"Επιλογή\n"
"\n"
"\"."

#: src/generics/trait-bounds.md
msgid ""
"Note that Rust does not (yet) support specialization. For example, given the "
"original `duplicate`, it is invalid to add a specialized `duplicate(a: u32)`."
msgstr ""

#: src/generics/impl-trait.md
#, fuzzy
msgid ""
"Similar to trait bounds, an `impl Trait` syntax can be used in function "
"arguments and return values:"
msgstr ""
"Παρόμοια με τα όρια χαρακτηριστικών, μια σύνταξη «impl Trait» μπορεί να "
"χρησιμοποιηθεί στη συνάρτηση ορίσματα και τιμές επιστροφής:"

#: src/generics/impl-trait.md
msgid ""
"// Syntactic sugar for:\n"
"//   fn add_42_millions<T: Into<i32>>(x: T) -> i32 {\n"
msgstr ""

#: src/generics/impl-trait.md
msgid "\"{many}\""
msgstr ""

#: src/generics/impl-trait.md
msgid "\"{many_more}\""
msgstr ""

#: src/generics/impl-trait.md
msgid "\"debuggable: {debuggable:?}\""
msgstr ""

#: src/generics/impl-trait.md
#, fuzzy
msgid ""
"`impl Trait` allows you to work with types which you cannot name. The "
"meaning of `impl Trait` is a bit different in the different positions."
msgstr ""
"Η έννοια του «impl Trait» είναι λίγο διαφορετική στις διαφορετικές θέσεις."

#: src/generics/impl-trait.md
#, fuzzy
msgid ""
"For a parameter, `impl Trait` is like an anonymous generic parameter with a "
"trait bound."
msgstr ""
"Για μια παράμετρο, το \"impl Trait\" είναι σαν μια ανώνυμη γενική παράμετρος "
"με δεσμευμένο χαρακτηριστικό."

#: src/generics/impl-trait.md
#, fuzzy
msgid ""
"For a return type, it means that the return type is some concrete type that "
"implements the trait, without naming the type. This can be useful when you "
"don't want to expose the concrete type in a public API."
msgstr ""
"Για έναν τύπο επιστροφής, σημαίνει ότι ο τύπος επιστροφής είναι κάποιος "
"συγκεκριμένος τύπος που υλοποιεί το χαρακτηριστικό, χωρίς να ονομάσουμε τον "
"τύπο. Αυτό μπορεί να είναι χρήσιμο όταν δεν θέλετε να εκθέσετε τον τύπο "
"σκυροδέματος στο α δημόσιο API."

#: src/generics/impl-trait.md
msgid ""
"Inference is hard in return position. A function returning `impl Foo` picks "
"the concrete type it returns, without writing it out in the source. A "
"function returning a generic type like `collect<B>() -> B` can return any "
"type satisfying `B`, and the caller may need to choose one, such as with "
"`let x: Vec<_> = foo.collect()` or with the turbofish, `foo.collect::"
"<Vec<_>>()`."
msgstr ""

#: src/generics/impl-trait.md
msgid ""
"What is the type of `debuggable`? Try `let debuggable: () = ..` to see what "
"the error message shows."
msgstr ""

#: src/generics/exercise.md
msgid ""
"In this short exercise, you will implement a generic `min` function that "
"determines the minimum of two values, using a `LessThan` trait."
msgstr ""

#: src/generics/exercise.md src/generics/solution.md
msgid "/// Return true if self is less than other.\n"
msgstr ""

#: src/generics/exercise.md
msgid "// TODO: implement the `min` function used in `main`.\n"
msgstr ""

#: src/generics/exercise.md src/generics/solution.md
msgid "\"Shapiro\""
msgstr ""

#: src/generics/exercise.md src/generics/solution.md
msgid "\"Baumann\""
msgstr ""

#: src/welcome-day-2-afternoon.md
msgid "[Standard Library Types](./std-types.md) (1 hour and 10 minutes)"
msgstr ""

#: src/welcome-day-2-afternoon.md
msgid "[Standard Library Traits](./std-traits.md) (1 hour and 40 minutes)"
msgstr ""

#: src/std-types.md
msgid "[Standard Library](./std-types/std.md) (3 minutes)"
msgstr ""

#: src/std-types.md
msgid "[Documentation](./std-types/docs.md) (5 minutes)"
msgstr ""

#: src/std-types.md
msgid "[Option](./std-types/option.md) (10 minutes)"
msgstr ""

#: src/std-types.md
msgid "[Result](./std-types/result.md) (10 minutes)"
msgstr ""

#: src/std-types.md
msgid "[String](./std-types/string.md) (10 minutes)"
msgstr ""

#: src/std-types.md
msgid "[Vec](./std-types/vec.md) (10 minutes)"
msgstr ""

#: src/std-types.md
msgid "[HashMap](./std-types/hashmap.md) (10 minutes)"
msgstr ""

#: src/std-types.md
msgid "[Exercise: Counter](./std-types/exercise.md) (10 minutes)"
msgstr ""

#: src/std-types.md src/memory-management.md src/slices-and-lifetimes.md
msgid "This segment should take about 1 hour and 10 minutes"
msgstr ""

#: src/std-types.md
msgid ""
"For each of the slides in this section, spend some time reviewing the "
"documentation pages, highlighting some of the more common methods."
msgstr ""

#: src/std-types/std.md
#, fuzzy
msgid ""
"Rust comes with a standard library which helps establish a set of common "
"types used by Rust libraries and programs. This way, two libraries can work "
"together smoothly because they both use the same `String` type."
msgstr ""
"Το Rust συνοδεύεται από μια τυπική βιβλιοθήκη που βοηθά στη δημιουργία ενός "
"συνόλου κοινών τύπων χρησιμοποιείται από τη βιβλιοθήκη και τα προγράμματα "
"της Rust. Με αυτόν τον τρόπο, δύο βιβλιοθήκες μπορούν να συνεργαστούν ομαλά "
"γιατί και οι δύο χρησιμοποιούν τον ίδιο τύπο «String»."

#: src/std-types/std.md
#, fuzzy
msgid ""
"In fact, Rust contains several layers of the Standard Library: `core`, "
"`alloc` and `std`."
msgstr "\\<λεπτομέρειες>"

#: src/std-types/std.md
#, fuzzy
msgid ""
"`core` includes the most basic types and functions that don't depend on "
"`libc`, allocator or even the presence of an operating system."
msgstr ""
"Στην πραγματικότητα, το Rust περιέχει πολλά επίπεδα της τυπικής βιβλιοθήκης: "
"«core», «alloc» και «std»."

#: src/std-types/std.md
#, fuzzy
msgid ""
"`alloc` includes types which require a global heap allocator, such as `Vec`, "
"`Box` and `Arc`."
msgstr ""
"Ο «πυρήνας» περιλαμβάνει τους πιο βασικούς τύπους και λειτουργίες που δεν "
"εξαρτώνται από το «libc», τον εκχωρητή ή ακόμη και η παρουσία ενός "
"λειτουργικού συστήματος."

#: src/std-types/std.md
#, fuzzy
msgid ""
"Embedded Rust applications often only use `core`, and sometimes `alloc`."
msgstr ""
"Το \"alloc\" περιλαμβάνει τύπους που απαιτούν καθολικό εκχωρητή σωρού, όπως "
"\"Vec\", \"Box\" και \"Arc\".\n"
"\n"
"Οι εφαρμογές Embedded Rust χρησιμοποιούν συχνά μόνο «core» και μερικές φορές "
"«alloc»."

#: src/std-types/docs.md
msgid "Rust comes with extensive documentation. For example:"
msgstr ""

#: src/std-types/docs.md
#, fuzzy
msgid ""
"All of the details about [loops](https://doc.rust-lang.org/stable/reference/"
"expressions/loop-expr.html)."
msgstr ""
"Δείτε το [Rust Reference](https://doc.rust-lang.org/reference/type-layout."
"html)."

#: src/std-types/docs.md
msgid ""
"Primitive types like [`u8`](https://doc.rust-lang.org/stable/std/primitive."
"u8.html)."
msgstr ""

#: src/std-types/docs.md
#, fuzzy
msgid ""
"Standard library types like [`Option`](https://doc.rust-lang.org/stable/std/"
"option/enum.Option.html) or [`BinaryHeap`](https://doc.rust-lang.org/stable/"
"std/collections/struct.BinaryHeap.html)."
msgstr "«Read» και «Write» που χρησιμοποιούνται για IO,"

#: src/std-types/docs.md
msgid "In fact, you can document your own code:"
msgstr ""

#: src/std-types/docs.md
msgid ""
"/// Determine whether the first argument is divisible by the second "
"argument.\n"
"///\n"
"/// If the second argument is zero, the result is false.\n"
msgstr ""

#: src/std-types/docs.md
msgid ""
"The contents are treated as Markdown. All published Rust library crates are "
"automatically documented at [`docs.rs`](https://docs.rs) using the [rustdoc]"
"(https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html) tool. It is "
"idiomatic to document all public items in an API using this pattern."
msgstr ""

#: src/std-types/docs.md
msgid ""
"To document an item from inside the item (such as inside a module), use `//!"
"` or `/*! .. */`, called \"inner doc comments\":"
msgstr ""

#: src/std-types/docs.md
msgid ""
"//! This module contains functionality relating to divisibility of "
"integers.\n"
msgstr ""

#: src/std-types/docs.md
msgid ""
"Show students the generated docs for the `rand` crate at <https://docs.rs/"
"rand>."
msgstr ""

#: src/std-types/option.md
#, fuzzy
msgid "Option"
msgstr "Συναρτήσεις"

#: src/std-types/option.md
msgid ""
"We have already seen some use of `Option<T>`. It stores either a value of "
"type `T` or nothing. For example, [`String::find`](https://doc.rust-lang.org/"
"stable/std/string/struct.String.html#method.find) returns an `Option<usize>`."
msgstr ""

#: src/std-types/option.md
msgid "\"Löwe 老虎 Léopard Gepardi\""
msgstr ""

#: src/std-types/option.md
msgid "'é'"
msgstr ""

#: src/std-types/option.md
msgid "\"find returned {position:?}\""
msgstr ""

#: src/std-types/option.md
msgid "'Z'"
msgstr ""

#: src/std-types/option.md
msgid "\"Character not found\""
msgstr ""

#: src/std-types/option.md
#, fuzzy
msgid "`Option` is widely used, not just in the standard library."
msgstr ""
"Η επιλογή «Επιλογή» και «Αποτέλεσμα» χρησιμοποιούνται ευρέως όχι μόνο στην "
"τυπική βιβλιοθήκη."

#: src/std-types/option.md
msgid ""
"`unwrap` will return the value in an `Option`, or panic. `expect` is similar "
"but takes an error message."
msgstr ""

#: src/std-types/option.md
msgid ""
"You can panic on None, but you can't \"accidentally\" forget to check for "
"None."
msgstr ""

#: src/std-types/option.md
msgid ""
"It's common to `unwrap`/`expect` all over the place when hacking something "
"together, but production code typically handles `None` in a nicer fashion."
msgstr ""

#: src/std-types/option.md
msgid ""
"The niche optimization means that `Option<T>` often has the same size in "
"memory as `T`."
msgstr ""

#: src/std-types/result.md
msgid "Result"
msgstr ""

#: src/std-types/result.md
msgid ""
"`Result` is similar to `Option`, but indicates the success or failure of an "
"operation, each with a different type. This is similar to the `Res` defined "
"in the expression exercise, but generic: `Result<T, E>` where `T` is used in "
"the `Ok` variant and `E` appears in the `Err` variant."
msgstr ""

#: src/std-types/result.md
msgid "\"diary.txt\""
msgstr ""

#: src/std-types/result.md
msgid "\"Dear diary: {contents} ({bytes} bytes)\""
msgstr ""

#: src/std-types/result.md
msgid "\"Could not read file content\""
msgstr ""

#: src/std-types/result.md
msgid "\"The diary could not be opened: {err}\""
msgstr ""

#: src/std-types/result.md
#, fuzzy
msgid ""
"As with `Option`, the successful value sits inside of `Result`, forcing the "
"developer to explicitly extract it. This encourages error checking. In the "
"case where an error should never happen, `unwrap()` or `expect()` can be "
"called, and this is a signal of the developer intent too."
msgstr ""
"Όπως και με την \"Επιλογή\", η επιτυχημένη τιμή βρίσκεται μέσα στο "
"\"Αποτέλεσμα\", αναγκάζοντας τον προγραμματιστή να το κάνει το εξάγετε ρητά. "
"Αυτό ενθαρρύνει τον έλεγχο σφαλμάτων. Στην περίπτωση που δεν πρέπει να "
"συμβεί ποτέ λάθος, Το \"unwrap()\" ή το \"expect()\" μπορεί να κληθεί, και "
"αυτό είναι επίσης ένα σήμα της πρόθεσης του προγραμματιστή."

#: src/std-types/result.md
#, fuzzy
msgid ""
"`Result` documentation is a recommended read. Not during the course, but it "
"is worth mentioning. It contains a lot of convenience methods and functions "
"that help functional-style programming."
msgstr ""
"Η τεκμηρίωση «Αποτελέσματος» συνιστάται για ανάγνωση. Όχι κατά τη διάρκεια "
"του μαθήματος, αλλά αξίζει να αναφερθεί. Περιέχει πολλές πρακτικές μεθόδους "
"και λειτουργίες που βοηθούν τον προγραμματισμό λειτουργικού στυλ."

#: src/std-types/result.md
#, fuzzy
msgid ""
"`Result` is the standard type to implement error handling as we will see on "
"Day 3."
msgstr ""
"Το \"Αποτέλεσμα\" είναι ο τυπικός τύπος για την υλοποίηση του χειρισμού "
"σφαλμάτων, όπως θα δούμε την Ημέρα 3."

#: src/std-types/string.md
msgid "String"
msgstr "Συμβολοσειρές"

#: src/std-types/string.md
#, fuzzy
msgid ""
"[`String`](https://doc.rust-lang.org/std/string/struct.String.html) is the "
"standard heap-allocated growable UTF-8 string buffer:"
msgstr ""
"Το [`String`](https://doc.rust-lang.org/std/string/struct.String.html) είναι "
"το τυπικό buffer συμβολοσειρών UTF-8 που εκχωρείται σε σωρό:"

#: src/std-types/string.md src/std-traits/read-and-write.md
#: src/memory-management/review.md src/testing/unit-tests.md
#: src/concurrency/scoped-threads.md
msgid "\"Hello\""
msgstr ""

#: src/std-types/string.md
msgid "\"s1: len = {}, capacity = {}\""
msgstr ""

#: src/std-types/string.md
msgid "'!'"
msgstr ""

#: src/std-types/string.md
msgid "\"s2: len = {}, capacity = {}\""
msgstr ""

#: src/std-types/string.md
msgid "\"🇨🇭\""
msgstr ""

#: src/std-types/string.md
msgid "\"s3: len = {}, number of chars = {}\""
msgstr ""

#: src/std-types/string.md
#, fuzzy
msgid ""
"`String` implements [`Deref<Target = str>`](https://doc.rust-lang.org/std/"
"string/struct.String.html#deref-methods-str), which means that you can call "
"all `str` methods on a `String`."
msgstr ""
"Το `String` υλοποιεί [`Deref<Target = str>`](https://doc.rust-lang.org/std/"
"string/struct.String.html#deref-methods-str), που σημαίνει ότι μπορείτε να "
"καλέσετε όλα Μέθοδοι `str` σε μια συμβολοσειρά."

#: src/std-types/string.md
msgid ""
"`String::new` returns a new empty string, use `String::with_capacity` when "
"you know how much data you want to push to the string."
msgstr ""

#: src/std-types/string.md
msgid ""
"`String::len` returns the size of the `String` in bytes (which can be "
"different from its length in characters)."
msgstr ""

#: src/std-types/string.md
msgid ""
"`String::chars` returns an iterator over the actual characters. Note that a "
"`char` can be different from what a human will consider a \"character\" due "
"to [grapheme clusters](https://docs.rs/unicode-segmentation/latest/"
"unicode_segmentation/struct.Graphemes.html)."
msgstr ""

#: src/std-types/string.md
msgid ""
"When people refer to strings they could either be talking about `&str` or "
"`String`."
msgstr ""

#: src/std-types/string.md
msgid ""
"When a type implements `Deref<Target = T>`, the compiler will let you "
"transparently call methods from `T`."
msgstr ""

#: src/std-types/string.md
msgid ""
"We haven't discussed the `Deref` trait yet, so at this point this mostly "
"explains the structure of the sidebar in the documentation."
msgstr ""

#: src/std-types/string.md
msgid ""
"`String` implements `Deref<Target = str>` which transparently gives it "
"access to `str`'s methods."
msgstr ""

#: src/std-types/string.md
msgid "Write and compare `let s3 = s1.deref();` and `let s3 = &*s1;`."
msgstr ""

#: src/std-types/string.md
msgid ""
"`String` is implemented as a wrapper around a vector of bytes, many of the "
"operations you see supported on vectors are also supported on `String`, but "
"with some extra guarantees."
msgstr ""

#: src/std-types/string.md
msgid "Compare the different ways to index a `String`:"
msgstr ""

#: src/std-types/string.md
msgid ""
"To a character by using `s3.chars().nth(i).unwrap()` where `i` is in-bound, "
"out-of-bounds."
msgstr ""

#: src/std-types/string.md
msgid ""
"To a substring by using `s3[0..4]`, where that slice is on character "
"boundaries or not."
msgstr ""

#: src/std-types/vec.md
#, fuzzy
msgid ""
"[`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html) is the standard "
"resizable heap-allocated buffer:"
msgstr ""
"Το [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html) είναι το "
"τυπικό buffer με δυνατότητα αλλαγής μεγέθους που εκχωρείται σε σωρό:"

#: src/std-types/vec.md
msgid "\"v1: len = {}, capacity = {}\""
msgstr ""

#: src/std-types/vec.md
msgid "\"v2: len = {}, capacity = {}\""
msgstr ""

#: src/std-types/vec.md
msgid "// Canonical macro to initialize a vector with elements.\n"
msgstr ""

#: src/std-types/vec.md
msgid "// Retain only the even elements.\n"
msgstr ""

#: src/std-types/vec.md
msgid "\"{v3:?}\""
msgstr ""

#: src/std-types/vec.md
msgid "// Remove consecutive duplicates.\n"
msgstr ""

#: src/std-types/vec.md
#, fuzzy
msgid ""
"`Vec` implements [`Deref<Target = [T]>`](https://doc.rust-lang.org/std/vec/"
"struct.Vec.html#deref-methods-%5BT%5D), which means that you can call slice "
"methods on a `Vec`."
msgstr ""
"Το `Vec` υλοποιεί το [`Deref<Target = [T]>`](https://doc.rust-lang.org/std/"
"vec/struct.Vec.html#deref-methods-%5BT%5D), που σημαίνει ότι μπορείτε να "
"καλέσετε το slice μεθόδους σε ένα «Vec»."

#: src/std-types/vec.md
msgid ""
"`Vec` is a type of collection, along with `String` and `HashMap`. The data "
"it contains is stored on the heap. This means the amount of data doesn't "
"need to be known at compile time. It can grow or shrink at runtime."
msgstr ""

#: src/std-types/vec.md
msgid ""
"Notice how `Vec<T>` is a generic type too, but you don't have to specify `T` "
"explicitly. As always with Rust type inference, the `T` was established "
"during the first `push` call."
msgstr ""

#: src/std-types/vec.md
msgid ""
"`vec![...]` is a canonical macro to use instead of `Vec::new()` and it "
"supports adding initial elements to the vector."
msgstr ""

#: src/std-types/vec.md
msgid ""
"To index the vector you use `[` `]`, but they will panic if out of bounds. "
"Alternatively, using `get` will return an `Option`. The `pop` function will "
"remove the last element."
msgstr ""

#: src/std-types/vec.md
msgid ""
"Slices are covered on day 3. For now, students only need to know that a "
"value of type `Vec` gives access to all of the documented slice methods, too."
msgstr ""

#: src/std-types/hashmap.md
#, fuzzy
msgid "Standard hash map with protection against HashDoS attacks:"
msgstr "Τυπικός χάρτης κατακερματισμού με προστασία από επιθέσεις HashDoS:"

#: src/std-types/hashmap.md
msgid "\"Adventures of Huckleberry Finn\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"Grimms' Fairy Tales\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"Pride and Prejudice\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"Les Misérables\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"We know about {} books, but not Les Misérables.\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"Alice's Adventure in Wonderland\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"{book}: {count} pages\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"{book} is unknown.\""
msgstr ""

#: src/std-types/hashmap.md
msgid "// Use the .entry() method to insert a value if nothing is found.\n"
msgstr ""

#: src/std-types/hashmap.md
msgid "\"{page_counts:#?}\""
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"`HashMap` is not defined in the prelude and needs to be brought into scope."
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"Try the following lines of code. The first line will see if a book is in the "
"hashmap and if not return an alternative value. The second line will insert "
"the alternative value in the hashmap if the book is not found."
msgstr ""

#: src/std-types/hashmap.md
msgid "\"Harry Potter and the Sorcerer's Stone\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"The Hunger Games\""
msgstr ""

#: src/std-types/hashmap.md
msgid "Unlike `vec!`, there is unfortunately no standard `hashmap!` macro."
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"Although, since Rust 1.56, HashMap implements [`From<[(K, V); N]>`](https://"
"doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#impl-"
"From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V,+RandomState%3E), which allows "
"us to easily initialize a hash map from a literal array:"
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"Alternatively HashMap can be built from any `Iterator` which yields key-"
"value tuples."
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"We are showing `HashMap<String, i32>`, and avoid using `&str` as key to make "
"examples easier. Using references in collections can, of course, be done, "
"but it can lead into complications with the borrow checker."
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"Try removing `to_string()` from the example above and see if it still "
"compiles. Where do you think we might run into issues?"
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"This type has several \"method-specific\" return types, such as `std::"
"collections::hash_map::Keys`. These types often appear in searches of the "
"Rust docs. Show students the docs for this type, and the helpful link back "
"to the `keys` method."
msgstr ""

#: src/std-types/exercise.md
msgid ""
"In this exercise you will take a very simple data structure and make it "
"generic. It uses a [`std::collections::HashMap`](https://doc.rust-lang.org/"
"stable/std/collections/struct.HashMap.html) to keep track of which values "
"have been seen and how many times each one has appeared."
msgstr ""

#: src/std-types/exercise.md
msgid ""
"The initial version of `Counter` is hard coded to only work for `u32` "
"values. Make the struct and its methods generic over the type of value being "
"tracked, that way `Counter` can track any type of value."
msgstr ""

#: src/std-types/exercise.md
msgid ""
"If you finish early, try using the [`entry`](https://doc.rust-lang.org/"
"stable/std/collections/struct.HashMap.html#method.entry) method to halve the "
"number of hash lookups required to implement the `count` method."
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid ""
"/// Counter counts the number of times each value of type T has been seen.\n"
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "/// Create a new Counter.\n"
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "/// Count an occurrence of the given value.\n"
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "/// Return the number of times the given value has been seen.\n"
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "\"saw {} values equal to {}\""
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "\"apple\""
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "\"orange\""
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "\"got {} apples\""
msgstr ""

#: src/std-traits.md
msgid "[Comparisons](./std-traits/comparisons.md) (10 minutes)"
msgstr ""

#: src/std-traits.md
msgid "[Operators](./std-traits/operators.md) (10 minutes)"
msgstr ""

#: src/std-traits.md
msgid "[From and Into](./std-traits/from-and-into.md) (10 minutes)"
msgstr ""

#: src/std-traits.md
msgid "[Casting](./std-traits/casting.md) (5 minutes)"
msgstr ""

#: src/std-traits.md
msgid "[Read and Write](./std-traits/read-and-write.md) (10 minutes)"
msgstr ""

#: src/std-traits.md
msgid "[Default, struct update syntax](./std-traits/default.md) (5 minutes)"
msgstr ""

#: src/std-traits.md
msgid "[Closures](./std-traits/closures.md) (20 minutes)"
msgstr ""

#: src/std-traits.md
msgid "[Exercise: ROT13](./std-traits/exercise.md) (30 minutes)"
msgstr ""

#: src/std-traits.md
msgid "This segment should take about 1 hour and 40 minutes"
msgstr ""

#: src/std-traits.md
msgid ""
"As with the standard-library types, spend time reviewing the documentation "
"for each trait."
msgstr ""

#: src/std-traits.md
msgid "This section is long. Take a break midway through."
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"These traits support comparisons between values. All traits can be derived "
"for types containing fields that implement these traits."
msgstr ""

#: src/std-traits/comparisons.md
msgid "`PartialEq` and `Eq`"
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"`PartialEq` is a partial equivalence relation, with required method `eq` and "
"provided method `ne`. The `==` and `!=` operators will call these methods."
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"`Eq` is a full equivalence relation (reflexive, symmetric, and transitive) "
"and implies `PartialEq`. Functions that require full equivalence will use "
"`Eq` as a trait bound."
msgstr ""

#: src/std-traits/comparisons.md
#, fuzzy
msgid "`PartialOrd` and `Ord`"
msgstr "«Διαβάστε» και «Γράψτε»."

#: src/std-traits/comparisons.md
msgid ""
"`PartialOrd` defines a partial ordering, with a `partial_cmp` method. It is "
"used to implement the `<`, `<=`, `>=`, and `>` operators."
msgstr ""

#: src/std-traits/comparisons.md
msgid "`Ord` is a total ordering, with `cmp` returning `Ordering`."
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"`PartialEq` can be implemented between different types, but `Eq` cannot, "
"because it is reflexive:"
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"In practice, it's common to derive these traits, but uncommon to implement "
"them."
msgstr ""

#: src/std-traits/operators.md
#, fuzzy
msgid ""
"Operator overloading is implemented via traits in [`std::ops`](https://doc."
"rust-lang.org/std/ops/index.html):"
msgstr ""
"Η υπερφόρτωση χειριστή υλοποιείται μέσω χαρακτηριστικών στο `std::ops`:"

#: src/std-traits/operators.md
msgid "\"{:?} + {:?} = {:?}\""
msgstr ""

#: src/std-traits/operators.md src/memory-management/drop.md
#, fuzzy
msgid "Discussion points:"
msgstr "Σημεία συζήτησης:"

#: src/std-traits/operators.md
#, fuzzy
msgid ""
"You could implement `Add` for `&Point`. In which situations is that useful?"
msgstr ""
"Θα μπορούσατε να εφαρμόσετε το \"Add\" για το \"&Point\". Σε ποιες "
"περιπτώσεις είναι χρήσιμο;"

#: src/std-traits/operators.md
#, fuzzy
msgid ""
"Answer: `Add:add` consumes `self`. If type `T` for which you are overloading "
"the operator is not `Copy`, you should consider overloading the operator for "
"`&T` as well. This avoids unnecessary cloning on the call site."
msgstr ""
"Απάντηση: Το «Προσθήκη: Προσθήκη» καταναλώνει τον «εαυτό». Αν πληκτρολογήστε "
"`T` για το οποίο είστε Η υπερφόρτωση του χειριστή δεν είναι «Αντιγραφή», θα "
"πρέπει να εξετάσετε την υπερφόρτωση ο χειριστής για το «&T» επίσης. Αυτό "
"αποφεύγει την περιττή κλωνοποίηση στο τοποθεσία κλήσης."

#: src/std-traits/operators.md
#, fuzzy
msgid ""
"Why is `Output` an associated type? Could it be made a type parameter of the "
"method?"
msgstr ""
"Γιατί το \"Έξοδος\" είναι συσχετισμένος τύπος; Θα μπορούσε να γίνει "
"παράμετρος τύπου;"

#: src/std-traits/operators.md
#, fuzzy
msgid ""
"Short answer: Function type parameters are controlled by the caller, but "
"associated types (like `Output`) are controlled by the implementer of a "
"trait."
msgstr ""
"Σύντομη απάντηση: Οι παράμετροι τύπου ελέγχονται από τον καλούντα, αλλά οι "
"συσχετισμένοι τύποι (όπως \"Έξοδος\") ελέγχονται από τον υλοποιητή του a "
"χαρακτηριστικό."

#: src/std-traits/operators.md
msgid ""
"You could implement `Add` for two different types, e.g. `impl Add<(i32, "
"i32)> for Point` would add a tuple to a `Point`."
msgstr ""

#: src/std-traits/from-and-into.md
#, fuzzy
msgid ""
"Types implement [`From`](https://doc.rust-lang.org/std/convert/trait.From."
"html) and [`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html) to "
"facilitate type conversions:"
msgstr ""
"Οι τύποι εφαρμόζουν τα «Από» και «Μέσα» για να διευκολύνουν τις μετατροπές "
"τύπων:"

#: src/std-traits/from-and-into.md
msgid "\"{s}, {addr}, {one}, {bigger}\""
msgstr ""

#: src/std-traits/from-and-into.md
#, fuzzy
msgid ""
"[`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html) is "
"automatically implemented when [`From`](https://doc.rust-lang.org/std/"
"convert/trait.From.html) is implemented:"
msgstr "Το \"Into\" υλοποιείται αυτόματα όταν υλοποιείται το \"From\":"

#: src/std-traits/from-and-into.md
#, fuzzy
msgid ""
"That's why it is common to only implement `From`, as your type will get "
"`Into` implementation too."
msgstr "\\<λεπτομέρειες>"

#: src/std-traits/from-and-into.md
#, fuzzy
msgid ""
"When declaring a function argument input type like \"anything that can be "
"converted into a `String`\", the rule is opposite, you should use `Into`. "
"Your function will accept types that implement `From` and those that _only_ "
"implement `Into`."
msgstr ""
"Αυτός είναι ο λόγος για τον οποίο είναι σύνηθες να εφαρμόζετε μόνο το "
"\"From\", καθώς ο τύπος σας θα λάβει επίσης την εφαρμογή \"Into\".\n"
"\n"
"Όταν δηλώνετε έναν τύπο εισόδου ορίσματος συνάρτησης όπως \"οτιδήποτε μπορεί "
"να μετατραπεί σε \"Συμβολοσειρά\", ο κανόνας είναι αντίθετος, θα πρέπει να "
"χρησιμοποιήσετε το \"Into\". Η συνάρτησή σας θα δέχεται τύπους που υλοποιούν "
"το \"From\" και εκείνους που _only_ υλοποιούν το \"Into\"."

#: src/std-traits/casting.md
msgid ""
"Rust has no _implicit_ type conversions, but does support explicit casts "
"with `as`. These generally follow C semantics where those are defined."
msgstr ""

#: src/std-traits/casting.md
msgid "\"as u16: {}\""
msgstr ""

#: src/std-traits/casting.md
msgid "\"as i16: {}\""
msgstr ""

#: src/std-traits/casting.md
msgid "\"as u8: {}\""
msgstr ""

#: src/std-traits/casting.md
msgid ""
"The results of `as` are _always_ defined in Rust and consistent across "
"platforms. This might not match your intuition for changing sign or casting "
"to a smaller type -- check the docs, and comment for clarity."
msgstr ""

#: src/std-traits/casting.md
msgid ""
"Casting with `as` is a relatively sharp tool that is easy to use "
"incorrectly, and can be a source of subtle bugs as future maintenance work "
"changes the types that are used or the ranges of values in types. Casts are "
"best used only when the intent is to indicate unconditional truncation (e.g. "
"selecting the bottom 32 bits of a `u64` with `as u32`, regardless of what "
"was in the high bits)."
msgstr ""

#: src/std-traits/casting.md
msgid ""
"For infallible casts (e.g. `u32` to `u64`), prefer using `From` or `Into` "
"over `as` to confirm that the cast is in fact infallible. For fallible "
"casts, `TryFrom` and `TryInto` are available when you want to handle casts "
"that fit differently from those that don't."
msgstr ""

#: src/std-traits/casting.md
msgid "Consider taking a break after this slide."
msgstr ""

#: src/std-traits/casting.md
msgid ""
"`as` is similar to a C++ static cast. Use of `as` in cases where data might "
"be lost is generally discouraged, or at least deserves an explanatory "
"comment."
msgstr ""

#: src/std-traits/casting.md
msgid "This is common in casting integers to `usize` for use as an index."
msgstr ""

#: src/std-traits/read-and-write.md
#, fuzzy
msgid ""
"Using [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and "
"[`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html), you can "
"abstract over `u8` sources:"
msgstr ""
"Χρησιμοποιώντας το \"Read\" και το \"BufRead\", μπορείτε να αφαιρέσετε τις "
"πηγές \"u8\":"

#: src/std-traits/read-and-write.md
msgid "b\"foo\\nbar\\nbaz\\n\""
msgstr ""

#: src/std-traits/read-and-write.md
msgid "\"lines in slice: {}\""
msgstr ""

#: src/std-traits/read-and-write.md
msgid "\"lines in file: {}\""
msgstr ""

#: src/std-traits/read-and-write.md
#, fuzzy
msgid ""
"Similarly, [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) lets "
"you abstract over `u8` sinks:"
msgstr ""
"Παρομοίως, το «Write» σάς επιτρέπει να κάνετε αφηρήσεις πάνω από τα νεροχύτα "
"«u8»:"

#: src/std-traits/read-and-write.md
msgid "\"\\n\""
msgstr ""

#: src/std-traits/read-and-write.md src/slices-and-lifetimes/str.md
msgid "\"World\""
msgstr ""

#: src/std-traits/read-and-write.md
msgid "\"Logged: {:?}\""
msgstr ""

#: src/std-traits/default.md
#, fuzzy
msgid "The `Default` Trait"
msgstr "Το χαρακτηριστικό «Drop»."

#: src/std-traits/default.md
#, fuzzy
msgid ""
"[`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) trait "
"produces a default value for a type."
msgstr ""
"Μπορείτε να εφαρμόσετε το χαρακτηριστικό «Iterator» στους δικούς σας τύπους:"

#: src/std-traits/default.md
msgid "\"John Smith\""
msgstr ""

#: src/std-traits/default.md
msgid "\"{default_struct:#?}\""
msgstr ""

#: src/std-traits/default.md
msgid "\"Y is set!\""
msgstr ""

#: src/std-traits/default.md
msgid "\"{almost_default_struct:#?}\""
msgstr ""

#: src/std-traits/default.md src/slices-and-lifetimes/exercise.md
#: src/slices-and-lifetimes/solution.md
msgid "\"{:#?}\""
msgstr ""

#: src/std-traits/default.md
msgid ""
"It can be implemented directly or it can be derived via `#[derive(Default)]`."
msgstr ""

#: src/std-traits/default.md
msgid ""
"A derived implementation will produce a value where all fields are set to "
"their default values."
msgstr ""

#: src/std-traits/default.md
msgid "This means all types in the struct must implement `Default` too."
msgstr ""

#: src/std-traits/default.md
msgid ""
"Standard Rust types often implement `Default` with reasonable values (e.g. "
"`0`, `\"\"`, etc)."
msgstr ""

#: src/std-traits/default.md
msgid "The partial struct initialization works nicely with default."
msgstr ""

#: src/std-traits/default.md
msgid ""
"The Rust standard library is aware that types can implement `Default` and "
"provides convenience methods that use it."
msgstr ""

#: src/std-traits/default.md
msgid ""
"The `..` syntax is called [struct update syntax](https://doc.rust-lang.org/"
"book/ch05-01-defining-structs.html#creating-instances-from-other-instances-"
"with-struct-update-syntax)."
msgstr ""

#: src/std-traits/closures.md
#, fuzzy
msgid ""
"Closures or lambda expressions have types which cannot be named. However, "
"they implement special [`Fn`](https://doc.rust-lang.org/std/ops/trait.Fn."
"html), [`FnMut`](https://doc.rust-lang.org/std/ops/trait.FnMut.html), and "
"[`FnOnce`](https://doc.rust-lang.org/std/ops/trait.FnOnce.html) traits:"
msgstr ""
"Τα κλεισίματα ή οι εκφράσεις λάμδα έχουν τύπους που δεν μπορούν να "
"ονομαστούν. Ωστόσο, αυτοί εφαρμογή ειδικού [`Fn`](https://doc.rust-lang.org/"
"std/ops/trait.Fn.html), [`FnMut`](https://doc.rust-lang.org/std/ops/trait."
"FnMut.html) και [`FnOnce`](https://doc.rust-lang.org/std/ops/trait.FnOnce."
"html) χαρακτηριστικά:"

#: src/std-traits/closures.md
#, fuzzy
msgid "\"Calling function on {input}\""
msgstr "Κλήση μη ασφαλών συναρτήσεων"

#: src/std-traits/closures.md
msgid "\"add_3: {}\""
msgstr ""

#: src/std-traits/closures.md
msgid "\"accumulate: {}\""
msgstr ""

#: src/std-traits/closures.md
msgid "\"multiply_sum: {}\""
msgstr ""

#: src/std-traits/closures.md
#, fuzzy
msgid ""
"An `Fn` (e.g. `add_3`) neither consumes nor mutates captured values, or "
"perhaps captures nothing at all. It can be called multiple times "
"concurrently."
msgstr ""
"Ένα \"Fn\" ούτε καταναλώνει ούτε μεταλλάσσει τις καταγεγραμμένες τιμές ή "
"ίσως δεν καταγράφει τίποτα απολύτως, επομένως μπορεί καλείται πολλές φορές "
"ταυτόχρονα."

#: src/std-traits/closures.md
#, fuzzy
msgid ""
"An `FnMut` (e.g. `accumulate`) might mutate captured values. You can call it "
"multiple times, but not concurrently."
msgstr ""
"Ένα \"FnMut\" μπορεί να μεταλλάξει τις καταγεγραμμένες τιμές, ώστε να "
"μπορείτε να το καλέσετε πολλές φορές αλλά όχι ταυτόχρονα."

#: src/std-traits/closures.md
#, fuzzy
msgid ""
"If you have an `FnOnce` (e.g. `multiply_sum`), you may only call it once. It "
"might consume captured values."
msgstr ""
"Εάν έχετε ένα \"FnOnce\", μπορείτε να το καλέσετε μόνο μία φορά. Μπορεί να "
"καταναλώσει καταγεγραμμένες τιμές."

#: src/std-traits/closures.md
#, fuzzy
msgid ""
"`FnMut` is a subtype of `FnOnce`. `Fn` is a subtype of `FnMut` and `FnOnce`. "
"I.e. you can use an `FnMut` wherever an `FnOnce` is called for, and you can "
"use an `Fn` wherever an `FnMut` or `FnOnce` is called for."
msgstr ""
"Το \"FnMut\" είναι ένας υποτύπος του \"FnOnce\". Το \"Fn\" είναι ένας "
"υποτύπος των \"FnMut\" και \"FnOnce\". Δηλ. μπορείτε να χρησιμοποιήσετε ένα "
"«FnMut» όπου ζητείται ένα «FnOnce» και μπορείτε να χρησιμοποιήσετε ένα «Fn» "
"όπου ένα «FnMut» ή «FnOnce» καλείται."

#: src/std-traits/closures.md
msgid ""
"When you define a function that takes a closure, you should take `FnOnce` if "
"you can (i.e. you call it once), or `FnMut` else, and last `Fn`. This allows "
"the most flexibility for the caller."
msgstr ""

#: src/std-traits/closures.md
msgid ""
"In contrast, when you have a closure, the most flexible you can have is `Fn` "
"(it can be passed everywhere), then `FnMut`, and lastly `FnOnce`."
msgstr ""

#: src/std-traits/closures.md
msgid ""
"The compiler also infers `Copy` (e.g. for `add_3`) and `Clone` (e.g. "
"`multiply_sum`), depending on what the closure captures."
msgstr ""

#: src/std-traits/closures.md
msgid ""
"By default, closures will capture by reference if they can. The `move` "
"keyword makes them capture by value."
msgstr ""

#: src/std-traits/closures.md
msgid "\"Hi\""
msgstr ""

#: src/std-traits/closures.md
msgid "\"there\""
msgstr ""

#: src/std-traits/exercise.md
msgid ""
"In this example, you will implement the classic [\"ROT13\" cipher](https://"
"en.wikipedia.org/wiki/ROT13). Copy this code to the playground, and "
"implement the missing bits. Only rotate ASCII alphabetic characters, to "
"ensure the result is still valid UTF-8."
msgstr ""

#: src/std-traits/exercise.md
msgid "// Implement the `Read` trait for `RotDecoder`.\n"
msgstr ""

#: src/std-traits/exercise.md src/std-traits/solution.md
msgid "\"Gb trg gb gur bgure fvqr!\""
msgstr ""

#: src/std-traits/exercise.md src/std-traits/solution.md
msgid "\"To get to the other side!\""
msgstr ""

#: src/std-traits/exercise.md
msgid ""
"What happens if you chain two `RotDecoder` instances together, each rotating "
"by 13 characters?"
msgstr ""

#: src/std-traits/solution.md
msgid "'A'"
msgstr ""

#: src/welcome-day-3.md
#, fuzzy
msgid "Welcome to Day 3"
msgstr "Καλώς ήρθατε στην Ημέρα 3"

#: src/welcome-day-3.md
msgid "Today, we will cover:"
msgstr ""

#: src/welcome-day-3.md
msgid ""
"Memory management, lifetimes, and the borrow checker: how Rust ensures "
"memory safety."
msgstr ""

#: src/welcome-day-3.md
msgid "Smart pointers: standard library pointer types."
msgstr ""

#: src/welcome-day-3.md
msgid "[Welcome](./welcome-day-3.md) (3 minutes)"
msgstr ""

#: src/welcome-day-3.md
msgid "[Memory Management](./memory-management.md) (1 hour and 10 minutes)"
msgstr ""

#: src/welcome-day-3.md
msgid "[Smart Pointers](./smart-pointers.md) (45 minutes)"
msgstr ""

#: src/welcome-day-3.md
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 15 "
"minutes"
msgstr ""

#: src/memory-management.md
msgid "[Review of Program Memory](./memory-management/review.md) (5 minutes)"
msgstr ""

#: src/memory-management.md
msgid ""
"[Approaches to Memory Management](./memory-management/approaches.md) (10 "
"minutes)"
msgstr ""

#: src/memory-management.md
msgid "[Ownership](./memory-management/ownership.md) (5 minutes)"
msgstr ""

#: src/memory-management.md
msgid "[Move Semantics](./memory-management/move.md) (10 minutes)"
msgstr ""

#: src/memory-management.md
msgid "[Clone](./memory-management/clone.md) (2 minutes)"
msgstr ""

#: src/memory-management.md
msgid "[Copy Types](./memory-management/copy-types.md) (5 minutes)"
msgstr ""

#: src/memory-management.md
msgid "[Drop](./memory-management/drop.md) (10 minutes)"
msgstr ""

#: src/memory-management.md
msgid "[Exercise: Builder Type](./memory-management/exercise.md) (20 minutes)"
msgstr ""

#: src/memory-management/review.md
msgid "Programs allocate memory in two ways:"
msgstr ""

#: src/memory-management/review.md
#, fuzzy
msgid "Stack: Continuous area of memory for local variables."
msgstr "Στοίβα: Συνεχής περιοχή μνήμης για τοπικές μεταβλητές."

#: src/memory-management/review.md
#, fuzzy
msgid "Values have fixed sizes known at compile time."
msgstr "Οι τιμές έχουν σταθερά μεγέθη γνωστά κατά το χρόνο μεταγλώττισης."

#: src/memory-management/review.md
#, fuzzy
msgid "Extremely fast: just move a stack pointer."
msgstr "Εξαιρετικά γρήγορο: απλώς μετακινήστε έναν δείκτη στοίβας."

#: src/memory-management/review.md
#, fuzzy
msgid "Easy to manage: follows function calls."
msgstr "Εύκολο στη διαχείριση: ακολουθεί κλήσεις λειτουργιών."

#: src/memory-management/review.md
#, fuzzy
msgid "Great memory locality."
msgstr "Μεγάλη τοποθεσία μνήμης."

#: src/memory-management/review.md
msgid "Heap: Storage of values outside of function calls."
msgstr ""

#: src/memory-management/review.md
msgid "Values have dynamic sizes determined at runtime."
msgstr ""

#: src/memory-management/review.md
msgid "Slightly slower than the stack: some book-keeping needed."
msgstr ""

#: src/memory-management/review.md
msgid "No guarantee of memory locality."
msgstr ""

#: src/memory-management/review.md
#, fuzzy
msgid ""
"Creating a `String` puts fixed-sized metadata on the stack and dynamically "
"sized data, the actual string, on the heap:"
msgstr ""
"Η δημιουργία ενός \"String\" τοποθετεί δεδομένα σταθερού μεγέθους στη στοίβα "
"και δυναμικά μεγέθη δεδομένα για το σωρό:"

#: src/memory-management/review.md
msgid ""
"Mention that a `String` is backed by a `Vec`, so it has a capacity and "
"length and can grow if mutable via reallocation on the heap."
msgstr ""

#: src/memory-management/review.md
msgid ""
"If students ask about it, you can mention that the underlying memory is heap "
"allocated using the [System Allocator](https://doc.rust-lang.org/std/alloc/"
"struct.System.html) and custom allocators can be implemented using the "
"[Allocator API](https://doc.rust-lang.org/std/alloc/index.html)"
msgstr ""

#: src/memory-management/review.md
msgid ""
"We can inspect the memory layout with `unsafe` Rust. However, you should "
"point out that this is rightfully unsafe!"
msgstr ""

#: src/memory-management/review.md src/testing/unit-tests.md
msgid "' '"
msgstr ""

#: src/memory-management/review.md
msgid "\"world\""
msgstr ""

#: src/memory-management/review.md
msgid ""
"// DON'T DO THIS AT HOME! For educational purposes only.\n"
"    // String provides no guarantees about its layout, so this could lead "
"to\n"
"    // undefined behavior.\n"
msgstr ""

#: src/memory-management/review.md
msgid "\"ptr = {ptr:#x}, len = {len}, capacity = {capacity}\""
msgstr ""

#: src/memory-management/approaches.md
#, fuzzy
msgid "Traditionally, languages have fallen into two broad categories:"
msgstr "Παραδοσιακά, οι γλώσσες χωρίζονται σε δύο μεγάλες κατηγορίες:"

#: src/memory-management/approaches.md
#, fuzzy
msgid "Full control via manual memory management: C, C++, Pascal, ..."
msgstr ""
"Πλήρης έλεγχος μέσω χειροκίνητης διαχείρισης μνήμης: C, C++, Pascal, ..."

#: src/memory-management/approaches.md
msgid "Programmer decides when to allocate or free heap memory."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"Programmer must determine whether a pointer still points to valid memory."
msgstr ""

#: src/memory-management/approaches.md
msgid "Studies show, programmers make mistakes."
msgstr ""

#: src/memory-management/approaches.md
#, fuzzy
msgid ""
"Full safety via automatic memory management at runtime: Java, Python, Go, "
"Haskell, ..."
msgstr ""
"Πλήρης ασφάλεια μέσω αυτόματης διαχείρισης μνήμης κατά την εκτέλεση: Java, "
"Python, Go, Haskell, ..."

#: src/memory-management/approaches.md
msgid ""
"A runtime system ensures that memory is not freed until it can no longer be "
"referenced."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"Typically implemented with reference counting, garbage collection, or RAII."
msgstr ""

#: src/memory-management/approaches.md
#, fuzzy
msgid "Rust offers a new mix:"
msgstr "Η Rust προσφέρει ένα νέο μείγμα:"

#: src/memory-management/approaches.md
#, fuzzy
msgid ""
"Full control _and_ safety via compile time enforcement of correct memory "
"management."
msgstr ""
"Πλήρης έλεγχος _και_ ασφάλεια μέσω επιβολής χρόνου μεταγλώττισης της σωστής "
"μνήμης διαχείριση."

#: src/memory-management/approaches.md
#, fuzzy
msgid "It does this with an explicit ownership concept."
msgstr "Το κάνει αυτό με μια ρητή έννοια ιδιοκτησίας."

#: src/memory-management/approaches.md
msgid ""
"This slide is intended to help students coming from other languages to put "
"Rust in context."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"C must manage heap manually with `malloc` and `free`. Common errors include "
"forgetting to call `free`, calling it multiple times for the same pointer, "
"or dereferencing a pointer after the memory it points to has been freed."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"C++ has tools like smart pointers (`unique_ptr`, `shared_ptr`) that take "
"advantage of language guarantees about calling destructors to ensure memory "
"is freed when a function returns. It is still quite easy to mis-use these "
"tools and create similar bugs to C."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"Java, Go, and Python rely on the garbage collector to identify memory that "
"is no longer reachable and discard it. This guarantees that any pointer can "
"be dereferenced, eliminating use-after-free and other classes of bugs. But, "
"GC has a runtime cost and is difficult to tune properly."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"Rust's ownership and borrowing model can, in many cases, get the performance "
"of C, with alloc and free operations precisely where they are required -- "
"zero cost. It also provides tools similar to C++'s smart pointers. When "
"required, other options such as reference counting are available, and there "
"are even third-party crates available to support runtime garbage collection "
"(not covered in this class)."
msgstr ""

#: src/memory-management/ownership.md
#, fuzzy
msgid ""
"All variable bindings have a _scope_ where they are valid and it is an error "
"to use a variable outside its scope:"
msgstr ""
"Όλες οι δεσμεύσεις μεταβλητών έχουν _scope_ όπου είναι έγκυρες και είναι "
"σφάλμα χρησιμοποιήστε μια μεταβλητή εκτός του πεδίου εφαρμογής της:"

#: src/memory-management/ownership.md
#, fuzzy
msgid ""
"We say that the variable _owns_ the value. Every Rust value has precisely "
"one owner at all times."
msgstr "Λέμε ότι η μεταβλητή _κατέχει_ την τιμή."

#: src/memory-management/ownership.md
#, fuzzy
msgid ""
"At the end of the scope, the variable is _dropped_ and the data is freed. A "
"destructor can run here to free up resources."
msgstr ""
"Στο τέλος του εύρους, η μεταβλητή _αποτέθηκε_ και τα δεδομένα ελευθερώνονται."

#: src/memory-management/ownership.md
msgid ""
"Students familiar with garbage-collection implementations will know that a "
"garbage collector starts with a set of \"roots\" to find all reachable "
"memory. Rust's \"single owner\" principle is a similar idea."
msgstr ""

#: src/memory-management/move.md
#, fuzzy
msgid "An assignment will transfer _ownership_ between variables:"
msgstr "Μια ανάθεση θα μεταβιβάσει την ιδιοκτησία μεταξύ μεταβλητών:"

#: src/memory-management/move.md
#, fuzzy
msgid "\"Hello!\""
msgstr "Γειά σου Κόσμε!"

#: src/memory-management/move.md src/slices-and-lifetimes/str.md
msgid "\"s2: {s2}\""
msgstr ""

#: src/memory-management/move.md
msgid "// println!(\"s1: {s1}\");\n"
msgstr ""

#: src/memory-management/move.md
#, fuzzy
msgid "The assignment of `s1` to `s2` transfers ownership."
msgstr "Η εκχώρηση του `s1` στο `s2` μεταβιβάζει την ιδιοκτησία."

#: src/memory-management/move.md
#, fuzzy
msgid "When `s1` goes out of scope, nothing happens: it does not own anything."
msgstr ""
"Όταν το `s1` βγαίνει εκτός πεδίου εφαρμογής, δεν συμβαίνει τίποτα: δεν έχει "
"ιδιοκτησία."

#: src/memory-management/move.md
#, fuzzy
msgid "When `s2` goes out of scope, the string data is freed."
msgstr ""
"Όταν το `s2` βγαίνει εκτός εύρους, τα δεδομένα συμβολοσειράς ελευθερώνονται."

#: src/memory-management/move.md
#, fuzzy
msgid "Before move to `s2`:"
msgstr "Πριν μεταβείτε στο `s2`:"

#: src/memory-management/move.md
#, fuzzy
msgid "After move to `s2`:"
msgstr "Μετά τη μετάβαση στο `s2`:"

#: src/memory-management/move.md
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - -.\n"
":                           :     :                           :\n"
":    s1 \"(inaccessible)\"    :     :                           :\n"
":   +-----------+-------+   :     :   +----+----+----+----+   :\n"
":   | ptr       |   o---+---+--+--+-->| R  | u  | s  | t  |   :\n"
":   | len       |     4 |   :  |  :   +----+----+----+----+   :\n"
":   | capacity  |     4 |   :  |  :                           :\n"
":   +-----------+-------+   :  |  :                           :\n"
":                           :  |  `- - - - - - - - - - - - - -'\n"
":    s2                     :  |\n"
":   +-----------+-------+   :  |\n"
":   | ptr       |   o---+---+--'\n"
":   | len       |     4 |   :\n"
":   | capacity  |     4 |   :\n"
":   +-----------+-------+   :\n"
":                           :\n"
"`- - - - - - - - - - - - - -'\n"
"```"
msgstr ""

#: src/memory-management/move.md
#, fuzzy
msgid ""
"When you pass a value to a function, the value is assigned to the function "
"parameter. This transfers ownership:"
msgstr ""
"Όταν μεταβιβάζετε μια τιμή σε μια συνάρτηση, η τιμή εκχωρείται στη συνάρτηση "
"παράμετρος. Αυτό μεταβιβάζει την ιδιοκτησία:"

#: src/memory-management/move.md
msgid "\"Hello {name}\""
msgstr ""

#: src/memory-management/move.md src/android/interoperability/java.md
#, fuzzy
msgid "\"Alice\""
msgstr "Φέτες"

#: src/memory-management/move.md
msgid "// say_hello(name);\n"
msgstr ""

#: src/memory-management/move.md
#, fuzzy
msgid ""
"Mention that this is the opposite of the defaults in C++, which copies by "
"value unless you use `std::move` (and the move constructor is defined!)."
msgstr ""
"Αναφέρετε ότι αυτό είναι το αντίθετο από τις προεπιλογές της C++, η οποία "
"αντιγράφει με βάση την τιμή, εκτός και αν χρησιμοποιήσετε το `std::move` "
"(και ορίζεται ο κατασκευαστής κίνησης!)."

#: src/memory-management/move.md
msgid ""
"It is only the ownership that moves. Whether any machine code is generated "
"to manipulate the data itself is a matter of optimization, and such copies "
"are aggressively optimized away."
msgstr ""

#: src/memory-management/move.md
msgid ""
"Simple values (such as integers) can be marked `Copy` (see later slides)."
msgstr ""

#: src/memory-management/move.md
msgid "In Rust, clones are explicit (by using `clone`)."
msgstr ""

#: src/memory-management/move.md
msgid "In the `say_hello` example:"
msgstr ""

#: src/memory-management/move.md
#, fuzzy
msgid ""
"With the first call to `say_hello`, `main` gives up ownership of `name`. "
"Afterwards, `name` cannot be used anymore within `main`."
msgstr ""
"Με την πρώτη κλήση στο \"say_hello\", ο \"main\" παραιτείται από την "
"ιδιοκτησία του \"name\". Στη συνέχεια, το \"όνομα\" δεν μπορεί να "
"χρησιμοποιηθεί πλέον στο \"κύριο\"."

#: src/memory-management/move.md
#, fuzzy
msgid ""
"The heap memory allocated for `name` will be freed at the end of the "
"`say_hello` function."
msgstr ""
"Η μνήμη σωρού που έχει εκχωρηθεί για το \"όνομα\" θα ελευθερωθεί στο τέλος "
"της συνάρτησης \"say_hello\"."

#: src/memory-management/move.md
#, fuzzy
msgid ""
"`main` can retain ownership if it passes `name` as a reference (`&name`) and "
"if `say_hello` accepts a reference as a parameter."
msgstr ""
"Το \"main\" μπορεί να διατηρήσει την ιδιοκτησία εάν μεταβιβάσει το \"name\" "
"ως αναφορά (\"&name\") και εάν το \"say_hello\" αποδεχτεί μια αναφορά ως "
"παράμετρο."

#: src/memory-management/move.md
#, fuzzy
msgid ""
"Alternatively, `main` can pass a clone of `name` in the first call (`name."
"clone()`)."
msgstr ""
"Εναλλακτικά, το \"main\" μπορεί να περάσει έναν κλώνο του \"name\" στην "
"πρώτη κλήση (\"name.clone()\")."

#: src/memory-management/move.md
#, fuzzy
msgid ""
"Rust makes it harder than C++ to inadvertently create copies by making move "
"semantics the default, and by forcing programmers to make clones explicit."
msgstr ""
"Το Rust καθιστά δυσκολότερο από την C++ την ακούσια δημιουργία αντιγράφων "
"καθιστώντας τη σημασιολογία κίνησης ως προεπιλογή και αναγκάζοντας τους "
"προγραμματιστές να κάνουν τους κλώνους ξεκάθαρους."

#: src/memory-management/move.md
#, fuzzy
msgid "Defensive Copies in Modern C++"
msgstr "Διπλές απελευθερώσεις μνήμης στη σύγχρονη C++"

#: src/memory-management/move.md
#, fuzzy
msgid "Modern C++ solves this differently:"
msgstr "Η σύγχρονη C++ το λύνει διαφορετικά:"

#: src/memory-management/move.md
msgid "\"Cpp\""
msgstr ""

#: src/memory-management/move.md
msgid "// Duplicate the data in s1.\n"
msgstr ""

#: src/memory-management/move.md
#, fuzzy
msgid ""
"The heap data from `s1` is duplicated and `s2` gets its own independent copy."
msgstr ""
"Τα δεδομένα σωρού από το `s1` είναι διπλά και το `s2` αποκτά το δικό του "
"ανεξάρτητο αντίγραφο."

#: src/memory-management/move.md
#, fuzzy
msgid "When `s1` and `s2` go out of scope, they each free their own memory."
msgstr ""
"Όταν τα «s1» και «s2» βγαίνουν εκτός πεδίου εφαρμογής, το καθένα "
"απελευθερώνει τη δική του μνήμη."

#: src/memory-management/move.md
#, fuzzy
msgid "Before copy-assignment:"
msgstr "Πριν την αντιγραφή-ανάθεση:"

#: src/memory-management/move.md
#, fuzzy
msgid "After copy-assignment:"
msgstr "Μετά την αντιγραφή-ανάθεση:"

#: src/memory-management/move.md
msgid ""
"C++ has made a slightly different choice than Rust. Because `=` copies data, "
"the string data has to be cloned. Otherwise we would get a double-free when "
"either string goes out of scope."
msgstr ""

#: src/memory-management/move.md
msgid ""
"C++ also has [`std::move`](https://en.cppreference.com/w/cpp/utility/move), "
"which is used to indicate when a value may be moved from. If the example had "
"been `s2 = std::move(s1)`, no heap allocation would take place. After the "
"move, `s1` would be in a valid but unspecified state. Unlike Rust, the "
"programmer is allowed to keep using `s1`."
msgstr ""

#: src/memory-management/move.md
msgid ""
"Unlike Rust, `=` in C++ can run arbitrary code as determined by the type "
"which is being copied or moved."
msgstr ""

#: src/memory-management/clone.md
msgid "Clone"
msgstr ""

#: src/memory-management/clone.md
msgid ""
"Sometimes you _want_ to make a copy of a value. The `Clone` trait "
"accomplishes this."
msgstr ""

#: src/memory-management/clone.md
msgid ""
"The idea of `Clone` is to make it easy to spot where heap allocations are "
"occurring. Look for `.clone()` and a few others like `Vec::new` or `Box::"
"new`."
msgstr ""

#: src/memory-management/clone.md
msgid ""
"It's common to \"clone your way out\" of problems with the borrow checker, "
"and return later to try to optimize those clones away."
msgstr ""

#: src/memory-management/copy-types.md
#, fuzzy
msgid ""
"While move semantics are the default, certain types are copied by default:"
msgstr ""
"Ενώ η σημασιολογία μετακίνησης είναι η προεπιλογή, ορισμένοι τύποι "
"αντιγράφονται από προεπιλογή:"

#: src/memory-management/copy-types.md
#, fuzzy
msgid "These types implement the `Copy` trait."
msgstr "Αυτοί οι τύποι εφαρμόζουν το χαρακτηριστικό «Αντιγραφή»."

#: src/memory-management/copy-types.md
#, fuzzy
msgid "You can opt-in your own types to use copy semantics:"
msgstr ""
"Μπορείτε να επιλέξετε τους δικούς σας τύπους για χρήση σημασιολογίας "
"αντιγραφής:"

#: src/memory-management/copy-types.md
#, fuzzy
msgid "After the assignment, both `p1` and `p2` own their own data."
msgstr ""
"Μετά την ανάθεση, τόσο το «p1» και το «p2» έχουν τα δικά τους δεδομένα."

#: src/memory-management/copy-types.md
#, fuzzy
msgid "We can also use `p1.clone()` to explicitly copy the data."
msgstr ""
"Μπορούμε επίσης να χρησιμοποιήσουμε το «p1.clone()» για να αντιγράψουμε ρητά "
"τα δεδομένα."

#: src/memory-management/copy-types.md
#, fuzzy
msgid "Copying and cloning are not the same thing:"
msgstr "Η αντιγραφή και η κλωνοποίηση δεν είναι το ίδιο πράγμα:"

#: src/memory-management/copy-types.md
#, fuzzy
msgid ""
"Copying refers to bitwise copies of memory regions and does not work on "
"arbitrary objects."
msgstr ""
"Η αντιγραφή αναφέρεται σε αντίγραφα bitwise περιοχών μνήμης και δεν "
"λειτουργεί σε αυθαίρετα αντικείμενα."

#: src/memory-management/copy-types.md
#, fuzzy
msgid ""
"Copying does not allow for custom logic (unlike copy constructors in C++)."
msgstr ""
"Η αντιγραφή δεν επιτρέπει προσαρμοσμένη λογική (σε αντίθεση με τους "
"κατασκευαστές αντιγραφής στη C++)."

#: src/memory-management/copy-types.md
#, fuzzy
msgid ""
"Cloning is a more general operation and also allows for custom behavior by "
"implementing the `Clone` trait."
msgstr ""
"Η κλωνοποίηση είναι μια πιο γενική λειτουργία και επιτρέπει επίσης "
"προσαρμοσμένη συμπεριφορά με την εφαρμογή του χαρακτηριστικού «Κλωνοποίηση»."

#: src/memory-management/copy-types.md
#, fuzzy
msgid "Copying does not work on types that implement the `Drop` trait."
msgstr ""
"Η αντιγραφή δεν λειτουργεί σε τύπους που εφαρμόζουν το χαρακτηριστικό «Drop»."

#: src/memory-management/copy-types.md
#, fuzzy
msgid "In the above example, try the following:"
msgstr "Στο παραπάνω παράδειγμα, δοκιμάστε τα εξής:"

#: src/memory-management/copy-types.md
#, fuzzy
msgid ""
"Add a `String` field to `struct Point`. It will not compile because `String` "
"is not a `Copy` type."
msgstr ""
"Προσθέστε ένα πεδίο «String» στο «struct Point». Δεν θα μεταγλωττιστεί "
"επειδή το \"String\" δεν είναι τύπος \"Αντιγραφή\"."

#: src/memory-management/copy-types.md
#, fuzzy
msgid ""
"Remove `Copy` from the `derive` attribute. The compiler error is now in the "
"`println!` for `p1`."
msgstr ""
"Καταργήστε το \"Copy\" από το χαρακτηριστικό \"derive\". Το σφάλμα "
"μεταγλωττιστή βρίσκεται τώρα στο «println!» για το «p1»."

#: src/memory-management/copy-types.md
#, fuzzy
msgid "Show that it works if you clone `p1` instead."
msgstr "Δείξτε ότι λειτουργεί εάν αντ' αυτού κλωνοποιήσετε το \"p1\"."

#: src/memory-management/drop.md
#, fuzzy
msgid "The `Drop` Trait"
msgstr "Το χαρακτηριστικό «Drop»."

#: src/memory-management/drop.md
#, fuzzy
msgid ""
"Values which implement [`Drop`](https://doc.rust-lang.org/std/ops/trait.Drop."
"html) can specify code to run when they go out of scope:"
msgstr ""
"Οι τιμές που εφαρμόζουν το \"Drop\" μπορούν να καθορίσουν τον κώδικα που θα "
"εκτελείται όταν εξέρχονται από το πεδίο εφαρμογής:"

#: src/memory-management/drop.md
msgid "\"Dropping {}\""
msgstr ""

#: src/memory-management/drop.md src/exercises/concurrency/link-checker.md
#: src/exercises/concurrency/solutions-morning.md
msgid "\"a\""
msgstr ""

#: src/memory-management/drop.md src/testing/googletest.md
msgid "\"b\""
msgstr ""

#: src/memory-management/drop.md
msgid "\"c\""
msgstr ""

#: src/memory-management/drop.md
msgid "\"d\""
msgstr ""

#: src/memory-management/drop.md
msgid "\"Exiting block B\""
msgstr ""

#: src/memory-management/drop.md
msgid "\"Exiting block A\""
msgstr ""

#: src/memory-management/drop.md
msgid "\"Exiting main\""
msgstr ""

#: src/memory-management/drop.md
msgid "Note that `std::mem::drop` is not the same as `std::ops::Drop::drop`."
msgstr ""

#: src/memory-management/drop.md
msgid "Values are automatically dropped when they go out of scope."
msgstr ""

#: src/memory-management/drop.md
msgid ""
"When a value is dropped, if it implements `std::ops::Drop` then its `Drop::"
"drop` implementation will be called."
msgstr ""

#: src/memory-management/drop.md
msgid ""
"All its fields will then be dropped too, whether or not it implements `Drop`."
msgstr ""

#: src/memory-management/drop.md
msgid ""
"`std::mem::drop` is just an empty function that takes any value. The "
"significance is that it takes ownership of the value, so at the end of its "
"scope it gets dropped. This makes it a convenient way to explicitly drop "
"values earlier than they would otherwise go out of scope."
msgstr ""

#: src/memory-management/drop.md
msgid ""
"This can be useful for objects that do some work on `drop`: releasing locks, "
"closing files, etc."
msgstr ""

#: src/memory-management/drop.md
#, fuzzy
msgid "Why doesn't `Drop::drop` take `self`?"
msgstr "Γιατί το «Drop::drop» δεν σημαίνει «self»;"

#: src/memory-management/drop.md
#, fuzzy
msgid ""
"Short-answer: If it did, `std::mem::drop` would be called at the end of the "
"block, resulting in another call to `Drop::drop`, and a stack overflow!"
msgstr ""
"Σύντομη απάντηση: Εάν συνέβαινε, το `std::mem::drop` θα καλούνταν στο τέλος "
"του το μπλοκ, με αποτέλεσμα μια άλλη κλήση στο «Drop::drop» και μια στοίβα "
"ξεχείλισμα!"

#: src/memory-management/drop.md
#, fuzzy
msgid "Try replacing `drop(a)` with `a.drop()`."
msgstr "Δοκιμάστε να αντικαταστήσετε το «drop(a)» με το «a.drop()»."

#: src/memory-management/exercise.md
msgid ""
"In this example, we will implement a complex data type that owns all of its "
"data. We will use the \"builder pattern\" to support building a new value "
"piece-by-piece, using convenience functions."
msgstr ""

#: src/memory-management/exercise.md
msgid "Fill in the missing pieces."
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// A representation of a software package.\n"
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid ""
"/// Return a representation of this package as a dependency, for use in\n"
"    /// building other packages.\n"
msgstr ""

#: src/memory-management/exercise.md
msgid "\"1\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid ""
"/// A builder for a Package. Use `build()` to create the `Package` itself.\n"
msgstr ""

#: src/memory-management/exercise.md
msgid "\"2\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// Set the package version.\n"
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// Set the package authors.\n"
msgstr ""

#: src/memory-management/exercise.md
msgid "\"3\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// Add an additional dependency.\n"
msgstr ""

#: src/memory-management/exercise.md
msgid "\"4\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// Set the language. If not set, language defaults to None.\n"
msgstr ""

#: src/memory-management/exercise.md
msgid "\"5\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"base64\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"0.13\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"base64: {base64:?}\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"log\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"0.4\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"log: {log:?}\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"serde\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"djmitche\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"4.0\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"serde: {serde:?}\""
msgstr ""

#: src/memory-management/solution.md
msgid "\"0.1\""
msgstr ""

#: src/smart-pointers.md
msgid "[Box"
msgstr ""

#: src/smart-pointers.md
msgid "](./smart-pointers/box.md) (10 minutes)"
msgstr ""

#: src/smart-pointers.md
msgid "[Rc](./smart-pointers/rc.md) (5 minutes)"
msgstr ""

#: src/smart-pointers.md
msgid "[Exercise: Binary Tree](./smart-pointers/exercise.md) (30 minutes)"
msgstr ""

#: src/smart-pointers/box.md
#, fuzzy
msgid ""
"[`Box`](https://doc.rust-lang.org/std/boxed/struct.Box.html) is an owned "
"pointer to data on the heap:"
msgstr ""
"Το [`Πλαίσιο`](https://doc.rust-lang.org/std/boxed/struct.Box.html) είναι "
"ένας ιδιόκτητος δείκτης σε δεδομένα στο σωρό:"

#: src/smart-pointers/box.md
msgid "\"five: {}\""
msgstr ""

#: src/smart-pointers/box.md
#, fuzzy
msgid ""
"`Box<T>` implements `Deref<Target = T>`, which means that you can [call "
"methods from `T` directly on a `Box<T>`](https://doc.rust-lang.org/std/ops/"
"trait.Deref.html#more-on-deref-coercion)."
msgstr ""
"Το \"Box\n"
"\n"
"\" υλοποιεί το \"Deref\\<Target = T>\", που σημαίνει ότι μπορείτε [μεθόδους "
"κλήσης από το \"T\" απευθείας σε ένα \"Box\n"
"\n"
"\"](https://doc.rust-lang.org/std/ops/trait.Deref.html#more-on-deref-"
"coercion)."

#: src/smart-pointers/box.md
#, fuzzy
msgid ""
"Recursive data types or data types with dynamic sizes need to use a `Box`:"
msgstr ""
"Οι αναδρομικοί τύποι δεδομένων ή οι τύποι δεδομένων με δυναμικά μεγέθη "
"πρέπει να χρησιμοποιούν ένα «Πλαίσιο»:"

#: src/smart-pointers/box.md
msgid "/// A non-empty list: first element and the rest of the list.\n"
msgstr ""

#: src/smart-pointers/box.md
msgid "/// An empty list.\n"
msgstr ""

#: src/smart-pointers/box.md
msgid "\"{list:?}\""
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"```bob\n"
" Stack                           Heap\n"
".- - - - - - - - - - - - - - .     .- - - - - - - - - - - - - - - - - - - - "
"- - - - -.\n"
":                            :     :                                                 :\n"
":    "
"list                    :     :                                                 :\n"
":   +---------+----+----+    :     :    +---------+----+----+    +------+----"
"+----+  :\n"
":   | Element | 1  | o--+----+-----+--->| Element | 2  | o--+--->| Nil  | // "
"| // |  :\n"
":   +---------+----+----+    :     :    +---------+----+----+    +------+----"
"+----+  :\n"
":                            :     :                                                 :\n"
":                            :     :                                                 :\n"
"'- - - - - - - - - - - - - - '     '- - - - - - - - - - - - - - - - - - - - "
"- - - - -'\n"
"```"
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"`Box` is like `std::unique_ptr` in C++, except that it's guaranteed to be "
"not null."
msgstr ""

#: src/smart-pointers/box.md
msgid "A `Box` can be useful when you:"
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"have a type whose size that can't be known at compile time, but the Rust "
"compiler wants to know an exact size."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"want to transfer ownership of a large amount of data. To avoid copying large "
"amounts of data on the stack, instead store the data on the heap in a `Box` "
"so only the pointer is moved."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"If `Box` was not used and we attempted to embed a `List` directly into the "
"`List`, the compiler would not compute a fixed size of the struct in memory "
"(`List` would be of infinite size)."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"`Box` solves this problem as it has the same size as a regular pointer and "
"just points at the next element of the `List` in the heap."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"Remove the `Box` in the List definition and show the compiler error. "
"\"Recursive with indirection\" is a hint you might want to use a Box or "
"reference of some kind, instead of storing a value directly."
msgstr ""

#: src/smart-pointers/box.md
msgid "Niche Optimization"
msgstr "Εξειδικευμένη Βελτιστοποίηση"

#: src/smart-pointers/box.md
#, fuzzy
msgid ""
"A `Box` cannot be empty, so the pointer is always valid and non-`null`. This "
"allows the compiler to optimize the memory layout:"
msgstr ""
"Ένα «Πλαίσιο» δεν μπορεί να είναι κενό, επομένως ο δείκτης είναι πάντα "
"έγκυρος και μη «μηδενικός». Αυτό επιτρέπει στον μεταγλωττιστή να "
"βελτιστοποιήσει τη διάταξη της μνήμης:"

#: src/smart-pointers/box.md
msgid ""
"```bob\n"
" Stack                           Heap\n"
".- - - - - - - - - - - - - - .     .- - - - - - - - - - - - - -.\n"
":                            :     :                           :\n"
":    list                    :     :                           :\n"
":   +---------+----+----+    :     :    +---------+----+----+  :\n"
":   | Element | 1  | o--+----+-----+--->| Element | 2  | // |  :\n"
":   +---------+----+----+    :     :    +---------+----+----+  :\n"
":                            :     :                           :\n"
":                            :     :                           :\n"
"'- - - - - - - - - - - - - - '     '- - - - - - - - - - - - - -'\n"
"```"
msgstr ""

#: src/smart-pointers/rc.md
#, fuzzy
msgid ""
"[`Rc`](https://doc.rust-lang.org/std/rc/struct.Rc.html) is a reference-"
"counted shared pointer. Use this when you need to refer to the same data "
"from multiple places:"
msgstr ""
"Το [`Rc`](https://doc.rust-lang.org/std/rc/struct.Rc.html) είναι ένας "
"κοινόχρηστος δείκτης με μέτρηση αναφοράς. Χρησιμοποιήστε το όταν πρέπει να "
"ανατρέξετε στα ίδια δεδομένα από πολλά μέρη:"

#: src/smart-pointers/rc.md
msgid "\"a: {a}\""
msgstr ""

#: src/smart-pointers/rc.md
msgid "\"b: {b}\""
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"See [`Arc`](../concurrency/shared_state/arc.md) and [`Mutex`](https://doc."
"rust-lang.org/std/sync/struct.Mutex.html) if you are in a multi-threaded "
"context."
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"You can _downgrade_ a shared pointer into a [`Weak`](https://doc.rust-lang."
"org/std/rc/struct.Weak.html) pointer to create cycles that will get dropped."
msgstr ""

#: src/smart-pointers/rc.md
#, fuzzy
msgid ""
"`Rc`'s count ensures that its contained value is valid for as long as there "
"are references."
msgstr "Όπως το `std::shared_ptr` της C++."

#: src/smart-pointers/rc.md
msgid "`Rc` in Rust is like `std::shared_ptr` in C++."
msgstr ""

#: src/smart-pointers/rc.md
#, fuzzy
msgid ""
"`Rc::clone` is cheap: it creates a pointer to the same allocation and "
"increases the reference count. Does not make a deep clone and can generally "
"be ignored when looking for performance issues in code."
msgstr ""
"Το `make_mut` στην πραγματικότητα κλωνοποιεί την εσωτερική τιμή εάν είναι "
"απαραίτητο (\"clone-on-write\") και επιστρέφει μια μεταβλητή αναφορά."

#: src/smart-pointers/rc.md
msgid ""
"`make_mut` actually clones the inner value if necessary (\"clone-on-write\") "
"and returns a mutable reference."
msgstr ""

#: src/smart-pointers/rc.md
msgid "Use `Rc::strong_count` to check the reference count."
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"`Rc::downgrade` gives you a _weakly reference-counted_ object to create "
"cycles that will be dropped properly (likely in combination with `RefCell`)."
msgstr ""

#: src/smart-pointers/exercise.md
msgid ""
"A binary tree is a tree-type data structure where every node has two "
"children (left and right). We will create a tree where each node stores a "
"value. For a given node N, all nodes in a N's left subtree contain smaller "
"values, and all nodes in N's right subtree will contain larger values."
msgstr ""

#: src/smart-pointers/exercise.md
msgid "Implement the following types, so that the given tests pass."
msgstr ""

#: src/smart-pointers/exercise.md
msgid ""
"Extra Credit: implement an iterator over a binary tree that returns the "
"values in order."
msgstr ""

#: src/smart-pointers/exercise.md src/smart-pointers/solution.md
msgid "/// A node in the binary tree.\n"
msgstr ""

#: src/smart-pointers/exercise.md src/smart-pointers/solution.md
msgid "/// A possibly-empty subtree.\n"
msgstr ""

#: src/smart-pointers/exercise.md src/smart-pointers/solution.md
msgid ""
"/// A container storing a set of values, using a binary tree.\n"
"///\n"
"/// If the same value is added multiple times, it is only stored once.\n"
msgstr ""

#: src/smart-pointers/exercise.md
msgid "// Implement `new`, `insert`, `len`, and `has`.\n"
msgstr ""

#: src/smart-pointers/exercise.md src/smart-pointers/solution.md
msgid "// not a unique item\n"
msgstr ""

#: src/smart-pointers/solution.md src/testing/googletest.md
msgid "\"bar\""
msgstr ""

#: src/welcome-day-3-afternoon.md
msgid "[Borrowing](./borrowing.md) (1 hour)"
msgstr ""

#: src/welcome-day-3-afternoon.md
msgid ""
"[Slices and Lifetimes](./slices-and-lifetimes.md) (1 hour and 10 minutes)"
msgstr ""

#: src/welcome-day-3-afternoon.md
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 20 "
"minutes"
msgstr ""

#: src/borrowing.md
msgid "[Borrowing a Value](./borrowing/shared.md) (10 minutes)"
msgstr ""

#: src/borrowing.md
msgid "[Borrow Checking](./borrowing/borrowck.md) (10 minutes)"
msgstr ""

#: src/borrowing.md
msgid "[Interior Mutability](./borrowing/interior-mutability.md) (10 minutes)"
msgstr ""

#: src/borrowing.md
msgid "[Exercise: Health Statistics](./borrowing/exercise.md) (30 minutes)"
msgstr ""

#: src/borrowing/shared.md
#, fuzzy
msgid ""
"As we saw before, instead of transferring ownership when calling a function, "
"you can let a function _borrow_ the value:"
msgstr ""
"Αντί να μεταβιβάζετε την ιδιοκτησία κατά την κλήση μιας συνάρτησης, μπορείτε "
"να αφήσετε α συνάρτηση _borrow_ την τιμή:"

#: src/borrowing/shared.md
#, fuzzy
msgid "The `add` function _borrows_ two points and returns a new point."
msgstr ""
"Η συνάρτηση «προσθήκη» _δανείζεται_ δύο σημεία και επιστρέφει ένα νέο σημείο."

#: src/borrowing/shared.md
#, fuzzy
msgid "The caller retains ownership of the inputs."
msgstr "Ο καλών διατηρεί την κυριότητα των εισόδων."

#: src/borrowing/shared.md
msgid ""
"This slide is a review of the material on references from day 1, expanding "
"slightly to include function arguments and return values."
msgstr ""

#: src/borrowing/shared.md
msgid "Notes on stack returns:"
msgstr ""

#: src/borrowing/shared.md
msgid ""
"Demonstrate that the return from `add` is cheap because the compiler can "
"eliminate the copy operation. Change the above code to print stack addresses "
"and run it on the [Playground](https://play.rust-lang.org/?"
"version=stable&mode=release&edition=2021&gist=0cb13be1c05d7e3446686ad9947c4671) "
"or look at the assembly in [Godbolt](https://rust.godbolt.org/). In the "
"\"DEBUG\" optimization level, the addresses should change, while they stay "
"the same when changing to the \"RELEASE\" setting:"
msgstr ""

#: src/borrowing/shared.md
msgid "The Rust compiler can do return value optimization (RVO)."
msgstr ""

#: src/borrowing/shared.md
msgid ""
"In C++, copy elision has to be defined in the language specification because "
"constructors can have side effects. In Rust, this is not an issue at all. If "
"RVO did not happen, Rust will always perform a simple and efficient `memcpy` "
"copy."
msgstr ""

#: src/borrowing/borrowck.md
#, fuzzy
msgid ""
"Rust's _borrow checker_ puts constraints on the ways you can borrow values. "
"For a given value, at any time:"
msgstr ""
"Το Rust θέτει περιορισμούς στους τρόπους με τους οποίους μπορείτε να "
"δανειστείτε τιμές:"

#: src/borrowing/borrowck.md
#, fuzzy
msgid "You can have one or more shared references to the value, _or_"
msgstr "Μπορείτε να έχετε μία ή περισσότερες τιμές \"&T\" ανά πάσα στιγμή, _ή_"

#: src/borrowing/borrowck.md
#, fuzzy
msgid "You can have exactly one exclusive reference to the value."
msgstr "Μπορείτε να έχετε ακριβώς μία τιμή «&mut T»."

#: src/borrowing/borrowck.md
msgid ""
"Note that the requirement is that conflicting references not _exist_ at the "
"same point. It does not matter where the reference is dereferenced."
msgstr ""

#: src/borrowing/borrowck.md
#, fuzzy
msgid ""
"The above code does not compile because `a` is borrowed as mutable (through "
"`c`) and as immutable (through `b`) at the same time."
msgstr ""
"Ο παραπάνω κώδικας δεν μεταγλωττίζεται επειδή το «a» δανείζεται ταυτόχρονα "
"ως mutable (μέσω «c») και ως αμετάβλητο (μέσω «b»)."

#: src/borrowing/borrowck.md
#, fuzzy
msgid ""
"Move the `println!` statement for `b` before the scope that introduces `c` "
"to make the code compile."
msgstr ""
"Μετακινήστε τη δήλωση «println!» για το «b» πριν από το εύρος που εισάγει το "
"«c» για να κάνετε μεταγλώττιση του κώδικα."

#: src/borrowing/borrowck.md
#, fuzzy
msgid ""
"After that change, the compiler realizes that `b` is only ever used before "
"the new mutable borrow of `a` through `c`. This is a feature of the borrow "
"checker called \"non-lexical lifetimes\"."
msgstr ""
"Μετά από αυτήν την αλλαγή, ο μεταγλωττιστής συνειδητοποιεί ότι το \"b\" "
"χρησιμοποιείται μόνο πριν από το νέο μεταβλητό δάνειο του \"a\" έως το "
"\"c\". Αυτό είναι ένα χαρακτηριστικό του ελεγκτή δανεισμού που ονομάζεται "
"\"μη λεξιλογικές ζωές\"."

#: src/borrowing/borrowck.md
msgid ""
"The exclusive reference constraint is quite strong. Rust uses it to ensure "
"that data races do not occur. Rust also _relies_ on this constraint to "
"optimize code. For example, a value behind a shared reference can be safely "
"cached in a register for the lifetime of that reference."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"The borrow checker is designed to accommodate many common patterns, such as "
"taking exclusive references to different fields in a struct at the same "
"time. But, there are some situations where it doesn't quite \"get it\" and "
"this often results in \"fighting with the borrow checker.\""
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"In some situations, it's necessary to modify data behind a shared (read-"
"only) reference. For example, a shared data structure might have an internal "
"cache, and wish to update that cache from read-only methods."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"The \"interior mutability\" pattern allows exclusive (mutable) access behind "
"a shared reference. The standard library provides several ways to do this, "
"all while still ensuring safety, typically by performing a runtime check."
msgstr ""

#: src/borrowing/interior-mutability.md
#, fuzzy
msgid "`RefCell`"
msgstr "`RefCell<T>`"

#: src/borrowing/interior-mutability.md
msgid "\"graph: {root:#?}\""
msgstr ""

#: src/borrowing/interior-mutability.md
msgid "\"graph sum: {}\""
msgstr ""

#: src/borrowing/interior-mutability.md
#, fuzzy
msgid "`Cell`"
msgstr "`Κελλί<T>`"

#: src/borrowing/interior-mutability.md
msgid ""
"`Cell` wraps a value and allows getting or setting the value, even with a "
"shared reference to the `Cell`. However, it does not allow any references to "
"the value. Since there are no references, borrowing rules cannot be broken."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"The main thing to take away from this slide is that Rust provides _safe_ "
"ways to modify data behind a shared reference. There are a variety of ways "
"to ensure that safety, and `RefCell` and `Cell` are two of them."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"`RefCell` enforces Rust's usual borrowing rules (either multiple shared "
"references or a single exclusive reference) with a runtime check. In this "
"case, all borrows are very short and never overlap, so the checks always "
"succeed."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"`Rc` only allows shared (read-only) access to its contents, since its "
"purpose is to allow (and count) many references. But we want to modify the "
"value, so we need interior mutability."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"`Cell` is a simpler means to ensure safety: it has a `set` method that takes "
"`&self`. This needs no runtime check, but requires moving values, which can "
"have its own cost."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"Demonstrate that reference loops can be created by adding `root` to `subtree."
"children`."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"To demonstrate a runtime panic, add a `fn inc(&mut self)` that increments "
"`self.value` and calls the same method on its children. This will panic in "
"the presence of the reference loop, with `thread 'main' panicked at 'already "
"borrowed: BorrowMutError'`."
msgstr ""

#: src/borrowing/exercise.md
#, fuzzy
msgid ""
"You're working on implementing a health-monitoring system. As part of that, "
"you need to keep track of users' health statistics."
msgstr ""
"Εργάζεστε για την εφαρμογή ενός συστήματος παρακολούθησης της υγείας. Ως "
"μέρος αυτού, εσείς πρέπει να παρακολουθεί τα στατιστικά στοιχεία υγείας των "
"χρηστών."

#: src/borrowing/exercise.md
#, fuzzy
msgid ""
"You'll start with a stubbed function in an `impl` block as well as a `User` "
"struct definition. Your goal is to implement the stubbed out method on the "
"`User` `struct` defined in the `impl` block."
msgstr ""
"Θα ξεκινήσετε με ορισμένες αποκομμένες συναρτήσεις σε ένα μπλοκ \"impl\" "
"καθώς και σε ένα \"User\". ορισμός κατασκευής. Ο στόχος σας είναι να "
"εφαρμόσετε τις αποκομμένες μεθόδους στο Η δομή \"User\" ορίζεται στο μπλοκ "
"\"impl\"."

#: src/borrowing/exercise.md
#, fuzzy
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and fill in the missing "
"method:"
msgstr ""
"Αντιγράψτε τον παρακάτω κώδικα στο <https://play.rust-lang.org/> και "
"συμπληρώστε τον κωδικό που λείπει μέθοδοι:"

#: src/borrowing/exercise.md
msgid ""
"\"Update a user's statistics based on measurements from a visit to the "
"doctor\""
msgstr ""

#: src/borrowing/exercise.md src/borrowing/solution.md
#: src/android/build-rules/library.md src/android/aidl/client.md
msgid "\"Bob\""
msgstr ""

#: src/borrowing/exercise.md src/borrowing/solution.md
msgid "\"I'm {} and my age is {}\""
msgstr ""

#: src/slices-and-lifetimes.md
msgid "[Slices: &\\[T\\]](./slices-and-lifetimes/slices.md) (10 minutes)"
msgstr ""

#: src/slices-and-lifetimes.md
msgid "[String References](./slices-and-lifetimes/str.md) (10 minutes)"
msgstr ""

#: src/slices-and-lifetimes.md
msgid ""
"[Lifetime Annotations](./slices-and-lifetimes/lifetime-annotations.md) (10 "
"minutes)"
msgstr ""

#: src/slices-and-lifetimes.md
msgid ""
"[Lifetime Elision](./slices-and-lifetimes/lifetime-elision.md) (5 minutes)"
msgstr ""

#: src/slices-and-lifetimes.md
msgid ""
"[Struct Lifetimes](./slices-and-lifetimes/struct-lifetimes.md) (5 minutes)"
msgstr ""

#: src/slices-and-lifetimes.md
msgid ""
"[Exercise: Protobuf Parsing](./slices-and-lifetimes/exercise.md) (30 minutes)"
msgstr ""

#: src/slices-and-lifetimes/slices.md
msgid "Slices"
msgstr "Φέτες"

#: src/slices-and-lifetimes/slices.md
#, fuzzy
msgid "A slice gives you a view into a larger collection:"
msgstr "Μια φέτα σάς δίνει μια προβολή σε μια μεγαλύτερη συλλογή:"

#: src/slices-and-lifetimes/slices.md
#, fuzzy
msgid "Slices borrow data from the sliced type."
msgstr "Οι φέτες δανείζονται δεδομένα από τον τύπο σε φέτες."

#: src/slices-and-lifetimes/slices.md
#, fuzzy
msgid "Question: What happens if you modify `a[3]` right before printing `s`?"
msgstr "Ερώτηση: Τι θα συμβεί αν τροποποιήσετε το «a\\[3\\]»;"

#: src/slices-and-lifetimes/slices.md
#, fuzzy
msgid ""
"We create a slice by borrowing `a` and specifying the starting and ending "
"indexes in brackets."
msgstr ""
"Το `s` είναι μια αναφορά σε ένα κομμάτι του `i32`. Παρατηρήστε ότι ο τύπος "
"`s` (`&[i32]`) δεν αναφέρει πλέον το μήκος του πίνακα. Αυτό μας επιτρέπει να "
"κάνουμε υπολογισμούς σε φέτες διαφορετικών μεγεθών."

#: src/slices-and-lifetimes/slices.md
#, fuzzy
msgid ""
"If the slice starts at index 0, Rust’s range syntax allows us to drop the "
"starting index, meaning that `&a[0..a.len()]` and `&a[..a.len()]` are "
"identical."
msgstr ""
"Οι φέτες δανείζονται πάντα από άλλο αντικείμενο. Σε αυτό το παράδειγμα, το "
"«a» πρέπει να παραμείνει «ζωντανό» (στο πεδίο εφαρμογής) για τουλάχιστον όσο "
"το κομμάτι μας."

#: src/slices-and-lifetimes/slices.md
#, fuzzy
msgid ""
"The same is true for the last index, so `&a[2..a.len()]` and `&a[2..]` are "
"identical."
msgstr ""
"Η ερώτηση σχετικά με την τροποποίηση του «a\\[3\\]» μπορεί να προκαλέσει μια "
"ενδιαφέρουσα συζήτηση, αλλά η απάντηση είναι ότι για λόγους ασφαλείας της "
"μνήμης δεν μπορείτε να το κάνετε μέσω του \"a\" αφού δημιουργήσετε ένα "
"slice, αλλά μπορείτε να διαβάσετε τα δεδομένα από το \"a\" και το \"s\" με "
"ασφάλεια. Περισσότερες λεπτομέρειες θα επεξηγηθούν στην ενότητα ελέγχου "
"δανεισμού."

#: src/slices-and-lifetimes/slices.md
msgid ""
"To easily create a slice of the full array, we can therefore use `&a[..]`."
msgstr ""

#: src/slices-and-lifetimes/slices.md
msgid ""
"`s` is a reference to a slice of `i32`s. Notice that the type of `s` "
"(`&[i32]`) no longer mentions the array length. This allows us to perform "
"computation on slices of different sizes."
msgstr ""

#: src/slices-and-lifetimes/slices.md
msgid ""
"Slices always borrow from another object. In this example, `a` has to remain "
"'alive' (in scope) for at least as long as our slice."
msgstr ""

#: src/slices-and-lifetimes/slices.md
msgid ""
"The question about modifying `a[3]` can spark an interesting discussion, but "
"the answer is that for memory safety reasons you cannot do it through `a` at "
"this point in the execution, but you can read the data from both `a` and `s` "
"safely. It works before you created the slice, and again after the "
"`println`, when the slice is no longer used."
msgstr ""

#: src/slices-and-lifetimes/str.md
msgid ""
"We can now understand the two string types in Rust: `&str` is almost like "
"`&[char]`, but with its data stored in a variable-length encoding (UTF-8)."
msgstr ""

#: src/slices-and-lifetimes/str.md
msgid "\"s1: {s1}\""
msgstr ""

#: src/slices-and-lifetimes/str.md
#, fuzzy
msgid "\"Hello \""
msgstr "Γειά σου Κόσμε!"

#: src/slices-and-lifetimes/str.md
msgid "\"s3: {s3}\""
msgstr ""

#: src/slices-and-lifetimes/str.md
#, fuzzy
msgid "Rust terminology:"
msgstr "Ορολογία σκουριάς:"

#: src/slices-and-lifetimes/str.md
#, fuzzy
msgid "`&str` an immutable reference to a string slice."
msgstr "«&str» μια αμετάβλητη αναφορά σε ένα κομμάτι συμβολοσειράς."

#: src/slices-and-lifetimes/str.md
#, fuzzy
msgid "`String` a mutable string buffer."
msgstr "\"String\" ένα μεταβλητό buffer συμβολοσειρών."

#: src/slices-and-lifetimes/str.md
#, fuzzy
msgid ""
"`&str` introduces a string slice, which is an immutable reference to UTF-8 "
"encoded string data stored in a block of memory. String literals "
"(`”Hello”`), are stored in the program’s binary."
msgstr ""
"Η μακροεντολή «format!()» είναι ένας βολικός τρόπος για να δημιουργήσετε μια "
"ιδιόκτητη συμβολοσειρά από δυναμικές τιμές. Το δέχεται την ίδια προδιαγραφή "
"μορφής με το \"println!()\"."

#: src/slices-and-lifetimes/str.md
#, fuzzy
msgid ""
"Rust’s `String` type is a wrapper around a vector of bytes. As with a "
"`Vec<T>`, it is owned."
msgstr ""
"Μπορείτε να δανειστείτε κομμάτια «&str» από το «String» μέσω του «&» και "
"προαιρετικά επιλογής εύρους."

#: src/slices-and-lifetimes/str.md
#, fuzzy
msgid ""
"As with many other types `String::from()` creates a string from a string "
"literal; `String::new()` creates a new empty string, to which string data "
"can be added using the `push()` and `push_str()` methods."
msgstr ""
"Για προγραμματιστές C++: σκεφτείτε το «&str» ως «const char\\*» από τη C++, "
"αλλά αυτό που δείχνει πάντα σε μια έγκυρη συμβολοσειρά στη μνήμη. Το Rust "
"«String» είναι ένα κατά προσέγγιση ισοδύναμο του «std::string» από τη C++ "
"(κύρια διαφορά: μπορεί να περιέχει μόνο byte με κωδικοποίηση UTF-8 και δεν "
"θα χρησιμοποιήσει ποτέ βελτιστοποίηση μικρής συμβολοσειράς)."

#: src/slices-and-lifetimes/str.md
msgid ""
"The `format!()` macro is a convenient way to generate an owned string from "
"dynamic values. It accepts the same format specification as `println!()`."
msgstr ""

#: src/slices-and-lifetimes/str.md
msgid ""
"You can borrow `&str` slices from `String` via `&` and optionally range "
"selection. If you select a byte range that is not aligned to character "
"boundaries, the expression will panic. The `chars` iterator iterates over "
"characters and is preferred over trying to get character boundaries right."
msgstr ""

#: src/slices-and-lifetimes/str.md
msgid ""
"For C++ programmers: think of `&str` as `std::string_view` from C++, but the "
"one that always points to a valid string in memory. Rust `String` is a rough "
"equivalent of `std::string` from C++ (main difference: it can only contain "
"UTF-8 encoded bytes and will never use a small-string optimization)."
msgstr ""

#: src/slices-and-lifetimes/str.md
#, fuzzy
msgid "Byte strings literals allow you to create a `&[u8]` value directly:"
msgstr ""
"Οι απαριθμήσεις σάς επιτρέπουν να συλλέγετε ένα σύνολο τιμών κάτω από έναν "
"τύπο"

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid ""
"A reference has a _lifetime_, which must not \"outlive\" the value it refers "
"to. This is verified by the borrow checker."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid ""
"The lifetime can be implicit - this is what we have seen so far. Lifetimes "
"can also be explicit: `&'a Point`, `&'document str`. Lifetimes start with "
"`'` and `'a` is a typical default name. Read `&'a Point` as \"a borrowed "
"`Point` which is valid for at least the lifetime `a`\"."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid ""
"Lifetimes are always inferred by the compiler: you cannot assign a lifetime "
"yourself. Explicit lifetime annotations create constraints where there is "
"ambiguity; the compiler verifies that there is a valid solution."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid ""
"Lifetimes become more complicated when considering passing values to and "
"returning values from functions."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid "// What is the lifetime of p3?\n"
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid "\"p3: {p3:?}\""
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid ""
"In this example, the the compiler does not know what lifetime to infer for "
"`p3`. Looking inside the function body shows that it can only safely assume "
"that `p3`'s lifetime is the shorter of `p1` and `p2`. But just like types, "
"Rust requires explicit annotations of lifetimes on function arguments and "
"return values."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid "Add `'a` appropriately to `left_most`:"
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid ""
"This says, \"given p1 and p2 which both outlive `'a`, the return value lives "
"for at least `'a`."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md
msgid ""
"In common cases, lifetimes can be elided, as described on the next slide."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md
msgid "Lifetimes in Function Calls"
msgstr "Διάρκειες σε κλήσεις συναρτήσεων"

#: src/slices-and-lifetimes/lifetime-elision.md
msgid ""
"Lifetimes for function arguments and return values must be fully specified, "
"but Rust allows lifetimes to be elided in most cases with [a few simple "
"rules](https://doc.rust-lang.org/nomicon/lifetime-elision.html). This is not "
"inference -- it is just a syntactic shorthand."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md
msgid "Each argument which does not have a lifetime annotation is given one."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md
msgid ""
"If there is only one argument lifetime, it is given to all un-annotated "
"return values."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md
msgid ""
"If there are multiple argument lifetimes, but the first one is for `self`, "
"that lifetime is given to all un-annotated return values."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md
msgid "In this example, `cab_distance` is trivially elided."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md
msgid ""
"The `nearest` function provides another example of a function with multiple "
"references in its arguments that requires explicit annotation."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md
msgid "Try adjusting the signature to \"lie\" about the lifetimes returned:"
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md
msgid ""
"This won't compile, demonstrating that the annotations are checked for "
"validity by the compiler. Note that this is not the case for raw pointers "
"(unsafe), and this is a common source of errors with unsafe Rust."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md
msgid ""
"Students may ask when to use lifetimes. Rust borrows _always_ have "
"lifetimes. Most of the time, elision and type inference mean these don't "
"need to be written out. In more complicated cases, lifetime annotations can "
"help resolve ambiguity. Often, especially when prototyping, it's easier to "
"just work with owned data by cloning values where necessary."
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md
msgid "Lifetimes in Data Structures"
msgstr "Διάρκειες ζωής σε δομές δεδομένων"

#: src/slices-and-lifetimes/struct-lifetimes.md
#, fuzzy
msgid ""
"If a data type stores borrowed data, it must be annotated with a lifetime:"
msgstr ""
"Εάν ένας τύπος δεδομένων αποθηκεύει δανεισμένα δεδομένα, πρέπει να "
"σχολιάζεται με μια διάρκεια ζωής:"

#: src/slices-and-lifetimes/struct-lifetimes.md
msgid "\"Bye {text}!\""
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md
msgid "\"The quick brown fox jumps over the lazy dog.\""
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md
msgid "// erase(text);\n"
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md
msgid "\"{fox:?}\""
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md
msgid "\"{dog:?}\""
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md
#, fuzzy
msgid ""
"In the above example, the annotation on `Highlight` enforces that the data "
"underlying the contained `&str` lives at least as long as any instance of "
"`Highlight` that uses that data."
msgstr ""
"Στο παραπάνω παράδειγμα, ο σχολιασμός στο \"Highlight\" επιβάλλει ότι τα "
"δεδομένα που βρίσκονται κάτω από το περιεχόμενο \"&str\" ζουν τουλάχιστον "
"για όσο χρονικό διάστημα οποιοδήποτε στιγμιότυπο του \"Highlight\" που "
"χρησιμοποιεί αυτά τα δεδομένα."

#: src/slices-and-lifetimes/struct-lifetimes.md
#, fuzzy
msgid ""
"If `text` is consumed before the end of the lifetime of `fox` (or `dog`), "
"the borrow checker throws an error."
msgstr ""
"Εάν το «κείμενο» καταναλωθεί πριν από το τέλος της διάρκειας ζωής του "
"«αλεπού» (ή του «σκύλου»), ο ελεγκτής δανείου κάνει ένα σφάλμα."

#: src/slices-and-lifetimes/struct-lifetimes.md
#, fuzzy
msgid ""
"Types with borrowed data force users to hold on to the original data. This "
"can be useful for creating lightweight views, but it generally makes them "
"somewhat harder to use."
msgstr ""
"Οι τύποι με δανεικά δεδομένα αναγκάζουν τους χρήστες να παραμείνουν στα "
"αρχικά δεδομένα. Αυτό μπορεί να είναι χρήσιμο για τη δημιουργία ελαφριών "
"προβολών, αλλά γενικά τις καθιστά κάπως πιο δύσκολες στη χρήση."

#: src/slices-and-lifetimes/struct-lifetimes.md
#, fuzzy
msgid "When possible, make data structures own their data directly."
msgstr ""
"Όταν είναι δυνατόν, κάντε τις δομές δεδομένων να κατέχουν απευθείας τα "
"δεδομένα τους."

#: src/slices-and-lifetimes/struct-lifetimes.md
#, fuzzy
msgid ""
"Some structs with multiple references inside can have more than one lifetime "
"annotation. This can be necessary if there is a need to describe lifetime "
"relationships between the references themselves, in addition to the lifetime "
"of the struct itself. Those are very advanced use cases."
msgstr ""
"Ορισμένες δομές με πολλαπλές αναφορές στο εσωτερικό μπορεί να έχουν "
"περισσότερους από έναν σχολιασμούς διάρκειας ζωής. Αυτό μπορεί να είναι "
"απαραίτητο εάν υπάρχει ανάγκη να περιγραφούν σχέσεις διάρκειας ζωής μεταξύ "
"των ίδιων των αναφορών, επιπλέον της διάρκειας ζωής της ίδιας της δομής. "
"Είναι πολύ προηγμένες περιπτώσεις χρήσης."

#: src/slices-and-lifetimes/exercise.md
msgid ""
"In this exercise, you will build a parser for the [protobuf binary encoding]"
"(https://protobuf.dev/programming-guides/encoding/). Don't worry, it's "
"simpler than it seems! This illustrates a common parsing pattern, passing "
"slices of data. The underlying data itself is never copied."
msgstr ""

#: src/slices-and-lifetimes/exercise.md
msgid ""
"Fully parsing a protobuf message requires knowing the types of the fields, "
"indexed by their field numbers. That is typically provided in a `proto` "
"file. In this exercise, we'll encode that information into `match` "
"statements in functions that get called for each field."
msgstr ""

#: src/slices-and-lifetimes/exercise.md
msgid "We'll use the following proto:"
msgstr ""

#: src/slices-and-lifetimes/exercise.md
msgid ""
"A proto message is encoded as a series of fields, one after the next. Each "
"is implemented as a \"tag\" followed by the value. The tag contains a field "
"number (e.g., `2` for the `id` field of a `Person` message) and a wire type "
"defining how the payload should be determined from the byte stream."
msgstr ""

#: src/slices-and-lifetimes/exercise.md
msgid ""
"Integers, including the tag, are represented with a variable-length encoding "
"called VARINT. Luckily, `parse_varint` is defined for you below. The given "
"code also defines callbacks to handle `Person` and `PhoneNumber` fields, and "
"to parse a message into a series of calls to those callbacks."
msgstr ""

#: src/slices-and-lifetimes/exercise.md
msgid ""
"What remains for you is to implement the `parse_field` function and the "
"`ProtoMessage` trait for `Person` and `PhoneNumber`."
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "\"Invalid varint\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "\"Invalid wire-type\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "\"Unexpected EOF\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "\"Invalid length\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "\"Unexpected wire-type)\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "\"Invalid string (not UTF-8)\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "/// A wire type as seen on the wire.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "/// The Varint WireType indicates the value is a single VARINT.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid ""
"//I64,  -- not needed for this exercise\n"
"    /// The Len WireType indicates that the value is a length represented as "
"a\n"
"    /// VARINT followed by exactly that number of bytes.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid ""
"/// The I32 WireType indicates that the value is precisely 4 bytes in\n"
"    /// little-endian order containing a 32-bit signed integer.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "/// A field's value, typed based on the wire type.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "//I64(i64),  -- not needed for this exercise\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "/// A field, containing the field number and its value.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "//1 => WireType::I64,  -- not needed for this exercise\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid ""
"/// Parse a VARINT, returning the parsed value and the remaining bytes.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid ""
"// This is the last byte of the VARINT, so convert it to\n"
"            // a u64 and return it.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "// More than 7 bytes is invalid.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "/// Convert a tag into a field number and a WireType.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid "/// Parse a field, returning the remaining bytes\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md
msgid ""
"\"Based on the wire type, build a Field, consuming as many bytes as "
"necessary.\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md
msgid "\"Return the field, and any un-consumed bytes.\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md src/slices-and-lifetimes/solution.md
msgid ""
"/// Parse a message in the given data, calling `T::add_field` for each field "
"in\n"
"/// the message.\n"
"///\n"
"/// The entire input is consumed.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md
msgid "// TODO: Implement ProtoMessage for Person and PhoneNumber.\n"
msgstr ""

#: src/slices-and-lifetimes/solution.md
msgid "// Unwrap error because `value` is definitely 4 bytes long.\n"
msgstr ""

#: src/slices-and-lifetimes/solution.md
msgid "// skip everything else\n"
msgstr ""

#: src/slices-and-lifetimes/solution.md
msgid "b\"hello\""
msgstr ""

#: src/welcome-day-4.md
#, fuzzy
msgid "Welcome to Day 4"
msgstr "Καλώς ήρθατε στην Ημέρα 4"

#: src/welcome-day-4.md
#, fuzzy
msgid ""
"Today we will cover topics relating to building large-scale software in Rust:"
msgstr "Σήμερα, θα καλύψουμε μερικά πιο προχωρημένα θέματα του Rust:"

#: src/welcome-day-4.md
msgid "Iterators: a deep dive on the `Iterator` trait."
msgstr ""

#: src/welcome-day-4.md
msgid "Modules and visibility."
msgstr ""

#: src/welcome-day-4.md
#, fuzzy
msgid "Testing."
msgstr "Τεστ"

#: src/welcome-day-4.md
msgid "Error handling: panics, `Result`, and the try operator `?`."
msgstr ""

#: src/welcome-day-4.md
msgid ""
"Unsafe Rust: the escape hatch when you can't express yourself in safe Rust."
msgstr ""

#: src/welcome-day-4.md
msgid "[Welcome](./welcome-day-4.md) (3 minutes)"
msgstr ""

#: src/welcome-day-4.md
msgid "[Iterators](./iterators.md) (45 minutes)"
msgstr ""

#: src/welcome-day-4.md
msgid "[Modules](./modules.md) (40 minutes)"
msgstr ""

#: src/welcome-day-4.md
msgid "[Testing](./testing.md) (1 hour and 5 minutes)"
msgstr ""

#: src/iterators.md
msgid "[Iterator](./iterators/iterator.md) (5 minutes)"
msgstr ""

#: src/iterators.md
msgid "[IntoIterator](./iterators/intoiterator.md) (5 minutes)"
msgstr ""

#: src/iterators.md
msgid "[FromIterator](./iterators/fromiterator.md) (5 minutes)"
msgstr ""

#: src/iterators.md
msgid ""
"[Exercise: Iterator Method Chaining](./iterators/exercise.md) (30 minutes)"
msgstr ""

#: src/iterators/iterator.md
msgid ""
"The [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) "
"trait supports iterating over values in a collection. It requires a `next` "
"method and provides lots of methods. Many standard library types implement "
"`Iterator`, and you can implement it yourself, too:"
msgstr ""

#: src/iterators/iterator.md
msgid "\"fib({i}): {n}\""
msgstr ""

#: src/iterators/iterator.md
msgid ""
"The `Iterator` trait implements many common functional programming "
"operations over collections (e.g. `map`, `filter`, `reduce`, etc). This is "
"the trait where you can find all the documentation about them. In Rust these "
"functions should produce the code as efficient as equivalent imperative "
"implementations."
msgstr ""

#: src/iterators/iterator.md
msgid ""
"`IntoIterator` is the trait that makes for loops work. It is implemented by "
"collection types such as `Vec<T>` and references to them such as `&Vec<T>` "
"and `&[T]`. Ranges also implement it. This is why you can iterate over a "
"vector with `for i in some_vec { .. }` but `some_vec.next()` doesn't exist."
msgstr ""

#: src/iterators/intoiterator.md
#, fuzzy
msgid ""
"The `Iterator` trait tells you how to _iterate_ once you have created an "
"iterator. The related trait [`IntoIterator`](https://doc.rust-lang.org/std/"
"iter/trait.IntoIterator.html) defines how to create an iterator for a type. "
"It is used automatically by the `for` loop."
msgstr ""
"Το χαρακτηριστικό \"Iterator\" σάς λέει πώς να _επανάληψη_ αφού "
"δημιουργήσετε ένα επαναλήπτης. Το σχετικό χαρακτηριστικό «IntoIterator» σάς "
"λέει πώς να δημιουργήσετε τον επαναλήπτη:"

#: src/iterators/intoiterator.md
msgid "\"point = {x}, {y}\""
msgstr ""

#: src/iterators/intoiterator.md
#, fuzzy
msgid ""
"Click through to the docs for `IntoIterator`. Every implementation of "
"`IntoIterator` must declare two types:"
msgstr ""
"Η σύνταξη εδώ σημαίνει ότι κάθε υλοποίηση του «IntoIterator» πρέπει Δηλώστε "
"δύο τύπους:"

#: src/iterators/intoiterator.md
#, fuzzy
msgid "`Item`: the type to iterate over, such as `i8`,"
msgstr "\"Στοιχείο\": ο τύπος που επαναλαμβάνουμε, όπως \"i8\","

#: src/iterators/intoiterator.md
#, fuzzy
msgid "`IntoIter`: the `Iterator` type returned by the `into_iter` method."
msgstr ""
"«IntoIter»: ο τύπος «Iterator» που επιστρέφεται με τη μέθοδο «into_iter»."

#: src/iterators/intoiterator.md
#, fuzzy
msgid ""
"Note that `IntoIter` and `Item` are linked: the iterator must have the same "
"`Item` type, which means that it returns `Option<Item>`"
msgstr ""
"Σημειώστε ότι το \"IntoIter\" και το \"Item\" είναι συνδεδεμένα: ο "
"επαναλήπτης πρέπει να έχει το ίδιο Τύπος «Στοιχείο», που σημαίνει ότι "
"επιστρέφει «Επιλογή\\<Στοιχείο>»."

#: src/iterators/intoiterator.md
msgid "The example iterates over all combinations of x and y coordinates."
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"Try iterating over the grid twice in `main`. Why does this fail? Note that "
"`IntoIterator::into_iter` takes ownership of `self`."
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"Fix this issue by implementing `IntoIterator` for `&Grid` and storing a "
"reference to the `Grid` in `GridIter`."
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"The same problem can occur for standard library types: `for e in "
"some_vector` will take ownership of `some_vector` and iterate over owned "
"elements from that vector. Use `for e in &some_vector` instead, to iterate "
"over references to elements of `some_vector`."
msgstr ""

#: src/iterators/fromiterator.md
msgid "FromIterator"
msgstr "FromIterator"

#: src/iterators/fromiterator.md
#, fuzzy
msgid ""
"[`FromIterator`](https://doc.rust-lang.org/std/iter/trait.FromIterator.html) "
"lets you build a collection from an [`Iterator`](https://doc.rust-lang.org/"
"std/iter/trait.Iterator.html)."
msgstr ""
"Το \"FromIterator\" σάς επιτρέπει να δημιουργήσετε μια συλλογή από ένα "
"\"Iterator\"."

#: src/iterators/fromiterator.md
msgid "\"prime_squares: {prime_squares:?}\""
msgstr ""

#: src/iterators/fromiterator.md
#, fuzzy
msgid "`Iterator` implements"
msgstr "«Iterator»."

#: src/iterators/fromiterator.md
msgid "There are two ways to specify `B` for this method:"
msgstr ""

#: src/iterators/fromiterator.md
msgid ""
"With the \"turbofish\": `some_iterator.collect::<COLLECTION_TYPE>()`, as "
"shown. The `_` shorthand used here lets Rust infer the type of the `Vec` "
"elements."
msgstr ""

#: src/iterators/fromiterator.md
msgid ""
"With type inference: `let prime_squares: Vec<_> = some_iterator.collect()`. "
"Rewrite the example to use this form."
msgstr ""

#: src/iterators/fromiterator.md
#, fuzzy
msgid ""
"There are basic implementations of `FromIterator` for `Vec`, `HashMap`, etc. "
"There are also more specialized implementations which let you do cool things "
"like convert an `Iterator<Item = Result<V, E>>` into a `Result<Vec<V>, E>`."
msgstr ""
"Υπάρχουν επίσης υλοποιήσεις που σας επιτρέπουν να κάνετε καταπληκτικά "
"πράγματα όπως η μετατροπή ενός \"Iterator\\<Item = Αποτέλεσμα\\<V, E>>\" σε "
"ένα \"Result\\<Vec\n"
"\n"
", E>\"."

#: src/iterators/exercise.md
#, fuzzy
msgid ""
"In this exercise, you will need to find and use some of the provided methods "
"in the [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) "
"trait to implement a complex calculation."
msgstr ""
"Μπορείτε να εφαρμόσετε το χαρακτηριστικό «Iterator» στους δικούς σας τύπους:"

#: src/iterators/exercise.md
#, fuzzy
msgid ""
"Copy the following code to <https://play.rust-lang.org/> and make the tests "
"pass. Use an iterator expression and `collect` the result to construct the "
"return value."
msgstr ""
"Αντιγράψτε τον παρακάτω κώδικα στο <https://play.rust-lang.org/> και κάντε "
"τις δοκιμές πέρασμα. Προσπαθήστε να αποφύγετε να εκχωρήσετε ένα «Vec» για τα "
"ενδιάμεσα αποτελέσματά σας:"

#: src/iterators/exercise.md src/iterators/solution.md
msgid ""
"/// Calculate the differences between elements of `values` offset by "
"`offset`,\n"
"/// wrapping around from the end of `values` to the beginning.\n"
"///\n"
"/// Element `n` of the result is `values[(n+offset)%len] - values[n]`.\n"
msgstr ""

#: src/modules.md
msgid "[Modules](./modules/modules.md) (5 minutes)"
msgstr ""

#: src/modules.md
msgid "[Filesystem Hierarchy](./modules/filesystem.md) (5 minutes)"
msgstr ""

#: src/modules.md
msgid "[Visibility](./modules/visibility.md) (5 minutes)"
msgstr ""

#: src/modules.md
msgid "[use, super, self](./modules/paths.md) (10 minutes)"
msgstr ""

#: src/modules.md
msgid ""
"[Exercise: Modules for a GUI Library](./modules/exercise.md) (15 minutes)"
msgstr ""

#: src/modules.md
msgid "This segment should take about 40 minutes"
msgstr ""

#: src/modules/modules.md
#, fuzzy
msgid "We have seen how `impl` blocks let us namespace functions to a type."
msgstr ""
"Είδαμε πώς τα μπλοκ «impl» μας επιτρέπουν να λειτουργεί ο χώρος ονομάτων σε "
"έναν τύπο."

#: src/modules/modules.md
#, fuzzy
msgid "Similarly, `mod` lets us namespace types and functions:"
msgstr "Ομοίως, το «mod» μας επιτρέπει τύπους και συναρτήσεις ονομάτων:"

#: src/modules/modules.md
msgid "\"In the foo module\""
msgstr ""

#: src/modules/modules.md
msgid "\"In the bar module\""
msgstr ""

#: src/modules/modules.md
msgid ""
"Packages provide functionality and include a `Cargo.toml` file that "
"describes how to build a bundle of 1+ crates."
msgstr ""

#: src/modules/modules.md
msgid ""
"Crates are a tree of modules, where a binary crate creates an executable and "
"a library crate compiles to a library."
msgstr ""

#: src/modules/modules.md
msgid "Modules define organization, scope, and are the focus of this section."
msgstr ""

#: src/modules/filesystem.md
msgid ""
"Omitting the module content will tell Rust to look for it in another file:"
msgstr ""

#: src/modules/filesystem.md
msgid ""
"This tells rust that the `garden` module content is found at `src/garden."
"rs`. Similarly, a `garden::vegetables` module can be found at `src/garden/"
"vegetables.rs`."
msgstr ""

#: src/modules/filesystem.md
#, fuzzy
msgid "The `crate` root is in:"
msgstr "Η ρίζα «κλουβί» βρίσκεται σε:"

#: src/modules/filesystem.md
#, fuzzy
msgid "`src/lib.rs` (for a library crate)"
msgstr "`src/lib.rs` (για κλουβί βιβλιοθήκης)"

#: src/modules/filesystem.md
#, fuzzy
msgid "`src/main.rs` (for a binary crate)"
msgstr "`src/main.rs` (για δυαδικό κιβώτιο)"

#: src/modules/filesystem.md
msgid ""
"Modules defined in files can be documented, too, using \"inner doc "
"comments\". These document the item that contains them -- in this case, a "
"module."
msgstr ""

#: src/modules/filesystem.md
msgid ""
"//! This module implements the garden, including a highly performant "
"germination\n"
"//! implementation.\n"
msgstr ""

#: src/modules/filesystem.md
msgid "// Re-export types from this module.\n"
msgstr ""

#: src/modules/filesystem.md
msgid "/// Sow the given seed packets.\n"
msgstr ""

#: src/modules/filesystem.md
msgid "/// Harvest the produce in the garden that is ready.\n"
msgstr ""

#: src/modules/filesystem.md
msgid ""
"Before Rust 2018, modules needed to be located at `module/mod.rs` instead of "
"`module.rs`, and this is still a working alternative for editions after 2018."
msgstr ""

#: src/modules/filesystem.md
msgid ""
"The main reason to introduce `filename.rs` as alternative to `filename/mod."
"rs` was because many files named `mod.rs` can be hard to distinguish in IDEs."
msgstr ""

#: src/modules/filesystem.md
msgid "Deeper nesting can use folders, even if the main module is a file:"
msgstr ""

#: src/modules/filesystem.md
msgid ""
"The place rust will look for modules can be changed with a compiler "
"directive:"
msgstr ""

#: src/modules/filesystem.md
msgid "\"some/path.rs\""
msgstr ""

#: src/modules/filesystem.md
msgid ""
"This is useful, for example, if you would like to place tests for a module "
"in a file named `some_module_test.rs`, similar to the convention in Go."
msgstr ""

#: src/modules/visibility.md
#, fuzzy
msgid "Modules are a privacy boundary:"
msgstr "Οι ενότητες αποτελούν όριο απορρήτου:"

#: src/modules/visibility.md
#, fuzzy
msgid "Module items are private by default (hides implementation details)."
msgstr ""
"Τα στοιχεία της μονάδας είναι ιδιωτικά από προεπιλογή (αποκρύπτει τις "
"λεπτομέρειες υλοποίησης)."

#: src/modules/visibility.md
#, fuzzy
msgid "Parent and sibling items are always visible."
msgstr "Τα στοιχεία γονέα και αδελφών είναι πάντα ορατά."

#: src/modules/visibility.md
msgid ""
"In other words, if an item is visible in module `foo`, it's visible in all "
"the descendants of `foo`."
msgstr ""

#: src/modules/visibility.md
msgid "\"outer::private\""
msgstr ""

#: src/modules/visibility.md
msgid "\"outer::public\""
msgstr ""

#: src/modules/visibility.md
msgid "\"outer::inner::private\""
msgstr ""

#: src/modules/visibility.md
msgid "\"outer::inner::public\""
msgstr ""

#: src/modules/visibility.md
msgid "Use the `pub` keyword to make modules public."
msgstr ""

#: src/modules/visibility.md
msgid ""
"Additionally, there are advanced `pub(...)` specifiers to restrict the scope "
"of public visibility."
msgstr ""

#: src/modules/visibility.md
msgid ""
"See the [Rust Reference](https://doc.rust-lang.org/reference/visibility-and-"
"privacy.html#pubin-path-pubcrate-pubsuper-and-pubself)."
msgstr ""

#: src/modules/visibility.md
msgid "Configuring `pub(crate)` visibility is a common pattern."
msgstr ""

#: src/modules/visibility.md
msgid "Less commonly, you can give visibility to a specific path."
msgstr ""

#: src/modules/visibility.md
msgid ""
"In any case, visibility must be granted to an ancestor module (and all of "
"its descendants)."
msgstr ""

#: src/modules/paths.md
msgid "use, super, self"
msgstr ""

#: src/modules/paths.md
msgid ""
"A module can bring symbols from another module into scope with `use`. You "
"will typically see something like this at the top of each module:"
msgstr ""

#: src/modules/paths.md
msgid "Paths"
msgstr "Μονοπάτια"

#: src/modules/paths.md
#, fuzzy
msgid "Paths are resolved as follows:"
msgstr "Οι διαδρομές επιλύονται ως εξής:"

#: src/modules/paths.md
#, fuzzy
msgid "As a relative path:"
msgstr "Ως απόλυτη διαδρομή:"

#: src/modules/paths.md
#, fuzzy
msgid "`foo` or `self::foo` refers to `foo` in the current module,"
msgstr ""
"Το \"crate::foo\" αναφέρεται στο \"foo\" στη ρίζα του τρέχοντος κιβωτίου,"

#: src/modules/paths.md
#, fuzzy
msgid "`super::foo` refers to `foo` in the parent module."
msgstr "Το «bar::foo» αναφέρεται στο «foo» στο κιβώτιο «bar»."

#: src/modules/paths.md
msgid "As an absolute path:"
msgstr ""

#: src/modules/paths.md
msgid "`crate::foo` refers to `foo` in the root of the current crate,"
msgstr ""

#: src/modules/paths.md
msgid "`bar::foo` refers to `foo` in the `bar` crate."
msgstr ""

#: src/modules/paths.md
msgid ""
"It is common to \"re-export\" symbols at a shorter path. For example, the "
"top-level `lib.rs` in a crate might have"
msgstr ""

#: src/modules/paths.md
msgid ""
"making `DiskStorage` and `NetworkStorage` available to other crates with a "
"convenient, short path."
msgstr ""

#: src/modules/paths.md
msgid ""
"For the most part, only items that appear in a module need to be `use`'d. "
"However, a trait must be in scope to call any methods on that trait, even if "
"a type implementing that trait is already in scope. For example, to use the "
"`read_to_string` method on a type implementing the `Read` trait, you need to "
"`use std::io::Read`."
msgstr ""

#: src/modules/paths.md
msgid ""
"The `use` statement can have a wildcard: `use std::io::*`. This is "
"discouraged because it is not clear which items are imported, and those "
"might change over time."
msgstr ""

#: src/modules/exercise.md
msgid ""
"In this exercise, you will reorganize a small GUI Library implementation. "
"This library defines a `Widget` trait and a few implementations of that "
"trait, as well as a `main` function."
msgstr ""

#: src/modules/exercise.md
msgid ""
"It is typical to put each type or set of closely-related types into its own "
"module, so each widget type should get its own module."
msgstr ""

#: src/modules/exercise.md
#, fuzzy
msgid "Cargo Setup"
msgstr "Προετοιμασία"

#: src/modules/exercise.md
msgid ""
"The Rust playground only supports one file, so you will need to make a Cargo "
"project on your local filesystem:"
msgstr ""

#: src/modules/exercise.md
msgid ""
"Edit the resulting `src/main.rs` to add `mod` statements, and add additional "
"files in the `src` directory."
msgstr ""

#: src/modules/exercise.md
msgid "Source"
msgstr ""

#: src/modules/exercise.md
msgid "Here's the single-module implementation of the GUI library:"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "/// Natural width of `self`.\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "/// Draw the widget into a buffer.\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "/// Draw the widget on standard output.\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"{buffer}\""
msgstr ""

#: src/modules/exercise.md
msgid "// Add 4 paddings for borders\n"
msgstr ""

#: src/modules/exercise.md
msgid ""
"// TODO: Change draw_into to return Result<(), std::fmt::Error>. Then use "
"the\n"
"        // ?-operator here instead of .unwrap().\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"+-{:-<inner_width$}-+\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md src/testing/unit-tests.md
#: src/testing/solution.md
msgid "\"\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"| {:^inner_width$} |\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"+={:=<inner_width$}=+\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"| {:inner_width$} |\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "// add a bit of padding\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"+{:-<width$}+\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"|{:^width$}|\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"Rust GUI Demo 1.23\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"This is a small text GUI demo.\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"Click me!\""
msgstr ""

#: src/modules/exercise.md
msgid ""
"Encourage students to divide the code in a way that feels natural for them, "
"and get accustomed to the required `mod`, `use`, and `pub` declarations. "
"Afterward, discuss what organizations are most idiomatic."
msgstr ""

#: src/modules/solution.md
msgid "// ---- src/widgets.rs ----\n"
msgstr ""

#: src/modules/solution.md
msgid "// ---- src/widgets/label.rs ----\n"
msgstr ""

#: src/modules/solution.md
msgid "// ANCHOR_END: Label-width\n"
msgstr ""

#: src/modules/solution.md
msgid "// ANCHOR: Label-draw_into\n"
msgstr ""

#: src/modules/solution.md
msgid "// ANCHOR_END: Label-draw_into\n"
msgstr ""

#: src/modules/solution.md
msgid "// ---- src/widgets/button.rs ----\n"
msgstr ""

#: src/modules/solution.md
msgid "// ANCHOR_END: Button-width\n"
msgstr ""

#: src/modules/solution.md
msgid "// ANCHOR: Button-draw_into\n"
msgstr ""

#: src/modules/solution.md
msgid "// ANCHOR_END: Button-draw_into\n"
msgstr ""

#: src/modules/solution.md
msgid "// ---- src/widgets/window.rs ----\n"
msgstr ""

#: src/modules/solution.md
msgid ""
"// ANCHOR_END: Window-width\n"
"        // Add 4 paddings for borders\n"
msgstr ""

#: src/modules/solution.md
msgid "// ANCHOR: Window-draw_into\n"
msgstr ""

#: src/modules/solution.md
msgid "// ANCHOR_END: Window-draw_into\n"
msgstr ""

#: src/modules/solution.md
msgid ""
"// TODO: after learning about error handling, you can change\n"
"        // draw_into to return Result<(), std::fmt::Error>. Then use\n"
"        // the ?-operator here instead of .unwrap().\n"
msgstr ""

#: src/modules/solution.md
msgid "// ---- src/main.rs ----\n"
msgstr ""

#: src/testing.md
msgid "[Test Modules](./testing/unit-tests.md) (5 minutes)"
msgstr ""

#: src/testing.md
msgid "[Other Types of Tests](./testing/other.md) (10 minutes)"
msgstr ""

#: src/testing.md
msgid "[Useful Crates](./testing/useful-crates.md) (3 minutes)"
msgstr ""

#: src/testing.md
msgid "[GoogleTest](./testing/googletest.md) (5 minutes)"
msgstr ""

#: src/testing.md
msgid "[Mocking](./testing/mocking.md) (5 minutes)"
msgstr ""

#: src/testing.md
msgid "[Compiler Lints and Clippy](./testing/lints.md) (5 minutes)"
msgstr ""

#: src/testing.md
msgid "[Exercise: Luhn Algorithm](./testing/exercise.md) (30 minutes)"
msgstr ""

#: src/testing/unit-tests.md
msgid "Unit Tests"
msgstr "Τεστ μονάδων"

#: src/testing/unit-tests.md
#, fuzzy
msgid "Rust and Cargo come with a simple unit test framework:"
msgstr "Το Rust and Cargo συνοδεύεται από ένα απλό πλαίσιο δοκιμής μονάδας:"

#: src/testing/unit-tests.md
#, fuzzy
msgid "Unit tests are supported throughout your code."
msgstr "Οι δοκιμές ενσωμάτωσης υποστηρίζονται μέσω του καταλόγου «tests/»."

#: src/testing/unit-tests.md
msgid "Integration tests are supported via the `tests/` directory."
msgstr ""

#: src/testing/unit-tests.md
msgid ""
"Tests are marked with `#[test]`. Unit tests are often put in a nested "
"`tests` module, using `#[cfg(test)]` to conditionally compile them only when "
"building tests."
msgstr ""

#: src/testing/unit-tests.md
#, fuzzy
msgid "\"Hello World\""
msgstr "Γειά σου Κόσμε!"

#: src/testing/unit-tests.md
#, fuzzy
msgid "This lets you unit test private helpers."
msgstr "Αυτό σας επιτρέπει να δοκιμάσετε ιδιωτικούς βοηθούς μονάδας."

#: src/testing/unit-tests.md
#, fuzzy
msgid "The `#[cfg(test)]` attribute is only active when you run `cargo test`."
msgstr ""
"Το χαρακτηριστικό «#\\[cfg(test)\\]» είναι ενεργό μόνο όταν εκτελείτε "
"«δοκιμή φορτίου»."

#: src/testing/unit-tests.md
msgid "Run the tests in the playground in order to show their results."
msgstr ""

#: src/testing/other.md
msgid "Integration Tests"
msgstr "Τεστ ενσωμάτωσης"

#: src/testing/other.md
#, fuzzy
msgid "If you want to test your library as a client, use an integration test."
msgstr ""
"Εάν θέλετε να δοκιμάσετε τη βιβλιοθήκη σας ως πελάτη, χρησιμοποιήστε μια "
"δοκιμή ενοποίησης."

#: src/testing/other.md
#, fuzzy
msgid "Create a `.rs` file under `tests/`:"
msgstr "Δημιουργήστε ένα αρχείο «.rs» κάτω από το «tests/»:"

#: src/testing/other.md
msgid "// tests/my_library.rs\n"
msgstr ""

#: src/testing/other.md
#, fuzzy
msgid "These tests only have access to the public API of your crate."
msgstr "Αυτές οι δοκιμές έχουν πρόσβαση μόνο στο δημόσιο API του κλουβιού σας."

#: src/testing/other.md
msgid "Documentation Tests"
msgstr "Τεστ τεκμηρίωσης"

#: src/testing/other.md
#, fuzzy
msgid "Rust has built-in support for documentation tests:"
msgstr "Το Rust έχει ενσωματωμένη υποστήριξη για δοκιμές τεκμηρίωσης:"

#: src/testing/other.md
msgid ""
"/// Shortens a string to the given length.\n"
"///\n"
"/// ```\n"
"/// # use playground::shorten_string;\n"
"/// assert_eq!(shorten_string(\"Hello World\", 5), \"Hello\");\n"
"/// assert_eq!(shorten_string(\"Hello World\", 20), \"Hello World\");\n"
"/// ```\n"
msgstr ""

#: src/testing/other.md
#, fuzzy
msgid "Code blocks in `///` comments are automatically seen as Rust code."
msgstr ""
"Τα μπλοκ κώδικα στα σχόλια `///` εμφανίζονται αυτόματα ως κώδικας Rust."

#: src/testing/other.md
#, fuzzy
msgid "The code will be compiled and executed as part of `cargo test`."
msgstr ""
"Ο κώδικας θα μεταγλωττιστεί και θα εκτελεστεί ως μέρος της «δοκιμής φορτίου»."

#: src/testing/other.md
msgid ""
"Adding `#` in the code will hide it from the docs, but will still compile/"
"run it."
msgstr ""

#: src/testing/other.md
#, fuzzy
msgid ""
"Test the above code on the [Rust Playground](https://play.rust-lang.org/?"
"version=stable&mode=debug&edition=2021&gist=3ce2ad13ea1302f6572cb15cd96becf0)."
msgstr ""
"Δοκιμάστε τον παραπάνω κώδικα στο [Rust Playground](https://play.rust-lang."
"org/?"
"version=stable&mode=debug&edition=2021&gist=3ce2ad13ea1302f6572cb15cd96becf0)."

#: src/testing/useful-crates.md
#, fuzzy
msgid "Rust comes with only basic support for writing tests."
msgstr "Το Rust έχει ενσωματωμένη υποστήριξη για δοκιμές τεκμηρίωσης:"

#: src/testing/useful-crates.md
msgid "Here are some additional crates which we recommend for writing tests:"
msgstr ""

#: src/testing/useful-crates.md
msgid ""
"[googletest](https://docs.rs/googletest): Comprehensive test assertion "
"library in the tradition of GoogleTest for C++."
msgstr ""

#: src/testing/useful-crates.md
msgid "[proptest](https://docs.rs/proptest): Property-based testing for Rust."
msgstr ""

#: src/testing/useful-crates.md
msgid ""
"[rstest](https://docs.rs/rstest): Support for fixtures and parameterised "
"tests."
msgstr ""

#: src/testing/googletest.md
msgid ""
"The [GoogleTest](https://docs.rs/googletest/) crate allows for flexible test "
"assertions using _matchers_:"
msgstr ""

#: src/testing/googletest.md
msgid "\"baz\""
msgstr ""

#: src/testing/googletest.md
msgid "\"xyz\""
msgstr ""

#: src/testing/googletest.md
msgid ""
"If we change the last element to `\"!\"`, the test fails with a structured "
"error message pin-pointing the error:"
msgstr ""

#: src/testing/googletest.md
msgid ""
"GoogleTest is not part of the Rust Playground, so you need to run this "
"example in a local environment. Use `cargo add googletest` to quickly add it "
"to an existing Cargo project."
msgstr ""

#: src/testing/googletest.md
msgid ""
"The `use googletest::prelude::*;` line imports a number of [commonly used "
"macros and types](https://docs.rs/googletest/latest/googletest/prelude/index."
"html)."
msgstr ""

#: src/testing/googletest.md
msgid "This just scratches the surface, there are many builtin matchers."
msgstr ""

#: src/testing/googletest.md
msgid ""
"A particularly nice feature is that mismatches in multi-line strings strings "
"are shown as a diff:"
msgstr ""

#: src/testing/googletest.md
msgid ""
"\"Memory safety found,\\n\\\n"
"                 Rust's strong typing guides the way,\\n\\\n"
"                 Secure code you'll write.\""
msgstr ""

#: src/testing/googletest.md
msgid ""
"\"Memory safety found,\\n\\\n"
"            Rust's silly humor guides the way,\\n\\\n"
"            Secure code you'll write.\""
msgstr ""

#: src/testing/googletest.md
msgid "shows a color-coded diff (colors not shown here):"
msgstr ""

#: src/testing/googletest.md
msgid ""
"The crate is a Rust port of [GoogleTest for C++](https://google.github.io/"
"googletest/)."
msgstr ""

#: src/testing/googletest.md
msgid "GoogleTest is available for use in AOSP."
msgstr ""

#: src/testing/mocking.md
msgid ""
"For mocking, [Mockall](https://docs.rs/mockall/) is a widely used library. "
"You need to refactor your code to use traits, which you can then quickly "
"mock:"
msgstr ""

#: src/testing/mocking.md
msgid ""
"The advice here is for Android (AOSP) where Mockall is the recommended "
"mocking library. There are other [mocking libraries available on crates.io]"
"(https://crates.io/keywords/mock), in particular in the area of mocking HTTP "
"services. The other mocking libraries work in a similar fashion as Mockall, "
"meaning that they make it easy to get a mock implementation of a given trait."
msgstr ""

#: src/testing/mocking.md
msgid ""
"Note that mocking is somewhat _controversial_: mocks allow you to completely "
"isolate a test from its dependencies. The immediate result is faster and "
"more stable test execution. On the other hand, the mocks can be configured "
"wrongly and return output different from what the real dependencies would do."
msgstr ""

#: src/testing/mocking.md
msgid ""
"If at all possible, it is recommended that you use the real dependencies. As "
"an example, many databases allow you to configure an in-memory backend. This "
"means that you get the correct behavior in your tests, plus they are fast "
"and will automatically clean up after themselves."
msgstr ""

#: src/testing/mocking.md
msgid ""
"Similarly, many web frameworks allow you to start an in-process server which "
"binds to a random port on `localhost`. Always prefer this over mocking away "
"the framework since it helps you test your code in the real environment."
msgstr ""

#: src/testing/mocking.md
msgid ""
"Mockall is not part of the Rust Playground, so you need to run this example "
"in a local environment. Use `cargo add mockall` to quickly add Mockall to an "
"existing Cargo project."
msgstr ""

#: src/testing/mocking.md
msgid ""
"Mockall has a lot more functionality. In particular, you can set up "
"expectations which depend on the arguments passed. Here we use this to mock "
"a cat which becomes hungry 3 hours after the last time it was fed:"
msgstr ""

#: src/testing/mocking.md
msgid ""
"You can use `.times(n)` to limit the number of times a mock method can be "
"called to `n` --- the mock will automatically panic when dropped if this "
"isn't satisfied."
msgstr ""

#: src/testing/lints.md
msgid ""
"The Rust compiler produces fantastic error messages, as well as helpful "
"built-in lints. [Clippy](https://doc.rust-lang.org/clippy/) provides even "
"more lints, organized into groups that can be enabled per-project."
msgstr ""

#: src/testing/lints.md
msgid "\"X probably fits in a u16, right? {}\""
msgstr ""

#: src/testing/lints.md
msgid ""
"Run the code sample and examine the error message. There are also lints "
"visible here, but those will not be shown once the code compiles. Switch to "
"the Playground site to show those lints."
msgstr ""

#: src/testing/lints.md
msgid ""
"After resolving the lints, run `clippy` on the playground site to show "
"clippy warnings. Clippy has extensive documentation of its lints, and adds "
"new lints (including default-deny lints) all the time."
msgstr ""

#: src/testing/lints.md
msgid ""
"Note that errors or warnings with `help: ...` can be fixed with `cargo fix` "
"or via your editor."
msgstr ""

#: src/testing/exercise.md
msgid "Luhn Algorithm"
msgstr "Αλγόριθμος Luhn"

#: src/testing/exercise.md
#, fuzzy
msgid ""
"The [Luhn algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) is used "
"to validate credit card numbers. The algorithm takes a string as input and "
"does the following to validate the credit card number:"
msgstr ""
"Ο [αλγόριθμος Luhn](https://en.wikipedia.org/wiki/Luhn_algorithm) "
"χρησιμοποιείται για επικύρωση αριθμών πιστωτικών καρτών. Ο αλγόριθμος "
"παίρνει μια συμβολοσειρά ως είσοδο και κάνει το παρακάτω για να επικυρώσετε "
"τον αριθμό της πιστωτικής κάρτας:"

#: src/testing/exercise.md
msgid "Ignore all spaces. Reject number with less than two digits."
msgstr ""

#: src/testing/exercise.md
msgid ""
"Moving from **right to left**, double every second digit: for the number "
"`1234`, we double `3` and `1`. For the number `98765`, we double `6` and `8`."
msgstr ""

#: src/testing/exercise.md
msgid ""
"After doubling a digit, sum the digits if the result is greater than 9. So "
"doubling `7` becomes `14` which becomes `1 + 4 = 5`."
msgstr ""

#: src/testing/exercise.md
msgid "Sum all the undoubled and doubled digits."
msgstr ""

#: src/testing/exercise.md
msgid "The credit card number is valid if the sum ends with `0`."
msgstr ""

#: src/testing/exercise.md
msgid ""
"The provided code provides a buggy implementation of the luhn algorithm, "
"along with two basic unit tests that confirm that most the algorithm is "
"implemented correctly."
msgstr ""

#: src/testing/exercise.md
#, fuzzy
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and write additional "
"tests to uncover bugs in the provided implementation, fixing any bugs you "
"find."
msgstr ""
"Αντιγράψτε τον παρακάτω κώδικα στο <https://play.rust-lang.org/> και "
"συμπληρώστε τον κωδικό που λείπει λειτουργίες και μέθοδοι:"

#: src/testing/exercise.md src/testing/solution.md
msgid "\"4263 9826 4026 9299\""
msgstr ""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"4539 3195 0343 6467\""
msgstr ""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"7992 7398 713\""
msgstr ""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"4223 9826 4026 9299\""
msgstr ""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"4539 3195 0343 6476\""
msgstr ""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"8273 1232 7352 0569\""
msgstr ""

#: src/testing/solution.md
msgid "// This is the buggy version that appears in the problem.\n"
msgstr ""

#: src/testing/solution.md
msgid "// This is the solution and passes all of the tests below.\n"
msgstr ""

#: src/testing/solution.md
msgid "\"1234 5678 1234 5670\""
msgstr ""

#: src/testing/solution.md
msgid "\"Is {cc_number} a valid credit card number? {}\""
msgstr ""

#: src/testing/solution.md
msgid "\"yes\""
msgstr ""

#: src/testing/solution.md
msgid "\"no\""
msgstr ""

#: src/testing/solution.md
msgid "\"foo 0 0\""
msgstr ""

#: src/testing/solution.md
msgid "\" \""
msgstr ""

#: src/testing/solution.md
msgid "\"  \""
msgstr ""

#: src/testing/solution.md
msgid "\"    \""
msgstr ""

#: src/testing/solution.md
msgid "\"0\""
msgstr ""

#: src/testing/solution.md
msgid "\" 0 0 \""
msgstr ""

#: src/welcome-day-4-afternoon.md
msgid "[Error Handling](./error-handling.md) (45 minutes)"
msgstr ""

#: src/welcome-day-4-afternoon.md
msgid "[Unsafe Rust](./unsafe-rust.md) (1 hour and 5 minutes)"
msgstr ""

#: src/welcome-day-4-afternoon.md
msgid "Including 10 minute breaks, this session should take about 2 hours"
msgstr ""

#: src/error-handling.md
msgid "[Panics](./error-handling/panics.md) (3 minutes)"
msgstr ""

#: src/error-handling.md
msgid "[Try Operator](./error-handling/try.md) (5 minutes)"
msgstr ""

#: src/error-handling.md
msgid "[Try Conversions](./error-handling/try-conversions.md) (5 minutes)"
msgstr ""

#: src/error-handling.md
msgid "[Error Trait](./error-handling/error.md) (5 minutes)"
msgstr ""

#: src/error-handling.md
msgid ""
"[thiserror and anyhow](./error-handling/thiserror-and-anyhow.md) (5 minutes)"
msgstr ""

#: src/error-handling.md
msgid ""
"[Exercise: Rewriting with Result](./error-handling/exercise.md) (20 minutes)"
msgstr ""

#: src/error-handling/panics.md
msgid "Rust handles fatal errors with a \"panic\"."
msgstr ""

#: src/error-handling/panics.md
#, fuzzy
msgid "Rust will trigger a panic if a fatal error happens at runtime:"
msgstr ""
"Το Rust θα προκαλέσει πανικό εάν συμβεί ένα μοιραίο σφάλμα κατά τη διάρκεια "
"της εκτέλεσης:"

#: src/error-handling/panics.md
msgid "\"v[100]: {}\""
msgstr ""

#: src/error-handling/panics.md
#, fuzzy
msgid "Panics are for unrecoverable and unexpected errors."
msgstr "Οι πανικοί αφορούν μη αναστρέψιμα και απροσδόκητα σφάλματα."

#: src/error-handling/panics.md
#, fuzzy
msgid "Panics are symptoms of bugs in the program."
msgstr "Οι πανικοί είναι συμπτώματα σφαλμάτων στο πρόγραμμα."

#: src/error-handling/panics.md
msgid "Runtime failures like failed bounds checks can panic"
msgstr ""

#: src/error-handling/panics.md
msgid "Assertions (such as `assert!`) panic on failure"
msgstr ""

#: src/error-handling/panics.md
msgid "Purpose-specific panics can use the `panic!` macro."
msgstr ""

#: src/error-handling/panics.md
msgid ""
"A panic will \"unwind\" the stack, dropping values just as if the functions "
"had returned."
msgstr ""

#: src/error-handling/panics.md
#, fuzzy
msgid ""
"Use non-panicking APIs (such as `Vec::get`) if crashing is not acceptable."
msgstr ""
"Χρησιμοποιήστε API που δεν προκαλούν πανικό (όπως \"Vec::get\") εάν το "
"σφάλμα δεν είναι αποδεκτό."

#: src/error-handling/panics.md
#, fuzzy
msgid ""
"By default, a panic will cause the stack to unwind. The unwinding can be "
"caught:"
msgstr ""
"Από προεπιλογή, ένας πανικός θα προκαλέσει το ξετύλιγμα της στοίβας. Το "
"ξετύλιγμα μπορεί να πιαστεί:"

#: src/error-handling/panics.md
msgid "\"No problem here!\""
msgstr ""

#: src/error-handling/panics.md
msgid "\"{result:?}\""
msgstr ""

#: src/error-handling/panics.md
msgid "\"oh no!\""
msgstr ""

#: src/error-handling/panics.md
msgid ""
"Catching is unusual; do not attempt to implement exceptions with "
"`catch_unwind`!"
msgstr ""

#: src/error-handling/panics.md
#, fuzzy
msgid ""
"This can be useful in servers which should keep running even if a single "
"request crashes."
msgstr ""
"Αυτό μπορεί να είναι χρήσιμο σε διακομιστές που θα πρέπει να συνεχίσουν να "
"εκτελούνται ακόμα και αν είναι μόνοι κολλάει το αίτημα."

#: src/error-handling/panics.md
#, fuzzy
msgid "This does not work if `panic = 'abort'` is set in your `Cargo.toml`."
msgstr ""
"Αυτό δεν λειτουργεί εάν το \"panic = \"abort\" έχει οριστεί στο \"Cargo."
"toml\"."

#: src/error-handling/try.md
msgid ""
"Runtime errors like connection-refused or file-not-found are handled with "
"the `Result` type, but matching this type on every call can be cumbersome. "
"The try-operator `?` is used to return errors to the caller. It lets you "
"turn the common"
msgstr ""

#: src/error-handling/try.md
#, fuzzy
msgid "into the much simpler"
msgstr "στο πολύ πιο απλό"

#: src/error-handling/try.md
#, fuzzy
msgid "We can use this to simplify our error handling code:"
msgstr ""
"Μπορούμε να το χρησιμοποιήσουμε για να απλοποιήσουμε τον κωδικό παράδοσης "
"σφαλμάτων:"

#: src/error-handling/try.md
msgid "//fs::write(\"config.dat\", \"alice\").unwrap();\n"
msgstr ""

#: src/error-handling/try.md src/error-handling/try-conversions.md
#: src/error-handling/thiserror-and-anyhow.md
msgid "\"config.dat\""
msgstr ""

#: src/error-handling/try.md src/error-handling/try-conversions.md
msgid "\"username or error: {username:?}\""
msgstr ""

#: src/error-handling/try.md
msgid "Simplify the `read_username` function to use `?`."
msgstr ""

#: src/error-handling/try.md
#, fuzzy
msgid "The `username` variable can be either `Ok(string)` or `Err(error)`."
msgstr ""
"Η μεταβλητή \"username\" μπορεί να είναι είτε \"Ok(string)\" είτε "
"\"Err(error)\"."

#: src/error-handling/try.md
#, fuzzy
msgid ""
"Use the `fs::write` call to test out the different scenarios: no file, empty "
"file, file with username."
msgstr ""
"Χρησιμοποιήστε την κλήση `fs::write` για να δοκιμάσετε τα διαφορετικά "
"σενάρια: κανένα αρχείο, κενό αρχείο, αρχείο με όνομα χρήστη."

#: src/error-handling/try.md
msgid ""
"Note that `main` can return a `Result<(), E>` as long as it implements `std::"
"process:Termination`. In practice, this means that `E` implements `Debug`. "
"The executable will print the `Err` variant and return a nonzero exit status "
"on error."
msgstr ""

#: src/error-handling/try-conversions.md
#, fuzzy
msgid ""
"The effective expansion of `?` is a little more complicated than previously "
"indicated:"
msgstr ""
"Η αποτελεσματική επέκταση του «?» είναι λίγο πιο περίπλοκη από ό,τι "
"αναφέρθηκε προηγουμένως:"

#: src/error-handling/try-conversions.md
#, fuzzy
msgid "works the same as"
msgstr "λειτουργεί το ίδιο με"

#: src/error-handling/try-conversions.md
#, fuzzy
msgid ""
"The `From::from` call here means we attempt to convert the error type to the "
"type returned by the function. This makes it easy to encapsulate errors into "
"higher-level errors."
msgstr ""
"Η κλήση \"From::from\" εδώ σημαίνει ότι προσπαθούμε να μετατρέψουμε τον τύπο "
"σφάλματος στο τύπος που επιστρέφεται από τη συνάρτηση:"

#: src/error-handling/try-conversions.md
msgid "\"IO error: {e}\""
msgstr ""

#: src/error-handling/try-conversions.md
msgid "\"Found no username in {path}\""
msgstr ""

#: src/error-handling/try-conversions.md
#: src/error-handling/thiserror-and-anyhow.md
msgid "//fs::write(\"config.dat\", \"\").unwrap();\n"
msgstr ""

#: src/error-handling/try-conversions.md
msgid ""
"The `?` operator must return a value compatible with the return type of the "
"function. For `Result`, it means that the error types have to be compatible. "
"A function that returns `Result<T, ErrorOuter>` can only use `?` on a value "
"of type `Result<U, ErrorInner>` if `ErrorOuter` and `ErrorInner` are the "
"same type or if `ErrorOuter` implements `From<ErrorInner>`."
msgstr ""

#: src/error-handling/try-conversions.md
msgid ""
"A common alternative to a `From` implementation is `Result::map_err`, "
"especially when the conversion only happens in one place."
msgstr ""

#: src/error-handling/try-conversions.md
msgid ""
"There is no compatibility requirement for `Option`. A function returning "
"`Option<T>` can use the `?` operator on `Option<U>` for arbitrary `T` and "
"`U` types."
msgstr ""

#: src/error-handling/try-conversions.md
msgid ""
"A function that returns `Result` cannot use `?` on `Option` and vice versa. "
"However, `Option::ok_or` converts `Option` to `Result` whereas `Result::ok` "
"turns `Result` into `Option`."
msgstr ""

#: src/error-handling/error.md
msgid "Dynamic Error Types"
msgstr "Δυναμικοί τύποι σφαλμάτων"

#: src/error-handling/error.md
#, fuzzy
msgid ""
"Sometimes we want to allow any type of error to be returned without writing "
"our own enum covering all the different possibilities. The `std::error::"
"Error` trait makes it easy to create a trait object that can contain any "
"error."
msgstr ""
"Μερικές φορές θέλουμε να επιτρέψουμε την επιστροφή οποιουδήποτε τύπου "
"σφάλματος χωρίς να γράψουμε το δικό μας κάλυμμα enum όλες τις διαφορετικές "
"δυνατότητες. Το `std::error::Error` το καθιστά εύκολο."

#: src/error-handling/error.md
msgid "\"count.dat\""
msgstr ""

#: src/error-handling/error.md
msgid "\"1i3\""
msgstr ""

#: src/error-handling/error.md
msgid "\"Count: {count}\""
msgstr ""

#: src/error-handling/error.md
msgid "\"Error: {err}\""
msgstr ""

#: src/error-handling/error.md
msgid ""
"The `read_count` function can return `std::io::Error` (from file operations) "
"or `std::num::ParseIntError` (from `String::parse`)."
msgstr ""

#: src/error-handling/error.md
#, fuzzy
msgid ""
"Boxing errors saves on code, but gives up the ability to cleanly handle "
"different error cases differently in the program. As such it's generally not "
"a good idea to use `Box<dyn Error>` in the public API of a library, but it "
"can be a good option in a program where you just want to display the error "
"message somewhere."
msgstr ""
"Αυτό εξοικονομεί κώδικα, αλλά παραιτείται από τη δυνατότητα καθαρής "
"διαχείρισης διαφορετικών περιπτώσεων σφαλμάτων με διαφορετικό τρόπο το "
"πρόγραμμα. Ως εκ τούτου, γενικά δεν είναι καλή ιδέα να χρησιμοποιήσετε το "
"\"Box\n"
"\n"
"\" στο δημόσιο API ενός βιβλιοθήκη, αλλά μπορεί να είναι μια καλή επιλογή σε "
"ένα πρόγραμμα όπου θέλετε απλώς να εμφανίσετε το μήνυμα σφάλματος κάπου."

#: src/error-handling/error.md
msgid ""
"Make sure to implement the `std::error::Error` trait when defining a custom "
"error type so it can be boxed. But if you need to support the `no_std` "
"attribute, keep in mind that the `std::error::Error` trait is currently "
"compatible with `no_std` in [nightly](https://github.com/rust-lang/rust/"
"issues/103765) only."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
#, fuzzy
msgid ""
"The [`thiserror`](https://docs.rs/thiserror/) and [`anyhow`](https://docs.rs/"
"anyhow/) crates are widely used to simplify error handling."
msgstr ""
"Το κιβώτιο [thiserror](https://docs.rs/thiserror/) είναι ένας δημοφιλής "
"τρόπος δημιουργίας enum σφαλμάτων όπως κάναμε στην προηγούμενη σελίδα:"

#: src/error-handling/thiserror-and-anyhow.md
msgid ""
"`thiserror` is often used in libraries to create custom error types that "
"implement `From<T>`."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid ""
"`anyhow` is often used by applications to help with error handling in "
"functions, including adding contextual information to your errors."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid "\"Found no username in {0}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid "\"Failed to open {path}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid "\"Failed to read\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid "\"Username: {username}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid "\"Error: {err:?}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid "`thiserror`"
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid ""
"The `Error` derive macro is provided by `thiserror`, and has lots of useful "
"attributes to help define error types in a compact way."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid "The `std::error::Error` trait is derived automatically."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid "The message from `#[error]` is used to derive the `Display` trait."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
msgid "`anyhow`"
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md
#, fuzzy
msgid ""
"`anyhow::Error` is essentially a wrapper around `Box<dyn Error>`. As such "
"it's again generally not a good choice for the public API of a library, but "
"is widely used in applications."
msgstr ""
"Το \"anyhow::Error\" είναι ουσιαστικά ένα περιτύλιγμα γύρω από το \"Box"

#: src/error-handling/thiserror-and-anyhow.md
#, fuzzy
msgid "`anyhow::Result<V>` is a type alias for `Result<V, anyhow::Error>`."
msgstr ""
"Το `ούτως ή άλλως::Αποτέλεσμα<V>` είναι ένα ψευδώνυμο τύπου για το "
"\"Αποτέλεσμα\\<V, ούτως ή άλλως::Σφάλμα>\"."

#: src/error-handling/thiserror-and-anyhow.md
#, fuzzy
msgid ""
"Actual error type inside of it can be extracted for examination if necessary."
msgstr ""
"\". Ως τέτοιο και πάλι γενικά δεν είναι μια καλή επιλογή για το δημόσιο API "
"μιας βιβλιοθήκης, αλλά χρησιμοποιείται ευρέως σε εφαρμογές."

#: src/error-handling/thiserror-and-anyhow.md
#, fuzzy
msgid ""
"Functionality provided by `anyhow::Result<T>` may be familiar to Go "
"developers, as it provides similar usage patterns and ergonomics to `(T, "
"error)` from Go."
msgstr ""
"Ο πραγματικός τύπος σφάλματος στο εσωτερικό του μπορεί να εξαχθεί για "
"εξέταση εάν είναι απαραίτητο.\n"
"\n"
"Η λειτουργικότητα που παρέχεται από το \"anyhow::Result\n"
"\n"
"\" μπορεί να είναι οικεία στους προγραμματιστές της Go, καθώς παρέχει "
"παρόμοια μοτίβα χρήσης και εργονομία με το «(T, error)» από το Go."

#: src/error-handling/thiserror-and-anyhow.md
msgid ""
"`anyhow::Context` is a trait implemented for the standard `Result` and "
"`Option` types. `use anyhow::Context` is necessary to enable `.context()` "
"and `.with_context()` on those types."
msgstr ""

#: src/error-handling/exercise.md
msgid "Exercise: Rewriting with Result"
msgstr ""

#: src/error-handling/exercise.md
msgid ""
"The following implements a very simple parser for an expression language. "
"However, it handles errors by panicking. Rewrite it to instead use idiomatic "
"error handling and propagate errors to a return from `main`. Feel free to "
"use `thiserror` and `anyhow`."
msgstr ""

#: src/error-handling/exercise.md
msgid ""
"HINT: start by fixing error handling in the `parse` function. Once that is "
"working correctly, update `Tokenizer` to implement "
"`Iterator<Item=Result<Token, TokenizerError>>` and handle that in the parser."
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// An arithmetic operator.\n"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// A token in the expression language.\n"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// An expression in the expression language.\n"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// A reference to a variable.\n"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// A literal number.\n"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// A binary operation.\n"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "'z'"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "'_'"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "'+'"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "'-'"
msgstr ""

#: src/error-handling/exercise.md
msgid "\"Unexpected character {c}\""
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "\"Unexpected end of input\""
msgstr ""

#: src/error-handling/exercise.md
msgid "\"Invalid 32-bit integer'\""
msgstr ""

#: src/error-handling/exercise.md
msgid "\"Unexpected token {tok:?}\""
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "// Look ahead to parse a binary operation if present.\n"
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "\"10+foo+20-30\""
msgstr ""

#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "\"{expr:?}\""
msgstr ""

#: src/error-handling/solution.md
msgid "\"Unexpected character '{0}' in input\""
msgstr ""

#: src/error-handling/solution.md
msgid "\"Tokenizer error: {0}\""
msgstr ""

#: src/error-handling/solution.md
msgid "\"Unexpected token {0:?}\""
msgstr ""

#: src/error-handling/solution.md
msgid "\"Invalid number\""
msgstr ""

#: src/unsafe-rust.md
msgid "[Unsafe](./unsafe-rust/unsafe.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md
msgid ""
"[Dereferencing Raw Pointers](./unsafe-rust/dereferencing.md) (10 minutes)"
msgstr ""

#: src/unsafe-rust.md
msgid "[Mutable Static Variables](./unsafe-rust/mutable-static.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md
msgid "[Unions](./unsafe-rust/unions.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md
msgid "[Unsafe Functions](./unsafe-rust/unsafe-functions.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md
msgid "[Unsafe Traits](./unsafe-rust/unsafe-traits.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md
msgid "[Exercise: FFI Wrapper](./unsafe-rust/exercise.md) (30 minutes)"
msgstr ""

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid "The Rust language has two parts:"
msgstr "Η γλώσσα Rust έχει δύο μέρη:"

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid "**Safe Rust:** memory safe, no undefined behavior possible."
msgstr ""
"**Safe Rust:** ασφαλής μνήμη, δεν είναι δυνατή η απροσδιόριστη συμπεριφορά."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid ""
"**Unsafe Rust:** can trigger undefined behavior if preconditions are "
"violated."
msgstr ""
"**Μη ασφαλής σκουριά:** μπορεί να προκαλέσει απροσδιόριστη συμπεριφορά εάν "
"παραβιάζονται προϋποθέσεις."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid ""
"We saw mostly safe Rust in this course, but it's important to know what "
"Unsafe Rust is."
msgstr ""
"Θα δούμε κυρίως ασφαλή Rust σε αυτό το μάθημα, αλλά είναι σημαντικό να το "
"γνωρίζουμε τι είναι το Unsafe Rust."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid ""
"Unsafe code is usually small and isolated, and its correctness should be "
"carefully documented. It is usually wrapped in a safe abstraction layer."
msgstr ""
"Ο μη ασφαλής κώδικας είναι συνήθως μικρός και απομονωμένος και η ορθότητά "
"του θα πρέπει να γίνεται προσεκτικά τεκμηριωμένη. Συνήθως είναι τυλιγμένο σε "
"ένα ασφαλές στρώμα αφαίρεσης."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid "Unsafe Rust gives you access to five new capabilities:"
msgstr "Το Unsafe Rust σάς δίνει πρόσβαση σε πέντε νέες δυνατότητες:"

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid "Dereference raw pointers."
msgstr "Αναφορά ακατέργαστων δεικτών."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid "Access or modify mutable static variables."
msgstr "Πρόσβαση ή τροποποίηση μεταβλητών στατικών μεταβλητών."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid "Access `union` fields."
msgstr "Πρόσβαση στα πεδία «ένωση»."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid "Call `unsafe` functions, including `extern` functions."
msgstr ""
"Καλέστε «μη ασφαλείς» συναρτήσεις, συμπεριλαμβανομένων των «εξωτερικών» "
"συναρτήσεων."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid "Implement `unsafe` traits."
msgstr "Εφαρμόστε «μη ασφαλή» χαρακτηριστικά."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid ""
"We will briefly cover unsafe capabilities next. For full details, please see "
"[Chapter 19.1 in the Rust Book](https://doc.rust-lang.org/book/ch19-01-"
"unsafe-rust.html) and the [Rustonomicon](https://doc.rust-lang.org/nomicon/)."
msgstr ""
"Θα καλύψουμε εν συντομία τις μη ασφαλείς δυνατότητες στη συνέχεια. Για "
"πλήρεις λεπτομέρειες, δείτε [Κεφάλαιο 19.1 στο βιβλίο της σκουριάς](https://"
"doc.rust-lang.org/book/ch19-01-unsafe-rust.html) και το [Rustonomicon]"
"(https://doc.rust-lang.org/nomicon/)."

#: src/unsafe-rust/unsafe.md
#, fuzzy
msgid ""
"Unsafe Rust does not mean the code is incorrect. It means that developers "
"have turned off some compiler safety features and have to write correct code "
"by themselves. It means the compiler no longer enforces Rust's memory-safety "
"rules."
msgstr ""
"Το Unsafe Rust δεν σημαίνει ότι ο κωδικός είναι εσφαλμένος. Σημαίνει ότι οι "
"προγραμματιστές έχουν απενεργοποίησε τις δυνατότητες ασφαλείας του "
"μεταγλωττιστή και πρέπει να γράψει τον σωστό κώδικα από τους εαυτούς τους. "
"Σημαίνει ότι ο μεταγλωττιστής δεν επιβάλλει πλέον τους κανόνες ασφαλείας της "
"μνήμης του Rust."

#: src/unsafe-rust/dereferencing.md
#, fuzzy
msgid "Creating pointers is safe, but dereferencing them requires `unsafe`:"
msgstr ""
"Η δημιουργία δεικτών είναι ασφαλής, αλλά η αποσύνδεσή τους απαιτεί \"μη "
"ασφαλή\":"

#: src/unsafe-rust/dereferencing.md
msgid "\"careful!\""
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid ""
"// Safe because r1 and r2 were obtained from references and so are\n"
"    // guaranteed to be non-null and properly aligned, the objects "
"underlying\n"
"    // the references from which they were obtained are live throughout the\n"
"    // whole unsafe block, and they are not accessed either through the\n"
"    // references or concurrently through any other pointers.\n"
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid "\"r1 is: {}\""
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid "\"uhoh\""
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid "\"r2 is: {}\""
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid ""
"// NOT SAFE. DO NOT DO THIS.\n"
"    /*\n"
"    let r3: &String = unsafe { &*r1 };\n"
"    drop(s);\n"
"    println!(\"r3 is: {}\", *r3);\n"
"    */"
msgstr ""

#: src/unsafe-rust/dereferencing.md
#, fuzzy
msgid ""
"It is good practice (and required by the Android Rust style guide) to write "
"a comment for each `unsafe` block explaining how the code inside it "
"satisfies the safety requirements of the unsafe operations it is doing."
msgstr ""
"Είναι καλή πρακτική (και απαιτείται από τον οδηγό στυλ Android Rust) να "
"γράψετε ένα σχόλιο για το καθένα Μπλοκ \"μη ασφαλής\" που εξηγεί πώς ο "
"κωδικός μέσα σε αυτό ικανοποιεί τις απαιτήσεις ασφαλείας του μη ασφαλούς "
"λειτουργίες που κάνει."

#: src/unsafe-rust/dereferencing.md
#, fuzzy
msgid ""
"In the case of pointer dereferences, this means that the pointers must be "
"[_valid_](https://doc.rust-lang.org/std/ptr/index.html#safety), i.e.:"
msgstr ""
"Στην περίπτωση των αποαναφορών δείκτη, αυτό σημαίνει ότι οι δείκτες πρέπει "
"να είναι [_valid_](https://doc.rust-lang.org/std/ptr/index.html#safety), π."
"χ.:"

#: src/unsafe-rust/dereferencing.md
#, fuzzy
msgid "The pointer must be non-null."
msgstr "Ο δείκτης δεν πρέπει να είναι μηδενικός."

#: src/unsafe-rust/dereferencing.md
#, fuzzy
msgid ""
"The pointer must be _dereferenceable_ (within the bounds of a single "
"allocated object)."
msgstr ""
"Ο δείκτης πρέπει να είναι _dereferenceable_ (εντός των ορίων ενός "
"μεμονωμένου αντικειμένου)."

#: src/unsafe-rust/dereferencing.md
#, fuzzy
msgid "The object must not have been deallocated."
msgstr "Το αντικείμενο δεν πρέπει να έχει εκχωρηθεί."

#: src/unsafe-rust/dereferencing.md
#, fuzzy
msgid "There must not be concurrent accesses to the same location."
msgstr "Δεν πρέπει να υπάρχουν ταυτόχρονες προσβάσεις στην ίδια τοποθεσία."

#: src/unsafe-rust/dereferencing.md
#, fuzzy
msgid ""
"If the pointer was obtained by casting a reference, the underlying object "
"must be live and no reference may be used to access the memory."
msgstr ""
"Εάν ο δείκτης λήφθηκε με τη μετάδοση μιας αναφοράς, το υποκείμενο "
"αντικείμενο πρέπει να είναι ζωντανό και όχι μπορεί να χρησιμοποιηθεί αναφορά "
"για πρόσβαση στη μνήμη."

#: src/unsafe-rust/dereferencing.md
#, fuzzy
msgid "In most cases the pointer must also be properly aligned."
msgstr ""
"Στις περισσότερες περιπτώσεις ο δείκτης πρέπει επίσης να είναι σωστά "
"ευθυγραμμισμένος."

#: src/unsafe-rust/dereferencing.md
msgid ""
"The \"NOT SAFE\" section gives an example of a common kind of UB bug: `*r1` "
"has the `'static` lifetime, so `r3` has type `&'static String`, and thus "
"outlives `s`. Creating a reference from a pointer requires _great care_."
msgstr ""

#: src/unsafe-rust/mutable-static.md
#, fuzzy
msgid "It is safe to read an immutable static variable:"
msgstr "Είναι ασφαλές να διαβάσετε μια αμετάβλητη στατική μεταβλητή:"

#: src/unsafe-rust/mutable-static.md
#, fuzzy
msgid "\"Hello, world!\""
msgstr "Γειά σου Κόσμε!"

#: src/unsafe-rust/mutable-static.md
msgid "\"HELLO_WORLD: {HELLO_WORLD}\""
msgstr ""

#: src/unsafe-rust/mutable-static.md
#, fuzzy
msgid ""
"However, since data races can occur, it is unsafe to read and write mutable "
"static variables:"
msgstr ""
"Ωστόσο, δεδομένου ότι μπορεί να προκύψουν αγώνες δεδομένων, δεν είναι "
"ασφαλές να διαβάζετε και να γράφετε μεταβλητά στατικές μεταβλητές:"

#: src/unsafe-rust/mutable-static.md
msgid "\"COUNTER: {COUNTER}\""
msgstr ""

#: src/unsafe-rust/mutable-static.md
msgid ""
"The program here is safe because it is single-threaded. However, the Rust "
"compiler is conservative and will assume the worst. Try removing the "
"`unsafe` and see how the compiler explains that it is undefined behavior to "
"mutate a static from multiple threads."
msgstr ""

#: src/unsafe-rust/mutable-static.md
#, fuzzy
msgid ""
"Using a mutable static is generally a bad idea, but there are some cases "
"where it might make sense in low-level `no_std` code, such as implementing a "
"heap allocator or working with some C APIs."
msgstr ""
"Η χρήση ενός μεταβλητού στατικού είναι γενικά κακή ιδέα, αλλά υπάρχουν "
"ορισμένες περιπτώσεις όπου μπορεί να έχει νόημα σε κώδικα «no_std» χαμηλού "
"επιπέδου, όπως η εφαρμογή ενός κατανεμητή σωρού ή η εργασία με ορισμένα C "
"API."

#: src/unsafe-rust/unions.md
#, fuzzy
msgid "Unions are like enums, but you need to track the active field yourself:"
msgstr ""
"Τα συνδικάτα είναι σαν τα enums, αλλά πρέπει να παρακολουθείτε μόνοι σας το "
"ενεργό πεδίο:"

#: src/unsafe-rust/unions.md
msgid "\"int: {}\""
msgstr ""

#: src/unsafe-rust/unions.md
msgid "\"bool: {}\""
msgstr ""

#: src/unsafe-rust/unions.md
#, fuzzy
msgid "// Undefined behavior!\n"
msgstr "Χωρίς απροσδιόριστη συμπεριφορά κατά το χρόνο εκτέλεσης:"

#: src/unsafe-rust/unions.md
#, fuzzy
msgid ""
"Unions are very rarely needed in Rust as you can usually use an enum. They "
"are occasionally needed for interacting with C library APIs."
msgstr ""
"Οι ενώσεις χρειάζονται πολύ σπάνια στο Rust καθώς συνήθως μπορείτε να "
"χρησιμοποιήσετε ένα enum. Περιστασιακά χρειάζονται για αλληλεπίδραση με API "
"βιβλιοθήκης C."

#: src/unsafe-rust/unions.md
#, fuzzy
msgid ""
"If you just want to reinterpret bytes as a different type, you probably want "
"[`std::mem::transmute`](https://doc.rust-lang.org/stable/std/mem/fn."
"transmute.html) or a safe wrapper such as the [`zerocopy`](https://crates.io/"
"crates/zerocopy) crate."
msgstr ""
"Εάν θέλετε απλώς να ερμηνεύσετε ξανά τα byte ως διαφορετικού τύπου, μάλλον "
"θέλετε [`std::mem::transmute`](https://doc.rust-lang.org/stable/std/mem/fn."
"transmute.html) ή χρηματοκιβώτιο περιτύλιγμα όπως το κιβώτιο [`zerocopy`]"
"(https://crates.io/crates/zerocopy)."

#: src/unsafe-rust/unsafe-functions.md
msgid "Calling Unsafe Functions"
msgstr "Κλήση μη ασφαλών συναρτήσεων"

#: src/unsafe-rust/unsafe-functions.md
#, fuzzy
msgid ""
"A function or method can be marked `unsafe` if it has extra preconditions "
"you must uphold to avoid undefined behaviour:"
msgstr ""
"Μια συνάρτηση ή μια μέθοδος μπορεί να επισημανθεί ως «μη ασφαλής» εάν έχει "
"επιπλέον προϋποθέσεις πρέπει να τηρεί για την αποφυγή απροσδιόριστης "
"συμπεριφοράς:"

#: src/unsafe-rust/unsafe-functions.md src/unsafe-rust/exercise.md
#: src/unsafe-rust/solution.md src/android/interoperability/with-c.md
#: src/android/interoperability/with-c/rust.md
#: src/android/interoperability/cpp/cpp-bridge.md
#: src/exercises/chromium/build-rules.md src/bare-metal/aps/inline-assembly.md
#: src/bare-metal/aps/better-uart/using.md src/bare-metal/aps/logging/using.md
#: src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"C\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "\"🗻∈🌏\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid ""
"// Safe because the indices are in the correct order, within the bounds of\n"
"    // the string slice, and lie on UTF-8 sequence boundaries.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "\"emoji: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "\"char count: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
#, fuzzy
msgid "// Undefined behavior if abs misbehaves.\n"
msgstr "Χωρίς απροσδιόριστη συμπεριφορά κατά το χρόνο εκτέλεσης:"

#: src/unsafe-rust/unsafe-functions.md
msgid "\"Absolute value of -3 according to C: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid ""
"// Not upholding the UTF-8 encoding requirement breaks memory safety!\n"
"    // println!(\"emoji: {}\", unsafe { emojis.get_unchecked(0..3) });\n"
"    // println!(\"char count: {}\", count_chars(unsafe {\n"
"    // emojis.get_unchecked(0..3) }));\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "Writing Unsafe Functions"
msgstr "Υλοποίηση μη ασφαλών συναρτήσεων"

#: src/unsafe-rust/unsafe-functions.md
#, fuzzy
msgid ""
"You can mark your own functions as `unsafe` if they require particular "
"conditions to avoid undefined behaviour."
msgstr ""
"Μπορείτε να επισημάνετε τις δικές σας λειτουργίες ως \"μη ασφαλείς\" εάν "
"απαιτούν συγκεκριμένες συνθήκες για να αποφευχθούν απροσδιόριστες η "
"ΣΥΜΠΕΡΙΦΟΡΑ."

#: src/unsafe-rust/unsafe-functions.md
msgid ""
"/// Swaps the values pointed to by the given pointers.\n"
"///\n"
"/// # Safety\n"
"///\n"
"/// The pointers must be valid and properly aligned.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "// Safe because ...\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "\"a = {}, b = {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
#, fuzzy
msgid ""
"`get_unchecked`, like most `_unchecked` functions, is unsafe, because it can "
"create UB if the range is incorrect. `abs` is incorrect for a different "
"reason: it is an external function (FFI). Calling external functions is "
"usually only a problem when those functions do things with pointers which "
"might violate Rust's memory model, but in general any C function might have "
"undefined behaviour under any arbitrary circumstances."
msgstr ""
"Αυτό είναι συνήθως ένα πρόβλημα μόνο για εξωτερικές συναρτήσεις που κάνουν "
"πράγματα με δείκτες που μπορεί παραβιάζουν το μοντέλο μνήμης του Rust, αλλά "
"γενικά οποιαδήποτε συνάρτηση C μπορεί να έχει απροσδιόριστη συμπεριφορά κάτω "
"από οποιαδήποτε αυθαίρετες περιστάσεις."

#: src/unsafe-rust/unsafe-functions.md
msgid ""
"The `\"C\"` in this example is the ABI; [other ABIs are available too]"
"(https://doc.rust-lang.org/reference/items/external-blocks.html)."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
#, fuzzy
msgid ""
"We wouldn't actually use pointers for a `swap` function - it can be done "
"safely with references."
msgstr ""
"Στην πραγματικότητα δεν θα χρησιμοποιούσαμε δείκτες για αυτό, επειδή μπορεί "
"να γίνει με ασφάλεια με αναφορές."

#: src/unsafe-rust/unsafe-functions.md
#, fuzzy
msgid ""
"Note that unsafe code is allowed within an unsafe function without an "
"`unsafe` block. We can prohibit this with `#[deny(unsafe_op_in_unsafe_fn)]`. "
"Try adding it and see what happens. This will likely change in a future Rust "
"edition."
msgstr ""
"Σημειώστε ότι ο μη ασφαλής κωδικός επιτρέπεται σε μια μη ασφαλή συνάρτηση "
"χωρίς μπλοκ \"μη ασφαλής\". Μπορούμε απαγορεύστε αυτό με "
"\"#\\[deny(unsafe_op_in_unsafe_fn)\\]\". Δοκιμάστε να το προσθέσετε και "
"δείτε τι θα συμβεί."

#: src/unsafe-rust/unsafe-traits.md
msgid "Implementing Unsafe Traits"
msgstr "Υλοποίηση μη ασφαλών χαρακτηριστικών"

#: src/unsafe-rust/unsafe-traits.md
#, fuzzy
msgid ""
"Like with functions, you can mark a trait as `unsafe` if the implementation "
"must guarantee particular conditions to avoid undefined behaviour."
msgstr ""
"Όπως και με τις συναρτήσεις, μπορείτε να επισημάνετε ένα χαρακτηριστικό ως "
"\"μη ασφαλές\", εάν η υλοποίηση πρέπει να είναι εγγυημένη συγκεκριμένες "
"συνθήκες για την αποφυγή απροσδιόριστης συμπεριφοράς."

#: src/unsafe-rust/unsafe-traits.md
#, fuzzy
msgid ""
"For example, the `zerocopy` crate has an unsafe trait that looks [something "
"like this](https://docs.rs/zerocopy/latest/zerocopy/trait.AsBytes.html):"
msgstr ""
"Για παράδειγμα, το κιβώτιο «zerocopy» έχει ένα μη ασφαλές χαρακτηριστικό που "
"φαίνεται [κάτι σαν αυτό](https://docs.rs/zerocopy/latest/zerocopy/trait."
"AsBytes.html):"

#: src/unsafe-rust/unsafe-traits.md
msgid ""
"/// ...\n"
"/// # Safety\n"
"/// The type must have a defined representation and no padding.\n"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
msgid "// Safe because u32 has a defined representation and no padding.\n"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
#, fuzzy
msgid ""
"There should be a `# Safety` section on the Rustdoc for the trait explaining "
"the requirements for the trait to be safely implemented."
msgstr ""
"Θα πρέπει να υπάρχει μια ενότητα «# Ασφάλεια» στο Rustdoc για το "
"χαρακτηριστικό που εξηγεί τις απαιτήσεις για το χαρακτηριστικό που πρέπει να "
"εφαρμοστεί με ασφάλεια."

#: src/unsafe-rust/unsafe-traits.md
#, fuzzy
msgid ""
"The actual safety section for `AsBytes` is rather longer and more "
"complicated."
msgstr ""
"Η πραγματική ενότητα ασφάλειας για τα \"AsBytes\" είναι μάλλον μεγαλύτερη "
"και πιο περίπλοκη."

#: src/unsafe-rust/unsafe-traits.md
#, fuzzy
msgid "The built-in `Send` and `Sync` traits are unsafe."
msgstr ""
"Τα ενσωματωμένα χαρακτηριστικά «Αποστολή» και «Συγχρονισμός» δεν είναι "
"ασφαλή."

#: src/unsafe-rust/exercise.md
msgid "Safe FFI Wrapper"
msgstr "Ασφαλές περιτύλιγμα FFI"

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid ""
"Rust has great support for calling functions through a _foreign function "
"interface_ (FFI). We will use this to build a safe wrapper for the `libc` "
"functions you would use from C to read the names of files in a directory."
msgstr ""
"Το Rust έχει μεγάλη υποστήριξη για την κλήση συναρτήσεων μέσω μιας "
"συνάρτησης _foreign διεπαφή_ (FFI). Θα το χρησιμοποιήσουμε για να "
"δημιουργήσουμε ένα ασφαλές περιτύλιγμα για το `libc` συναρτήσεις που θα "
"χρησιμοποιούσατε από το C για να διαβάσετε τα ονόματα αρχείων ενός καταλόγου."

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid "You will want to consult the manual pages:"
msgstr "Θα θελήσετε να συμβουλευτείτε τις σελίδες του εγχειριδίου:"

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid "[`opendir(3)`](https://man7.org/linux/man-pages/man3/opendir.3.html)"
msgstr "[`opendir(3)`](https://man7.org/linux/man-pages/man3/opendir.3.html)"

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid "[`readdir(3)`](https://man7.org/linux/man-pages/man3/readdir.3.html)"
msgstr "[`readdir(3)`](https://man7.org/linux/man-pages/man3/readdir.3.html)"

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid "[`closedir(3)`](https://man7.org/linux/man-pages/man3/closedir.3.html)"
msgstr "[`closedir(3)`](https://man7.org/linux/man-pages/man3/closedir.3.html)"

#: src/unsafe-rust/exercise.md
msgid ""
"You will also want to browse the [`std::ffi`](https://doc.rust-lang.org/std/"
"ffi/) module. There you find a number of string types which you need for the "
"exercise:"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "Encoding"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "Use"
msgstr ""

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid ""
"[`str`](https://doc.rust-lang.org/std/primitive.str.html) and [`String`]"
"(https://doc.rust-lang.org/std/string/struct.String.html)"
msgstr "«Read» και «Write» που χρησιμοποιούνται για IO,"

#: src/unsafe-rust/exercise.md
msgid "UTF-8"
msgstr ""

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid "Text processing in Rust"
msgstr "Μετακινημένες συμβολοσειρές στη Rust"

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid ""
"[`CStr`](https://doc.rust-lang.org/std/ffi/struct.CStr.html) and [`CString`]"
"(https://doc.rust-lang.org/std/ffi/struct.CString.html)"
msgstr "«Read» και «Write» που χρησιμοποιούνται για IO,"

#: src/unsafe-rust/exercise.md
msgid "NUL-terminated"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "Communicating with C functions"
msgstr ""

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid ""
"[`OsStr`](https://doc.rust-lang.org/std/ffi/struct.OsStr.html) and "
"[`OsString`](https://doc.rust-lang.org/std/ffi/struct.OsString.html)"
msgstr "«Read» και «Write» που χρησιμοποιούνται για IO,"

#: src/unsafe-rust/exercise.md
msgid "OS-specific"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "Communicating with the OS"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "You will convert between all these types:"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`&str` to `CString`: you need to allocate space for a trailing `\\0` "
"character,"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "`CString` to `*const i8`: you need a pointer to call C functions,"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`*const i8` to `&CStr`: you need something which can find the trailing `\\0` "
"character,"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`&CStr` to `&[u8]`: a slice of bytes is the universal interface for \"some "
"unknown data\","
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`&[u8]` to `&OsStr`: `&OsStr` is a step towards `OsString`, use [`OsStrExt`]"
"(https://doc.rust-lang.org/std/os/unix/ffi/trait.OsStrExt.html) to create it,"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`&OsStr` to `OsString`: you need to clone the data in `&OsStr` to be able to "
"return it and call `readdir` again."
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"The [Nomicon](https://doc.rust-lang.org/nomicon/ffi.html) also has a very "
"useful chapter about FFI."
msgstr ""

#: src/unsafe-rust/exercise.md
#, fuzzy
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and fill in the missing "
"functions and methods:"
msgstr ""
"Αντιγράψτε τον παρακάτω κώδικα στο <https://play.rust-lang.org/> και "
"συμπληρώστε τον κωδικό που λείπει λειτουργίες και μέθοδοι:"

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "\"macos\""
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "// Opaque type. See https://doc.rust-lang.org/nomicon/ffi.html.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid ""
"// Layout according to the Linux man page for readdir(3), where ino_t and\n"
"    // off_t are resolved according to the definitions in\n"
"    // /usr/include/x86_64-linux-gnu/{sys/types.h, bits/typesizes.h}.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "// Layout according to the macOS man page for dir(5).\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "\"x86_64\""
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid ""
"// See https://github.com/rust-lang/libc/issues/414 and the section on\n"
"        // _DARWIN_FEATURE_64_BIT_INODE in the macOS man page for stat(2).\n"
"        //\n"
"        // \"Platforms that existed before these updates were available\" "
"refers\n"
"        // to macOS (as opposed to iOS / wearOS / etc.) on Intel and "
"PowerPC.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "\"readdir$INODE64\""
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid ""
"// Call opendir and return a Ok value if that worked,\n"
"        // otherwise return Err with a message.\n"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "// Keep calling readdir until we get a NULL pointer back.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "// Call closedir as needed.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
#: src/android/interoperability/with-c/rust.md
msgid "\".\""
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "\"files: {:#?}\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"Invalid path: {err}\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "// SAFETY: path.as_ptr() cannot be NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"Could not open {:?}\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid ""
"// Keep calling readdir until we get a NULL pointer back.\n"
"        // SAFETY: self.dir is never NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid "// We have reached the end of the directory.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid ""
"// SAFETY: dirent is not NULL and dirent.d_name is NUL\n"
"        // terminated.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid "// SAFETY: self.dir is not NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"Could not close {:?}\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"no-such-directory\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"Non UTF-8 character in path\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"..\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"foo.txt\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"The Foo Diaries\\n\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"bar.png\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"<PNG>\\n\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"crab.rs\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"//! Crab\\n\""
msgstr ""

#: src/android.md
msgid "Welcome to Rust in Android"
msgstr ""

#: src/android.md
#, fuzzy
msgid ""
"Rust is supported for system software on Android. This means that you can "
"write new services, libraries, drivers or even firmware in Rust (or improve "
"existing code as needed)."
msgstr ""
"Το Rust υποστηρίζεται για ανάπτυξη εγγενούς πλατφόρμας στο Android. Αυτό "
"σημαίνει ότι μπορείτε να γράψετε νέες υπηρεσίες λειτουργικού συστήματος στο "
"Rust, καθώς και να επεκτείνετε υπάρχουσες υπηρεσίες."

#: src/android.md
#, fuzzy
msgid ""
"We will attempt to call Rust from one of your own projects today. So try to "
"find a little corner of your code base where we can move some lines of code "
"to Rust. The fewer dependencies and \"exotic\" types the better. Something "
"that parses some raw bytes would be ideal."
msgstr ""
"Θα προσπαθήσουμε να καλέσουμε τον Rust από ένα από τα δικά σας έργα σήμερα. "
"Προσπάθησε λοιπόν βρείτε μια μικρή γωνία της βάσης του κώδικα όπου μπορούμε "
"να μετακινήσουμε ορισμένες γραμμές κώδικα Σκουριά. Όσο λιγότερες εξαρτήσεις "
"και «εξωτικοί» τύποι τόσο το καλύτερο. Κάτι που η ανάλυση ορισμένων "
"ακατέργαστων byte θα ήταν ιδανική."

#: src/android.md
msgid ""
"The speaker may mention any of the following given the increased use of Rust "
"in Android:"
msgstr ""

#: src/android.md
msgid ""
"Service example: [DNS over HTTP](https://security.googleblog.com/2022/07/dns-"
"over-http3-in-android.html)"
msgstr ""

#: src/android.md
msgid ""
"Libraries: [Rutabaga Virtual Graphics Interface](https://crosvm.dev/book/"
"appendix/rutabaga_gfx.html)"
msgstr ""

#: src/android.md
msgid ""
"Kernel Drivers: [Binder](https://lore.kernel.org/rust-for-linux/20231101-"
"rust-binder-v1-0-08ba9197f637@google.com/)"
msgstr ""

#: src/android.md
msgid ""
"Firmware: [pKVM firmware](https://security.googleblog.com/2023/10/bare-metal-"
"rust-in-android.html)"
msgstr ""

#: src/android/setup.md
#, fuzzy
msgid ""
"We will be using a Cuttlefish Android Virtual Device to test our code. Make "
"sure you have access to one or create a new one with:"
msgstr ""
"Θα χρησιμοποιήσουμε μια εικονική συσκευή Android για να δοκιμάσουμε τον "
"κώδικά μας. Βεβαιωθείτε ότι έχετε πρόσβαση σε ένα ή δημιουργήστε ένα νέο με:"

#: src/android/setup.md
#, fuzzy
msgid ""
"Please see the [Android Developer Codelab](https://source.android.com/docs/"
"setup/start) for details."
msgstr ""
"Ανατρέξτε στο [Android Developer Codelab](https://source.android.com/docs/"
"setup/start) για λεπτομέρειες."

#: src/android/setup.md
msgid ""
"Cuttlefish is a reference Android device designed to work on generic Linux "
"desktops. MacOS support is also planned."
msgstr ""

#: src/android/setup.md
msgid ""
"The Cuttlefish system image maintains high fidelity to real devices, and is "
"the ideal emulator to run many Rust use cases."
msgstr ""

#: src/android/build-rules.md
#, fuzzy
msgid "The Android build system (Soong) supports Rust via a number of modules:"
msgstr ""
"Το σύστημα κατασκευής Android (Soong) υποστηρίζει το Rust μέσω μιας σειράς "
"λειτουργικών μονάδων:"

#: src/android/build-rules.md
#, fuzzy
msgid "Module Type"
msgstr ""
"\\| Τύπος ενότητας | Περιγραφή | "
"\\|------------------------------------------------- "
"-------------------------------------------------- ---------------------| "
"\\| `rust_binary` | Παράγει ένα Rust δυαδικό. | \\| `rust_library` | Παράγει "
"μια βιβλιοθήκη Rust και παρέχει παραλλαγές «rlib» και «dylib». | \\| "
"`rust_ffi` | Παράγει μια βιβλιοθήκη Rust C που μπορεί να χρησιμοποιηθεί από "
"μονάδες «cc» και παρέχει τόσο στατικές όσο και κοινόχρηστες παραλλαγές. | "
"\\| `rust_proc_macro` | Παράγει μια «proc-macro» βιβλιοθήκη Rust. Αυτά είναι "
"ανάλογα με τα πρόσθετα μεταγλωττιστή. | \\| «δοκιμή_σκουριάς» | Παράγει ένα "
"δυαδικό σύστημα δοκιμής Rust που χρησιμοποιεί την τυπική ζώνη δοκιμής Rust. "
"| \\| `rust_fuzz` | Παράγει ένα Rust fuzz δυαδικό μόχλευσης «libfuzzer». | "
"\\| `rust_protobuf` | Δημιουργεί πηγή και παράγει μια βιβλιοθήκη Rust που "
"παρέχει μια διεπαφή για ένα συγκεκριμένο protobuf. | \\| `rust_bindgen` | "
"Δημιουργεί πηγή και παράγει μια βιβλιοθήκη Rust που περιέχει δεσμεύσεις Rust "
"σε βιβλιοθήκες C. |"

#: src/android/build-rules.md
msgid "Description"
msgstr ""

#: src/android/build-rules.md
msgid "`rust_binary`"
msgstr ""

#: src/android/build-rules.md
msgid "Produces a Rust binary."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_library`"
msgstr ""

#: src/android/build-rules.md
msgid "Produces a Rust library, and provides both `rlib` and `dylib` variants."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_ffi`"
msgstr ""

#: src/android/build-rules.md
msgid ""
"Produces a Rust C library usable by `cc` modules, and provides both static "
"and shared variants."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_proc_macro`"
msgstr ""

#: src/android/build-rules.md
msgid ""
"Produces a `proc-macro` Rust library. These are analogous to compiler "
"plugins."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_test`"
msgstr ""

#: src/android/build-rules.md
msgid "Produces a Rust test binary that uses the standard Rust test harness."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_fuzz`"
msgstr ""

#: src/android/build-rules.md
msgid "Produces a Rust fuzz binary leveraging `libfuzzer`."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_protobuf`"
msgstr ""

#: src/android/build-rules.md
msgid ""
"Generates source and produces a Rust library that provides an interface for "
"a particular protobuf."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_bindgen`"
msgstr ""

#: src/android/build-rules.md
msgid ""
"Generates source and produces a Rust library containing Rust bindings to C "
"libraries."
msgstr ""

#: src/android/build-rules.md
#, fuzzy
msgid "We will look at `rust_binary` and `rust_library` next."
msgstr "Στη συνέχεια θα δούμε τα «rust_binary» και «rust_library»."

#: src/android/build-rules.md
msgid "Additional items speaker may mention:"
msgstr ""

#: src/android/build-rules.md
msgid ""
"Cargo is not optimized for multi-language repos, and also downloads packages "
"from the internet."
msgstr ""

#: src/android/build-rules.md
msgid ""
"For compliance and performance, Android must have crates in-tree. It must "
"also interop with C/C++/Java code. Soong fills that gap."
msgstr ""

#: src/android/build-rules.md
msgid ""
"Soong has many similarities to Bazel, which is the open-source variant of "
"Blaze (used in google3)."
msgstr ""

#: src/android/build-rules.md
msgid ""
"There is a plan to transition [Android](https://source.android.com/docs/"
"setup/build/bazel/introduction), [ChromeOS](https://chromium.googlesource."
"com/chromiumos/bazel/), and [Fuchsia](https://source.android.com/docs/setup/"
"build/bazel/introduction) to Bazel."
msgstr ""

#: src/android/build-rules.md
msgid "Learning Bazel-like build rules is useful for all Rust OS developers."
msgstr ""

#: src/android/build-rules.md
msgid "Fun fact: Data from Star Trek is a Soong-type Android."
msgstr ""

#: src/android/build-rules/binary.md
#, fuzzy
msgid "Rust Binaries"
msgstr "Rust Binaries"

#: src/android/build-rules/binary.md
#, fuzzy
msgid ""
"Let us start with a simple application. At the root of an AOSP checkout, "
"create the following files:"
msgstr ""
"Ας ξεκινήσουμε με μια απλή εφαρμογή. Στη ρίζα ενός ταμείου AOSP, "
"δημιουργήστε τα ακόλουθα αρχεία:"

#: src/android/build-rules/binary.md src/android/build-rules/library.md
#, fuzzy
msgid "_hello_rust/Android.bp_:"
msgstr "_hello_rust/Android.bp_:"

#: src/android/build-rules/binary.md
msgid "\"hello_rust\""
msgstr ""

#: src/android/build-rules/binary.md src/android/build-rules/library.md
#: src/android/logging.md
#, fuzzy
msgid "\"src/main.rs\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/build-rules/binary.md src/android/build-rules/library.md
#, fuzzy
msgid "_hello_rust/src/main.rs_:"
msgstr "_hello_rust/src/main.rs_:"

#: src/android/build-rules/binary.md src/android/build-rules/library.md
msgid "//! Rust demo.\n"
msgstr ""

#: src/android/build-rules/binary.md src/android/build-rules/library.md
msgid "/// Prints a greeting to standard output.\n"
msgstr ""

#: src/android/build-rules/binary.md src/exercises/chromium/build-rules.md
msgid "\"Hello from Rust!\""
msgstr ""

#: src/android/build-rules/binary.md
#, fuzzy
msgid "You can now build, push, and run the binary:"
msgstr ""
"Τώρα μπορείτε να δημιουργήσετε, να προωθήσετε και να εκτελέσετε το δυαδικό:"

#: src/android/build-rules/binary.md
msgid ""
"```shell\n"
"m hello_rust\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust\" /data/local/tmp\n"
"adb shell /data/local/tmp/hello_rust\n"
"```"
msgstr ""

#: src/android/build-rules/library.md
#, fuzzy
msgid "Rust Libraries"
msgstr "Βιβλιοθήκες Rust"

#: src/android/build-rules/library.md
#, fuzzy
msgid "You use `rust_library` to create a new Rust library for Android."
msgstr ""
"Χρησιμοποιείτε το \"rust_library\" για να δημιουργήσετε μια νέα βιβλιοθήκη "
"Rust για Android."

#: src/android/build-rules/library.md
#, fuzzy
msgid "Here we declare a dependency on two libraries:"
msgstr "Εδώ δηλώνουμε μια εξάρτηση από δύο βιβλιοθήκες:"

#: src/android/build-rules/library.md
#, fuzzy
msgid "`libgreeting`, which we define below,"
msgstr "'libgreeting', που ορίζουμε παρακάτω,"

#: src/android/build-rules/library.md
#, fuzzy
msgid ""
"`libtextwrap`, which is a crate already vendored in [`external/rust/crates/`]"
"(https://cs.android.com/android/platform/superproject/+/master:external/rust/"
"crates/)."
msgstr ""
"«libtextwrap», το οποίο είναι ένα κιβώτιο που έχει ήδη πωληθεί \\[`εξωτερικά/"
"σκουριά/κιβώτια/`\\]\\[κιβώτια\\]."

#: src/android/build-rules/library.md
msgid "\"hello_rust_with_dep\""
msgstr ""

#: src/android/build-rules/library.md
msgid "\"libgreetings\""
msgstr ""

#: src/android/build-rules/library.md
msgid "\"libtextwrap\""
msgstr ""

#: src/android/build-rules/library.md
msgid "// Need this to avoid dynamic link error.\n"
msgstr ""

#: src/android/build-rules/library.md
msgid "\"greetings\""
msgstr ""

#: src/android/build-rules/library.md src/android/aidl/implementation.md
#: src/android/interoperability/java.md
#, fuzzy
msgid "\"src/lib.rs\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/build-rules/library.md
#, fuzzy
msgid "_hello_rust/src/lib.rs_:"
msgstr "_hello_rust/src/lib.rs_:"

#: src/android/build-rules/library.md
msgid "//! Greeting library.\n"
msgstr ""

#: src/android/build-rules/library.md
msgid "/// Greet `name`.\n"
msgstr ""

#: src/android/build-rules/library.md
msgid "\"Hello {name}, it is very nice to meet you!\""
msgstr ""

#: src/android/build-rules/library.md
#, fuzzy
msgid "You build, push, and run the binary like before:"
msgstr "Δημιουργείτε, πιέζετε και τρέχετε το δυαδικό αρχείο όπως πριν:"

#: src/android/build-rules/library.md
msgid ""
"```shell\n"
"m hello_rust_with_dep\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_with_dep\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/hello_rust_with_dep\n"
"```"
msgstr ""

#: src/android/aidl.md
#, fuzzy
msgid ""
"The [Android Interface Definition Language (AIDL)](https://developer.android."
"com/guide/components/aidl) is supported in Rust:"
msgstr ""
"Η [Android Interface Definition Language (AIDL)](https://developer.android."
"com/guide/components/aidl) υποστηρίζεται στο Rust:"

#: src/android/aidl.md
#, fuzzy
msgid "Rust code can call existing AIDL servers,"
msgstr "Ο κώδικας σκουριάς μπορεί να καλέσει υπάρχοντες διακομιστές AIDL,"

#: src/android/aidl.md
#, fuzzy
msgid "You can create new AIDL servers in Rust."
msgstr "Μπορείτε να δημιουργήσετε νέους διακομιστές AIDL στο Rust."

#: src/android/aidl/interface.md
#, fuzzy
msgid "AIDL Interfaces"
msgstr "Διεπαφές AIDL"

#: src/android/aidl/interface.md
#, fuzzy
msgid "You declare the API of your service using an AIDL interface:"
msgstr "Δηλώνετε το API της υπηρεσίας σας χρησιμοποιώντας μια διεπαφή AIDL:"

#: src/android/aidl/interface.md
#, fuzzy
msgid ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"
msgstr ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"

#: src/android/aidl/interface.md src/android/aidl/changing.md
msgid "/** Birthday service interface. */"
msgstr ""

#: src/android/aidl/interface.md src/android/aidl/changing.md
msgid "/** Generate a Happy Birthday message. */"
msgstr ""

#: src/android/aidl/interface.md
#, fuzzy
msgid "_birthday_service/aidl/Android.bp_:"
msgstr "_birthday_service/aidl/Android.bp_:"

#: src/android/aidl/interface.md
msgid "\"com.example.birthdayservice\""
msgstr ""

#: src/android/aidl/interface.md
#, fuzzy
msgid "\"com/example/birthdayservice/*.aidl\""
msgstr ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"

#: src/android/aidl/interface.md
msgid "// Rust is not enabled by default\n"
msgstr ""

#: src/android/aidl/interface.md
#, fuzzy
msgid ""
"Add `vendor_available: true` if your AIDL file is used by a binary in the "
"vendor partition."
msgstr ""
"Προσθέστε το \"vendor_available: true\" εάν το αρχείο AIDL σας "
"χρησιμοποιείται από ένα δυαδικό αρχείο στον προμηθευτή χώρισμα."

#: src/android/aidl/implementation.md
#, fuzzy
msgid "Service Implementation"
msgstr "Υλοποίηση υπηρεσίας"

#: src/android/aidl/implementation.md
#, fuzzy
msgid "We can now implement the AIDL service:"
msgstr "Μπορούμε τώρα να εφαρμόσουμε την υπηρεσία AIDL:"

#: src/android/aidl/implementation.md
#, fuzzy
msgid "_birthday_service/src/lib.rs_:"
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/aidl/implementation.md
msgid "//! Implementation of the `IBirthdayService` AIDL interface.\n"
msgstr ""

#: src/android/aidl/implementation.md
#, fuzzy
msgid "/// The `IBirthdayService` implementation.\n"
msgstr "Υλοποίηση υπηρεσίας"

#: src/android/aidl/implementation.md
msgid "\"Happy Birthday {name}, congratulations with the {years} years!\""
msgstr ""

#: src/android/aidl/implementation.md src/android/aidl/server.md
#: src/android/aidl/client.md
#, fuzzy
msgid "_birthday_service/Android.bp_:"
msgstr "_birthday_service/Android.bp_:"

#: src/android/aidl/implementation.md src/android/aidl/server.md
#, fuzzy
msgid "\"libbirthdayservice\""
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/aidl/implementation.md src/android/aidl/server.md
#: src/android/aidl/client.md
#, fuzzy
msgid "\"birthdayservice\""
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/aidl/implementation.md src/android/aidl/server.md
#: src/android/aidl/client.md
msgid "\"com.example.birthdayservice-rust\""
msgstr ""

#: src/android/aidl/implementation.md src/android/aidl/server.md
#: src/android/aidl/client.md
msgid "\"libbinder_rs\""
msgstr ""

#: src/android/aidl/server.md
#, fuzzy
msgid "AIDL Server"
msgstr "Διακομιστής AIDL"

#: src/android/aidl/server.md
#, fuzzy
msgid "Finally, we can create a server which exposes the service:"
msgstr ""
"Τέλος, μπορούμε να δημιουργήσουμε έναν διακομιστή που εκθέτει την υπηρεσία:"

#: src/android/aidl/server.md
#, fuzzy
msgid "_birthday_service/src/server.rs_:"
msgstr "_birthday_service/src/server.rs_:"

#: src/android/aidl/server.md src/android/aidl/client.md
msgid "//! Birthday service.\n"
msgstr ""

#: src/android/aidl/server.md
msgid "/// Entry point for birthday service.\n"
msgstr ""

#: src/android/aidl/server.md
msgid "\"Failed to register service\""
msgstr ""

#: src/android/aidl/server.md
#, fuzzy
msgid "\"birthday_server\""
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/aidl/server.md
#, fuzzy
msgid "\"src/server.rs\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/aidl/server.md src/android/aidl/client.md
msgid "// To avoid dynamic link error.\n"
msgstr ""

#: src/android/aidl/deploy.md
#, fuzzy
msgid "We can now build, push, and start the service:"
msgstr ""
"Μπορούμε τώρα να δημιουργήσουμε, να προωθήσουμε και να ξεκινήσουμε την "
"υπηρεσία:"

#: src/android/aidl/deploy.md
msgid ""
"```shell\n"
"m birthday_server\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_server\" /data/local/"
"tmp\n"
"adb root\n"
"adb shell /data/local/tmp/birthday_server\n"
"```"
msgstr ""

#: src/android/aidl/deploy.md
#, fuzzy
msgid "In another terminal, check that the service runs:"
msgstr "Σε άλλο τερματικό, ελέγξτε ότι η υπηρεσία εκτελείται:"

#: src/android/aidl/deploy.md
#, fuzzy
msgid "You can also call the service with `service call`:"
msgstr "Μπορείτε επίσης να καλέσετε την υπηρεσία με «κλήση υπηρεσίας»:"

#: src/android/aidl/client.md
#, fuzzy
msgid "AIDL Client"
msgstr "Πελάτης AIDL"

#: src/android/aidl/client.md
#, fuzzy
msgid "Finally, we can create a Rust client for our new service."
msgstr ""
"Τέλος, μπορούμε να δημιουργήσουμε έναν πελάτη Rust για τη νέα μας υπηρεσία."

#: src/android/aidl/client.md
#, fuzzy
msgid "_birthday_service/src/client.rs_:"
msgstr "_birthday_service/src/client.rs_:"

#: src/android/aidl/client.md
msgid "/// Connect to the BirthdayService.\n"
msgstr ""

#: src/android/aidl/client.md
msgid "/// Call the birthday service.\n"
msgstr ""

#: src/android/aidl/client.md
msgid "\"Failed to connect to BirthdayService\""
msgstr ""

#: src/android/aidl/client.md
msgid "\"{msg}\""
msgstr ""

#: src/android/aidl/client.md
#, fuzzy
msgid "\"birthday_client\""
msgstr "_birthday_service/src/client.rs_:"

#: src/android/aidl/client.md
#, fuzzy
msgid "\"src/client.rs\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/aidl/client.md
#, fuzzy
msgid "Notice that the client does not depend on `libbirthdayservice`."
msgstr "Σημειώστε ότι ο πελάτης δεν εξαρτάται από το \"libbirthdayservice\"."

#: src/android/aidl/client.md
#, fuzzy
msgid "Build, push, and run the client on your device:"
msgstr "Δημιουργήστε, προωθήστε και εκτελέστε τον πελάτη στη συσκευή σας:"

#: src/android/aidl/client.md
msgid ""
"```shell\n"
"m birthday_client\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_client\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/birthday_client Charlie 60\n"
"```"
msgstr ""

#: src/android/aidl/changing.md
#, fuzzy
msgid ""
"Let us extend the API with more functionality: we want to let clients "
"specify a list of lines for the birthday card:"
msgstr ""
"Ας επεκτείνουμε το API με περισσότερη λειτουργικότητα: θέλουμε να "
"επιτρέψουμε στους πελάτες να καθορίσουν α λίστα γραμμών για την κάρτα "
"γενεθλίων:"

#: src/android/logging.md
#, fuzzy
msgid ""
"You should use the `log` crate to automatically log to `logcat` (on-device) "
"or `stdout` (on-host):"
msgstr ""
"Θα πρέπει να χρησιμοποιήσετε το κιβώτιο «log» για αυτόματη σύνδεση στο "
"«logcat» (σε συσκευή) ή `stdout` (στον οικοδεσπότη):"

#: src/android/logging.md
#, fuzzy
msgid "_hello_rust_logs/Android.bp_:"
msgstr "_hello_rust_logs/Android.bp_:"

#: src/android/logging.md
#, fuzzy
msgid "\"hello_rust_logs\""
msgstr "_hello_rust_logs/Android.bp_:"

#: src/android/logging.md
msgid "\"liblog_rust\""
msgstr ""

#: src/android/logging.md
msgid "\"liblogger\""
msgstr ""

#: src/android/logging.md
#, fuzzy
msgid "_hello_rust_logs/src/main.rs_:"
msgstr "_hello_rust_logs/src/main.rs_:"

#: src/android/logging.md
msgid "//! Rust logging demo.\n"
msgstr ""

#: src/android/logging.md
msgid "/// Logs a greeting.\n"
msgstr ""

#: src/android/logging.md
msgid "\"rust\""
msgstr ""

#: src/android/logging.md
msgid "\"Starting program.\""
msgstr ""

#: src/android/logging.md
msgid "\"Things are going fine.\""
msgstr ""

#: src/android/logging.md
msgid "\"Something went wrong!\""
msgstr ""

#: src/android/logging.md src/android/interoperability/with-c/bindgen.md
#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid "Build, push, and run the binary on your device:"
msgstr "Δημιουργήστε, σπρώξτε και εκτελέστε το δυαδικό στη συσκευή σας:"

#: src/android/logging.md
msgid ""
"```shell\n"
"m hello_rust_logs\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_logs\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/hello_rust_logs\n"
"```"
msgstr ""

#: src/android/logging.md
#, fuzzy
msgid "The logs show up in `adb logcat`:"
msgstr "Τα αρχεία καταγραφής εμφανίζονται στο `adb logcat`:"

#: src/android/interoperability.md
#, fuzzy
msgid ""
"Rust has excellent support for interoperability with other languages. This "
"means that you can:"
msgstr ""
"Το Rust έχει εξαιρετική υποστήριξη για διαλειτουργικότητα με άλλες γλώσσες. "
"Αυτό σημαίνει ότι μπορείτε να:"

#: src/android/interoperability.md
#, fuzzy
msgid "Call Rust functions from other languages."
msgstr "Καλέστε τις λειτουργίες Rust από άλλες γλώσσες."

#: src/android/interoperability.md
#, fuzzy
msgid "Call functions written in other languages from Rust."
msgstr "Κλήση συναρτήσεων γραμμένων σε άλλες γλώσσες από το Rust."

#: src/android/interoperability.md
#, fuzzy
msgid ""
"When you call functions in a foreign language we say that you're using a "
"_foreign function interface_, also known as FFI."
msgstr ""
"Όταν καλείτε συναρτήσεις σε μια ξένη γλώσσα, λέμε ότι χρησιμοποιείτε a _ξένη "
"διεπαφή λειτουργίας_, επίσης γνωστή ως FFI."

#: src/android/interoperability/with-c.md
#, fuzzy
msgid "Interoperability with C"
msgstr "Διαλειτουργικότητα με C"

#: src/android/interoperability/with-c.md
#, fuzzy
msgid ""
"Rust has full support for linking object files with a C calling convention. "
"Similarly, you can export Rust functions and call them from C."
msgstr ""
"Το Rust έχει πλήρη υποστήριξη για τη σύνδεση αρχείων αντικειμένων με μια "
"σύμβαση κλήσης C. Ομοίως, μπορείτε να εξάγετε συναρτήσεις Rust και να τις "
"καλέσετε από το C."

#: src/android/interoperability/with-c.md
#, fuzzy
msgid "You can do it by hand if you want:"
msgstr "Μπορείτε να το κάνετε με το χέρι αν θέλετε:"

#: src/android/interoperability/with-c.md
msgid "\"{x}, {abs_x}\""
msgstr ""

#: src/android/interoperability/with-c.md
#, fuzzy
msgid ""
"We already saw this in the [Safe FFI Wrapper exercise](../../exercises/day-3/"
"safe-ffi-wrapper.md)."
msgstr ""
"Το είδαμε ήδη στο [Safe FFI Wrapper άσκηση](../../exercises/day-3/safe-ffi-"
"wrapper.md)."

#: src/android/interoperability/with-c.md
#, fuzzy
msgid ""
"This assumes full knowledge of the target platform. Not recommended for "
"production."
msgstr ""
"Αυτό προϋποθέτει πλήρη γνώση της πλατφόρμας-στόχου. Δεν συνιστάται για "
"παραγωγή."

#: src/android/interoperability/with-c.md
#, fuzzy
msgid "We will look at better options next."
msgstr "Θα εξετάσουμε καλύτερες επιλογές στη συνέχεια."

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "Using Bindgen"
msgstr "Χρήση Bindgen"

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid ""
"The [bindgen](https://rust-lang.github.io/rust-bindgen/introduction.html) "
"tool can auto-generate bindings from a C header file."
msgstr ""
"Το εργαλείο [bindgen](https://rust-lang.github.io/rust-bindgen/introduction."
"html) μπορεί να δημιουργήσει αυτόματα δεσμεύσεις από ένα αρχείο κεφαλίδας C."

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "First create a small C library:"
msgstr "Πρώτα δημιουργήστε μια μικρή βιβλιοθήκη C:"

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "_interoperability/bindgen/libbirthday.h_:"
msgstr "_interoperability/bindgen/libbirthday.h_:"

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "_interoperability/bindgen/libbirthday.c_:"
msgstr "_interoperability/bindgen/libbirthday.c_:"

#: src/android/interoperability/with-c/bindgen.md
msgid "<stdio.h>"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday.h\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"+--------------\\n\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"| Happy Birthday %s!\\n\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"| Congratulations with the %i years!\\n\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "Add this to your `Android.bp` file:"
msgstr "Προσθέστε αυτό στο αρχείο σας «Android.bp»:"

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "_interoperability/bindgen/Android.bp_:"
msgstr "_interoperability/bindgen/Android.bp_:"

#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday.c\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid ""
"Create a wrapper header file for the library (not strictly needed in this "
"example):"
msgstr ""
"Δημιουργήστε ένα αρχείο κεφαλίδας περιτυλίγματος για τη βιβλιοθήκη (δεν "
"απαιτείται αυστηρά σε αυτό παράδειγμα):"

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "_interoperability/bindgen/libbirthday_wrapper.h_:"
msgstr "_interoperability/bindgen/libbirthday_wrapper.h_:"

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "You can now auto-generate the bindings:"
msgstr "Τώρα μπορείτε να δημιουργήσετε αυτόματα τις συνδέσεις:"

#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday_bindgen\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"birthday_bindgen\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday_wrapper.h\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"bindings\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "Finally, we can use the bindings in our Rust program:"
msgstr "Τέλος, μπορούμε να χρησιμοποιήσουμε τις συνδέσεις στο πρόγραμμα Rust:"

#: src/android/interoperability/with-c/bindgen.md
msgid "\"print_birthday_card\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "\"main.rs\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "_interoperability/bindgen/main.rs_:"
msgstr "_interoperability/bindgen/main.rs_:"

#: src/android/interoperability/with-c/bindgen.md
msgid "//! Bindgen demo.\n"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "// SAFETY: `print_card` is safe to call with a valid `card` pointer.\n"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid ""
"```shell\n"
"m print_birthday_card\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/print_birthday_card\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/print_birthday_card\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
#, fuzzy
msgid "Finally, we can run auto-generated tests to ensure the bindings work:"
msgstr ""
"Τέλος, μπορούμε να εκτελέσουμε δοκιμές που δημιουργούνται αυτόματα για να "
"διασφαλίσουμε ότι οι δεσμεύσεις λειτουργούν:"

#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday_bindgen_test\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\":libbirthday_bindgen\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"general-tests\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"none\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "// Generated file, skip linting\n"
msgstr ""

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid "Calling Rust"
msgstr "Calling Rust"

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid "Exporting Rust functions and types to C is easy:"
msgstr "Η εξαγωγή λειτουργιών και τύπων Rust στο C είναι εύκολη:"

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid "_interoperability/rust/libanalyze/analyze.rs_"
msgstr "_interoperability/rust/libanalyze/analyze.rs_"

#: src/android/interoperability/with-c/rust.md
msgid "//! Rust FFI demo.\n"
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid "/// Analyze the numbers.\n"
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid "\"x ({x}) is smallest!\""
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid "\"y ({y}) is probably larger than x ({x})\""
msgstr ""

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid "_interoperability/rust/libanalyze/analyze.h_"
msgstr "_interoperability/rust/libanalyze/analyze.h_"

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid "_interoperability/rust/libanalyze/Android.bp_"
msgstr "_interoperability/rust/libanalyze/Android.bp_"

#: src/android/interoperability/with-c/rust.md
msgid "\"libanalyze_ffi\""
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid "\"analyze_ffi\""
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid "\"analyze.rs\""
msgstr ""

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid "We can now call this from a C binary:"
msgstr "Μπορούμε τώρα να το ονομάσουμε αυτό από ένα δυαδικό C:"

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid "_interoperability/rust/analyze/main.c_"
msgstr "_interoperability/rust/analyze/main.c_"

#: src/android/interoperability/with-c/rust.md
msgid "\"analyze.h\""
msgstr ""

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid "_interoperability/rust/analyze/Android.bp_"
msgstr "_interoperability/rust/analyze/Android.bp_"

#: src/android/interoperability/with-c/rust.md
msgid "\"analyze_numbers\""
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid "\"main.c\""
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid ""
"```shell\n"
"m analyze_numbers\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/analyze_numbers\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/analyze_numbers\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid ""
"`#[no_mangle]` disables Rust's usual name mangling, so the exported symbol "
"will just be the name of the function. You can also use `#[export_name = "
"\"some_name\"]` to specify whatever name you want."
msgstr ""
"Το \"#\\[no_mangle\\]\" απενεργοποιεί τη συνήθη παραποίηση ονόματος του "
"Rust, επομένως το σύμβολο που θα εξαχθεί θα είναι απλώς το όνομα του η "
"λειτουργία. Μπορείτε επίσης να χρησιμοποιήσετε το `#[export_name = "
"\"some_name\"]` για να καθορίσετε όποιο όνομα θέλετε."

#: src/android/interoperability/cpp.md
#, fuzzy
msgid ""
"The [CXX crate](https://cxx.rs/) makes it possible to do safe "
"interoperability between Rust and C++."
msgstr ""
"Το [CXX crate](https://cxx.rs/) καθιστά δυνατή την ασφαλή διαλειτουργικότητα "
"μεταξύ του Rust και C++."

#: src/android/interoperability/cpp.md
#, fuzzy
msgid "The overall approach looks like this:"
msgstr "Η συνολική προσέγγιση μοιάζει με αυτό:"

#: src/android/interoperability/cpp/bridge.md
msgid ""
"CXX relies on a description of the function signatures that will be exposed "
"from each language to the other. You provide this description using extern "
"blocks in a Rust module annotated with the `#[cxx::bridge]` attribute macro."
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid "\"org::blobstore\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid "// Shared structs with fields visible to both languages.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/generated-cpp.md
msgid "// Rust types and signatures exposed to C++.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/rust-bridge.md
#: src/android/interoperability/cpp/generated-cpp.md
#: src/android/interoperability/cpp/rust-result.md
#: src/chromium/interoperability-with-cpp/example-bindings.md
#: src/chromium/interoperability-with-cpp/error-handling-qr.md
#: src/chromium/interoperability-with-cpp/error-handling-png.md
#, fuzzy
msgid "\"Rust\""
msgstr "Γιατί Rust;"

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/cpp-bridge.md
msgid "// C++ types and signatures exposed to Rust.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/cpp-bridge.md
#: src/android/interoperability/cpp/cpp-exception.md
#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "\"C++\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/cpp-bridge.md
msgid "\"include/blobstore.h\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid "The bridge is generally declared in an `ffi` module within your crate."
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid ""
"From the declarations made in the bridge module, CXX will generate matching "
"Rust and C++ type/function definitions in order to expose those items to "
"both languages."
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid ""
"To view the generated Rust code, use [cargo-expand](https://github.com/"
"dtolnay/cargo-expand) to view the expanded proc macro. For most of the "
"examples you would use `cargo expand ::ffi` to expand just the `ffi` module "
"(though this doesn't apply for Android projects)."
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid "To view the generated C++ code, look in `target/cxxbridge`."
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
msgid "Rust Bridge Declarations"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
msgid "// Opaque type\n"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
msgid "// Method on `MyType`\n"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
#, fuzzy
msgid "// Free function\n"
msgstr "Συναρτήσεις"

#: src/android/interoperability/cpp/rust-bridge.md
msgid ""
"Items declared in the `extern \"Rust\"` reference items that are in scope in "
"the parent module."
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
msgid ""
"The CXX code generator uses your `extern \"Rust\"` section(s) to produce a C+"
"+ header file containing the corresponding C++ declarations. The generated "
"header has the same path as the Rust source file containing the bridge, "
"except with a .rs.h file extension."
msgstr ""

#: src/android/interoperability/cpp/generated-cpp.md
msgid "Results in (roughly) the following C++:"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid "C++ Bridge Declarations"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid "Results in (roughly) the following Rust:"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid "\"org$blobstore$cxxbridge1$new_blobstore_client\""
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid "\"org$blobstore$cxxbridge1$BlobstoreClient$put\""
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid ""
"The programmer does not need to promise that the signatures they have typed "
"in are accurate. CXX performs static assertions that the signatures exactly "
"correspond with what is declared in C++."
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid ""
"`unsafe extern` blocks allow you to declare C++ functions that are safe to "
"call from Rust."
msgstr ""

#: src/android/interoperability/cpp/shared-types.md
msgid "// A=1, J=11, Q=12, K=13\n"
msgstr ""

#: src/android/interoperability/cpp/shared-types.md
msgid "Only C-like (unit) enums are supported."
msgstr ""

#: src/android/interoperability/cpp/shared-types.md
msgid ""
"A limited number of traits are supported for `#[derive()]` on shared types. "
"Corresponding functionality is also generated for the C++ code, e.g. if you "
"derive `Hash` also generates an implementation of `std::hash` for the "
"corresponding C++ type."
msgstr ""

#: src/android/interoperability/cpp/shared-enums.md
#, fuzzy
msgid "Generated Rust:"
msgstr "Μη ασφαλής Rust"

#: src/android/interoperability/cpp/shared-enums.md
msgid "Generated C++:"
msgstr ""

#: src/android/interoperability/cpp/shared-enums.md
msgid ""
"On the Rust side, the code generated for shared enums is actually a struct "
"wrapping a numeric value. This is because it is not UB in C++ for an enum "
"class to hold a value different from all of the listed variants, and our "
"Rust representation needs to have the same behavior."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid "\"fallible1 requires depth > 0\""
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid "\"Success!\""
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid ""
"Rust functions that return `Result` are translated to exceptions on the C++ "
"side."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid ""
"The exception thrown will always be of type `rust::Error`, which primarily "
"exposes a way to get the error message string. The error message will come "
"from the error type's `Display` impl."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid ""
"A panic unwinding from Rust to C++ will always cause the process to "
"immediately terminate."
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md
msgid "\"example/include/example.h\""
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md
msgid "\"Error: {}\""
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md
msgid ""
"C++ functions declared to return a `Result` will catch any thrown exception "
"on the C++ side and return it as an `Err` value to the calling Rust function."
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md
msgid ""
"If an exception is thrown from an extern \"C++\" function that is not "
"declared by the CXX bridge to return `Result`, the program calls C++'s `std::"
"terminate`. The behavior is equivalent to the same exception being thrown "
"through a `noexcept` C++ function."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "Rust Type"
msgstr "Σκουριά από Παράδειγμα"

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "C++ Type"
msgstr "Παράδειγμα C++"

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`rust::String`"
msgstr "Συμβολοσειρές"

#: src/android/interoperability/cpp/type-mapping.md
msgid "`&str`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`rust::Str`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`CxxString`"
msgstr "Συμβολοσειρές"

#: src/android/interoperability/cpp/type-mapping.md
msgid "`std::string`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`&[T]`/`&mut [T]`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`rust::Slice`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`rust::Box<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`UniquePtr<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`std::unique_ptr<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`Vec<T>`"
msgstr "«Vec»."

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`rust::Vec<T>`"
msgstr "`mpsc::Δέκτης<T>`"

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`CxxVector<T>`"
msgstr "`Κελλί<T>`"

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`std::vector<T>`"
msgstr "`mpsc::Δέκτης<T>`"

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"These types can be used in the fields of shared structs and the arguments "
"and returns of extern functions."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"Note that Rust's `String` does not map directly to `std::string`. There are "
"a few reasons for this:"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"`std::string` does not uphold the UTF-8 invariant that `String` requires."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"The two types have different layouts in memory and so can't be passed "
"directly between languages."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"`std::string` requires move constructors that don't match Rust's move "
"semantics, so a `std::string` can't be passed by value to Rust."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
#: src/android/interoperability/cpp/android-cpp-genrules.md
#: src/android/interoperability/cpp/android-build-rust.md
#, fuzzy
msgid "Building in Android"
msgstr "Rust Binaries"

#: src/android/interoperability/cpp/android-build-cpp.md
msgid ""
"Create a `cc_library_static` to build the C++ library, including the CXX "
"generated header and source file."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
#: src/android/interoperability/cpp/android-build-rust.md
msgid "\"libcxx_test_cpp\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid "\"cxx_test.cpp\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid "\"cxx-bridge-header\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"libcxx_test_bridge_header\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"libcxx_test_bridge_code\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid ""
"Point out that `libcxx_test_bridge_header` and `libcxx_test_bridge_code` are "
"the dependencies for the CXX-generated C++ bindings. We'll show how these "
"are setup on the next slide."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid ""
"Note that you also need to depend on the `cxx-bridge-header` library in "
"order to pull in common CXX definitions."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid ""
"Full docs for using CXX in Android can be found in [the Android docs]"
"(https://source.android.com/docs/setup/build/rust/building-rust-modules/"
"android-rust-patterns#rust-cpp-interop-using-cxx). You may want to share "
"that link with the class so that students know where they can find these "
"instructions again in the future."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid ""
"Create two genrules: One to generate the CXX header, and one to generate the "
"CXX source file. These are then used as inputs to the `cc_library_static`."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid ""
"// Generate a C++ header containing the C++ bindings\n"
"// to the Rust exported functions in lib.rs.\n"
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"cxxbridge\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"$(location cxxbridge) $(in) --header > $(out)\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
#: src/android/interoperability/cpp/android-build-rust.md
msgid "\"lib.rs\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"lib.rs.h\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "// Generate the C++ code that Rust calls into.\n"
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"$(location cxxbridge) $(in) > $(out)\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"lib.rs.cc\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid ""
"The `cxxbridge` tool is a standalone tool that generates the C++ side of the "
"bridge module. It is included in Android and available as a Soong tool."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid ""
"By convention, if your Rust source file is `lib.rs` your header file will be "
"named `lib.rs.h` and your source file will be named `lib.rs.cc`. This naming "
"convention isn't enforced, though."
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md
msgid ""
"Create a `rust_binary` that depends on `libcxx` and your `cc_library_static`."
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md
msgid "\"cxx_test\""
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md
msgid "\"libcxx\""
msgstr ""

#: src/android/interoperability/java.md
#, fuzzy
msgid "Interoperability with Java"
msgstr "Διαλειτουργικότητα με Java"

#: src/android/interoperability/java.md
#, fuzzy
msgid ""
"Java can load shared objects via [Java Native Interface (JNI)](https://en."
"wikipedia.org/wiki/Java_Native_Interface). The [`jni` crate](https://docs.rs/"
"jni/) allows you to create a compatible library."
msgstr ""
"Η Java μπορεί να φορτώσει κοινόχρηστα αντικείμενα μέσω του [Java Native "
"Interface (JNI)](https://en.wikipedia.org/wiki/Java_Native_Interface). Το "
"[`jni` crate](https://docs.rs/jni/) σας επιτρέπει να δημιουργήσετε μια "
"συμβατή βιβλιοθήκη."

#: src/android/interoperability/java.md
#, fuzzy
msgid "First, we create a Rust function to export to Java:"
msgstr "Αρχικά, δημιουργούμε μια συνάρτηση Rust για εξαγωγή σε Java:"

#: src/android/interoperability/java.md
#, fuzzy
msgid "_interoperability/java/src/lib.rs_:"
msgstr "_interoperability/java/src/lib.rs_:"

#: src/android/interoperability/java.md
msgid "//! Rust <-> Java FFI demo.\n"
msgstr ""

#: src/android/interoperability/java.md
msgid "/// HelloWorld::hello method implementation.\n"
msgstr ""

#: src/android/interoperability/java.md
msgid "\"system\""
msgstr ""

#: src/android/interoperability/java.md
msgid "\"Hello, {input}!\""
msgstr ""

#: src/android/interoperability/java.md
#, fuzzy
msgid "_interoperability/java/Android.bp_:"
msgstr "_interoperability/java/Android.bp_:"

#: src/android/interoperability/java.md
msgid "\"libhello_jni\""
msgstr ""

#: src/android/interoperability/java.md
msgid "\"hello_jni\""
msgstr ""

#: src/android/interoperability/java.md
msgid "\"libjni\""
msgstr ""

#: src/android/interoperability/java.md
#, fuzzy
msgid "We then call this function from Java:"
msgstr "Τέλος, μπορούμε να καλέσουμε αυτή τη συνάρτηση από την Java:"

#: src/android/interoperability/java.md
#, fuzzy
msgid "_interoperability/java/HelloWorld.java_:"
msgstr "_interoperability/java/HelloWorld.java_:"

#: src/android/interoperability/java.md
msgid "\"helloworld_jni\""
msgstr ""

#: src/android/interoperability/java.md
#, fuzzy
msgid "\"HelloWorld.java\""
msgstr "Γειά σου Κόσμε!"

#: src/android/interoperability/java.md
#, fuzzy
msgid "\"HelloWorld\""
msgstr "Γειά σου Κόσμε!"

#: src/android/interoperability/java.md
#, fuzzy
msgid "Finally, you can build, sync, and run the binary:"
msgstr ""
"Τέλος, μπορείτε να δημιουργήσετε, να συγχρονίσετε και να εκτελέσετε το "
"δυαδικό:"

#: src/exercises/android/morning.md
#, fuzzy
msgid ""
"This is a group exercise: We will look at one of the projects you work with "
"and try to integrate some Rust into it. Some suggestions:"
msgstr ""
"Για την τελευταία άσκηση, θα δούμε ένα από τα έργα με τα οποία εργάζεστε. "
"Αφήστε μας ομαδοποιήστε και κάντε αυτό μαζί. Μερικές προτάσεις:"

#: src/exercises/android/morning.md
#, fuzzy
msgid "Call your AIDL service with a client written in Rust."
msgstr "Μετακινήστε μια συνάρτηση από το έργο σας στο Rust και καλέστε την."

#: src/exercises/android/morning.md
msgid "Move a function from your project to Rust and call it."
msgstr ""

#: src/exercises/android/morning.md
#, fuzzy
msgid ""
"No solution is provided here since this is open-ended: it relies on someone "
"in the class having a piece of code which you can turn in to Rust on the fly."
msgstr ""
"Δεν παρέχεται λύση εδώ, δεδομένου ότι αυτό είναι ανοιχτό: βασίζεται σε "
"κάποιον μέσα η τάξη έχει ένα κομμάτι κώδικα που μπορείτε να μεταφέρετε στο "
"Rust on the fly."

#: src/chromium.md
msgid "Welcome to Rust in Chromium"
msgstr ""

#: src/chromium.md
msgid ""
"Rust is supported for third-party libraries in Chromium, with first-party "
"glue code to connect between Rust and existing Chromium C++ code."
msgstr ""

#: src/chromium.md
msgid ""
"Today, we'll call into Rust to do something silly with strings. If you've "
"got a corner of the code where you're displaying a UTF8 string to the user, "
"feel free to follow this recipe in your part of the codebase instead of the "
"exact part we talk about."
msgstr ""

#: src/chromium/setup.md
msgid ""
"Make sure you can build and run Chromium. Any platform and set of build "
"flags is OK, so long as your code is relatively recent (commit position "
"1223636 onwards, corresponding to November 2023):"
msgstr ""

#: src/chromium/setup.md
msgid ""
"(A component, debug build is recommended for quickest iteration time. This "
"is the default!)"
msgstr ""

#: src/chromium/setup.md
msgid ""
"See [How to build Chromium](https://www.chromium.org/developers/how-tos/get-"
"the-code/) if you aren't already at that point. Be warned: setting up to "
"build Chromium takes time."
msgstr ""

#: src/chromium/setup.md
msgid "It's also recommended that you have Visual Studio code installed."
msgstr ""

#: src/chromium/setup.md
msgid "About the exercises"
msgstr ""

#: src/chromium/setup.md
msgid ""
"This part of the course has a series of exercises which build on each other. "
"We'll be doing them spread throughout the course instead of just at the end. "
"If you don't have time to complete a certain part, don't worry: you can "
"catch up in the next slot."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Rust community typically uses `cargo` and libraries from [crates.io](https://"
"crates.io/). Chromium is built using `gn` and `ninja` and a curated set of "
"dependencies."
msgstr ""

#: src/chromium/cargo.md
msgid "When writing code in Rust, your choices are:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Use `gn` and `ninja` with the help of the templates from `//build/rust/*."
"gni` (e.g. `rust_static_library` that we'll meet later). This uses "
"Chromium's audited toolchain and crates."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Use `cargo`, but [restrict yourself to Chromium's audited toolchain and "
"crates](https://chromium.googlesource.com/chromium/src/+/refs/heads/main/"
"docs/rust.md#Using-cargo)"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Use `cargo`, trusting a [toolchain](https://rustup.rs/) and/or [crates "
"downloaded from the internet](https://crates.io/)"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"From here on we'll be focusing on `gn` and `ninja`, because this is how Rust "
"code can be built into the Chromium browser. At the same time, Cargo is an "
"important part of the Rust ecosystem and you should keep it in your toolbox."
msgstr ""

#: src/chromium/cargo.md
#, fuzzy
msgid "Mini exercise"
msgstr "Ασκήσεις"

#: src/chromium/cargo.md
msgid "Split into small groups and:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Brainstorm scenarios where `cargo` may offer an advantage and assess the "
"risk profile of these scenarios."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Discuss which tools, libraries, and groups of people need to be trusted when "
"using `gn` and `ninja`, offline `cargo`, etc."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Ask students to avoid peeking at the speaker notes before completing the "
"exercise. Assuming folks taking the course are physically together, ask them "
"to discuss in small groups of 3-4 people."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Notes/hints related to the first part of the exercise (\"scenarios where "
"Cargo may offer an advantage\"):"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"It's fantastic that when writing a tool, or prototyping a part of Chromium, "
"one has access to the rich ecosystem of crates.io libraries. There is a "
"crate for almost anything and they are usually quite pleasant to use. "
"(`clap` for command-line parsing, `serde` for serializing/deserializing to/"
"from various formats, `itertools` for working with iterators, etc.)."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`cargo` makes it easy to try a library (just add a single line to `Cargo."
"toml` and start writing code)"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"It may be worth comparing how CPAN helped make `perl` a popular choice. Or "
"comparing with `python` + `pip`."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Development experience is made really nice not only by core Rust tools (e.g. "
"using `rustup` to switch to a different `rustc` version when testing a crate "
"that needs to work on nightly, current stable, and older stable) but also by "
"an ecosystem of third-party tools (e.g. Mozilla provides `cargo vet` for "
"streamlining and sharing security audits; `criterion` crate gives a "
"streamlined way to run benchmarks)."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`cargo` makes it easy to add a tool via `cargo install --locked cargo-vet`."
msgstr ""

#: src/chromium/cargo.md
msgid "It may be worth comparing with Chrome Extensions or VScode extensions."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Broad, generic examples of projects where `cargo` may be the right choice:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Perhaps surprisingly, Rust is becoming increasingly popular in the industry "
"for writing command line tools. The breadth and ergonomics of libraries is "
"comparable to Python, while being more robust (thanks to the rich "
"typesystem) and running faster (as a compiled, rather than interpreted "
"language)."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Participating in the Rust ecosystem requires using standard Rust tools like "
"Cargo. Libraries that want to get external contributions, and want to be "
"used outside of Chromium (e.g. in Bazel or Android/Soong build environments) "
"should probably use Cargo."
msgstr ""

#: src/chromium/cargo.md
msgid "Examples of Chromium-related projects that are `cargo`\\-based:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`serde_json_lenient` (experimented with in other parts of Google which "
"resulted in PRs with performance improvements)"
msgstr ""

#: src/chromium/cargo.md
msgid "Fontations libraries like `font-types`"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`gnrt` tool (we will meet it later in the course) which depends on `clap` "
"for command-line parsing and on `toml` for configuration files."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Disclaimer: a unique reason for using `cargo` was unavailability of `gn` "
"when building and bootstrapping Rust standard library when building Rust "
"toolchain.)"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`run_gnrt.py` uses Chromium's copy of `cargo` and `rustc`. `gnrt` depends on "
"third-party libraries downloaded from the internet, by `run_gnrt.py` asks "
"`cargo` that only `--locked` content is allowed via `Cargo.lock`.)"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Students may identify the following items as being implicitly or explicitly "
"trusted:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`rustc` (the Rust compiler) which in turn depends on the LLVM libraries, the "
"Clang compiler, the `rustc` sources (fetched from GitHub, reviewed by Rust "
"compiler team), binary Rust compiler downloaded for bootstrapping"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`rustup` (it may be worth pointing out that `rustup` is developed under the "
"umbrella of the https://github.com/rust-lang/ organization - same as `rustc`)"
msgstr ""

#: src/chromium/cargo.md
msgid "`cargo`, `rustfmt`, etc."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Various internal infrastructure (bots that build `rustc`, system for "
"distributing the prebuilt toolchain to Chromium engineers, etc.)"
msgstr ""

#: src/chromium/cargo.md
msgid "Cargo tools like `cargo audit`, `cargo vet`, etc."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Rust libraries vendored into `//third_party/rust` (audited by "
"security@chromium.org)"
msgstr ""

#: src/chromium/cargo.md
msgid "Other Rust libraries (some niche, some quite popular and commonly used)"
msgstr ""

#: src/chromium/policy.md
msgid "Chromium Rust policy"
msgstr ""

#: src/chromium/policy.md
msgid ""
"Chromium does not yet allow first-party Rust except in rare cases as "
"approved by Chromium's [Area Tech Leads](https://source.chromium.org/"
"chromium/chromium/src/+/main:ATL_OWNERS)."
msgstr ""

#: src/chromium/policy.md
msgid ""
"Chromium's policy on third party libraries is outlined [here](https://"
"chromium.googlesource.com/chromium/src/+/main/docs/adding_to_third_party."
"md#rust) - Rust is allowed for third party libraries under various "
"circumstances, including if they're the best option for performance or for "
"security."
msgstr ""

#: src/chromium/policy.md
msgid ""
"Very few Rust libraries directly expose a C/C++ API, so that means that "
"nearly all such libraries will require a small amount of first-party glue "
"code."
msgstr ""

#: src/chromium/policy.md
msgid ""
"```bob\n"
"\"C++\"                           Rust\n"
".- - - - - - - - - -.           .- - - - - - - - - - - - - - - - - - - - - - "
"-.\n"
":                   :           :                                             :\n"
": Existing Chromium :           :  Chromium Rust              Existing "
"Rust   :\n"
": \"C++\"             :           :  \"wrapper\"                  "
"crate           :\n"
": +---------------+ :           : +----------------+          +-------------"
"+ :\n"
": |               | :           : |                |          |             "
"| :\n"
": |         o-----+-+-----------+-+->            o-+----------+-->          "
"| :\n"
": |               | : Language  : |                | Crate    |             "
"| :\n"
": +---------------+ : boundary  : +----------------+ API      +-------------"
"+ :\n"
":                   :           :                                             :\n"
"`- - - - - - - - - -'           `- - - - - - - - - - - - - - - - - - - - - - "
"-'\n"
"```"
msgstr ""

#: src/chromium/policy.md
msgid ""
"First-party Rust glue code for a particular third-party crate should "
"normally be kept in `third_party/rust/<crate>/<version>/wrapper`."
msgstr ""

#: src/chromium/policy.md
msgid "Because of this, today's course will be heavily focused on:"
msgstr ""

#: src/chromium/policy.md
msgid "Bringing in third-party Rust libraries (\"crates\")"
msgstr ""

#: src/chromium/policy.md
msgid "Writing glue code to be able to use those crates from Chromium C++."
msgstr ""

#: src/chromium/policy.md
msgid "If this policy changes over time, the course will evolve to keep up."
msgstr ""

#: src/chromium/build-rules.md
#, fuzzy
msgid "Build rules"
msgstr "Κανόνες Κατασκευής"

#: src/chromium/build-rules.md
msgid ""
"Rust code is usually built using `cargo`. Chromium builds with `gn` and "
"`ninja` for efficiency --- its static rules allow maximum parallelism. Rust "
"is no exception."
msgstr ""

#: src/chromium/build-rules.md
msgid "Adding Rust code to Chromium"
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"In some existing Chromium `BUILD.gn` file, declare a `rust_static_library`:"
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"You can also add `deps` on other Rust targets. Later we'll use this to "
"depend upon third party code."
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"You must specify _both_ the crate root, _and_ a full list of sources. The "
"`crate_root` is the file given to the Rust compiler representing the root "
"file of the compilation unit --- typically `lib.rs`. `sources` is a complete "
"list of all source files which `ninja` needs in order to determine when "
"rebuilds are necessary."
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"(There's no such thing as a Rust `source_set`, because in Rust, an entire "
"crate is a compilation unit. A `static_library` is the smallest unit.)"
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"Students might be wondering why we need a gn template, rather than using "
"[gn's built-in support for Rust static libraries](https://gn.googlesource."
"com/gn/+/main/docs/reference.md#func_static_library). The answer is that "
"this template provides support for CXX interop, Rust features, and unit "
"tests, some of which we'll use later."
msgstr ""

#: src/chromium/build-rules/unsafe.md
msgid "Including `unsafe` Rust Code"
msgstr ""

#: src/chromium/build-rules/unsafe.md
msgid ""
"Unsafe Rust code is forbidden in `rust_static_library` by default --- it "
"won't compile. If you need unsafe Rust code, add `allow_unsafe = true` to "
"the gn target. (Later in the course we'll see circumstances where this is "
"necessary.)"
msgstr ""

#: src/chromium/build-rules/unsafe.md
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [\n"
"    \"lib.rs\",\n"
"    \"hippopotamus.rs\"\n"
"  ]\n"
"  allow_unsafe = true\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules/depending.md
msgid "Simply add the above target to the `deps` of some Chromium C++ target."
msgstr ""

#: src/chromium/build-rules/depending.md
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"}\n"
"\n"
"# or source_set, static_library etc.\n"
"component(\"preexisting_cpp\") {\n"
"  deps = [ \":my_rust_lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Types are elided in Rust code, which makes a good IDE even more useful than "
"for C++. Visual Studio code works well for Rust in Chromium. To use it,"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Ensure your VSCode has the `rust-analyzer` extension, not earlier forms of "
"Rust support"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"`gn gen out/Debug --export-rust-project` (or equivalent for your output "
"directory)"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid "`ln -s out/Debug/rust-project.json rust-project.json`"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"A demo of some of the code annotation and exploration features of rust-"
"analyzer might be beneficial if the audience are naturally skeptical of IDEs."
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"The following steps may help with the demo (but feel free to instead use a "
"piece of Chromium-related Rust that you are most familiar with):"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid "Open `components/qr_code_generator/qr_code_generator_ffi_glue.rs`"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Place the cursor over the `QrCode::new` call (around line 26) in "
"\\`qr_code_generator_ffi_glue.rs"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Demo **show documentation** (typical bindings: vscode = ctrl k i; vim/CoC = "
"K)."
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Demo **go to definition** (typical bindings: vscode = F12; vim/CoC = g d). "
"(This will take you to `//third_party/rust/.../qr_code-.../src/lib.rs`.)"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Demo **outline** and navigate to the `QrCode::with_bits` method (around line "
"164; the outline is in the file explorer pane in vscode; typical vim/CoC "
"bindings = space o)"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Demo **type annotations** (there are quote a few nice examples in the "
"`QrCode::with_bits` method)"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"It may be worth pointing out that `gn gen ... --export-rust-project` will "
"need to be rerun after editing `BUILD.gn` files (which we will do a few "
"times throughout the exercises in this session)."
msgstr ""

#: src/exercises/chromium/build-rules.md
#, fuzzy
msgid "Build rules exercise"
msgstr "Κανόνες Κατασκευής"

#: src/exercises/chromium/build-rules.md
msgid ""
"In your Chromium build, add a new Rust target to `//ui/base/BUILD.gn` "
"containing:"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"**Important**: note that `no_mangle` here is considered a type of unsafety "
"by the Rust compiler, so you'll need to to allow unsafe code in your `gn` "
"target."
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Add this new Rust target as a dependency of `//ui/base:base`. Declare this "
"function at the top of `ui/base/resource/resource_bundle.cc` (later, we'll "
"see how this can be automated by bindings generation tools):"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Call this function from somewhere in `ui/base/resource/resource_bundle.cc` - "
"we suggest the top of `ResourceBundle::MaybeMangleLocalizedString`. Build "
"and run Chromium, and ensure that \"Hello from Rust!\" is printed lots of "
"times."
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"If you use VSCode, now set up Rust to work well in VSCode. It will be useful "
"in subsequent exercises. If you've succeeded, you will be able to use right-"
"click \"Go to definition\" on `println!`."
msgstr ""

#: src/exercises/chromium/build-rules.md
#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Where to find help"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"The options available to the [`rust_static_library` gn template](https://"
"source.chromium.org/chromium/chromium/src/+/main:build/rust/"
"rust_static_library.gni;l=16)"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Information about [`#[no_mangle]`](https://doc.rust-lang.org/beta/reference/"
"abi.html#the-no_mangle-attribute)"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Information about [`extern \"C\"`](https://doc.rust-lang.org/std/keyword."
"extern.html)"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Information about gn's [`--export-rust-project`](https://gn.googlesource.com/"
"gn/+/main/docs/reference.md#compilation-database) switch"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"[How to install rust-analyzer in VSCode](https://code.visualstudio.com/docs/"
"languages/rust)"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"This example is unusual because it boils down to the lowest-common-"
"denominator interop language, C. Both C++ and Rust can natively declare and "
"call C ABI functions. Later in the course, we'll connect C++ directly to "
"Rust."
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"`allow_unsafe = true` is required here because `#[no_mangle]` might allow "
"Rust to generate two functions with the same name, and Rust can no longer "
"guarantee that the right one is called."
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"If you need a pure Rust executable, you can also do that using the "
"`rust_executable` gn template."
msgstr ""

#: src/chromium/testing.md
msgid ""
"Rust community typically authors unit tests in a module placed in the same "
"source file as the code being tested. This was covered [earlier](../testing."
"md) in the course and looks like this:"
msgstr ""

#: src/chromium/testing.md
msgid ""
"In Chromium we place unit tests in a separate source file and we continue to "
"follow this practice for Rust --- this makes tests consistently discoverable "
"and helps to avoid rebuilding `.rs` files a second time (in the `test` "
"configuration)."
msgstr ""

#: src/chromium/testing.md
msgid ""
"This results in the following options for testing Rust code in Chromium:"
msgstr ""

#: src/chromium/testing.md
msgid ""
"Native Rust tests (i.e. `#[test]`). Discouraged outside of `//third_party/"
"rust`."
msgstr ""

#: src/chromium/testing.md
msgid ""
"`gtest` tests authored in C++ and exercising Rust via FFI calls. Sufficient "
"when Rust code is just a thin FFI layer and the existing unit tests provide "
"sufficient coverage for the feature."
msgstr ""

#: src/chromium/testing.md
msgid ""
"`gtest` tests authored in Rust and using the crate under test through its "
"public API (using `pub mod for_testing { ... }` if needed). This is the "
"subject of the next few slides."
msgstr ""

#: src/chromium/testing.md
msgid ""
"Mention that native Rust tests of third-party crates should eventually be "
"exercised by Chromium bots. (Such testing is needed rarely --- only after "
"adding or updating third-party crates.)"
msgstr ""

#: src/chromium/testing.md
msgid ""
"Some examples may help illustrate when C++ `gtest` vs Rust `gtest` should be "
"used:"
msgstr ""

#: src/chromium/testing.md
msgid ""
"QR has very little functionality in the first-party Rust layer (it's just a "
"thin FFI glue) and therefore uses the existing C++ unit tests for testing "
"both the C++ and the Rust implementation (parameterizing the tests so they "
"enable or disable Rust using a `ScopedFeatureList`)."
msgstr ""

#: src/chromium/testing.md
msgid ""
"Hypothetical/WIP PNG integration may need to implement memory-safe "
"implementation of pixel transformations that are provided by `libpng` but "
"missing in the `png` crate - e.g. RGBA => BGRA, or gamma correction. Such "
"functionality may benefit from separate tests authored in Rust."
msgstr ""

#: src/chromium/testing/rust-gtest-interop.md
msgid ""
"The [`rust_gtest_interop`](https://chromium.googlesource.com/chromium/src/+/"
"main/testing/rust_gtest_interop/README.md) library provides a way to:"
msgstr ""

#: src/chromium/testing/rust-gtest-interop.md
msgid ""
"Use a Rust function as a `gtest` testcase (using the `#[gtest(...)]` "
"attribute)"
msgstr ""

#: src/chromium/testing/rust-gtest-interop.md
msgid ""
"Use `expect_eq!` and similar macros (similar to `assert_eq!` but not "
"panicking and not terminating the test when the assertion fails)."
msgstr ""

#: src/chromium/testing/rust-gtest-interop.md
#, fuzzy
msgid "Example:"
msgstr "Παράδειγμα"

#: src/chromium/testing/build-gn.md
msgid ""
"The simplest way to build Rust `gtest` tests is to add them to an existing "
"test binary that already contains tests authored in C++. For example:"
msgstr ""

#: src/chromium/testing/build-gn.md
msgid ""
"```gn\n"
"test(\"ui_base_unittests\") {\n"
"  ...\n"
"  sources += [ \"my_rust_lib_unittest.rs\" ]\n"
"  deps += [ \":my_rust_lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/testing/build-gn.md
msgid ""
"Authoring Rust tests in a separate `static_library` also works, but requires "
"manually declaring the dependency on the support libraries:"
msgstr ""

#: src/chromium/testing/build-gn.md
msgid ""
"```gn\n"
"rust_static_library(\"my_rust_lib_unittests\") {\n"
"  testonly = true\n"
"  is_gtest_unittests = true\n"
"  crate_root = \"my_rust_lib_unittest.rs\"\n"
"  sources = [ \"my_rust_lib_unittest.rs\" ]\n"
"  deps = [\n"
"    \":my_rust_lib\",\n"
"    \"//testing/rust_gtest_interop\",\n"
"  ]\n"
"}\n"
"\n"
"test(\"ui_base_unittests\") {\n"
"  ...\n"
"  deps += [ \":my_rust_lib_unittests\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid ""
"After adding `:my_rust_lib` to GN `deps`, we still need to learn how to "
"import and use `my_rust_lib` from `my_rust_lib_unittest.rs`. We haven't "
"provided an explicit `crate_name` for `my_rust_lib` so its crate name is "
"computed based on the full target path and name. Fortunately we can avoid "
"working with such an unwieldy name by using the `chromium::import!` macro "
"from the automatically-imported `chromium` crate:"
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid "\"//ui/base:my_rust_lib\""
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid "Under the covers the macro expands to something similar to:"
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid ""
"More information can be found in [the doc comment](https://source.chromium."
"org/chromium/chromium/src/+/main:build/rust/chromium_prelude/"
"chromium_prelude.rs?q=f:chromium_prelude.rs%20pub.use.*%5Cbimport%5Cb;%20-f:"
"third_party&ss=chromium%2Fchromium%2Fsrc) of the `chromium::import` macro."
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid ""
"`rust_static_library` supports specifying an explicit name via `crate_name` "
"property, but doing this is discouraged. And it is discouraged because the "
"crate name has to be globally unique. crates.io guarantees uniqueness of its "
"crate names so `cargo_crate` GN targets (generated by the `gnrt` tool "
"covered in a later section) use short crate names."
msgstr ""

#: src/exercises/chromium/testing.md
#, fuzzy
msgid "Testing exercise"
msgstr "Σκουριά στην άσκηση"

#: src/exercises/chromium/testing.md
msgid "Time for another exercise!"
msgstr ""

#: src/exercises/chromium/testing.md
msgid "In your Chromium build:"
msgstr ""

#: src/exercises/chromium/testing.md
msgid ""
"Add a testable function next to `hello_from_rust`. Some suggestions: adding "
"two integers received as arguments, computing the nth Fibonacci number, "
"summing integers in a slice, etc."
msgstr ""

#: src/exercises/chromium/testing.md
msgid "Add a separate `..._unittest.rs` file with a test for the new function."
msgstr ""

#: src/exercises/chromium/testing.md
msgid "Add the new tests to `BUILD.gn`."
msgstr ""

#: src/exercises/chromium/testing.md
msgid "Build the tests, run them, and verify that the new test works."
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"The Rust community offers multiple options for C++/Rust interop, with new "
"tools being developed all the time. At the moment, Chromium uses a tool "
"called CXX."
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"You describe your whole language boundary in an interface definition "
"language (which looks a lot like Rust) and then CXX tools generate "
"declarations for functions and types in both Rust and C++."
msgstr ""

#: src/chromium/interoperability-with-cpp.md
#, fuzzy
msgid ""
"See the [CXX tutorial](https://cxx.rs/tutorial.html) for a full example of "
"using this."
msgstr ""
"Δείτε το [CXX tutorial](https://cxx.rs/tutorial.html) για ένα πλήρες "
"παράδειγμα χρήσης αυτού."

#: src/chromium/interoperability-with-cpp.md
msgid ""
"Talk through the diagram. Explain that behind the scenes, this is doing just "
"the same as you previously did. Point out that automating the process has "
"the following benefits:"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"The tool guarantees that the C++ and Rust sides match (e.g. you get compile "
"errors if the `#[cxx::bridge]` doesn't match the actual C++ or Rust "
"definitions, but with out-of-sync manual bindings you'd get Undefined "
"Behavior)"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"The tool automates generation of FFI thunks (small, C-ABI-compatible, free "
"functions) for non-C features (e.g. enabling FFI calls into Rust or C++ "
"methods; manual bindings would require authoring such top-level, free "
"functions manually)"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid "The tool and the library can handle a set of core types - for example:"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"`&[T]` can be passed across the FFI boundary, even though it doesn't "
"guarantee any particular ABI or memory layout. With manual bindings `std::"
"span<T>` / `&[T]` have to be manually destructured and rebuilt out of a "
"pointer and length - this is error-prone given that each language represents "
"empty slices slightly differently)"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"Smart pointers like `std::unique_ptr<T>`, `std::shared_ptr<T>`, and/or `Box` "
"are natively supported. With manual bindings, one would have to pass C-ABI-"
"compatible raw pointers, which would increase lifetime and memory-safety "
"risks."
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"`rust::String` and `CxxString` types understand and maintain differences in "
"string representation across the languages (e.g. `rust::String::lossy` can "
"build a Rust string from non-UTF8 input and `rust::String::c_str` can NUL-"
"terminate a string)."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid ""
"CXX requires that the whole C++/Rust boundary is declared in `cxx::bridge` "
"modules inside `.rs` source code."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "\"example/include/blobstore.h\""
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "// Definitions of Rust types and functions go here\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Point out:"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid ""
"Although this looks like a regular Rust `mod`, the `#[cxx::bridge]` "
"procedural macro does complex things to it. The generated code is quite a "
"bit more sophisticated - though this does still result in a `mod` called "
"`ffi` in your code."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Native support for C++'s `std::unique_ptr` in Rust"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
#, fuzzy
msgid "Native support for Rust slices in C++"
msgstr "Ενσωματωμένη υποστήριξη για δοκιμές."

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Calls from C++ to Rust, and Rust types (in the top part)"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Calls from Rust to C++, and C++ types (in the bottom part)"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid ""
"**Common misconception**: It _looks_ like a C++ header is being parsed by "
"Rust, but this is misleading. This header is never interpreted by Rust, but "
"simply `#include`d in the generated C++ code for the benefit of C++ "
"compilers."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"By far the most useful page when using CXX is the [type reference](https://"
"cxx.rs/bindings.html)."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid "CXX fundamentally suits cases where:"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"Your Rust-C++ interface is sufficiently simple that you can declare all of "
"it."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"You're using only the types natively supported by CXX already, for example "
"`std::unique_ptr`, `std::string`, `&[u8]` etc."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"It has many limitations --- for example lack of support for Rust's `Option` "
"type."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"These limitations constrain us to using Rust in Chromium only for well "
"isolated \"leaf nodes\" rather than for arbitrary Rust-C++ interop. When "
"considering a use-case for Rust in Chromium, a good starting point is to "
"draft the CXX bindings for the language boundary to see if it appears simple "
"enough."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"You should also discuss some of the other sticky points with CXX, for "
"example:"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"Its error handling is based around C++ exceptions (given on the next slide)"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid "Function pointers are awkward to use."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"CXX's [support for `Result<T,E>`](https://cxx.rs/binding/result.html) relies "
"on C++ exceptions, so we can't use that in Chromium. Alternatives:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid "The `T` part of `Result<T, E>` can be:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"Returned via out parameters (e.g. via `&mut T`). This requires that `T` can "
"be passed across the FFI boundary - for example `T` has to be:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid "A primitive type (like `u32` or `usize`)"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"A type natively supported by `cxx` (like `UniquePtr<T>`) that has a suitable "
"default value to use in a failure case (_unlike_ `Box<T>`)."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"Retained on the Rust side, and exposed via reference. This may be needed "
"when `T` is a Rust type, which cannot be passed across the FFI boundary, and "
"cannot be stored in `UniquePtr<T>`."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid "The `E` part of `Result<T, E>` can be:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"Returned as a boolean (e.g. `true` representing success, and `false` "
"representing failure)"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"Preserving error details is in theory possible, but so far hasn't been "
"needed in practice."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
#, fuzzy
msgid "CXX Error Handling: QR Example"
msgstr "Χειρισμός σφαλμάτων"

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid ""
"The QR code generator is [an example](https://source.chromium.org/chromium/"
"chromium/src/+/main:components/qr_code_generator/qr_code_generator_ffi_glue."
"rs;l=13-18;drc=7bf1b75b910ca430501b9c6a74c1d18a0223ecca) where a boolean is "
"used to communicate success vs failure, and where the successful result can "
"be passed across the FFI boundary:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid "\"qr_code_generator\""
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid ""
"Students may be curious about the semantics of the `out_qr_size` output. "
"This is not the size of the vector, but the size of the QR code (and "
"admittedly it is a bit redundant - this is the square root of the size of "
"the vector)."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid ""
"It may be worth pointing out the importance of initializing `out_qr_size` "
"before calling into the Rust function. Creation of a Rust reference that "
"points to uninitialized memory results in Undefined Behavior (unlike in C++, "
"when only the act of dereferencing such memory results in UB)."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid ""
"If students ask about `Pin`, then explain why CXX needs it for mutable "
"references to C++ data: the answer is that C++ data can’t be moved around "
"like Rust data, because it may contain self-referential pointers."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
#, fuzzy
msgid "CXX Error Handling: PNG Example"
msgstr "Χειρισμός σφαλμάτων"

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid ""
"A prototype of a PNG decoder illustrates what can be done when the "
"successful result cannot be passed across the FFI boundary:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid "\"gfx::rust_bindings\""
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid ""
"/// This returns an FFI-friendly equivalent of `Result<PngReader<'a>,\n"
"        /// ()>`.\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid "/// C++ bindings for the `crate::png::ResultOfPngReader` type.\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid "/// C++ bindings for the `crate::png::PngReader` type.\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid ""
"`PngReader` and `ResultOfPngReader` are Rust types --- objects of these "
"types cannot cross the FFI boundary without indirection of a `Box<T>`. We "
"can't have an `out_parameter: &mut PngReader`, because CXX doesn't allow C++ "
"to store Rust objects by value."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid ""
"This example illustrates that even though CXX doesn't support arbitrary "
"generics nor templates, we can still pass them across the FFI boundary by "
"manually specializing / monomorphizing them into a non-generic type. In the "
"example `ResultOfPngReader` is a non-generic type that forwards into "
"appropriate methods of `Result<T, E>` (e.g. into `is_err`, `unwrap`, and/or "
"`as_mut`)."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid "Using cxx in Chromium"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"In Chromium, we define an independent `#[cxx::bridge] mod` for each leaf-"
"node where we want to use Rust. You'd typically have one for each "
"`rust_static_library`. Just add"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"```gn\n"
"cxx_bindings = [ \"my_rust_file.rs\" ]\n"
"   # list of files containing #[cxx::bridge], not all source files\n"
"allow_unsafe = true\n"
"```"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"to your existing `rust_static_library` target alongside `crate_root` and "
"`sources`."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid "C++ headers will be generated at a sensible location, so you can just"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid "\"ui/base/my_rust_file.rs.h\""
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"You will find some utility functions in `//base` to convert to/from Chromium "
"C++ types to CXX Rust types --- for example [`SpanToRustSlice`](https://"
"source.chromium.org/chromium/chromium/src/+/main:base/containers/span_rust.h;"
"l=21)."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid "Students may ask --- why do we still need `allow_unsafe = true`?"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"The broad answer is that no C/C++ code is \"safe\" by the normal Rust "
"standards. Calling back and forth to C/C++ from Rust may do arbitrary things "
"to memory, and compromise the safety of Rust's own data layouts. Presence of "
"_too many_ `unsafe` keywords in C/C++ interop can harm the signal-to-noise "
"ratio of such a keyword, and is [controversial](https://steveklabnik.com/"
"writing/the-cxx-debate), but strictly, bringing any foreign code into a Rust "
"binary can cause unexpected behavior from Rust's perspective."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"The narrow answer lies in the diagram at the top of [this page](../"
"interoperability-with-cpp.md) --- behind the scenes, CXX generates Rust "
"`unsafe` and `extern \"C\"` functions just like we did manually in the "
"previous section."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
#, fuzzy
msgid "Exercise: Interoperability with C++"
msgstr "Διαλειτουργικότητα με C"

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Part one"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"In the Rust file you previously created, add a `#[cxx::bridge]` which "
"specifies a single function, to be called from C++, called "
"`hello_from_rust`, taking no parameters and returning no value."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Modify your previous `hello_from_rust` function to remove `extern \"C\"` and "
"`#[no_mangle]`. This is now just a standard Rust function."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Modify your `gn` target to build these bindings."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"In your C++ code, remove the forward-declaration of `hello_from_rust`. "
"Instead, include the generated header file."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Build and run!"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Part two"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"It's a good idea to play with CXX a little. It helps you think about how "
"flexible Rust in Chromium actually is."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
#, fuzzy
msgid "Some things to try:"
msgstr "Μερικές σημειώσεις:"

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Call back into C++ from Rust. You will need:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"An additional header file which you can `include!` from your `cxx::bridge`. "
"You'll need to declare your C++ function in that new header file."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"An `unsafe` block to call such a function, or alternatively specify the "
"`unsafe` keyword in your `#[cxx::bridge]` [as described here](https://cxx.rs/"
"extern-c++.html#functions-and-member-functions)."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"You may also need to `#include \"third_party/rust/cxx/v1/crate/include/cxx."
"h\"`"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Pass a C++ string from C++ into Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Pass a reference to a C++ object into Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Intentionally get the Rust function signatures mismatched from the `#[cxx::"
"bridge]`, and get used to the errors you see."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Intentionally get the C++ function signatures mismatched from the `#[cxx::"
"bridge]`, and get used to the errors you see."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Pass a `std::unique_ptr` of some type from C++ into Rust, so that Rust can "
"own some C++ object."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Create a Rust object and pass it into C++, so that C++ owns it. (Hint: you "
"need a `Box`)."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Declare some methods on a C++ type. Call them from Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Declare some methods on a Rust type. Call them from C++."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Part three"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Now you understand the strengths and limitations of CXX interop, think of a "
"couple of use-cases for Rust in Chromium where the interface would be "
"sufficiently simple. Sketch how you might define that interface."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "The [`cxx` binding reference](https://cxx.rs/bindings.html)"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"The [`rust_static_library` gn template](https://source.chromium.org/chromium/"
"chromium/src/+/main:build/rust/rust_static_library.gni;l=16)"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Some of the questions you may encounter:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"I'm seeing a problem initializing a variable of type X with type Y, where X "
"and Y are both function types. This is because your C++ function doesn't "
"quite match the declaration in your `cxx::bridge`."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"I seem to be able to freely convert C++ references into Rust references. "
"Doesn't that risk UB? For CXX's _opaque_ types, no, because they are zero-"
"sized. For CXX trivial types yes, it's _possible_ to cause UB, although "
"CXX's design makes it quite difficult to craft such an example."
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid ""
"Rust libraries are called \"crates\" and are found at [crates.io](https://"
"crates.io). It's _very easy_ for Rust crates to depend upon one another. So "
"they do!"
msgstr ""

#: src/chromium/adding-third-party-crates.md
#, fuzzy
msgid "C++ library"
msgstr "Βιβλιοθήκες"

#: src/chromium/adding-third-party-crates.md
#, fuzzy
msgid "Rust crate"
msgstr "Rust Οικοσύστημα"

#: src/chromium/adding-third-party-crates.md
#, fuzzy
msgid "Build system"
msgstr "Rust Οικοσύστημα"

#: src/chromium/adding-third-party-crates.md
msgid "Lots"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Consistent: `Cargo.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Typical library size"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Large-ish"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Small"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Transitive dependencies"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Few"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "For a Chromium engineer, this has pros and cons:"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid ""
"All crates use a common build system so we can automate their inclusion into "
"Chromium..."
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid ""
"... but, crates typically have transitive dependencies, so you will likely "
"have to bring in multiple libraries."
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "We'll discuss:"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "How to put a crate in the Chromium source code tree"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "How to make `gn` build rules for it"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "How to audit its source code for sufficient safety."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid "Configuring the `Cargo.toml` file to add crates"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid ""
"Chromium has a single set of centrally-managed direct crate dependencies. "
"These are managed through a single [`Cargo.toml`](https://source.chromium."
"org/chromium/chromium/src/+/main:third_party/rust/chromium_crates_io/Cargo."
"toml):"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid ""
"```toml\n"
"[dependencies]\n"
"bitflags = \"1\"\n"
"cfg-if = \"1\"\n"
"cxx = \"1\"\n"
"# lots more...\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid ""
"As with any other `Cargo.toml`, you can specify [more details about the "
"dependencies](https://doc.rust-lang.org/cargo/reference/specifying-"
"dependencies.html) --- most commonly, you'll want to specify the `features` "
"that you wish to enable in the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid ""
"When adding a crate to Chromium, you'll often need to provide some extra "
"information in an additional file, `gnrt_config.toml`, which we'll meet next."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid ""
"Alongside `Cargo.toml` is [`gnrt_config.toml`](https://source.chromium.org/"
"chromium/chromium/src/+/main:third_party/rust/chromium_crates_io/gnrt_config."
"toml). This contains Chromium-specific extensions to crate handling."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid ""
"If you add a new crate, you should specify at least the `group`. This is one "
"of:"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid "For instance,"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid ""
"Depending on the crate source code layout, you may also need to use this "
"file to specify where its `LICENSE` file(s) can be found."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid ""
"Later, we'll see some other things you will need to configure in this file "
"to resolve problems."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid ""
"A tool called `gnrt` knows how to download crates and how to generate `BUILD."
"gn` rules."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid "To start, download the crate you want like this:"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid ""
"Although the `gnrt` tool is part of the Chromium source code, by running "
"this command you will be downloading and running its dependencies from "
"`crates.io`. See [the earlier section](../cargo.md) discussing this security "
"decision."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid "This `vendor` command may download:"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
#, fuzzy
msgid "Your crate"
msgstr "Συντομεύσεις πληκτρολογίου"

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid "Direct and transitive dependencies"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid ""
"New versions of other crates, as required by `cargo` to resolve the complete "
"set of crates required by Chromium."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid ""
"Chromium maintains patches for some crates, kept in `//third_party/rust/"
"chromium_crates_io/patches`. These will be reapplied automatically, but if "
"patching fails you may need to take manual action."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"Once you've downloaded the crate, generate the `BUILD.gn` files like this:"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid "Now run `git status`. You should find:"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"At least one new crate source code in `third_party/rust/chromium_crates_io/"
"vendor`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"At least one new `BUILD.gn` in `third_party/rust/<crate name>/v<major semver "
"version>`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid "An appropriate `README.chromium`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
#, fuzzy
msgid ""
"The \"major semver version\" is a [Rust \"semver\" version number](https://"
"doc.rust-lang.org/cargo/reference/semver.html)."
msgstr ""
"Δείτε το [Rust Reference](https://doc.rust-lang.org/reference/type-layout."
"html)."

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"Take a close look, especially at the things generated in `third_party/rust`."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"Talk a little about semver --- and specifically the way that in Chromium "
"it's to allow multiple incompatible versions of a crate, which is "
"discouraged but sometimes necessary in the Cargo ecosystem."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid ""
"If your build fails, it may be because of a `build.rs`: programs which do "
"arbitrary things at build time. This is fundamentally at odds with the "
"design of `gn` and `ninja` which aim for static, deterministic, build rules "
"to maximize parallelism and repeatability of builds."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid ""
"Some `build.rs` actions are automatically supported; others require action:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "build script effect"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Supported by our gn templates"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Work required by you"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Checking rustc version to configure features on and off"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "None"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Checking platform or CPU to configure features on and off"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
#, fuzzy
msgid "Generating code"
msgstr "Γενικευσεις"

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Yes - specify in `gnrt_config.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Building C/C++"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Patch around it"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Arbitrary other actions"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid ""
"Fortunately, most crates don't contain a build script, and fortunately, most "
"build scripts only do the top two actions."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid ""
"If `ninja` complains about missing files, check the `build.rs` to see if it "
"writes source code files."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid ""
"If so, modify [`gnrt_config.toml`](../configuring-gnrt-config-toml.md) to "
"add `build-script-outputs` to the crate. If this is a transitive dependency, "
"that is, one on which Chromium code should not directly depend, also add "
"`allow-first-party-usage=false`. There are several examples already in that "
"file:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid ""
"```toml\n"
"[crate.unicode-linebreak]\n"
"allow-first-party-usage = false\n"
"build-script-outputs = [\"tables.rs\"]\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid ""
"Now rerun [`gnrt.py -- gen`](../generating-gn-build-rules.md) to regenerate "
"`BUILD.gn` files to inform ninja that this particular output file is input "
"to subsequent build steps."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid ""
"Some crates use the [`cc`](https://crates.io/crates/cc) crate to build and "
"link C/C++ libraries. Other crates parse C/C++ using [`bindgen`](https://"
"crates.io/crates/bindgen) within their build scripts. These actions can't be "
"supported in a Chromium context --- our gn, ninja and LLVM build system is "
"very specific in expressing relationships between build actions."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid "So, your options are:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid "Avoid these crates"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid "Apply a patch to the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid ""
"Patches should be kept in `third_party/rust/chromium_crates_io/patches/"
"<crate>` - see for example the [patches against the `cxx` crate](https://"
"source.chromium.org/chromium/chromium/src/+/main:third_party/rust/"
"chromium_crates_io/patches/cxx/) - and will be applied automatically by "
"`gnrt` each time it upgrades the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid ""
"Once you've added a third-party crate and generated build rules, depending "
"on a crate is simple. Find your `rust_static_library` target, and add a "
"`dep` on the `:lib` target within your crate."
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid "Specifically,"
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid ""
"```bob\n"
"                     +------------+      +----------------------+\n"
"\"//third_party/rust\" | crate name | \"/v\" | major semver version | \":"
"lib\"\n"
"                     +------------+      +----------------------+\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid ""
"```gn\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"  deps = [ \"//third_party/rust/example_rust_crate/v1:lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid "Auditing Third Party Crates"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Adding new libraries is subject to Chromium's standard [policies](https://"
"chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/rust."
"md#Third_party-review), but of course also subject to security review. As "
"you may be bringing in not just a single crate but also transitive "
"dependencies, there may be a lot of code to review. On the other hand, safe "
"Rust code can have limited negative side effects. How should you review it?"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Over time Chromium aims to move to a process based around [cargo vet]"
"(https://mozilla.github.io/cargo-vet/)."
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Meanwhile, for each new crate addition, we are checking for the following:"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Understand why each crate is used. What's the relationship between crates? "
"If the build system for each crate contains a `build.rs` or procedural "
"macros, work out what they're for. Are they compatible with the way Chromium "
"is normally built?"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid "Check each crate seems to be reasonably well maintained"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Use `cd third-party/rust/chromium_crates_io; cargo audit` to check for known "
"vulnerabilities (first you'll need to `cargo install cargo-audit`, which "
"ironically involves downloading lots of dependencies from the internet[2](../"
"cargo.md))"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Ensure any `unsafe` code is good enough for the [Rule of Two](https://"
"chromium.googlesource.com/chromium/src/+/main/docs/security/rule-of-2."
"md#unsafe-code-in-safe-languages)"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid "Check for any use of `fs` or `net` APIs"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Read all the code at a sufficient level to look for anything out of place "
"that might have been maliciously inserted. (You can't realistically aim for "
"100% perfection here: there's often just too much code.)"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"These are just guidelines --- work with reviewers from `security@chromium."
"org` to work out the right way to become confident of the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid "Checking Crates into Chromium Source Code"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid "`git status` should reveal:"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid "Crate code in `//third_party/rust/chromium_crates_io`"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid ""
"Metadata (`BUILD.gn` and `README.chromium`) in `//third_party/rust/<crate>/"
"<version>`"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid "Please also add an `OWNERS` file in the latter location."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid ""
"You should land all this, along with your `Cargo.toml` and `gnrt_config."
"toml` changes, into the Chromium repo."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid ""
"**Important**: you need to use `git add -f` because otherwise `.gitignore` "
"files may result in some files being skipped."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid ""
"As you do so, you might find presubmit checks fail because of non-inclusive "
"language. This is because Rust crate data tends to include names of git "
"branches, and many projects still use non-inclusive terminology there. So "
"you may need to run:"
msgstr ""

#: src/chromium/adding-third-party-crates/keeping-up-to-date.md
msgid ""
"As the OWNER of any third party Chromium dependency, you are [expected to "
"keep it up to date with any security fixes](https://chromium.googlesource."
"com/chromium/src/+/main/docs/adding_to_third_party.md#add-owners). It is "
"hoped that we will soon automate this for Rust crates, but for now, it's "
"still your responsibility just as it is for any other third party dependency."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid ""
"Add [uwuify](https://crates.io/crates/uwuify) to Chromium, turning off the "
"crate's [default features](https://doc.rust-lang.org/cargo/reference/"
"features.html#the-default-feature). Assume that the crate will be used in "
"shipping Chromium, but won't be used to handle untrustworthy input."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid ""
"(In the next exercise we'll use uwuify from Chromium, but feel free to skip "
"ahead and do that now if you like. Or, you could create a new "
"[`rust_executable` target](https://source.chromium.org/chromium/chromium/src/"
"+/main:build/rust/rust_executable.gni) which uses `uwuify`)."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "Students will need to download lots of transitive dependencies."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "The total crates needed are:"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`instant`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`lock_api`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`parking_lot`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`parking_lot_core`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`redox_syscall`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`scopeguard`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`smallvec`, and"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`uwuify`."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid ""
"If students are downloading even more than that, they probably forgot to "
"turn off the default features."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid ""
"Thanks to [Daniel Liu](https://github.com/Daniel-Liu-c0deb0t) for this crate!"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid "Bringing It Together --- Exercise"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"In this exercise, you're going to add a whole new Chromium feature, bringing "
"together everything you already learned."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid "The Brief from Product Management"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"A community of pixies has been discovered living in a remote rainforest. "
"It's important that we get Chromium for Pixies delivered to them as soon as "
"possible."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"The requirement is to translate all Chromium's UI strings into Pixie "
"language."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"There's not time to wait for proper translations, but fortunately pixie "
"language is very close to English, and it turns out there's a Rust crate "
"which does the translation."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"In fact, you already [imported that crate in the previous exercise](https://"
"crates.io/crates/uwuify)."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"(Obviously, real translations of Chrome require incredible care and "
"diligence. Don't ship this!)"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid "Steps"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"Modify `ResourceBundle::MaybeMangleLocalizedString` so that it uwuifies all "
"strings before display. In this special build of Chromium, it should always "
"do this irrespective of the setting of `mangle_localized_strings_`."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"If you've done everything right across all these exercises, congratulations, "
"you should have created Chrome for pixies!"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"UTF16 vs UTF8. Students should be aware that Rust strings are always UTF8, "
"and will probably decide that it's better to do the conversion on the C++ "
"side using `base::UTF16ToUTF8` and back again."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"If students decide to do the conversion on the Rust side, they'll need to "
"consider [`String::from_utf16`](https://doc.rust-lang.org/std/string/struct."
"String.html#method.from_utf16), consider error handling, and consider which "
"[CXX supported types can transfer a lot of u16s](https://cxx.rs/binding/"
"slice.html)."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"Students may design the C++/Rust boundary in several different ways, e.g. "
"taking and returning strings by value, or taking a mutable reference to a "
"string. If a mutable reference is used, CXX will likely tell the student "
"that they need to use [`Pin`](https://doc.rust-lang.org/std/pin/). You may "
"need to explain what `Pin` does, and then explain why CXX needs it for "
"mutable references to C++ data: the answer is that C++ data can't be moved "
"around like Rust data, because it may contain self-referential pointers."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"The C++ target containing `ResourceBundle::MaybeMangleLocalizedString` will "
"need to depend on a `rust_static_library` target. The student probably "
"already did this."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"The `rust_static_library` target will need to depend on `//third_party/rust/"
"uwuify/v0_2:lib`."
msgstr ""

#: src/exercises/chromium/solutions.md
msgid ""
"Solutions to the Chromium exercises can be found in [this series of CLs]"
"(https://chromium-review.googlesource.com/c/chromium/src/+/5096560)."
msgstr ""

#: src/bare-metal.md
#, fuzzy
msgid "Welcome to Bare Metal Rust"
msgstr "Καλώς ήρθατε στην Comprehensive Rust 🦀"

#: src/bare-metal.md
msgid ""
"This is a standalone one-day course about bare-metal Rust, aimed at people "
"who are familiar with the basics of Rust (perhaps from completing the "
"Comprehensive Rust course), and ideally also have some experience with bare-"
"metal programming in some other language such as C."
msgstr ""

#: src/bare-metal.md
msgid ""
"Today we will talk about 'bare-metal' Rust: running Rust code without an OS "
"underneath us. This will be divided into several parts:"
msgstr ""

#: src/bare-metal.md
msgid "What is `no_std` Rust?"
msgstr ""

#: src/bare-metal.md
msgid "Writing firmware for microcontrollers."
msgstr ""

#: src/bare-metal.md
msgid "Writing bootloader / kernel code for application processors."
msgstr ""

#: src/bare-metal.md
msgid "Some useful crates for bare-metal Rust development."
msgstr ""

#: src/bare-metal.md
msgid ""
"For the microcontroller part of the course we will use the [BBC micro:bit]"
"(https://microbit.org/) v2 as an example. It's a [development board](https://"
"tech.microbit.org/hardware/) based on the Nordic nRF51822 microcontroller "
"with some LEDs and buttons, an I2C-connected accelerometer and compass, and "
"an on-board SWD debugger."
msgstr ""

#: src/bare-metal.md
msgid ""
"To get started, install some tools we'll need later. On gLinux or Debian:"
msgstr ""

#: src/bare-metal.md
msgid ""
"And give users in the `plugdev` group access to the micro:bit programmer:"
msgstr ""

#: src/bare-metal.md src/bare-metal/microcontrollers/debugging.md
msgid "On MacOS:"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`core`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`std`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "Slices, `&str`, `CStr`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`NonZeroU8`..."
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Option`, `Result`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Display`, `Debug`, `write!`..."
msgstr ""

#: src/bare-metal/no_std.md
msgid "`panic!`, `assert_eq!`..."
msgstr ""

#: src/bare-metal/no_std.md
msgid "`NonNull` and all the usual pointer-related functions"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Future` and `async`/`await`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`fence`, `AtomicBool`, `AtomicPtr`, `AtomicU32`..."
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Duration`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Box`, `Cow`, `Arc`, `Rc`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Vec`, `BinaryHeap`, `BtreeMap`, `LinkedList`, `VecDeque`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`String`, `CString`, `format!`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Error`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Mutex`, `Condvar`, `Barrier`, `Once`, `RwLock`, `mpsc`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`File` and the rest of `fs`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`println!`, `Read`, `Write`, `Stdin`, `Stdout` and the rest of `io`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Path`, `OsString`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`net`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Command`, `Child`, `ExitCode`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`spawn`, `sleep` and the rest of `thread`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`SystemTime`, `Instant`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`HashMap` depends on RNG."
msgstr ""

#: src/bare-metal/no_std.md
msgid "`std` re-exports the contents of both `core` and `alloc`."
msgstr ""

#: src/bare-metal/minimal.md
msgid "A minimal `no_std` program"
msgstr ""

#: src/bare-metal/minimal.md
msgid "This will compile to an empty binary."
msgstr ""

#: src/bare-metal/minimal.md
msgid "`std` provides a panic handler; without it we must provide our own."
msgstr ""

#: src/bare-metal/minimal.md
msgid "It can also be provided by another crate, such as `panic-halt`."
msgstr ""

#: src/bare-metal/minimal.md
msgid ""
"Depending on the target, you may need to compile with `panic = \"abort\"` to "
"avoid an error about `eh_personality`."
msgstr ""

#: src/bare-metal/minimal.md
msgid ""
"Note that there is no `main` or any other entry point; it's up to you to "
"define your own entry point. This will typically involve a linker script and "
"some assembly code to set things up ready for Rust code to run."
msgstr ""

#: src/bare-metal/alloc.md
msgid ""
"To use `alloc` you must implement a [global (heap) allocator](https://doc."
"rust-lang.org/stable/std/alloc/trait.GlobalAlloc.html)."
msgstr ""

#: src/bare-metal/alloc.md
msgid ""
"// Safe because `HEAP` is only used here and `entry` is only called once.\n"
msgstr ""

#: src/bare-metal/alloc.md
msgid "// Give the allocator some memory to allocate.\n"
msgstr ""

#: src/bare-metal/alloc.md
msgid "// Now we can do things that require heap allocation.\n"
msgstr ""

#: src/bare-metal/alloc.md
#, fuzzy
msgid "\"A string\""
msgstr "Συμβολοσειρές"

#: src/bare-metal/alloc.md
msgid ""
"`buddy_system_allocator` is a third-party crate implementing a basic buddy "
"system allocator. Other crates are available, or you can write your own or "
"hook into your existing allocator."
msgstr ""

#: src/bare-metal/alloc.md
msgid ""
"The const parameter of `LockedHeap` is the max order of the allocator; i.e. "
"in this case it can allocate regions of up to 2\\*\\*32 bytes."
msgstr ""

#: src/bare-metal/alloc.md
msgid ""
"If any crate in your dependency tree depends on `alloc` then you must have "
"exactly one global allocator defined in your binary. Usually this is done in "
"the top-level binary crate."
msgstr ""

#: src/bare-metal/alloc.md
msgid ""
"`extern crate panic_halt as _` is necessary to ensure that the `panic_halt` "
"crate is linked in so we get its panic handler."
msgstr ""

#: src/bare-metal/alloc.md
msgid "This example will build but not run, as it doesn't have an entry point."
msgstr ""

#: src/bare-metal/microcontrollers.md
msgid ""
"The `cortex_m_rt` crate provides (among other things) a reset handler for "
"Cortex M microcontrollers."
msgstr ""

#: src/bare-metal/microcontrollers.md
msgid ""
"Next we'll look at how to access peripherals, with increasing levels of "
"abstraction."
msgstr ""

#: src/bare-metal/microcontrollers.md
msgid ""
"The `cortex_m_rt::entry` macro requires that the function have type `fn() -"
"> !`, because returning to the reset handler doesn't make sense."
msgstr ""

#: src/bare-metal/microcontrollers.md
msgid "Run the example with `cargo embed --bin minimal`"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
msgid ""
"Most microcontrollers access peripherals via memory-mapped IO. Let's try "
"turning on an LED on our micro:bit:"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
msgid "/// GPIO port 0 peripheral address\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
msgid "// GPIO peripheral offsets\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
msgid "// PIN_CNF fields\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
#: src/bare-metal/microcontrollers/pacs.md
#: src/bare-metal/microcontrollers/hals.md
msgid "// Configure GPIO 0 pins 21 and 28 as push-pull outputs.\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
msgid ""
"// Safe because the pointers are to valid peripheral control registers, and\n"
"    // no aliases exist.\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
#: src/bare-metal/microcontrollers/pacs.md
#: src/bare-metal/microcontrollers/hals.md
msgid "// Set pin 28 low and pin 21 high to turn the LED on.\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
msgid ""
"GPIO 0 pin 21 is connected to the first column of the LED matrix, and pin 28 "
"to the first row."
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
#: src/bare-metal/microcontrollers/pacs.md
#: src/bare-metal/microcontrollers/hals.md
#: src/bare-metal/microcontrollers/board-support.md
msgid "Run the example with:"
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid "Peripheral Access Crates"
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"[`svd2rust`](https://crates.io/crates/svd2rust) generates mostly-safe Rust "
"wrappers for memory-mapped peripherals from [CMSIS-SVD](https://www.keil.com/"
"pack/doc/CMSIS/SVD/html/index.html) files."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"SVD (System View Description) files are XML files typically provided by "
"silicon vendors which describe the memory map of the device."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"They are organised by peripheral, register, field and value, with names, "
"descriptions, addresses and so on."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"SVD files are often buggy and incomplete, so there are various projects "
"which patch the mistakes, add missing details, and publish the generated "
"crates."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid "`cortex-m-rt` provides the vector table, among other things."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"If you `cargo install cargo-binutils` then you can run `cargo objdump --bin "
"pac -- -d --no-show-raw-insn` to see the resulting binary."
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid "HAL crates"
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid ""
"[HAL crates](https://github.com/rust-embedded/awesome-embedded-rust#hal-"
"implementation-crates) for many microcontrollers provide wrappers around "
"various peripherals. These generally implement traits from [`embedded-hal`]"
"(https://crates.io/crates/embedded-hal)."
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid "// Create HAL wrapper for GPIO port 0.\n"
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid ""
"`set_low` and `set_high` are methods on the `embedded_hal` `OutputPin` trait."
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid ""
"HAL crates exist for many Cortex-M and RISC-V devices, including various "
"STM32, GD32, nRF, NXP, MSP430, AVR and PIC microcontrollers."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md
#, fuzzy
msgid "Board support crates"
msgstr "Συντομεύσεις πληκτρολογίου"

#: src/bare-metal/microcontrollers/board-support.md
msgid ""
"Board support crates provide a further level of wrapping for a specific "
"board for convenience."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md
msgid ""
"In this case the board support crate is just providing more useful names, "
"and a bit of initialisation."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md
msgid ""
"The crate may also include drivers for some on-board devices outside of the "
"microcontroller itself."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md
msgid "`microbit-v2` includes a simple driver for the LED matrix."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid "The type state pattern"
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid "// let gpio0_01_again = gpio0.p0_01; // Error, moved.\n"
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid "// pin_input.is_high(); // Error, moved.\n"
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid ""
"Pins don't implement `Copy` or `Clone`, so only one instance of each can "
"exist. Once a pin is moved out of the port struct nobody else can take it."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid ""
"Changing the configuration of a pin consumes the old pin instance, so you "
"can’t keep use the old instance afterwards."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid ""
"The type of a value indicates the state that it is in: e.g. in this case, "
"the configuration state of a GPIO pin. This encodes the state machine into "
"the type system, and ensures that you don't try to use a pin in a certain "
"way without properly configuring it first. Illegal state transitions are "
"caught at compile time."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid ""
"You can call `is_high` on an input pin and `set_high` on an output pin, but "
"not vice-versa."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid "Many HAL crates follow this pattern."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"The [`embedded-hal`](https://crates.io/crates/embedded-hal) crate provides a "
"number of traits covering common microcontroller peripherals."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "GPIO"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "ADC"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "I2C, SPI, UART, CAN"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "RNG"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "Timers"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "Watchdogs"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"Other crates then implement [drivers](https://github.com/rust-embedded/"
"awesome-embedded-rust#driver-crates) in terms of these traits, e.g. an "
"accelerometer driver might need an I2C or SPI bus implementation."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"There are implementations for many microcontrollers, as well as other "
"platforms such as Linux on Raspberry Pi."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"There is work in progress on an `async` version of `embedded-hal`, but it "
"isn't stable yet."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"[probe-rs](https://probe.rs/) is a handy toolset for embedded debugging, "
"like OpenOCD but better integrated."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"SWD (Serial Wire Debug) and JTAG via CMSIS-DAP, ST-Link and J-Link probes"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid "GDB stub and Microsoft DAP (Debug Adapter Protocol) server"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid "Cargo integration"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"`cargo-embed` is a cargo subcommand to build and flash binaries, log RTT "
"(Real Time Transfers) output and connect GDB. It's configured by an `Embed."
"toml` file in your project directory."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"[CMSIS-DAP](https://arm-software.github.io/CMSIS_5/DAP/html/index.html) is "
"an Arm standard protocol over USB for an in-circuit debugger to access the "
"CoreSight Debug Access Port of various Arm Cortex processors. It's what the "
"on-board debugger on the BBC micro:bit uses."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"ST-Link is a range of in-circuit debuggers from ST Microelectronics, J-Link "
"is a range from SEGGER."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"The Debug Access Port is usually either a 5-pin JTAG interface or 2-pin "
"Serial Wire Debug."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"probe-rs is a library which you can integrate into your own tools if you "
"want to."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"The [Microsoft Debug Adapter Protocol](https://microsoft.github.io/debug-"
"adapter-protocol/) lets VSCode and other IDEs debug code running on any "
"supported microcontroller."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid "cargo-embed is a binary built using the probe-rs library."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"RTT (Real Time Transfers) is a mechanism to transfer data between the debug "
"host and the target through a number of ringbuffers."
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md
msgid "_Embed.toml_:"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md
msgid "In one terminal under `src/bare-metal/microcontrollers/examples/`:"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md
#, fuzzy
msgid "In another terminal in the same directory:"
msgstr "Σε άλλο τερματικό, ελέγξτε ότι η υπηρεσία εκτελείται:"

#: src/bare-metal/microcontrollers/debugging.md
msgid "On gLinux or Debian:"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md
msgid "In GDB, try running:"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
#: src/bare-metal/aps/other-projects.md
msgid "Other projects"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "[RTIC](https://rtic.rs/)"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "\"Real-Time Interrupt-driven Concurrency\""
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Shared resource management, message passing, task scheduling, timer queue"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "[Embassy](https://embassy.dev/)"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "`async` executors with priorities, timers, networking, USB"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "[TockOS](https://www.tockos.org/documentation/getting-started)"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Security-focused RTOS with preemptive scheduling and Memory Protection Unit "
"support"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "[Hubris](https://hubris.oxide.computer/)"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Microkernel RTOS from Oxide Computer Company with memory protection, "
"unprivileged drivers, IPC"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "[Bindings for FreeRTOS](https://github.com/lobaro/FreeRTOS-rust)"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Some platforms have `std` implementations, e.g. [esp-idf](https://esp-rs."
"github.io/book/overview/using-the-standard-library.html)."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "RTIC can be considered either an RTOS or a concurrency framework."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "It doesn't include any HALs."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"It uses the Cortex-M NVIC (Nested Virtual Interrupt Controller) for "
"scheduling rather than a proper kernel."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "Cortex-M only."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Google uses TockOS on the Haven microcontroller for Titan security keys."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"FreeRTOS is mostly written in C, but there are Rust bindings for writing "
"applications."
msgstr ""

#: src/exercises/bare-metal/morning.md
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port."
msgstr ""

#: src/exercises/bare-metal/morning.md src/exercises/concurrency/morning.md
#, fuzzy
msgid ""
"After looking at the exercises, you can look at the [solutions](solutions-"
"morning.md) provided."
msgstr "Αφού δείτε την άσκηση, μπορείτε να δείτε τη \\[λύση\\] που παρέχεται."

#: src/exercises/bare-metal/compass.md
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port. If you have time, try displaying it on the LEDs somehow too, or "
"use the buttons somehow."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid "Hints:"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"Check the documentation for the [`lsm303agr`](https://docs.rs/lsm303agr/"
"latest/lsm303agr/) and [`microbit-v2`](https://docs.rs/microbit-v2/latest/"
"microbit/) crates, as well as the [micro:bit hardware](https://tech.microbit."
"org/hardware/)."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"The LSM303AGR Inertial Measurement Unit is connected to the internal I2C bus."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"TWI is another name for I2C, so the I2C master peripheral is called TWIM."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"The LSM303AGR driver needs something implementing the `embedded_hal::"
"blocking::i2c::WriteRead` trait. The [`microbit::hal::Twim`](https://docs.rs/"
"microbit-v2/latest/microbit/hal/struct.Twim.html) struct implements this."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"You have a [`microbit::Board`](https://docs.rs/microbit-v2/latest/microbit/"
"struct.Board.html) struct with fields for the various pins and peripherals."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"You can also look at the [nRF52833 datasheet](https://infocenter.nordicsemi."
"com/pdf/nRF52833_PS_v1.5.pdf) if you want, but it shouldn't be necessary for "
"this exercise."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `compass` directory for the following files."
msgstr ""

#: src/exercises/bare-metal/compass.md src/exercises/bare-metal/rtc.md
#, fuzzy
msgid "_src/main.rs_:"
msgstr "_hello_rust/src/main.rs_:"

#: src/exercises/bare-metal/compass.md
#: src/exercises/bare-metal/solutions-morning.md
msgid "// Configure serial port.\n"
msgstr ""

#: src/exercises/bare-metal/compass.md
#: src/exercises/bare-metal/solutions-morning.md
msgid "// Use the system timer as a delay provider.\n"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"// Set up the I2C controller and Inertial Measurement Unit.\n"
"    // TODO\n"
msgstr ""

#: src/exercises/bare-metal/compass.md
#: src/exercises/bare-metal/solutions-morning.md
msgid "\"Ready.\""
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"// Read compass data and log it to the serial port.\n"
"        // TODO\n"
msgstr ""

#: src/exercises/bare-metal/compass.md src/exercises/bare-metal/rtc.md
msgid "_Cargo.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid "_Embed.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md src/exercises/bare-metal/rtc.md
msgid "_.cargo/config.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid "See the serial output on Linux with:"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"Or on Mac OS something like (the device name may be slightly different):"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid "Use Ctrl+A Ctrl+Q to quit picocom."
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
#, fuzzy
msgid "Bare Metal Rust Morning Exercise"
msgstr "3η ημέρα Πρωινή άσκηση"

#: src/exercises/bare-metal/solutions-morning.md
#, fuzzy
msgid "([back to exercise](compass.md))"
msgstr "([επιστροφή στην άσκηση](for-loops.md))"

#: src/exercises/bare-metal/solutions-morning.md
msgid "// Set up the I2C controller and Inertial Measurement Unit.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "\"Setting up IMU...\""
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "// Set up display and timer.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "// Read compass data and log it to the serial port.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "\"{},{},{}\\t{},{},{}\""
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid ""
"// If button A is pressed, switch to the next mode and briefly blink all "
"LEDs\n"
"        // on.\n"
msgstr ""

#: src/bare-metal/aps.md
msgid "Application processors"
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"So far we've talked about microcontrollers, such as the Arm Cortex-M series. "
"Now let's try writing something for Cortex-A. For simplicity we'll just work "
"with QEMU's aarch64 ['virt'](https://qemu-project.gitlab.io/qemu/system/arm/"
"virt.html) board."
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"Broadly speaking, microcontrollers don't have an MMU or multiple levels of "
"privilege (exception levels on Arm CPUs, rings on x86), while application "
"processors do."
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"QEMU supports emulating various different machines or board models for each "
"architecture. The 'virt' board doesn't correspond to any particular real "
"hardware, but is designed purely for virtual machines."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"Before we can start running Rust code, we need to do some initialisation."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"```armasm\n"
".section .init.entry, \"ax\"\n"
".global entry\n"
"entry:\n"
"    /*\n"
"     * Load and apply the memory management configuration, ready to enable "
"MMU and\n"
"     * caches.\n"
"     */\n"
"    adrp x30, idmap\n"
"    msr ttbr0_el1, x30\n"
"\n"
"    mov_i x30, .Lmairval\n"
"    msr mair_el1, x30\n"
"\n"
"    mov_i x30, .Ltcrval\n"
"    /* Copy the supported PA range into TCR_EL1.IPS. */\n"
"    mrs x29, id_aa64mmfr0_el1\n"
"    bfi x30, x29, #32, #4\n"
"\n"
"    msr tcr_el1, x30\n"
"\n"
"    mov_i x30, .Lsctlrval\n"
"\n"
"    /*\n"
"     * Ensure everything before this point has completed, then invalidate "
"any\n"
"     * potentially stale local TLB entries before they start being used.\n"
"     */\n"
"    isb\n"
"    tlbi vmalle1\n"
"    ic iallu\n"
"    dsb nsh\n"
"    isb\n"
"\n"
"    /*\n"
"     * Configure sctlr_el1 to enable MMU and cache and don't proceed until "
"this\n"
"     * has completed.\n"
"     */\n"
"    msr sctlr_el1, x30\n"
"    isb\n"
"\n"
"    /* Disable trapping floating point access in EL1. */\n"
"    mrs x30, cpacr_el1\n"
"    orr x30, x30, #(0x3 << 20)\n"
"    msr cpacr_el1, x30\n"
"    isb\n"
"\n"
"    /* Zero out the bss section. */\n"
"    adr_l x29, bss_begin\n"
"    adr_l x30, bss_end\n"
"0:  cmp x29, x30\n"
"    b.hs 1f\n"
"    stp xzr, xzr, [x29], #16\n"
"    b 0b\n"
"\n"
"1:  /* Prepare the stack. */\n"
"    adr_l x30, boot_stack_end\n"
"    mov sp, x30\n"
"\n"
"    /* Set up exception vector. */\n"
"    adr x30, vector_table_el1\n"
"    msr vbar_el1, x30\n"
"\n"
"    /* Call into Rust code. */\n"
"    bl main\n"
"\n"
"    /* Loop forever waiting for interrupts. */\n"
"2:  wfi\n"
"    b 2b\n"
"```"
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"This is the same as it would be for C: initialising the processor state, "
"zeroing the BSS, and setting up the stack pointer."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"The BSS (block starting symbol, for historical reasons) is the part of the "
"object file which containing statically allocated variables which are "
"initialised to zero. They are omitted from the image, to avoid wasting space "
"on zeroes. The compiler assumes that the loader will take care of zeroing "
"them."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"The BSS may already be zeroed, depending on how memory is initialised and "
"the image is loaded, but we zero it to be sure."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"We need to enable the MMU and cache before reading or writing any memory. If "
"we don't:"
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"Unaligned accesses will fault. We build the Rust code for the `aarch64-"
"unknown-none` target which sets `+strict-align` to prevent the compiler "
"generating unaligned accesses, so it should be fine in this case, but this "
"is not necessarily the case in general."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"If it were running in a VM, this can lead to cache coherency issues. The "
"problem is that the VM is accessing memory directly with the cache disabled, "
"while the host has cacheable aliases to the same memory. Even if the host "
"doesn't explicitly access the memory, speculative accesses can lead to cache "
"fills, and then changes from one or the other will get lost when the cache "
"is cleaned or the VM enables the cache. (Cache is keyed by physical address, "
"not VA or IPA.)"
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"For simplicity, we just use a hardcoded pagetable (see `idmap.S`) which "
"identity maps the first 1 GiB of address space for devices, the next 1 GiB "
"for DRAM, and another 1 GiB higher up for more devices. This matches the "
"memory layout that QEMU uses."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"We also set up the exception vector (`vbar_el1`), which we'll see more about "
"later."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"All examples this afternoon assume we will be running at exception level 1 "
"(EL1). If you need to run at a different exception level you'll need to "
"modify `entry.S` accordingly."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "Inline assembly"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"Sometimes we need to use assembly to do things that aren't possible with "
"Rust code. For example, to make an HVC (hypervisor call) to tell the "
"firmware to power off the system:"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"// Safe because this only uses the declared registers and doesn't do\n"
"    // anything with memory.\n"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"hvc #0\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w0\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w1\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w2\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w3\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w4\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w5\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w6\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w7\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"(If you actually want to do this, use the [`smccc`](https://crates.io/crates/"
"smccc) crate which has wrappers for all these functions.)"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"PSCI is the Arm Power State Coordination Interface, a standard set of "
"functions to manage system and CPU power states, among other things. It is "
"implemented by EL3 firmware and hypervisors on many systems."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"The `0 => _` syntax means initialise the register to 0 before running the "
"inline assembly code, and ignore its contents afterwards. We need to use "
"`inout` rather than `in` because the call could potentially clobber the "
"contents of the registers."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"This `main` function needs to be `#[no_mangle]` and `extern \"C\"` because "
"it is called from our entry point in `entry.S`."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"`_x0`–`_x3` are the values of registers `x0`–`x3`, which are conventionally "
"used by the bootloader to pass things like a pointer to the device tree. "
"According to the standard aarch64 calling convention (which is what `extern "
"\"C\"` specifies to use), registers `x0`–`x7` are used for the first 8 "
"arguments passed to a function, so `entry.S` doesn't need to do anything "
"special except make sure it doesn't change these registers."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"Run the example in QEMU with `make qemu_psci` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid "Volatile memory access for MMIO"
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid "Use `pointer::read_volatile` and `pointer::write_volatile`."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid "Never hold a reference."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"`addr_of!` lets you get fields of structs without creating an intermediate "
"reference."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Volatile access: read or write operations may have side-effects, so prevent "
"the compiler or hardware from reordering, duplicating or eliding them."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Usually if you write and then read, e.g. via a mutable reference, the "
"compiler may assume that the value read is the same as the value just "
"written, and not bother actually reading memory."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Some existing crates for volatile access to hardware do hold references, but "
"this is unsound. Whenever a reference exist, the compiler may choose to "
"dereference it."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Use the `addr_of!` macro to get struct field pointers from a pointer to the "
"struct."
msgstr ""

#: src/bare-metal/aps/uart.md
msgid "Let's write a UART driver"
msgstr ""

#: src/bare-metal/aps/uart.md
msgid ""
"The QEMU 'virt' machine has a [PL011](https://developer.arm.com/"
"documentation/ddi0183/g) UART, so let's write a driver for that."
msgstr ""

#: src/bare-metal/aps/uart.md
msgid "/// Minimal driver for a PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/uart.md src/bare-metal/aps/better-uart/driver.md
msgid ""
"/// Constructs a new instance of the UART driver for a PL011 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the 8 MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""

#: src/bare-metal/aps/uart.md src/bare-metal/aps/better-uart/driver.md
#: src/exercises/bare-metal/rtc.md
msgid "/// Writes a single byte to the UART.\n"
msgstr ""

#: src/bare-metal/aps/uart.md src/bare-metal/aps/better-uart/driver.md
#: src/exercises/bare-metal/rtc.md
msgid "// Wait until there is room in the TX buffer.\n"
msgstr ""

#: src/bare-metal/aps/uart.md
msgid ""
"// Safe because we know that the base address points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
msgstr ""

#: src/bare-metal/aps/uart.md src/bare-metal/aps/better-uart/driver.md
#: src/exercises/bare-metal/rtc.md
msgid "// Write to the TX buffer.\n"
msgstr ""

#: src/bare-metal/aps/uart.md src/bare-metal/aps/better-uart/driver.md
#: src/exercises/bare-metal/rtc.md
msgid "// Wait until the UART is no longer busy.\n"
msgstr ""

#: src/bare-metal/aps/uart.md
msgid ""
"Note that `Uart::new` is unsafe while the other methods are safe. This is "
"because as long as the caller of `Uart::new` guarantees that its safety "
"requirements are met (i.e. that there is only ever one instance of the "
"driver for a given UART, and nothing else aliasing its address space), then "
"it is always safe to call `write_byte` later because we can assume the "
"necessary preconditions."
msgstr ""

#: src/bare-metal/aps/uart.md
msgid ""
"We could have done it the other way around (making `new` safe but "
"`write_byte` unsafe), but that would be much less convenient to use as every "
"place that calls `write_byte` would need to reason about the safety"
msgstr ""

#: src/bare-metal/aps/uart.md
msgid ""
"This is a common pattern for writing safe wrappers of unsafe code: moving "
"the burden of proof for soundness from a large number of places to a smaller "
"number of places."
msgstr ""

#: src/bare-metal/aps/uart/traits.md
#, fuzzy
msgid "More traits"
msgstr "Χαρακτηριστικά"

#: src/bare-metal/aps/uart/traits.md
msgid ""
"We derived the `Debug` trait. It would be useful to implement a few more "
"traits too."
msgstr ""

#: src/bare-metal/aps/uart/traits.md src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"// Safe because it just contains a pointer to device memory, which can be\n"
"// accessed from any context.\n"
msgstr ""

#: src/bare-metal/aps/uart/traits.md
msgid ""
"Implementing `Write` lets us use the `write!` and `writeln!` macros with our "
"`Uart` type."
msgstr ""

#: src/bare-metal/aps/uart/traits.md
msgid ""
"Run the example in QEMU with `make qemu_minimal` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "A better UART driver"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid ""
"The PL011 actually has [a bunch more registers](https://developer.arm.com/"
"documentation/ddi0183/g/programmers-model/summary-of-registers), and adding "
"offsets to construct pointers to access them is error-prone and hard to "
"read. Plus, some of them are bit fields which would be nice to access in a "
"structured way."
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "Offset"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "Register name"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "Width"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x00"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "DR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "12"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x04"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "RSR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x18"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "FR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "9"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x20"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "ILPR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x24"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "IBRD"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "16"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x28"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "FBRD"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x2c"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "LCR_H"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x30"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "CR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x34"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "IFLS"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x38"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "IMSC"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "11"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x3c"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "RIS"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x40"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "MIS"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x44"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "ICR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x48"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "DMACR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "There are also some ID registers which have been omitted for brevity."
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md
msgid ""
"The [`bitflags`](https://crates.io/crates/bitflags) crate is useful for "
"working with bitflags."
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// Flags from the UART flag register.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// Clear to send.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// Data set ready.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// Data carrier detect.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// UART busy transmitting data.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// Receive FIFO is empty.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// Transmit FIFO is full.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// Receive FIFO is full.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// Transmit FIFO is empty.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md src/exercises/bare-metal/rtc.md
msgid "/// Ring indicator.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md
msgid ""
"The `bitflags!` macro creates a newtype something like `Flags(u16)`, along "
"with a bunch of method implementations to get and set flags."
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md
msgid "Multiple registers"
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md
msgid ""
"We can use a struct to represent the memory layout of the UART's registers."
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md
msgid ""
"[`#[repr(C)]`](https://doc.rust-lang.org/reference/type-layout.html#the-c-"
"representation) tells the compiler to lay the struct fields out in order, "
"following the same rules as C. This is necessary for our struct to have a "
"predictable layout, as default Rust representation allows the compiler to "
"(among other things) reorder fields however it sees fit."
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md
msgid "Now let's use the new `Registers` struct in our driver."
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md
msgid "/// Driver for a PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md src/exercises/bare-metal/rtc.md
msgid ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md src/exercises/bare-metal/rtc.md
msgid ""
"/// Reads and returns a pending byte, or `None` if nothing has been\n"
"    /// received.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md src/exercises/bare-metal/rtc.md
msgid "// TODO: Check for error conditions in bits 8-11.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md
msgid ""
"Note the use of `addr_of!` / `addr_of_mut!` to get pointers to individual "
"fields without creating an intermediate reference, which would be unsound."
msgstr ""

#: src/bare-metal/aps/better-uart/using.md src/bare-metal/aps/logging/using.md
#, fuzzy
msgid "Using it"
msgstr "Χρήση Bindgen"

#: src/bare-metal/aps/better-uart/using.md
msgid ""
"Let's write a small program using our driver to write to the serial console, "
"and echo incoming bytes."
msgstr ""

#: src/bare-metal/aps/better-uart/using.md src/bare-metal/aps/logging/using.md
#: src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Base address of the primary PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md src/bare-metal/aps/logging/using.md
#: src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"// Safe because `PL011_BASE_ADDRESS` is the base address of a PL011 device,\n"
"    // and nothing else accesses that address range.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md src/bare-metal/aps/logging/using.md
msgid "\"main({x0:#x}, {x1:#x}, {x2:#x}, {x3:#x})\""
msgstr ""

#: src/bare-metal/aps/better-uart/using.md
msgid "b'\\r'"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md src/async/pitfalls/cancellation.md
msgid "b'\\n'"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md
msgid "b'q'"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md
msgid "\"Bye!\""
msgstr ""

#: src/bare-metal/aps/better-uart/using.md
msgid ""
"As in the [inline assembly](../inline-assembly.md) example, this `main` "
"function is called from our entry point code in `entry.S`. See the speaker "
"notes there for details."
msgstr ""

#: src/bare-metal/aps/better-uart/using.md
msgid ""
"Run the example in QEMU with `make qemu` under `src/bare-metal/aps/examples`."
msgstr ""

#: src/bare-metal/aps/logging.md
msgid ""
"It would be nice to be able to use the logging macros from the [`log`]"
"(https://crates.io/crates/log) crate. We can do this by implementing the "
"`Log` trait."
msgstr ""

#: src/bare-metal/aps/logging.md src/exercises/bare-metal/rtc.md
msgid "\"[{}] {}\""
msgstr ""

#: src/bare-metal/aps/logging.md src/exercises/bare-metal/rtc.md
msgid "/// Initialises UART logger.\n"
msgstr ""

#: src/bare-metal/aps/logging.md
msgid ""
"The unwrap in `log` is safe because we initialise `LOGGER` before calling "
"`set_logger`."
msgstr ""

#: src/bare-metal/aps/logging/using.md
msgid "We need to initialise the logger before we use it."
msgstr ""

#: src/bare-metal/aps/logging/using.md src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"{info}\""
msgstr ""

#: src/bare-metal/aps/logging/using.md
msgid "Note that our panic handler can now log details of panics."
msgstr ""

#: src/bare-metal/aps/logging/using.md
msgid ""
"Run the example in QEMU with `make qemu_logger` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid ""
"AArch64 defines an exception vector table with 16 entries, for 4 types of "
"exceptions (synchronous, IRQ, FIQ, SError) from 4 states (current EL with "
"SP0, current EL with SPx, lower EL using AArch64, lower EL using AArch32). "
"We implement this in assembly to save volatile registers to the stack before "
"calling into Rust code:"
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid "EL is exception level; all our examples this afternoon run in EL1."
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid ""
"For simplicity we aren't distinguishing between SP0 and SPx for the current "
"EL exceptions, or between AArch32 and AArch64 for the lower EL exceptions."
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid ""
"For this example we just log the exception and power down, as we don't "
"expect any of them to actually happen."
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid ""
"We can think of exception handlers and our main execution context more or "
"less like different threads. [`Send` and `Sync`](../../concurrency/send-sync."
"md) will control what we can share between them, just like with threads. For "
"example, if we want to share some value between exception handlers and the "
"rest of the program, and it's `Send` but not `Sync`, then we'll need to wrap "
"it in something like a `Mutex` and put it in a static."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "[oreboot](https://github.com/oreboot/oreboot)"
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "\"coreboot without the C\""
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "Supports x86, aarch64 and RISC-V."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "Relies on LinuxBoot rather than having many drivers itself."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"[Rust RaspberryPi OS tutorial](https://github.com/rust-embedded/rust-"
"raspberrypi-OS-tutorials)"
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"Initialisation, UART driver, simple bootloader, JTAG, exception levels, "
"exception handling, page tables"
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"Some dodginess around cache maintenance and initialisation in Rust, not "
"necessarily a good example to copy for production code."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "[`cargo-call-stack`](https://crates.io/crates/cargo-call-stack)"
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "Static analysis to determine maximum stack usage."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"The RaspberryPi OS tutorial runs Rust code before the MMU and caches are "
"enabled. This will read and write memory (e.g. the stack). However:"
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"Without the MMU and cache, unaligned accesses will fault. It builds with "
"`aarch64-unknown-none` which sets `+strict-align` to prevent the compiler "
"generating unaligned accesses so it should be alright, but this is not "
"necessarily the case in general."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"If it were running in a VM, this can lead to cache coherency issues. The "
"problem is that the VM is accessing memory directly with the cache disabled, "
"while the host has cacheable aliases to the same memory. Even if the host "
"doesn't explicitly access the memory, speculative accesses can lead to cache "
"fills, and then changes from one or the other will get lost. Again this is "
"alright in this particular case (running directly on the hardware with no "
"hypervisor), but isn't a good pattern in general."
msgstr ""

#: src/bare-metal/useful-crates.md
msgid "Useful crates"
msgstr ""

#: src/bare-metal/useful-crates.md
msgid ""
"We'll go over a few crates which solve some common problems in bare-metal "
"programming."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"The [`zerocopy`](https://docs.rs/zerocopy/) crate (from Fuchsia) provides "
"traits and macros for safely converting between byte sequences and other "
"types."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"This is not suitable for MMIO (as it doesn't use volatile reads and writes), "
"but can be useful for working with structures shared with hardware e.g. by "
"DMA, or sent over some external interface."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"`FromBytes` can be implemented for types for which any byte pattern is "
"valid, and so can safely be converted from an untrusted sequence of bytes."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"Attempting to derive `FromBytes` for these types would fail, because "
"`RequestType` doesn't use all possible u32 values as discriminants, so not "
"all byte patterns are valid."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"`zerocopy::byteorder` has types for byte-order aware numeric primitives."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"Run the example with `cargo run` under `src/bare-metal/useful-crates/"
"zerocopy-example/`. (It won't run in the Playground because of the crate "
"dependency.)"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid ""
"The [`aarch64-paging`](https://crates.io/crates/aarch64-paging) crate lets "
"you create page tables according to the AArch64 Virtual Memory System "
"Architecture."
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid "// Create a new page table with identity mapping.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid "// Map a 2 MiB region of memory as read-only.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid "// Set `TTBR0_EL1` to activate the page table.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid ""
"For now it only supports EL1, but support for other exception levels should "
"be straightforward to add."
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid ""
"This is used in Android for the [Protected VM Firmware](https://cs.android."
"com/android/platform/superproject/+/master:packages/modules/Virtualization/"
"pvmfw/)."
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid ""
"There's no easy way to run this example, as it needs to run on real hardware "
"or under QEMU."
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md
msgid ""
"[`buddy_system_allocator`](https://crates.io/crates/buddy_system_allocator) "
"is a third-party crate implementing a basic buddy system allocator. It can "
"be used both for [`LockedHeap`](https://docs.rs/buddy_system_allocator/0.9.0/"
"buddy_system_allocator/struct.LockedHeap.html) implementing [`GlobalAlloc`]"
"(https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html) so you can use "
"the standard `alloc` crate (as we saw [before](../alloc.md)), or for "
"allocating other address space. For example, we might want to allocate MMIO "
"space for PCI BARs:"
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md
msgid "PCI BARs always have alignment equal to their size."
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md
msgid ""
"Run the example with `cargo run` under `src/bare-metal/useful-crates/"
"allocator-example/`. (It won't run in the Playground because of the crate "
"dependency.)"
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md
msgid ""
"Sometimes you want something which can be resized like a `Vec`, but without "
"heap allocation. [`tinyvec`](https://crates.io/crates/tinyvec) provides "
"this: a vector backed by an array or slice, which could be statically "
"allocated or on the stack, which keeps track of how many elements are used "
"and panics if you try to use more than are allocated."
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md
msgid ""
"`tinyvec` requires that the element type implement `Default` for "
"initialisation."
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md
msgid ""
"The Rust Playground includes `tinyvec`, so this example will run fine inline."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"`std::sync::Mutex` and the other synchronisation primitives from `std::sync` "
"are not available in `core` or `alloc`. How can we manage synchronisation or "
"interior mutability, such as for sharing state between different CPUs?"
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"The [`spin`](https://crates.io/crates/spin) crate provides spinlock-based "
"equivalents of many of these primitives."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid "Be careful to avoid deadlock if you take locks in interrupt handlers."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"`spin` also has a ticket lock mutex implementation; equivalents of `RwLock`, "
"`Barrier` and `Once` from `std::sync`; and `Lazy` for lazy initialisation."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"The [`once_cell`](https://crates.io/crates/once_cell) crate also has some "
"useful types for late initialisation with a slightly different approach to "
"`spin::once::Once`."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"The Rust Playground includes `spin`, so this example will run fine inline."
msgstr ""

#: src/bare-metal/android.md
msgid ""
"To build a bare-metal Rust binary in AOSP, you need to use a "
"`rust_ffi_static` Soong rule to build your Rust code, then a `cc_binary` "
"with a linker script to produce the binary itself, and then a `raw_binary` "
"to convert the ELF to a raw binary ready to be run."
msgstr ""

#: src/bare-metal/android/vmbase.md
msgid "vmbase"
msgstr ""

#: src/bare-metal/android/vmbase.md
msgid ""
"For VMs running under crosvm on aarch64, the [vmbase](https://android."
"googlesource.com/platform/packages/modules/Virtualization/+/refs/heads/"
"master/vmbase/) library provides a linker script and useful defaults for the "
"build rules, along with an entry point, UART console logging and more."
msgstr ""

#: src/bare-metal/android/vmbase.md
msgid ""
"The `main!` macro marks your main function, to be called from the `vmbase` "
"entry point."
msgstr ""

#: src/bare-metal/android/vmbase.md
msgid ""
"The `vmbase` entry point handles console initialisation, and issues a "
"PSCI_SYSTEM_OFF to shutdown the VM if your main function returns."
msgstr ""

#: src/exercises/bare-metal/afternoon.md
msgid "We will write a driver for the PL031 real-time clock device."
msgstr ""

#: src/exercises/bare-metal/afternoon.md src/exercises/concurrency/afternoon.md
#, fuzzy
msgid ""
"After looking at the exercises, you can look at the [solutions](solutions-"
"afternoon.md) provided."
msgstr "Αφού δείτε την άσκηση, μπορείτε να δείτε τη \\[λύση\\] που παρέχεται."

#: src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "RTC driver"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"The QEMU aarch64 virt machine has a [PL031](https://developer.arm.com/"
"documentation/ddi0224/c) real-time clock at 0x9010000. For this exercise, "
"you should write a driver for it."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"Use it to print the current time to the serial console. You can use the "
"[`chrono`](https://crates.io/crates/chrono) crate for date/time formatting."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"Use the match register and raw interrupt status to busy-wait until a given "
"time, e.g. 3 seconds in the future. (Call [`core::hint::spin_loop`](https://"
"doc.rust-lang.org/core/hint/fn.spin_loop.html) inside the loop.)"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"_Extension if you have time:_ Enable and handle the interrupt generated by "
"the RTC match. You can use the driver provided in the [`arm-gic`](https://"
"docs.rs/arm-gic/) crate to configure the Arm Generic Interrupt Controller."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "Use the RTC interrupt, which is wired to the GIC as `IntId::spi(2)`."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"Once the interrupt is enabled, you can put the core to sleep via `arm_gic::"
"wfi()`, which will cause the core to sleep until it receives an interrupt."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `rtc` directory for the following files."
msgstr ""

#: src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Base addresses of the GICv3.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"main({:#x}, {:#x}, {:#x}, {:#x})\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"// Safe because `GICD_BASE_ADDRESS` and `GICR_BASE_ADDRESS` are the base\n"
"    // addresses of a GICv3 distributor and redistributor respectively, and\n"
"    // nothing else accesses those address ranges.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "// TODO: Create instance of RTC driver and print current time.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "// TODO: Wait for 3 seconds.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"_src/exceptions.rs_ (you should only need to change this for the 3rd part of "
"the exercise):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"sync_exception_current\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"irq_current\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"No pending interrupt\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"IRQ {intid:?}\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"fiq_current\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"serr_current\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"sync_lower\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"irq_lower\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"fiq_lower\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"serr_lower\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_src/logger.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "// ANCHOR: main\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_src/pl011.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "// ANCHOR: Flags\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "// ANCHOR_END: Flags\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"/// Flags from the UART Receive Status Register / Error Clear Register.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "/// Framing error.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "/// Parity error.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "/// Break error.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "/// Overrun error.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "// ANCHOR: Registers\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "// ANCHOR_END: Registers\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"// ANCHOR: Uart\n"
"/// Driver for a PL011 UART.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"/// Constructs a new instance of the UART driver for a PL011 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "// ANCHOR_END: Uart\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_build.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"linux\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"CROSS_COMPILE\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"aarch64-linux-gnu\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"aarch64-none-elf\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"entry.S\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
#, fuzzy
msgid "\"exceptions.S\""
msgstr "Συναρτήσεις"

#: src/exercises/bare-metal/rtc.md
msgid "\"idmap.S\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "\"empty\""
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_entry.S_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
".macro adr_l, reg:req, sym:req\n"
"\tadrp \\reg, \\sym\n"
"\tadd \\reg, \\reg, :lo12:\\sym\n"
".endm\n"
"\n"
".macro mov_i, reg:req, imm:req\n"
"\tmovz \\reg, :abs_g3:\\imm\n"
"\tmovk \\reg, :abs_g2_nc:\\imm\n"
"\tmovk \\reg, :abs_g1_nc:\\imm\n"
"\tmovk \\reg, :abs_g0_nc:\\imm\n"
".endm\n"
"\n"
".set .L_MAIR_DEV_nGnRE,\t0x04\n"
".set .L_MAIR_MEM_WBWA,\t0xff\n"
".set .Lmairval, .L_MAIR_DEV_nGnRE | (.L_MAIR_MEM_WBWA << 8)\n"
"\n"
"/* 4 KiB granule size for TTBR0_EL1. */\n"
".set .L_TCR_TG0_4KB, 0x0 << 14\n"
"/* 4 KiB granule size for TTBR1_EL1. */\n"
".set .L_TCR_TG1_4KB, 0x2 << 30\n"
"/* Disable translation table walk for TTBR1_EL1, generating a translation "
"fault instead. */\n"
".set .L_TCR_EPD1, 0x1 << 23\n"
"/* Translation table walks for TTBR0_EL1 are inner sharable. */\n"
".set .L_TCR_SH_INNER, 0x3 << 12\n"
"/*\n"
" * Translation table walks for TTBR0_EL1 are outer write-back read-allocate "
"write-allocate\n"
" * cacheable.\n"
" */\n"
".set .L_TCR_RGN_OWB, 0x1 << 10\n"
"/*\n"
" * Translation table walks for TTBR0_EL1 are inner write-back read-allocate "
"write-allocate\n"
" * cacheable.\n"
" */\n"
".set .L_TCR_RGN_IWB, 0x1 << 8\n"
"/* Size offset for TTBR0_EL1 is 2**39 bytes (512 GiB). */\n"
".set .L_TCR_T0SZ_512, 64 - 39\n"
".set .Ltcrval, .L_TCR_TG0_4KB | .L_TCR_TG1_4KB | .L_TCR_EPD1 | ."
"L_TCR_RGN_OWB\n"
".set .Ltcrval, .Ltcrval | .L_TCR_RGN_IWB | .L_TCR_SH_INNER | ."
"L_TCR_T0SZ_512\n"
"\n"
"/* Stage 1 instruction access cacheability is unaffected. */\n"
".set .L_SCTLR_ELx_I, 0x1 << 12\n"
"/* SP alignment fault if SP is not aligned to a 16 byte boundary. */\n"
".set .L_SCTLR_ELx_SA, 0x1 << 3\n"
"/* Stage 1 data access cacheability is unaffected. */\n"
".set .L_SCTLR_ELx_C, 0x1 << 2\n"
"/* EL0 and EL1 stage 1 MMU enabled. */\n"
".set .L_SCTLR_ELx_M, 0x1 << 0\n"
"/* Privileged Access Never is unchanged on taking an exception to EL1. */\n"
".set .L_SCTLR_EL1_SPAN, 0x1 << 23\n"
"/* SETEND instruction disabled at EL0 in aarch32 mode. */\n"
".set .L_SCTLR_EL1_SED, 0x1 << 8\n"
"/* Various IT instructions are disabled at EL0 in aarch32 mode. */\n"
".set .L_SCTLR_EL1_ITD, 0x1 << 7\n"
".set .L_SCTLR_EL1_RES1, (0x1 << 11) | (0x1 << 20) | (0x1 << 22) | (0x1 << "
"28) | (0x1 << 29)\n"
".set .Lsctlrval, .L_SCTLR_ELx_M | .L_SCTLR_ELx_C | .L_SCTLR_ELx_SA | ."
"L_SCTLR_EL1_ITD | .L_SCTLR_EL1_SED\n"
".set .Lsctlrval, .Lsctlrval | .L_SCTLR_ELx_I | .L_SCTLR_EL1_SPAN | ."
"L_SCTLR_EL1_RES1\n"
"\n"
"/**\n"
" * This is a generic entry point for an image. It carries out the operations "
"required to prepare the\n"
" * loaded image to be run. Specifically, it zeroes the bss section using "
"registers x25 and above,\n"
" * prepares the stack, enables floating point, and sets up the exception "
"vector. It preserves x0-x3\n"
" * for the Rust entry point, as these may contain boot parameters.\n"
" */\n"
".section .init.entry, \"ax\"\n"
".global entry\n"
"entry:\n"
"\t/* Load and apply the memory management configuration, ready to enable MMU "
"and caches. */\n"
"\tadrp x30, idmap\n"
"\tmsr ttbr0_el1, x30\n"
"\n"
"\tmov_i x30, .Lmairval\n"
"\tmsr mair_el1, x30\n"
"\n"
"\tmov_i x30, .Ltcrval\n"
"\t/* Copy the supported PA range into TCR_EL1.IPS. */\n"
"\tmrs x29, id_aa64mmfr0_el1\n"
"\tbfi x30, x29, #32, #4\n"
"\n"
"\tmsr tcr_el1, x30\n"
"\n"
"\tmov_i x30, .Lsctlrval\n"
"\n"
"\t/*\n"
"\t * Ensure everything before this point has completed, then invalidate any "
"potentially stale\n"
"\t * local TLB entries before they start being used.\n"
"\t */\n"
"\tisb\n"
"\ttlbi vmalle1\n"
"\tic iallu\n"
"\tdsb nsh\n"
"\tisb\n"
"\n"
"\t/*\n"
"\t * Configure sctlr_el1 to enable MMU and cache and don't proceed until "
"this has completed.\n"
"\t */\n"
"\tmsr sctlr_el1, x30\n"
"\tisb\n"
"\n"
"\t/* Disable trapping floating point access in EL1. */\n"
"\tmrs x30, cpacr_el1\n"
"\torr x30, x30, #(0x3 << 20)\n"
"\tmsr cpacr_el1, x30\n"
"\tisb\n"
"\n"
"\t/* Zero out the bss section. */\n"
"\tadr_l x29, bss_begin\n"
"\tadr_l x30, bss_end\n"
"0:\tcmp x29, x30\n"
"\tb.hs 1f\n"
"\tstp xzr, xzr, [x29], #16\n"
"\tb 0b\n"
"\n"
"1:\t/* Prepare the stack. */\n"
"\tadr_l x30, boot_stack_end\n"
"\tmov sp, x30\n"
"\n"
"\t/* Set up exception vector. */\n"
"\tadr x30, vector_table_el1\n"
"\tmsr vbar_el1, x30\n"
"\n"
"\t/* Call into Rust code. */\n"
"\tbl main\n"
"\n"
"\t/* Loop forever waiting for interrupts. */\n"
"2:\twfi\n"
"\tb 2b\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_exceptions.S_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"/**\n"
" * Saves the volatile registers onto the stack. This currently takes 14\n"
" * instructions, so it can be used in exception handlers with 18 "
"instructions\n"
" * left.\n"
" *\n"
" * On return, x0 and x1 are initialised to elr_el2 and spsr_el2 "
"respectively,\n"
" * which can be used as the first and second arguments of a subsequent "
"call.\n"
" */\n"
".macro save_volatile_to_stack\n"
"\t/* Reserve stack space and save registers x0-x18, x29 & x30. */\n"
"\tstp x0, x1, [sp, #-(8 * 24)]!\n"
"\tstp x2, x3, [sp, #8 * 2]\n"
"\tstp x4, x5, [sp, #8 * 4]\n"
"\tstp x6, x7, [sp, #8 * 6]\n"
"\tstp x8, x9, [sp, #8 * 8]\n"
"\tstp x10, x11, [sp, #8 * 10]\n"
"\tstp x12, x13, [sp, #8 * 12]\n"
"\tstp x14, x15, [sp, #8 * 14]\n"
"\tstp x16, x17, [sp, #8 * 16]\n"
"\tstr x18, [sp, #8 * 18]\n"
"\tstp x29, x30, [sp, #8 * 20]\n"
"\n"
"\t/*\n"
"\t * Save elr_el1 & spsr_el1. This such that we can take nested exception\n"
"\t * and still be able to unwind.\n"
"\t */\n"
"\tmrs x0, elr_el1\n"
"\tmrs x1, spsr_el1\n"
"\tstp x0, x1, [sp, #8 * 22]\n"
".endm\n"
"\n"
"/**\n"
" * Restores the volatile registers from the stack. This currently takes 14\n"
" * instructions, so it can be used in exception handlers while still leaving "
"18\n"
" * instructions left; if paired with save_volatile_to_stack, there are 4\n"
" * instructions to spare.\n"
" */\n"
".macro restore_volatile_from_stack\n"
"\t/* Restore registers x2-x18, x29 & x30. */\n"
"\tldp x2, x3, [sp, #8 * 2]\n"
"\tldp x4, x5, [sp, #8 * 4]\n"
"\tldp x6, x7, [sp, #8 * 6]\n"
"\tldp x8, x9, [sp, #8 * 8]\n"
"\tldp x10, x11, [sp, #8 * 10]\n"
"\tldp x12, x13, [sp, #8 * 12]\n"
"\tldp x14, x15, [sp, #8 * 14]\n"
"\tldp x16, x17, [sp, #8 * 16]\n"
"\tldr x18, [sp, #8 * 18]\n"
"\tldp x29, x30, [sp, #8 * 20]\n"
"\n"
"\t/* Restore registers elr_el1 & spsr_el1, using x0 & x1 as scratch. */\n"
"\tldp x0, x1, [sp, #8 * 22]\n"
"\tmsr elr_el1, x0\n"
"\tmsr spsr_el1, x1\n"
"\n"
"\t/* Restore x0 & x1, and release stack space. */\n"
"\tldp x0, x1, [sp], #8 * 24\n"
".endm\n"
"\n"
"/**\n"
" * This is a generic handler for exceptions taken at the current EL while "
"using\n"
" * SP0. It behaves similarly to the SPx case by first switching to SPx, "
"doing\n"
" * the work, then switching back to SP0 before returning.\n"
" *\n"
" * Switching to SPx and calling the Rust handler takes 16 instructions. To\n"
" * restore and return we need an additional 16 instructions, so we can "
"implement\n"
" * the whole handler within the allotted 32 instructions.\n"
" */\n"
".macro current_exception_sp0 handler:req\n"
"\tmsr spsel, #1\n"
"\tsave_volatile_to_stack\n"
"\tbl \\handler\n"
"\trestore_volatile_from_stack\n"
"\tmsr spsel, #0\n"
"\teret\n"
".endm\n"
"\n"
"/**\n"
" * This is a generic handler for exceptions taken at the current EL while "
"using\n"
" * SPx. It saves volatile registers, calls the Rust handler, restores "
"volatile\n"
" * registers, then returns.\n"
" *\n"
" * This also works for exceptions taken from EL0, if we don't care about\n"
" * non-volatile registers.\n"
" *\n"
" * Saving state and jumping to the Rust handler takes 15 instructions, and\n"
" * restoring and returning also takes 15 instructions, so we can fit the "
"whole\n"
" * handler in 30 instructions, under the limit of 32.\n"
" */\n"
".macro current_exception_spx handler:req\n"
"\tsave_volatile_to_stack\n"
"\tbl \\handler\n"
"\trestore_volatile_from_stack\n"
"\teret\n"
".endm\n"
"\n"
".section .text.vector_table_el1, \"ax\"\n"
".global vector_table_el1\n"
".balign 0x800\n"
"vector_table_el1:\n"
"sync_cur_sp0:\n"
"\tcurrent_exception_sp0 sync_exception_current\n"
"\n"
".balign 0x80\n"
"irq_cur_sp0:\n"
"\tcurrent_exception_sp0 irq_current\n"
"\n"
".balign 0x80\n"
"fiq_cur_sp0:\n"
"\tcurrent_exception_sp0 fiq_current\n"
"\n"
".balign 0x80\n"
"serr_cur_sp0:\n"
"\tcurrent_exception_sp0 serr_current\n"
"\n"
".balign 0x80\n"
"sync_cur_spx:\n"
"\tcurrent_exception_spx sync_exception_current\n"
"\n"
".balign 0x80\n"
"irq_cur_spx:\n"
"\tcurrent_exception_spx irq_current\n"
"\n"
".balign 0x80\n"
"fiq_cur_spx:\n"
"\tcurrent_exception_spx fiq_current\n"
"\n"
".balign 0x80\n"
"serr_cur_spx:\n"
"\tcurrent_exception_spx serr_current\n"
"\n"
".balign 0x80\n"
"sync_lower_64:\n"
"\tcurrent_exception_spx sync_lower\n"
"\n"
".balign 0x80\n"
"irq_lower_64:\n"
"\tcurrent_exception_spx irq_lower\n"
"\n"
".balign 0x80\n"
"fiq_lower_64:\n"
"\tcurrent_exception_spx fiq_lower\n"
"\n"
".balign 0x80\n"
"serr_lower_64:\n"
"\tcurrent_exception_spx serr_lower\n"
"\n"
".balign 0x80\n"
"sync_lower_32:\n"
"\tcurrent_exception_spx sync_lower\n"
"\n"
".balign 0x80\n"
"irq_lower_32:\n"
"\tcurrent_exception_spx irq_lower\n"
"\n"
".balign 0x80\n"
"fiq_lower_32:\n"
"\tcurrent_exception_spx fiq_lower\n"
"\n"
".balign 0x80\n"
"serr_lower_32:\n"
"\tcurrent_exception_spx serr_lower\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_idmap.S_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
".set .L_TT_TYPE_BLOCK, 0x1\n"
".set .L_TT_TYPE_PAGE,  0x3\n"
".set .L_TT_TYPE_TABLE, 0x3\n"
"\n"
"/* Access flag. */\n"
".set .L_TT_AF, 0x1 << 10\n"
"/* Not global. */\n"
".set .L_TT_NG, 0x1 << 11\n"
".set .L_TT_XN, 0x3 << 53\n"
"\n"
".set .L_TT_MT_DEV, 0x0 << 2\t\t\t// MAIR #0 (DEV_nGnRE)\n"
".set .L_TT_MT_MEM, (0x1 << 2) | (0x3 << 8)\t// MAIR #1 (MEM_WBWA), inner "
"shareable\n"
"\n"
".set .L_BLOCK_DEV, .L_TT_TYPE_BLOCK | .L_TT_MT_DEV | .L_TT_AF | .L_TT_XN\n"
".set .L_BLOCK_MEM, .L_TT_TYPE_BLOCK | .L_TT_MT_MEM | .L_TT_AF | .L_TT_NG\n"
"\n"
".section \".rodata.idmap\", \"a\", %progbits\n"
".global idmap\n"
".align 12\n"
"idmap:\n"
"\t/* level 1 */\n"
"\t.quad\t\t.L_BLOCK_DEV | 0x0\t\t    // 1 GiB of device mappings\n"
"\t.quad\t\t.L_BLOCK_MEM | 0x40000000\t// 1 GiB of DRAM\n"
"\t.fill\t\t254, 8, 0x0\t\t\t// 254 GiB of unmapped VA space\n"
"\t.quad\t\t.L_BLOCK_DEV | 0x4000000000 // 1 GiB of device mappings\n"
"\t.fill\t\t255, 8, 0x0\t\t\t// 255 GiB of remaining VA space\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_image.ld_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"```ld\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"/*\n"
" * Code will start running at this symbol which is placed at the start of "
"the\n"
" * image.\n"
" */\n"
"ENTRY(entry)\n"
"\n"
"MEMORY\n"
"{\n"
"\timage : ORIGIN = 0x40080000, LENGTH = 2M\n"
"}\n"
"\n"
"SECTIONS\n"
"{\n"
"\t/*\n"
"\t * Collect together the code.\n"
"\t */\n"
"\t.init : ALIGN(4096) {\n"
"\t\ttext_begin = .;\n"
"\t\t*(.init.entry)\n"
"\t\t*(.init.*)\n"
"\t} >image\n"
"\t.text : {\n"
"\t\t*(.text.*)\n"
"\t} >image\n"
"\ttext_end = .;\n"
"\n"
"\t/*\n"
"\t * Collect together read-only data.\n"
"\t */\n"
"\t.rodata : ALIGN(4096) {\n"
"\t\trodata_begin = .;\n"
"\t\t*(.rodata.*)\n"
"\t} >image\n"
"\t.got : {\n"
"\t\t*(.got)\n"
"\t} >image\n"
"\trodata_end = .;\n"
"\n"
"\t/*\n"
"\t * Collect together the read-write data including .bss at the end which\n"
"\t * will be zero'd by the entry code.\n"
"\t */\n"
"\t.data : ALIGN(4096) {\n"
"\t\tdata_begin = .;\n"
"\t\t*(.data.*)\n"
"\t\t/*\n"
"\t\t * The entry point code assumes that .data is a multiple of 32\n"
"\t\t * bytes long.\n"
"\t\t */\n"
"\t\t. = ALIGN(32);\n"
"\t\tdata_end = .;\n"
"\t} >image\n"
"\n"
"\t/* Everything beyond this point will not be included in the binary. */\n"
"\tbin_end = .;\n"
"\n"
"\t/* The entry point code assumes that .bss is 16-byte aligned. */\n"
"\t.bss : ALIGN(16)  {\n"
"\t\tbss_begin = .;\n"
"\t\t*(.bss.*)\n"
"\t\t*(COMMON)\n"
"\t\t. = ALIGN(16);\n"
"\t\tbss_end = .;\n"
"\t} >image\n"
"\n"
"\t.stack (NOLOAD) : ALIGN(4096) {\n"
"\t\tboot_stack_begin = .;\n"
"\t\t. += 40 * 4096;\n"
"\t\t. = ALIGN(4096);\n"
"\t\tboot_stack_end = .;\n"
"\t} >image\n"
"\n"
"\t. = ALIGN(4K);\n"
"\tPROVIDE(dma_region = .);\n"
"\n"
"\t/*\n"
"\t * Remove unused sections from the image.\n"
"\t */\n"
"\t/DISCARD/ : {\n"
"\t\t/* The image loads itself so doesn't need these sections. */\n"
"\t\t*(.gnu.hash)\n"
"\t\t*(.hash)\n"
"\t\t*(.interp)\n"
"\t\t*(.eh_frame_hdr)\n"
"\t\t*(.eh_frame)\n"
"\t\t*(.note.gnu.build-id)\n"
"\t}\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_Makefile_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "# Copyright 2023 Google LLC"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "$(shell uname -s)"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "aarch64-linux-gnu"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "stdio -display none -kernel $< -s"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "cargo clean"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "Run the code in QEMU with `make qemu`."
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "Bare Metal Rust Afternoon"
msgstr "Rust χωρίς λειτουργικό σύστημα Απόγευμα"

#: src/exercises/bare-metal/solutions-afternoon.md
#, fuzzy
msgid "([back to exercise](rtc.md))"
msgstr "([επιστροφή στην άσκηση](luhn.md))"

#: src/exercises/bare-metal/solutions-afternoon.md
#, fuzzy
msgid "_main.rs_:"
msgstr "_hello_rust/src/main.rs_:"

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Base address of the PL031 RTC.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// The IRQ used by the PL031 RTC.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"// Safe because `PL031_BASE_ADDRESS` is the base address of a PL031 device,\n"
"    // and nothing else accesses that address range.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"RTC: {time}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "// Wait for 3 seconds, without interrupts.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"Waiting for {}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"matched={}, interrupt_pending={}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"Finished waiting\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "// Wait another 3 seconds for an interrupt.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "_pl031.rs_:"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Data register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Match register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Load register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Control register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Interrupt Mask Set or Clear register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Raw Interrupt Status\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Masked Interrupt Status\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Interrupt Clear Register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Driver for a PL031 real-time clock.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Constructs a new instance of the RTC driver for a PL031 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL031 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Reads the current RTC value.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL031 device which is appropriately mapped.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Writes a match value. When the RTC value matches this then an interrupt\n"
"    /// will be generated (if it is enabled).\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Returns whether the match register matches the RTC value, whether or "
"not\n"
"    /// the interrupt is enabled.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Returns whether there is currently an interrupt pending.\n"
"    ///\n"
"    /// This should be true if and only if `matched` returns true and the\n"
"    /// interrupt is masked.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Sets or clears the interrupt mask.\n"
"    ///\n"
"    /// When the mask is true the interrupt is enabled; when it is false "
"the\n"
"    /// interrupt is disabled.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Clears a pending interrupt, if any.\n"
msgstr ""

#: src/concurrency.md
#, fuzzy
msgid "Welcome to Concurrency in Rust"
msgstr "Καλώς ήρθατε στην Comprehensive Rust 🦀"

#: src/concurrency.md
#, fuzzy
msgid ""
"Rust has full support for concurrency using OS threads with mutexes and "
"channels."
msgstr ""
"Το Rust έχει πλήρη υποστήριξη για ταυτόχρονη χρήση νημάτων λειτουργικού "
"συστήματος με mutexes και καναλιών."

#: src/concurrency.md
#, fuzzy
msgid ""
"The Rust type system plays an important role in making many concurrency bugs "
"compile time bugs. This is often referred to as _fearless concurrency_ since "
"you can rely on the compiler to ensure correctness at runtime."
msgstr ""
"Το σύστημα τύπου Rust παίζει σημαντικό ρόλο στη δημιουργία πολλών σφαλμάτων "
"συγχρονισμού μεταγλώττιση χρονικών σφαλμάτων. Αυτό αναφέρεται συχνά ως "
"_ατρόμητος συγχρονισμός_ αφού εσείς μπορεί να βασιστεί στον μεταγλωττιστή "
"για να διασφαλίσει την ορθότητα κατά το χρόνο εκτέλεσης."

#: src/concurrency/threads.md
#, fuzzy
msgid "Rust threads work similarly to threads in other languages:"
msgstr "Τα νήματα σκουριάς λειτουργούν παρόμοια με τα νήματα σε άλλες γλώσσες:"

#: src/concurrency/threads.md
msgid "\"Count in thread: {i}!\""
msgstr ""

#: src/concurrency/threads.md
msgid "\"Main thread: {i}\""
msgstr ""

#: src/concurrency/threads.md
#, fuzzy
msgid "Threads are all daemon threads, the main thread does not wait for them."
msgstr "Τα νήματα είναι όλα νήματα δαίμονα, το κύριο νήμα δεν τα περιμένει."

#: src/concurrency/threads.md
#, fuzzy
msgid "Thread panics are independent of each other."
msgstr "Οι πανικοί των νημάτων είναι ανεξάρτητοι ο ένας από τον άλλο."

#: src/concurrency/threads.md
#, fuzzy
msgid "Panics can carry a payload, which can be unpacked with `downcast_ref`."
msgstr ""
"Οι πανικοί μπορούν να μεταφέρουν ένα ωφέλιμο φορτίο, το οποίο μπορεί να "
"αποσυμπιεστεί με το «downcast_ref»."

#: src/concurrency/threads.md
msgid ""
"Notice that the thread is stopped before it reaches 10 --- the main thread "
"is not waiting."
msgstr ""

#: src/concurrency/threads.md
msgid ""
"Use `let handle = thread::spawn(...)` and later `handle.join()` to wait for "
"the thread to finish."
msgstr ""

#: src/concurrency/threads.md
msgid "Trigger a panic in the thread, notice how this doesn't affect `main`."
msgstr ""

#: src/concurrency/threads.md
msgid ""
"Use the `Result` return value from `handle.join()` to get access to the "
"panic payload. This is a good time to talk about [`Any`](https://doc.rust-"
"lang.org/std/any/index.html)."
msgstr ""

#: src/concurrency/scoped-threads.md
#, fuzzy
msgid "Normal threads cannot borrow from their environment:"
msgstr "Τα κανονικά νήματα δεν μπορούν να δανειστούν από το περιβάλλον τους:"

#: src/concurrency/scoped-threads.md
#, fuzzy
msgid ""
"However, you can use a [scoped thread](https://doc.rust-lang.org/std/thread/"
"fn.scope.html) for this:"
msgstr ""
"Ωστόσο, μπορείτε να χρησιμοποιήσετε ένα [νήμα εμβέλειας](https://doc.rust-"
"lang.org/std/thread/fn.scope.html) για αυτό:"

#: src/concurrency/scoped-threads.md
#, fuzzy
msgid ""
"The reason for that is that when the `thread::scope` function completes, all "
"the threads are guaranteed to be joined, so they can return borrowed data."
msgstr "\\<λεπτομέρειες>"

#: src/concurrency/scoped-threads.md
#, fuzzy
msgid ""
"Normal Rust borrowing rules apply: you can either borrow mutably by one "
"thread, or immutably by any number of threads."
msgstr ""
"Ο λόγος για αυτό είναι ότι όταν ολοκληρωθεί η συνάρτηση `thread::scope`, όλα "
"τα νήματα είναι εγγυημένα ότι θα ενωθούν, ώστε να μπορούν να επιστρέψουν τα "
"δεδομένα που έχουν δανειστεί.\n"
"\n"
"Ισχύουν οι κανονικοί κανόνες δανεισμού Rust: μπορείτε είτε να δανειστείτε "
"μεταλλάξιμα με ένα νήμα ή αμετάβλητα με οποιονδήποτε αριθμό νημάτων."

#: src/concurrency/channels.md
#, fuzzy
msgid ""
"Rust channels have two parts: a `Sender<T>` and a `Receiver<T>`. The two "
"parts are connected via the channel, but you only see the end-points."
msgstr ""
"Τα κανάλια Rust έχουν δύο μέρη: ένα \"Αποστολέας\n"
"\n"
"\" και ένα \"Δέκτης\n"
"\n"
"\". Τα δύο μέρη συνδέονται μέσω του καναλιού, αλλά βλέπετε μόνο τα τελικά "
"σημεία."

#: src/concurrency/channels.md
msgid "\"Received: {:?}\""
msgstr ""

#: src/concurrency/channels.md
#, fuzzy
msgid ""
"`mpsc` stands for Multi-Producer, Single-Consumer. `Sender` and `SyncSender` "
"implement `Clone` (so you can make multiple producers) but `Receiver` does "
"not."
msgstr ""
"Το «mpsc» σημαίνει Multi-Producer, Single-Consumer. Το \"Sender\" και το "
"\"SyncSender\" υλοποιούν το \"Clone\" (έτσι μπορείτε να δημιουργήσετε "
"πολλούς παραγωγούς) αλλά ο «Δέκτης» όχι."

#: src/concurrency/channels.md
#, fuzzy
msgid ""
"`send()` and `recv()` return `Result`. If they return `Err`, it means the "
"counterpart `Sender` or `Receiver` is dropped and the channel is closed."
msgstr ""
"Το \"send()\" και το \"recv()\" επιστρέφουν \"Αποτέλεσμα\". Εάν επιστρέψουν "
"\"Err\", σημαίνει το αντίστοιχο \"Αποστολέας\" ή Ο \"δέκτης\" πέφτει και το "
"κανάλι είναι κλειστό."

#: src/concurrency/channels/unbounded.md
#, fuzzy
msgid "You get an unbounded and asynchronous channel with `mpsc::channel()`:"
msgstr "Λαμβάνετε ένα απεριόριστο και ασύγχρονο κανάλι με `mpsc::channel()`:"

#: src/concurrency/channels/unbounded.md src/concurrency/channels/bounded.md
msgid "\"Message {i}\""
msgstr ""

#: src/concurrency/channels/unbounded.md src/concurrency/channels/bounded.md
msgid "\"{thread_id:?}: sent Message {i}\""
msgstr ""

#: src/concurrency/channels/unbounded.md src/concurrency/channels/bounded.md
msgid "\"{thread_id:?}: done\""
msgstr ""

#: src/concurrency/channels/unbounded.md src/concurrency/channels/bounded.md
msgid "\"Main: got {msg}\""
msgstr ""

#: src/concurrency/channels/bounded.md
#, fuzzy
msgid ""
"With bounded (synchronous) channels, `send` can block the current thread:"
msgstr ""
"Τα περιορισμένα και τα σύγχρονα κανάλια κάνουν το \"send\" να μπλοκάρει το "
"τρέχον νήμα:"

#: src/concurrency/channels/bounded.md
msgid ""
"Calling `send` will block the current thread until there is space in the "
"channel for the new message. The thread can be blocked indefinitely if there "
"is nobody who reads from the channel."
msgstr ""

#: src/concurrency/channels/bounded.md
msgid ""
"A call to `send` will abort with an error (that is why it returns `Result`) "
"if the channel is closed. A channel is closed when the receiver is dropped."
msgstr ""

#: src/concurrency/channels/bounded.md
msgid ""
"A bounded channel with a size of zero is called a \"rendezvous channel\". "
"Every send will block the current thread until another thread calls `read`."
msgstr ""

#: src/concurrency/send-sync.md
#, fuzzy
msgid ""
"How does Rust know to forbid shared access across threads? The answer is in "
"two traits:"
msgstr ""
"Πώς γνωρίζει η Rust ότι απαγορεύει την κοινόχρηστη πρόσβαση σε όλα τα "
"νήματα; Η απάντηση είναι σε δύο χαρακτηριστικά:"

#: src/concurrency/send-sync.md
#, fuzzy
msgid ""
"[`Send`](https://doc.rust-lang.org/std/marker/trait.Send.html): a type `T` "
"is `Send` if it is safe to move a `T` across a thread boundary."
msgstr ""
"[\"Αποστολή\"](https://doc.rust-lang.org/std/marker/trait.Send.html): ένας "
"τύπος \"T\" είναι \"Αποστολή\" εάν είναι ασφαλές να μετακινήσετε ένα \"T\" "
"σε ένα νήμα Όριο."

#: src/concurrency/send-sync.md
#, fuzzy
msgid ""
"[`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html): a type `T` "
"is `Sync` if it is safe to move a `&T` across a thread boundary."
msgstr ""
"[\"Συγχρονισμός\"](https://doc.rust-lang.org/std/marker/trait.Sync.html): "
"ένας τύπος \"T\" είναι \"Συγχρονισμός\" εάν είναι ασφαλές να μετακινήσετε "
"ένα \"&T\" σε ένα νήμα Όριο."

#: src/concurrency/send-sync.md
#, fuzzy
msgid ""
"`Send` and `Sync` are [unsafe traits](../unsafe/unsafe-traits.md). The "
"compiler will automatically derive them for your types as long as they only "
"contain `Send` and `Sync` types. You can also implement them manually when "
"you know it is valid."
msgstr ""
"Η \"Αποστολή\" και η \"Συγχρονισμός\" είναι [μη ασφαλή χαρακτηριστικά](../"
"unsafe/unsafe-traits.md). Ο μεταγλωττιστής θα τα παράγει αυτόματα για τους "
"τύπους σας εφόσον περιέχουν μόνο τύπους «Αποστολή» και «Συγχρονισμός». "
"Μπορείτε επίσης να τα εφαρμόσετε χειροκίνητα όταν το κάνετε να ξέρεις ότι "
"ισχύει."

#: src/concurrency/send-sync.md
#, fuzzy
msgid ""
"One can think of these traits as markers that the type has certain thread-"
"safety properties."
msgstr ""
"Κάποιος μπορεί να σκεφτεί αυτά τα χαρακτηριστικά ως δείκτες ότι ο τύπος έχει "
"ορισμένες ιδιότητες ασφαλείας νήματος."

#: src/concurrency/send-sync.md
#, fuzzy
msgid "They can be used in the generic constraints as normal traits."
msgstr ""
"Μπορούν να χρησιμοποιηθούν στους γενικούς περιορισμούς ως φυσιολογικά "
"χαρακτηριστικά."

#: src/concurrency/send-sync/send.md
#, fuzzy
msgid ""
"A type `T` is [`Send`](https://doc.rust-lang.org/std/marker/trait.Send.html) "
"if it is safe to move a `T` value to another thread."
msgstr ""
"Ένας τύπος `T` είναι [`Αποστολή`](https://doc.rust-lang.org/std/marker/trait."
"Send.html) εάν είναι ασφαλές να μετακινήσετε μια τιμή `T` σε άλλο νήμα."

#: src/concurrency/send-sync/send.md
#, fuzzy
msgid ""
"The effect of moving ownership to another thread is that _destructors_ will "
"run in that thread. So the question is when you can allocate a value in one "
"thread and deallocate it in another."
msgstr ""
"Το αποτέλεσμα της μετακίνησης ιδιοκτησίας σε άλλο νήμα είναι ότι οι "
"_destructors_ θα εκτελεστούν σε αυτό το νήμα. Το ερώτημα λοιπόν είναι πότε "
"μπορείτε να εκχωρήσετε μια τιμή σε ένα νήμα και να το διαθέσει σε άλλο."

#: src/concurrency/send-sync/send.md
msgid ""
"As an example, a connection to the SQLite library must only be accessed from "
"a single thread."
msgstr ""

#: src/concurrency/send-sync/sync.md
#, fuzzy
msgid ""
"A type `T` is [`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html) "
"if it is safe to access a `T` value from multiple threads at the same time."
msgstr ""
"Ένας τύπος `T` είναι [`Συγχρονισμός`](https://doc.rust-lang.org/std/marker/"
"trait.Sync.html) εάν είναι ασφαλής η πρόσβαση σε μια τιμή `T` από πολλαπλές "
"νήματα ταυτόχρονα."

#: src/concurrency/send-sync/sync.md
#, fuzzy
msgid "More precisely, the definition is:"
msgstr "Πιο συγκεκριμένα, ο ορισμός είναι:"

#: src/concurrency/send-sync/sync.md
#, fuzzy
msgid "`T` is `Sync` if and only if `&T` is `Send`"
msgstr ""
"Το \"T\" είναι \"Συγχρονισμός\" εάν και μόνο εάν το \"&T\" είναι "
"\"Αποστολή\"."

#: src/concurrency/send-sync/sync.md
#, fuzzy
msgid ""
"This statement is essentially a shorthand way of saying that if a type is "
"thread-safe for shared use, it is also thread-safe to pass references of it "
"across threads."
msgstr ""
"Αυτή η δήλωση είναι ουσιαστικά ένας συνοπτικός τρόπος για να πούμε ότι εάν "
"ένας τύπος είναι ασφαλής ως προς το νήμα για κοινόχρηστη χρήση, είναι επίσης "
"ασφαλές για το νήμα να μεταβιβάζονται οι αναφορές του στα νήματα."

#: src/concurrency/send-sync/sync.md
#, fuzzy
msgid ""
"This is because if a type is Sync it means that it can be shared across "
"multiple threads without the risk of data races or other synchronization "
"issues, so it is safe to move it to another thread. A reference to the type "
"is also safe to move to another thread, because the data it references can "
"be accessed from any thread safely."
msgstr ""
"Αυτό συμβαίνει επειδή εάν ένας τύπος είναι Sync σημαίνει ότι μπορεί να "
"κοινοποιηθεί σε πολλά νήματα χωρίς τον κίνδυνο φυλών δεδομένων ή άλλων "
"προβλημάτων συγχρονισμού, επομένως είναι ασφαλές να τον μετακινήσετε σε άλλο "
"νήμα. Μια αναφορά στον τύπο είναι επίσης ασφαλής να μετακινηθεί σε άλλο "
"νήμα, επειδή τα δεδομένα που παραπέμπει είναι προσβάσιμα από οποιοδήποτε "
"νήμα με ασφάλεια."

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "`Send + Sync`"
msgstr "«Αποστολή + Συγχρονισμός»."

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "Most types you come across are `Send + Sync`:"
msgstr "Οι περισσότεροι τύποι που συναντάτε είναι «Αποστολή + Συγχρονισμός»:"

#: src/concurrency/send-sync/examples.md
msgid "`i8`, `f32`, `bool`, `char`, `&str`, ..."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`(T1, T2)`, `[T; N]`, `&[T]`, `struct { x: T }`, ..."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`String`, `Option<T>`, `Vec<T>`, `Box<T>`, ..."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`Arc<T>`: Explicitly thread-safe via atomic reference count."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`Mutex<T>`: Explicitly thread-safe via internal locking."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`AtomicBool`, `AtomicU8`, ...: Uses special atomic instructions."
msgstr ""

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid ""
"The generic types are typically `Send + Sync` when the type parameters are "
"`Send + Sync`."
msgstr ""
"Οι γενικοί τύποι είναι συνήθως «Αποστολή + Συγχρονισμός» όταν οι παράμετροι "
"τύπου είναι «Αποστολή + Συγχρονισμός»."

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "`Send + !Sync`"
msgstr "`Αποστολή + !Συγχρονισμός`"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid ""
"These types can be moved to other threads, but they're not thread-safe. "
"Typically because of interior mutability:"
msgstr ""
"Αυτοί οι τύποι μπορούν να μετακινηθούν σε άλλα νήματα, αλλά δεν είναι "
"ασφαλείς για νήματα. Τυπικά λόγω της εσωτερικής μεταβλητότητας:"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "`mpsc::Sender<T>`"
msgstr "`mpsc::Αποστολέας<T>`"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "`mpsc::Receiver<T>`"
msgstr "`mpsc::Δέκτης<T>`"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "`Cell<T>`"
msgstr "`Κελλί<T>`"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "`RefCell<T>`"
msgstr "`RefCell<T>`"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "`!Send + Sync`"
msgstr "`!Αποστολή + Συγχρονισμός`"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid ""
"These types are thread-safe, but they cannot be moved to another thread:"
msgstr ""
"Αυτοί οι τύποι είναι ασφαλείς για νήμα, αλλά δεν μπορούν να μετακινηθούν σε "
"άλλο νήμα:"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid ""
"`MutexGuard<T: Sync>`: Uses OS level primitives which must be deallocated on "
"the thread which created them."
msgstr ""
"`MutexGuard<T>`: Χρησιμοποιεί πρωτόγονα επιπέδου λειτουργικού συστήματος που "
"πρέπει να κατανεμηθούν στο νήμα που τα δημιούργησε."

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "`!Send + !Sync`"
msgstr "`!Αποστολή + !Συγχρονισμός`"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "These types are not thread-safe and cannot be moved to other threads:"
msgstr ""
"Αυτοί οι τύποι δεν είναι ασφαλείς για νήμα και δεν μπορούν να μετακινηθούν "
"σε άλλα νήματα:"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid ""
"`Rc<T>`: each `Rc<T>` has a reference to an `RcBox<T>`, which contains a non-"
"atomic reference count."
msgstr "`Rc<T>`: κάθε «Rc"

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid ""
"`*const T`, `*mut T`: Rust assumes raw pointers may have special concurrency "
"considerations."
msgstr ""
"» έχει μια αναφορά σε ένα «RcBox\n"
"\n"
"», το οποίο περιέχει ένα μη ατομική μέτρηση αναφοράς.\n"
"\n"
"`*const T`, `*mut T`: Το Rust υποθέτει ότι οι ακατέργαστοι δείκτες μπορεί να "
"έχουν ειδικούς ζητήματα ταυτόχρονης ύπαρξης."

#: src/concurrency/shared_state.md
#, fuzzy
msgid ""
"Rust uses the type system to enforce synchronization of shared data. This is "
"primarily done via two types:"
msgstr ""
"Το Rust χρησιμοποιεί το σύστημα τύπων για να επιβάλει το συγχρονισμό των "
"κοινόχρηστων δεδομένων. Αυτό είναι γίνεται κυρίως μέσω δύο τύπων:"

#: src/concurrency/shared_state.md
#, fuzzy
msgid ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html), atomic "
"reference counted `T`: handles sharing between threads and takes care to "
"deallocate `T` when the last reference is dropped,"
msgstr ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html), η ατομική "
"αναφορά μετράται ως \"T\": χειρίζεται την κοινή χρήση μεταξύ νημάτων και "
"φροντίζει να κατανείμει το \"T\" όταν απορριφθεί η τελευταία αναφορά,"

#: src/concurrency/shared_state.md
#, fuzzy
msgid ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html): ensures "
"mutually exclusive access to the `T` value."
msgstr ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html): "
"εξασφαλίζει αμοιβαία αποκλειστική πρόσβαση στην τιμή \"T\"."

#: src/concurrency/shared_state/arc.md
#, fuzzy
msgid ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html) allows shared "
"read-only access via `Arc::clone`:"
msgstr ""
"Το [`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html) επιτρέπει "
"την κοινόχρηστη πρόσβαση μόνο για ανάγνωση μέσω της μεθόδου \"clone\" του:"

#: src/concurrency/shared_state/arc.md
msgid "\"{thread_id:?}: {v:?}\""
msgstr ""

#: src/concurrency/shared_state/arc.md src/concurrency/shared_state/example.md
msgid "\"v: {v:?}\""
msgstr ""

#: src/concurrency/shared_state/arc.md
#, fuzzy
msgid ""
"`Arc` stands for \"Atomic Reference Counted\", a thread safe version of `Rc` "
"that uses atomic operations."
msgstr ""
"Το \"Arc\" σημαίνει \"Atomic Reference Counted\", μια ασφαλής έκδοση νημάτων "
"του \"Rc\" που χρησιμοποιεί ατομική επιχειρήσεις."

#: src/concurrency/shared_state/arc.md
#, fuzzy
msgid ""
"`Arc<T>` implements `Clone` whether or not `T` does. It implements `Send` "
"and `Sync` if and only if `T` implements them both."
msgstr "Το \"Arc"

#: src/concurrency/shared_state/arc.md
#, fuzzy
msgid ""
"`Arc::clone()` has the cost of atomic operations that get executed, but "
"after that the use of the `T` is free."
msgstr ""
"\" υλοποιεί το \"Clone\" είτε το κάνει το \"T\" είτε όχι. Εφαρμόζει "
"«Αποστολή» και «Συγχρονισμός» αν «T». τα εφαρμόζει και τα δύο."

#: src/concurrency/shared_state/arc.md
#, fuzzy
msgid ""
"Beware of reference cycles, `Arc` does not use a garbage collector to detect "
"them."
msgstr ""
"Το \"Arc::clone()\" έχει το κόστος των ατομικών λειτουργιών που εκτελούνται, "
"αλλά μετά από αυτό η χρήση του Το \"T\" είναι δωρεάν."

#: src/concurrency/shared_state/arc.md
#, fuzzy
msgid "`std::sync::Weak` can help."
msgstr ""
"Προσοχή στους κύκλους αναφοράς, το «Arc» δεν χρησιμοποιεί συλλέκτη "
"σκουπιδιών για να τους εντοπίσει.\n"
"\n"
"Το `std::sync::Weak` μπορεί να βοηθήσει."

#: src/concurrency/shared_state/mutex.md
#, fuzzy
msgid ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html) ensures "
"mutual exclusion _and_ allows mutable access to `T` behind a read-only "
"interface (another form of [interior mutability](../../borrowing/interior-"
"mutability)):"
msgstr ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html) "
"διασφαλίζει την αμοιβαία εξαίρεση _και_ επιτρέπει τη μεταβλητή πρόσβαση στο "
"\"T\" πίσω από μια διεπαφή μόνο για ανάγνωση:"

#: src/concurrency/shared_state/mutex.md
msgid "\"v: {:?}\""
msgstr ""

#: src/concurrency/shared_state/mutex.md
#, fuzzy
msgid ""
"Notice how we have a [`impl<T: Send> Sync for Mutex<T>`](https://doc.rust-"
"lang.org/std/sync/struct.Mutex.html#impl-Sync-for-Mutex%3CT%3E) blanket "
"implementation."
msgstr ""
"Παρατηρήστε πώς έχουμε μια κουβέρτα [`impl<T: Send> Sync for Mutex<T>`]"
"(https://doc.rust-lang.org/std/sync/struct.Mutex.html#impl-Sync-for-"
"Mutex%3CT%3E) εκτέλεση."

#: src/concurrency/shared_state/mutex.md
#, fuzzy
msgid ""
"`Mutex` in Rust looks like a collection with just one element --- the "
"protected data."
msgstr "\\<λεπτομέρειες>"

#: src/concurrency/shared_state/mutex.md
#, fuzzy
msgid ""
"It is not possible to forget to acquire the mutex before accessing the "
"protected data."
msgstr ""
"Το \"Mutex\" στο Rust μοιάζει με μια συλλογή με ένα μόνο στοιχείο - τα "
"προστατευμένα δεδομένα."

#: src/concurrency/shared_state/mutex.md
#, fuzzy
msgid ""
"You can get an `&mut T` from an `&Mutex<T>` by taking the lock. The "
"`MutexGuard` ensures that the `&mut T` doesn't outlive the lock being held."
msgstr ""
"Δεν είναι δυνατό να ξεχάσετε να αποκτήσετε το mutex πριν αποκτήσετε πρόσβαση "
"στα προστατευμένα δεδομένα."

#: src/concurrency/shared_state/mutex.md
#, fuzzy
msgid ""
"`Mutex<T>` implements both `Send` and `Sync` iff (if and only if) `T` "
"implements `Send`."
msgstr "Μπορείτε να πάρετε ένα «&mut T» από ένα «&Mutex"

#: src/concurrency/shared_state/mutex.md
#, fuzzy
msgid "A read-write lock counterpart: `RwLock`."
msgstr ""
"» παίρνοντας την κλειδαριά. Το «MutexGuard» διασφαλίζει ότι το Το \"&mut T\" "
"δεν ξεπερνά την κλειδαριά που κρατιέται."

#: src/concurrency/shared_state/mutex.md
#, fuzzy
msgid "Why does `lock()` return a `Result`?"
msgstr "Το \"Mutex"

#: src/concurrency/shared_state/mutex.md
#, fuzzy
msgid ""
"If the thread that held the `Mutex` panicked, the `Mutex` becomes "
"\"poisoned\" to signal that the data it protected might be in an "
"inconsistent state. Calling `lock()` on a poisoned mutex fails with a "
"[`PoisonError`](https://doc.rust-lang.org/std/sync/struct.PoisonError.html). "
"You can call `into_inner()` on the error to recover the data regardless."
msgstr ""
"\" υλοποιεί και το \"Send\" και το \"Sync\" εάν το \"T\" υλοποιεί το "
"\"Send\".\n"
"\n"
"Ένα αντίστοιχο κλείδωμα ανάγνωσης-εγγραφής - «RwLock».\n"
"\n"
"Γιατί το «lock()» επιστρέφει ένα «Αποτέλεσμα»;\n"
"\n"
"Εάν το νήμα που συγκρατούσε το \"Mutex\" πανικοβλήθηκε, το \"Mutex\" γίνεται "
"\"δηλητηριασμένο\" για να σηματοδοτήσει ότι τα δεδομένα που προστατεύει "
"ενδέχεται να είναι σε ασυνεπή κατάσταση. Κλήση «lock()» σε ένα "
"δηλητηριασμένο mutex αποτυγχάνει με ένα [`PoisonError`](https://doc.rust-"
"lang.org/std/sync/struct.PoisonError.html). Μπορείτε να καλέσετε το "
"«into_inner()» στο σφάλμα για να ανακτήσετε τα δεδομένα Ανεξάρτητα."

#: src/concurrency/shared_state/example.md
#, fuzzy
msgid "Let us see `Arc` and `Mutex` in action:"
msgstr "Ας δούμε τα \"Arc\" και \"Mutex\" σε δράση:"

#: src/concurrency/shared_state/example.md
msgid "// use std::sync::{Arc, Mutex};\n"
msgstr ""

#: src/concurrency/shared_state/example.md
msgid "Possible solution:"
msgstr ""

#: src/concurrency/shared_state/example.md
msgid "Notable parts:"
msgstr ""

#: src/concurrency/shared_state/example.md
#, fuzzy
msgid ""
"`v` is wrapped in both `Arc` and `Mutex`, because their concerns are "
"orthogonal."
msgstr ""
"Το \"v\" είναι τυλιγμένο και σε \"Arc\" και \"Mutex\", επειδή οι ανησυχίες "
"τους είναι ορθογώνιες."

#: src/concurrency/shared_state/example.md
#, fuzzy
msgid ""
"Wrapping a `Mutex` in an `Arc` is a common pattern to share mutable state "
"between threads."
msgstr ""
"Το τύλιγμα ενός \"Mutex\" σε ένα \"Arc\" είναι ένα συνηθισμένο μοτίβο για "
"κοινή χρήση μεταβλητής κατάστασης μεταξύ των νημάτων."

#: src/concurrency/shared_state/example.md
#, fuzzy
msgid ""
"`v: Arc<_>` needs to be cloned as `v2` before it can be moved into another "
"thread. Note `move` was added to the lambda signature."
msgstr ""
"Το `v: Το Arc<_>` πρέπει να κλωνοποιηθεί ως `v2` για να μπορέσει να "
"μετακινηθεί σε άλλο νήμα. Η σημείωση \"move\" προστέθηκε στην υπογραφή λάμδα."

#: src/concurrency/shared_state/example.md
#, fuzzy
msgid ""
"Blocks are introduced to narrow the scope of the `LockGuard` as much as "
"possible."
msgstr ""
"Τα μπλοκ εισάγονται για να περιορίσουν όσο το δυνατόν περισσότερο το πεδίο "
"εφαρμογής του \"LockGuard\".\n"
"\n"
"Πρέπει ακόμα να αποκτήσουμε το «Mutex» για να εκτυπώσουμε το «Vec» μας."

#: src/exercises/concurrency/morning.md
#, fuzzy
msgid "Let us practice our new concurrency skills with"
msgstr "Ας εξασκήσουμε τις νέες μας δεξιότητες συγχρονισμού με"

#: src/exercises/concurrency/morning.md
#, fuzzy
msgid "Dining philosophers: a classic problem in concurrency."
msgstr ""
"Έλεγχος συνδέσμων πολλαπλών νημάτων: ένα μεγαλύτερο έργο στο οποίο θα "
"χρησιμοποιήσετε το Cargo κατεβάστε τις εξαρτήσεις και, στη συνέχεια, ελέγξτε "
"τους συνδέσμους παράλληλα."

#: src/exercises/concurrency/morning.md
msgid ""
"Multi-threaded link checker: a larger project where you'll use Cargo to "
"download dependencies and then check links in parallel."
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#, fuzzy
msgid "The dining philosophers problem is a classic problem in concurrency:"
msgstr ""
"Το πρόβλημα των φιλοσόφων τραπεζαρίας είναι ένα κλασικό πρόβλημα ταυτόχρονα:"

#: src/exercises/concurrency/dining-philosophers.md
#, fuzzy
msgid ""
"Five philosophers dine together at the same table. Each philosopher has "
"their own place at the table. There is a fork between each plate. The dish "
"served is a kind of spaghetti which has to be eaten with two forks. Each "
"philosopher can only alternately think and eat. Moreover, a philosopher can "
"only eat their spaghetti when they have both a left and right fork. Thus two "
"forks will only be available when their two nearest neighbors are thinking, "
"not eating. After an individual philosopher finishes eating, they will put "
"down both forks."
msgstr ""
"Πέντε φιλόσοφοι δειπνούν μαζί στο ίδιο τραπέζι. Κάθε φιλόσοφος έχει το δικό "
"του δική σου θέση στο τραπέζι. Ανάμεσα σε κάθε πιάτο υπάρχει ένα πιρούνι. Το "
"πιάτο που σερβίρεται είναι ένα είδος σπαγγέτι που τρώγεται με δύο πιρούνια. "
"Κάθε φιλόσοφος μπορεί μόνο εναλλάξ σκεφτείτε και τρώτε. Επιπλέον, ένας "
"φιλόσοφος μπορεί να φάει μόνο τους μακαρόνια όταν έχουν και αριστερό και "
"δεξί πιρούνι. Έτσι θα μόνο δύο πιρούνια να είναι διαθέσιμοι όταν οι δύο "
"κοντινότεροι γείτονές τους σκέφτονται και δεν τρώνε. Μετά ένας μεμονωμένος "
"φιλόσοφος τελειώνει το φαγητό, θα βάλει κάτω και τα δύο πιρούνια."

#: src/exercises/concurrency/dining-philosophers.md
#, fuzzy
msgid ""
"You will need a local [Cargo installation](../../cargo/running-locally.md) "
"for this exercise. Copy the code below to a file called `src/main.rs`, fill "
"out the blanks, and test that `cargo run` does not deadlock:"
msgstr ""
"Θα χρειαστείτε μια τοπική [Εγκατάσταση φορτίου](../../cargo/running-locally."
"md) για αυτή η άσκηση. Αντιγράψτε τον παρακάτω κώδικα στο αρχείο \\`src/main."
"rs, συμπληρώστε τα κενά, και ελέγξτε ότι το «cargo run» δεν είναι αδιέξοδο:"

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/dining-philosophers-async.md
msgid ""
"// left_fork: ...\n"
"    // right_fork: ...\n"
"    // thoughts: ...\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/solutions-morning.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"Eureka! {} has a new idea!\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "// Pick up forks...\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/solutions-morning.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"{} is eating...\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/solutions-morning.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"Socrates\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/solutions-morning.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"Hypatia\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/solutions-morning.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"Plato\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/solutions-morning.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"Aristotle\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/solutions-morning.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"Pythagoras\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "// Create forks\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "// Create philosophers\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
msgid "// Make each of them think and eat 100 times\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "// Output their thoughts\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
msgid "You can use the following `Cargo.toml`:"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid ""
"Let us use our new knowledge to create a multi-threaded link checker. It "
"should start at a webpage and check that links on the page are valid. It "
"should recursively check other pages on the same domain and keep doing this "
"until all pages have been validated."
msgstr ""
"Ας χρησιμοποιήσουμε τις νέες γνώσεις μας για να δημιουργήσουμε έναν έλεγχο "
"συνδέσμων πολλαπλών νημάτων. Θα έπρεπε ξεκινήστε από μια ιστοσελίδα και "
"ελέγξτε ότι οι σύνδεσμοι στη σελίδα είναι έγκυροι. Θα έπρεπε ελέγξτε "
"αναδρομικά άλλες σελίδες στον ίδιο τομέα και συνεχίστε να το κάνετε αυτό "
"μέχρι να τελειώσει οι σελίδες έχουν επικυρωθεί."

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid ""
"For this, you will need an HTTP client such as [`reqwest`](https://docs.rs/"
"reqwest/). Create a new Cargo project and `reqwest` it as a dependency with:"
msgstr ""
"Για αυτό, θα χρειαστείτε ένα πρόγραμμα-πελάτη HTTP όπως το "
"\\[`reqwest`\\]\\[1\\]. Δημιούργησε ένα νέο Έργο φορτίου και το «ζήτησε» ως "
"εξάρτηση με:"

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid ""
"If `cargo add` fails with `error: no such subcommand`, then please edit the "
"`Cargo.toml` file by hand. Add the dependencies listed below."
msgstr ""
"Εάν η «προσθήκη φορτίου» αποτύχει με «σφάλμα: δεν υπάρχει τέτοια υποεντολή», "
"τότε επεξεργαστείτε το Αρχείο «Cargo.toml» με το χέρι. Προσθέστε τις "
"εξαρτήσεις που αναφέρονται παρακάτω."

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid ""
"You will also need a way to find links. We can use [`scraper`](https://docs."
"rs/scraper/) for that:"
msgstr ""
"Θα χρειαστείτε επίσης έναν τρόπο να βρείτε συνδέσμους. Μπορούμε να "
"χρησιμοποιήσουμε το \\[`scraper`\\]\\[2\\] για αυτό:"

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid ""
"Finally, we'll need some way of handling errors. We use [`thiserror`]"
"(https://docs.rs/thiserror/) for that:"
msgstr ""
"Τέλος, θα χρειαστούμε κάποιο τρόπο χειρισμού των σφαλμάτων. Χρησιμοποιούμε "
"\\[`αυτό το σφάλμα`\\]\\[3\\] για ότι:"

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid ""
"The `cargo add` calls will update the `Cargo.toml` file to look like this:"
msgstr ""
"Οι κλήσεις \"cargo add\" θα ενημερώσουν το αρχείο \"Cargo.toml\" ώστε να "
"έχει την εξής μορφή:"

#: src/exercises/concurrency/link-checker.md
msgid ""
"```toml\n"
"[package]\n"
"name = \"link-checker\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"reqwest = { version = \"0.11.12\", features = [\"blocking\", \"rustls-"
"tls\"] }\n"
"scraper = \"0.13.0\"\n"
"thiserror = \"1.0.37\"\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid ""
"You can now download the start page. Try with a small site such as `https://"
"www.google.org/`."
msgstr ""
"Τώρα μπορείτε να κάνετε λήψη της αρχικής σελίδας. Δοκιμάστε με ένα μικρό "
"site όπως π.χ `https://www.google.org/`."

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid "Your `src/main.rs` file should look something like this:"
msgstr "Το αρχείο `src/main.rs` θα πρέπει να μοιάζει κάπως έτσι:"

#: src/exercises/concurrency/link-checker.md
#: src/exercises/concurrency/solutions-morning.md
msgid "\"request error: {0}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md
#: src/exercises/concurrency/solutions-morning.md
msgid "\"bad http response: {0}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md
#: src/exercises/concurrency/solutions-morning.md
msgid "\"Checking {:#}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md
#: src/exercises/concurrency/solutions-morning.md
msgid "\"href\""
msgstr ""

#: src/exercises/concurrency/link-checker.md
#: src/exercises/concurrency/solutions-morning.md
msgid "\"On {base_url:#}: ignored unparsable {href:?}: {err}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md
#: src/exercises/concurrency/solutions-morning.md
msgid "\"https://www.google.org\""
msgstr ""

#: src/exercises/concurrency/link-checker.md
msgid "\"Links: {links:#?}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md
msgid "\"Could not extract links: {err:#}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid "Run the code in `src/main.rs` with"
msgstr "Εκτελέστε τον κώδικα στο `src/main.rs` με"

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid ""
"Use threads to check the links in parallel: send the URLs to be checked to a "
"channel and let a few threads check the URLs in parallel."
msgstr ""
"Χρησιμοποιήστε νήματα για να ελέγξετε τους συνδέσμους παράλληλα: στείλτε τις "
"διευθύνσεις URL που θα ελεγχθούν στο a κανάλι και αφήστε μερικά νήματα να "
"ελέγξουν τις διευθύνσεις URL παράλληλα."

#: src/exercises/concurrency/link-checker.md
#, fuzzy
msgid ""
"Extend this to recursively extract links from all pages on the `www.google."
"org` domain. Put an upper limit of 100 pages or so so that you don't end up "
"being blocked by the site."
msgstr ""
"Επεκτείνετε αυτό για να εξαγάγετε αναδρομικά συνδέσμους από όλες τις σελίδες "
"του τομέας `www.google.org`. Βάλτε ένα ανώτατο όριο 100 σελίδων περίπου έτσι "
"ώστε να μην καταλήξετε να αποκλειστείτε από τον ιστότοπο."

#: src/exercises/concurrency/solutions-morning.md
#, fuzzy
msgid "Concurrency Morning Exercise"
msgstr "3η ημέρα Πρωινή άσκηση"

#: src/exercises/concurrency/solutions-morning.md
#, fuzzy
msgid "([back to exercise](dining-philosophers.md))"
msgstr "([επιστροφή στην άσκηση](dining-philosophers.md))"

#: src/exercises/concurrency/solutions-morning.md
msgid "\"{} is trying to eat\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md
msgid ""
"// To avoid a deadlock, we have to break the symmetry\n"
"        // somewhere. This will swap the forks without deinitializing\n"
"        // either of them.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md
msgid "\"{thought}\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md
#, fuzzy
msgid "Link Checker"
msgstr "Έλεγχος συνδέσμων πολλαπλών νημάτων"

#: src/exercises/concurrency/solutions-morning.md
#, fuzzy
msgid "([back to exercise](link-checker.md))"
msgstr "([επιστροφή στην άσκηση](luhn.md))"

#: src/exercises/concurrency/solutions-morning.md
msgid ""
"/// Determine whether links within the given page should be extracted.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md
msgid ""
"/// Mark the given page as visited, returning false if it had already\n"
"    /// been visited.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md
msgid "// The sender got dropped. No more commands coming in.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md
msgid "\"Got crawling error: {:#}\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md
msgid "\"Bad URLs: {:#?}\""
msgstr ""

#: src/async.md
#, fuzzy
msgid "Async Rust"
msgstr "Γιατί Rust;"

#: src/async.md
msgid ""
"\"Async\" is a concurrency model where multiple tasks are executed "
"concurrently by executing each task until it would block, then switching to "
"another task that is ready to make progress. The model allows running a "
"larger number of tasks on a limited number of threads. This is because the "
"per-task overhead is typically very low and operating systems provide "
"primitives for efficiently identifying I/O that is able to proceed."
msgstr ""

#: src/async.md
msgid ""
"Rust's asynchronous operation is based on \"futures\", which represent work "
"that may be completed in the future. Futures are \"polled\" until they "
"signal that they are complete."
msgstr ""

#: src/async.md
msgid ""
"Futures are polled by an async runtime, and several different runtimes are "
"available."
msgstr ""

#: src/async.md
msgid ""
"Python has a similar model in its `asyncio`. However, its `Future` type is "
"callback-based, and not polled. Async Python programs require a \"loop\", "
"similar to a runtime in Rust."
msgstr ""

#: src/async.md
msgid ""
"JavaScript's `Promise` is similar, but again callback-based. The language "
"runtime implements the event loop, so many of the details of Promise "
"resolution are hidden."
msgstr ""

#: src/async/async-await.md
msgid ""
"At a high level, async Rust code looks very much like \"normal\" sequential "
"code:"
msgstr ""

#: src/async/async-await.md
msgid "\"Count is: {i}!\""
msgstr ""

#: src/async/async-await.md
msgid ""
"Note that this is a simplified example to show the syntax. There is no long "
"running operation or any real concurrency in it!"
msgstr ""

#: src/async/async-await.md
#, fuzzy
msgid "What is the return type of an async call?"
msgstr "Ποιος είναι ο τύπος της λέξης σε κάθε βρόχο;"

#: src/async/async-await.md
msgid "Use `let future: () = async_main(10);` in `main` to see the type."
msgstr ""

#: src/async/async-await.md
msgid ""
"The \"async\" keyword is syntactic sugar. The compiler replaces the return "
"type with a future."
msgstr ""

#: src/async/async-await.md
msgid ""
"You cannot make `main` async, without additional instructions to the "
"compiler on how to use the returned future."
msgstr ""

#: src/async/async-await.md
msgid ""
"You need an executor to run async code. `block_on` blocks the current thread "
"until the provided future has run to completion."
msgstr ""

#: src/async/async-await.md
msgid ""
"`.await` asynchronously waits for the completion of another operation. "
"Unlike `block_on`, `.await` doesn't block the current thread."
msgstr ""

#: src/async/async-await.md
msgid ""
"`.await` can only be used inside an `async` function (or block; these are "
"introduced later)."
msgstr ""

#: src/async/futures.md
msgid ""
"[`Future`](https://doc.rust-lang.org/std/future/trait.Future.html) is a "
"trait, implemented by objects that represent an operation that may not be "
"complete yet. A future can be polled, and `poll` returns a [`Poll`](https://"
"doc.rust-lang.org/std/task/enum.Poll.html)."
msgstr ""

#: src/async/futures.md
msgid ""
"An async function returns an `impl Future`. It's also possible (but "
"uncommon) to implement `Future` for your own types. For example, the "
"`JoinHandle` returned from `tokio::spawn` implements `Future` to allow "
"joining to it."
msgstr ""

#: src/async/futures.md
msgid ""
"The `.await` keyword, applied to a Future, causes the current async function "
"to pause until that Future is ready, and then evaluates to its output."
msgstr ""

#: src/async/futures.md
msgid ""
"The `Future` and `Poll` types are implemented exactly as shown; click the "
"links to show the implementations in the docs."
msgstr ""

#: src/async/futures.md
msgid ""
"We will not get to `Pin` and `Context`, as we will focus on writing async "
"code, rather than building new async primitives. Briefly:"
msgstr ""

#: src/async/futures.md
msgid ""
"`Context` allows a Future to schedule itself to be polled again when an "
"event occurs."
msgstr ""

#: src/async/futures.md
msgid ""
"`Pin` ensures that the Future isn't moved in memory, so that pointers into "
"that future remain valid. This is required to allow references to remain "
"valid after an `.await`."
msgstr ""

#: src/async/runtimes.md
msgid ""
"A _runtime_ provides support for performing operations asynchronously (a "
"_reactor_) and is responsible for executing futures (an _executor_). Rust "
"does not have a \"built-in\" runtime, but several options are available:"
msgstr ""

#: src/async/runtimes.md
msgid ""
"[Tokio](https://tokio.rs/): performant, with a well-developed ecosystem of "
"functionality like [Hyper](https://hyper.rs/) for HTTP or [Tonic](https://"
"github.com/hyperium/tonic) for gRPC."
msgstr ""

#: src/async/runtimes.md
msgid ""
"[async-std](https://async.rs/): aims to be a \"std for async\", and includes "
"a basic runtime in `async::task`."
msgstr ""

#: src/async/runtimes.md
msgid "[smol](https://docs.rs/smol/latest/smol/): simple and lightweight"
msgstr ""

#: src/async/runtimes.md
msgid ""
"Several larger applications have their own runtimes. For example, [Fuchsia]"
"(https://fuchsia.googlesource.com/fuchsia/+/refs/heads/main/src/lib/fuchsia-"
"async/src/lib.rs) already has one."
msgstr ""

#: src/async/runtimes.md
msgid ""
"Note that of the listed runtimes, only Tokio is supported in the Rust "
"playground. The playground also does not permit any I/O, so most interesting "
"async things can't run in the playground."
msgstr ""

#: src/async/runtimes.md
msgid ""
"Futures are \"inert\" in that they do not do anything (not even start an I/O "
"operation) unless there is an executor polling them. This differs from JS "
"Promises, for example, which will run to completion even if they are never "
"used."
msgstr ""

#: src/async/runtimes/tokio.md
msgid "Tokio provides:"
msgstr ""

#: src/async/runtimes/tokio.md
msgid "A multi-threaded runtime for executing asynchronous code."
msgstr ""

#: src/async/runtimes/tokio.md
msgid "An asynchronous version of the standard library."
msgstr ""

#: src/async/runtimes/tokio.md
msgid "A large ecosystem of libraries."
msgstr ""

#: src/async/runtimes/tokio.md
msgid "\"Count in task: {i}!\""
msgstr ""

#: src/async/runtimes/tokio.md
msgid "\"Main task: {i}\""
msgstr ""

#: src/async/runtimes/tokio.md
msgid "With the `tokio::main` macro we can now make `main` async."
msgstr ""

#: src/async/runtimes/tokio.md
msgid "The `spawn` function creates a new, concurrent \"task\"."
msgstr ""

#: src/async/runtimes/tokio.md
msgid "Note: `spawn` takes a `Future`, you don't call `.await` on `count_to`."
msgstr ""

#: src/async/runtimes/tokio.md
msgid "**Further exploration:**"
msgstr ""

#: src/async/runtimes/tokio.md
msgid ""
"Why does `count_to` not (usually) get to 10? This is an example of async "
"cancellation. `tokio::spawn` returns a handle which can be awaited to wait "
"until it finishes."
msgstr ""

#: src/async/runtimes/tokio.md
msgid "Try `count_to(10).await` instead of spawning."
msgstr ""

#: src/async/runtimes/tokio.md
msgid "Try awaiting the task returned from `tokio::spawn`."
msgstr ""

#: src/async/tasks.md
msgid "Rust has a task system, which is a form of lightweight threading."
msgstr ""

#: src/async/tasks.md
msgid ""
"A task has a single top-level future which the executor polls to make "
"progress. That future may have one or more nested futures that its `poll` "
"method polls, corresponding loosely to a call stack. Concurrency within a "
"task is possible by polling multiple child futures, such as racing a timer "
"and an I/O operation."
msgstr ""

#: src/async/tasks.md
msgid "\"127.0.0.1:0\""
msgstr ""

#: src/async/tasks.md
msgid "\"listening on port {}\""
msgstr ""

#: src/async/tasks.md
msgid "\"connection from {addr:?}\""
msgstr ""

#: src/async/tasks.md
msgid "b\"Who are you?\\n\""
msgstr ""

#: src/async/tasks.md
msgid "\"socket error\""
msgstr ""

#: src/async/tasks.md
msgid "\"Thanks for dialing in, {name}!\\n\""
msgstr ""

#: src/async/tasks.md src/async/control-flow/join.md
msgid ""
"Copy this example into your prepared `src/main.rs` and run it from there."
msgstr ""

#: src/async/tasks.md
msgid ""
"Try connecting to it with a TCP connection tool like [nc](https://www.unix."
"com/man-page/linux/1/nc/) or [telnet](https://www.unix.com/man-page/linux/1/"
"telnet/)."
msgstr ""

#: src/async/tasks.md
msgid ""
"Ask students to visualize what the state of the example server would be with "
"a few connected clients. What tasks exist? What are their Futures?"
msgstr ""

#: src/async/tasks.md
msgid ""
"This is the first time we've seen an `async` block. This is similar to a "
"closure, but does not take any arguments. Its return value is a Future, "
"similar to an `async fn`."
msgstr ""

#: src/async/tasks.md
msgid ""
"Refactor the async block into a function, and improve the error handling "
"using `?`."
msgstr ""

#: src/async/channels.md
msgid ""
"Several crates have support for asynchronous channels. For instance `tokio`:"
msgstr ""

#: src/async/channels.md
msgid "\"Received {count} pings so far.\""
msgstr ""

#: src/async/channels.md
msgid "\"ping_handler complete\""
msgstr ""

#: src/async/channels.md
msgid "\"Failed to send ping.\""
msgstr ""

#: src/async/channels.md
msgid "\"Sent {} pings so far.\""
msgstr ""

#: src/async/channels.md
msgid "\"Something went wrong in ping handler task.\""
msgstr ""

#: src/async/channels.md
msgid "Change the channel size to `3` and see how it affects the execution."
msgstr ""

#: src/async/channels.md
msgid ""
"Overall, the interface is similar to the `sync` channels as seen in the "
"[morning class](concurrency/channels.md)."
msgstr ""

#: src/async/channels.md
msgid "Try removing the `std::mem::drop` call. What happens? Why?"
msgstr ""

#: src/async/channels.md
msgid ""
"The [Flume](https://docs.rs/flume/latest/flume/) crate has channels that "
"implement both `sync` and `async` `send` and `recv`. This can be convenient "
"for complex applications with both IO and heavy CPU processing tasks."
msgstr ""

#: src/async/channels.md
msgid ""
"What makes working with `async` channels preferable is the ability to "
"combine them with other `future`s to combine them and create complex control "
"flow."
msgstr ""

#: src/async/control-flow.md
#, fuzzy
msgid "Futures Control Flow"
msgstr "Ροή ελέγχου"

#: src/async/control-flow.md
msgid ""
"Futures can be combined together to produce concurrent compute flow graphs. "
"We have already seen tasks, that function as independent threads of "
"execution."
msgstr ""

#: src/async/control-flow.md
msgid "[Join](control-flow/join.md)"
msgstr ""

#: src/async/control-flow.md
msgid "[Select](control-flow/select.md)"
msgstr ""

#: src/async/control-flow/join.md
msgid ""
"A join operation waits until all of a set of futures are ready, and returns "
"a collection of their results. This is similar to `Promise.all` in "
"JavaScript or `asyncio.gather` in Python."
msgstr ""

#: src/async/control-flow/join.md
msgid "\"https://google.com\""
msgstr ""

#: src/async/control-flow/join.md
msgid "\"https://httpbin.org/ip\""
msgstr ""

#: src/async/control-flow/join.md
msgid "\"https://play.rust-lang.org/\""
msgstr ""

#: src/async/control-flow/join.md
msgid "\"BAD_URL\""
msgstr ""

#: src/async/control-flow/join.md
msgid ""
"For multiple futures of disjoint types, you can use `std::future::join!` but "
"you must know how many futures you will have at compile time. This is "
"currently in the `futures` crate, soon to be stabilised in `std::future`."
msgstr ""

#: src/async/control-flow/join.md
msgid ""
"The risk of `join` is that one of the futures may never resolve, this would "
"cause your program to stall."
msgstr ""

#: src/async/control-flow/join.md
msgid ""
"You can also combine `join_all` with `join!` for instance to join all "
"requests to an http service as well as a database query. Try adding a "
"`tokio::time::sleep` to the future, using `futures::join!`. This is not a "
"timeout (that requires `select!`, explained in the next chapter), but "
"demonstrates `join!`."
msgstr ""

#: src/async/control-flow/select.md
msgid ""
"A select operation waits until any of a set of futures is ready, and "
"responds to that future's result. In JavaScript, this is similar to `Promise."
"race`. In Python, it compares to `asyncio.wait(task_set, return_when=asyncio."
"FIRST_COMPLETED)`."
msgstr ""

#: src/async/control-flow/select.md
msgid ""
"Similar to a match statement, the body of `select!` has a number of arms, "
"each of the form `pattern = future => statement`. When a `future` is ready, "
"its return value is destructured by the `pattern`. The `statement` is then "
"run with the resulting variables. The `statement` result becomes the result "
"of the `select!` macro."
msgstr ""

#: src/async/control-flow/select.md
msgid "\"Felix\""
msgstr ""

#: src/async/control-flow/select.md
msgid "\"Failed to send cat.\""
msgstr ""

#: src/async/control-flow/select.md
msgid "\"Rex\""
msgstr ""

#: src/async/control-flow/select.md
msgid "\"Failed to send dog.\""
msgstr ""

#: src/async/control-flow/select.md
msgid "\"Failed to receive winner\""
msgstr ""

#: src/async/control-flow/select.md
msgid "\"Winner is {winner:?}\""
msgstr ""

#: src/async/control-flow/select.md
msgid ""
"In this example, we have a race between a cat and a dog. "
"`first_animal_to_finish_race` listens to both channels and will pick "
"whichever arrives first. Since the dog takes 50ms, it wins against the cat "
"that take 500ms."
msgstr ""

#: src/async/control-flow/select.md
msgid ""
"You can use `oneshot` channels in this example as the channels are supposed "
"to receive only one `send`."
msgstr ""

#: src/async/control-flow/select.md
msgid ""
"Try adding a deadline to the race, demonstrating selecting different sorts "
"of futures."
msgstr ""

#: src/async/control-flow/select.md
msgid ""
"Note that `select!` drops unmatched branches, which cancels their futures. "
"It is easiest to use when every execution of `select!` creates new futures."
msgstr ""

#: src/async/control-flow/select.md
msgid ""
"An alternative is to pass `&mut future` instead of the future itself, but "
"this can lead to issues, further discussed in the pinning slide."
msgstr ""

#: src/async/pitfalls.md
msgid "Pitfalls of async/await"
msgstr ""

#: src/async/pitfalls.md
msgid ""
"Async / await provides convenient and efficient abstraction for concurrent "
"asynchronous programming. However, the async/await model in Rust also comes "
"with its share of pitfalls and footguns. We illustrate some of them in this "
"chapter:"
msgstr ""

#: src/async/pitfalls.md
msgid "[Blocking the Executor](pitfalls/blocking-executor.md)"
msgstr ""

#: src/async/pitfalls.md
msgid "[Pin](pitfalls/pin.md)"
msgstr ""

#: src/async/pitfalls.md
msgid "[Async Traits](pitfalls/async-traits.md)"
msgstr ""

#: src/async/pitfalls.md
msgid "[Cancellation](pitfalls/cancellation.md)"
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid "Blocking the executor"
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid ""
"Most async runtimes only allow IO tasks to run concurrently. This means that "
"CPU blocking tasks will block the executor and prevent other tasks from "
"being executed. An easy workaround is to use async equivalent methods where "
"possible."
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid "\"future {id} slept for {duration_ms}ms, finished after {}ms\""
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid "\"current_thread\""
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid ""
"Run the code and see that the sleeps happen consecutively rather than "
"concurrently."
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid ""
"The `\"current_thread\"` flavor puts all tasks on a single thread. This "
"makes the effect more obvious, but the bug is still present in the multi-"
"threaded flavor."
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid ""
"Switch the `std::thread::sleep` to `tokio::time::sleep` and await its result."
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid ""
"Another fix would be to `tokio::task::spawn_blocking` which spawns an actual "
"thread and transforms its handle into a future without blocking the executor."
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid ""
"You should not think of tasks as OS threads. They do not map 1 to 1 and most "
"executors will allow many tasks to run on a single OS thread. This is "
"particularly problematic when interacting with other libraries via FFI, "
"where that library might depend on thread-local storage or map to specific "
"OS threads (e.g., CUDA). Prefer `tokio::task::spawn_blocking` in such "
"situations."
msgstr ""

#: src/async/pitfalls/blocking-executor.md
msgid ""
"Use sync mutexes with care. Holding a mutex over an `.await` may cause "
"another task to block, and that task may be running on the same thread."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"Async blocks and functions return types implementing the `Future` trait. The "
"type returned is the result of a compiler transformation which turns local "
"variables into data stored inside the future."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"Some of those variables can hold pointers to other local variables. Because "
"of that, the future should never be moved to a different memory location, as "
"it would invalidate those pointers."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"To prevent moving the future type in memory, it can only be polled through a "
"pinned pointer. `Pin` is a wrapper around a reference that disallows all "
"operations that would move the instance it points to into a different memory "
"location."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"// A work item. In this case, just sleep for the given time and respond\n"
"// with a message on the `respond_on` channel.\n"
msgstr ""

#: src/async/pitfalls/pin.md
msgid "// A worker which listens for work on a queue and performs it.\n"
msgstr ""

#: src/async/pitfalls/pin.md
msgid "// Pretend to work.\n"
msgstr ""

#: src/async/pitfalls/pin.md
msgid "\"failed to send response\""
msgstr ""

#: src/async/pitfalls/pin.md
msgid "// TODO: report number of iterations every 100ms\n"
msgstr ""

#: src/async/pitfalls/pin.md
msgid "// A requester which requests work and waits for it to complete.\n"
msgstr ""

#: src/async/pitfalls/pin.md
msgid "\"failed to send on work queue\""
msgstr ""

#: src/async/pitfalls/pin.md
msgid "\"failed waiting for response\""
msgstr ""

#: src/async/pitfalls/pin.md
msgid "\"work result for iteration {i}: {resp}\""
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"You may recognize this as an example of the actor pattern. Actors typically "
"call `select!` in a loop."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"This serves as a summation of a few of the previous lessons, so take your "
"time with it."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"Naively add a `_ = sleep(Duration::from_millis(100)) => { println!(..) }` to "
"the `select!`. This will never execute. Why?"
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"Instead, add a `timeout_fut` containing that future outside of the `loop`:"
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"This still doesn't work. Follow the compiler errors, adding `&mut` to the "
"`timeout_fut` in the `select!` to work around the move, then using `Box::"
"pin`:"
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"This compiles, but once the timeout expires it is `Poll::Ready` on every "
"iteration (a fused future would help with this). Update to reset "
"`timeout_fut` every time it expires."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"Box allocates on the heap. In some cases, `std::pin::pin!` (only recently "
"stabilized, with older code often using `tokio::pin!`) is also an option, "
"but that is difficult to use for a future that is reassigned."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"Another alternative is to not use `pin` at all but spawn another task that "
"will send to a `oneshot` channel every 100ms."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"Data that contains pointers to itself is called self-referential. Normally, "
"the Rust borrow checker would prevent self-referential data from being "
"moved, as the references cannot outlive the data they point to. However, the "
"code transformation for async blocks and functions is not verified by the "
"borrow checker."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"`Pin` is a wrapper around a reference. An object cannot be moved from its "
"place using a pinned pointer. However, it can still be moved through an "
"unpinned pointer."
msgstr ""

#: src/async/pitfalls/pin.md
msgid ""
"The `poll` method of the `Future` trait uses `Pin<&mut Self>` instead of "
"`&mut Self` to refer to the instance. That's why it can only be called on a "
"pinned pointer."
msgstr ""

#: src/async/pitfalls/async-traits.md
msgid ""
"Async methods in traits are not yet supported in the stable channel ([An "
"experimental feature exists in nightly and should be stabilized in the mid "
"term.](https://blog.rust-lang.org/inside-rust/2022/11/17/async-fn-in-trait-"
"nightly.html))"
msgstr ""

#: src/async/pitfalls/async-traits.md
msgid ""
"The crate [async_trait](https://docs.rs/async-trait/latest/async_trait/) "
"provides a workaround through a macro:"
msgstr ""

#: src/async/pitfalls/async-traits.md
msgid "\"running all sleepers..\""
msgstr ""

#: src/async/pitfalls/async-traits.md
msgid "\"slept for {}ms\""
msgstr ""

#: src/async/pitfalls/async-traits.md
msgid ""
"`async_trait` is easy to use, but note that it's using heap allocations to "
"achieve this. This heap allocation has performance overhead."
msgstr ""

#: src/async/pitfalls/async-traits.md
msgid ""
"The challenges in language support for `async trait` are deep Rust and "
"probably not worth describing in-depth. Niko Matsakis did a good job of "
"explaining them in [this post](https://smallcultfollowing.com/babysteps/"
"blog/2019/10/26/async-fn-in-traits-are-hard/) if you are interested in "
"digging deeper."
msgstr ""

#: src/async/pitfalls/async-traits.md
msgid ""
"Try creating a new sleeper struct that will sleep for a random amount of "
"time and adding it to the Vec."
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid ""
"Dropping a future implies it can never be polled again. This is called "
"_cancellation_ and it can occur at any `await` point. Care is needed to "
"ensure the system works correctly even when futures are cancelled. For "
"example, it shouldn't deadlock or lose data."
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid "\"not UTF-8\""
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid "\"hi\\nthere\\n\""
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid "\"tick!\""
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid ""
"The compiler doesn't help with cancellation-safety. You need to read API "
"documentation and consider what state your `async fn` holds."
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid ""
"Unlike `panic` and `?`, cancellation is part of normal control flow (vs "
"error-handling)."
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid "The example loses parts of the string."
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid ""
"Whenever the `tick()` branch finishes first, `next()` and its `buf` are "
"dropped."
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid ""
"`LinesReader` can be made cancellation-safe by making `buf` part of the "
"struct:"
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid "// prefix buf and bytes with self.\n"
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid ""
"[`Interval::tick`](https://docs.rs/tokio/latest/tokio/time/struct.Interval."
"html#method.tick) is cancellation-safe because it keeps track of whether a "
"tick has been 'delivered'."
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid ""
"[`AsyncReadExt::read`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncReadExt.html#method.read) is cancellation-safe because it either "
"returns or doesn't read data."
msgstr ""

#: src/async/pitfalls/cancellation.md
msgid ""
"[`AsyncBufReadExt::read_line`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncBufReadExt.html#method.read_line) is similar to the example and _isn't_ "
"cancellation-safe. See its documentation for details and alternatives."
msgstr ""

#: src/exercises/concurrency/afternoon.md
msgid ""
"To practice your Async Rust skills, we have again two exercises for you:"
msgstr ""

#: src/exercises/concurrency/afternoon.md
msgid ""
"Dining philosophers: we already saw this problem in the morning. This time "
"you are going to implement it with Async Rust."
msgstr ""

#: src/exercises/concurrency/afternoon.md
msgid ""
"A Broadcast Chat Application: this is a larger project that allows you "
"experiment with more advanced Async Rust features."
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
#, fuzzy
msgid "Dining Philosophers --- Async"
msgstr "Δείπνο με φιλόσοφους"

#: src/exercises/concurrency/dining-philosophers-async.md
msgid ""
"See [dining philosophers](dining-philosophers.md) for a description of the "
"problem."
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md
#, fuzzy
msgid ""
"As before, you will need a local [Cargo installation](../../cargo/running-"
"locally.md) for this exercise. Copy the code below to a file called `src/"
"main.rs`, fill out the blanks, and test that `cargo run` does not deadlock:"
msgstr ""
"Θα χρειαστείτε μια τοπική [Εγκατάσταση φορτίου](../../cargo/running-locally."
"md) για αυτή η άσκηση. Αντιγράψτε τον παρακάτω κώδικα στο αρχείο \\`src/main."
"rs, συμπληρώστε τα κενά, και ελέγξτε ότι το «cargo run» δεν είναι αδιέξοδο:"

#: src/exercises/concurrency/dining-philosophers-async.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "// Make them think and eat\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md
msgid ""
"Since this time you are using Async Rust, you'll need a `tokio` dependency. "
"You can use the following `Cargo.toml`:"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers-async-dine\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"\n"
"[dependencies]\n"
"tokio = { version = \"1.26.0\", features = [\"sync\", \"time\", \"macros\", "
"\"rt-multi-thread\"] }\n"
"```"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md
msgid ""
"Also note that this time you have to use the `Mutex` and the `mpsc` module "
"from the `tokio` crate."
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md
msgid "Can you make your implementation single-threaded?"
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"In this exercise, we want to use our new knowledge to implement a broadcast "
"chat application. We have a chat server that the clients connect to and "
"publish their messages. The client reads user messages from the standard "
"input, and sends them to the server. The chat server broadcasts each message "
"that it receives to all the clients."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"For this, we use [a broadcast channel](https://docs.rs/tokio/latest/tokio/"
"sync/broadcast/fn.channel.html) on the server, and [`tokio_websockets`]"
"(https://docs.rs/tokio-websockets/) for the communication between the client "
"and the server."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid "Create a new Cargo project and add the following dependencies:"
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid "_Cargo.toml_:"
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"```toml\n"
"[package]\n"
"name = \"chat-async\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"\n"
"[dependencies]\n"
"futures-util = { version = \"0.3.30\", features = [\"sink\"] }\n"
"http = \"1.0.0\"\n"
"tokio = { version = \"1.28.1\", features = [\"full\"] }\n"
"tokio-websockets = { version = \"0.5.1\", features = [\"client\", "
"\"fastrand\", \"server\", \"sha1_smol\"] }\n"
"```"
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid "The required APIs"
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"You are going to need the following functions from `tokio` and "
"[`tokio_websockets`](https://docs.rs/tokio-websockets/). Spend a few minutes "
"to familiarize yourself with the API."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"[StreamExt::next()](https://docs.rs/futures-util/0.3.28/futures_util/stream/"
"trait.StreamExt.html#method.next) implemented by `WebSocketStream`: for "
"asynchronously reading messages from a Websocket Stream."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"[SinkExt::send()](https://docs.rs/futures-util/0.3.28/futures_util/sink/"
"trait.SinkExt.html#method.send) implemented by `WebSocketStream`: for "
"asynchronously sending messages on a Websocket Stream."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"[Lines::next_line()](https://docs.rs/tokio/latest/tokio/io/struct.Lines."
"html#method.next_line): for asynchronously reading user messages from the "
"standard input."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"[Sender::subscribe()](https://docs.rs/tokio/latest/tokio/sync/broadcast/"
"struct.Sender.html#method.subscribe): for subscribing to a broadcast channel."
msgstr ""

#: src/exercises/concurrency/chat-app.md
#, fuzzy
msgid "Two binaries"
msgstr "Rust Binaries"

#: src/exercises/concurrency/chat-app.md
msgid ""
"Normally in a Cargo project, you can have only one binary, and one `src/main."
"rs` file. In this project, we need two binaries. One for the client, and one "
"for the server. You could potentially make them two separate Cargo projects, "
"but we are going to put them in a single Cargo project with two binaries. "
"For this to work, the client and the server code should go under `src/bin` "
"(see the [documentation](https://doc.rust-lang.org/cargo/reference/cargo-"
"targets.html#binaries))."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"Copy the following server and client code into `src/bin/server.rs` and `src/"
"bin/client.rs`, respectively. Your task is to complete these files as "
"described below."
msgstr ""

#: src/exercises/concurrency/chat-app.md
#: src/exercises/concurrency/solutions-afternoon.md
#, fuzzy
msgid "_src/bin/server.rs_:"
msgstr "_hello_rust/src/main.rs_:"

#: src/exercises/concurrency/chat-app.md
msgid "// TODO: For a hint, see the description of the task below.\n"
msgstr ""

#: src/exercises/concurrency/chat-app.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"127.0.0.1:2000\""
msgstr ""

#: src/exercises/concurrency/chat-app.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"listening on port 2000\""
msgstr ""

#: src/exercises/concurrency/chat-app.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"New connection from {addr:?}\""
msgstr ""

#: src/exercises/concurrency/chat-app.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "// Wrap the raw TCP stream into a websocket.\n"
msgstr ""

#: src/exercises/concurrency/chat-app.md
#: src/exercises/concurrency/solutions-afternoon.md
#, fuzzy
msgid "_src/bin/client.rs_:"
msgstr "_hello_rust/src/main.rs_:"

#: src/exercises/concurrency/chat-app.md
#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"ws://127.0.0.1:2000\""
msgstr ""

#: src/exercises/concurrency/chat-app.md
#, fuzzy
msgid "Running the binaries"
msgstr "Διεξαγωγή του μαθήματος"

#: src/exercises/concurrency/chat-app.md
msgid "Run the server with:"
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid "and the client with:"
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid "Implement the `handle_connection` function in `src/bin/server.rs`."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"Hint: Use `tokio::select!` for concurrently performing two tasks in a "
"continuous loop. One task receives messages from the client and broadcasts "
"them. The other sends messages received by the server to the client."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid "Complete the main function in `src/bin/client.rs`."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"Hint: As before, use `tokio::select!` in a continuous loop for concurrently "
"performing two tasks: (1) reading user messages from standard input and "
"sending them to the server, and (2) receiving messages from the server, and "
"displaying them for the user."
msgstr ""

#: src/exercises/concurrency/chat-app.md
msgid ""
"Optional: Once you are done, change the code to broadcast messages to all "
"clients, but the sender of the message."
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
#, fuzzy
msgid "Concurrency Afternoon Exercise"
msgstr "1η ημέρα Απογευματινές Ασκήσεις"

#: src/exercises/concurrency/solutions-afternoon.md
#, fuzzy
msgid "([back to exercise](dining-philosophers-async.md))"
msgstr "([επιστροφή στην άσκηση](dining-philosophers.md))"

#: src/exercises/concurrency/solutions-afternoon.md
msgid ""
"// Add a delay before picking the second fork to allow the execution\n"
"        // to transfer to another task\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
msgid "// The locks are dropped here\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
msgid ""
"// To avoid a deadlock, we have to break the symmetry\n"
"            // somewhere. This will swap the forks without deinitializing\n"
"            // either of them.\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
msgid "// tx is dropped here, so we don't need to explicitly drop it later\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"Here is a thought: {thought}\""
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
#, fuzzy
msgid "([back to exercise](chat-app.md))"
msgstr "([επιστροφή στην άσκηση](luhn.md))"

#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"Welcome to chat! Type a message\""
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
msgid ""
"// A continuous loop for concurrently performing two tasks: (1) receiving\n"
"    // messages from `ws_stream` and broadcasting them, and (2) receiving\n"
"    // messages on `bcast_rx` and sending them to the client.\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"From client {addr:?} {text:?}\""
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
msgid "// Continuous loop for concurrently sending and receiving messages.\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md
msgid "\"From server: {}\""
msgstr ""

#: src/thanks.md
#, fuzzy
msgid ""
"_Thank you for taking Comprehensive Rust 🦀!_ We hope you enjoyed it and "
"that it was useful."
msgstr ""
"_Σας ευχαριστούμε που πήρατε το Comprehensive Rust 🦀!_ Ελπίζουμε να σας "
"άρεσε και να ήταν χρήσιμο."

#: src/thanks.md
#, fuzzy
msgid ""
"We've had a lot of fun putting the course together. The course is not "
"perfect, so if you spotted any mistakes or have ideas for improvements, "
"please get in [contact with us on GitHub](https://github.com/google/"
"comprehensive-rust/discussions). We would love to hear from you."
msgstr ""
"Διασκεδάσαμε πολύ όταν συνδυάσαμε το μάθημα. Το μάθημα δεν είναι τέλειο, "
"οπότε αν εντοπίσατε λάθη ή έχετε ιδέες για βελτιώσεις, παρακαλούμε μπείτε "
"[επικοινωνήστε μαζί μας στο GitHub](https://github.com/google/comprehensive-"
"rust/discussions). Θα αγαπούσαμε να ακούσω από σένα."

#: src/glossary.md
msgid ""
"The following is a glossary which aims to give a short definition of many "
"Rust terms. For translations, this also serves to connect the term back to "
"the English original."
msgstr ""

#: src/glossary.md
msgid ""
"allocate:  \n"
"Dynamic memory allocation on [the heap](memory-management/stack-vs-heap.md)."
msgstr ""

#: src/glossary.md
msgid ""
"argument:  \n"
"Information that is passed into a function or method."
msgstr ""

#: src/glossary.md
msgid ""
"Bare-metal Rust:  \n"
"Low-level Rust development, often deployed to a system without an operating "
"system. See [Bare-metal Rust](bare-metal.md)."
msgstr ""

#: src/glossary.md
msgid ""
"block:  \n"
"See [Blocks](control-flow/blocks.md) and _scope_."
msgstr ""

#: src/glossary.md
msgid ""
"borrow:  \n"
"See [Borrowing](ownership/borrowing.md)."
msgstr ""

#: src/glossary.md
msgid ""
"borrow checker:  \n"
"The part of the Rust compiler which checks that all borrows are valid."
msgstr ""

#: src/glossary.md
msgid ""
"brace:  \n"
"`{` and `}`. Also called _curly brace_, they delimit _blocks_."
msgstr ""

#: src/glossary.md
msgid ""
"build:  \n"
"The process of converting source code into executable code or a usable "
"program."
msgstr ""

#: src/glossary.md
msgid ""
"call:  \n"
"To invoke or execute a function or method."
msgstr ""

#: src/glossary.md
msgid ""
"channel:  \n"
"Used to safely pass messages [between threads](concurrency/channels.md)."
msgstr ""

#: src/glossary.md
msgid ""
"Comprehensive Rust 🦀:  \n"
"The courses here are jointly called Comprehensive Rust 🦀."
msgstr ""

#: src/glossary.md
msgid ""
"concurrency:  \n"
"The execution of multiple tasks or processes at the same time."
msgstr ""

#: src/glossary.md
msgid ""
"Concurrency in Rust:  \n"
"See [Concurrency in Rust](concurrency.md)."
msgstr ""

#: src/glossary.md
msgid ""
"constant:  \n"
"A value that does not change during the execution of a program."
msgstr ""

#: src/glossary.md
msgid ""
"control flow:  \n"
"The order in which the individual statements or instructions are executed in "
"a program."
msgstr ""

#: src/glossary.md
msgid ""
"crash:  \n"
"An unexpected and unhandled failure or termination of a program."
msgstr ""

#: src/glossary.md
msgid ""
"enumeration:  \n"
"A data type that holds one of several named constants, possibly with an "
"associated tuple or struct."
msgstr ""

#: src/glossary.md
msgid ""
"error:  \n"
"An unexpected condition or result that deviates from the expected behavior."
msgstr ""

#: src/glossary.md
msgid ""
"error handling:  \n"
"The process of managing and responding to errors that occur during program "
"execution."
msgstr ""

#: src/glossary.md
msgid ""
"exercise:  \n"
"A task or problem designed to practice and test programming skills."
msgstr ""

#: src/glossary.md
msgid ""
"function:  \n"
"A reusable block of code that performs a specific task."
msgstr ""

#: src/glossary.md
msgid ""
"garbage collector:  \n"
"A mechanism that automatically frees up memory occupied by objects that are "
"no longer in use."
msgstr ""

#: src/glossary.md
msgid ""
"generics:  \n"
"A feature that allows writing code with placeholders for types, enabling "
"code reuse with different data types."
msgstr ""

#: src/glossary.md
msgid ""
"immutable:  \n"
"Unable to be changed after creation."
msgstr ""

#: src/glossary.md
msgid ""
"integration test:  \n"
"A type of test that verifies the interactions between different parts or "
"components of a system."
msgstr ""

#: src/glossary.md
msgid ""
"keyword:  \n"
"A reserved word in a programming language that has a specific meaning and "
"cannot be used as an identifier."
msgstr ""

#: src/glossary.md
msgid ""
"library:  \n"
"A collection of precompiled routines or code that can be used by programs."
msgstr ""

#: src/glossary.md
msgid ""
"macro:  \n"
"Rust macros can be recognized by a `!` in the name. Macros are used when "
"normal functions are not enough. A typical example is `format!`, which takes "
"a variable number of arguments, which isn't supported by Rust functions."
msgstr ""

#: src/glossary.md
msgid ""
"`main` function:  \n"
"Rust programs start executing with the `main` function."
msgstr ""

#: src/glossary.md
msgid ""
"match:  \n"
"A control flow construct in Rust that allows for pattern matching on the "
"value of an expression."
msgstr ""

#: src/glossary.md
msgid ""
"memory leak:  \n"
"A situation where a program fails to release memory that is no longer "
"needed, leading to a gradual increase in memory usage."
msgstr ""

#: src/glossary.md
msgid ""
"method:  \n"
"A function associated with an object or a type in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"module:  \n"
"A namespace that contains definitions, such as functions, types, or traits, "
"to organize code in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"move:  \n"
"The transfer of ownership of a value from one variable to another in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"mutable:  \n"
"A property in Rust that allows variables to be modified after they have been "
"declared."
msgstr ""

#: src/glossary.md
msgid ""
"ownership:  \n"
"The concept in Rust that defines which part of the code is responsible for "
"managing the memory associated with a value."
msgstr ""

#: src/glossary.md
msgid ""
"panic:  \n"
"An unrecoverable error condition in Rust that results in the termination of "
"the program."
msgstr ""

#: src/glossary.md
msgid ""
"parameter:  \n"
"A value that is passed into a function or method when it is called."
msgstr ""

#: src/glossary.md
msgid ""
"pattern:  \n"
"A combination of values, literals, or structures that can be matched against "
"an expression in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"payload:  \n"
"The data or information carried by a message, event, or data structure."
msgstr ""

#: src/glossary.md
msgid ""
"program:  \n"
"A set of instructions that a computer can execute to perform a specific task "
"or solve a particular problem."
msgstr ""

#: src/glossary.md
msgid ""
"programming language:  \n"
"A formal system used to communicate instructions to a computer, such as Rust."
msgstr ""

#: src/glossary.md
msgid ""
"receiver:  \n"
"The first parameter in a Rust method that represents the instance on which "
"the method is called."
msgstr ""

#: src/glossary.md
msgid ""
"reference counting:  \n"
"A memory management technique in which the number of references to an object "
"is tracked, and the object is deallocated when the count reaches zero."
msgstr ""

#: src/glossary.md
msgid ""
"return:  \n"
"A keyword in Rust used to indicate the value to be returned from a function."
msgstr ""

#: src/glossary.md
msgid ""
"Rust:  \n"
"A systems programming language that focuses on safety, performance, and "
"concurrency."
msgstr ""

#: src/glossary.md
msgid ""
"Rust Fundamentals:  \n"
"Days 1 to 3 of this course."
msgstr ""

#: src/glossary.md
msgid ""
"Rust in Android:  \n"
"See [Rust in Android](android.md)."
msgstr ""

#: src/glossary.md
msgid ""
"Rust in Chromium:  \n"
"See [Rust in Chromium](chromium.md)."
msgstr ""

#: src/glossary.md
msgid ""
"safe:  \n"
"Refers to code that adheres to Rust's ownership and borrowing rules, "
"preventing memory-related errors."
msgstr ""

#: src/glossary.md
msgid ""
"scope:  \n"
"The region of a program where a variable is valid and can be used."
msgstr ""

#: src/glossary.md
msgid ""
"standard library:  \n"
"A collection of modules providing essential functionality in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"static:  \n"
"A keyword in Rust used to define static variables or items with a `'static` "
"lifetime."
msgstr ""

#: src/glossary.md
msgid ""
"string:  \n"
"A data type storing textual data. See [`String` vs `str`](basic-syntax/"
"string-slices.html) for more."
msgstr ""

#: src/glossary.md
msgid ""
"struct:  \n"
"A composite data type in Rust that groups together variables of different "
"types under a single name."
msgstr ""

#: src/glossary.md
msgid ""
"test:  \n"
"A Rust module containing functions that test the correctness of other "
"functions."
msgstr ""

#: src/glossary.md
msgid ""
"thread:  \n"
"A separate sequence of execution in a program, allowing concurrent execution."
msgstr ""

#: src/glossary.md
msgid ""
"thread safety:  \n"
"The property of a program that ensures correct behavior in a multithreaded "
"environment."
msgstr ""

#: src/glossary.md
msgid ""
"trait:  \n"
"A collection of methods defined for an unknown type, providing a way to "
"achieve polymorphism in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"trait bound:  \n"
"An abstraction where you can require types to implement some traits of your "
"interest."
msgstr ""

#: src/glossary.md
msgid ""
"tuple:  \n"
"A composite data type that contains variables of different types. Tuple "
"fields have no names, and are accessed by their ordinal numbers."
msgstr ""

#: src/glossary.md
msgid ""
"type:  \n"
"A classification that specifies which operations can be performed on values "
"of a particular kind in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"type inference:  \n"
"The ability of the Rust compiler to deduce the type of a variable or "
"expression."
msgstr ""

#: src/glossary.md
msgid ""
"undefined behavior:  \n"
"Actions or conditions in Rust that have no specified result, often leading "
"to unpredictable program behavior."
msgstr ""

#: src/glossary.md
msgid ""
"union:  \n"
"A data type that can hold values of different types but only one at a time."
msgstr ""

#: src/glossary.md
msgid ""
"unit test:  \n"
"Rust comes with built-in support for running small unit tests and larger "
"integration tests. See [Unit Tests](testing/unit-tests.html)."
msgstr ""

#: src/glossary.md
msgid ""
"unit type:  \n"
"Type that holds no data, written as a tuple with no members."
msgstr ""

#: src/glossary.md
msgid ""
"unsafe:  \n"
"The subset of Rust which allows you to trigger _undefined behavior_. See "
"[Unsafe Rust](unsafe.html)."
msgstr ""

#: src/glossary.md
msgid ""
"variable:  \n"
"A memory location storing data. Variables are valid in a _scope_."
msgstr ""

#: src/other-resources.md
#, fuzzy
msgid "Other Rust Resources"
msgstr "Άλλοι πόροι σκουριάς"

#: src/other-resources.md
#, fuzzy
msgid ""
"The Rust community has created a wealth of high-quality and free resources "
"online."
msgstr ""
"Η κοινότητα του Rust έχει δημιουργήσει έναν πλούτο υψηλής ποιότητας και "
"δωρεάν πόρων Σε σύνδεση."

#: src/other-resources.md
#, fuzzy
msgid "Official Documentation"
msgstr "Επίσημη Τεκμηρίωση"

#: src/other-resources.md
#, fuzzy
msgid "The Rust project hosts many resources. These cover Rust in general:"
msgstr "Το έργο Rust φιλοξενεί πολλούς πόρους. Αυτά καλύπτουν το Rust γενικά:"

#: src/other-resources.md
#, fuzzy
msgid ""
"[The Rust Programming Language](https://doc.rust-lang.org/book/): the "
"canonical free book about Rust. Covers the language in detail and includes a "
"few projects for people to build."
msgstr ""
"[The Rust Programming Language](https://doc.rust-lang.org/book/): το "
"κανονικό δωρεάν βιβλίο για το Rust. Καλύπτει αναλυτικά τη γλώσσα και "
"περιλαμβάνει α λίγα έργα για να κατασκευάσουν οι άνθρωποι."

#: src/other-resources.md
#, fuzzy
msgid ""
"[Rust By Example](https://doc.rust-lang.org/rust-by-example/): covers the "
"Rust syntax via a series of examples which showcase different constructs. "
"Sometimes includes small exercises where you are asked to expand on the code "
"in the examples."
msgstr ""
"[Rust By Example](https://doc.rust-lang.org/rust-by-example/): καλύπτει τη "
"σκουριά σύνταξη μέσω μιας σειράς παραδειγμάτων που παρουσιάζουν διαφορετικές "
"κατασκευές. Ωρες ωρες περιλαμβάνει μικρές ασκήσεις όπου σας ζητείται να "
"αναπτύξετε τον κώδικα στο παραδείγματα."

#: src/other-resources.md
#, fuzzy
msgid ""
"[Rust Standard Library](https://doc.rust-lang.org/std/): full documentation "
"of the standard library for Rust."
msgstr ""
"[Rust Standard Library](https://doc.rust-lang.org/std/): πλήρης τεκμηρίωση "
"του η τυπική βιβλιοθήκη για το Rust."

#: src/other-resources.md
#, fuzzy
msgid ""
"[The Rust Reference](https://doc.rust-lang.org/reference/): an incomplete "
"book which describes the Rust grammar and memory model."
msgstr ""
"[The Rust Reference](https://doc.rust-lang.org/reference/): ένα ημιτελές "
"βιβλίο που περιγράφει το μοντέλο της γραμματικής και της μνήμης Rust."

#: src/other-resources.md
#, fuzzy
msgid "More specialized guides hosted on the official Rust site:"
msgstr ""
"Περισσότεροι εξειδικευμένοι οδηγοί που φιλοξενούνται στον επίσημο ιστότοπο "
"της Rust:"

#: src/other-resources.md
#, fuzzy
msgid ""
"[The Rustonomicon](https://doc.rust-lang.org/nomicon/): covers unsafe Rust, "
"including working with raw pointers and interfacing with other languages "
"(FFI)."
msgstr ""
"[The Rustonomicon](https://doc.rust-lang.org/nomicon/): καλύπτει το μη "
"ασφαλές Rust, συμπεριλαμβανομένης της εργασίας με ακατέργαστους δείκτες και "
"της διεπαφής με άλλες γλώσσες (FFI)."

#: src/other-resources.md
#, fuzzy
msgid ""
"[Asynchronous Programming in Rust](https://rust-lang.github.io/async-book/): "
"covers the new asynchronous programming model which was introduced after the "
"Rust Book was written."
msgstr ""
"[Asynchronous Programming in Rust](https://rust-lang.github.io/async-book/): "
"καλύπτει το νέο μοντέλο ασύγχρονου προγραμματισμού που εισήχθη μετά το Το "
"Rust Book γράφτηκε."

#: src/other-resources.md
#, fuzzy
msgid ""
"[The Embedded Rust Book](https://doc.rust-lang.org/stable/embedded-book/): "
"an introduction to using Rust on embedded devices without an operating "
"system."
msgstr ""
"[The Embedded Rust Book](https://doc.rust-lang.org/stable/embedded-book/): "
"εισαγωγή στη χρήση του Rust σε ενσωματωμένες συσκευές χωρίς λειτουργικό "
"σύστημα."

#: src/other-resources.md
#, fuzzy
msgid "Unofficial Learning Material"
msgstr "Ανεπίσημο Εκπαιδευτικό Υλικό"

#: src/other-resources.md
#, fuzzy
msgid "A small selection of other guides and tutorial for Rust:"
msgstr "Μια μικρή επιλογή άλλων οδηγών και οδηγών για το Rust:"

#: src/other-resources.md
#, fuzzy
msgid ""
"[Learn Rust the Dangerous Way](http://cliffle.com/p/dangerust/): covers Rust "
"from the perspective of low-level C programmers."
msgstr ""
"[Learn Rust the Dangerous Way](http://cliffle.com/p/dangerust/): καλύπτει το "
"Rust από την οπτική γωνία των προγραμματιστών χαμηλού επιπέδου C."

#: src/other-resources.md
#, fuzzy
msgid ""
"[Rust for Embedded C Programmers](https://docs.opentitan.org/doc/ug/"
"rust_for_c/): covers Rust from the perspective of developers who write "
"firmware in C."
msgstr ""
"[Rust for Embedded C Προγραμματιστές](https://docs.opentitan.org/doc/ug/"
"rust_for_c/): καλύπτει το Rust από η προοπτική των προγραμματιστών που "
"γράφουν υλικολογισμικό σε C."

#: src/other-resources.md
#, fuzzy
msgid ""
"[Rust for professionals](https://overexact.com/rust-for-professionals/): "
"covers the syntax of Rust using side-by-side comparisons with other "
"languages such as C, C++, Java, JavaScript, and Python."
msgstr ""
"[Rust για επαγγελματίες](https://overexact.com/rust-for-professionals/): "
"καλύπτει τη σύνταξη του Rust χρησιμοποιώντας συγκρίσεις δίπλα-δίπλα με άλλες "
"γλώσσες όπως C, C++, Java, JavaScript και Python."

#: src/other-resources.md
#, fuzzy
msgid ""
"[Rust on Exercism](https://exercism.org/tracks/rust): 100+ exercises to help "
"you learn Rust."
msgstr ""
"[Rust on Exercism](https://exercism.org/tracks/rust): 100+ ασκήσεις για "
"βοήθεια μαθαίνεις Rust."

#: src/other-resources.md
#, fuzzy
msgid ""
"[Ferrous Teaching Material](https://ferrous-systems.github.io/teaching-"
"material/index.html): a series of small presentations covering both basic "
"and advanced part of the Rust language. Other topics such as WebAssembly, "
"and async/await are also covered."
msgstr ""
"[Σιδήρου Διδασκαλία Υλικό](https://ferrous-systems.github.io/teaching-"
"material/index.html): α σειρά μικρών παρουσιάσεων που καλύπτουν τόσο βασικό "
"όσο και προχωρημένο μέρος του Γλώσσα σκουριάς. Άλλα θέματα όπως το "
"WebAssembly και το async/wait είναι επίσης σκεπαστός."

#: src/other-resources.md
#, fuzzy
msgid ""
"[Beginner's Series to Rust](https://docs.microsoft.com/en-us/shows/beginners-"
"series-to-rust/) and [Take your first steps with Rust](https://docs."
"microsoft.com/en-us/learn/paths/rust-first-steps/): two Rust guides aimed at "
"new developers. The first is a set of 35 videos and the second is a set of "
"11 modules which covers Rust syntax and basic constructs."
msgstr ""
"[Beginner's Series to Rust](https://docs.microsoft.com/en-us/shows/beginners-"
"series-to-rust/) και [Κάντε τα πρώτα σας βήματα με Rust](https://docs."
"microsoft.com/en-us/learn/paths/rust-first-steps/): δύο Οδηγοί Rust που "
"απευθύνονται σε νέους προγραμματιστές. Το πρώτο είναι ένα σύνολο 35 βίντεο "
"και το Το δεύτερο είναι ένα σύνολο 11 ενοτήτων που καλύπτει τη σύνταξη του "
"Rust και τις βασικές δομές."

#: src/other-resources.md
msgid ""
"[Learn Rust With Entirely Too Many Linked Lists](https://rust-unofficial."
"github.io/too-many-lists/): in-depth exploration of Rust's memory management "
"rules, through implementing a few different types of list structures."
msgstr ""

#: src/other-resources.md
#, fuzzy
msgid ""
"Please see the [Little Book of Rust Books](https://lborb.github.io/book/) "
"for even more Rust books."
msgstr ""
"Δείτε το [Little Book of Rust Books](https://lborb.github.io/book/) για "
"ακόμα περισσότερα βιβλία Rust."

#: src/credits.md
#, fuzzy
msgid ""
"The material here builds on top of the many great sources of Rust "
"documentation. See the page on [other resources](other-resources.md) for a "
"full list of useful resources."
msgstr ""
"Το υλικό εδώ βασίζεται στις πολλές σπουδαίες πηγές τεκμηρίωσης του Rust. "
"Δείτε τη σελίδα στο [other resources](other-resources.md) για μια πλήρη "
"λίστα χρήσιμων πόροι."

#: src/credits.md
#, fuzzy
msgid ""
"The material of Comprehensive Rust is licensed under the terms of the Apache "
"2.0 license, please see [`LICENSE`](https://github.com/google/comprehensive-"
"rust/blob/main/LICENSE) for details."
msgstr ""
"Το υλικό του Comprehensive Rust έχει άδεια χρήσης σύμφωνα με τους όρους του "
"Apache 2.0 άδεια, ανατρέξτε στην ενότητα [`ΑΔΕΙΑ`](../LICENSE) για "
"λεπτομέρειες."

#: src/credits.md
#, fuzzy
msgid "Rust by Example"
msgstr "Σκουριά από Παράδειγμα"

#: src/credits.md
#, fuzzy
msgid ""
"Some examples and exercises have been copied and adapted from [Rust by "
"Example](https://doc.rust-lang.org/rust-by-example/). Please see the "
"`third_party/rust-by-example/` directory for details, including the license "
"terms."
msgstr ""
"Ορισμένα παραδείγματα και ασκήσεις έχουν αντιγραφεί και προσαρμοστεί από το "
"[Rust by Παράδειγμα](https://doc.rust-lang.org/rust-by-example/). Παρακαλώ "
"δείτε το Κατάλογος `third_party/rust-by-example/` για λεπτομέρειες, "
"συμπεριλαμβανομένης της άδειας χρήσης όροι."

#: src/credits.md
#, fuzzy
msgid "Rust on Exercism"
msgstr "Σκουριά στην άσκηση"

#: src/credits.md
#, fuzzy
msgid ""
"Some exercises have been copied and adapted from [Rust on Exercism](https://"
"exercism.org/tracks/rust). Please see the `third_party/rust-on-exercism/` "
"directory for details, including the license terms."
msgstr ""
"Ορισμένες ασκήσεις έχουν αντιγραφεί και προσαρμοστεί από το [Rust on Άσκηση]"
"(https://exercism.org/tracks/rust). Παρακαλώ δείτε το Κατάλογος `third_party/"
"rust-on-exercism/` για λεπτομέρειες, συμπεριλαμβανομένης της άδειας όροι."

#: src/credits.md
#, fuzzy
msgid "CXX"
msgstr "CXX"

#: src/credits.md
#, fuzzy
msgid ""
"The [Interoperability with C++](android/interoperability/cpp.md) section "
"uses an image from [CXX](https://cxx.rs/). Please see the `third_party/cxx/` "
"directory for details, including the license terms."
msgstr ""
"Η ενότητα [Διαλειτουργικότητα με C++](android/interoperability/cpp.md) "
"χρησιμοποιεί ένα εικόνα από [CXX](https://cxx.rs/). Δείτε τον κατάλογο "
"`third_party/cxx/` για λεπτομέρειες, συμπεριλαμβανομένων των όρων άδειας."

#~ msgid "Small Example"
#~ msgstr "Μικρό Παράδειγμα"

#~ msgid "Why Rust?"
#~ msgstr "Γιατί Rust;"

#~ msgid "Compile Time Guarantees"
#~ msgstr "Εγγυήσεις Χρόνου Μεταγλώττισης"

#~ msgid "Runtime Guarantees"
#~ msgstr "Εγγυήσεις χρόνου εκτέλεσης"

#~ msgid "Modern Features"
#~ msgstr "Σύγχρονα Χαρακτηριστικά"

#~ msgid "Basic Syntax"
#~ msgstr "Βασική Σύνταξη"

#~ msgid "String vs str"
#~ msgstr "String vs str"

#~ msgid "Overloading"
#~ msgstr "Υπερφόρτωση"

#~ msgid "Arrays and for Loops"
#~ msgstr "Πίνακες και βρόχοι for"

#~ msgid "if expressions"
#~ msgstr "Eκφράσεις if"

#~ msgid "for expressions"
#~ msgstr "Εκφράσεις for"

#~ msgid "while expressions"
#~ msgstr "Εκφράσεις while"

#~ msgid "break & continue"
#~ msgstr "break & continue"

#~ msgid "loop expressions"
#~ msgstr "Εκφράσεις loop"

#~ msgid "Variant Payloads"
#~ msgstr "Περιεχόμενο Παραλλαγών"

#~ msgid "Enum Sizes"
#~ msgstr "Μέγεθος Απαριθμήσεων"

#, fuzzy
#~ msgid "Novel Control Flow"
#~ msgstr "Ροή ελέγχου"

#~ msgid "if let expressions"
#~ msgstr "Εκφράσεις if let"

#~ msgid "while let expressions"
#~ msgstr "Εκφράσεις while let"

#~ msgid "match expressions"
#~ msgstr "Εκφράσεις match"

#~ msgid "Destructuring Structs"
#~ msgstr "Αποδόμηση Δομών"

#~ msgid "Destructuring Arrays"
#~ msgstr "Αποδόμηση Πινάκων"

#~ msgid "Match Guards"
#~ msgstr "Φύλακες Αντιστοιχίσεων"

#, fuzzy
#~ msgid "Pattern Matching (TBD)"
#~ msgstr "Αντιστοίχιση προτύπων"

#~ msgid "Stack vs Heap"
#~ msgstr "Στοίβα και Σωρός"

#~ msgid "Stack Memory"
#~ msgstr "Μνήμη στοίβας"

#~ msgid "Manual Memory Management"
#~ msgstr "Χειροκίνητη διαχείριση μνήμης"

#~ msgid "Scope-Based Memory Management"
#~ msgstr "Διαχείριση μνήμης βάσει εμβέλιας"

#~ msgid "Garbage Collection"
#~ msgstr "Συλλογή σκουπιδιών"

#~ msgid "Rust Memory Management"
#~ msgstr "Διαχείριση μνήμης στη Rust"

#~ msgid "Comparison"
#~ msgstr "Σύγκριση"

#~ msgid "Moved Strings in Rust"
#~ msgstr "Μετακινημένες συμβολοσειρές στη Rust"

#~ msgid "Moves in Function Calls"
#~ msgstr "Μετακινήσεις σε κλήσεις συναρτήσεων"

#~ msgid "Copying and Cloning"
#~ msgstr "Αντιγραφή και κλωνοποίηση"

#~ msgid "Shared and Unique Borrows"
#~ msgstr "Κοινόχρηστα και μοναδικά δάνεια"

#, fuzzy
#~ msgid "Storing Books"
#~ msgstr "Συμβολοσειρές"

#~ msgid "Iterators and Ownership"
#~ msgstr "Iterators και ιδιοκτησία"

#~ msgid "Field Shorthand Syntax"
#~ msgstr "Συντομευμένο συντακτικό πεδίων"

#~ msgid "Method Receiver"
#~ msgstr "Δέκτης Μεθόδων"

#~ msgid "Option and Result"
#~ msgstr "Option και Result"

#~ msgid "Vec"
#~ msgstr "Vec"

#~ msgid "HashMap"
#~ msgstr "HashMap"

#~ msgid "Box"
#~ msgstr "Box"

#~ msgid "Recursive Data Types"
#~ msgstr "Αναδρομικοί τύποι δεδομένων"

#~ msgid "Rc"
#~ msgstr "Rc"

#~ msgid "Strings and Iterators"
#~ msgstr "Συμβολοσειρές και Επαναλήπτες"

#~ msgid "Generic Methods"
#~ msgstr "Γενικές Μέθοδοι"

#~ msgid "Monomorphization"
#~ msgstr "Μονομορφοποίηση"

#~ msgid "Default Methods"
#~ msgstr "Προ-υλοποιημένες μέθοδοι"

#~ msgid "impl Trait"
#~ msgstr "impl Trait"

#~ msgid "Important Traits"
#~ msgstr "Σημαντικά Χαρακτηριστικά"

#~ msgid "From and Into"
#~ msgstr "From και Into"

#, fuzzy
#~ msgid "Operators: Add, Mul, ..."
#~ msgstr "Add, Mul, ..."

#~ msgid "A Simple GUI Library"
#~ msgstr "Μια απλή βιβλιοθήκη GUI"

#~ msgid "Points and Polygons"
#~ msgstr "Σημεία και Πολύγωνα"

#~ msgid "Catching Stack Unwinding"
#~ msgstr "Πιάνοντας ξετυλίγματα στοίβας"

#~ msgid "Structured Error Handling"
#~ msgstr "Δομημένη διαχείριση σφαλμάτων"

#~ msgid "Propagating Errors with ?"
#~ msgstr "Διάδοση σφαλμάτων με ?"

#~ msgid "Converting Error Types"
#~ msgstr "Μετατροπή τύπων σφαλμάτων"

#~ msgid "Deriving Error Enums"
#~ msgstr "Εξαγωγή απαριθμήσεων σφαλμάτων"

#~ msgid "Adding Context to Errors"
#~ msgstr "Προσθήκη περιεχομένου στα σφάλματα"

#~ msgid "Send and Sync"
#~ msgstr "Send και Sync"

#~ msgid "Send"
#~ msgstr "Send"

#~ msgid "Sync"
#~ msgstr "Sync"

#~ msgid "Arc"
#~ msgstr "Arc"

#~ msgid "Mutex"
#~ msgstr "Mutex"

#~ msgid "Day 1 Morning"
#~ msgstr "1η ημέρα Πρωί"

#~ msgid "Day 1 Afternoon"
#~ msgstr "1η μέρα Απόγευμα"

#~ msgid "Day 2 Morning"
#~ msgstr "2η ημέρα Πρωί"

#~ msgid "Day 2 Afternoon"
#~ msgstr "2η μέρα Απόγευμα"

#~ msgid "Day 3 Morning"
#~ msgstr "3η ημέρα Πρωί"

#~ msgid "Day 3 Afternoon"
#~ msgstr "3η μέρα Απόγευμα"

#~ msgid "Bare Metal Rust Morning"
#~ msgstr "Rust χωρίς λειτουργικό σύστημα: Πρωί"

#, fuzzy
#~ msgid "Concurrency Morning"
#~ msgstr "Συγχρονισμός"

#, fuzzy
#~ msgid "Concurrency Afternoon"
#~ msgstr "Συγχρονισμός"

#~ msgid "The course is fast paced and covers a lot of ground:"
#~ msgstr "Το μάθημα έχει γρήγορο ρυθμό και καλύπτει:"

#, fuzzy
#~ msgid ""
#~ "Day 2: Memory management, ownership, compound data types, and the "
#~ "standard library."
#~ msgstr ""
#~ "Ημέρα 2: Σύνθετοι τύποι δεδομένων, ταίριασμα προτύπων, τυπική βιβλιοθήκη."

#, fuzzy
#~ msgid "Day 3: Generics, traits, error handling, testing, and unsafe Rust."
#~ msgstr ""
#~ "Ημέρα 3: Χαρακτηριστικά και γενικοί τύποι, χειρισμός σφαλμάτων, τεστ, μη "
#~ "ασφαλής Rust."

#, fuzzy
#~ msgid ""
#~ "We suggest using [VS Code](https://code.visualstudio.com/) to edit the "
#~ "code (but any LSP compatible editor works with rust-analyzer[3](https://"
#~ "rust-analyzer.github.io/))."
#~ msgstr ""
#~ "Αυτό θα επιτρέψει στον \\[rust-analyzer\\]\\[1\\] να μεταβεί στους "
#~ "ορισμούς. Προτείνουμε τη χρήση [VS Code](https://code.visualstudio.com/) "
#~ "για να επεξεργαστείτε τον κώδικα (αλλά κάθε πρόγραμμα επεξεργασίας "
#~ "συμβατό με LSP λειτουργεί)."

#, fuzzy
#~ msgid ""
#~ "Some folks also like to use the [JetBrains](https://www.jetbrains.com/"
#~ "clion/) family of IDEs, which do their own analysis but have their own "
#~ "tradeoffs. If you prefer them, you can install the [Rust Plugin](https://"
#~ "www.jetbrains.com/rust/). Please take note that as of January 2023 "
#~ "debugging only works on the CLion version of the JetBrains IDEA suite."
#~ msgstr ""
#~ "Σε μερικούς ανθρώπους αρέσει επίσης να χρησιμοποιούν την οικογένεια IDE "
#~ "[JetBrains](https://www.jetbrains.com/clion/), που κάνουν τη δική τους "
#~ "ανάλυση αλλά έχουν τις δικές τους ανταλλαγές. Εάν τα προτιμάτε, μπορείτε "
#~ "να εγκαταστήσετε το [Rust Plugin](https://www.jetbrains.com/rust/). "
#~ "Λάβετε υπόψη ότι από τον Ιανουάριο του 2023 ο εντοπισμός σφαλμάτων "
#~ "λειτουργεί μόνο στην έκδοση CLion της σουίτας JetBrains IDEA."

#, fuzzy
#~ msgid ""
#~ "The idea for the first day is to show _just enough_ of Rust to be able to "
#~ "speak about the famous borrow checker. The way Rust handles memory is a "
#~ "major feature and we should show students this right away."
#~ msgstr ""
#~ "Η ιδέα για την πρώτη μέρα είναι να δείξουμε _αρκετά_ Rust για να μπορέσει "
#~ "να μιλήσει για το περίφημο δάνειο πούλι. Ο τρόπος με τον οποίο η Rust "
#~ "χειρίζεται τη μνήμη είναι ένα σημαντικό χαρακτηριστικό και αυτό θα πρέπει "
#~ "να το δείξουμε αμέσως στους μαθητές."

#, fuzzy
#~ msgid ""
#~ "If you're teaching this in a classroom, this is a good place to go over "
#~ "the schedule. We suggest splitting the day into two parts (following the "
#~ "slides):"
#~ msgstr ""
#~ "Εάν το διδάσκετε σε μια τάξη, αυτό είναι ένα καλό μέρος για να το δείτε "
#~ "πρόγραμμα. Προτείνουμε να χωρίσετε την ημέρα σε δύο μέρη (ακολουθώντας "
#~ "τις διαφάνειες):"

#, fuzzy
#~ msgid "Morning: 9:00 to 12:00,"
#~ msgstr "Πρωί: 9:00 έως 12:00,"

#, fuzzy
#~ msgid "Afternoon: 13:00 to 16:00."
#~ msgstr "Απόγευμα: 13:00 έως 16:00."

#, fuzzy
#~ msgid ""
#~ "You can of course adjust this as necessary. Please make sure to include "
#~ "breaks, we recommend a break every hour!"
#~ msgstr ""
#~ "Μπορείτε φυσικά να το προσαρμόσετε όπως απαιτείται. Φροντίστε να "
#~ "συμπεριλάβετε διαλείμματα, προτείνουμε ένα διάλειμμα κάθε ώρα!"

#, fuzzy
#~ msgid "Here is a small example program in Rust:"
#~ msgstr "Ακολουθεί ένα μικρό παράδειγμα προγράμματος στο Rust:"

#, fuzzy
#~ msgid ""
#~ "The code implements the Collatz conjecture: it is believed that the loop "
#~ "will always end, but this is not yet proved. Edit the code and play with "
#~ "different inputs."
#~ msgstr ""
#~ "Ο κώδικας υλοποιεί την εικασία Collatz: πιστεύεται ότι ο βρόχος θα πάντα "
#~ "τελειώνει, αλλά αυτό δεν έχει ακόμη αποδειχθεί. Επεξεργαστείτε τον κώδικα "
#~ "και παίξτε με διαφορετικά εισροές."

#, fuzzy
#~ msgid "Compile time memory safety."
#~ msgstr "Συγκεντρώστε την ασφάλεια της μνήμης χρόνου."

#, fuzzy
#~ msgid "Lack of undefined runtime behavior."
#~ msgstr "Έλλειψη απροσδιόριστης συμπεριφοράς χρόνου εκτέλεσης."

#, fuzzy
#~ msgid "Modern language features."
#~ msgstr "Χαρακτηριστικά σύγχρονης γλώσσας."

#, fuzzy
#~ msgid "Static memory management at compile time:"
#~ msgstr "Διαχείριση στατικής μνήμης κατά το χρόνο μεταγλώττισης:"

#, fuzzy
#~ msgid "No memory leaks (_mostly_, see notes)."
#~ msgstr "Δεν υπάρχουν διαρροές μνήμης (_κυρίως_, βλέπε σημειώσεις)."

#, fuzzy
#~ msgid ""
#~ "It is possible to produce memory leaks in (safe) Rust. Some examples are:"
#~ msgstr ""
#~ "Είναι δυνατό να προκληθούν διαρροές μνήμης στο (ασφαλές) Rust. Μερικά "
#~ "παραδείγματα είναι:"

#, fuzzy
#~ msgid ""
#~ "You can use [`Box::leak`](https://doc.rust-lang.org/std/boxed/struct.Box."
#~ "html#method.leak) to leak a pointer. A use of this could be to get "
#~ "runtime-initialized and runtime-sized static variables"
#~ msgstr ""
#~ "Μπορείτε να χρησιμοποιήσετε το [`Box::leak`](https://doc.rust-lang.org/"
#~ "std/boxed/struct.Box.html#method.leak) για να διαρρεύσετε έναν δείκτη. "
#~ "Μια χρήση αυτού θα μπορούσε να λάβετε στατικές μεταβλητές με αρχικοποίηση "
#~ "χρόνου εκτέλεσης και στατικές μεταβλητές μεγέθους χρόνου εκτέλεσης"

#, fuzzy
#~ msgid ""
#~ "You can use [`std::mem::forget`](https://doc.rust-lang.org/std/mem/fn."
#~ "forget.html) to make the compiler \"forget\" about a value (meaning the "
#~ "destructor is never run)."
#~ msgstr ""
#~ "Μπορείτε να χρησιμοποιήσετε το [`std::mem::forget`](https://doc.rust-lang."
#~ "org/std/mem/fn.forget.html) για να κάνετε τον μεταγλωττιστή να "
#~ "\"ξεχάσει\" μια τιμή (που σημαίνει ότι ο καταστροφέας δεν εκτελείται "
#~ "ποτέ)."

#, fuzzy
#~ msgid ""
#~ "You can also accidentally create a [reference cycle](https://doc.rust-"
#~ "lang.org/book/ch15-06-reference-cycles.html) with `Rc` or `Arc`."
#~ msgstr ""
#~ "Μπορείτε επίσης να δημιουργήσετε κατά λάθος έναν \\[κύκλο αναφοράς\\] με "
#~ "\"Rc\" ή «Τόξο»."

#, fuzzy
#~ msgid ""
#~ "In fact, some will consider infinitely populating a collection a memory "
#~ "leak and Rust does not protect from those."
#~ msgstr ""
#~ "Στην πραγματικότητα, ορισμένοι θα εξετάσουν το ενδεχόμενο να συμπληρώσουν "
#~ "άπειρα μια συλλογή ως ανάμνηση διαρροή και η Rust δεν προστατεύει από "
#~ "αυτά."

#, fuzzy
#~ msgid ""
#~ "For the purpose of this course, \"No memory leaks\" should be understood "
#~ "as \"Pretty much no _accidental_ memory leaks\"."
#~ msgstr ""
#~ "Για τους σκοπούς αυτού του μαθήματος, θα πρέπει να γίνει κατανοητό το "
#~ "\"No memory leaks\". ως \"Σχεδόν καμία _τυχαία_ διαρροή μνήμης\"."

#, fuzzy
#~ msgid ""
#~ "Integer overflow is defined via the [`overflow-checks`](https://doc.rust-"
#~ "lang.org/rustc/codegen-options/index.html#overflow-checks) compile-time "
#~ "flag. If enabled, the program will panic (a controlled crash of the "
#~ "program), otherwise you get wrap-around semantics. By default, you get "
#~ "panics in debug mode (`cargo build`) and wrap-around in release mode "
#~ "(`cargo build --release`)."
#~ msgstr ""
#~ "Η υπερχείλιση ακέραιου αριθμού ορίζεται μέσω μιας επισήμανσης χρόνου "
#~ "μεταγλώττισης. Οι επιλογές είναι είτε ένας πανικός (ένα ελεγχόμενο crash "
#~ "του προγράμματος) είτε να αναδιπλωθεί σημασιολογία. Από προεπιλογή, "
#~ "λαμβάνετε πανικό στη λειτουργία εντοπισμού σφαλμάτων (\"κατασκευή "
#~ "φορτίου\") και περιτύλιξη σε λειτουργία απελευθέρωσης («κατασκευή φορτίου "
#~ "--απελευθέρωση»)."

#, fuzzy
#~ msgid "Rust is built with all the experience gained in the last decades."
#~ msgstr ""
#~ "Το Rust κατασκευάζεται με όλη την εμπειρία που αποκτήθηκε τα τελευταία 40 "
#~ "χρόνια."

#, fuzzy
#~ msgid "Language Features"
#~ msgstr "Χαρακτηριστικά γλώσσας"

#, fuzzy
#~ msgid "Tooling"
#~ msgstr "Εργαλεία"

#, fuzzy
#~ msgid "Like C++, Rust has references:"
#~ msgstr "Όπως η C++, το Rust έχει αναφορές:"

#, fuzzy
#~ msgid ""
#~ "We must dereference `ref_x` when assigning to it, similar to C and C++ "
#~ "pointers."
#~ msgstr ""
#~ "Πρέπει να μην αναφέρουμε το «ref_x» κατά την ανάθεση σε αυτό, παρόμοια με "
#~ "τους δείκτες C και C++."

#, fuzzy
#~ msgid ""
#~ "References that are declared as `mut` can be bound to different values "
#~ "over their lifetime."
#~ msgstr ""
#~ "Οι αναφορές που δηλώνονται ως «mut» μπορούν να δεσμευτούν σε διαφορετικές "
#~ "τιμές κατά τη διάρκεια της ζωής τους."

#, fuzzy
#~ msgid "A reference is said to \"borrow\" the value it refers to."
#~ msgstr ""
#~ "Μια αναφορά λέγεται ότι \"δανείζεται\" την τιμή στην οποία αναφέρεται."

#, fuzzy
#~ msgid ""
#~ "Rust is tracking the lifetimes of all references to ensure they live long "
#~ "enough."
#~ msgstr ""
#~ "Το Rust παρακολουθεί τη διάρκεια ζωής όλων των αναφορών για να "
#~ "διασφαλίσει ότι ζουν πολύ αρκετά."

#, fuzzy
#~ msgid "`String` vs `str`"
#~ msgstr "`String` vs `str`"

#, fuzzy
#~ msgid "We can now understand the two string types in Rust:"
#~ msgstr "Μπορούμε τώρα να κατανοήσουμε τους δύο τύπους χορδών στο Rust:"

#, fuzzy
#~ msgid ""
#~ "A Rust version of the famous [FizzBuzz](https://en.wikipedia.org/wiki/"
#~ "Fizz_buzz) interview question:"
#~ msgstr ""
#~ "Μια έκδοση Rust της περίφημης ερώτησης συνέντευξης [FizzBuzz](https://en."
#~ "wikipedia.org/wiki/Fizz_buzz):"

#, fuzzy
#~ msgid ""
#~ "Methods are functions associated with a type. The `self` argument of a "
#~ "method is an instance of the type it is associated with:"
#~ msgstr ""
#~ "Το Rust έχει μεθόδους, είναι απλώς λειτουργίες που σχετίζονται με έναν "
#~ "συγκεκριμένο τύπο. ο Το πρώτο όρισμα μιας μεθόδου είναι ένα παράδειγμα "
#~ "του τύπου με το οποίο σχετίζεται:"

#, fuzzy
#~ msgid ""
#~ "We will look much more at methods in today's exercise and in tomorrow's "
#~ "class."
#~ msgstr ""
#~ "Θα εξετάσουμε πολύ περισσότερο τις μεθόδους στη σημερινή άσκηση και στην "
#~ "αυριανή τάξη."

#, fuzzy
#~ msgid "Function Overloading"
#~ msgstr "Λειτουργία Υπερφόρτωση"

#, fuzzy
#~ msgid "Overloading is not supported:"
#~ msgstr "Η υπερφόρτωση δεν υποστηρίζεται:"

#, fuzzy
#~ msgid "Always takes a fixed number of parameters."
#~ msgstr "Λαμβάνει πάντα έναν σταθερό αριθμό παραμέτρων."

#, fuzzy
#~ msgid "Default values are not supported:"
#~ msgstr "Οι προεπιλεγμένες τιμές δεν υποστηρίζονται:"

#, fuzzy
#~ msgid "All call sites have the same number of arguments."
#~ msgstr "Όλοι οι ιστότοποι κλήσεων έχουν τον ίδιο αριθμό ορισμάτων."

#, fuzzy
#~ msgid "Macros are sometimes used as an alternative."
#~ msgstr "Οι μακροεντολές χρησιμοποιούνται μερικές φορές ως εναλλακτική λύση."

#, fuzzy
#~ msgid "However, function parameters can be generic:"
#~ msgstr "Ωστόσο, οι παράμετροι συνάρτησης μπορεί να είναι γενικές:"

#, fuzzy
#~ msgid ""
#~ "When using generics, the standard library's `Into<T>` can provide a kind "
#~ "of limited polymorphism on argument types. We will see more details in a "
#~ "later section."
#~ msgstr ""
#~ "Όταν χρησιμοποιείτε γενικά, το 'Into\n"
#~ "\n"
#~ "' της τυπικής βιβλιοθήκης μπορεί να παρέχει ένα είδος περιορισμένου "
#~ "πολυμορφισμός σε τύπους επιχειρημάτων. Θα δούμε περισσότερες λεπτομέρειες "
#~ "σε επόμενη ενότητα."

#, fuzzy
#~ msgid "Day 1: Morning Exercises"
#~ msgstr "Ημέρα 1: Πρωινές ασκήσεις"

#, fuzzy
#~ msgid "In these exercises, we will explore two parts of Rust:"
#~ msgstr "Σε αυτές τις ασκήσεις, θα εξερευνήσουμε δύο μέρη του Rust:"

#, fuzzy
#~ msgid "Implicit conversions between types."
#~ msgstr "Σιωπηρές μετατροπές μεταξύ τύπων."

#, fuzzy
#~ msgid "A few things to consider while solving the exercises:"
#~ msgstr ""
#~ "Μερικά πράγματα που πρέπει να λάβετε υπόψη κατά την επίλυση των ασκήσεων:"

#, fuzzy
#~ msgid ""
#~ "Use a local Rust installation, if possible. This way you can get auto-"
#~ "completion in your editor. See the page about [Using Cargo](../../cargo."
#~ "md) for details on installing Rust."
#~ msgstr ""
#~ "Χρησιμοποιήστε μια τοπική εγκατάσταση Rust, εάν είναι δυνατόν. Με αυτόν "
#~ "τον τρόπο μπορείτε να αποκτήσετε αυτόματη συμπλήρωση στον επεξεργαστή "
#~ "σας. Δείτε τη σελίδα σχετικά με το [Using Cargo](../../cargo.md) για "
#~ "λεπτομέρειες κατά την εγκατάσταση του Rust."

#, fuzzy
#~ msgid ""
#~ "The code snippets are not editable on purpose: the inline code snippets "
#~ "lose their state if you navigate away from the page."
#~ msgstr ""
#~ "Τα αποσπάσματα κώδικα δεν είναι επεξεργάσιμα επίτηδες: τα ενσωματωμένα "
#~ "αποσπάσματα κώδικα χάνονται την κατάστασή τους εάν απομακρυνθείτε από τη "
#~ "σελίδα."

#, fuzzy
#~ msgid ""
#~ "Rust will not automatically apply _implicit conversions_ between types "
#~ "([unlike C++](https://en.cppreference.com/w/cpp/language/"
#~ "implicit_conversion)). You can see this in a program like this:"
#~ msgstr ""
#~ "Το Rust δεν θα εφαρμόσει αυτόματα _implicit conversions_ μεταξύ των τύπων "
#~ "([σε αντίθεση με C++](https://en.cppreference.com/w/cpp/language/"
#~ "implicit_conversion)). Μπορείτε να το δείτε σε ένα πρόγραμμα όπως αυτό:"

#, fuzzy
#~ msgid ""
#~ "The Rust integer types all implement the [`From<T>`](https://doc.rust-"
#~ "lang.org/std/convert/trait.From.html) and [`Into<T>`](https://doc.rust-"
#~ "lang.org/std/convert/trait.Into.html) traits to let us convert between "
#~ "them. The `From<T>` trait has a single `from()` method and similarly, the "
#~ "`Into<T>` trait has a single `into()` method. Implementing these traits "
#~ "is how a type expresses that it can be converted into another type."
#~ msgstr ""
#~ "Όλοι οι τύποι ακέραιου αριθμού Rust εφαρμόζουν τα [`From<T>`](https://doc."
#~ "rust-lang.org/std/convert/trait.From.html) και [`Into<T>`](https://doc."
#~ "rust-lang.org/std/convert/trait.Into.html) χαρακτηριστικά για να μας "
#~ "αφήσουν να μετατρέψουμε μεταξύ τους. Το χαρακτηριστικό \"From\n"
#~ "\n"
#~ "\" έχει ένα μόνο \"from()\". μέθοδο και παρομοίως, το χαρακτηριστικό "
#~ "«Into\n"
#~ "\n"
#~ "» έχει μία μόνο μέθοδο «into()». Η εφαρμογή αυτών των χαρακτηριστικών "
#~ "είναι ο τρόπος με τον οποίο ένας τύπος εκφράζει ότι μπορεί να μετατραπεί "
#~ "σε άλλου τύπου."

#, fuzzy
#~ msgid ""
#~ "The standard library has an implementation of `From<i8> for i16`, which "
#~ "means that we can convert a variable `x` of type `i8` to an `i16` by "
#~ "calling  `i16::from(x)`. Or, simpler, with `x.into()`, because `From<i8> "
#~ "for i16` implementation automatically create an implementation of "
#~ "`Into<i16> for i8`."
#~ msgstr ""
#~ "Η τυπική βιβλιοθήκη έχει μια υλοποίηση του «From\n"
#~ "\n"
#~ " για i16», που σημαίνει ότι μπορούμε να μετατρέψουμε μια μεταβλητή «x» "
#~ "τύπου «i8» σε «i16» καλώντας `i16::from(x)`. Ή, απλούστερα, με `x."
#~ "into()`, επειδή `From<i8> για i16` υλοποίηση δημιουργεί αυτόματα μια "
#~ "υλοποίηση του «Into\n"
#~ "\n"
#~ " για i8»."

#, fuzzy
#~ msgid ""
#~ "The same applies for your own `From` implementations for your own types, "
#~ "so it is sufficient to only implement `From` to get a respective `Into` "
#~ "implementation automatically."
#~ msgstr ""
#~ "Το ίδιο ισχύει και για τις δικές σας υλοποιήσεις «Από» για τους δικούς "
#~ "σας τύπους, έτσι είναι αρκεί για να εφαρμοστεί μόνο το \"From\" για να "
#~ "ληφθεί αυτόματα μια αντίστοιχη υλοποίηση \"Into\"."

#, fuzzy
#~ msgid "Execute the above program and look at the compiler error."
#~ msgstr ""
#~ "Αλλάξτε τους τύπους \"x\" και \"y\" σε άλλα πράγματα (όπως \"f32\", "
#~ "\"bool\", `i128`) για να δείτε ποιους τύπους μπορείτε να μετατρέψετε σε "
#~ "ποιους άλλους τύπους. Δοκιμάστε μετατροπή μικρών τύπων σε μεγάλους τύπους "
#~ "και το αντίστροφο. Ελεγξε το [τυπική τεκμηρίωση βιβλιοθήκης](https://doc."
#~ "rust-lang.org/std/convert/trait.From.html) για να δείτε εάν το \"From"

#, fuzzy
#~ msgid "Update the code above to use `into()` to do the conversion."
#~ msgstr "\" έχει εφαρμοστεί για τα ζευγάρια που ελέγχετε."

#, fuzzy
#~ msgid "Arrays and `for` Loops"
#~ msgstr "Πίνακες και βρόχοι «για»."

#, fuzzy
#~ msgid "We saw that an array can be declared like this:"
#~ msgstr "Είδαμε ότι ένας πίνακας μπορεί να δηλωθεί ως εξής:"

#, fuzzy
#~ msgid ""
#~ "You can print such an array by asking for its debug representation with "
#~ "`{:?}`:"
#~ msgstr ""
#~ "Μπορείτε να εκτυπώσετε έναν τέτοιο πίνακα ζητώντας την αναπαράστασή του "
#~ "για τον εντοπισμό σφαλμάτων με \"{:?}\":"

#, fuzzy
#~ msgid ""
#~ "Rust lets you iterate over things like arrays and ranges using the `for` "
#~ "keyword:"
#~ msgstr ""
#~ "Το Rust σάς επιτρέπει να επαναλαμβάνετε πράγματα όπως πίνακες και εύρη "
#~ "χρησιμοποιώντας το \"για\". λέξη-κλειδί:"

#, fuzzy
#~ msgid "Bonus Question"
#~ msgstr "Ερώτηση μπόνους"

#, fuzzy
#~ msgid ""
#~ "Could you use `&[i32]` slices instead of hard-coded 3 × 3 matrices for "
#~ "your argument and return types? Something like `&[&[i32]]` for a two-"
#~ "dimensional slice-of-slices. Why or why not?"
#~ msgstr ""
#~ "Θα μπορούσατε να χρησιμοποιήσετε φέτες \"&\\[i32\\]\" αντί για σκληρούς "
#~ "κωδικοποιημένους πίνακες 3 × 3 για όρισμα και τύποι επιστροφής; Κάτι σαν "
#~ "\"&\\[&\\[i32\\]\\]\" για ένα δισδιάστατο φέτα φέτες. Γιατί ή γιατί όχι?"

#, fuzzy
#~ msgid ""
#~ "See the [`ndarray` crate](https://docs.rs/ndarray/) for a production "
#~ "quality implementation."
#~ msgstr ""
#~ "Δείτε το [`ndarray` crate](https://docs.rs/ndarray/) για ποιότητα "
#~ "παραγωγής εκτέλεση."

#, fuzzy
#~ msgid ""
#~ "The solution and the answer to the bonus section are available in the  "
#~ "[Solution](solutions-morning.md#arrays-and-for-loops) section."
#~ msgstr ""
#~ "Η λύση και η απάντηση στην ενότητα μπόνους είναι διαθέσιμες στο Ενότητα "
#~ "[Λύση](solutions-morning.md#arrays-and-for-loops)."

#, fuzzy
#~ msgid ""
#~ "As we have seen, `if` is an expression in Rust. It is used to "
#~ "conditionally evaluate one of two blocks, but the blocks can have a value "
#~ "which then becomes the value of the `if` expression. Other control flow "
#~ "expressions work similarly in Rust."
#~ msgstr ""
#~ "Όπως είδαμε, το «αν» είναι μια έκφραση στο Rust. Χρησιμοποιείται υπό "
#~ "όρους αξιολογήστε ένα από τα δύο μπλοκ, αλλά τα μπλοκ μπορεί να έχουν μια "
#~ "τιμή που στη συνέχεια γίνεται την τιμή της έκφρασης «αν». Άλλες εκφράσεις "
#~ "ροής ελέγχου λειτουργούν παρόμοια στο Rust."

#, fuzzy
#~ msgid ""
#~ "The same rule is used for functions: the value of the function body is "
#~ "the return value:"
#~ msgstr ""
#~ "Ο ίδιος κανόνας χρησιμοποιείται για τις συναρτήσεις: η τιμή του σώματος "
#~ "συνάρτησης είναι το επιστρεφόμενη τιμή:"

#, fuzzy
#~ msgid ""
#~ "The point of this slide is to show that blocks have a type and value in "
#~ "Rust. "
#~ msgstr "Βασικά σημεία:"

#, fuzzy
#~ msgid ""
#~ "The [`for` loop](https://doc.rust-lang.org/std/keyword.for.html) is "
#~ "closely related to the [`while let` loop](while-let-expressions.md). It "
#~ "will automatically call `into_iter()` on the expression and then iterate "
#~ "over it:"
#~ msgstr ""
#~ "Η έκφραση \"for\" σχετίζεται στενά με την έκφραση \"while let\". Θα καλεί "
#~ "αυτόματα το «into_iter()» στην έκφραση και, στη συνέχεια, επαναλαμβάνει "
#~ "πάνω από αυτήν:"

#, fuzzy
#~ msgid "You can use `break` and `continue` here as usual."
#~ msgstr ""
#~ "Μπορείτε να χρησιμοποιήσετε το «διάλειμμα» και το «συνέχεια» εδώ ως "
#~ "συνήθως."

#, fuzzy
#~ msgid "Index iteration is not a special syntax in Rust for just that case."
#~ msgstr "\\<λεπτομέρειες>"

#, fuzzy
#~ msgid "`(0..10)` is a range that implements an `Iterator` trait. "
#~ msgstr ""
#~ "Η επανάληψη ευρετηρίου δεν είναι ειδική σύνταξη στο Rust για αυτήν την "
#~ "περίπτωση."

#, fuzzy
#~ msgid ""
#~ "`step_by` is a method that returns another `Iterator` that skips every "
#~ "other element. "
#~ msgstr ""
#~ "Το \"(0..10)\" είναι μια περιοχή που υλοποιεί ένα χαρακτηριστικό "
#~ "\"Iterator\"."

#, fuzzy
#~ msgid ""
#~ "Modify the elements in the vector and explain the compiler errors. Change "
#~ "vector `v` to be mutable and the for loop to `for x in v.iter_mut()`."
#~ msgstr ""
#~ "Το \"step_by\" είναι μια μέθοδος που επιστρέφει έναν άλλο \"Iterator\" "
#~ "που παραλείπει κάθε άλλο στοιχείο."

#, fuzzy
#~ msgid "`loop` expressions"
#~ msgstr "εκφράσεις «βρόχου»."

#, fuzzy
#~ msgid "Here you must either `break` or `return` to stop the loop:"
#~ msgstr ""
#~ "Τέλος, υπάρχει μια λέξη-κλειδί «βρόχος» που δημιουργεί έναν ατελείωτο "
#~ "βρόχο. Εδώ πρέπει είτε \"break\" είτε \"return\" για να σταματήσει ο "
#~ "βρόχος:"

#, fuzzy
#~ msgid ""
#~ "Due to type inference the `i32` is optional. We will gradually show the "
#~ "types less and less as the course progresses."
#~ msgstr ""
#~ "Λόγω συμπερασμάτων τύπου, το «i32» είναι προαιρετικό. Σταδιακά θα "
#~ "δείχνουμε τους τύπους όλο και λιγότερο όσο προχωρά ο τύπος."

#, fuzzy
#~ msgid ""
#~ "The following code tells the compiler to copy into a certain generic "
#~ "container without the code ever explicitly specifying the contained type, "
#~ "using `_` as a placeholder:"
#~ msgstr ""
#~ "Ο ακόλουθος κώδικας λέει στον μεταγλωττιστή να αντιγράψει σε ένα "
#~ "συγκεκριμένο γενικό κοντέινερ χωρίς ποτέ ο κώδικας να προσδιορίζει ρητά "
#~ "τον τύπο που περιέχεται, χρησιμοποιώντας το «\\_» ως σύμβολο κράτησης "
#~ "θέσης:"

#, fuzzy
#~ msgid ""
#~ "[`collect`](https://doc.rust-lang.org/stable/std/iter/trait.Iterator."
#~ "html#method.collect) relies on [`FromIterator`](https://doc.rust-lang.org/"
#~ "std/iter/trait.FromIterator.html), which [`HashSet`](https://doc.rust-"
#~ "lang.org/std/collections/struct.HashSet.html#impl-FromIterator%3CT%3E-for-"
#~ "HashSet%3CT,+S%3E) implements."
#~ msgstr ""
#~ "Το [`collect`](https://doc.rust-lang.org/stable/std/iter/trait.Iterator."
#~ "html#method.collect) βασίζεται στο `FromIterator`, το οποίο "
#~ "\\[`HashSet`\\](https:/ /doc.rust-lang.org/std/iter/trait.FromIterator."
#~ "html) υλοποιεί."

#, fuzzy
#~ msgid "Static and Constant Variables"
#~ msgstr "Στατικές και σταθερές μεταβλητές"

#, fuzzy
#~ msgid ""
#~ "The following code demonstrates why the compiler can't simply reuse "
#~ "memory locations when shadowing an immutable variable in a scope, even if "
#~ "the type does not change."
#~ msgstr ""
#~ "Ο ακόλουθος κώδικας δείχνει γιατί ο μεταγλωττιστής δεν μπορεί απλώς να "
#~ "επαναχρησιμοποιήσει θέσεις μνήμης όταν σκιάζει μια αμετάβλητη μεταβλητή "
#~ "σε ένα εύρος, ακόμα κι αν ο τύπος δεν αλλάξει."

#, fuzzy
#~ msgid ""
#~ "This page offers an enum type `CoinFlip` with two variants `Heads` and "
#~ "`Tails`. You might note the namespace when using variants."
#~ msgstr ""
#~ "Αυτή η σελίδα προσφέρει έναν τύπο \"CoinFlip\" με δύο παραλλαγές "
#~ "\"Heads\" και \"Tail\". Μπορείτε να σημειώσετε τον χώρο ονομάτων όταν "
#~ "χρησιμοποιείτε παραλλαγές."

#, fuzzy
#~ msgid "In both, associated functions are defined within an `impl` block."
#~ msgstr ""
#~ "Και στις δύο, οι συσχετισμένες συναρτήσεις ορίζονται μέσα σε ένα μπλοκ "
#~ "«impl»."

#, fuzzy
#~ msgid ""
#~ "You can define richer enums where the variants carry data. You can then "
#~ "use the `match` statement to extract the data from each variant:"
#~ msgstr ""
#~ "Μπορείτε να ορίσετε πλουσιότερους αριθμούς όπου οι παραλλαγές μεταφέρουν "
#~ "δεδομένα. Στη συνέχεια, μπορείτε να χρησιμοποιήσετε το Δήλωση "
#~ "«ταιριάσματος» για εξαγωγή των δεδομένων από κάθε παραλλαγή:"

#, fuzzy
#~ msgid ""
#~ "The expression is matched against the patterns from top to bottom. There "
#~ "is no fall-through like in C or C++."
#~ msgstr "Το \"match\" επιθεωρεί ένα κρυφό πεδίο διάκρισης στο \"enum\"."

#, fuzzy
#~ msgid ""
#~ "The match expression has a value. The value is the last expression in the "
#~ "match arm which was executed."
#~ msgstr ""
#~ "Το \"WebEvent::Click { ... }\" δεν είναι ακριβώς το ίδιο με το "
#~ "\"WebEvent::Click(Click)\" με ένα ανώτερο επίπεδο \"struct Click "
#~ "{ ... }\". Η ενσωματωμένη έκδοση δεν μπορεί να εφαρμόσει χαρακτηριστικά, "
#~ "για παράδειγμα."

#, fuzzy
#~ msgid ""
#~ "Rust enums are packed tightly, taking constraints due to alignment into "
#~ "account:"
#~ msgstr ""
#~ "Οι σκουριές συσκευάζονται σφιχτά, λαμβάνοντας υπόψη τους περιορισμούς "
#~ "λόγω ευθυγράμμισης:"

#, fuzzy
#~ msgid ""
#~ "The [`match` keyword](https://doc.rust-lang.org/reference/expressions/"
#~ "match-expr.html) is used to match a value against one or more patterns. "
#~ "In that sense, it works like a series of `if let` expressions:"
#~ msgstr ""
#~ "Η λέξη-κλειδί \"αντιστοιχία\" χρησιμοποιείται για την αντιστοίχιση μιας "
#~ "τιμής με ένα ή περισσότερα μοτίβα. Σε Με αυτή την έννοια, λειτουργεί σαν "
#~ "μια σειρά από εκφράσεις «αν ας»:"

#, fuzzy
#~ msgid "The `_` pattern is a wildcard pattern which matches any value."
#~ msgstr ""
#~ "Το μοτίβο `_` είναι ένα μοτίβο μπαλαντέρ που ταιριάζει με οποιαδήποτε "
#~ "τιμή."

#, fuzzy
#~ msgid ""
#~ "It can be useful to show how binding works, by for instance replacing a "
#~ "wildcard character with a variable, or removing the quotes around `q`."
#~ msgstr "Το \"1..=5\" αντιπροσωπεύει ένα εύρος που περιλαμβάνει"

#, fuzzy
#~ msgid "You can demonstrate matching on a reference."
#~ msgstr "Το `_` είναι μπαλαντέρ"

#, fuzzy
#~ msgid ""
#~ "This might be a good time to bring up the concept of irrefutable "
#~ "patterns, as the term can show up in error messages."
#~ msgstr ""
#~ "Μπορεί να είναι χρήσιμο να δείξετε πώς λειτουργεί το δεσμευτικό, για "
#~ "παράδειγμα αντικαθιστώντας έναν χαρακτήρα μπαλαντέρ με μια μεταβλητή ή "
#~ "αφαιρώντας τα εισαγωγικά γύρω από το `q`.\n"
#~ "\n"
#~ "Μπορείτε να επιδείξετε την αντιστοίχιση σε μια αναφορά.\n"
#~ "\n"
#~ "Αυτή μπορεί να είναι μια καλή στιγμή για να αναδείξετε την έννοια των "
#~ "αδιαμφισβήτητων προτύπων, καθώς ο όρος μπορεί να εμφανίζεται σε μηνύματα "
#~ "λάθους."

#, fuzzy
#~ msgid "You can also destructure `structs`:"
#~ msgstr "Μπορείτε επίσης να καταστρέψετε «structs»:"

#, fuzzy
#~ msgid ""
#~ "When matching, you can add a _guard_ to a pattern. This is an arbitrary "
#~ "Boolean expression which will be executed if the pattern matches:"
#~ msgstr ""
#~ "Κατά την αντιστοίχιση, μπορείτε να προσθέσετε ένα _guard_ σε ένα μοτίβο. "
#~ "Αυτό είναι ένα αυθαίρετο Boolean έκφραση που θα εκτελεστεί εάν το μοτίβο "
#~ "ταιριάζει:"

#, fuzzy
#~ msgid ""
#~ "You can use the variables defined in the pattern in your if expression."
#~ msgstr ""
#~ "Δεν είναι ίδια με την ξεχωριστή έκφραση «αν» μέσα στο βραχίονα του αγώνα. "
#~ "Μια έκφραση `if` μέσα στο μπλοκ διακλάδωσης (μετά από `=>`) εμφανίζεται "
#~ "μετά την επιλογή του βραχίονα αντιστοίχισης. Η αποτυχία της συνθήκης "
#~ "\"αν\" μέσα σε αυτό το μπλοκ δεν θα οδηγήσει σε άλλους βραχίονες της "
#~ "αρχικής έκφρασης «ταιριάσματος» που εξετάζεται."

#, fuzzy
#~ msgid "Day 1: Afternoon Exercises"
#~ msgstr "Ημέρα 1: Απογευματινές Ασκήσεις"

#, fuzzy
#~ msgid "We will look at two things:"
#~ msgstr "Θα δούμε δύο πράγματα:"

#, fuzzy
#~ msgid "The Luhn algorithm,"
#~ msgstr "Αλγόριθμος Luhn"

#, fuzzy
#~ msgid "An exercise on pattern matching."
#~ msgstr "Αριθμοί και αντιστοίχιση μοτίβων."

#, fuzzy
#~ msgid ""
#~ "Copy the code below to <https://play.rust-lang.org/> and implement the "
#~ "function."
#~ msgstr ""
#~ "Αντιγράψτε τον παρακάτω κώδικα στο <https://play.rust-lang.org/> και "
#~ "εφαρμόστε το λειτουργίες:"

#, fuzzy
#~ msgid "Structs and methods."
#~ msgstr "Συμβολοσειρές και Επαναλήπτες"

#, fuzzy
#~ msgid "First, let's refresh how memory management works."
#~ msgstr ""
#~ "Αρχικά, ας ανανεώσουμε τον τρόπο λειτουργίας της διαχείρισης μνήμης."

#, fuzzy
#~ msgid "The Stack vs The Heap"
#~ msgstr "The Stack vs The Heap"

#, fuzzy
#~ msgid "Stack and Heap Example"
#~ msgstr "Στοίβα και Σωρός"

#, fuzzy
#~ msgid "You allocate and deallocate heap memory yourself."
#~ msgstr "Εκχωρείτε και εκχωρείτε τη μνήμη σωρού μόνοι σας."

#, fuzzy
#~ msgid ""
#~ "If not done with care, this can lead to crashes, bugs, security "
#~ "vulnerabilities, and memory leaks."
#~ msgstr ""
#~ "Εάν δεν γίνει με προσοχή, αυτό μπορεί να οδηγήσει σε σφάλματα, σφάλματα, "
#~ "ευπάθειες ασφαλείας και διαρροές μνήμης."

#, fuzzy
#~ msgid "C Example"
#~ msgstr "Γ Παράδειγμα"

#, fuzzy
#~ msgid "You must call `free` on every pointer you allocate with `malloc`:"
#~ msgstr ""
#~ "Πρέπει να καλείτε \"δωρεάν\" σε κάθε δείκτη που εκχωρείτε με το "
#~ "\"malloc\":"

#, fuzzy
#~ msgid ""
#~ "Memory is leaked if the function returns early between `malloc` and "
#~ "`free`: the pointer is lost and we cannot deallocate the memory. Worse, "
#~ "freeing the pointer twice, or accessing a freed pointer can lead to "
#~ "exploitable security vulnerabilities."
#~ msgstr ""
#~ "Η μνήμη διαρρέει εάν η συνάρτηση επιστρέψει νωρίς μεταξύ \"malloc\" και "
#~ "\"free\": το Ο δείκτης χάνεται και δεν μπορούμε να εκχωρήσουμε τη μνήμη."

#, fuzzy
#~ msgid ""
#~ "Constructors and destructors let you hook into the lifetime of an object."
#~ msgstr ""
#~ "Οι κατασκευαστές και οι καταστροφείς σάς επιτρέπουν να κολλήσετε στη "
#~ "διάρκεια ζωής ενός αντικειμένου."

#, fuzzy
#~ msgid ""
#~ "By wrapping a pointer in an object, you can free memory when the object "
#~ "is destroyed. The compiler guarantees that this happens, even if an "
#~ "exception is raised."
#~ msgstr ""
#~ "Τυλίγοντας έναν δείκτη σε ένα αντικείμενο, μπορείτε να ελευθερώσετε μνήμη "
#~ "όταν το αντικείμενο βρίσκεται καταστράφηκε από. Ο μεταγλωττιστής εγγυάται "
#~ "ότι αυτό συμβαίνει, ακόμα κι αν υπάρχει εξαίρεση ανυψώθηκε."

#, fuzzy
#~ msgid ""
#~ "This is often called _resource acquisition is initialization_ (RAII) and "
#~ "gives you smart pointers."
#~ msgstr ""
#~ "Αυτό συχνά ονομάζεται _απόκτηση πόρων είναι αρχικοποίηση_ (RAII) και "
#~ "δίνει έξυπνοι δείκτες."

#, fuzzy
#~ msgid ""
#~ "The `std::unique_ptr` object is allocated on the stack, and points to "
#~ "memory allocated on the heap."
#~ msgstr ""
#~ "Το αντικείμενο `std::unique_ptr` εκχωρείται στη στοίβα και δείχνει σε "
#~ "μνήμη που εκχωρείται στο σωρό."

#, fuzzy
#~ msgid ""
#~ "At the end of `say_hello`, the `std::unique_ptr` destructor will run."
#~ msgstr ""
#~ "Στο τέλος του «say_hello», θα εκτελεστεί ο καταστροφέας «std::unique_ptr»."

#, fuzzy
#~ msgid "The destructor frees the `Person` object it points to."
#~ msgstr ""
#~ "Ο καταστροφέας ελευθερώνει το αντικείμενο «Person» στο οποίο δείχνει."

#, fuzzy
#~ msgid ""
#~ "Special move constructors are used when passing ownership to a function:"
#~ msgstr ""
#~ "Οι ειδικοί κατασκευαστές μετακίνησης χρησιμοποιούνται όταν μεταβιβάζεται "
#~ "η ιδιοκτησία σε μια συνάρτηση:"

#, fuzzy
#~ msgid ""
#~ "An alternative to manual and scope-based memory management is automatic "
#~ "memory management:"
#~ msgstr ""
#~ "Μια εναλλακτική λύση στη χειροκίνητη διαχείριση μνήμης και τη διαχείριση "
#~ "μνήμης βάσει εύρους είναι η αυτόματη μνήμη διαχείριση:"

#, fuzzy
#~ msgid "The programmer never allocates or deallocates memory explicitly."
#~ msgstr "Ο προγραμματιστής ποτέ δεν εκχωρεί ή εκχωρεί μνήμη ρητά."

#, fuzzy
#~ msgid ""
#~ "A garbage collector finds unused memory and deallocates it for the "
#~ "programmer."
#~ msgstr ""
#~ "Ένας συλλέκτης σκουπιδιών βρίσκει αχρησιμοποίητη μνήμη και την εκχωρεί "
#~ "στον προγραμματιστή."

#, fuzzy
#~ msgid "Java Example"
#~ msgstr "Παράδειγμα Java"

#, fuzzy
#~ msgid "The `person` object is not deallocated after `sayHello` returns:"
#~ msgstr ""
#~ "Το αντικείμενο \"person\" δεν εκχωρείται μετά την επιστροφή του "
#~ "\"sayHello\":"

#, fuzzy
#~ msgid "Memory Management in Rust"
#~ msgstr "Διαχείριση μνήμης σε Rust"

#, fuzzy
#~ msgid "Memory management in Rust is a mix:"
#~ msgstr "Η διαχείριση μνήμης στο Rust είναι ένας συνδυασμός:"

#, fuzzy
#~ msgid "Safe and correct like Java, but without a garbage collector."
#~ msgstr "Ασφαλές και σωστό όπως η Java, αλλά χωρίς σκουπιδοσυλλέκτη."

#, fuzzy
#~ msgid ""
#~ "Depending on which abstraction (or combination of abstractions) you "
#~ "choose, can be a single unique pointer, reference counted, or atomically "
#~ "reference counted."
#~ msgstr ""
#~ "Ανάλογα με το ποια αφαίρεση (ή συνδυασμό αφαιρέσεων) επιλέγετε, μπορεί να "
#~ "είναι ένας μοναδικός δείκτης, να μετράται η αναφορά ή να μετράται ατομικά "
#~ "η αναφορά."

#, fuzzy
#~ msgid "Scope-based like C++, but the compiler enforces full adherence."
#~ msgstr ""
#~ "Βασίζεται στο πεδίο εφαρμογής όπως η C++, αλλά ο μεταγλωττιστής επιβάλλει "
#~ "την πλήρη συμμόρφωση."

#, fuzzy
#~ msgid ""
#~ "A Rust user can choose the right abstraction for the situation, some even "
#~ "have no cost at runtime like C."
#~ msgstr ""
#~ "Ένας χρήστης του Rust μπορεί να επιλέξει τη σωστή αφαίρεση για την "
#~ "κατάσταση, μερικοί μάλιστα δεν έχουν κόστος κατά τη διάρκεια εκτέλεσης "
#~ "όπως το C."

#, fuzzy
#~ msgid "Rust achieves this by modeling _ownership_ explicitly."
#~ msgstr "Αυτό το επιτυγχάνει διαμορφώνοντας ρητά την _ownership_."

#, fuzzy
#~ msgid ""
#~ "If asked how at this point, you can mention that in Rust this is usually "
#~ "handled by RAII wrapper types such as [Box](https://doc.rust-lang.org/std/"
#~ "boxed/struct.Box.html), [Vec](https://doc.rust-lang.org/std/vec/struct."
#~ "Vec.html), [Rc](https://doc.rust-lang.org/std/rc/struct.Rc.html), or [Arc]"
#~ "(https://doc.rust-lang.org/std/sync/struct.Arc.html). These encapsulate "
#~ "ownership and memory allocation via various means, and prevent the "
#~ "potential errors in C."
#~ msgstr ""
#~ "Εάν ρωτήσετε πώς σε αυτό το σημείο, μπορείτε να αναφέρετε ότι στο Rust "
#~ "αυτό συνήθως αντιμετωπίζεται από τύπους περιτυλίγματος RAII όπως [Box]"
#~ "(https://doc.rust-lang.org/std/boxed/struct.Box.html), [Vec](https://doc."
#~ "rust-lang.org/std/vec/struct.Vec.html), [Rc](https://doc.rust-lang.org/"
#~ "std/rc/struct.Rc.html) ή [Arc](https://doc.rust-lang.org/std/sync/struct."
#~ "Arc.html). Αυτά ενσωματώνουν την ιδιοκτησία και την εκχώρηση μνήμης με "
#~ "διάφορα μέσα και αποτρέπουν τα πιθανά σφάλματα στο C."

#, fuzzy
#~ msgid "Here is a rough comparison of the memory management techniques."
#~ msgstr "Ακολουθεί μια πρόχειρη σύγκριση των τεχνικών διαχείρισης μνήμης."

#, fuzzy
#~ msgid "Pros of Different Memory Management Techniques"
#~ msgstr "Πλεονεκτήματα Διαφορετικών Τεχνικών Διαχείρισης Μνήμης"

#, fuzzy
#~ msgid "Manual like C:"
#~ msgstr "Εγχειρίδιο όπως C:"

#, fuzzy
#~ msgid "No runtime overhead."
#~ msgstr "Χωρίς επιβάρυνση χρόνου εκτέλεσης."

#, fuzzy
#~ msgid "Automatic like Java:"
#~ msgstr "Αυτόματο όπως Java:"

#, fuzzy
#~ msgid "Fully automatic."
#~ msgstr "Εντελώς αυτόματο."

#, fuzzy
#~ msgid "Safe and correct."
#~ msgstr "Ασφαλές και σωστό."

#, fuzzy
#~ msgid "Scope-based like C++:"
#~ msgstr "Βασισμένο σε πεδίο εφαρμογής όπως η C++:"

#, fuzzy
#~ msgid "Partially automatic."
#~ msgstr "Μερικώς αυτόματο."

#, fuzzy
#~ msgid "Compiler-enforced scope-based like Rust:"
#~ msgstr "Βασισμένο σε εύρος με επιβολή μεταγλωττιστή όπως το Rust:"

#, fuzzy
#~ msgid "Enforced by compiler."
#~ msgstr "Επιβάλλεται από τον μεταγλωττιστή."

#, fuzzy
#~ msgid "Cons of Different Memory Management Techniques"
#~ msgstr "Μειονεκτήματα των διαφορετικών τεχνικών διαχείρισης μνήμης"

#, fuzzy
#~ msgid "Use-after-free."
#~ msgstr "Χρήση-μετά-δωρεάν."

#, fuzzy
#~ msgid "Double-frees."
#~ msgstr "Διπλό δωρεάν."

#, fuzzy
#~ msgid "Memory leaks."
#~ msgstr "Διαρροές μνήμης."

#, fuzzy
#~ msgid "Garbage collection pauses."
#~ msgstr "Παύσεις αποκομιδής σκουπιδιών."

#, fuzzy
#~ msgid "Destructor delays."
#~ msgstr "Καθυστερήσεις καταστροφέων."

#, fuzzy
#~ msgid "Complex, opt-in by programmer (on C++)."
#~ msgstr "Σύνθετο, συμμετοχή από προγραμματιστή."

#, fuzzy
#~ msgid "Potential runtime overhead"
#~ msgstr "Χωρίς επιβάρυνση χρόνου εκτέλεσης."

#, fuzzy
#~ msgid "Compiler-enforced and scope-based like Rust:"
#~ msgstr "Επιβάλλεται από μεταγλωττιστή και βασίζεται σε εύρος όπως το Rust:"

#, fuzzy
#~ msgid "Some upfront complexity."
#~ msgstr "Κάποια εκ των προτέρων πολυπλοκότητα."

#, fuzzy
#~ msgid "Can reject valid programs."
#~ msgstr "Μπορεί να απορρίψει έγκυρα προγράμματα."

#, fuzzy
#~ msgid "A destructor can run here to free up resources."
#~ msgstr "Ένας καταστροφέας μπορεί να τρέξει εδώ για να ελευθερώσει πόρους."

#, fuzzy
#~ msgid "There is always _exactly_ one variable binding which owns a value."
#~ msgstr ""
#~ "Υπάρχει πάντα _exactly_ μία δέσμευση μεταβλητής που κατέχει μια τιμή."

#, fuzzy
#~ msgid "The heap data from `s1` is reused for `s2`."
#~ msgstr "Τα δεδομένα σωρού από το `s1` επαναχρησιμοποιούνται για το `s2`."

#, fuzzy
#~ msgid ""
#~ "When `s1` goes out of scope, nothing happens (it has been moved from)."
#~ msgstr ""
#~ "Όταν το `s1` βγαίνει εκτός πεδίου εφαρμογής, δεν συμβαίνει τίποτα (έχει "
#~ "μετακινηθεί από)."

#, fuzzy
#~ msgid "Extra Work in Modern C++"
#~ msgstr "Διπλές απελευθερώσεις μνήμης στη σύγχρονη C++"

#, fuzzy
#~ msgid ""
#~ "If students ask about `derive`, it is sufficient to say that this is a "
#~ "way to generate code in Rust at compile time. In this case the default "
#~ "implementations of `Copy` and `Clone` traits are generated."
#~ msgstr ""
#~ "Εάν οι μαθητές ρωτήσουν για το «derive», αρκεί να πούμε ότι αυτός είναι "
#~ "ένας τρόπος δημιουργίας κώδικα στο Rust την ώρα της μεταγλώττισης. Σε "
#~ "αυτήν την περίπτωση δημιουργούνται οι προεπιλεγμένες υλοποιήσεις των "
#~ "χαρακτηριστικών «Αντιγραφή» και «Κλωνοποίηση»."

#, fuzzy
#~ msgid ""
#~ "```rust,editable\n"
#~ "#[derive(Debug)]\n"
#~ "struct Point(i32, i32);\n"
#~ "\n"
#~ "fn add(p1: &Point, p2: &Point) -> Point {\n"
#~ "    let p = Point(p1.0 + p2.0, p1.1 + p2.1);\n"
#~ "    println!(\"&p.0: {:p}\", &p.0);\n"
#~ "    p\n"
#~ "}\n"
#~ "\n"
#~ "pub fn main() {\n"
#~ "    let p1 = Point(3, 4);\n"
#~ "    let p2 = Point(10, 20);\n"
#~ "    let p3 = add(&p1, &p2);\n"
#~ "    println!(\"&p3.0: {:p}\", &p3.0);\n"
#~ "    println!(\"{p1:?} + {p2:?} = {p3:?}\");\n"
#~ "}\n"
#~ "```"
#~ msgstr "Ένας άλλος τρόπος να το εξηγήσετε:"

#, fuzzy
#~ msgid "A borrowed value has a _lifetime_:"
#~ msgstr "Μια δανεισμένη αξία έχει _διάρκεια ζωής_:"

#, fuzzy
#~ msgid ""
#~ "Read `&'a Point` as \"a borrowed `Point` which is valid for at least the "
#~ "lifetime `a`\"."
#~ msgstr ""
#~ "Διαβάστε το '&'a Point' ως \"ένα δανεικό \"Point\" που ισχύει τουλάχιστον "
#~ "για το διάρκεια ζωής «α»»."

#, fuzzy
#~ msgid ""
#~ "In addition to borrowing its arguments, a function can return a borrowed "
#~ "value:"
#~ msgstr ""
#~ "Εκτός από τον δανεισμό των ορισμάτων της, μια συνάρτηση μπορεί να "
#~ "επιστρέψει μια δανεισμένη τιμή:"

#, fuzzy
#~ msgid "`'a` is a generic parameter, it is inferred by the compiler."
#~ msgstr ""
#~ "Το `'a` είναι μια γενική παράμετρος, συνάγεται από τον μεταγλωττιστή."

#, fuzzy
#~ msgid "Lifetimes start with `'` and `'a` is a typical default name."
#~ msgstr ""
#~ "Οι διάρκειες ζωής ξεκινούν με \"\"\" και το \"a\" είναι ένα τυπικό "
#~ "προεπιλεγμένο όνομα."

#, fuzzy
#~ msgid ""
#~ "The _at least_ part is important when parameters are in different scopes."
#~ msgstr ""
#~ "Το τμήμα _τουλάχιστον_ είναι σημαντικό όταν οι παράμετροι βρίσκονται σε "
#~ "διαφορετικά πεδία."

#, fuzzy
#~ msgid ""
#~ "Move the declaration of `p2` and `p3` into a new scope (`{ ... }`), "
#~ "resulting in the following code:"
#~ msgstr ""
#~ "Επαναφέρετε τον χώρο εργασίας και αλλάξτε την υπογραφή της συνάρτησης σε "
#~ "`fn left_most<'a, 'b>(p1: &'a Point, p2: &'a Point) -> &'b Point`. Αυτό "
#~ "δεν θα μεταγλωττιστεί επειδή η σχέση μεταξύ των χρόνων ζωής \"a\" και "
#~ "\"b\" είναι ασαφής."

#, fuzzy
#~ msgid ""
#~ "```rust,ignore\n"
#~ "#[derive(Debug)]\n"
#~ "struct Point(i32, i32);\n"
#~ "\n"
#~ "fn left_most<'a>(p1: &'a Point, p2: &'a Point) -> &'a Point {\n"
#~ "    if p1.0 < p2.0 { p1 } else { p2 }\n"
#~ "}\n"
#~ "\n"
#~ "fn main() {\n"
#~ "    let p1: Point = Point(10, 10);\n"
#~ "    let p3: &Point;\n"
#~ "    {\n"
#~ "        let p2: Point = Point(20, 20);\n"
#~ "        p3 = left_most(&p1, &p2);\n"
#~ "    }\n"
#~ "    println!(\"left-most point: {:?}\", p3);\n"
#~ "}\n"
#~ "```"
#~ msgstr "Ένας άλλος τρόπος να το εξηγήσετε:"

#, fuzzy
#~ msgid "Note how this does not compile since `p3` outlives `p2`."
#~ msgstr ""
#~ "Δύο αναφορές σε δύο τιμές δανείζονται από μια συνάρτηση και η συνάρτηση "
#~ "επιστρέφει άλλη αναφορά."

#, fuzzy
#~ msgid ""
#~ "Reset the workspace and change the function signature to `fn "
#~ "left_most<'a, 'b>(p1: &'a Point, p2: &'a Point) -> &'b Point`. This will "
#~ "not compile because the relationship between the lifetimes `'a` and `'b` "
#~ "is unclear."
#~ msgstr ""
#~ "Πρέπει να προέρχεται από μία από αυτές τις δύο εισόδους (ή από μια "
#~ "καθολική μεταβλητή)."

#, fuzzy
#~ msgid "Another way to explain it:"
#~ msgstr ""
#~ "Ποιο είναι απ 'όλα? Ο μεταγλωττιστής πρέπει να γνωρίζει, επομένως στον "
#~ "ιστότοπο κλήσης δεν χρησιμοποιείται η επιστρεφόμενη αναφορά για "
#~ "περισσότερο από μια μεταβλητή από την οποία προήλθε η αναφορά."

#, fuzzy
#~ msgid "Day 2: Morning Exercises"
#~ msgstr "Ημέρα 2: Πρωινές ασκήσεις"

#, fuzzy
#~ msgid "We will look at implementing methods in two contexts:"
#~ msgstr "Θα εξετάσουμε την εφαρμογή μεθόδων σε δύο πλαίσια:"

#, fuzzy
#~ msgid "Simple struct which tracks health statistics."
#~ msgstr "Πολλαπλές δομές και αριθμοί για μια βιβλιοθήκη σχεδίων."

#, fuzzy
#~ msgid ""
#~ "We will learn much more about structs and the `Vec<T>` type tomorrow. For "
#~ "now, you just need to know part of its API:"
#~ msgstr ""
#~ "Θα μάθουμε πολλά περισσότερα για τις δομές και τον τύπο `Vec<T>` αύριο. "
#~ "Προς το παρόν, απλά πρέπει να γνωρίζετε μέρος του API του:"

#, fuzzy
#~ msgid ""
#~ "Use this to model a library's book collection. Copy the code below to "
#~ "<https://play.rust-lang.org/> and update the types to make it compile:"
#~ msgstr ""
#~ "Χρησιμοποιήστε αυτό για να δημιουργήσετε μια εφαρμογή βιβλιοθήκης. "
#~ "Αντιγράψτε τον παρακάτω κωδικό στο <https://play.rust-lang.org/> και "
#~ "ενημερώστε τους τύπους για να γίνει μεταγλώττιση:"

#, fuzzy
#~ msgid "[Solution](solutions-afternoon.md#designing-a-library)"
#~ msgstr ""
#~ "\\<λεπτομέρειες>\n"
#~ "\n"
#~ "[Λύση](solutions-afternoon.md#designing-a-library)"

#, fuzzy
#~ msgid ""
#~ "The ownership model of Rust affects many APIs. An example of this is the "
#~ "[`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) and "
#~ "[`IntoIterator`](https://doc.rust-lang.org/std/iter/trait.IntoIterator."
#~ "html) traits."
#~ msgstr ""
#~ "Το μοντέλο ιδιοκτησίας του Rust επηρεάζει πολλά API. Ένα παράδειγμα αυτού "
#~ "είναι το [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator."
#~ "html) και [`IntoIterator`](https://doc.rust-lang.org/std/iter/trait."
#~ "IntoIterator.html) χαρακτηριστικά."

#, fuzzy
#~ msgid ""
#~ "Traits are like interfaces: they describe behavior (methods) for a type. "
#~ "The `Iterator` trait simply says that you can call `next` until you get "
#~ "`None` back:"
#~ msgstr ""
#~ "Τα γνωρίσματα είναι σαν διεπαφές: περιγράφουν τη συμπεριφορά (μέθοδοι) "
#~ "για έναν τύπο. ο Το χαρακτηριστικό «Iterator» λέει απλώς ότι μπορείτε να "
#~ "καλέσετε «επόμενο» μέχρι να λάβετε πίσω το «Κανένα»:"

#, fuzzy
#~ msgid "You use this trait like this:"
#~ msgstr "Χρησιμοποιείτε αυτό το χαρακτηριστικό ως εξής:"

#, fuzzy
#~ msgid "What is the type returned by the iterator? Test your answer here:"
#~ msgstr ""
#~ "Ποιος είναι ο τύπος που επιστρέφει ο επαναλήπτης; Δοκιμάστε την απάντησή "
#~ "σας εδώ:"

#, fuzzy
#~ msgid "Why is this type used?"
#~ msgstr "Γιατί χρησιμοποιείται αυτός ο τύπος;"

#, fuzzy
#~ msgid "Like before, what  is the type returned by the iterator?"
#~ msgstr "Όπως και πριν, ποιος είναι ο τύπος που επιστρέφει ο επαναλήπτης;"

#, fuzzy
#~ msgid ""
#~ "Now that we know both `Iterator` and `IntoIterator`, we can build `for` "
#~ "loops. They call `into_iter()` on an expression and iterates over the "
#~ "resulting iterator:"
#~ msgstr ""
#~ "Τώρα που γνωρίζουμε και τα δύο \"Iterator\" και \"IntoIterator\", "
#~ "μπορούμε να δημιουργήσουμε βρόχους \"for\". Καλούν «into_iter()» σε μια "
#~ "έκφραση και επαναλαμβάνεται πάνω από το αποτέλεσμα επαναλήπτης:"

#, fuzzy
#~ msgid ""
#~ "Experiment with the code above and then consult the documentation for "
#~ "[`impl IntoIterator for &Vec<T>`](https://doc.rust-lang.org/std/vec/"
#~ "struct.Vec.html#impl-IntoIterator-for-%26'a+Vec%3CT,+A%3E) and [`impl "
#~ "IntoIterator for Vec<T>`](https://doc.rust-lang.org/std/vec/struct.Vec."
#~ "html#impl-IntoIterator-for-Vec%3CT,+A%3E) to check your answers."
#~ msgstr ""
#~ "Πειραματιστείτε με τον παραπάνω κώδικα και, στη συνέχεια, συμβουλευτείτε "
#~ "την τεκμηρίωση για [`impl IntoIterator για &Vec<T>`](https://doc.rust-"
#~ "lang.org/std/vec/struct.Vec.html#impl-IntoIterator-for-"
#~ "%26%27a%20Vec%3CT%2C%20A%3E) και [`impl IntoIterator for Vec<T>`](https://"
#~ "doc.rust-lang.org/std/vec/struct.Vec.html#impl-IntoIterator-for-"
#~ "Vec%3CT%2C%20A%3E) για να ελέγξετε τις απαντήσεις σας."

#, fuzzy
#~ msgid "We describe the distinction between method receivers next."
#~ msgstr ""
#~ "Αυτή μπορεί να είναι μια καλή στιγμή για να δείξετε πώς το \"&self\" "
#~ "διαφέρει από το \"self\" τροποποιώντας τον κώδικα και προσπαθώντας να "
#~ "εκτελέσετε το say_hello δύο φορές.\n"
#~ "\n"
#~ "Στη συνέχεια περιγράφουμε τη διάκριση μεταξύ των δεκτών μεθόδων."

#, fuzzy
#~ msgid ""
#~ "Consider emphasizing \"shared and immutable\" and \"unique and mutable\". "
#~ "These constraints always come together in Rust due to borrow checker "
#~ "rules, and `self` is no exception. It isn't possible to reference a "
#~ "struct from multiple locations and call a mutating (`&mut self`) method "
#~ "on it."
#~ msgstr ""
#~ "\\<λεπτομέρειες>\n"
#~ "\n"
#~ "Εξετάστε το ενδεχόμενο να δώσετε έμφαση στο \"κοινόχρηστο και "
#~ "αμετάβλητο\" και στο \"μοναδικό και μεταβλητό\". Αυτοί οι περιορισμοί "
#~ "έρχονται πάντα μαζί στο Rust λόγω των κανόνων του ελεγκτή δανείου, και το "
#~ "\"self\" δεν αποτελεί εξαίρεση. Δεν θα είναι δυνατόν Αναφέρετε μια δομή "
#~ "από πολλές τοποθεσίες και καλέστε μια μέθοδο μεταλλάξεως (`&mut self`) σε "
#~ "αυτήν."

#, fuzzy
#~ msgid "All four methods here use a different method receiver."
#~ msgstr "\\<λεπτομέρειες>"

#, fuzzy
#~ msgid ""
#~ "You can point out how that changes what the function can do with the "
#~ "variable values and if/how it can be used again in `main`."
#~ msgstr "Βασικά σημεία:"

#, fuzzy
#~ msgid ""
#~ "You can showcase the error that appears when trying to call `finish` "
#~ "twice."
#~ msgstr ""
#~ "Και οι τέσσερις μέθοδοι εδώ χρησιμοποιούν διαφορετικό δέκτη μεθόδου."

#, fuzzy
#~ msgid ""
#~ "Note that although the method receivers are different, the non-static "
#~ "functions are called the same way in the main body. Rust enables "
#~ "automatic referencing and dereferencing when calling methods. Rust "
#~ "automatically adds in the `&`, `*`, `muts` so that that object matches "
#~ "the method signature."
#~ msgstr ""
#~ "Μπορείτε να επισημάνετε πώς αλλάζει αυτό που μπορεί να κάνει η συνάρτηση "
#~ "με τις τιμές των μεταβλητών και εάν/πώς μπορεί να χρησιμοποιηθεί ξανά στο "
#~ "\"main\"."

#, fuzzy
#~ msgid ""
#~ "You might point out that `print_laps` is using a vector that is iterated "
#~ "over. We describe vectors in more detail in the afternoon. "
#~ msgstr ""
#~ "Μπορείτε να επιδείξετε το σφάλμα που εμφανίζεται όταν προσπαθείτε να "
#~ "καλέσετε το \"finish\" δύο φορές.\n"
#~ "\n"
#~ "Σημειώστε ότι παρόλο που οι δέκτες της μεθόδου είναι διαφορετικοί, οι μη "
#~ "στατικές συναρτήσεις ονομάζονται με τον ίδιο τρόπο στο κύριο σώμα. Το "
#~ "Rust επιτρέπει την αυτόματη αναφορά και αποαναφορά κατά την κλήση "
#~ "μεθόδων. Το Rust προσθέτει αυτόματα τα \"&\", \"\\*\", \"muts\", έτσι "
#~ "ώστε αυτό το αντικείμενο να ταιριάζει με την υπογραφή της μεθόδου.\n"
#~ "\n"
#~ "Μπορείτε να επισημάνετε ότι το \"print_laps\" χρησιμοποιεί ένα διάνυσμα "
#~ "που επαναλαμβάνεται. Περιγράφουμε διανύσματα με περισσότερες λεπτομέρειες "
#~ "το απόγευμα."

#, fuzzy
#~ msgid "Day 2: Afternoon Exercises"
#~ msgstr "Ημέρα 2: Απογευματινές Ασκήσεις"

#, fuzzy
#~ msgid ""
#~ "The exercises for this afternoon will focus on strings and iterators."
#~ msgstr ""
#~ "Οι ασκήσεις για σήμερα το απόγευμα θα επικεντρωθούν σε έγχορδα και "
#~ "επαναλήπτες."

#, fuzzy
#~ msgid "The common vocabulary types include:"
#~ msgstr "Οι συνήθεις τύποι λεξιλογίου περιλαμβάνουν:"

#, fuzzy
#~ msgid "`Option` and `Result`"
#~ msgstr "«Επιλογή» και «Αποτέλεσμα»."

#, fuzzy
#~ msgid "The types represent optional data:"
#~ msgstr "Οι τύποι αντιπροσωπεύουν προαιρετικά δεδομένα:"

#, fuzzy
#~ msgid "`Option<&T>` has zero space overhead compared to `&T`."
#~ msgstr "Το \"Option\\<&T>\" έχει μηδενικό χώρο σε σύγκριση με το \"&T\"."

#, fuzzy
#~ msgid "`binary_search` returns `Result<usize, usize>`."
#~ msgstr "Η \"δυαδική_αναζήτηση\" επιστρέφει \"Αποτέλεσμα\\<χρήση, χρήση>\"."

#, fuzzy
#~ msgid "If found, `Result::Ok` holds the index where the element is found."
#~ msgstr ""
#~ "Εάν βρεθεί, το «Αποτέλεσμα::Οκ» διατηρεί το ευρετήριο όπου βρίσκεται το "
#~ "στοιχείο."

#, fuzzy
#~ msgid ""
#~ "Otherwise, `Result::Err` contains the index where such an element should "
#~ "be inserted."
#~ msgstr ""
#~ "Διαφορετικά, το \"Αποτέλεσμα::Σφάλμα\" περιέχει το ευρετήριο όπου θα "
#~ "πρέπει να εισαχθεί ένα τέτοιο στοιχείο."

#, fuzzy
#~ msgid "Box with Recursive Data Structures"
#~ msgstr "Πλαίσιο με αναδρομικές δομές δεδομένων"

#, fuzzy
#~ msgid ""
#~ "[`Cell`](https://doc.rust-lang.org/std/cell/struct.Cell.html) and "
#~ "[`RefCell`](https://doc.rust-lang.org/std/cell/struct.RefCell.html) "
#~ "implement what Rust calls _interior mutability:_ mutation of values in an "
#~ "immutable context."
#~ msgstr ""
#~ "Χρησιμοποιώντας το \"Read\" και το \"BufRead\", μπορείτε να αφαιρέσετε "
#~ "τις πηγές \"u8\":"

#, fuzzy
#~ msgid ""
#~ "In this exercise, you are implementing a routing component of a web "
#~ "server. The server is configured with a number of _path prefixes_ which "
#~ "are matched against _request paths_. The path prefixes can contain a "
#~ "wildcard character which matches a full segment. See the unit tests below."
#~ msgstr ""
#~ "Σε αυτήν την άσκηση, υλοποιείτε ένα στοιχείο δρομολόγησης ενός διακομιστή "
#~ "web. ο Ο διακομιστής έχει ρυθμιστεί με έναν αριθμό προθεμάτων _διαδρομών_ "
#~ "με τα οποία αντιστοιχίζονται _αίτημα μονοπατιών_. Τα προθέματα διαδρομής "
#~ "μπορούν να περιέχουν έναν χαρακτήρα μπαλαντέρ που αντιστοιχεί σε ένα "
#~ "πλήρες τμήμα. Δείτε τις δοκιμές μονάδας παρακάτω."

#, fuzzy
#~ msgid "You can declare a generic type on your `impl` block:"
#~ msgstr "Μπορείτε να δηλώσετε έναν γενικό τύπο στο μπλοκ `impl`:"

#, fuzzy
#~ msgid ""
#~ "Generic code is turned into non-generic code based on the call sites:"
#~ msgstr ""
#~ "Ο γενικός κώδικας μετατρέπεται σε μη γενικό κώδικα βάσει των τοποθεσιών "
#~ "κλήσεων:"

#, fuzzy
#~ msgid "behaves as if you wrote"
#~ msgstr "συμπεριφέρεται σαν να έγραψες"

#, fuzzy
#~ msgid ""
#~ "```rust,ignore\n"
#~ "    println!(\"{} {}\", std::mem::size_of::<Dog>(), std::mem::size_of::"
#~ "<Cat>());\n"
#~ "    println!(\"{} {}\", std::mem::size_of::<&Dog>(), std::mem::size_of::"
#~ "<&Cat>());\n"
#~ "    println!(\"{}\", std::mem::size_of::<&dyn Pet>());\n"
#~ "    println!(\"{}\", std::mem::size_of::<Box<dyn Pet>>());\n"
#~ "```"
#~ msgstr ""
#~ "Στο παράδειγμα, τα «κατοικίδια» κρατούν δείκτες λίπους σε αντικείμενα που "
#~ "υλοποιούν το «Χαιρετισμός». Ο δείκτης λίπους αποτελείται από δύο "
#~ "στοιχεία, έναν δείκτη προς το πραγματικό αντικείμενο και έναν δείκτη στον "
#~ "πίνακα εικονικής μεθόδου για την υλοποίηση «Greet» του συγκεκριμένου "
#~ "αντικειμένου."

#, fuzzy
#~ msgid "You can let the compiler derive a number of traits as follows:"
#~ msgstr ""
#~ "Μπορείτε να αφήσετε τον μεταγλωττιστή να αντλήσει έναν αριθμό "
#~ "χαρακτηριστικών:"

#, fuzzy
#~ msgid "Traits can implement behavior in terms of other trait methods:"
#~ msgstr ""
#~ "Τα χαρακτηριστικά μπορούν να εφαρμόσουν τη συμπεριφορά σε σχέση με άλλες "
#~ "μεθόδους χαρακτηριστικών:"

#, fuzzy
#~ msgid "`impl Trait` allows you to work with types which you cannot name."
#~ msgstr ""
#~ "Το \"impl Trait\" δεν μπορεί να χρησιμοποιηθεί με τη σύνταξη \"::\\<\\>\" "
#~ "turbo fish.\n"
#~ "\n"
#~ "Το \"impl Trait\" σάς επιτρέπει να εργάζεστε με τύπους που δεν μπορείτε "
#~ "να ονομάσετε."

#, fuzzy
#~ msgid ""
#~ "This example is great, because it uses `impl Display` twice. It helps to "
#~ "explain that nothing here enforces that it is _the same_ `impl Display` "
#~ "type. If we used a single  `T: Display`, it would enforce the constraint "
#~ "that input `T` and return `T` type are the same type. It would not work "
#~ "for this particular function, as the type we expect as input is likely "
#~ "not what `format!` returns. If we wanted to do the same via `: Display` "
#~ "syntax, we'd need two independent generic parameters."
#~ msgstr ""
#~ "Αυτό το παράδειγμα είναι υπέροχο, επειδή χρησιμοποιεί το \"immpl "
#~ "Display\" δύο φορές. Βοηθά να το εξηγήσω τίποτα εδώ δεν επιβάλλει ότι "
#~ "είναι _ο ίδιος_ τύπος \"impl Display\". Αν χρησιμοποιούσαμε ένα μονό «T: "
#~ "Εμφάνιση», θα επιβάλει τον περιορισμό ότι η είσοδος «T» και η επιστροφή "
#~ "του τύπου «T» είναι του ίδιου τύπου. Δεν θα λειτουργούσε για τη "
#~ "συγκεκριμένη λειτουργία, καθώς ο τύπος που περιμένουμε ως είσοδο είναι "
#~ "πιθανό να μην είναι τι «μορφή!» επιστρέφει. Αν θέλαμε να κάνουμε το ίδιο "
#~ "μέσω της σύνταξης `: Display`, θα χρειαζόμασταν δύο ανεξάρτητες γενικές "
#~ "παραμέτρους."

#, fuzzy
#~ msgid ""
#~ "We will now look at some of the most common traits of the Rust standard "
#~ "library:"
#~ msgstr ""
#~ "Θα δούμε τώρα μερικά από τα πιο κοινά χαρακτηριστικά της βασικής "
#~ "βιβλιοθήκης Rust:"

#, fuzzy
#~ msgid ""
#~ "[`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) and "
#~ "[`IntoIterator`](https://doc.rust-lang.org/std/iter/trait.IntoIterator."
#~ "html) used in `for` loops,"
#~ msgstr ""
#~ "«Iterator» και «IntoIterator» που χρησιμοποιούνται σε βρόχους «for»,"

#, fuzzy
#~ msgid ""
#~ "[`From`](https://doc.rust-lang.org/std/convert/trait.From.html) and "
#~ "[`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html) used to "
#~ "convert values,"
#~ msgstr "Τα \"From\" και \"Into\" χρησιμοποιούνται για τη μετατροπή τιμών,"

#, fuzzy
#~ msgid ""
#~ "[`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and [`Write`]"
#~ "(https://doc.rust-lang.org/std/io/trait.Write.html) used for IO,"
#~ msgstr "«Read» και «Write» που χρησιμοποιούνται για IO,"

#, fuzzy
#~ msgid ""
#~ "[`Add`](https://doc.rust-lang.org/std/ops/trait.Add.html), [`Mul`]"
#~ "(https://doc.rust-lang.org/std/ops/trait.Mul.html), ... used for operator "
#~ "overloading, and"
#~ msgstr "«Προσθήκη», «Mul», ... χρησιμοποιείται για υπερφόρτωση χειριστή και"

#, fuzzy
#~ msgid ""
#~ "`Iterator` implements `fn collect<B>(self) -> B where B: "
#~ "FromIterator<Self::Item>, Self: Sized`"
#~ msgstr ""
#~ "Το «Iterator» υλοποιεί `fn collect<B>(self) -> B που Β: "
#~ "FromIterator<Self::Item>, Self: Μέγεθος`"

#, fuzzy
#~ msgid "`Add`, `Mul`, ..."
#~ msgstr "\"Προσθήκη\", \"Mul\", ..."

#, fuzzy
#~ msgid "Day 3: Morning Exercises"
#~ msgstr "Ημέρα 3: Πρωινές ασκήσεις"

#, fuzzy
#~ msgid ""
#~ "We will design a classical GUI library using traits and trait objects."
#~ msgstr ""
#~ "Θα σχεδιάσουμε μια κλασική βιβλιοθήκη GUI χαρακτηριστικά και αντικείμενα "
#~ "χαρακτηριστικών."

#, fuzzy
#~ msgid ""
#~ "Let us design a classical GUI library using our new knowledge of traits "
#~ "and trait objects."
#~ msgstr ""
#~ "Ας σχεδιάσουμε μια κλασική βιβλιοθήκη GUI χρησιμοποιώντας τις νέες μας "
#~ "γνώσεις για τα χαρακτηριστικά και γνωρίσματα αντικειμένων."

#, fuzzy
#~ msgid "We will have a number of widgets in our library:"
#~ msgstr "Θα έχουμε έναν αριθμό γραφικών στοιχείων στη βιβλιοθήκη μας:"

#, fuzzy
#~ msgid "`Window`: has a `title` and contains other widgets."
#~ msgstr "«Παράθυρο»: έχει «τίτλο» και περιέχει άλλα γραφικά στοιχεία."

#, fuzzy
#~ msgid ""
#~ "`Button`: has a `label` and a callback function which is invoked when the "
#~ "button is pressed."
#~ msgstr ""
#~ "«Κουμπί»: έχει μια «ετικέτα» και μια λειτουργία επανάκλησης που καλείται "
#~ "όταν το πατιέται το κουμπί."

#, fuzzy
#~ msgid "`Label`: has a `label`."
#~ msgstr "\"Ετικέτα\": έχει \"ετικέτα\"."

#, fuzzy
#~ msgid "The widgets will implement a `Widget` trait, see below."
#~ msgstr ""
#~ "Τα γραφικά στοιχεία θα εφαρμόσουν ένα χαρακτηριστικό «Γραφικό στοιχείο», "
#~ "δείτε παρακάτω."

#, fuzzy
#~ msgid ""
#~ "Copy the code below to <https://play.rust-lang.org/>, fill in the missing "
#~ "`draw_into` methods so that you implement the `Widget` trait:"
#~ msgstr ""
#~ "Αντιγράψτε τον παρακάτω κώδικα στο <https://play.rust-lang.org/>, "
#~ "συμπληρώστε τον κωδικό που λείπει Μέθοδοι \"draw_into\", ώστε να "
#~ "εφαρμόσετε το χαρακτηριστικό \"Widget\":"

#, fuzzy
#~ msgid "The output of the above program can be something simple like this:"
#~ msgstr ""
#~ "Η έξοδος του παραπάνω προγράμματος μπορεί να είναι κάτι απλό όπως αυτό:"

#, fuzzy
#~ msgid ""
#~ "If you want to draw aligned text, you can use the [fill/alignment]"
#~ "(https://doc.rust-lang.org/std/fmt/index.html#fillalignment) formatting "
#~ "operators. In particular, notice how you can pad with different "
#~ "characters (here a `'/'`) and how you can control alignment:"
#~ msgstr ""
#~ "Εάν θέλετε να σχεδιάσετε στοιχισμένο κείμενο, μπορείτε να χρησιμοποιήσετε "
#~ "το [fill/alignment](https://doc.rust-lang.org/std/fmt/index."
#~ "html#fillalignment) τελεστές μορφοποίησης. Ειδικότερα, παρατηρήστε πώς "
#~ "μπορείτε να γεμίσετε διαφορετικά χαρακτήρες (εδώ ένα `'/'`) και πώς "
#~ "μπορείτε να ελέγξετε τη στοίχιση:"

#, fuzzy
#~ msgid ""
#~ "Using such alignment tricks, you can for example produce output like this:"
#~ msgstr ""
#~ "Χρησιμοποιώντας τέτοια κόλπα ευθυγράμμισης, μπορείτε για παράδειγμα να "
#~ "παράγετε έξοδο όπως αυτό:"

#, fuzzy
#~ msgid "Polygon Struct"
#~ msgstr "Πολυγωνική κατασκευή"

#, fuzzy
#~ msgid ""
#~ "We will create a `Polygon` struct which contain some points. Copy the "
#~ "code below to <https://play.rust-lang.org/> and fill in the missing "
#~ "methods to make the tests pass:"
#~ msgstr ""
#~ "Θα δημιουργήσουμε μια δομή «Πολύγωνο» που περιέχει μερικά σημεία. "
#~ "Αντιγράψτε τον παρακάτω κωδικό στο <https://play.rust-lang.org/> και "
#~ "συμπληρώστε τις μεθόδους που λείπουν για να το κάνετε οι δοκιμές περνούν:"

#, fuzzy
#~ msgid ""
#~ "Since the method signatures are missing from the problem statements, the "
#~ "key part of the exercise is to specify those correctly. You don't have to "
#~ "modify the tests."
#~ msgstr ""
#~ "Δεδομένου ότι οι υπογραφές της μεθόδου λείπουν από τις δηλώσεις "
#~ "προβλημάτων, το βασικό μέρος της άσκησης είναι να τα προσδιορίσετε σωστά."

#, fuzzy
#~ msgid ""
#~ "Derive a `Copy` trait for some structs, as in tests the methods sometimes "
#~ "don't borrow their arguments."
#~ msgstr "Άλλα ενδιαφέροντα μέρη της άσκησης:"

#, fuzzy
#~ msgid ""
#~ "Discover that `Add` trait must be implemented for two objects to be "
#~ "addable via \"+\". Note that we do not discuss generics until Day 3."
#~ msgstr ""
#~ "Εξάγετε ένα χαρακτηριστικό «Αντιγραφή» για ορισμένες δομές, καθώς στις "
#~ "δοκιμές οι μέθοδοι μερικές φορές δεν δανείζονται τα επιχειρήματά τους.\n"
#~ "\n"
#~ "Ανακαλύψτε ότι το χαρακτηριστικό «Προσθήκη» πρέπει να εφαρμοστεί για δύο "
#~ "αντικείμενα που μπορούν να προστεθούν μέσω του «+»."

#, fuzzy
#~ msgid "Error handling in Rust is done using explicit control flow:"
#~ msgstr ""
#~ "Ο χειρισμός σφαλμάτων στο Rust γίνεται χρησιμοποιώντας ρητή ροή ελέγχου:"

#, fuzzy
#~ msgid "Functions that can have errors list this in their return type,"
#~ msgstr ""
#~ "Οι συναρτήσεις που μπορεί να έχουν σφάλματα το αναφέρουν στον τύπο "
#~ "επιστροφής τους,"

#, fuzzy
#~ msgid "There are no exceptions."
#~ msgstr "Δεν υπάρχουν εξαιρέσεις."

#, fuzzy
#~ msgid "Catching the Stack Unwinding"
#~ msgstr "Αλίευση της στοίβας Ξετύλιγμα"

#, fuzzy
#~ msgid ""
#~ "We have already seen the `Result` enum. This is used pervasively when "
#~ "errors are expected as part of normal operation:"
#~ msgstr ""
#~ "Έχουμε ήδη δει τον αριθμό «Αποτέλεσμα». Αυτό χρησιμοποιείται ευρέως όταν "
#~ "υπάρχουν σφάλματα αναμένεται ως μέρος της κανονικής λειτουργίας:"

#, fuzzy
#~ msgid "Propagating Errors with `?`"
#~ msgstr "Σφάλματα διάδοσης με το \"?\"."

#, fuzzy
#~ msgid ""
#~ "The try-operator `?` is used to return errors to the caller. It lets you "
#~ "turn the common"
#~ msgstr ""
#~ "Ο τελεστής δοκιμής `?` χρησιμοποιείται για την επιστροφή σφαλμάτων στον "
#~ "καλούντα. Σας αφήνει να στρίψετε το κοινό"

#, fuzzy
#~ msgid ""
#~ "It's generally helpful for them to implement `Clone` and `Eq` too where "
#~ "possible, to make life easier for tests and consumers of your library. In "
#~ "this case we can't easily do so, because `io::Error` doesn't implement "
#~ "them."
#~ msgstr ""
#~ "Είναι καλή πρακτική για όλους τους τύπους σφαλμάτων να εφαρμόζουν το "
#~ "\"std::error::Error\", το οποίο απαιτεί \"Debug\" και 'Εμφάνιση'. Είναι "
#~ "γενικά χρήσιμο γι 'αυτούς να εφαρμόσουν το \"Clone\" και το \"Eq\" όπου "
#~ "είναι δυνατόν ευκολότερη ζωή για τα τεστ και τους καταναλωτές της "
#~ "βιβλιοθήκης σας. Σε αυτή την περίπτωση δεν μπορούμε εύκολα να το κάνουμε, "
#~ "γιατί Το `io::Error` δεν τα υλοποιεί."

#, fuzzy
#~ msgid ""
#~ "`thiserror`'s derive macro automatically implements `std::error::Error`, "
#~ "and optionally `Display` (if the `#[error(...)]` attributes are provided) "
#~ "and `From` (if the `#[from]` attribute is added). It also works for "
#~ "structs."
#~ msgstr ""
#~ "Η μακροεντολή εξαγωγής \"thiserror\" εφαρμόζει αυτόματα το \"std::error::"
#~ "Error\" και προαιρετικά το \"Display\" (εάν παρέχονται τα χαρακτηριστικά "
#~ "\"#\\[σφάλμα(...)\\]\") και \"Από\" (αν προστεθεί το χαρακτηριστικό "
#~ "\"#\\[από\\]\". Λειτουργεί επίσης για δομές."

#, fuzzy
#~ msgid ""
#~ "It doesn't affect your public API, which makes it good for libraries."
#~ msgstr ""
#~ "Δεν επηρεάζει το δημόσιο API σας, κάτι που το κάνει καλό για βιβλιοθήκες."

#, fuzzy
#~ msgid ""
#~ "The widely used [anyhow](https://docs.rs/anyhow/) crate can help you add "
#~ "contextual information to your errors and allows you to have fewer custom "
#~ "error types:"
#~ msgstr ""
#~ "Το ευρέως χρησιμοποιούμενο κιβώτιο [anyhow](https://docs.rs/anyhow/) "
#~ "μπορεί να σας βοηθήσει να προσθέσετε πληροφορίες για τα λάθη σας και σας "
#~ "επιτρέπει να έχετε λιγότερα προσαρμοσμένοι τύποι σφαλμάτων:"

#, fuzzy
#~ msgid "Mark unit tests with `#[test]`:"
#~ msgstr "Επισημάνετε τις δοκιμές μονάδας με «#\\[test\\]»:"

#, fuzzy
#~ msgid "Use `cargo test` to find and run the unit tests."
#~ msgstr ""
#~ "Χρησιμοποιήστε τη «δοκιμή φορτίου» για να βρείτε και να εκτελέσετε τις "
#~ "δοκιμές μονάδας."

#, fuzzy
#~ msgid ""
#~ "Unit tests are often put in a nested module (run tests on the [Playground]"
#~ "(https://play.rust-lang.org/)):"
#~ msgstr ""
#~ "Οι δοκιμές μονάδας τοποθετούνται συχνά σε μια ένθετη ενότητα (εκτελέστε "
#~ "δοκιμές στο [Παιδική χαρά](https://play.rust-lang.org/)):"

#, fuzzy
#~ msgid "Calling External Code"
#~ msgstr "Κλήση εξωτερικού κωδικού"

#, fuzzy
#~ msgid ""
#~ "Functions from other languages might violate the guarantees of Rust. "
#~ "Calling them is thus unsafe:"
#~ msgstr ""
#~ "Λειτουργίες από άλλες γλώσσες ενδέχεται να παραβιάζουν τις εγγυήσεις του "
#~ "Rust. Κλήση είναι επομένως ανασφαλείς:"

#, fuzzy
#~ msgid ""
#~ "```rust,editable\n"
#~ "use std::mem::size_of_val;\n"
#~ "use std::slice;\n"
#~ "\n"
#~ "/// ...\n"
#~ "/// # Safety\n"
#~ "/// The type must have a defined representation and no padding.\n"
#~ "pub unsafe trait AsBytes {\n"
#~ "    fn as_bytes(&self) -> &[u8] {\n"
#~ "        unsafe {\n"
#~ "            slice::from_raw_parts(self as *const Self as *const u8, "
#~ "size_of_val(self))\n"
#~ "        }\n"
#~ "    }\n"
#~ "}\n"
#~ "\n"
#~ "// Safe because u32 has a defined representation and no padding.\n"
#~ "unsafe impl AsBytes for u32 {}\n"
#~ "```"
#~ msgstr ""
#~ "///... /// # Ασφάλεια /// Ο τύπος πρέπει να έχει καθορισμένη αναπαράσταση "
#~ "και χωρίς γέμιση. μη ασφαλές χαρακτηριστικό παμπ AsBytes { fn "
#~ "as_bytes(&self) -> &\\[u8\\] { μη ασφαλές { slice::from_raw_parts(self as "
#~ "\\*const Self as \\*const u8, size_of_val(self)) } } }"

#, fuzzy
#~ msgid "Day 3: Afternoon Exercises"
#~ msgstr "Ημέρα 3: Απογευματινές Ασκήσεις"

#, fuzzy
#~ msgid "Let us build a safe wrapper for reading directory content!"
#~ msgstr ""
#~ "Ας δημιουργήσουμε ένα ασφαλές περιτύλιγμα για την ανάγνωση περιεχομένου "
#~ "καταλόγου!"

#, fuzzy
#~ msgid ""
#~ "After looking at the exercise, you can look at the [solution](solutions-"
#~ "afternoon.md) provided."
#~ msgstr ""
#~ "Αφού δείτε την άσκηση, μπορείτε να δείτε τη \\[λύση\\] που παρέχεται."

#, fuzzy
#~ msgid "You will find solutions to the exercises on the following pages."
#~ msgstr "Θα βρείτε λύσεις στις ασκήσεις στις επόμενες σελίδες."

#, fuzzy
#~ msgid ""
#~ "Feel free to ask questions about the solutions [on GitHub](https://github."
#~ "com/google/comprehensive-rust/discussions). Let us know if you have a "
#~ "different or better solution than what is presented here."
#~ msgstr ""
#~ "Μη διστάσετε να κάνετε ερωτήσεις σχετικά με τις λύσεις [on GitHub]"
#~ "(https://github.com/google/comprehensive-rust/discussions). Ενημέρωσέ μας "
#~ "εάν έχετε διαφορετική ή καλύτερη λύση από αυτή που παρουσιάζεται εδώ."

#, fuzzy
#~ msgid ""
#~ "**Note:** Please ignore the `// ANCHOR: label` and `// ANCHOR_END: label` "
#~ "comments you see in the solutions. They are there to make it possible to "
#~ "re-use parts of the solutions as the exercises."
#~ msgstr ""
#~ "**Σημείωση:** Αγνοήστε τα \"// ANCHOR: label\" και \"// ANCHOR_END: "
#~ "label\" σχόλια που βλέπετε στις λύσεις. Είναι εκεί για να το κάνουν "
#~ "δυνατό επαναχρησιμοποιήστε μέρη των λύσεων ως ασκήσεις."

#, fuzzy
#~ msgid "Day 1 Morning Exercises"
#~ msgstr "Πρωινές ασκήσεις 1ης ημέρας"

#, fuzzy
#~ msgid "([back to exercise](for-loops.md))"
#~ msgstr "([επιστροφή στην άσκηση](for-loops.md))"

#, fuzzy
#~ msgid "Bonus question"
#~ msgstr "Ερώτηση μπόνους"

#, fuzzy
#~ msgid ""
#~ "It requires more advanced concepts. It might seem that we could use a "
#~ "slice-of-slices (`&[&[i32]]`) as the input type to transpose and thus "
#~ "make our function handle any size of matrix. However, this quickly breaks "
#~ "down: the return type cannot be `&[&[i32]]` since it needs to own the "
#~ "data you return."
#~ msgstr ""
#~ "Ειλικρινά δεν λειτουργεί τόσο καλά. Μπορεί να φαίνεται ότι θα μπορούσαμε "
#~ "να χρησιμοποιήσουμε ένα slice-of-slices (`&[&[i32]]`) ως τύπο εισόδου για "
#~ "να μεταφέρουμε και έτσι να κάνουμε τη συνάρτησή μας να χειρίζεται "
#~ "οποιοδήποτε μέγεθος πίνακα. Ωστόσο, αυτό αναλύεται γρήγορα: ο τύπος "
#~ "επιστροφής δεν μπορεί να είναι \"&\\[&\\[i32\\]\\]\", καθώς πρέπει να "
#~ "είναι κάτοχος των δεδομένων που επιστρέφετε."

#, fuzzy
#~ msgid ""
#~ "You can attempt to use something like `Vec<Vec<i32>>`, but this doesn't "
#~ "work out-of-the-box either: it's hard to convert from `Vec<Vec<i32>>` to "
#~ "`&[&[i32]]` so now you cannot easily use `pretty_print` either."
#~ msgstr ""
#~ "Μπορείτε να επιχειρήσετε να χρησιμοποιήσετε κάτι σαν `Vec<Vec<i32>>`, "
#~ "αλλά ούτε αυτό λειτουργεί πολύ καλά: είναι δύσκολο να μετατρέψετε από "
#~ "`Vec<Vec<i32>>` σε \\`&\\[&\\[i32\\]\\] Έτσι τώρα δεν μπορείτε να "
#~ "χρησιμοποιήσετε εύκολα ούτε το \"pretty_print\"."

#, fuzzy
#~ msgid ""
#~ "In addition, the type itself would not enforce that the child slices are "
#~ "of the same length, so such variable could contain an invalid matrix."
#~ msgstr ""
#~ "Επιπλέον, ο ίδιος ο τύπος δεν θα επιβάλλει ότι οι θυγατρικές φέτες έχουν "
#~ "το ίδιο μήκος, επομένως μια τέτοια μεταβλητή θα μπορούσε να περιέχει έναν "
#~ "μη έγκυρο πίνακα."

#, fuzzy
#~ msgid "Day 1 Afternoon Exercises"
#~ msgstr "1η ημέρα Απογευματινές Ασκήσεις"

#, fuzzy
#~ msgid "([back to exercise](luhn.md))"
#~ msgstr "([επιστροφή στην άσκηση](luhn.md))"

#, fuzzy
#~ msgid "Pattern matching"
#~ msgstr "Αντιστοίχιση προτύπων"

#, fuzzy
#~ msgid "Day 2 Morning Exercises"
#~ msgstr "2η ημέρα Πρωινές ασκήσεις"

#~ msgid "Designing a Library"
#~ msgstr "Σχεδιασμός Βιβλιοθηκών"

#, fuzzy
#~ msgid "([back to exercise](book-library.md))"
#~ msgstr "([επιστροφή στην άσκηση](book-library.md))"

#, fuzzy
#~ msgid "([back to exercise](strings-iterators.md))"
#~ msgstr "([επιστροφή στην άσκηση](strings-iterators.md))"

#, fuzzy
#~ msgid "Day 3 Morning Exercise"
#~ msgstr "3η ημέρα Πρωινή άσκηση"

#, fuzzy
#~ msgid "([back to exercise](simple-gui.md))"
#~ msgstr "([επιστροφή στην άσκηση](simple-gui.md))"

#, fuzzy
#~ msgid "([back to exercise](points-polygons.md))"
#~ msgstr "([επιστροφή στην άσκηση](points-polygons.md))"

#, fuzzy
#~ msgid "Day 3 Afternoon Exercises"
#~ msgstr "3η ημέρα Απογευματινές Ασκήσεις"

#, fuzzy
#~ msgid "([back to exercise](safe-ffi-wrapper.md))"
#~ msgstr "([επιστροφή στην άσκηση](safe-ffi-wrapper.md))"

#~ msgid "Day 4 Morning"
#~ msgstr "4η ημέρα Πρωί"

#~ msgid "Build workflow"
#~ msgstr "Ροή εργασίας κατασκευής"

#~ msgid "GitHub contributors"
#~ msgstr "Συνεργάτες GitHub"

#~ msgid "GitHub stars"
#~ msgstr "Αστέρια GitHub"

#~ msgid "On Day 4, we will cover Android-specific things such as:"
#~ msgstr ""
#~ "Την 4η Ημέρα, θα καλύψουμε πράγματα που αφορούν συγκεκριμένα το Android, "
#~ "όπως:"

#~ msgid "AIDL servers and clients."
#~ msgstr "Εξυπηρετητές και πελάτες AIDL."

#~ msgid "Interoperability with C, C++, and Java."
#~ msgstr "Διαλειτουργικότητα με C, C++ και Java."

#~ msgid ""
#~ "It is important to note that this course does not cover Android "
#~ "**application**  development in Rust, and that the Android-specific parts "
#~ "are specifically about writing code for Android itself, the operating "
#~ "system. "
#~ msgstr ""
#~ "Είναι σημαντικό να σημειωθεί ότι αυτό το μάθημα δεν καλύπτει την "
#~ "ανάπτυξη**εφαρμογών** Android σε Rust. Το κομμάτι του μαθήματος που αφορά "
#~ "τοAndroid έχει να κάνει με ανάπτυξη κώδικα για το ίδιο το Android, ως "
#~ "λειτουργικό σύστημα."

#~ msgid ""
#~ "Learn how to use async Rust --- we'll only mention async Rust when "
#~ "covering traditional concurrency primitives. Please see [Asynchronous "
#~ "Programming in Rust](https://rust-lang.github.io/async-book/) instead for "
#~ "details on this topic."
#~ msgstr ""
#~ "Χρήση async Rust --- θα αναφέρουμε στην async Rust μόνο όταν καλύψουμε τα "
#~ "παραδοσιακά δομικά στοιχεία συγχρονισμού. Δείτε και [Ασύγχρονος "
#~ "Προγραμματισμός σε Rust](https://rust-lang.github.io/async-book/) για "
#~ "λεπτομέρειες για αυτό το θέμα."

#~ msgid ""
#~ "Select your topic for the afternoon of the fourth day. This may be based "
#~ "on the audience you expect, or on your own expertise."
#~ msgstr ""
#~ "Επιλέξτε το θέμα σας για το απόγευμα της τέταρτης ημέρας. Αυτό μπορεί να "
#~ "βασίζεται στο κοινό που περιμένετε ή στη δική σας εμπειρία."

#~ msgid ""
#~ "Prepare anything you need to have available for the afternoon of day 4."
#~ msgstr "Ετοιμάστε οτιδήποτε χρειάζεστε για το απόγευμα της 4ης ημέρας."

#~ msgid "Day 1: Basic Rust, ownership and the borrow checker."
#~ msgstr "Ημέρα 1: Βασική Rust, ιδιοκτησία και ο έλεγχος δανείων."

#~ msgid "Day 4: Concurrency in Rust and seeing Rust in action."
#~ msgstr "Ημέρα 4: Συγχρονισμός στη Rust. Rust στην πράξη."

#~ msgid "Day 4"
#~ msgstr "Ημέρα 4η"

#~ msgid ""
#~ "The afternoon of the fourth day should cover a topic of your choice. "
#~ "Include the topic in the announcement of the course, so that participants "
#~ "know what to expect."
#~ msgstr ""
#~ "Το απόγευμα της τέταρτης ημέρας μπορεί να καλύψει ένα θέμα τηςαρεσκείας "
#~ "σας. Σημειώστε το θέμα που επιλέξατε στην ανακοίνωση του μαθήματος ώστε "
#~ "οισυμμετέχοντες να ξέρουν τι να περιμένουν."

#~ msgid ""
#~ "This phase of the course is a chance for participants to see Rust in "
#~ "action on a codebase they might be familiar with. You can choose from the "
#~ "topics already defined here, or plan your own."
#~ msgstr ""
#~ "Αυτή η φάση του μαθήματος είναι μια ευκαιρία για τους συμμετέχοντες να "
#~ "δουν τη Rust στην πράξη, σε ένα πρότζεκτ με το οποίο μπορεί να είναι ήδη "
#~ "εξοικειωμένοι. Μπορείτε να διαλέξετε θέματα που έχουμε ήδη προετοιμάσει, "
#~ "ή κάτι δικό σας."

#~ msgid "Some topics need additional preparation:"
#~ msgstr "Κάποια θέματα απαιτούν επιπλέον προετοιμασία."

#, fuzzy
#~ msgid "Rustup (Recommended)"
#~ msgstr "Rustup (Συνιστάται)"

#, fuzzy
#~ msgid ""
#~ "You can follow the instructions to install cargo and rust compiler, among "
#~ "other standard ecosystem tools with the [rustup](https://rust-analyzer."
#~ "github.io/) tool, which is maintained by the Rust Foundation."
#~ msgstr ""
#~ "Μπορείτε να ακολουθήσετε τις οδηγίες για την εγκατάσταση του "
#~ "μεταγλωττιστή φορτίου και σκουριάς, μεταξύ άλλων τυπικών εργαλείων "
#~ "οικοσυστήματος με το εργαλείο [rustup](https://rust-analyzer.github.io/), "
#~ "το οποίο διατηρείται από το Rust Foundation."

#, fuzzy
#~ msgid "Package Managers"
#~ msgstr "Διαχειριστές πακέτων"

#, fuzzy
#~ msgid "Debian"
#~ msgstr "Debian"

#, fuzzy
#~ msgid ""
#~ "```rust,editable\n"
#~ "fn main() {\n"
#~ "    fizzbuzz_to(20);   // Defined below, no forward declaration needed\n"
#~ "}\n"
#~ "\n"
#~ "fn is_divisible_by(lhs: u32, rhs: u32) -> bool {\n"
#~ "    if rhs == 0 {\n"
#~ "        return false;  // Corner case, early return\n"
#~ "    }\n"
#~ "    lhs % rhs == 0     // The last expression in a block is the return "
#~ "value\n"
#~ "}\n"
#~ "\n"
#~ "fn fizzbuzz(n: u32) -> () {  // No return value means returning the unit "
#~ "type `()`\n"
#~ "    match (is_divisible_by(n, 3), is_divisible_by(n, 5)) {\n"
#~ "        (true,  true)  => println!(\"fizzbuzz\"),\n"
#~ "        (true,  false) => println!(\"fizz\"),\n"
#~ "        (false, true)  => println!(\"buzz\"),\n"
#~ "        (false, false) => println!(\"{n}\"),\n"
#~ "    }\n"
#~ "}\n"
#~ "\n"
#~ "fn fizzbuzz_to(n: u32) {  // `-> ()` is normally omitted\n"
#~ "    for i in 1..=n {\n"
#~ "        fizzbuzz(i);\n"
#~ "    }\n"
#~ "}\n"
#~ "```"
#~ msgstr ""
#~ "fn fizzbuzz(n: u32) -> () { // Χωρίς επιστροφή τιμής σημαίνει επιστροφή "
#~ "του τύπου μονάδας `()` αντιστοίχιση (is_divisible_by(n, 3), "
#~ "is_divisible_by(n, 5)) { (αληθινό, αληθινό) => println!(\"fizzbuzz\"), "
#~ "(αληθές, λάθος) => println!(\"fizz\"), (ψευδές, αληθές) => println!"
#~ "(\"buzz\"), (ψεύτικο, ψευδές) => println!(\"{n}\"), } }"

#, fuzzy
#~ msgid ""
#~ "After looking at the exercises, you can look at the \\[solutions\\] "
#~ "provided."
#~ msgstr ""
#~ "Αφού δείτε τις ασκήσεις, μπορείτε να δείτε τις \\[λύσεις\\] που "
#~ "παρέχονται."

#, fuzzy
#~ msgid ""
#~ "Note that since `println!` is a macro, `x` is not moved, even using the "
#~ "function like syntax of `println!(\"x: {}\", x)`"
#~ msgstr ""
#~ "Σημειώστε ότι επειδή το \"println!\" είναι μακροεντολή, το \"x\" δεν "
#~ "μετακινείται, ακόμη και χρησιμοποιώντας τη συνάρτηση όπως η σύνταξη του "
#~ "\"println!(\"x: {}\", x)\""

#, fuzzy
#~ msgid "Global state is managed with static and constant variables."
#~ msgstr ""
#~ "Η διαχείριση της παγκόσμιας κατάστασης γίνεται με στατικές και σταθερές "
#~ "μεταβλητές."

#, fuzzy
#~ msgid "You can declare compile-time constants:"
#~ msgstr "Μπορείτε να δηλώσετε σταθερές χρόνου μεταγλώττισης:"

#, fuzzy
#~ msgid "You can also declare static variables:"
#~ msgstr "Μπορείτε επίσης να δηλώσετε στατικές μεταβλητές:"

#, fuzzy
#~ msgid ""
#~ "We will look at mutating static data in the [chapter on Unsafe Rust](../"
#~ "unsafe.md)."
#~ msgstr ""
#~ "Θα εξετάσουμε τη μετάλλαξη στατικών δεδομένων στο \\[κεφάλαιο για την Μη "
#~ "ασφαλή σκουριά\\] (../unsafe.md)."

#, fuzzy
#~ msgid "Potential for use-after-free."
#~ msgstr "Δυνατότητα χρήσης-μετά-δωρεάν."

#, fuzzy
#~ msgid "The data was _moved_ from `s1` and `s1` is no longer accessible."
#~ msgstr ""
#~ "Τα δεδομένα _μετακινήθηκαν_ από το `s1` και το `s1` δεν είναι πλέον "
#~ "προσβάσιμο."

#, fuzzy
#~ msgid "A small book library,"
#~ msgstr "Iterators και ιδιοκτησία (σκληρό)."

#, fuzzy
#~ msgid ""
#~ "`mut self`: same as above, but while the method owns the object, it can "
#~ "mutate it too. Complete ownership does not automatically mean mutability."
#~ msgstr ""
#~ "`mut self`: όπως παραπάνω, αλλά ενώ η μέθοδος κατέχει το αντικείμενο, "
#~ "μπορεί μεταλλάξτε το και εσείς. Η πλήρης ιδιοκτησία δεν σημαίνει αυτόματα "
#~ "μεταβλητότητα."

#, fuzzy
#~ msgid "You use `if` very similarly to how you would in other languages:"
#~ msgstr ""
#~ "Χρησιμοποιείτε το \"if\" πολύ παρόμοια με αυτό που θα κάνατε σε άλλες "
#~ "γλώσσες:"

#, fuzzy
#~ msgid ""
#~ "If you want to match a value against a pattern, you can use `if let`:"
#~ msgstr ""
#~ "Εάν θέλετε να ταιριάξετε μια τιμή με ένα μοτίβο, μπορείτε να "
#~ "χρησιμοποιήσετε το «αν επιτρέπεται»:"

#, fuzzy
#~ msgid ""
#~ "`if let` can be more concise than `match`, e.g., when only one case is "
#~ "interesting. In contrast, `match` requires all branches to be covered."
#~ msgstr ""
#~ "Το «αν ας» μπορεί να είναι πιο συνοπτικό από το «ταίριασμα», π.χ., όταν "
#~ "μόνο μία περίπτωση είναι ενδιαφέρουσα. Αντίθετα, το \"match\" απαιτεί να "
#~ "καλύπτονται όλοι οι κλάδοι."

#, fuzzy
#~ msgid ""
#~ "For the similar use case consider demonstrating a newly stabilized [`let "
#~ "else`](https://github.com/rust-lang/rust/pull/93628) feature."
#~ msgstr ""
#~ "Για παρόμοια περίπτωση χρήσης, εξετάστε το ενδεχόμενο να επιδείξετε μια "
#~ "νέα σταθεροποιημένη λειτουργία [`let else`](https://github.com/rust-lang/"
#~ "rust/pull/93628)."

#, fuzzy
#~ msgid "The `while` keyword works very similar to other languages:"
#~ msgstr "Η λέξη-κλειδί \"while\" λειτουργεί πολύ παρόμοια με άλλες γλώσσες:"

#, fuzzy
#~ msgid "`for` expressions"
#~ msgstr "εκφράσεις «για»."

#, fuzzy
#~ msgid ""
#~ "If you need to mutate the data inside an `Rc`, you will need to wrap the "
#~ "data in a type such as [`Cell` or `RefCell`](../concurrency/shared_state/"
#~ "arc.md)."
#~ msgstr ""
#~ "Εάν πρέπει να μεταλλάξετε τα δεδομένα μέσα σε ένα \"Rc\", θα πρέπει να "
#~ "τυλίξετε τα δεδομένα μέσα έναν τύπο όπως [`Cell` ή `RefCell`](../"
#~ "concurrency/shared_state/arc.md). Ανατρέξτε στο [`Arc`](https://doc.rust-"
#~ "lang.org/std/sync/struct.Mutex.html) εάν βρίσκεστε σε ένα multi-threaded "
#~ "συμφραζόμενα."

#, fuzzy
#~ msgid "Like C++'s `std::shared_ptr`."
#~ msgstr ""
#~ "Το \"clone\" είναι φθηνό: δημιουργεί έναν δείκτη στην ίδια κατανομή και "
#~ "αυξάνει το πλήθος αναφοράς."

#, fuzzy
#~ msgid "The module content can be omitted:"
#~ msgstr "Το περιεχόμενο της ενότητας μπορεί να παραλειφθεί:"

#, fuzzy
#~ msgid "The `garden` module content is found at:"
#~ msgstr "Το περιεχόμενο της ενότητας «garden» βρίσκεται στη διεύθυνση:"

#, fuzzy
#~ msgid "`src/garden.rs` (modern Rust 2018 style)"
#~ msgstr "`src/garden.rs` (μοντέρνο στυλ Rust 2018)"

#, fuzzy
#~ msgid "`src/garden/mod.rs` (older Rust 2015 style)"
#~ msgstr "`src/garden/mod.rs` (παλαιότερο στυλ Rust 2015)"

#, fuzzy
#~ msgid "Similarly, a `garden::vegetables` module can be found at:"
#~ msgstr ""
#~ "Ομοίως, μια ενότητα «garden:: λαχανικά» μπορεί να βρεθεί στη διεύθυνση:"

#, fuzzy
#~ msgid "`src/garden/vegetables.rs` (modern Rust 2018 style)"
#~ msgstr "`src/garden/vegetables.rs` (μοντέρνο στυλ Rust 2018)"

#, fuzzy
#~ msgid "`src/garden/vegetables/mod.rs` (older Rust 2015 style)"
#~ msgstr "`src/garden/vegetables/mod.rs` (παλαιότερο στυλ Rust 2015)"

#, fuzzy
#~ msgid ""
#~ "Copy the following code to <https://play.rust-lang.org/> and implement "
#~ "the function:"
#~ msgstr ""
#~ "Αντιγράψτε τον παρακάτω κώδικα στο <https://play.rust-lang.org/> και "
#~ "εφαρμόστε το λειτουργία:"

#, fuzzy
#~ msgid "`move` closures only implement `FnOnce`."
#~ msgstr "Τα κλεισίματα «μετακίνησης» εφαρμόζουν μόνο το «FnOnce»."

#, fuzzy
#~ msgid ""
#~ "We've seen how a function can take arguments which implement a trait:"
#~ msgstr ""
#~ "Είδαμε πώς μια συνάρτηση μπορεί να λάβει ορίσματα που υλοποιούν ένα "
#~ "χαρακτηριστικό:"

#, fuzzy
#~ msgid ""
#~ "However, how can we store a collection of mixed types which implement "
#~ "`Display`?"
#~ msgstr ""
#~ "Ωστόσο, πώς μπορούμε να αποθηκεύσουμε μια συλλογή μικτών τύπων που "
#~ "υλοποιούν το \"Display\";"

#, fuzzy
#~ msgid "For this, we need _trait objects_:"
#~ msgstr "Για αυτό, χρειαζόμαστε _trait αντικείμενα_:"

#, fuzzy
#~ msgid ""
#~ "Similarly, you need a trait object if you want to return different types "
#~ "implementing a trait:"
#~ msgstr ""
#~ "Ομοίως, χρειάζεστε ένα αντικείμενο χαρακτηριστικών εάν θέλετε να "
#~ "επιστρέψετε διαφορετικές τιμές υλοποίηση ενός χαρακτηριστικού:"

#, fuzzy
#~ msgid ""
#~ "You will also want to browse the [`std::ffi`](https://doc.rust-lang.org/"
#~ "std/ffi/) module, particular for [`CStr`](https://doc.rust-lang.org/std/"
#~ "ffi/struct.CStr.html) and [`CString`](https://doc.rust-lang.org/std/ffi/"
#~ "struct.CString.html) types which are used to hold NUL-terminated strings "
#~ "coming from C. The [Nomicon](https://doc.rust-lang.org/nomicon/ffi.html) "
#~ "also has a very useful chapter about FFI."
#~ msgstr ""
#~ "Θα θέλετε επίσης να περιηγηθείτε στη λειτουργική μονάδα [`std::ffi`]"
#~ "(https://doc.rust-lang.org/std/ffi/), ειδικά για το [`CStr`](https://doc."
#~ "rust-lang.org/std/ffi/struct.CStr.html) και τύπους [`CString`](https://"
#~ "doc.rust-lang.org/std/ffi/struct.CString.html) που χρησιμοποιούνται για "
#~ "τη διατήρηση συμβολοσειρών με τερματισμό NUL που προέρχονται από Γ. Το "
#~ "[Nomicon](https://doc.rust-lang.org/nomicon/ffi.html) έχει επίσης ένα "
#~ "πολύ χρήσιμο κεφάλαιο για το FFI."

#, fuzzy
#~ msgid "Fearless Concurrency"
#~ msgstr "Ατρόμητος Συγχρονισμός"

#, fuzzy
#~ msgid "Day 4 Morning Exercise"
#~ msgstr "4η ημέρα Πρωινή άσκηση"
