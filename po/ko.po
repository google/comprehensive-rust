msgid ""
msgstr ""
"Project-Id-Version: [한국어]Comprehensive Rust 🦀\n"
"POT-Creation-Date: 2023-12-03T00:30:19-03:00\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.3.2\n"

#: src/SUMMARY.md:22 src/hello-world/benefits.md:1
msgid "Benefits of Rust"
msgstr ""

#: src/SUMMARY.md:23 src/hello-world/playground.md:1
msgid "Playground"
msgstr ""

#: src/SUMMARY.md:24 src/types-and-values.md:1
msgid "Types and Values"
msgstr ""

#: src/SUMMARY.md:26 src/types-and-values/values.md:1
msgid "Values"
msgstr ""

#: src/SUMMARY.md:27 src/types-and-values/arithmetic.md:1
msgid "Arithmetic"
msgstr ""

#: src/SUMMARY.md:30 src/types-and-values/exercise.md:1
#, fuzzy
msgid "Exercise: Fibonacci"
msgstr "연습문제"

#: src/SUMMARY.md:33 src/control-flow-basics/conditionals.md:1
msgid "Conditionals"
msgstr ""

#: src/SUMMARY.md:36 src/control-flow-basics/blocks-and-scopes.md:1
msgid "Blocks and Scopes"
msgstr ""

#: src/SUMMARY.md:38 src/control-flow-basics/macros.md:1
msgid "Macros"
msgstr ""

#: src/SUMMARY.md:39
#, fuzzy
msgid "Exercise: Collatz conjecture"
msgstr "연습문제"

#: src/SUMMARY.md:45 src/SUMMARY.md:46 src/tuples-and-arrays.md:1
#: src/tuples-and-arrays/tuples-and-arrays.md:1
msgid "Tuples and Arrays"
msgstr ""

#: src/SUMMARY.md:50 src/tuples-and-arrays/exercise.md:1
#, fuzzy
msgid "Exercise: Nested Arrays"
msgstr "연습문제"

#: src/SUMMARY.md:55 src/references/exercise.md:1
#, fuzzy
msgid "Exercise: Geometry"
msgstr "연습문제"

#: src/SUMMARY.md:57 src/user-defined-types.md:1
#, fuzzy
msgid "User-Defined Types"
msgstr "스칼라 타입"

#: src/SUMMARY.md:62 src/user-defined-types/aliases.md:1
msgid "Type Aliases"
msgstr ""

#: src/SUMMARY.md:63 src/user-defined-types/exercise.md:1
#, fuzzy
msgid "Exercise: Elevator Events"
msgstr "연습문제"

#: src/SUMMARY.md:74 src/pattern-matching/exercise.md:1
msgid "Exercise: Expression Evaluation"
msgstr ""

#: src/SUMMARY.md:88 src/generics/exercise.md:1
#, fuzzy
msgid "Exercise: Generic `min`"
msgstr "연습문제"

#: src/SUMMARY.md:110
msgid "`Default`, struct update syntax"
msgstr ""

#: src/SUMMARY.md:121 src/memory-management/review.md:1
msgid "Review of Program Memory"
msgstr ""

#: src/SUMMARY.md:125
msgid "`Clone`"
msgstr ""

#: src/SUMMARY.md:128 src/memory-management/exercise.md:1
#, fuzzy
msgid "Exercise: Builder Type"
msgstr "연습문제"

#: src/SUMMARY.md:130 src/smart-pointers.md:1
msgid "Smart Pointers"
msgstr ""

#: src/SUMMARY.md:133 src/smart-pointers/exercise.md:1
#, fuzzy
msgid "Exercise: Binary Tree"
msgstr "간단한 GUI 라이브러리"

#: src/SUMMARY.md:151 src/slices-and-lifetimes/exercise.md:1
#, fuzzy
msgid "Exercise: Protobuf Parsing"
msgstr "연습문제"

#: src/SUMMARY.md:163 src/iterators/exercise.md:1
#, fuzzy
msgid "Exercise: Iterator Method Chaining"
msgstr "C와의 상호운용성"

#: src/SUMMARY.md:169
msgid "`use`, `super`, `self`"
msgstr ""

#: src/SUMMARY.md:170 src/modules/exercise.md:1
#, fuzzy
msgid "Exercise: Modules for the GUI Library"
msgstr "간단한 GUI 라이브러리"

#: src/SUMMARY.md:176 src/testing/googletest.md:1
msgid "GoogleTest"
msgstr ""

#: src/SUMMARY.md:177 src/testing/mocking.md:1
msgid "Mocking"
msgstr ""

#: src/SUMMARY.md:178
msgid "Compiler lints and Clippy"
msgstr ""

#: src/SUMMARY.md:227 src/android/interoperability/cpp/generated-cpp.md:1
#, fuzzy
msgid "Generated C++"
msgstr "안전하지 않은 러스트"

#: src/SUMMARY.md:228
#, fuzzy
msgid "C++ Bridge"
msgstr "러스트 바이너리"

#: src/SUMMARY.md:230 src/android/interoperability/cpp/shared-enums.md:1
#, fuzzy
msgid "Shared Enums"
msgstr "스칼라 타입"

#: src/SUMMARY.md:233 src/android/interoperability/cpp/type-mapping.md:1
msgid "Additional Types"
msgstr ""

#: src/SUMMARY.md:234
msgid "Building for Android: C++"
msgstr ""

#: src/SUMMARY.md:235
msgid "Building for Android: Genrules"
msgstr ""

#: src/SUMMARY.md:236
msgid "Building for Android: Rust"
msgstr ""

#: src/SUMMARY.md:242
#, fuzzy
msgid "Chromium"
msgstr "Rust on Exercism"

#: src/SUMMARY.md:248 src/chromium/cargo.md:1
msgid "Comparing Chromium and Cargo ecosystems"
msgstr ""

#: src/SUMMARY.md:249
msgid "Policy"
msgstr ""

#: src/SUMMARY.md:252 src/chromium/build-rules/depending.md:1
msgid "Depending on Rust code from Chromium C++"
msgstr ""

#: src/SUMMARY.md:253 src/chromium/build-rules/vscode.md:1
msgid "Visual Studio code"
msgstr ""

#: src/SUMMARY.md:257
#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:1
msgid "Limitations of CXX"
msgstr ""

#: src/SUMMARY.md:259
#, fuzzy
msgid "Using CXX in Chromium"
msgstr "Rust on Exercism"

#: src/SUMMARY.md:261 src/chromium/adding-third-party-crates.md:1
msgid "Adding third party crates"
msgstr ""

#: src/SUMMARY.md:262
msgid "Configuring Cargo.toml"
msgstr ""

#: src/SUMMARY.md:263
msgid "Configuring gnrt_config.toml"
msgstr ""

#: src/SUMMARY.md:264
#: src/chromium/adding-third-party-crates/downloading-crates.md:1
msgid "Downloading crates"
msgstr ""

#: src/SUMMARY.md:265
#, fuzzy
msgid "Generating gn build rules"
msgstr "제네릭"

#: src/SUMMARY.md:266
#: src/chromium/adding-third-party-crates/resolving-problems.md:1
msgid "Resolving problems"
msgstr ""

#: src/SUMMARY.md:267
#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:1
msgid "Build scripts which generate code"
msgstr ""

#: src/SUMMARY.md:268
#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:1
msgid "Build scripts which build C++ or take arbitrary actions"
msgstr ""

#: src/SUMMARY.md:269
#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:1
msgid "Depending on a crate"
msgstr ""

#: src/SUMMARY.md:270
#, fuzzy
msgid "Reviews and audits"
msgstr "Read와 Write"

#: src/SUMMARY.md:271
msgid "Checking into Chromium source code"
msgstr ""

#: src/SUMMARY.md:272
#: src/chromium/adding-third-party-crates/keeping-up-to-date.md:1
msgid "Keeping crates up to date"
msgstr ""

#: src/SUMMARY.md:274
msgid "Bringing it together - Exercise"
msgstr ""

#: src/SUMMARY.md:366 src/async/pitfalls/pin.md:1
msgid "`Pin`"
msgstr ""

#: src/SUMMARY.md:380 src/glossary.md:1
msgid "Glossary"
msgstr ""

#: src/index.md:11
msgid ""
"The latest version of the course can be found at <https://google.github.io/"
"comprehensive-rust/>. If you are reading somewhere else, please check there "
"for updates."
msgstr ""

#: src/running-the-course.md:8
msgid ""
"We typically run classes from 9:00 am to 4:00 pm, with a 1 hour lunch break "
"in the middle. This leaves 3 hours for the morning class and 3 hours for the "
"afternoon class. Both sessions contain multiple breaks and time for students "
"to work on exercises."
msgstr ""

#: src/running-the-course/course-structure.md:7
msgid ""
"The first three days make up [Rust Fundaments](../welcome-day-1.md). The "
"days are fast paced and we cover a lot of ground!"
msgstr ""

#: src/running-the-course/course-structure.md:10
#, fuzzy
msgid "{{%course outline Fundamentals}}"
msgstr "러스트 바이너리"

#: src/running-the-course/course-structure.md:37
#, fuzzy
msgid ""
"The [Rust in Chromium](../chromium.md) deep dive is a half-day course on "
"using Rust as part of the Chromium browser. It includes using Rust in "
"Chromium's `gn` build system, bringing in third-party libraries (\"crates\") "
"and C++ interoperability."
msgstr ""
"[Android](android.md): Android 플랫폼 개발(AOSP) 시 Rust 사용에 관한 반나절 "
"과정입니다. 여기에는 C, C++, Java와의 상호 운용성이 포함됩니다."

#: src/running-the-course/course-structure.md:42
msgid ""
"You will need to be able to build Chromium --- a debug, component build is "
"[recommended](../chromium/setup.md) for speed but any build will work. "
"Ensure that you can run the Chromium browser that you've built."
msgstr ""

#: src/running-the-course/translations.md:7
#, fuzzy
msgid ""
"[Chinese (Simplified)](https://google.github.io/comprehensive-rust/zh-CN/) "
"by [@suetfei](https://github.com/suetfei), [@wnghl](https://github.com/"
"wnghl), [@anlunx](https://github.com/anlunx), [@kongy](https://github.com/"
"kongy), [@noahdragon](https://github.com/noahdragon), [@superwhd](https://"
"github.com/superwhd), [@SketchK](https://github.com/SketchK), and [@nodmp]"
"(https://github.com/nodmp)."
msgstr ""
"[브라질 포르투갈어](https://google.github.io/comprehensive-rust/pt-BR/): "
"[@rastringer](https://github.com/rastringer), [@hugojacob](https://github."
"com/hugojacob), [@joaovicmendes](https://github.com/joaovicmendes) 그리고 "
"[@henrif75](https://github.com/henrif75)가 제공."

#: src/cargo.md:14
msgid ""
"After installing Rust, you should configure your editor or IDE to work with "
"Rust. Most editors do this by talking to [rust-analyzer](https://rust-"
"analyzer.github.io/), which provides auto-completion and jump-to-definition "
"functionality for [VS Code](https://code.visualstudio.com/), [Emacs](https://"
"rust-analyzer.github.io/manual.html#emacs), [Vim/Neovim](https://rust-"
"analyzer.github.io/manual.html#vimneovim), and many others. There is also a "
"different IDE available called [RustRover](https://www.jetbrains.com/rust/)."
msgstr ""

#: src/cargo/code-samples.md:15 src/cargo/running-locally.md:45
msgid "\"Edit me!\""
msgstr ""

#: src/welcome-day-1.md:9
msgid "Control flow constructs: loops, conditionals, and so on."
msgstr ""

#: src/welcome-day-1.md:10
msgid "User-defined types: structs and enums."
msgstr ""

#: src/welcome-day-1.md:13 src/welcome-day-2.md:12 src/welcome-day-3.md:8
#: src/welcome-day-4.md:11
msgid "Schedule"
msgstr ""

#: src/welcome-day-1.md:15 src/welcome-day-1-afternoon.md:3
#: src/welcome-day-2.md:14 src/welcome-day-2-afternoon.md:3
#: src/welcome-day-3.md:10 src/welcome-day-3-afternoon.md:3
#: src/welcome-day-4.md:13 src/welcome-day-4-afternoon.md:3
msgid "{{%session outline}}"
msgstr ""

#: src/welcome-day-1.md:32
msgid ""
"The idea for the first day is to show the \"basic\" things in Rust that "
"should have immediate parallels in other languages. The more advanced parts "
"of Rust come on the subsequent days."
msgstr ""

#: src/welcome-day-1.md:36
msgid ""
"If you're teaching this in a classroom, this is a good place to go over the "
"schedule. Note that there is an exercise at the end of each segment, "
"followed by a break. Plan to cover the exercise solution after the break. "
"The times listed here are a suggestion in order to keep the course on "
"schedule. Feel free to be flexible and adjust as necessary!"
msgstr ""

#: src/hello-world.md:3 src/types-and-values.md:3 src/control-flow-basics.md:3
#: src/tuples-and-arrays.md:3 src/references.md:3 src/user-defined-types.md:3
#: src/pattern-matching.md:3 src/methods-and-traits.md:3 src/generics.md:3
#: src/std-types.md:3 src/std-traits.md:3 src/memory-management.md:3
#: src/smart-pointers.md:3 src/borrowing.md:3 src/slices-and-lifetimes.md:3
#: src/iterators.md:3 src/modules.md:3 src/testing.md:3 src/error-handling.md:3
#: src/unsafe-rust.md:3
msgid "{{%segment outline}}"
msgstr ""

#: src/hello-world/hello-world.md:8
#, fuzzy
msgid "\"Hello 🌍!\""
msgstr "Hello World!"

#: src/hello-world/benefits.md:5
msgid ""
"_Compile time memory safety_ - whole classes of memory bugs are prevented at "
"compile time"
msgstr ""

#: src/hello-world/benefits.md:14
msgid ""
"_No undefined runtime behavior_ - what a Rust statement does is never left "
"unspecified"
msgstr ""

#: src/hello-world/benefits.md:19
msgid ""
"_Modern language features_ - as expressive and ergonomic as higher-level "
"languages"
msgstr ""

#: src/hello-world/benefits.md:32
msgid ""
"Do not spend much time here. All of these points will be covered in more "
"depth later."
msgstr ""

#: src/hello-world/playground.md:3
msgid ""
"The [Rust Playground](https://play.rust-lang.org/) provides an easy way to "
"run short Rust programs, and is the basis for the examples and exercises in "
"this course.  Try running the \"hello-world\" program it starts with. It "
"comes with a few handy features:"
msgstr ""

#: src/hello-world/playground.md:8
msgid ""
"Under \"Tools\", use the `rustfmt` option to format your code in the "
"\"standard\" way."
msgstr ""

#: src/hello-world/playground.md:11
msgid ""
"Rust has two main \"profiles\" for generating code: Debug (extra runtime "
"checks, less optimization) and Release (fewer runtime checks, lots of "
"optimization). These are accessible under \"Debug\" at the top."
msgstr ""

#: src/hello-world/playground.md:15
msgid ""
"If you're interested, use \"ASM\" under \"...\" to see the generated "
"assembly code."
msgstr ""

#: src/hello-world/playground.md:20
msgid ""
"As students head into the break, encourage them to open up the playground "
"and experiment a little. Encourage them to keep the tab open and try things "
"out during the rest of the course. This is particularly helpful for advanced "
"students who want to know more about Rust's optimzations or generated "
"assembly."
msgstr ""

#: src/types-and-values/variables.md:9 src/control-flow-basics/loops.md:29
#: src/control-flow-basics/break-continue.md:33
#: src/control-flow-basics/blocks-and-scopes.md:17
msgid "\"x: {x}\""
msgstr ""

#: src/types-and-values/variables.md:10
msgid ""
"// x = 20;\n"
"    // println!(\"x: {x}\");\n"
msgstr ""

#: src/types-and-values/variables.md:17
msgid ""
"Uncomment the `x = 20` to demonstrate that variables are immutable by "
"default. Add the `mut` keyword to allow changes."
msgstr ""

#: src/types-and-values/variables.md:20
msgid ""
"The `i32` here is the type of the variable. This must be known at compile "
"time, but type inference (covered later) allows the programmer to omit it in "
"many cases."
msgstr ""

#: src/types-and-values/values.md:3
msgid ""
"Here are some basic built-in types, and the syntax for literal values of "
"each type."
msgstr ""

#: src/types-and-values/arithmetic.md:9
msgid "\"result: {}\""
msgstr ""

#: src/types-and-values/arithmetic.md:15
msgid ""
"This is the first time we've seen a function other than `main`, but the "
"meaning should be clear: it takes three integers, and returns an integer. "
"Functions will be covered in more detail later."
msgstr ""

#: src/types-and-values/arithmetic.md:19
msgid "Arithmetic is very similar to other languages, with similar precedence."
msgstr ""

#: src/types-and-values/arithmetic.md:21
msgid ""
"What about integer overflow? In C and C++ overflow of _signed_ integers is "
"actually undefined, and might do different things on different platforms or "
"compilers. In Rust, it's defined."
msgstr ""

#: src/types-and-values/arithmetic.md:25
msgid ""
"Change the `i32`'s to `i16` to see an integer overflow, which panics "
"(checked) in a debug build and wraps in a release build.  There are other "
"options, such as overflowing, saturating, and carrying.  These are accessed "
"with method syntax, e.g., `(a * b).saturating_add(b * c).saturating_add(c * "
"a)`."
msgstr ""

#: src/types-and-values/arithmetic.md:30
msgid ""
"In fact, the compiler will detect overflow of constant expressions, which is "
"why the example requires a separate function."
msgstr ""

#: src/types-and-values/strings.md:3
msgid ""
"Rust has two types to represent strings, both of which will be covered in "
"more depth later.  Both _always_ store UTF-8 encoded strings."
msgstr ""

#: src/types-and-values/strings.md:7
msgid "`&str` - a read-only string. String literals have this type."
msgstr ""

#: src/types-and-values/strings.md:11
msgid "\"Greetings\""
msgstr ""

#: src/types-and-values/strings.md:12
msgid "\"🪐\""
msgstr ""

#: src/types-and-values/strings.md:15
msgid "\", \""
msgstr ""

#: src/types-and-values/strings.md:17
msgid "\"final sentence: {}\""
msgstr ""

#: src/types-and-values/strings.md:18 src/async/control-flow/join.md:30
msgid "\"{:?}\""
msgstr ""

#: src/types-and-values/strings.md:19
msgid "//println!(\"{:?}\", &sentence[12..13]);\n"
msgstr ""

#: src/types-and-values/strings.md:25
msgid ""
"This slide introduces strings. Everything here will be covered in more depth "
"later, but this is enough for subsequent slides and exercises to use strings."
msgstr ""

#: src/types-and-values/strings.md:28
msgid "Invalid UTF-8 in a string is UB, and this not allowed in safe Rust."
msgstr ""

#: src/types-and-values/strings.md:30
msgid ""
"`String` is a user-defined type with a constructor (`::new()`) and methods "
"like `s.push_str(..)`."
msgstr ""

#: src/types-and-values/strings.md:32
msgid ""
"The `&` in `&str` indicates that this is a reference. We will cover "
"references later, so for now just think of `&str` as a unit meaning \"a read-"
"only string\"."
msgstr ""

#: src/types-and-values/strings.md:35
msgid ""
"The commented-out line is indexing into the string by byte position. "
"`12..13` does not end on a character boundary, so the program panics. Adjust "
"it to a range that does, based on the error message."
msgstr ""

#: src/types-and-values/inference.md:33
msgid ""
"When nothing constrains the type of an integer literal, Rust defaults to "
"`i32`. This sometimes appears as `{integer}` in error messages. Similarly, "
"floating-point literals default to `f64`."
msgstr ""

#: src/types-and-values/inference.md:42
msgid "// ERROR: no implementation for `{float} == {integer}`\n"
msgstr ""

#: src/types-and-values/exercise.md:3
msgid ""
"The first and second Fibonacci numbers are both `1`.  For n>2, he n'th "
"Fibonacci number is calculated recursively as the sum of the n-1'th and "
"n-2'th Fibonacci numbers."
msgstr ""

#: src/types-and-values/exercise.md:7
msgid ""
"Write a function `fib(n)` that calculates the n'th Fibonacci number.  When "
"will this function panic?"
msgstr ""

#: src/types-and-values/exercise.md:13
msgid "// The base case.\n"
msgstr ""

#: src/types-and-values/exercise.md:16
msgid "// The recursive case.\n"
msgstr ""

#: src/types-and-values/exercise.md:23 src/types-and-values/solution.md:14
msgid "\"fib(n) = {}\""
msgstr ""

#: src/control-flow-basics/conditionals.md:21
#: src/control-flow-basics/conditionals.md:38
msgid "\"small\""
msgstr ""

#: src/control-flow-basics/conditionals.md:23
msgid "\"biggish\""
msgstr ""

#: src/control-flow-basics/conditionals.md:25
msgid "\"huge\""
msgstr ""

#: src/control-flow-basics/conditionals.md:40
msgid "\"large\""
msgstr ""

#: src/control-flow-basics/conditionals.md:42
msgid "\"number size: {}\""
msgstr ""

#: src/control-flow-basics/conditionals.md:50
msgid ""
"When `if` is used in an expression, the expression must have a `;` to "
"separate it from the next statement. Remove the `;` before `println!` to see "
"the compiler error."
msgstr ""

#: src/control-flow-basics/loops.md:3
msgid "There are three looping keywords in Rust: `while`, `loop`, and `for`:"
msgstr ""

#: src/control-flow-basics/loops.md:17
msgid "\"Final x: {x}\""
msgstr ""

#: src/control-flow-basics/loops.md:34
msgid "`loop`"
msgstr ""

#: src/control-flow-basics/loops.md:44
msgid "\"{i}\""
msgstr ""

#: src/control-flow-basics/loops.md:54
msgid ""
"We will discuss iteration later; for now, just stick to range expressions."
msgstr ""

#: src/control-flow-basics/loops.md:55
msgid ""
"Note that the `for` loop only iterates to `4`. Show the `1..=5` syntax for "
"an inclusive range."
msgstr ""

#: src/control-flow-basics/break-continue.md:23
msgid "\"{result}\""
msgstr ""

#: src/control-flow-basics/break-continue.md:36
msgid "\"x: {x}, i: {i}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:14
msgid "\"y: {y}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:25
msgid "A variable's scope is limited to the enclosing block."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:33
msgid "\"before: {a}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:35
#: src/std-traits/from-and-into.md:7 src/std-traits/from-and-into.md:19
#: src/slices-and-lifetimes/solution.md:216
#, fuzzy
msgid "\"hello\""
msgstr "Hello World!"

#: src/control-flow-basics/blocks-and-scopes.md:36
msgid "\"inner scope: {a}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:39
msgid "\"shadowed in inner scope: {a}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:42
msgid "\"after: {a}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:49
msgid ""
"Show that a variable's scope is limited by adding a b\\` in the inner block "
"in the last example, and then trying to access it outside that block."
msgstr ""

#: src/control-flow-basics/functions.md:25
msgid ""
"Always takes a fixed number of parameters. Default arguments are not "
"supported. Macros can be used to support variadic functions."
msgstr ""

#: src/control-flow-basics/macros.md:3
msgid ""
"Macros are expanded into Rust code during compilation, and can take a "
"variable number of arguments. They are distinguished by a `!` at the end. "
"The Rust standard library includes an assortment of useful macros."
msgstr ""

#: src/control-flow-basics/macros.md:8
msgid ""
"`format!(format, ..)` works just like `println!` but returns the result as a "
"string."
msgstr ""

#: src/control-flow-basics/macros.md:9
msgid "`dbg!(expression)` logs the value of the expression and returns it."
msgstr ""

#: src/control-flow-basics/macros.md:10
msgid ""
"`todo!()` marks a bit of code as not-yet-implemented. If executed, it will "
"panic."
msgstr ""

#: src/control-flow-basics/macros.md:11
msgid ""
"`unreachable!()` marks a bit of code as unreachable. If executed, it will "
"panic."
msgstr ""

#: src/control-flow-basics/macros.md:28
msgid "\"{n}! = {}\""
msgstr ""

#: src/control-flow-basics/macros.md:34
msgid ""
"The takeaway from this section is that these common conveniences exist, and "
"how to use them. Why they are defined as macros, and what they expand to, is "
"not especially critical."
msgstr ""

#: src/control-flow-basics/macros.md:38
msgid ""
"The course does not cover defining macros, but a later section will describe "
"use of derive macros."
msgstr ""

#: src/control-flow-basics/exercise.md:1
#, fuzzy
msgid "Exercise: Collatz Sequence"
msgstr "연습문제"

#: src/control-flow-basics/exercise.md:3
msgid ""
"The [Collatz Sequence](https://en.wikipedia.org/wiki/Collatz_conjecture) is "
"defined as follows, for an arbitrary n"
msgstr ""

#: src/control-flow-basics/exercise.md:4
msgid " greater than zero:"
msgstr ""

#: src/control-flow-basics/exercise.md:6 src/control-flow-basics/exercise.md:7
#: src/control-flow-basics/exercise.md:8
msgid "If _n"
msgstr ""

#: src/control-flow-basics/exercise.md:6 src/control-flow-basics/exercise.md:7
#: src/control-flow-basics/exercise.md:8
msgid "i"
msgstr ""

#: src/control-flow-basics/exercise.md:6
msgid "_ is 1, then the sequence terminates at _n"
msgstr ""

#: src/control-flow-basics/exercise.md:6
msgid "_."
msgstr ""

#: src/control-flow-basics/exercise.md:7
msgid "_ is even, then _n"
msgstr ""

#: src/control-flow-basics/exercise.md:7 src/control-flow-basics/exercise.md:8
msgid "i+1"
msgstr ""

#: src/control-flow-basics/exercise.md:7
msgid " = n"
msgstr ""

#: src/control-flow-basics/exercise.md:7
msgid " / 2_."
msgstr ""

#: src/control-flow-basics/exercise.md:8
msgid "_ is odd, then _n"
msgstr ""

#: src/control-flow-basics/exercise.md:8
msgid " = 3 * n"
msgstr ""

#: src/control-flow-basics/exercise.md:8
msgid " + 1_."
msgstr ""

#: src/control-flow-basics/exercise.md:10
msgid "For example, beginning with _n"
msgstr ""

#: src/control-flow-basics/exercise.md:10
msgid "_ = 3:"
msgstr ""

#: src/control-flow-basics/exercise.md:11
msgid "3 is odd, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:11
msgid "_ = 3 * 3 + 1 = 10;"
msgstr ""

#: src/control-flow-basics/exercise.md:12
msgid "10 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:12
msgid "_ = 10 / 2 = 5;"
msgstr ""

#: src/control-flow-basics/exercise.md:13
msgid "5 is odd, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:13
msgid "_ = 3 * 15 + 1 = 16;"
msgstr ""

#: src/control-flow-basics/exercise.md:14
msgid "16 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:14
msgid "5"
msgstr ""

#: src/control-flow-basics/exercise.md:14
msgid "_ = 16 / 2  = 8;"
msgstr ""

#: src/control-flow-basics/exercise.md:15
msgid "8 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:15
msgid "_ = 8 / 2  = 4;"
msgstr ""

#: src/control-flow-basics/exercise.md:16
msgid "4 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:16
msgid "7"
msgstr ""

#: src/control-flow-basics/exercise.md:16
msgid "_ = 4 / 2  = 2;"
msgstr ""

#: src/control-flow-basics/exercise.md:17
msgid "2 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:17
msgid "_ = 1; and"
msgstr ""

#: src/control-flow-basics/exercise.md:18
msgid "the sequence terminates."
msgstr ""

#: src/control-flow-basics/exercise.md:20
msgid ""
"Write a function to calculate the length of the collatz sequence for a given "
"initial `n`."
msgstr ""

#: src/control-flow-basics/exercise.md:24 src/control-flow-basics/solution.md:4
msgid "/// Determine the length of the collatz sequence beginning at `n`.\n"
msgstr ""

#: src/control-flow-basics/solution.md:20 src/concurrency/scoped-threads.md:11
#: src/concurrency/scoped-threads.md:30
msgid "\"Length: {}\""
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:3
msgid ""
"Tuples and arrays are the first \"compound\" types we have seen. All "
"elements of an array have the same type, while tuples can accommodate "
"different types. Both types have a size fixed at compile time."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:45
msgid ""
"Try accessing an out-of-bounds array element. Array accesses are checked at "
"runtime. Rust can usually optimize these checks away, and they can be "
"avoided using unsafe Rust."
msgstr ""

#: src/tuples-and-arrays/iteration.md:3
msgid "The `for` statement supports iterating over arrays (but not tuples)."
msgstr ""

#: src/tuples-and-arrays/iteration.md:18
msgid ""
"This functionality uses the `IntoIterator` trait, but we haven't covered "
"that yet."
msgstr ""

#: src/tuples-and-arrays/iteration.md:20
msgid ""
"The `assert_ne!` macro is new here. There are also `assert_eq!` and `assert!"
"` macros. These are always checked while, debug-only variants like "
"`debug_assert!` compile to nothing in release builds."
msgstr ""

#: src/tuples-and-arrays/match.md:10
msgid "'x'"
msgstr ""

#: src/tuples-and-arrays/match.md:12
msgid "'q'"
msgstr ""

#: src/tuples-and-arrays/match.md:12
#, fuzzy
msgid "\"Quitting\""
msgstr "String"

#: src/tuples-and-arrays/match.md:13 src/std-traits/solution.md:16
#: src/error-handling/exercise.md:64 src/error-handling/exercise.md:66
#: src/error-handling/solution.md:63 src/error-handling/solution.md:65
msgid "'a'"
msgstr ""

#: src/tuples-and-arrays/match.md:13
msgid "'s'"
msgstr ""

#: src/tuples-and-arrays/match.md:13
msgid "'w'"
msgstr ""

#: src/tuples-and-arrays/match.md:13
msgid "'d'"
msgstr ""

#: src/tuples-and-arrays/match.md:13
msgid "\"Moving around\""
msgstr ""

#: src/tuples-and-arrays/match.md:14 src/error-handling/exercise.md:56
#: src/error-handling/exercise.md:58 src/error-handling/exercise.md:66
#: src/error-handling/solution.md:55 src/error-handling/solution.md:57
#: src/error-handling/solution.md:65
msgid "'0'"
msgstr ""

#: src/tuples-and-arrays/match.md:14 src/error-handling/exercise.md:56
#: src/error-handling/exercise.md:58 src/error-handling/exercise.md:66
#: src/error-handling/solution.md:55 src/error-handling/solution.md:57
#: src/error-handling/solution.md:65
msgid "'9'"
msgstr ""

#: src/tuples-and-arrays/match.md:14
msgid "\"Number input\""
msgstr ""

#: src/tuples-and-arrays/match.md:15
msgid "\"Lowercase: {key}\""
msgstr ""

#: src/tuples-and-arrays/match.md:16
msgid "\"Something else\""
msgstr ""

#: src/tuples-and-arrays/match.md:21
msgid ""
"The `_` pattern is a wildcard pattern which matches any value. The "
"expressions _must_ be irrefutable, meaning that it covers every possibility, "
"so `_` is often used as the final catch-all case."
msgstr ""

#: src/tuples-and-arrays/match.md:28
msgid ""
"A variable in the pattern (`key` in this example) will create a binding that "
"can be used within the match arm."
msgstr ""

#: src/tuples-and-arrays/match.md:31
msgid "A match guard causes the arm to match only if the condition is true."
msgstr ""

#: src/tuples-and-arrays/destructuring.md:3
msgid ""
"Destructuring is a way of extracting data from a data structure by writing a "
"pattern that is matched up to the data structure, binding variables to "
"subcomponents of the data structure."
msgstr ""

#: src/tuples-and-arrays/destructuring.md:18
msgid "\"on Y axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:19
msgid "\"on X axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:20
msgid "\"left of Y axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:21
msgid "\"below X axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:22
msgid "\"first quadrant\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:33
msgid "\"Tell me about {triple:?}\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:35
msgid "\"First is 0, y = {y}, and z = {z}\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:36
msgid "\"First is 1 and the rest were ignored\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:37
msgid "\"All elements were ignored\""
msgstr ""

#: src/tuples-and-arrays/exercise.md:3
msgid "Arrays can contain other arrays:"
msgstr ""

#: src/tuples-and-arrays/exercise.md:27 src/methods-and-traits/exercise.md:20
#: src/borrowing/exercise.md:14 src/unsafe-rust/exercise.md:49
msgid "// TODO: remove this when you're done with your implementation.\n"
msgstr ""

#: src/tuples-and-arrays/exercise.md:36 src/tuples-and-arrays/solution.md:34
msgid "// <-- the comment makes rustfmt add a newline\n"
msgstr ""

#: src/tuples-and-arrays/exercise.md:41 src/tuples-and-arrays/solution.md:39
msgid "\"matrix: {:#?}\""
msgstr ""

#: src/tuples-and-arrays/exercise.md:43 src/tuples-and-arrays/solution.md:41
msgid "\"transposed: {:#?}\""
msgstr ""

#: src/tuples-and-arrays/solution.md:17 src/tuples-and-arrays/solution.md:25
msgid "//\n"
msgstr ""

#: src/references/shared.md:3
msgid ""
"A reference provides a way to access another value without taking "
"responsibility for the value, and is also called \"borrowing\". Shared "
"references are read-only, and the referenced data cannot change."
msgstr ""

#: src/references/shared.md:19
msgid ""
"A shared reference to a type `T` has type `&T`. A reference value is made "
"with the `&` operator. The `*` operator \"dereferences\" a reference, "
"yielding its value."
msgstr ""

#: src/references/shared.md:34
msgid ""
"A reference is said to \"borrow\" the value it refers to, and this is a good "
"model for students not familiar with pointers: code can use the reference to "
"access the value, but is still \"owned\" by the original variable. The "
"course will get into more detail on ownership in day 3."
msgstr ""

#: src/references/shared.md:39
msgid ""
"References are implemented as pointers, and a key advantage is that they can "
"be much smaller than the thing they point to. Students familiar with C or C+"
"+ will recognize references as pointers. Later parts of the course will "
"cover how Rust prevents the memory-safety bugs that come from using raw "
"pointers."
msgstr ""

#: src/references/shared.md:44
msgid ""
"Rust does not automatically create references for you - the `&` is always "
"required."
msgstr ""

#: src/references/shared.md:51
msgid ""
"In this example, `r` is mutable so that it can be reassigned (`r = &b`). "
"Note that this re-binds `r`, so that it refers to something else. This is "
"different from C++, where assignment to a reference changes the referenced "
"value."
msgstr ""

#: src/references/shared.md:56
msgid ""
"A shared reference does not allow modifying the value it refers to, even if "
"that value was mutable. Try `*r = 'X'`."
msgstr ""

#: src/references/shared.md:59
msgid ""
"Rust is tracking the lifetimes of all references to ensure they live long "
"enough. Dangling references cannot occur in safe Rust. `x_axis` would return "
"a reference to `point`, but `point` will be deallocated when the function "
"returns, so this will not compile."
msgstr ""

#: src/references/exclusive.md:3
msgid ""
"Exclusive references, also known as mutable references, allow changing the "
"value they refer to. They have type `&mut T`."
msgstr ""

#: src/references/exclusive.md:20
msgid ""
"\"Exclusive\" means that only this reference can be used to access the "
"value. No other references (shared or exclusive) can exist at the same time, "
"and the referenced value cannot be accessed while the exclusive reference "
"exists. Try making an `&point.0` or changing `point.0` while `x_coord` is "
"alive."
msgstr ""

#: src/references/exercise.md:3
msgid ""
"We will create a few utility functions for 3-dimensional geometry, "
"representing a point as `[f64;3]`. It is up to you to determine the function "
"signatures."
msgstr ""

#: src/references/exercise.md:7
msgid ""
"// Calculate the magnitude of a vector by summing the squares of its "
"coordinates\n"
"// and taking the square root. Use the `sqrt()` method to calculate the "
"square\n"
"// root, like `v.sqrt()`.\n"
msgstr ""

#: src/references/exercise.md:15
msgid ""
"// Normalize a vector by calculating its magnitude and dividing all of its\n"
"// coordinates by that magnitude.\n"
msgstr ""

#: src/references/exercise.md:23
msgid "// Use the following `main` to test your work.\n"
msgstr ""

#: src/references/exercise.md:28 src/references/solution.md:23
msgid "\"Magnitude of a unit vector: {}\""
msgstr ""

#: src/references/exercise.md:33 src/references/solution.md:28
msgid "\"Magnitude of {v:?}: {}\""
msgstr ""

#: src/references/exercise.md:35 src/references/solution.md:30
msgid "\"Magnitude of {v:?} after normalization: {}\""
msgstr ""

#: src/references/solution.md:4
msgid "/// Calculate the magnitude of the given vector.\n"
msgstr ""

#: src/references/solution.md:12
msgid ""
"/// Change the magnitude of the vector to 1.0 without changing its "
"direction.\n"
msgstr ""

#: src/user-defined-types/named-structs.md:12
msgid "\"{} is {} years old\""
msgstr ""

#: src/user-defined-types/named-structs.md:17
#: src/android/interoperability/with-c/bindgen.md:87
msgid "\"Peter\""
msgstr ""

#: src/user-defined-types/named-structs.md:25
msgid "\"Avery\""
msgstr ""

#: src/user-defined-types/named-structs.md:31
msgid "\"Jackie\""
msgstr ""

#: src/user-defined-types/tuple-structs.md:13
msgid "\"({}, {})\""
msgstr ""

#: src/user-defined-types/tuple-structs.md:24
msgid "\"Ask a rocket scientist at NASA\""
msgstr ""

#: src/user-defined-types/tuple-structs.md:28
#: src/android/interoperability/cpp/cpp-bridge.md:50
#: src/bare-metal/microcontrollers/type-state.md:14
#: src/async/pitfalls/cancellation.md:96 src/async/pitfalls/cancellation.md:99
msgid "// ...\n"
msgstr ""

#: src/user-defined-types/enums.md:15
msgid "// Simple variant\n"
msgstr ""

#: src/user-defined-types/enums.md:16
msgid "// Tuple variant\n"
msgstr ""

#: src/user-defined-types/enums.md:17
msgid "// Struct variant\n"
msgstr ""

#: src/user-defined-types/enums.md:22
msgid "\"On this turn: {:?}\""
msgstr ""

#: src/user-defined-types/enums.md:31
msgid ""
"Direction has two variants, `Left` and `Right`. These are referred to with "
"the `Direction::..` namespace."
msgstr ""

#: src/user-defined-types/enums.md:32
msgid ""
"PlayerMove shows the three types of variants. Rust will also store a "
"discriminant so that it can determine at runtime which variant is in a value."
msgstr ""

#: src/user-defined-types/enums.md:36
msgid "Rust uses minimal space to store the discriminant."
msgstr ""

#: src/user-defined-types/enums.md:37
msgid "If necessary, it stores an integer of the smallest required size"
msgstr ""

#: src/user-defined-types/enums.md:38
msgid ""
"If the allowed variant values do not cover all bit patterns, it will use "
"invalid bit patterns to encode the discriminant (the \"niche "
"optimization\"). For example, `Option<&u8>` stores either a pointer to an "
"integer or `NULL` for the `None` variant."
msgstr ""

#: src/user-defined-types/enums.md:63
#: src/user-defined-types/static-and-const.md:67
#: src/memory-management/review.md:47 src/memory-management/move.md:91
#: src/smart-pointers/box.md:72 src/borrowing/shared.md:31
msgid "More to Explore"
msgstr ""

#: src/user-defined-types/enums.md:65
msgid ""
"Rust has several optimizations it can employ to make enums take up less "
"space."
msgstr ""

#: src/user-defined-types/static-and-const.md:42
msgid "\"{BANNER}\""
msgstr ""

#: src/user-defined-types/aliases.md:3
msgid ""
"A type alias creates a name for another type. The two types can be used "
"interchangeably."
msgstr ""

#: src/user-defined-types/aliases.md:12
msgid "// Aliases are more useful with long, complex types:\n"
msgstr ""

#: src/user-defined-types/aliases.md:20
msgid "C programmers will recognize this as similar to a `typedef`."
msgstr ""

#: src/user-defined-types/exercise.md:3
msgid ""
"We will create a data structure to represent an event in an elevator control "
"system. It is up to you to define the types and functions to construct "
"various events. Use `#[derive(Debug)]` to allow the types to be formatted "
"with `{:?}`."
msgstr ""

#: src/user-defined-types/exercise.md:8 src/user-defined-types/solution.md:39
msgid "/// The car has arrived on the given floor.\n"
msgstr ""

#: src/user-defined-types/exercise.md:12 src/user-defined-types/solution.md:44
msgid "/// The car doors have opened.\n"
msgstr ""

#: src/user-defined-types/exercise.md:17 src/user-defined-types/solution.md:49
msgid "/// The car doors have closed.\n"
msgstr ""

#: src/user-defined-types/exercise.md:22 src/user-defined-types/solution.md:54
msgid ""
"/// A directional button was pressed in an elevator lobby on the given "
"floor.\n"
msgstr ""

#: src/user-defined-types/exercise.md:27 src/user-defined-types/solution.md:59
msgid "/// A floor button was pressed in the elevator car.\n"
msgstr ""

#: src/user-defined-types/exercise.md:35 src/user-defined-types/solution.md:67
msgid "\"A ground floor passenger has pressed the up button: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:39 src/user-defined-types/solution.md:71
msgid "\"The car has arrived on the ground floor: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:42 src/user-defined-types/solution.md:74
msgid "\"The car door opened: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:44 src/user-defined-types/solution.md:76
msgid "\"A passenger has pressed the 3rd floor button: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:47 src/user-defined-types/solution.md:79
msgid "\"The car door closed: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:48 src/user-defined-types/solution.md:80
msgid "\"The car has arrived on the 3rd floor: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:52
msgid ""
"This exercise only requires creating data structures. The next part of the "
"course will cover getting data out of these structures."
msgstr ""

#: src/user-defined-types/solution.md:4
msgid ""
"/// An event in the elevator system that the controller must react to.\n"
msgstr ""

#: src/user-defined-types/solution.md:7
msgid "/// A button was pressed.\n"
msgstr ""

#: src/user-defined-types/solution.md:10
msgid "/// The car has arrived at the given floor.\n"
msgstr ""

#: src/user-defined-types/solution.md:13
msgid "/// The car's doors have opened.\n"
msgstr ""

#: src/user-defined-types/solution.md:16
msgid "/// The car's doors have closed.\n"
msgstr ""

#: src/user-defined-types/solution.md:19
msgid "/// A floor is represented as an integer.\n"
msgstr ""

#: src/user-defined-types/solution.md:22
msgid "/// A direction of travel.\n"
msgstr ""

#: src/user-defined-types/solution.md:29
msgid "/// A user-accessible button.\n"
msgstr ""

#: src/user-defined-types/solution.md:33
msgid "/// A button in the elevator lobby on the given floor.\n"
msgstr ""

#: src/user-defined-types/solution.md:36
msgid "/// A floor button within the car.\n"
msgstr ""

#: src/welcome-day-2.md:7
msgid "Methods: associating functions with types."
msgstr ""

#: src/welcome-day-2.md:8
msgid "Traits: behaviors shared by multiple types."
msgstr ""

#: src/welcome-day-2.md:9
msgid "Generics: parameterizing types on other types."
msgstr ""

#: src/welcome-day-2.md:10
msgid ""
"Standard library types and traits: a tour of Rust's rich standard library."
msgstr ""

#: src/pattern-matching/destructuring.md:3
msgid "Like tuples, structs and enums can also be destructured by matching:"
msgstr ""

#: src/pattern-matching/destructuring.md:17
msgid "\"x.0 = 1, b = {b}, y = {y}\""
msgstr ""

#: src/pattern-matching/destructuring.md:18
msgid "\"y = 2, x = {i:?}\""
msgstr ""

#: src/pattern-matching/destructuring.md:19
msgid "\"y = {y}, other fields were ignored\""
msgstr ""

#: src/pattern-matching/destructuring.md:38
msgid "\"cannot divide {n} into two equal parts\""
msgstr ""

#: src/pattern-matching/destructuring.md:45
msgid "\"{n} divided in two is {half}\""
msgstr ""

#: src/pattern-matching/destructuring.md:46
msgid "\"sorry, an error happened: {msg}\""
msgstr ""

#: src/pattern-matching/let-control-flow.md:3
msgid ""
"Rust has a few control flow constructs which differ from other languages. "
"They are used for pattern matching:"
msgstr ""

#: src/pattern-matching/let-control-flow.md:23
msgid "\"slept for {:?}\""
msgstr ""

#: src/pattern-matching/let-control-flow.md:32
msgid ""
"For the common case of matching a pattern and returning from the function, "
"use [`let else`](https://doc.rust-lang.org/rust-by-example/flow_control/"
"let_else.html). The \"else\" case must diverge (`return`, `break`, or panic "
"- anything but falling off the end of the block)."
msgstr ""

#: src/pattern-matching/let-control-flow.md:43
#: src/pattern-matching/let-control-flow.md:100
msgid "\"got None\""
msgstr ""

#: src/pattern-matching/let-control-flow.md:49
#: src/pattern-matching/let-control-flow.md:104
#, fuzzy
msgid "\"got empty string\""
msgstr "String"

#: src/pattern-matching/let-control-flow.md:55
#: src/pattern-matching/let-control-flow.md:108
msgid "\"not a hex digit\""
msgstr ""

#: src/pattern-matching/let-control-flow.md:60
#: src/pattern-matching/solution.md:128
msgid "\"result: {:?}\""
msgstr ""

#: src/pattern-matching/let-control-flow.md:60
#: src/methods-and-traits/exercise.md:121
#: src/methods-and-traits/exercise.md:122
#: src/methods-and-traits/exercise.md:123 src/generics/trait-bounds.md:16
#: src/smart-pointers/solution.md:66 src/smart-pointers/solution.md:69
#: src/testing/googletest.md:11 src/testing/googletest.md:12
#: src/testing/solution.md:89
msgid "\"foo\""
msgstr ""

#: src/pattern-matching/let-control-flow.md:85
#, fuzzy
msgid "if-let"
msgstr "`while let` 반복문"

#: src/pattern-matching/let-control-flow.md:91
msgid "let-else"
msgstr ""

#: src/pattern-matching/let-control-flow.md:93
msgid ""
"`if-let`s can pile up, as shown.  The `let-else` construct supports "
"flattening this nested code. Rewrite the awkward version for students, so "
"they can see the transformation."
msgstr ""

#: src/pattern-matching/let-control-flow.md:96
msgid "The rewritten version is:"
msgstr ""

#: src/pattern-matching/exercise.md:3
msgid ""
"Let's write a simple recursive evaluator for arithmetic expressions. Start "
"with an enum defining the binary operations:"
msgstr ""

#: src/pattern-matching/exercise.md:7 src/pattern-matching/solution.md:4
msgid "/// An operation to perform on two subexpressions.\n"
msgstr ""

#: src/pattern-matching/exercise.md:15 src/pattern-matching/solution.md:12
msgid "/// An expression, in tree form.\n"
msgstr ""

#: src/pattern-matching/exercise.md:19 src/pattern-matching/solution.md:16
msgid "/// An operation on two subexpressions.\n"
msgstr ""

#: src/pattern-matching/exercise.md:26 src/pattern-matching/solution.md:23
msgid "/// A literal value\n"
msgstr ""

#: src/pattern-matching/exercise.md:29 src/pattern-matching/solution.md:26
msgid "/// The result of evaluating an expression.\n"
msgstr ""

#: src/pattern-matching/exercise.md:33 src/pattern-matching/solution.md:30
msgid "/// Evaluation was successful, with the given result.\n"
msgstr ""

#: src/pattern-matching/exercise.md:35 src/pattern-matching/solution.md:32
msgid "/// Evaluation failed, with the given error message.\n"
msgstr ""

#: src/pattern-matching/exercise.md:37 src/pattern-matching/solution.md:34
msgid "// Allow `Ok` and `Err` as shorthands for `Res::Ok` and `Res::Err`.\n"
msgstr ""

#: src/pattern-matching/exercise.md:96 src/pattern-matching/solution.md:55
#: src/pattern-matching/solution.md:117
msgid "\"division by zero\""
msgstr ""

#: src/pattern-matching/exercise.md:101
msgid ""
"The `Box` type here is a smart pointer, and will be covered in detail later "
"in the course. An expression can be \"boxed\" with `Box::new` as seen in the "
"tests. To evaluate a boxed expression, use the deref operator to \"unbox\" "
"it: `eval(*boxed_expr)`."
msgstr ""

#: src/pattern-matching/exercise.md:106
msgid ""
"Some expressions cannot be evaluated and will return an error. The `Res` "
"type represents either a successful value or an error with a message. This "
"is very similar to the standard-library `Result` which we will see later."
msgstr ""

#: src/pattern-matching/exercise.md:110
msgid ""
"Copy and paste the code into the Rust playground, and begin implementing "
"`eval`. The final product should pass the tests. It may be helpful to use "
"`todo!()` and get the tests to pass one-by-one. You can also skip a test "
"temporarily with `#[ignore]`:"
msgstr ""

#: src/pattern-matching/exercise.md:122
msgid ""
"If you finish early, try writing a test that results in an integer overflow. "
"How could you handle this with `Res::Err` instead of a panic?"
msgstr ""

#: src/pattern-matching/solution.md:127
msgid "\"expr: {:?}\""
msgstr ""

#: src/methods-and-traits/methods.md:14
msgid "// No receiver, a static method\n"
msgstr ""

#: src/methods-and-traits/methods.md:18
msgid "// Exclusive borrowed read-write access to self\n"
msgstr ""

#: src/methods-and-traits/methods.md:22
msgid "// Shared and read-only borrowed access to self\n"
msgstr ""

#: src/methods-and-traits/methods.md:23
msgid "\"Recorded {} laps for {}:\""
msgstr ""

#: src/methods-and-traits/methods.md:25
msgid "\"Lap {idx}: {lap} sec\""
msgstr ""

#: src/methods-and-traits/methods.md:29
msgid "// Exclusive ownership of self\n"
msgstr ""

#: src/methods-and-traits/methods.md:31
msgid "\"Race {} is finished, total lap time: {}\""
msgstr ""

#: src/methods-and-traits/methods.md:36
msgid "\"Monaco Grand Prix\""
msgstr ""

#: src/methods-and-traits/methods.md:43
msgid "// race.add_lap(42);\n"
msgstr ""

#: src/methods-and-traits/methods.md:74
msgid ""
"Note that references have not been covered yet. References in method "
"receivers are a particularly \"natural\" form of reference, so there is no "
"need to go into a great level of detail."
msgstr ""

#: src/methods-and-traits/traits.md:7 src/methods-and-traits/trait-objects.md:7
msgid "// No name needed, cats won't respond anyway.\n"
msgstr ""

#: src/methods-and-traits/traits.md:13
msgid "\"Oh you're a cutie! What's your name? {}\""
msgstr ""

#: src/methods-and-traits/traits.md:18
#: src/methods-and-traits/trait-objects.md:14
msgid "\"Woof, my name is {}!\""
msgstr ""

#: src/methods-and-traits/traits.md:22
#: src/methods-and-traits/trait-objects.md:18
msgid "\"Miau!\""
msgstr ""

#: src/methods-and-traits/traits.md:27
#: src/methods-and-traits/trait-objects.md:24
msgid "\"Fido\""
msgstr ""

#: src/methods-and-traits/traits.md:36
msgid ""
"A trait defines a number of methods that types must have in order to "
"implement the trait."
msgstr ""

#: src/methods-and-traits/traits.md:39
msgid "Traits are implemented in an `impl <trait> for <type> { .. }` block."
msgstr ""

#: src/methods-and-traits/deriving.md:3
msgid ""
"Supported traits can be automatically implemented for your custom types, as "
"follows:"
msgstr ""

#: src/methods-and-traits/deriving.md:15
msgid "// Default trait adds `default` constructor.\n"
msgstr ""

#: src/methods-and-traits/deriving.md:16
msgid "// Clone trait adds `clone` method.\n"
msgstr ""

#: src/methods-and-traits/deriving.md:17
msgid "\"EldurScrollz\""
msgstr ""

#: src/methods-and-traits/deriving.md:18
msgid "// Debug trait adds support for printing with `{:?}`.\n"
msgstr ""

#: src/methods-and-traits/deriving.md:19
msgid "\"{:?} vs. {:?}\""
msgstr ""

#: src/methods-and-traits/deriving.md:25
msgid ""
"Derivation is implemented with macros, and many crates provide useful derive "
"macros to add useful functionality. For example, `serde` can derive "
"serialization support for a struct using `#[derive(Serialize)]`."
msgstr ""

#: src/methods-and-traits/trait-objects.md:27
#, fuzzy
msgid "\"Hello, who are you? {}\""
msgstr "Hello World!"

#: src/methods-and-traits/trait-objects.md:72
msgid ""
"In the example, `pets` is allocated on the stack and the vector data is on "
"the heap. The two vector elements are _fat pointers_:"
msgstr ""

#: src/methods-and-traits/trait-objects.md:77
msgid ""
"The data for the `Dog` named Fido is the `name` and `age` fields. The `Cat` "
"has a `lives` field."
msgstr ""

#: src/methods-and-traits/trait-objects.md:81
#: src/methods-and-traits/trait-objects.md:82 src/std-traits/closures.md:54
msgid "\"{} {}\""
msgstr ""

#: src/methods-and-traits/trait-objects.md:83
#: src/methods-and-traits/trait-objects.md:84
#: src/methods-and-traits/solution.md:123 src/std-traits/exercise.md:25
#: src/std-traits/solution.md:31 src/modules/solution.md:70
#: src/android/build-rules/library.md:43
#: src/android/interoperability/cpp/rust-bridge.md:17
#: src/async/pitfalls/cancellation.md:59
msgid "\"{}\""
msgstr ""

#: src/methods-and-traits/exercise.md:9
msgid ""
"`Button`: has a `label`. In reality, it would also take a callback function "
"to allow the program to do something when the button is clicked but we won't "
"include that since we're only drawing the GUI."
msgstr ""

#: src/methods-and-traits/exercise.md:24 src/methods-and-traits/solution.md:5
#: src/modules/solution.md:22
msgid "/// Natural width of `self`.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:27 src/methods-and-traits/solution.md:8
#: src/modules/solution.md:25
msgid "/// Draw the widget into a buffer.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:30 src/methods-and-traits/solution.md:11
#: src/modules/solution.md:28
msgid "/// Draw the widget on standard output.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:34 src/methods-and-traits/solution.md:15
#: src/modules/solution.md:32
msgid "\"{buffer}\""
msgstr ""

#: src/methods-and-traits/exercise.md:86
msgid "// TODO: Implement `Widget` for `Label`.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:88
msgid "// TODO: Implement `Widget` for `Button`.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:90
msgid "// TODO: Implement `Widget` for `Window`.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:94 src/methods-and-traits/solution.md:128
#: src/modules/solution.md:178
msgid "\"Rust GUI Demo 1.23\""
msgstr ""

#: src/methods-and-traits/exercise.md:95 src/methods-and-traits/solution.md:129
#: src/modules/solution.md:180
msgid "\"This is a small text GUI demo.\""
msgstr ""

#: src/methods-and-traits/exercise.md:96 src/methods-and-traits/solution.md:130
#: src/modules/solution.md:182
msgid "\"Click me!\""
msgstr ""

#: src/methods-and-traits/exercise.md:121
msgid "\"left aligned:  |{:/<width$}|\""
msgstr ""

#: src/methods-and-traits/exercise.md:122
msgid "\"centered:      |{:/^width$}|\""
msgstr ""

#: src/methods-and-traits/exercise.md:123
msgid "\"right aligned: |{:/>width$}|\""
msgstr ""

#: src/methods-and-traits/solution.md:70
msgid "// Add 4 paddings for borders\n"
msgstr ""

#: src/methods-and-traits/solution.md:82 src/modules/solution.md:159
msgid ""
"// TODO: after learning about error handling, you can change\n"
"        // draw_into to return Result<(), std::fmt::Error>. Then use\n"
"        // the ?-operator here instead of .unwrap().\n"
msgstr ""

#: src/methods-and-traits/solution.md:85 src/methods-and-traits/solution.md:91
#: src/modules/solution.md:162 src/modules/solution.md:168
msgid "\"+-{:-<inner_width$}-+\""
msgstr ""

#: src/methods-and-traits/solution.md:85 src/methods-and-traits/solution.md:87
#: src/methods-and-traits/solution.md:91 src/methods-and-traits/solution.md:105
#: src/methods-and-traits/solution.md:109 src/modules/solution.md:104
#: src/modules/solution.md:108 src/modules/solution.md:162
#: src/modules/solution.md:164 src/modules/solution.md:168
#: src/testing/unit-tests.md:27 src/testing/solution.md:95
msgid "\"\""
msgstr ""

#: src/methods-and-traits/solution.md:86 src/modules/solution.md:163
msgid "\"| {:^inner_width$} |\""
msgstr ""

#: src/methods-and-traits/solution.md:87 src/modules/solution.md:164
msgid "\"+={:=<inner_width$}=+\""
msgstr ""

#: src/methods-and-traits/solution.md:89 src/modules/solution.md:166
msgid "\"| {:inner_width$} |\""
msgstr ""

#: src/methods-and-traits/solution.md:97 src/modules/solution.md:94
msgid "// add a bit of padding\n"
msgstr ""

#: src/methods-and-traits/solution.md:105
#: src/methods-and-traits/solution.md:109 src/modules/solution.md:104
#: src/modules/solution.md:108
msgid "\"+{:-<width$}+\""
msgstr ""

#: src/methods-and-traits/solution.md:107 src/modules/solution.md:106
msgid "\"|{:^width$}|\""
msgstr ""

#: src/generics/generic-functions.md:8
msgid "/// Pick `even` or `odd` depending on the value of `n`.\n"
msgstr ""

#: src/generics/generic-functions.md:18
msgid "\"picked a number: {:?}\""
msgstr ""

#: src/generics/generic-functions.md:19
msgid "\"picked a tuple: {:?}\""
msgstr ""

#: src/generics/generic-functions.md:19
msgid "\"dog\""
msgstr ""

#: src/generics/generic-functions.md:19
msgid "\"cat\""
msgstr ""

#: src/generics/generic-functions.md:25
msgid ""
"Rust infers a type for T based on the types of the arguments and return "
"value."
msgstr ""

#: src/generics/generic-functions.md:27
msgid ""
"This is similar to C++ templates, but Rust partially compiles the generic "
"function immediately, so that function must be valid for all types matching "
"the constraints. For example, try modifying `pick` to return `even + odd` if "
"`n == 0`. Even if only the `pick` instantiation with integers is used, Rust "
"still considers it invalid. C++ would let you do this."
msgstr ""

#: src/generics/generic-data.md:17
msgid "// fn set_x(&mut self, x: T)\n"
msgstr ""

#: src/generics/generic-data.md:23
msgid "\"{integer:?} and {float:?}\""
msgstr ""

#: src/generics/generic-data.md:24
msgid "\"coords: {:?}\""
msgstr ""

#: src/generics/generic-data.md:36
msgid ""
"Try declaring a new variable `let p = Point { x: 5, y: 10.0 };`. Update the "
"code to allow points that have elements of different types, by using two "
"type variables, e.g., `T` and `U`."
msgstr ""

#: src/generics/trait-bounds.md:12
msgid "// struct NotClonable;\n"
msgstr ""

#: src/generics/trait-bounds.md:18
msgid "\"{pair:?}\""
msgstr ""

#: src/generics/trait-bounds.md:24
msgid "Try making a `NonClonable` and passing it to `duplicate`."
msgstr ""

#: src/generics/trait-bounds.md:26
msgid "When multiple traits are necessary, use `+` to join them."
msgstr ""

#: src/generics/trait-bounds.md:43
msgid ""
"Note that Rust does not (yet) support specialization. For example, given the "
"original `duplicate`, it is invalid to add a specialized `duplicate(a: u32)`."
msgstr ""

#: src/generics/impl-trait.md:7
msgid ""
"// Syntactic sugar for:\n"
"//   fn add_42_millions<T: Into<i32>>(x: T) -> i32 {\n"
msgstr ""

#: src/generics/impl-trait.md:19
msgid "\"{many}\""
msgstr ""

#: src/generics/impl-trait.md:21
msgid "\"{many_more}\""
msgstr ""

#: src/generics/impl-trait.md:23
msgid "\"debuggable: {debuggable:?}\""
msgstr ""

#: src/generics/impl-trait.md:44
msgid ""
"What is the type of `debuggable`? Try `let debuggable: () = ..` to see what "
"the error message shows."
msgstr ""

#: src/generics/exercise.md:3
msgid ""
"In this short exercise, you will implement a generic `min` function that "
"determines the minimum of two values, using a `LessThan` trait."
msgstr ""

#: src/generics/exercise.md:8 src/generics/solution.md:5
msgid "/// Return true if self is less than other.\n"
msgstr ""

#: src/generics/exercise.md:29
msgid "// TODO: implement the `min` function used in `main`.\n"
msgstr ""

#: src/generics/exercise.md:34 src/generics/solution.md:37
msgid "\"Shapiro\""
msgstr ""

#: src/generics/exercise.md:38 src/generics/exercise.md:42
#: src/generics/solution.md:41 src/generics/solution.md:45
msgid "\"Baumann\""
msgstr ""

#: src/std-types.md:7
msgid ""
"For each of the slides in this section, spend some time reviewing the "
"documentation pages, highlighting some of the more common methods."
msgstr ""

#: src/std-types/docs.md:3
msgid ""
"Rust comes with extensive documentation of the language and the standard "
"library."
msgstr ""

#: src/std-types/docs.md:7
msgid ""
"Primitive types like [`u8`](https://doc.rust-lang.org/stable/std/primitive."
"u8.html)."
msgstr ""

#: src/std-types/docs.md:10
msgid "In fact, you can document your own code:"
msgstr ""

#: src/std-types/docs.md:13
msgid ""
"/// Determine whether the first argument is divisible by the second "
"argument.\n"
"///\n"
"/// If the second argument is zero, the result is false.\n"
msgstr ""

#: src/std-types/docs.md:29
msgid ""
"To document an item from inside the item (such as inside a module), use `//!"
"` or `/*! .. */`, called \"inner doc comments\":"
msgstr ""

#: src/std-types/docs.md:33
msgid ""
"//! This module contains functionality relating to divisibility of "
"integers.\n"
msgstr ""

#: src/std-types/option.md:3
msgid ""
"We have already seen some use of `Option<T>`. It stores either a value of "
"type `T` or nothing. For example, [`String::find`](https://doc.rust-lang.org/"
"stable/std/string/struct.String.html#method.find) returns an `Option<usize>`."
msgstr ""

#: src/std-types/option.md:10
msgid "\"Löwe 老虎 Léopard Gepardi\""
msgstr ""

#: src/std-types/option.md:11
msgid "'é'"
msgstr ""

#: src/std-types/option.md:12 src/std-types/option.md:15
msgid "\"find returned {position:?}\""
msgstr ""

#: src/std-types/option.md:14
msgid "'Z'"
msgstr ""

#: src/std-types/option.md:16
msgid "\"Character not found\""
msgstr ""

#: src/std-types/option.md:23
msgid ""
"`unwrap` will return the value in an `Option`, or panic. `expect` is similar "
"but takes an error message."
msgstr ""

#: src/std-types/option.md:24
msgid ""
"You can panic on None, but you can't \"accidentally\" forget to check for "
"None."
msgstr ""

#: src/std-types/option.md:25
msgid ""
"It's common to `unwrap`/`expect` all over the place when hacking something "
"together, but production code typically handles `None` in a nicer fashion."
msgstr ""

#: src/std-types/option.md:26
msgid ""
"The niche optimization means that `Option<T>` often has the same size in "
"memory as `T`."
msgstr ""

#: src/std-types/result.md:1
#, fuzzy
msgid "Result"
msgstr "`Option`, `Result`"

#: src/std-types/result.md:3
msgid ""
"`Result` is similar to `Option`, but indicates the success or failure of an "
"operation, each with a different type. This is similar to the `Res` defined "
"in the expression exercise, but generic: `Result<T, E>` where `T` is used in "
"the `Ok` variant and `E` appears in the `Err` variant."
msgstr ""

#: src/std-types/result.md:13
msgid "\"diary.txt\""
msgstr ""

#: src/std-types/result.md:18
msgid "\"Dear diary: {contents} ({bytes} bytes)\""
msgstr ""

#: src/std-types/result.md:20
msgid "\"Could not read file content\""
msgstr ""

#: src/std-types/result.md:24
msgid "\"The diary could not be opened: {err}\""
msgstr ""

#: src/std-types/string.md:8 src/std-traits/read-and-write.md:35
#: src/memory-management/review.md:23 src/memory-management/review.md:54
#: src/testing/unit-tests.md:32 src/testing/unit-tests.md:37
#: src/concurrency/scoped-threads.md:9 src/concurrency/scoped-threads.md:26
#, fuzzy
msgid "\"Hello\""
msgstr "Hello World!"

#: src/std-types/string.md:9
msgid "\"s1: len = {}, capacity = {}\""
msgstr ""

#: src/std-types/string.md:13
msgid "'!'"
msgstr ""

#: src/std-types/string.md:14
msgid "\"s2: len = {}, capacity = {}\""
msgstr ""

#: src/std-types/string.md:16
msgid "\"🇨🇭\""
msgstr ""

#: src/std-types/string.md:17
msgid "\"s3: len = {}, number of chars = {}\""
msgstr ""

#: src/std-types/string.md:35
msgid ""
"We haven't discussed the `Deref` trait yet, so at this point this mostly "
"explains the structure of the sidebar in the documentation."
msgstr ""

#: src/std-types/vec.md:9
msgid "\"v1: len = {}, capacity = {}\""
msgstr ""

#: src/std-types/vec.md:14
msgid "\"v2: len = {}, capacity = {}\""
msgstr ""

#: src/std-types/vec.md:16
msgid "// Canonical macro to initialize a vector with elements.\n"
msgstr ""

#: src/std-types/vec.md:19
msgid "// Retain only the even elements.\n"
msgstr ""

#: src/std-types/vec.md:21 src/std-types/vec.md:25
msgid "\"{v3:?}\""
msgstr ""

#: src/std-types/vec.md:23
msgid "// Remove consecutive duplicates.\n"
msgstr ""

#: src/std-types/vec.md:46
msgid ""
"Slices are covered on day 3. For now, students only need to know that a "
"value of type `Vec` gives access to all of the documented read-only slice "
"methods, too."
msgstr ""

#: src/std-types/hashmap.md:10
msgid "\"Adventures of Huckleberry Finn\""
msgstr ""

#: src/std-types/hashmap.md:11
msgid "\"Grimms' Fairy Tales\""
msgstr ""

#: src/std-types/hashmap.md:12 src/std-types/hashmap.md:19
#: src/std-types/hashmap.md:27
msgid "\"Pride and Prejudice\""
msgstr ""

#: src/std-types/hashmap.md:14
msgid "\"Les Misérables\""
msgstr ""

#: src/std-types/hashmap.md:15
msgid "\"We know about {} books, but not Les Misérables.\""
msgstr ""

#: src/std-types/hashmap.md:19 src/std-types/hashmap.md:27
msgid "\"Alice's Adventure in Wonderland\""
msgstr ""

#: src/std-types/hashmap.md:21
msgid "\"{book}: {count} pages\""
msgstr ""

#: src/std-types/hashmap.md:22
msgid "\"{book} is unknown.\""
msgstr ""

#: src/std-types/hashmap.md:26
msgid "// Use the .entry() method to insert a value if nothing is found.\n"
msgstr ""

#: src/std-types/hashmap.md:32
msgid "\"{page_counts:#?}\""
msgstr ""

#: src/std-types/hashmap.md:43 src/std-types/hashmap.md:54
msgid "\"Harry Potter and the Sorcerer's Stone\""
msgstr ""

#: src/std-types/hashmap.md:46 src/std-types/hashmap.md:55
msgid "\"The Hunger Games\""
msgstr ""

#: src/std-types/exercise.md:3
msgid ""
"In this exercise you will take a very simple data structure and make it "
"generic. It uses a [`std::collections::HashMap`](https://doc.rust-lang.org/"
"stable/std/collections/struct.HashMap.html) to keep track of which values "
"have been seen and how many times each one has appeared."
msgstr ""

#: src/std-types/exercise.md:9
msgid ""
"The initial version of `Counter` is hard coded to only work for `u32` "
"values. Make the struct and its methods generic over the type of value being "
"tracked, that way `Counter` can track any type of value."
msgstr ""

#: src/std-types/exercise.md:13
msgid ""
"If you finish early, try using the [`entry`](https://doc.rust-lang.org/"
"stable/std/collections/struct.HashMap.html#method.entry) method to halve the "
"number of hash lookups required to implement the `count` method."
msgstr ""

#: src/std-types/exercise.md:20 src/std-types/solution.md:6
msgid ""
"/// Counter counts the number of times each value of type T has been seen.\n"
msgstr ""

#: src/std-types/exercise.md:27 src/std-types/solution.md:13
msgid "/// Create a new Counter.\n"
msgstr ""

#: src/std-types/exercise.md:34 src/std-types/solution.md:20
msgid "/// Count an occurrence of the given value.\n"
msgstr ""

#: src/std-types/exercise.md:43 src/std-types/solution.md:25
msgid "/// Return the number of times the given value has been seen.\n"
msgstr ""

#: src/std-types/exercise.md:59 src/std-types/solution.md:41
msgid "\"saw {} values equal to {}\""
msgstr ""

#: src/std-types/exercise.md:63 src/std-types/exercise.md:65
#: src/std-types/exercise.md:66 src/std-types/solution.md:45
#: src/std-types/solution.md:47 src/std-types/solution.md:48
msgid "\"apple\""
msgstr ""

#: src/std-types/exercise.md:64 src/std-types/solution.md:46
msgid "\"orange\""
msgstr ""

#: src/std-types/exercise.md:66 src/std-types/solution.md:48
msgid "\"got {} apples\""
msgstr ""

#: src/std-traits.md:7
msgid ""
"As with the standard-library types, spend time reviewing the documentation "
"for each trait."
msgstr ""

#: src/std-traits.md:10
msgid "This section is long. Take a break midway through."
msgstr ""

#: src/std-traits/comparisons.md:3
msgid ""
"These traits support comparisons between values. All traits can be derived "
"for types containing fields that implement these traits."
msgstr ""

#: src/std-traits/comparisons.md:6
#, fuzzy
msgid "`PartialEq` and `Eq`"
msgstr "`Read`와 `Write`"

#: src/std-traits/comparisons.md:8
msgid ""
"`PartialEq` is a partial equivalence relation, with required method `eq` and "
"provided method `ne`. The `==` and `!=` operators will call these methods."
msgstr ""

#: src/std-traits/comparisons.md:20
msgid ""
"`Eq` is a full equivalence relation (reflexive, symmetric, and transitive) "
"and implies `PartialEq`.  Functions that require full equivalence will use "
"`Eq` as a trait bound."
msgstr ""

#: src/std-traits/comparisons.md:26
msgid ""
"`PartialOrd` defines a partial ordering, with a `partial_cmp` method. It is "
"used to implement the `<`, `<=`, `>=`, and `>` operators."
msgstr ""

#: src/std-traits/comparisons.md:43
msgid "`Ord` is a total ordering, with `cmp` returning `Ordering`."
msgstr ""

#: src/std-traits/comparisons.md:47
msgid ""
"`PartialEq` can be implemented between different types, but `Eq` cannot, "
"because it is reflexive:"
msgstr ""

#: src/std-traits/comparisons.md:58
msgid ""
"In practice, it's common to derive these traits, but uncommon to implement "
"them."
msgstr ""

#: src/std-traits/operators.md:20
msgid "\"{:?} + {:?} = {:?}\""
msgstr ""

#: src/std-traits/from-and-into.md:11 src/std-traits/from-and-into.md:23
msgid "\"{s}, {addr}, {one}, {bigger}\""
msgstr ""

#: src/std-traits/casting.md:3
msgid ""
"Rust has no _implicit_ type conversions, but does support explicit casts "
"with `as`. These generally follow C semantics where those are defined."
msgstr ""

#: src/std-traits/casting.md:9
msgid "\"as u16: {}\""
msgstr ""

#: src/std-traits/casting.md:10
msgid "\"as i16: {}\""
msgstr ""

#: src/std-traits/casting.md:11
msgid "\"as u8: {}\""
msgstr ""

#: src/std-traits/casting.md:15
msgid ""
"The results of `as` are _always_ defined in Rust and consistent across "
"platforms.  This might not match your intuition for changing sign or casting "
"to a smaller type -- check the docs, and comment for clarity."
msgstr ""

#: src/std-traits/casting.md:21
msgid "Consider taking a break after this slide."
msgstr ""

#: src/std-traits/casting.md:23
msgid ""
"`as` is similar to a C++ static cast.  Use of `as` in cases where data might "
"be lost is generally discouraged, or at least deserves an explanatory "
"comment."
msgstr ""

#: src/std-traits/casting.md:26
msgid "This is common in casting integers to `usize` for use as an index."
msgstr ""

#: src/std-traits/read-and-write.md:14
msgid "b\"foo\\nbar\\nbaz\\n\""
msgstr ""

#: src/std-traits/read-and-write.md:15
msgid "\"lines in slice: {}\""
msgstr ""

#: src/std-traits/read-and-write.md:18
msgid "\"lines in file: {}\""
msgstr ""

#: src/std-traits/read-and-write.md:30
msgid "\"\\n\""
msgstr ""

#: src/std-traits/read-and-write.md:36 src/slices-and-lifetimes/str.md:11
#, fuzzy
msgid "\"World\""
msgstr "Hello World!"

#: src/std-traits/read-and-write.md:37
msgid "\"Logged: {:?}\""
msgstr ""

#: src/std-traits/default.md:18
msgid "\"John Smith\""
msgstr ""

#: src/std-traits/default.md:24
msgid "\"{default_struct:#?}\""
msgstr ""

#: src/std-traits/default.md:27
msgid "\"Y is set!\""
msgstr ""

#: src/std-traits/default.md:30
msgid "\"{almost_default_struct:#?}\""
msgstr ""

#: src/std-traits/default.md:33
msgid "\"{:#?}\""
msgstr ""

#: src/std-traits/closures.md:16 src/std-traits/closures.md:17
msgid "\"add_3: {}\""
msgstr ""

#: src/std-traits/closures.md:24 src/std-traits/closures.md:25
msgid "\"accumulate: {}\""
msgstr ""

#: src/std-traits/closures.md:28
msgid "\"multiply_sum: {}\""
msgstr ""

#: src/std-traits/closures.md:58
msgid "\"Hi\""
msgstr ""

#: src/std-traits/closures.md:59
msgid "\"there\""
msgstr ""

#: src/std-traits/exercise.md:3
msgid ""
"In this example, you will implement the classic [\"ROT13\" cipher](https://"
"en.wikipedia.org/wiki/ROT13). Copy this code to the playground, and "
"implement the missing bits. Only rotate ASCII alphabetic characters, to "
"ensure the result is still valid UTF-8."
msgstr ""

#: src/std-traits/exercise.md:15
msgid "// Implement the `Read` trait for `RotDecoder`.\n"
msgstr ""

#: src/std-traits/exercise.md:20 src/std-traits/exercise.md:35
#: src/std-traits/solution.md:26 src/std-traits/solution.md:41
msgid "\"Gb trg gb gur bgure fvqr!\""
msgstr ""

#: src/std-traits/exercise.md:40 src/std-traits/solution.md:46
msgid "\"To get to the other side!\""
msgstr ""

#: src/std-traits/exercise.md:62
msgid ""
"What happens if you chain two `RotDecoder` instances together, each rotating "
"by 13 characters?"
msgstr ""

#: src/std-traits/solution.md:16
msgid "'A'"
msgstr ""

#: src/welcome-day-3.md:3
msgid "Today, we will cover:"
msgstr ""

#: src/welcome-day-3.md:5
msgid ""
"Memory management, lifetimes, and the borrow checker: how Rust ensures "
"memory safety."
msgstr ""

#: src/welcome-day-3.md:6
msgid "Smart pointers: standard library pointer types."
msgstr ""

#: src/memory-management/review.md:3
msgid "Programs allocate memory in two ways:"
msgstr ""

#: src/memory-management/review.md:55 src/testing/unit-tests.md:15
msgid "' '"
msgstr ""

#: src/memory-management/review.md:56
#, fuzzy
msgid "\"world\""
msgstr "Hello World!"

#: src/memory-management/review.md:57
msgid ""
"// DON'T DO THIS AT HOME! For educational purposes only.\n"
"    // String provides no guarantees about its layout, so this could lead "
"to\n"
"    // undefined behavior.\n"
msgstr ""

#: src/memory-management/review.md:62
msgid "\"ptr = {ptr:#x}, len = {len}, capacity = {capacity}\""
msgstr ""

#: src/memory-management/approaches.md:6
msgid "Programmer decides when to allocate or free heap memory."
msgstr ""

#: src/memory-management/approaches.md:7
msgid ""
"Programmer must determine whether a pointer still points to valid memory."
msgstr ""

#: src/memory-management/approaches.md:8
msgid "Studies show, programmers make mistakes."
msgstr ""

#: src/memory-management/approaches.md:10
msgid ""
"A runtime system ensures that memory is not freed until it can no longer be "
"referenced."
msgstr ""

#: src/memory-management/approaches.md:11
msgid ""
"Typically implemented with reference counting, garbage collection, or RAII."
msgstr ""

#: src/memory-management/approaches.md:22
msgid ""
"This slide is intended to help students coming from other languages to put "
"Rust in context."
msgstr ""

#: src/memory-management/approaches.md:25
msgid ""
"C must manage heap manually with `malloc` and `free`. Common errors include "
"forgetting to call `free`, calling it multiple times for the same pointer, "
"or dereferencing a pointer after the memory it points to has been freed."
msgstr ""

#: src/memory-management/approaches.md:30
msgid ""
"C++ has tools like smart pointers (`unique_ptr`, `shared_ptr`) that take "
"advantage of language guarantees about calling destructors to ensure memory "
"is freed when a function returns. It is still quite easy to mis-use these "
"tools and create similar bugs to C."
msgstr ""

#: src/memory-management/approaches.md:35
msgid ""
"Java, Go, and Python rely on the garbage collector to identify memory that "
"is no longer reachable and discard it. This guarantees that any pointer can "
"be dereferenced, eliminating use-after-free and other classes of bugs. But, "
"GC has a runtime cost and is difficult to tune properly."
msgstr ""

#: src/memory-management/approaches.md:40
msgid ""
"Rust's ownership and borrowing model can, in many cases, get the performance "
"of C, with alloc and free operations precisely where they are required -- "
"zero cost. It also provides tools similar to C++'s smart pointers. When "
"required, other options such as reference counting are available, and there "
"are even third-party crates available to support runtime garbage collection "
"(not covered in this class)."
msgstr ""

#: src/memory-management/ownership.md:27
msgid ""
"Students familiar with garbage-collection implementations will know that a "
"garbage collector starts with a set of \"roots\" to find all reachable "
"memory. Rust's \"single owner\" principle is a similar idea."
msgstr ""

#: src/memory-management/move.md:9 src/slices-and-lifetimes/str.md:15
#: src/slices-and-lifetimes/str.md:17
msgid "\"s2: {s2}\""
msgstr ""

#: src/memory-management/move.md:10
msgid "// println!(\"s1: {s1}\");\n"
msgstr ""

#: src/memory-management/move.md:63
#, fuzzy
msgid "\"Hello {name}\""
msgstr "Hello World!"

#: src/memory-management/move.md:69
msgid "// say_hello(name);\n"
msgstr ""

#: src/memory-management/move.md:83
msgid "In the `say_hello` example:"
msgstr ""

#: src/memory-management/move.md:98
msgid "\"Cpp\""
msgstr ""

#: src/memory-management/move.md:99
msgid "// Duplicate the data in s1.\n"
msgstr ""

#: src/memory-management/move.md:148
msgid ""
"C++ has made a slightly different choice than Rust. Because `=` copies data, "
"the string data has to be cloned. Otherwise we would get a double-free when "
"either string goes out of scope."
msgstr ""

#: src/memory-management/move.md:152
msgid ""
"C++ also has [`std::move`](https://en.cppreference.com/w/cpp/utility/move), "
"which is used to indicate when a value may be moved from. If the example had "
"been `s2 = std::move(s1)`, no heap allocation would take place. After the "
"move, `s1` would be in a valid but unspecified state. Unlike Rust, the "
"programmer is allowed to keep using `s1`."
msgstr ""

#: src/memory-management/move.md:157
msgid ""
"Unlike Rust, `=` in C++ can run arbitrary code as determined by the type "
"which is being copied or moved."
msgstr ""

#: src/memory-management/clone.md:1
msgid "Clone"
msgstr ""

#: src/memory-management/clone.md:3
msgid ""
"Sometimes you _want_ to make a copy of a value. The `Clone` trait "
"accomplishes this."
msgstr ""

#: src/memory-management/clone.md:22
msgid ""
"The idea of `Clone` is to make it easy to spot where heap allocations are "
"occurring. Look for `.clone()` and a few others like `Vec::new` or `Box::"
"new`."
msgstr ""

#: src/memory-management/clone.md:25
msgid ""
"It's common to \"clone your way out\" of problems with the borrow checker, "
"and return later to try to optimize those clones away."
msgstr ""

#: src/memory-management/drop.md:12
msgid "\"Dropping {}\""
msgstr ""

#: src/memory-management/drop.md:17
#: src/exercises/concurrency/link-checker.md:92
#: src/exercises/concurrency/solutions-morning.md:123
msgid "\"a\""
msgstr ""

#: src/memory-management/drop.md:19 src/testing/googletest.md:12
msgid "\"b\""
msgstr ""

#: src/memory-management/drop.md:21
#, fuzzy
msgid "\"c\""
msgstr "슬라이스"

#: src/memory-management/drop.md:22
msgid "\"d\""
msgstr ""

#: src/memory-management/drop.md:23
msgid "\"Exiting block B\""
msgstr ""

#: src/memory-management/drop.md:25
msgid "\"Exiting block A\""
msgstr ""

#: src/memory-management/drop.md:28
msgid "\"Exiting main\""
msgstr ""

#: src/memory-management/drop.md:34
msgid "Note that `std::mem::drop` is not the same as `std::ops::Drop::drop`."
msgstr ""

#: src/memory-management/drop.md:35
msgid "Values are automatically dropped when they go out of scope."
msgstr ""

#: src/memory-management/drop.md:36
msgid ""
"When a value is dropped, if it implements `std::ops::Drop` then its `Drop::"
"drop` implementation will be called."
msgstr ""

#: src/memory-management/drop.md:38
msgid ""
"All its fields will then be dropped too, whether or not it implements `Drop`."
msgstr ""

#: src/memory-management/drop.md:39
msgid ""
"`std::mem::drop` is just an empty function that takes any value. The "
"significance is that it takes ownership of the value, so at the end of its "
"scope it gets dropped. This makes it a convenient way to explicitly drop "
"values earlier than they would otherwise go out of scope."
msgstr ""

#: src/memory-management/drop.md:42
msgid ""
"This can be useful for objects that do some work on `drop`: releasing locks, "
"closing files, etc."
msgstr ""

#: src/memory-management/exercise.md:3
msgid ""
"In this example, we will implement a complex data type that owns all of its "
"data. We will use the \"builder pattern\" to support building a new value "
"piece-by-piece, using convenience functions."
msgstr ""

#: src/memory-management/exercise.md:7
msgid "Fill in the missing pieces."
msgstr ""

#: src/memory-management/exercise.md:22 src/memory-management/solution.md:16
msgid "/// A representation of a software package.\n"
msgstr ""

#: src/memory-management/exercise.md:35
msgid "\"1\""
msgstr ""

#: src/memory-management/exercise.md:38 src/memory-management/solution.md:35
msgid ""
"/// A builder for a Package. Use `build()` to create the `Package` itself.\n"
msgstr ""

#: src/memory-management/exercise.md:44
msgid "\"2\""
msgstr ""

#: src/memory-management/exercise.md:47 src/memory-management/solution.md:50
msgid "/// Set the package version.\n"
msgstr ""

#: src/memory-management/exercise.md:53 src/memory-management/solution.md:56
msgid "/// Set the package authors.\n"
msgstr ""

#: src/memory-management/exercise.md:55
msgid "\"3\""
msgstr ""

#: src/memory-management/exercise.md:58 src/memory-management/solution.md:62
msgid "/// Add an additional dependency.\n"
msgstr ""

#: src/memory-management/exercise.md:60
msgid "\"4\""
msgstr ""

#: src/memory-management/exercise.md:63 src/memory-management/solution.md:68
msgid "/// Set the language. If not set, language defaults to None.\n"
msgstr ""

#: src/memory-management/exercise.md:65
msgid "\"5\""
msgstr ""

#: src/memory-management/exercise.md:74 src/memory-management/exercise.md:76
#: src/memory-management/solution.md:80 src/memory-management/solution.md:82
msgid "\"base64\""
msgstr ""

#: src/memory-management/exercise.md:74 src/memory-management/solution.md:80
msgid "\"0.13\""
msgstr ""

#: src/memory-management/exercise.md:75 src/memory-management/solution.md:81
msgid "\"base64: {base64:?}\""
msgstr ""

#: src/memory-management/exercise.md:77 src/memory-management/solution.md:83
msgid "\"0.4\""
msgstr ""

#: src/memory-management/exercise.md:80 src/memory-management/solution.md:86
msgid "\"log: {log:?}\""
msgstr ""

#: src/memory-management/exercise.md:81 src/memory-management/solution.md:87
msgid "\"hawk\""
msgstr ""

#: src/memory-management/exercise.md:82 src/memory-management/solution.md:88
msgid "\"djmitche\""
msgstr ""

#: src/memory-management/exercise.md:83 src/memory-management/solution.md:89
msgid "\"4.0\""
msgstr ""

#: src/memory-management/exercise.md:87 src/memory-management/solution.md:93
msgid "\"serde: {serde:?}\""
msgstr ""

#: src/memory-management/solution.md:43
msgid "\"0.1\""
msgstr ""

#: src/smart-pointers/box.md:8
msgid "\"five: {}\""
msgstr ""

#: src/smart-pointers/box.md:40 src/smart-pointers/box.md:85
msgid "\"{list:?}\""
msgstr ""

#: src/smart-pointers/rc.md:13
msgid "\"a: {a}\""
msgstr ""

#: src/smart-pointers/rc.md:14
msgid "\"b: {b}\""
msgstr ""

#: src/smart-pointers/exercise.md:3
msgid ""
"A binary tree is a tree-type data structure where every node has two "
"children (left and right). We will create a tree where each node stores a "
"value. For a given node N, all nodes in a N's left subtree contain smaller "
"values, and all nodes in N's right subtree will contain larger values."
msgstr ""

#: src/smart-pointers/exercise.md:8
msgid "Implement the following types, so that the given tests pass."
msgstr ""

#: src/smart-pointers/exercise.md:17 src/smart-pointers/solution.md:10
msgid ""
"/// A container storing a set of values, using a binary tree.\n"
"///\n"
"/// If the same value is added multiple times, it is only stored once.\n"
msgstr ""

#: src/smart-pointers/exercise.md:23
msgid "// Implement `new`, `insert`, and `has`.\n"
msgstr ""

#: src/smart-pointers/exercise.md:38 src/smart-pointers/solution.md:84
msgid "// not a unique item\n"
msgstr ""

#: src/smart-pointers/exercise.md:73
msgid ""
"Extra Credit: implement an iterator over a binary tree that returns the "
"values in order."
msgstr ""

#: src/smart-pointers/solution.md:68 src/testing/googletest.md:11
msgid "\"bar\""
msgstr ""

#: src/borrowing/shared.md:28
msgid ""
"This slide is a review of the material on references from day 1, expanding "
"slightly to include function arguments and return values."
msgstr ""

#: src/borrowing/borrowck.md:26
msgid ""
"Note that the requirement is that conflicting references not _exist_ at the "
"same point. It does not matter where the reference is dereferenced."
msgstr ""

#: src/borrowing/borrowck.md:30
msgid ""
"The exclusive reference constraint is quite strong. Rust uses it to ensure "
"that data races do not occur. Rust also _relies_ on this constraint to "
"optimize codes. For example, a value behind a shared reference can be safely "
"cached in a register for the lifetime of that reference."
msgstr ""

#: src/borrowing/borrowck.md:31
msgid ""
"The borrow checker is designed to accommodate many common patterns, such as "
"taking exclusive references to different fields in a struct at the same "
"time. But, there are some situations where it doesn't quite \"get it\" and "
"this often results in \"fighting with the borrow checker.\""
msgstr ""

#: src/borrowing/interior-mutability.md:6
msgid ""
"Rust provides a few safe means of modifying a value given only a shared "
"reference to that value. All of these replace copmile-time checks with "
"runtime checks."
msgstr ""

#: src/borrowing/interior-mutability.md:49
msgid "\"graph: {root:#?}\""
msgstr ""

#: src/borrowing/interior-mutability.md:50
msgid "\"graph sum: {}\""
msgstr ""

#: src/borrowing/exercise.md:51
msgid ""
"\"Update a user's statistics based on measurements from a visit to the "
"doctor\""
msgstr ""

#: src/borrowing/exercise.md:56 src/borrowing/exercise.md:62
#: src/borrowing/exercise.md:68 src/borrowing/solution.md:58
#: src/borrowing/solution.md:64 src/borrowing/solution.md:70
#: src/android/build-rules/library.md:43 src/android/aidl/client.md:23
msgid "\"Bob\""
msgstr ""

#: src/borrowing/exercise.md:57 src/borrowing/solution.md:59
msgid "\"I'm {} and my age is {}\""
msgstr ""

#: src/slices-and-lifetimes/str.md:6
msgid ""
"We can now understand the two string types in Rust: `&str` is almost like "
"`&[char]`, but with its data stored in a variable-length encoding (UTF-8)."
msgstr ""

#: src/slices-and-lifetimes/str.md:12
msgid "\"s1: {s1}\""
msgstr ""

#: src/slices-and-lifetimes/str.md:20
msgid "\"s3: {s3}\""
msgstr ""

#: src/slices-and-lifetimes/str.md:42
msgid ""
"You can borrow `&str` slices from `String` via `&` and optionally range "
"selection.  If you select a byte range that is not aligned to character "
"boundaries, the expression will panic.  The `chars` iterator iterates over "
"characters and is preferred over trying to get character boundaries right."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:3
msgid ""
"A reference has a _lifetime_, which must \"outlive\" the value it refers to. "
"This is verified by the borrow checker."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:6
msgid ""
"The lifetime can be implicit - this is what we have seen so far.  Lifetimes "
"can also be explicit: `&'a Point`, `&'document str`.  Lifetimes start with "
"`'` and `'a` is a typical default name.  Read `&'a Point` as \"a borrowed "
"`Point` which is valid for at least the lifetime `a`\"."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:15
msgid ""
"Lifetimes become more complicated when considering passing values to and "
"returning values from functions."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:29
msgid "// What is the lifetime of p3?\n"
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:30
msgid "\"p3: {p3:?}\""
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:36
msgid ""
"In this example, the the compiler does not know what lifetime to infer for "
"`p3`. Looking inside the function body shows that it can only safely assume "
"that `p3`'s lifetime is the shorter of `p1` and `p2`. But just like types, "
"Rust requires explicit annotations of lifetimes on function arguments and "
"return values."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:42
msgid "Add `'a` appropriately to `left_most`:"
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:48
msgid ""
"This says, \"given p1 and p2 which both outlive `'a`, the return value lives "
"for at least `'a`."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:50
msgid ""
"In common cases, lifetimes can be elided, as described on the next slide."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:8
msgid "Each argument which does not have a lifetime annotation is given one."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:9
msgid ""
"If there is only one argument lifetime, it is given to all un-annotated "
"return values."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:10
msgid ""
"If there are multiple argument lifetimes, but the first one is for `self`, "
"that lifetime is given to all un-annotated return values."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:49
msgid "In this example, `cab_distance` is trivially elided."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:51
msgid ""
"The `nearest` function provides another example of a function with multiple "
"references in its arguments that requires explicit annotation."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:53
msgid "Try adjusting the signature to \"lie\" about the lifetimes returned:"
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:59
msgid ""
"This won't compile, demonstrating that the annotations are checked for "
"validity by the compiler.  Note that this is not the case for raw pointers "
"(unsafe), and this is a common source of errors with unsafe Rust."
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:10
msgid "\"Bye {text}!\""
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:14
msgid "\"The quick brown fox jumps over the lazy dog.\""
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:17
msgid "// erase(text);\n"
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:18
msgid "\"{fox:?}\""
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:19
msgid "\"{dog:?}\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:3
msgid ""
"In this exercise, you will build a parser for the [protobuf binary encoding]"
"(https://protobuf.dev/programming-guides/encoding/). Don't worry, it's "
"simpler than it seems! This illustrates a common parsing pattern, passing "
"slices of data. The underlying data itself is never copied."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:8
msgid ""
"Fully parsing a protobuf message requires knowing the types of the fields, "
"indexed by their field numbers. That is typically provided in a `proto` "
"file. In this exercise, we'll encode that information into `match` "
"statements in functions that get called for each field."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:13
msgid "We'll use the following proto:"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:28
msgid ""
"A proto message is encoded as a series of fields, one after the next. Each "
"is implemented as a \"tag\" followed by the value. The tag contains a field "
"number (e.g., `2` for the `id` field of a `Person` message) and a wire type "
"defining how the payload should be determined from the byte stream."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:33
msgid ""
"Integers, including the tag, are represented with a variable-length encoding "
"called VARINT. Luckily, `parse_varint` is defined for you below. The given "
"code also defines callbacks to handle `Person` and `PhoneNumber` fields, and "
"to parse a message into a series of calls to those callbacks."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:38
msgid "What remains for you is to implement the `parse_field` function."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:47
#: src/slices-and-lifetimes/solution.md:10
msgid "\"Invalid varint\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:49
#: src/slices-and-lifetimes/solution.md:12
msgid "\"Invalid wire-type\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:51
#: src/slices-and-lifetimes/solution.md:14
msgid "\"Unexpected EOF\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:53
#: src/slices-and-lifetimes/solution.md:16
msgid "\"Invalid length\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:55
#: src/slices-and-lifetimes/solution.md:18
msgid "\"Unexpected wire-type)\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:57
#: src/slices-and-lifetimes/solution.md:20
msgid "\"Invalid string (not UTF-8)\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:60
#: src/slices-and-lifetimes/solution.md:23
msgid "/// A wire type as seen on the wire.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:63
#: src/slices-and-lifetimes/solution.md:26
msgid "/// The Varint WireType indicates the value is a single VARINT.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:65
#: src/slices-and-lifetimes/solution.md:28
msgid ""
"//I64,  -- not needed for this exercise\n"
"    /// The Len WireType indicates that the value is a length represented as "
"a VARINT\n"
"    /// followed by exactly that number of bytes.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:69
#: src/slices-and-lifetimes/solution.md:32
msgid ""
"/// The I32 WireType indicates that the value is precisely 4 bytes in little-"
"endian order\n"
"    /// containing a 32-bit signed integer.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:74
#: src/slices-and-lifetimes/solution.md:37
msgid "/// A field's value, typed based on the wire type.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:78
#: src/slices-and-lifetimes/solution.md:41
msgid "//I64(i64),  -- not needed for this exercise\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:83
#: src/slices-and-lifetimes/solution.md:46
msgid "/// A field, containing the field number and its value.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:96
#: src/slices-and-lifetimes/solution.md:59
msgid "//1 => WireType::I64,  -- not needed for this exercise\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:126
#: src/slices-and-lifetimes/solution.md:89
msgid ""
"/// Parse a VARINT, returning the parsed value and the remaining bytes.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:134
#: src/slices-and-lifetimes/solution.md:97
msgid ""
"// This is the last byte of the VARINT, so convert it to\n"
"            // a u64 and return it.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:144
#: src/slices-and-lifetimes/solution.md:107
msgid "// More than 7 bytes is invalid.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:147
#: src/slices-and-lifetimes/solution.md:110
msgid "/// Convert a tag into a field number and a WireType.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:155
#: src/slices-and-lifetimes/solution.md:117
msgid "/// Parse a field, returning the remaining bytes\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:158
msgid ""
"// 1. Read and unpack the tag.\n"
"    // 2. Based on the wire type, build a Field, consuming as many bytes as\n"
"    //    necessary.\n"
"    // 3. Return the field, and any un-consumed bytes.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:164
#: src/slices-and-lifetimes/solution.md:154
msgid ""
"/// Parse a message in the given data, calling `field_callback` for each "
"field in the message.\n"
"///\n"
"/// The entire input is consumed.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:181
#: src/slices-and-lifetimes/solution.md:171
msgid "/// Handle a field in a Person message.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:184
#: src/slices-and-lifetimes/solution.md:174
msgid "\"name: {}\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:185
#: src/slices-and-lifetimes/solution.md:175
msgid "\"id: {}\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:187
#: src/slices-and-lifetimes/solution.md:177
msgid "\"phone:\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:190
#: src/slices-and-lifetimes/exercise.md:200
#: src/slices-and-lifetimes/solution.md:180
#: src/slices-and-lifetimes/solution.md:190
msgid "// skip everything else\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:195
#: src/slices-and-lifetimes/solution.md:185
msgid "/// Handle a field in a PhoneNumber message.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:198
#: src/slices-and-lifetimes/solution.md:188
msgid "\"  number: {}\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:199
#: src/slices-and-lifetimes/solution.md:189
msgid "\"  type: {}\""
msgstr ""

#: src/slices-and-lifetimes/solution.md:141
msgid "// Unwrap error because `value` is definitely 4 bytes long.\n"
msgstr ""

#: src/slices-and-lifetimes/solution.md:216
#: src/slices-and-lifetimes/solution.md:223
#: src/slices-and-lifetimes/solution.md:230
#, fuzzy
msgid "b\"hello\""
msgstr "Hello World!"

#: src/welcome-day-4.md:5
msgid "Iterators: a deep dive on the `Iterator` trait."
msgstr ""

#: src/welcome-day-4.md:6
msgid "Modules and visibility."
msgstr ""

#: src/welcome-day-4.md:9
msgid ""
"Unsafe Rust: the escape hatch when you can't express yourself in safe Rust."
msgstr ""

#: src/iterators/iterator.md:6
msgid ""
"The [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) "
"trait supports iterating over values in a collection. It requires a `next` "
"method and provides lots of methods. Many standard library types implement "
"`Iterator`, and you can implement it yourself, too:"
msgstr ""

#: src/iterators/iterator.md:30
msgid "\"fib({i}): {n}\""
msgstr ""

#: src/iterators/intoiterator.md:51
msgid "\"point = {x}, {y}\""
msgstr ""

#: src/iterators/intoiterator.md:67
msgid "The example iterates over all combinations of x and y coordinates."
msgstr ""

#: src/iterators/intoiterator.md:69
msgid ""
"Try iterating over the grid twice in `main`. Why does this fail? Note that "
"`IntoIterator::into_iter` takes ownership of `self`."
msgstr ""

#: src/iterators/intoiterator.md:72
msgid ""
"Fix this issue by implementing `IntoIterator` for `&Grid` and storing a "
"reference to the `Grid` in `GridIter`."
msgstr ""

#: src/iterators/intoiterator.md:75
msgid ""
"The same problem can occur for standard library types: `for e in "
"some_vector` will take ownership of `some_vector` and iterate over owned "
"elements from that vector. Use `for e in &some_vector` instead, to iterate "
"over references to elements of `some_vector`."
msgstr ""

#: src/iterators/fromiterator.md:12
msgid "\"prime_squares: {prime_squares:?}\""
msgstr ""

#: src/iterators/fromiterator.md:27
msgid "There are two ways to specify `B` for this method:"
msgstr ""

#: src/iterators/fromiterator.md:29
msgid ""
"With the \"turbofish\": `some_iterator.collect::<COLLECTION_TYPE>()`, as "
"shown. The `_` shorthand used here lets Rust infer the type of the `Vec` "
"elements. "
msgstr ""

#: src/iterators/fromiterator.md:32
msgid ""
"With type inference: `let prime_squares: Vec<_> = some_iterator.collect()`. "
"Rewrite the example to use this form."
msgstr ""

#: src/iterators/exercise.md:12 src/iterators/solution.md:4
msgid ""
"/// Calculate the differences between elements of `values` offset by "
"`offset`, wrapping\n"
"/// around from the end of `values` to the beginning.\n"
"///\n"
"/// Element `n` of the result is `values[(n+offset)%len] - values[n]`.\n"
msgstr ""

#: src/modules/modules.md:10
msgid "\"In the foo module\""
msgstr ""

#: src/modules/modules.md:16
msgid "\"In the bar module\""
msgstr ""

#: src/modules/filesystem.md:21
msgid ""
"//! This module implements the garden, including a highly performant "
"germination\n"
"//! implementation.\n"
msgstr ""

#: src/modules/filesystem.md:23
msgid "// Re-export types from this module.\n"
msgstr ""

#: src/modules/filesystem.md:27
msgid "/// Sow the given seed packets.\n"
msgstr ""

#: src/modules/filesystem.md:30
msgid "/// Harvest the produce in the garden that is ready.\n"
msgstr ""

#: src/modules/filesystem.md:55
#, fuzzy
msgid "\"some/path.rs\""
msgstr "_hello_rust/src/main.rs_:"

#: src/modules/visibility.md:13
msgid "\"outer::private\""
msgstr ""

#: src/modules/visibility.md:17
msgid "\"outer::public\""
msgstr ""

#: src/modules/visibility.md:22
msgid "\"outer::inner::private\""
msgstr ""

#: src/modules/visibility.md:26
msgid "\"outer::inner::public\""
msgstr ""

#: src/modules/paths.md:1
msgid "use, super, self"
msgstr ""

#: src/modules/paths.md:25
msgid ""
"It is common to \"re-export\" symbols at a shorter path. For example, the "
"top-level `lib.rs` in a crate might have"
msgstr ""

#: src/modules/paths.md:35
msgid ""
"making `DiskStorage` and `NetworkStorage` available to other crates with a "
"convenient, short path."
msgstr ""

#: src/modules/paths.md:38
msgid ""
"For the most part, only items that appear in a module need to be `use`'d. "
"However, a trait must be in scope to call any methods on that trait, even if "
"a type implementing that trait is already in scope. For example, to use the "
"`read_to_string` method on a type implementing the `Read` trait, you need to "
"`use std::io::Read`."
msgstr ""

#: src/modules/paths.md:44
msgid ""
"The `use` statement can have a wildcard: `use std::io::*`. This is "
"discouraged because it is not clear which items are imported, and those "
"might change over time."
msgstr ""

#: src/modules/exercise.md:3
msgid ""
"In this exercise, you will reorganize the GUI Library exercise from the "
"\"Methods and Traits\" segment of the course into a collection of modules. "
"It is typical to put each type or set of closely-related types into its own "
"module, so each widget type should get its own module."
msgstr ""

#: src/modules/exercise.md:8
msgid ""
"If you no longer have your version, that's fine - refer back to the "
"[provided solution](../methods-and-traits/solution.html)."
msgstr ""

#: src/modules/exercise.md:13
msgid ""
"The Rust playground only supports one file, so you will need to make a Cargo "
"project on your local filesystem:"
msgstr ""

#: src/modules/exercise.md:22
msgid ""
"Edit `src/main.rs` to add `mod` statements, and add additional files in the "
"`src` directory."
msgstr ""

#: src/modules/exercise.md:27
msgid ""
"Encourage students to divide the code in a way that feels natural for them, "
"and get accustomed to the required `mod`, `use`, and `pub` declarations. "
"Afterward, discuss what organizations are most idiomatic."
msgstr ""

#: src/modules/solution.md:20
msgid "// ---- src/widgets.rs ----\n"
msgstr ""

#: src/modules/solution.md:42
msgid "// ---- src/widgets/label.rs ----\n"
msgstr ""

#: src/modules/solution.md:59
msgid "// ANCHOR_END: Label-width\n"
msgstr ""

#: src/modules/solution.md:67
msgid "// ANCHOR: Label-draw_into\n"
msgstr ""

#: src/modules/solution.md:69
msgid "// ANCHOR_END: Label-draw_into\n"
msgstr ""

#: src/modules/solution.md:76
msgid "// ---- src/widgets/button.rs ----\n"
msgstr ""

#: src/modules/solution.md:93
msgid "// ANCHOR_END: Button-width\n"
msgstr ""

#: src/modules/solution.md:97
msgid "// ANCHOR: Button-draw_into\n"
msgstr ""

#: src/modules/solution.md:99
msgid "// ANCHOR_END: Button-draw_into\n"
msgstr ""

#: src/modules/solution.md:114
msgid "// ---- src/widgets/window.rs ----\n"
msgstr ""

#: src/modules/solution.md:144
msgid ""
"// ANCHOR_END: Window-width\n"
"        // Add 4 paddings for borders\n"
msgstr ""

#: src/modules/solution.md:149
msgid "// ANCHOR: Window-draw_into\n"
msgstr ""

#: src/modules/solution.md:151
msgid "// ANCHOR_END: Window-draw_into\n"
msgstr ""

#: src/modules/solution.md:174
msgid "// ---- src/main.rs ----\n"
msgstr ""

#: src/testing/unit-tests.md:9
msgid ""
"Tests are marked with `#[test]`.  Unit tests are often put in a nested "
"`tests` module, using `#[cfg(test)]` to conditionally compile them only when "
"building tests."
msgstr ""

#: src/testing/unit-tests.md:47
msgid "Run the tests in the playground in order to show their results."
msgstr ""

#: src/testing/other.md:10
msgid "// tests/my_library.rs\n"
msgstr ""

#: src/testing/other.md:40
msgid ""
"Adding `# ` in the code will hide it from the docs, but will still compile/"
"run it."
msgstr ""

#: src/testing/googletest.md:11
msgid "\"baz\""
msgstr ""

#: src/testing/googletest.md:12
msgid "\"xyz\""
msgstr ""

#: src/testing/googletest.md:16
msgid ""
"If we change the last element to `\"!\"`, the test fails with a structured "
"error message pin-pointing the error:"
msgstr ""

#: src/testing/googletest.md:36
msgid ""
"GoogleTest is not part of the Rust Playground, so you need to run this "
"example in a local environment. Use `cargo add googletest` to quickly add it "
"to an existing Cargo project."
msgstr ""

#: src/testing/googletest.md:40
msgid ""
"The `use googletest::prelude::*;` line imports a number of [commonly used "
"macros and types](https://docs.rs/googletest/latest/googletest/prelude/index."
"html)."
msgstr ""

#: src/testing/googletest.md:43
msgid "This just scratches the surface, there are many builtin matchers."
msgstr ""

#: src/testing/googletest.md:45
msgid ""
"A particularly nice feature is that mismatches in multi-line strings strings "
"are shown as a diff:"
msgstr ""

#: src/testing/googletest.md:51
msgid ""
"\"Memory safety found,\\n\\\n"
"                 Rust's strong typing guides the way,\\n\\\n"
"                 Secure code you'll write.\""
msgstr ""

#: src/testing/googletest.md:56
msgid ""
"\"Memory safety found,\\n\\\n"
"            Rust's silly humor guides the way,\\n\\\n"
"            Secure code you'll write.\""
msgstr ""

#: src/testing/googletest.md:63
msgid "shows a color-coded diff (colors not shown here):"
msgstr ""

#: src/testing/googletest.md:79
msgid ""
"The crate is a Rust port of [GoogleTest for C++](https://google.github.io/"
"googletest/)."
msgstr ""

#: src/testing/googletest.md:84
msgid "GoogleTest is available for use in AOSP."
msgstr ""

#: src/testing/mocking.md:3
msgid ""
"For mocking, [Mockall](https://docs.rs/mockall/) is a widely used library. "
"You need to refactor your code to use traits, which you can then quickly "
"mock:"
msgstr ""

#: src/testing/mocking.md:26
msgid ""
"The advice here is for Android (AOSP) where Mockall is the recommended "
"mocking library. There are other [mocking libraries available on crates.io]"
"(https://crates.io/keywords/mock), in particular in the area of mocking HTTP "
"services. The other mocking libraries work in a similar fashion as Mockall, "
"meaning that they make it easy to get a mock implementation of a given trait."
msgstr ""

#: src/testing/mocking.md:32
msgid ""
"Note that mocking is somewhat _controversial_: mocks allow you to completely "
"isolate a test from its dependencies. The immediate result is faster and "
"more stable test execution. On the other hand, the mocks can be configured "
"wrongly and return output different from what the real dependencies would do."
msgstr ""

#: src/testing/mocking.md:37
msgid ""
"If at all possible, it is recommended that you use the real dependencies. As "
"an example, many databases allow you to configure an in-memory backend. This "
"means that you get the correct behavior in your tests, plus they are fast "
"and will automatically clean up after themselves."
msgstr ""

#: src/testing/mocking.md:42
msgid ""
"Similarly, many web frameworks allow you to start an in-process server which "
"binds to a random port on `localhost`. Always prefer this over mocking away "
"the framework since it helps you test your code in the real environment."
msgstr ""

#: src/testing/mocking.md:46
msgid ""
"Mockall is not part of the Rust Playground, so you need to run this example "
"in a local environment. Use `cargo add mockall` to quickly add Mockall to an "
"existing Cargo project."
msgstr ""

#: src/testing/mocking.md:50
msgid ""
"Mockall has a lot more functionality. In particular, you can set up "
"expectations which depend on the arguments passed. Here we use this to mock "
"a cat which becomes hungry 3 hours after the last time it was fed:"
msgstr ""

#: src/testing/mocking.md:68
msgid ""
"You can use `.times(n)` to limit the number of times a mock method can be "
"called to `n` --- the mock will automatically panic when dropped if this "
"isn't satisfied."
msgstr ""

#: src/testing/lints.md:1
msgid "Compiler Lints and Clippy"
msgstr ""

#: src/testing/lints.md:3
msgid ""
"The Rust compiler produces fantastic error messages, as well as helpful "
"built-in lints. [Clippy](https://doc.rust-lang.org/clippy/) provides even "
"more lints, organized into groups that can be enabled per-project."
msgstr ""

#: src/testing/lints.md:14
msgid "\"X probably fits in a u16, right? {}\""
msgstr ""

#: src/testing/lints.md:20
msgid ""
"Run the code sample and examine the error message. There are also lints "
"visible here, but those will not be shown once the code compiles. Switch to "
"the Playground site to show those lints."
msgstr ""

#: src/testing/lints.md:24
msgid ""
"After resolving the lints, run `clippy` on the playground site to show "
"clippy warnings. Clippy has extensive documentation of its lints, and adds "
"new lints (including default-deny lints) all the time."
msgstr ""

#: src/testing/lints.md:28
msgid ""
"Note that errors or warnings with `help: ...` can be fixed with `cargo fix` "
"or via your editor."
msgstr ""

#: src/testing/exercise.md:21
msgid ""
"The provided code provides a buggy implementation of the luhn algorithm, "
"along with two basic unit tests that confirm that most the algorithm is "
"implemented correctly."
msgstr ""

#: src/testing/exercise.md:60 src/testing/solution.md:75
msgid "\"4263 9826 4026 9299\""
msgstr ""

#: src/testing/exercise.md:61 src/testing/solution.md:76
msgid "\"4539 3195 0343 6467\""
msgstr ""

#: src/testing/exercise.md:62 src/testing/solution.md:77
msgid "\"7992 7398 713\""
msgstr ""

#: src/testing/exercise.md:67 src/testing/solution.md:82
msgid "\"4223 9826 4026 9299\""
msgstr ""

#: src/testing/exercise.md:68 src/testing/solution.md:83
msgid "\"4539 3195 0343 6476\""
msgstr ""

#: src/testing/exercise.md:69 src/testing/solution.md:84
msgid "\"8273 1232 7352 0569\""
msgstr ""

#: src/testing/solution.md:4
msgid "// This is the buggy version that appears in the problem.\n"
msgstr ""

#: src/testing/solution.md:30
msgid "// This is the solution and passes all of the tests below.\n"
msgstr ""

#: src/testing/solution.md:62
msgid "\"1234 5678 1234 5670\""
msgstr ""

#: src/testing/solution.md:64
msgid "\"Is {cc_number} a valid credit card number? {}\""
msgstr ""

#: src/testing/solution.md:65
msgid "\"yes\""
msgstr ""

#: src/testing/solution.md:65
msgid "\"no\""
msgstr ""

#: src/testing/solution.md:90
msgid "\"foo 0 0\""
msgstr ""

#: src/testing/solution.md:96
msgid "\" \""
msgstr ""

#: src/testing/solution.md:97
msgid "\"  \""
msgstr ""

#: src/testing/solution.md:98
msgid "\"    \""
msgstr ""

#: src/testing/solution.md:103
msgid "\"0\""
msgstr ""

#: src/testing/solution.md:108
msgid "\" 0 0 \""
msgstr ""

#: src/error-handling/panics.md:3
msgid "Rust handles fatal errors with a \"panic\"."
msgstr ""

#: src/error-handling/panics.md:10
msgid "\"v[100]: {}\""
msgstr ""

#: src/error-handling/panics.md:16
msgid "Runtime failures like failed bounds checks can panic"
msgstr ""

#: src/error-handling/panics.md:17
msgid "Assertions (such as `assert!`) panic on failure"
msgstr ""

#: src/error-handling/panics.md:18
msgid "Purpose-specific panics can use the `panic!` macro."
msgstr ""

#: src/error-handling/panics.md:19
msgid ""
"A panic will \"unwind\" the stack, dropping values just as if the functions "
"had returned."
msgstr ""

#: src/error-handling/panics.md:31
msgid "\"No problem here!\""
msgstr ""

#: src/error-handling/panics.md:33 src/error-handling/panics.md:38
msgid "\"{result:?}\""
msgstr ""

#: src/error-handling/panics.md:36
msgid "\"oh no!\""
msgstr ""

#: src/error-handling/panics.md:42
msgid ""
"Catching is unusual; do not attempt to implement exceptions with "
"`catch_unwind`!"
msgstr ""

#: src/error-handling/try.md:3
msgid ""
"Runtime errors like connection-refused or file-not-found are handled with "
"the `Result` type, but matching this type on every call can be cumbersome.  "
"The try-operator `?` is used to return errors to the caller. It lets you "
"turn the common"
msgstr ""

#: src/error-handling/try.md:42
msgid "//fs::write(\"config.dat\", \"alice\").unwrap();\n"
msgstr ""

#: src/error-handling/try.md:43 src/error-handling/try-conversions.md:64
#: src/error-handling/thiserror-and-anyhow.md:31
msgid "\"config.dat\""
msgstr ""

#: src/error-handling/try.md:44 src/error-handling/try-conversions.md:65
msgid "\"username or error: {username:?}\""
msgstr ""

#: src/error-handling/try.md:50
msgid "Simplify the `read_username` function to use `?`."
msgstr ""

#: src/error-handling/try.md:56
msgid ""
"Note that `main` can return a `Result<(), E>` as long as it implements `std::"
"process:Termination`. In practice, this means that `E` implements `Debug`. "
"The executable will print the `Err` variant and return a nonzero exit status "
"on error."
msgstr ""

#: src/error-handling/try-conversions.md:41
msgid "\"IO error: {e}\""
msgstr ""

#: src/error-handling/try-conversions.md:42
msgid "\"Found no username in {filename}\""
msgstr ""

#: src/error-handling/try-conversions.md:63
#: src/error-handling/thiserror-and-anyhow.md:30
msgid "//fs::write(\"config.dat\", \"\").unwrap();\n"
msgstr ""

#: src/error-handling/try-conversions.md:87
msgid ""
"A common alternative to a `From` implementation is `Result::map_err`, "
"especially when the conversion only happens in one place."
msgstr ""

#: src/error-handling/error.md:20 src/error-handling/error.md:21
msgid "\"count.dat\""
msgstr ""

#: src/error-handling/error.md:20
msgid "\"1i3\""
msgstr ""

#: src/error-handling/error.md:22
msgid "\"Count: {count}\""
msgstr ""

#: src/error-handling/error.md:23
msgid "\"Error: {err}\""
msgstr ""

#: src/error-handling/error.md:30
msgid ""
"The `read_count` function can return `std::io::Error` (from file operations) "
"or `std::num::ParseIntError` (from `String::parse`)."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:3
msgid ""
"The [`thiserror`](https://docs.rs/thiserror/)  and [`anyhow`](https://docs."
"rs/anyhow/) crates are widley used to simplify error handling. `thiserror` "
"helps create custom error types that implement `From<T>`. `anyhow` helps "
"with error handling in functions, including adding contextual information to "
"your errors."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:14
msgid "\"Found no username in {0}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:20
msgid "\"Failed to open {path}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:22
msgid "\"Failed to read\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:32
msgid "\"Username: {username}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:33
msgid "\"Error: {err:?}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:40
msgid ""
"The `Error` derive macro is provided by `thiserror`, and has lots of useful "
"attributes like `#[error]` to help define a useful error type."
msgstr ""

#: src/error-handling/exercise.md:1
#, fuzzy
msgid "Exercise: Rewriting with Result"
msgstr "`Result`를 이용한 구조화된 오류처리"

#: src/error-handling/exercise.md:3
msgid ""
"The following implements a very simple parser for an expression language. "
"However, it handles errors by panicking. Rewrite it to instead use idiomatic "
"error handling and propagate errors to a return from `main`. Feel free to "
"use `thiserror` and `anyhow`."
msgstr ""

#: src/error-handling/exercise.md:8
msgid ""
"HINT: start by fixing error handling in the `parse` function. Once that is "
"working correctly, update `Tokenizer` to implement "
"`Iterator<Item=Result<Token, TokenizerError>>` and handle that in the parser."
msgstr ""

#: src/error-handling/exercise.md:15 src/error-handling/solution.md:8
msgid "/// An arithmetic operator.\n"
msgstr ""

#: src/error-handling/exercise.md:22 src/error-handling/solution.md:15
msgid "/// A token in the expression language.\n"
msgstr ""

#: src/error-handling/exercise.md:30 src/error-handling/solution.md:23
msgid "/// An expression in the expression language.\n"
msgstr ""

#: src/error-handling/exercise.md:34 src/error-handling/solution.md:27
msgid "/// A reference to a variable.\n"
msgstr ""

#: src/error-handling/exercise.md:36 src/error-handling/solution.md:29
msgid "/// A literal number.\n"
msgstr ""

#: src/error-handling/exercise.md:38 src/error-handling/solution.md:31
msgid "/// A binary operation.\n"
msgstr ""

#: src/error-handling/exercise.md:64 src/error-handling/exercise.md:66
#: src/error-handling/solution.md:63 src/error-handling/solution.md:65
msgid "'z'"
msgstr ""

#: src/error-handling/exercise.md:66 src/error-handling/solution.md:65
msgid "'_'"
msgstr ""

#: src/error-handling/exercise.md:72 src/error-handling/solution.md:71
msgid "'+'"
msgstr ""

#: src/error-handling/exercise.md:73 src/error-handling/solution.md:72
msgid "'-'"
msgstr ""

#: src/error-handling/exercise.md:74
msgid "\"Unexpected character {c}\""
msgstr ""

#: src/error-handling/exercise.md:84 src/error-handling/solution.md:82
msgid "\"Unexpected end of input\""
msgstr ""

#: src/error-handling/exercise.md:88
msgid "\"Invalid 32-bit integer'\""
msgstr ""

#: src/error-handling/exercise.md:92 src/error-handling/exercise.md:100
msgid "\"Unexpected token {tok:?}\""
msgstr ""

#: src/error-handling/exercise.md:94 src/error-handling/solution.md:105
msgid "// Look ahead to parse a binary operation if present.\n"
msgstr ""

#: src/error-handling/exercise.md:108 src/error-handling/solution.md:120
msgid "\"10+foo+20-30\""
msgstr ""

#: src/error-handling/exercise.md:109 src/error-handling/solution.md:121
msgid "\"{expr:?}\""
msgstr ""

#: src/error-handling/solution.md:41
msgid "\"Unexpected character '{0}' in input\""
msgstr ""

#: src/error-handling/solution.md:80
msgid "\"Tokenizer error: {0}\""
msgstr ""

#: src/error-handling/solution.md:84
msgid "\"Unexpected token {0:?}\""
msgstr ""

#: src/error-handling/solution.md:86
msgid "\"Invalid number\""
msgstr ""

#: src/unsafe-rust/dereferencing.md:7
msgid "\"careful!\""
msgstr ""

#: src/unsafe-rust/dereferencing.md:18
msgid "\"r1 is: {}\""
msgstr ""

#: src/unsafe-rust/dereferencing.md:19
msgid "\"uhoh\""
msgstr ""

#: src/unsafe-rust/dereferencing.md:20
msgid "\"r2 is: {}\""
msgstr ""

#: src/unsafe-rust/dereferencing.md:23
msgid ""
"// NOT SAFE. DO NOT DO THIS.\n"
"    /*\n"
"    let r3: &String = unsafe { &*r1 };\n"
"    drop(s);\n"
"    println!(\"r3 is: {}\", *r3);\n"
"    */"
msgstr ""

#: src/unsafe-rust/dereferencing.md:50
msgid ""
"The \"NOT SAFE\" sectoin gives an example of a common kind of UB bug: `*r1` "
"has the `'static` lifetime, so `r3` has type `&'static String`, and thus "
"outlives `s`. Creating a reference from a pointer requires _great care_."
msgstr ""

#: src/unsafe-rust/mutable-static.md:9
msgid "\"HELLO_WORLD: {HELLO_WORLD}\""
msgstr ""

#: src/unsafe-rust/mutable-static.md:20 src/unsafe-rust/mutable-static.md:26
msgid "// Potential data race!\n"
msgstr ""

#: src/unsafe-rust/mutable-static.md:26
msgid "\"COUNTER: {COUNTER}\""
msgstr ""

#: src/unsafe-rust/mutable-static.md:32
msgid ""
"The program here is safe because it is single-threaded. However, the Rust "
"compiler is conservative and will assume the worst. Try removing the "
"`unsafe` and see how the compiler explains that it is undefined behavior to "
"mutate a static from multiple threads."
msgstr ""

#: src/unsafe-rust/unions.md:14
msgid "\"int: {}\""
msgstr ""

#: src/unsafe-rust/unions.md:15
msgid "\"bool: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:9 src/unsafe-rust/exercise.md:89
#: src/unsafe-rust/solution.md:41 src/android/interoperability/with-c.md:9
#: src/android/interoperability/with-c/rust.md:15
#: src/android/interoperability/with-c/rust.md:30
#: src/android/interoperability/cpp/cpp-bridge.md:29
#: src/android/interoperability/cpp/cpp-bridge.md:38
#: src/exercises/chromium/build-rules.md:7
#: src/exercises/chromium/build-rules.md:19
#: src/bare-metal/aps/inline-assembly.md:18
#: src/bare-metal/aps/better-uart/using.md:24
#: src/bare-metal/aps/logging/using.md:23 src/exercises/bare-metal/rtc.md:46
#: src/exercises/bare-metal/rtc.md:100 src/exercises/bare-metal/rtc.md:106
#: src/exercises/bare-metal/rtc.md:113 src/exercises/bare-metal/rtc.md:119
#: src/exercises/bare-metal/rtc.md:125 src/exercises/bare-metal/rtc.md:131
#: src/exercises/bare-metal/rtc.md:137 src/exercises/bare-metal/rtc.md:143
#: src/exercises/bare-metal/solutions-afternoon.md:43
msgid "\"C\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:14
msgid "\"🗻∈🌏\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:16
msgid ""
"// Safe because the indices are in the correct order, within the bounds of\n"
"    // the string slice, and lie on UTF-8 sequence boundaries.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:19
#: src/unsafe-rust/unsafe-functions.md:20
#: src/unsafe-rust/unsafe-functions.md:21
msgid "\"emoji: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:24
msgid "\"char count: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:28
msgid "\"Absolute value of -3 according to C: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:31
msgid ""
"// Not upholding the UTF-8 encoding requirement breaks memory safety!\n"
"    // println!(\"emoji: {}\", unsafe { emojis.get_unchecked(0..3) });\n"
"    // println!(\"char count: {}\", count_chars(unsafe { emojis."
"get_unchecked(0..3) }));\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:47
msgid ""
"/// Swaps the values pointed to by the given pointers.\n"
"///\n"
"/// # Safety\n"
"///\n"
"/// The pointers must be valid and properly aligned.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:62
msgid "// Safe because ...\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:67
msgid "\"a = {}, b = {}\""
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:12
msgid ""
"/// ...\n"
"/// # Safety\n"
"/// The type must have a defined representation and no padding.\n"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:23
msgid "// Safe because u32 has a defined representation and no padding.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:54 src/unsafe-rust/exercise.md:67
#: src/unsafe-rust/exercise.md:78 src/unsafe-rust/exercise.md:92
#: src/unsafe-rust/exercise.md:100 src/unsafe-rust/solution.md:6
#: src/unsafe-rust/solution.md:19 src/unsafe-rust/solution.md:30
#: src/unsafe-rust/solution.md:44 src/unsafe-rust/solution.md:52
msgid "\"macos\""
msgstr ""

#: src/unsafe-rust/exercise.md:57 src/unsafe-rust/solution.md:9
msgid "// Opaque type. See https://doc.rust-lang.org/nomicon/ffi.html.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:64 src/unsafe-rust/solution.md:16
msgid ""
"// Layout according to the Linux man page for readdir(3), where ino_t and\n"
"    // off_t are resolved according to the definitions in\n"
"    // /usr/include/x86_64-linux-gnu/{sys/types.h, bits/typesizes.h}.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:77 src/unsafe-rust/solution.md:29
msgid "// Layout according to the macOS man page for dir(5).\n"
msgstr ""

#: src/unsafe-rust/exercise.md:92 src/unsafe-rust/exercise.md:100
#: src/unsafe-rust/solution.md:44 src/unsafe-rust/solution.md:52
msgid "\"x86_64\""
msgstr ""

#: src/unsafe-rust/exercise.md:95 src/unsafe-rust/solution.md:47
msgid ""
"// See https://github.com/rust-lang/libc/issues/414 and the section on\n"
"        // _DARWIN_FEATURE_64_BIT_INODE in the macOS man page for stat(2).\n"
"        //\n"
"        // \"Platforms that existed before these updates were available\" "
"refers\n"
"        // to macOS (as opposed to iOS / wearOS / etc.) on Intel and "
"PowerPC.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:101 src/unsafe-rust/solution.md:53
msgid "\"readdir$INODE64\""
msgstr ""

#: src/unsafe-rust/exercise.md:119 src/unsafe-rust/solution.md:71
msgid ""
"// Call opendir and return a Ok value if that worked,\n"
"        // otherwise return Err with a message.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:128
msgid "// Keep calling readdir until we get a NULL pointer back.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:135 src/unsafe-rust/solution.md:104
msgid "// Call closedir as needed.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:141 src/unsafe-rust/solution.md:115
#: src/unsafe-rust/solution.md:139 src/unsafe-rust/solution.md:154
#: src/android/interoperability/with-c/rust.md:44
msgid "\".\""
msgstr ""

#: src/unsafe-rust/exercise.md:142 src/unsafe-rust/solution.md:116
msgid "\"files: {:#?}\""
msgstr ""

#: src/unsafe-rust/solution.md:73
msgid "\"Invalid path: {err}\""
msgstr ""

#: src/unsafe-rust/solution.md:74
msgid "// SAFETY: path.as_ptr() cannot be NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md:77
msgid "\"Could not open {:?}\""
msgstr ""

#: src/unsafe-rust/solution.md:87
msgid ""
"// Keep calling readdir until we get a NULL pointer back.\n"
"        // SAFETY: self.dir is never NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md:91
msgid "// We have reached the end of the directory.\n"
msgstr ""

#: src/unsafe-rust/solution.md:94
msgid ""
"// SAFETY: dirent is not NULL and dirent.d_name is NUL\n"
"        // terminated.\n"
msgstr ""

#: src/unsafe-rust/solution.md:106
msgid "// SAFETY: self.dir is not NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md:108
msgid "\"Could not close {:?}\""
msgstr ""

#: src/unsafe-rust/solution.md:127
msgid "\"no-such-directory\""
msgstr ""

#: src/unsafe-rust/solution.md:135 src/unsafe-rust/solution.md:150
msgid "\"Non UTF-8 character in path\""
msgstr ""

#: src/unsafe-rust/solution.md:139 src/unsafe-rust/solution.md:154
msgid "\"..\""
msgstr ""

#: src/unsafe-rust/solution.md:146 src/unsafe-rust/solution.md:154
msgid "\"foo.txt\""
msgstr ""

#: src/unsafe-rust/solution.md:146
msgid "\"The Foo Diaries\\n\""
msgstr ""

#: src/unsafe-rust/solution.md:147 src/unsafe-rust/solution.md:154
msgid "\"bar.png\""
msgstr ""

#: src/unsafe-rust/solution.md:147
msgid "\"<PNG>\\n\""
msgstr ""

#: src/unsafe-rust/solution.md:148 src/unsafe-rust/solution.md:154
#, fuzzy
msgid "\"crab.rs\""
msgstr "_hello_rust/src/main.rs_:"

#: src/unsafe-rust/solution.md:148
msgid "\"//! Crab\\n\""
msgstr ""

#: src/android.md:14
msgid ""
"The speaker may mention any of the following given the increased use of Rust "
"in Android:"
msgstr ""

#: src/android.md:17
msgid ""
"Service example: [DNS over HTTP](https://security.googleblog.com/2022/07/dns-"
"over-http3-in-android.html)"
msgstr ""

#: src/android.md:19
msgid ""
"Libraries: [Rutabaga Virtual Graphics Interface](https://crosvm.dev/book/"
"appendix/rutabaga_gfx.html)"
msgstr ""

#: src/android.md:21
msgid ""
"Kernel Drivers: [Binder](https://lore.kernel.org/rust-for-linux/20231101-"
"rust-binder-v1-0-08ba9197f637@google.com/)"
msgstr ""

#: src/android.md:23
msgid ""
"Firmware: [pKVM firmware](https://security.googleblog.com/2023/10/bare-metal-"
"rust-in-android.html)"
msgstr ""

#: src/android/setup.md:19
msgid ""
"Cuttlefish is a reference Android device designed to work on generic Linux "
"desktops.  MacOS support is also planned."
msgstr ""

#: src/android/setup.md:21
msgid ""
"The Cuttlefish system image maintains high fidelity to real devices, and is "
"the ideal emulator to run many Rust use cases."
msgstr ""

#: src/android/build-rules.md:20
msgid "Additional items speaker may mention:"
msgstr ""

#: src/android/build-rules.md:22
msgid ""
"Cargo is not optimized for multi-language repos, and also downloads packages "
"from the internet."
msgstr ""

#: src/android/build-rules.md:24
msgid ""
"For compliance and performance, Android must have crates in-tree.  It must "
"also interop with C/C++/Java code.  Soong fills that gap."
msgstr ""

#: src/android/build-rules.md:26
msgid ""
"Soong has many similarities to Bazel, which is the open-source variant of "
"Blaze (used in google3)."
msgstr ""

#: src/android/build-rules.md:28
msgid ""
"There is a plan to transition [Android](https://source.android.com/docs/"
"setup/build/bazel/introduction), [ChromeOS](https://chromium.googlesource."
"com/chromiumos/bazel/), and [Fuchsia](https://source.android.com/docs/setup/"
"build/bazel/introduction) to Bazel."
msgstr ""

#: src/android/build-rules.md:30
msgid "Learning Bazel-like build rules is useful for all Rust OS developers."
msgstr ""

#: src/android/build-rules.md:32
msgid "Fun fact: Data from Star Trek is a Soong-type Android."
msgstr ""

#: src/android/build-rules/binary.md:10 src/android/build-rules/binary.md:11
#, fuzzy
msgid "\"hello_rust\""
msgstr "_hello_rust_logs/Android.bp_:"

#: src/android/build-rules/binary.md:19 src/android/build-rules/library.md:36
msgid "//! Rust demo.\n"
msgstr ""

#: src/android/build-rules/binary.md:20 src/android/build-rules/library.md:40
msgid "/// Prints a greeting to standard output.\n"
msgstr ""

#: src/android/build-rules/binary.md:23 src/exercises/chromium/build-rules.md:8
#, fuzzy
msgid "\"Hello from Rust!\""
msgstr "Hello World!"

#: src/android/build-rules/library.md:17 src/android/build-rules/library.md:18
#, fuzzy
msgid "\"hello_rust_with_dep\""
msgstr "_hello_rust_logs/Android.bp_:"

#: src/android/build-rules/library.md:21 src/android/build-rules/library.md:27
msgid "\"libgreetings\""
msgstr ""

#: src/android/build-rules/library.md:22
msgid "\"libtextwrap\""
msgstr ""

#: src/android/build-rules/library.md:28
msgid "\"greetings\""
msgstr ""

#: src/android/build-rules/library.md:50
msgid "//! Greeting library.\n"
msgstr ""

#: src/android/build-rules/library.md:51
msgid "/// Greet `name`.\n"
msgstr ""

#: src/android/build-rules/library.md:54
msgid "\"Hello {name}, it is very nice to meet you!\""
msgstr ""

#: src/android/aidl/interface.md:9 src/android/aidl/changing.md:8
msgid "/** Birthday service interface. */"
msgstr ""

#: src/android/aidl/interface.md:12 src/android/aidl/changing.md:11
msgid "/** Generate a Happy Birthday message. */"
msgstr ""

#: src/android/aidl/interface.md:21
#, fuzzy
msgid "\"com.example.birthdayservice\""
msgstr ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"

#: src/android/aidl/interface.md:25
msgid "// Rust is not enabled by default\n"
msgstr ""

#: src/android/aidl/implementation.md:8
msgid "//! Implementation of the `IBirthdayService` AIDL interface.\n"
msgstr ""

#: src/android/aidl/implementation.md:20
msgid "\"Happy Birthday {name}, congratulations with the {years} years!\""
msgstr ""

#: src/android/aidl/implementation.md:34 src/android/aidl/server.md:36
#: src/android/aidl/client.md:45
#, fuzzy
msgid "\"com.example.birthdayservice-rust\""
msgstr ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"

#: src/android/aidl/implementation.md:35 src/android/aidl/server.md:37
#: src/android/aidl/client.md:46
msgid "\"libbinder_rs\""
msgstr ""

#: src/android/aidl/server.md:8 src/android/aidl/client.md:8
#, fuzzy
msgid "//! Birthday service.\n"
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/aidl/server.md:14
msgid "/// Entry point for birthday service.\n"
msgstr ""

#: src/android/aidl/server.md:23
msgid "\"Failed to register service\""
msgstr ""

#: src/android/aidl/client.md:13
#, fuzzy
msgid "/// Connect to the BirthdayService.\n"
msgstr "서비스 구현"

#: src/android/aidl/client.md:18
#, fuzzy
msgid "/// Call the birthday service.\n"
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/aidl/client.md:30
msgid "\"Failed to connect to BirthdayService\""
msgstr ""

#: src/android/aidl/client.md:32
msgid "\"{msg}\""
msgstr ""

#: src/android/logging.md:14
#, fuzzy
msgid "\"liblog_rust\""
msgstr "_hello_rust_logs/Android.bp_:"

#: src/android/logging.md:15
msgid "\"liblogger\""
msgstr ""

#: src/android/logging.md:24
msgid "//! Rust logging demo.\n"
msgstr ""

#: src/android/logging.md:27
msgid "/// Logs a greeting.\n"
msgstr ""

#: src/android/logging.md:32
#, fuzzy
msgid "\"rust\""
msgstr "Rustdoc"

#: src/android/logging.md:35
msgid "\"Starting program.\""
msgstr ""

#: src/android/logging.md:36
msgid "\"Things are going fine.\""
msgstr ""

#: src/android/logging.md:37
#, fuzzy
msgid "\"Something went wrong!\""
msgstr "참고사항:"

#: src/android/interoperability/with-c.md:16
msgid "\"{x}, {abs_x}\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:8
msgid "_interoperability/bindgen/libbirthday.h_:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:19
msgid "_interoperability/bindgen/libbirthday.c_:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:22
msgid "<stdio.h>"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:23
#: src/android/interoperability/with-c/bindgen.md:50
#, fuzzy
msgid "\"libbirthday.h\""
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/interoperability/with-c/bindgen.md:26
#: src/android/interoperability/with-c/bindgen.md:29
msgid "\"+--------------\\n\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:27
msgid "\"| Happy Birthday %s!\\n\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:28
msgid "\"| Congratulations with the %i years!\\n\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:35
#: src/android/interoperability/with-c/bindgen.md:55
#: src/android/interoperability/with-c/bindgen.md:69
#: src/android/interoperability/with-c/bindgen.md:108
msgid "_interoperability/bindgen/Android.bp_:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:39
#: src/android/interoperability/with-c/bindgen.md:63
#, fuzzy
msgid "\"libbirthday\""
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/interoperability/with-c/bindgen.md:40
#, fuzzy
msgid "\"libbirthday.c\""
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/interoperability/with-c/bindgen.md:47
msgid "_interoperability/bindgen/libbirthday_wrapper.h_:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:59
#: src/android/interoperability/with-c/bindgen.md:75
#, fuzzy
msgid "\"libbirthday_bindgen\""
msgstr "`rust_bindgen`"

#: src/android/interoperability/with-c/bindgen.md:61
#, fuzzy
msgid "\"libbirthday_wrapper.h\""
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/interoperability/with-c/bindgen.md:62
#, fuzzy
msgid "\"bindings\""
msgstr "예제"

#: src/android/interoperability/with-c/bindgen.md:73
#, fuzzy
msgid "\"print_birthday_card\""
msgstr "_birthday_service/src/client.rs_:"

#: src/android/interoperability/with-c/bindgen.md:79
msgid "_interoperability/bindgen/main.rs_:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:82
msgid "//! Bindgen demo.\n"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:112
#: src/android/interoperability/with-c/bindgen.md:114
#, fuzzy
msgid "\"libbirthday_bindgen_test\""
msgstr "`rust_bindgen`"

#: src/android/interoperability/with-c/bindgen.md:113
#, fuzzy
msgid "\":libbirthday_bindgen\""
msgstr "`rust_bindgen`"

#: src/android/interoperability/with-c/bindgen.md:115
#, fuzzy
msgid "\"general-tests\""
msgstr "안전하지 않은 러스트"

#: src/android/interoperability/with-c/bindgen.md:117
#: src/android/interoperability/with-c/bindgen.md:118
msgid "\"none\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:117
msgid "// Generated file, skip linting\n"
msgstr ""

#: src/android/interoperability/with-c/rust.md:5
msgid "_interoperability/rust/libanalyze/analyze.rs_"
msgstr ""

#: src/android/interoperability/with-c/rust.md:8
msgid "//! Rust FFI demo.\n"
msgstr ""

#: src/android/interoperability/with-c/rust.md:12
msgid "/// Analyze the numbers.\n"
msgstr ""

#: src/android/interoperability/with-c/rust.md:17
msgid "\"x ({x}) is smallest!\""
msgstr ""

#: src/android/interoperability/with-c/rust.md:19
msgid "\"y ({y}) is probably larger than x ({x})\""
msgstr ""

#: src/android/interoperability/with-c/rust.md:24
msgid "_interoperability/rust/libanalyze/analyze.h_"
msgstr ""

#: src/android/interoperability/with-c/rust.md:37
msgid "_interoperability/rust/libanalyze/Android.bp_"
msgstr ""

#: src/android/interoperability/with-c/rust.md:41
#: src/android/interoperability/with-c/rust.md:68
msgid "\"libanalyze_ffi\""
msgstr ""

#: src/android/interoperability/with-c/rust.md:42
msgid "\"analyze_ffi\""
msgstr ""

#: src/android/interoperability/with-c/rust.md:43
#, fuzzy
msgid "\"analyze.rs\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/interoperability/with-c/rust.md:50
msgid "_interoperability/rust/analyze/main.c_"
msgstr ""

#: src/android/interoperability/with-c/rust.md:53
msgid "\"analyze.h\""
msgstr ""

#: src/android/interoperability/with-c/rust.md:62
msgid "_interoperability/rust/analyze/Android.bp_"
msgstr ""

#: src/android/interoperability/with-c/rust.md:66
msgid "\"analyze_numbers\""
msgstr ""

#: src/android/interoperability/with-c/rust.md:67
#, fuzzy
msgid "\"main.c\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/interoperability/cpp/bridge.md:3
msgid ""
"CXX relies on a description of the function signatures that will be exposed "
"from each language to the other. You provide this description using extern "
"blocks in a Rust module annotated with the `#[cxx::bridge]` attribute macro."
msgstr ""

#: src/android/interoperability/cpp/bridge.md:9
msgid "\"org::blobstore\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md:11
msgid "// Shared structs with fields visible to both languages.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md:17
#: src/android/interoperability/cpp/generated-cpp.md:6
msgid "// Rust types and signatures exposed to C++.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md:24
#: src/android/interoperability/cpp/cpp-bridge.md:6
msgid "// C++ types and signatures exposed to Rust.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md:25
#: src/android/interoperability/cpp/cpp-bridge.md:7
#: src/android/interoperability/cpp/cpp-exception.md:6
#: src/chromium/interoperability-with-cpp/example-bindings.md:15
msgid "\"C++\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md:26
#: src/android/interoperability/cpp/cpp-bridge.md:8
msgid "\"include/blobstore.h\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md:40
msgid "The bridge is generally declared in an `ffi` module within your crate."
msgstr ""

#: src/android/interoperability/cpp/bridge.md:41
msgid ""
"From the declarations made in the bridge module, CXX will generate matching "
"Rust and C++ type/function definitions in order to expose those items to "
"both languages."
msgstr ""

#: src/android/interoperability/cpp/bridge.md:44
msgid ""
"To view the generated Rust code, use [cargo-expand](https://github.com/"
"dtolnay/cargo-expand) to view the expanded proc macro. For most of the "
"examples you would use `cargo expand ::ffi` to expand just the `ffi` module "
"(though this doesn't apply for Android projects)."
msgstr ""

#: src/android/interoperability/cpp/bridge.md:47
msgid "To view the generated C++ code, look in `target/cxxbridge`."
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md:1
#, fuzzy
msgid "Rust Bridge Declarations"
msgstr "러스트 바이너리"

#: src/android/interoperability/cpp/rust-bridge.md:7
msgid "// Opaque type\n"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md:8
msgid "// Method on `MyType`\n"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md:28
msgid ""
"Items declared in the `extern \"Rust\"` reference items that are in scope in "
"the parent module."
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md:30
msgid ""
"The CXX code generator uses your `extern \"Rust\"` section(s) to produce a C+"
"+ header file containing the corresponding C++ declarations. The generated "
"header has the same path as the Rust source file containing the bridge, "
"except with a .rs.h file extension."
msgstr ""

#: src/android/interoperability/cpp/generated-cpp.md:15
msgid "Results in (roughly) the following C++:"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:1
msgid "C++ Bridge Declarations"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:20
msgid "Results in (roughly) the following Rust:"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:30
msgid "\"org$blobstore$cxxbridge1$new_blobstore_client\""
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:39
msgid "\"org$blobstore$cxxbridge1$BlobstoreClient$put\""
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:56
msgid ""
"The programmer does not need to promise that the signatures they have typed "
"in are accurate. CXX performs static assertions that the signatures exactly "
"correspond with what is declared in C++."
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:59
msgid ""
"`unsafe extern` blocks allow you to declare C++ functions that are safe to "
"call from Rust."
msgstr ""

#: src/android/interoperability/cpp/shared-types.md:9
msgid "// A=1, J=11, Q=12, K=13\n"
msgstr ""

#: src/android/interoperability/cpp/shared-types.md:23
msgid "Only C-like (unit) enums are supported."
msgstr ""

#: src/android/interoperability/cpp/shared-types.md:24
msgid ""
"A limited number of traits are supported for `#[derive()]` on shared types. "
"Corresponding functionality is also generated for the C++ code, e.g. if you "
"derive `Hash` also generates an implementation of `std::hash` for the "
"corresponding C++ type."
msgstr ""

#: src/android/interoperability/cpp/shared-enums.md:33
#, fuzzy
msgid "Generated C++:"
msgstr "안전하지 않은 러스트"

#: src/android/interoperability/cpp/shared-enums.md:46
msgid ""
"On the Rust side, the code generated for shared enums is actually a struct "
"wrapping a numeric value. This is because it is not UB in C++ for an enum "
"class to hold a value different from all of the listed variants, and our "
"Rust representation needs to have the same behavior."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:13
msgid "\"fallible1 requires depth > 0\""
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:16
msgid "\"Success!\""
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:22
msgid ""
"Rust functions that return `Result` are translated to exceptions on the C++ "
"side."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:24
msgid ""
"The exception thrown will always be of type `rust::Error`, which primarily "
"exposes a way to get the error message string. The error message will come "
"from the error type's `Display` impl."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:27
msgid ""
"A panic unwinding from Rust to C++ will always cause the process to "
"immediately terminate."
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md:7
msgid "\"example/include/example.h\""
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md:14
msgid "\"Error: {}\""
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md:22
msgid ""
"C++ functions declared to return a `Result` will catch any thrown exception "
"on the C++ side and return it as an `Err` value to the calling Rust function."
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md:24
msgid ""
"If an exception is thrown from an extern \"C++\" function that is not "
"declared by the CXX bridge to return `Result`, the program calls C++'s `std::"
"terminate`. The behavior is equivalent to the same exception being thrown "
"through a `noexcept` C++ function."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:7
#, fuzzy
msgid "`std::string`"
msgstr "`rust_bindgen`"

#: src/android/interoperability/cpp/type-mapping.md:8
msgid "`&[T]`/`&mut [T]`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:9
#, fuzzy
msgid "`rust::Box<T>`"
msgstr "`mpsc::Receiver<T>`"

#: src/android/interoperability/cpp/type-mapping.md:10
msgid "`UniquePtr<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:10
#, fuzzy
msgid "`std::unique_ptr<T>`"
msgstr "`mpsc::Receiver<T>`"

#: src/android/interoperability/cpp/type-mapping.md:16
msgid ""
"These types can be used in the fields of shared structs and the arguments "
"and returns of extern functions."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:18
msgid ""
"Note that Rust's `String` does not map directly to `std::string`. There are "
"a few reasons for this:"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:20
msgid ""
"`std::string` does not uphold the UTF-8 invariant that `String` requires."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:21
msgid ""
"The two types have different layouts in memory and so can't be passed "
"directly between languages."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:23
msgid ""
"`std::string` requires move constructors that don't match Rust's move "
"semantics, so a `std::string` can't be passed by value to Rust."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:1
#: src/android/interoperability/cpp/android-cpp-genrules.md:1
#: src/android/interoperability/cpp/android-build-rust.md:1
#, fuzzy
msgid "Building in Android"
msgstr "1일차 개요"

#: src/android/interoperability/cpp/android-build-cpp.md:3
msgid ""
"Create a `cc_library_static` to build the C++ library, including the CXX "
"generated header and source file."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:8
#: src/android/interoperability/cpp/android-build-rust.md:10
msgid "\"libcxx_test_cpp\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:9
msgid "\"cxx_test.cpp\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:11
msgid "\"cxx-bridge-header\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:12
#: src/android/interoperability/cpp/android-cpp-genrules.md:10
msgid "\"libcxx_test_bridge_header\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:14
#: src/android/interoperability/cpp/android-cpp-genrules.md:19
msgid "\"libcxx_test_bridge_code\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:20
msgid ""
"Point out that `libcxx_test_bridge_header` and `libcxx_test_bridge_code` are "
"the dependencies for the CXX-generated C++ bindings. We'll show how these "
"are setup on the next slide."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:23
msgid ""
"Note that you also need to depend on the `cxx-bridge-header` library in "
"order to pull in common CXX definitions."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:25
msgid ""
"Full docs for using CXX in Android can be found in [the Android docs]"
"(https://source.android.com/docs/setup/build/rust/building-rust-modules/"
"android-rust-patterns#rust-cpp-interop-using-cxx). You may want to share "
"that link with the class so that students know where they can find these "
"instructions again in the future."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:3
msgid ""
"Create two genrules: One to generate the CXX header, and one to generate the "
"CXX source file. These are then used as inputs to the `cc_library_static`."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:7
msgid ""
"// Generate a C++ header containing the C++ bindings\n"
"// to the Rust exported functions in lib.rs.\n"
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:11
#: src/android/interoperability/cpp/android-cpp-genrules.md:20
msgid "\"cxxbridge\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:12
msgid "\"$(location cxxbridge) $(in) --header > $(out)\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:13
#: src/android/interoperability/cpp/android-cpp-genrules.md:22
#: src/android/interoperability/cpp/android-build-rust.md:8
#, fuzzy
msgid "\"lib.rs\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/interoperability/cpp/android-cpp-genrules.md:14
#, fuzzy
msgid "\"lib.rs.h\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/interoperability/cpp/android-cpp-genrules.md:16
msgid "// Generate the C++ code that Rust calls into.\n"
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:21
msgid "\"$(location cxxbridge) $(in) > $(out)\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:23
#, fuzzy
msgid "\"lib.rs.cc\""
msgstr "_hello_rust/src/main.rs_:"

#: src/android/interoperability/cpp/android-cpp-genrules.md:29
msgid ""
"The `cxxbridge` tool is a standalone tool that generates the C++ side of the "
"bridge module. It is included in Android and available as a Soong tool."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:31
msgid ""
"By convention, if your Rust source file is `lib.rs` your header file will be "
"named `lib.rs.h` and your source file will be named `lib.rs.cc`. This naming "
"convention isn't enforced, though."
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md:3
msgid ""
"Create a `rust_binary` that depends on `libcxx` and your `cc_library_static`."
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md:7
msgid "\"cxx_test\""
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md:9
msgid "\"libcxx\""
msgstr ""

#: src/android/interoperability/java.md:12
msgid "//! Rust <-> Java FFI demo.\n"
msgstr ""

#: src/android/interoperability/java.md:17
#, fuzzy
msgid "/// HelloWorld::hello method implementation.\n"
msgstr "서비스 구현"

#: src/android/interoperability/java.md:20
#, fuzzy
msgid "\"system\""
msgstr "러스트 생태계"

#: src/android/interoperability/java.md:26
#, fuzzy
msgid "\"Hello, {input}!\""
msgstr "Hello World!"

#: src/android/interoperability/java.md:36
#: src/android/interoperability/java.md:69
msgid "\"libhello_jni\""
msgstr ""

#: src/android/interoperability/java.md:37
#: src/android/interoperability/java.md:52
#, fuzzy
msgid "\"hello_jni\""
msgstr "Hello World!"

#: src/android/interoperability/java.md:39
msgid "\"libjni\""
msgstr ""

#: src/android/interoperability/java.md:66
#, fuzzy
msgid "\"helloworld_jni\""
msgstr "Hello World!"

#: src/chromium.md:3
msgid ""
"Rust is supported for third-party libraries in Chromium, with first-party "
"glue code to connect between Rust and existing Chromium C++ code."
msgstr ""

#: src/chromium.md:6
msgid ""
"Today, we'll call into Rust to do something silly with strings. If you've "
"got a corner of the code where you're displaying a UTF8 string to the user, "
"feel free to follow this recipe in your part of the codebase instead of the "
"exact part we talk about."
msgstr ""

#: src/chromium/setup.md:3
msgid ""
"Make sure you can build and run Chromium. Any platform and set of build "
"flags is OK, so long as your code is relatively recent (commit position "
"1223636 onwards, corresponding to November 2023):"
msgstr ""

#: src/chromium/setup.md:13
msgid ""
"(A component, debug build is recommended for quickest iteration time. This "
"is the default!)"
msgstr ""

#: src/chromium/setup.md:16
msgid ""
"See [How to build Chromium](https://www.chromium.org/developers/how-tos/get-"
"the-code/) if you aren't already at that point. Be warned: setting up to "
"build Chromium takes time."
msgstr ""

#: src/chromium/setup.md:20
msgid "It's also recommended that you have Visual Studio code installed."
msgstr ""

#: src/chromium/setup.md:22
#, fuzzy
msgid "About the exercises"
msgstr "빌드 규칙"

#: src/chromium/setup.md:24
msgid ""
"This part of the course has a series of exercises which build on each other. "
"We'll be doing them spread throughout the course instead of just at the end. "
"If you don't have time to complete a certain part, don't worry: you can "
"catch up in the next slot."
msgstr ""

#: src/chromium/cargo.md:3
msgid ""
"Rust community typically uses `cargo` and libraries from [crates.io](https://"
"crates.io/). Chromium is built using `gn` and `ninja` and a curated set of "
"dependencies."
msgstr ""

#: src/chromium/cargo.md:6
msgid "When writing code in Rust, your choices are:"
msgstr ""

#: src/chromium/cargo.md:8
msgid ""
"Use `gn` and `ninja` with the help of the templates from `//build/rust/*."
"gni` (e.g. `rust_static_library` that we'll meet later). This uses "
"Chromium's audited toolchain and crates."
msgstr ""

#: src/chromium/cargo.md:11
msgid ""
"Use `cargo`, but [restrict yourself to Chromium's audited toolchain and "
"crates](https://chromium.googlesource.com/chromium/src/+/refs/heads/main/"
"docs/rust.md#Using-cargo)"
msgstr ""

#: src/chromium/cargo.md:12
msgid ""
"Use `cargo`, trusting a [toolchain](https://rustup.rs/) and/or [crates "
"downloaded from the internet](https://crates.io/)"
msgstr ""

#: src/chromium/cargo.md:14
msgid ""
"From here on we'll be focusing on `gn` and `ninja`, because this is how Rust "
"code can be built into the Chromium browser.  At the same time, Cargo is an "
"important part of the Rust ecosystem and you should keep it in your toolbox."
msgstr ""

#: src/chromium/cargo.md:20
msgid "Split into small groups and:"
msgstr ""

#: src/chromium/cargo.md:22
msgid ""
"Brainstorm scenarios where `cargo` may offer an advantage and assess the "
"risk profile of these scenarios."
msgstr ""

#: src/chromium/cargo.md:24
msgid ""
"Discuss which tools, libraries, and groups of people need to be trusted when "
"using `gn` and `ninja`, offline `cargo`, etc."
msgstr ""

#: src/chromium/cargo.md:29
msgid ""
"Ask students to avoid peeking at the speaker notes before completing the "
"exercise.  Assuming folks taking the course are physically together, ask "
"them to discuss in small groups of 3-4 people."
msgstr ""

#: src/chromium/cargo.md:33
msgid ""
"Notes/hints related to the first part of the exercise (\"scenarios where "
"Cargo may offer an advantage\"):"
msgstr ""

#: src/chromium/cargo.md:36
msgid ""
"It's fantastic that when writing a tool, or prototyping a part of Chromium, "
"one has access to the rich ecosystem of crates.io libraries.  There is a "
"crate for almost anything and they are usually quite pleasant to use. "
"(`clap` for command-line parsing, `serde` for serializing/deserializing to/"
"from various formats, `itertools` for working with iterators, etc.)."
msgstr ""

#: src/chromium/cargo.md:42
msgid ""
"`cargo` makes it easy to try a library (just add a single line to `Cargo."
"toml` and start writing code)"
msgstr ""

#: src/chromium/cargo.md:44
msgid ""
"It may be worth comparing how CPAN helped make `perl` a popular choice. Or "
"comparing with `python` + `pip`."
msgstr ""

#: src/chromium/cargo.md:47
msgid ""
"Development experience is made really nice not only by core Rust tools (e.g. "
"using `rustup` to switch to a different `rustc` version when testing a crate "
"that needs to work on nightly, current stable, and older stable) but also by "
"an ecosystem of third-party tools (e.g. Mozilla provides `cargo vet` for "
"streamlining and sharing security audits;  `criterion` crate gives a "
"streamlined way to run benchmarks)."
msgstr ""

#: src/chromium/cargo.md:54
msgid ""
"`cargo` makes it easy to add a tool via `cargo install --locked cargo-vet`."
msgstr ""

#: src/chromium/cargo.md:55
msgid "It may be worth comparing with Chrome Extensions or VScode extensions."
msgstr ""

#: src/chromium/cargo.md:57
msgid ""
"Broad, generic examples of projects where `cargo` may be the right choice:"
msgstr ""

#: src/chromium/cargo.md:59
msgid ""
"Perhaps surprisingly, Rust is becoming increasingly popular in the industry "
"for writing command line tools.  The breadth and ergonomics of libraries is "
"comparable to Python, while being more robust (thanks to the rich "
"typesystem) and running faster (as a compiled, rather than interpreted "
"language)."
msgstr ""

#: src/chromium/cargo.md:64
msgid ""
"Participating in the Rust ecosystem requires using standard Rust tools like "
"Cargo. Libraries that want to get external contributions, and want to be "
"used outside of Chromium (e.g. in Bazel or Android/Soong build environments) "
"should probably use Cargo."
msgstr ""

#: src/chromium/cargo.md:69
msgid "Examples of Chromium-related projects that are `cargo`\\-based:"
msgstr ""

#: src/chromium/cargo.md:70
msgid ""
"`serde_json_lenient` (experimented with in other parts of Google which "
"resulted in PRs with performance improvements)"
msgstr ""

#: src/chromium/cargo.md:72
msgid "Fontations libraries like `font-types`"
msgstr ""

#: src/chromium/cargo.md:73
msgid ""
"`gnrt` tool (we will meet it later in the course) which depends on `clap` "
"for command-line parsing and on `toml` for configuration files."
msgstr ""

#: src/chromium/cargo.md:75
msgid ""
"Disclaimer: a unique reason for using `cargo` was unavailability of `gn` "
"when building and bootstrapping Rust standard library when building Rust "
"toolchain.)"
msgstr ""

#: src/chromium/cargo.md:78
msgid ""
"`run_gnrt.py` uses Chromium's copy of `cargo` and `rustc`. `gnrt` depends on "
"third-party libraries downloaded from the internet, by `run_gnrt.py` asks "
"`cargo` that only `--locked` content is allowed via `Cargo.lock`.)"
msgstr ""

#: src/chromium/cargo.md:82
msgid ""
"Students may identify the following items as being implicitly or explicitly "
"trusted:"
msgstr ""

#: src/chromium/cargo.md:85
msgid ""
"`rustc` (the Rust compiler) which in turn depends on the LLVM libraries, the "
"Clang compiler, the `rustc` sources (fetched from GitHub, reviewed by Rust "
"compiler team), binary Rust compiler downloaded for bootstrapping"
msgstr ""

#: src/chromium/cargo.md:88
msgid ""
"`rustup` (it may be worth pointing out that `rustup` is developed under the "
"umbrella of the https://github.com/rust-lang/ organization - same as `rustc`)"
msgstr ""

#: src/chromium/cargo.md:90
msgid "`cargo`, `rustfmt`, etc."
msgstr ""

#: src/chromium/cargo.md:91
msgid ""
"Various internal infrastructure (bots that build `rustc`, system for "
"distributing the prebuilt toolchain to Chromium engineers, etc.)"
msgstr ""

#: src/chromium/cargo.md:93
msgid "Cargo tools like `cargo audit`, `cargo vet`, etc."
msgstr ""

#: src/chromium/cargo.md:94
msgid ""
"Rust libraries vendored into `//third_party/rust` (audited by "
"security@chromium.org)"
msgstr ""

#: src/chromium/cargo.md:96
msgid "Other Rust libraries (some niche, some quite popular and commonly used)"
msgstr ""

#: src/chromium/policy.md:1
msgid "Chromium Rust policy"
msgstr ""

#: src/chromium/policy.md:3
msgid ""
"Chromium does not yet allow first-party Rust except in rare cases as "
"approved by Chromium's [Area Tech Leads](https://source.chromium.org/"
"chromium/chromium/src/+/main:ATL_OWNERS)."
msgstr ""

#: src/chromium/policy.md:6
msgid ""
"Chromium's policy on third party libraries is outlined [here](https://"
"chromium.googlesource.com/chromium/src/+/main/docs/adding_to_third_party."
"md#rust) - Rust is allowed for third party libraries under various "
"circumstances, including if they're the best option for performance or for "
"security."
msgstr ""

#: src/chromium/policy.md:10
msgid ""
"Very few Rust libraries directly expose a C/C++ API, so that means that "
"nearly all such libraries will require a small amount of first-party glue "
"code."
msgstr ""

#: src/chromium/policy.md:28
msgid ""
"First-party Rust glue code for a particular third-party crate should "
"normally be kept in `third_party/rust/<crate>/<version>/wrapper`."
msgstr ""

#: src/chromium/policy.md:31
msgid "Because of this, today's course will be heavily focused on:"
msgstr ""

#: src/chromium/policy.md:33
msgid "Bringing in third-party Rust libraries (\"crates\")"
msgstr ""

#: src/chromium/policy.md:34
msgid "Writing glue code to be able to use those crates from Chromium C++."
msgstr ""

#: src/chromium/policy.md:36
msgid "If this policy changes over time, the course will evolve to keep up."
msgstr ""

#: src/chromium/build-rules.md:3
msgid ""
"Rust code is usually built using `cargo`. Chromium builds with `gn` and "
"`ninja` for efficiency --- its static rules allow maximum parallelism. Rust "
"is no exception."
msgstr ""

#: src/chromium/build-rules.md:6
#, fuzzy
msgid "Adding Rust code to Chromium"
msgstr "Rust on Exercism"

#: src/chromium/build-rules.md:8
msgid ""
"In some existing Chromium `BUILD.gn` file, declare a `rust_static_library`:"
msgstr ""

#: src/chromium/build-rules.md:10
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules.md:19
msgid ""
"You can also add `deps` on other Rust targets. Later we'll use this to "
"depend upon third party code."
msgstr ""

#: src/chromium/build-rules.md:24
msgid ""
"You must specify _both_ the crate root, _and_ a full list of sources. The "
"`crate_root` is the file given to the Rust compiler representing the root "
"file of the compilation unit --- typically `lib.rs`. `sources` is a complete "
"list of all source files which `ninja` needs in order to determine when "
"rebuilds are necessary."
msgstr ""

#: src/chromium/build-rules.md:30
msgid ""
"(There's no such thing as a Rust `source_set`, because in Rust, an entire "
"crate is a compilation unit. A `static_library` is the smallest unit.)"
msgstr ""

#: src/chromium/build-rules.md:33
msgid ""
"Students might be wondering why we need a gn template, rather than using "
"[gn's built-in support for Rust static libraries](https://gn.googlesource."
"com/gn/+/main/docs/reference.md#func_static_library). The answer is that "
"this template provides support for CXX interop, Rust features, and unit "
"tests, some of which we'll use later."
msgstr ""

#: src/chromium/build-rules/unsafe.md:1
msgid "Including `unsafe` Rust code"
msgstr ""

#: src/chromium/build-rules/unsafe.md:3
msgid ""
"Unsafe Rust code is forbidden in `rust_static_library` by default --- it "
"won't compile. If you need unsafe Rust code, add `allow_unsafe = true` to "
"the gn target. (Later in the course we'll see circumstances where this is "
"necessary.)"
msgstr ""

#: src/chromium/build-rules/unsafe.md:7
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [\n"
"    \"lib.rs\",\n"
"    \"hippopotamus.rs\"\n"
"  ]\n"
"  allow_unsafe = true\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules/depending.md:3
msgid "Simply add the above target to the `deps` of some Chromium C++ target."
msgstr ""

#: src/chromium/build-rules/depending.md:5
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"}\n"
"\n"
"# or source_set, static_library etc.\n"
"component(\"preexisting_cpp\") {\n"
"  deps = [ \":my_rust_lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules/vscode.md:3
msgid ""
"Types are elided in Rust code, which makes a good IDE even more useful than "
"for C++. Visual Studio code works well for Rust in Chromium. To use it,"
msgstr ""

#: src/chromium/build-rules/vscode.md:6
msgid ""
"Ensure your VSCode has the `rust-analyzer` extension, not earlier forms of "
"Rust support"
msgstr ""

#: src/chromium/build-rules/vscode.md:8
msgid ""
"`gn gen out/Debug --export-rust-project` (or equivalent for your output "
"directory)"
msgstr ""

#: src/chromium/build-rules/vscode.md:10
msgid "`ln -s out/Debug/rust-project.json rust-project.json`"
msgstr ""

#: src/chromium/build-rules/vscode.md:16
msgid ""
"A demo of some of the code annotation and exploration features of rust-"
"analyzer might be beneficial if the audience are naturally skeptical of IDEs."
msgstr ""

#: src/chromium/build-rules/vscode.md:19
msgid ""
"The following steps may help with the demo (but feel free to instead use a "
"piece of Chromium-related Rust that you are most familiar with):"
msgstr ""

#: src/chromium/build-rules/vscode.md:22
msgid "Open `components/qr_code_generator/qr_code_generator_ffi_glue.rs`"
msgstr ""

#: src/chromium/build-rules/vscode.md:23
msgid ""
"Place the cursor over the `QrCode::new` call (around line 26) in "
"\\`qr_code_generator_ffi_glue.rs"
msgstr ""

#: src/chromium/build-rules/vscode.md:25
msgid ""
"Demo **show documentation** (typical bindings: vscode = ctrl k i;  vim/CoC = "
"K)."
msgstr ""

#: src/chromium/build-rules/vscode.md:26
msgid ""
"Demo **go to definition** (typical bindings: vscode = F12;  vim/CoC = g d). "
"(This will take you to `//third_party/rust/.../qr_code-.../src/lib.rs`.)"
msgstr ""

#: src/chromium/build-rules/vscode.md:28
msgid ""
"Demo **outline** and navigate to the `QrCode::with_bits` method (around line "
"164; the outline is in the file explorer pane in vscode; typical vim/CoC "
"bindings = space o)"
msgstr ""

#: src/chromium/build-rules/vscode.md:31
msgid ""
"Demo **type annotations** (there are quote a few nice examples in the "
"`QrCode::with_bits` method)"
msgstr ""

#: src/chromium/build-rules/vscode.md:34
msgid ""
"It may be worth pointing out that `gn gen ... --export-rust-project` will "
"need to be rerun after editing `BUILD.gn` files (which we will do a few "
"times throughout the exercises in this session)."
msgstr ""

#: src/exercises/chromium/build-rules.md:3
msgid ""
"In your Chromium build, add a new Rust target to `//ui/base/BUILD.gn` "
"containing:"
msgstr ""

#: src/exercises/chromium/build-rules.md:11
msgid ""
"**Important**: note that `no_mangle` here is considered a type of unsafety "
"by the Rust compiler, so you'll need to to allow unsafe code in your `gn` "
"target."
msgstr ""

#: src/exercises/chromium/build-rules.md:15
msgid ""
"Add this new Rust target as a dependency of `//ui/base:base`. Declare this "
"function at the top of `ui/base/resource/resource_bundle.cc` (later, we'll "
"see how this can be automated by bindings generation tools):"
msgstr ""

#: src/exercises/chromium/build-rules.md:22
msgid ""
"Call this function from somewhere in `ui/base/resource/resource_bundle.cc` - "
"we suggest the top of `ResourceBundle::MaybeMangleLocalizedString`. Build "
"and run Chromium, and ensure that \"Hello from Rust!\" is printed lots of "
"times."
msgstr ""

#: src/exercises/chromium/build-rules.md:26
msgid ""
"If you use VSCode, now set up Rust to work well in VSCode. It will be useful "
"in subsequent exercises. If you've succeeded, you will be able to use right-"
"click \"Go to definition\" on `println!`."
msgstr ""

#: src/exercises/chromium/build-rules.md:30
#: src/exercises/chromium/interoperability-with-cpp.md:47
msgid "Where to find help"
msgstr ""

#: src/exercises/chromium/build-rules.md:32
msgid ""
"The options available to the [`rust_static_library` gn template](https://"
"source.chromium.org/chromium/chromium/src/+/main:build/rust/"
"rust_static_library.gni;l=16)"
msgstr ""

#: src/exercises/chromium/build-rules.md:33
msgid ""
"Information about [`#[no_mangle]`](https://doc.rust-lang.org/beta/reference/"
"abi.html#the-no_mangle-attribute)"
msgstr ""

#: src/exercises/chromium/build-rules.md:34
msgid ""
"Information about [`extern \"C\"`](https://doc.rust-lang.org/std/keyword."
"extern.html)"
msgstr ""

#: src/exercises/chromium/build-rules.md:35
msgid ""
"Information about gn's [`--export-rust-project`](https://gn.googlesource.com/"
"gn/+/main/docs/reference.md#compilation-database) switch"
msgstr ""

#: src/exercises/chromium/build-rules.md:36
msgid ""
"[How to install rust-analyzer in VSCode](https://code.visualstudio.com/docs/"
"languages/rust)"
msgstr ""

#: src/exercises/chromium/build-rules.md:42
msgid ""
"This example is unusual because it boils down to the lowest-common-"
"denominator interop language, C. Both C++ and Rust can natively declare and "
"call C ABI functions. Later in the course, we'll connect C++ directly to "
"Rust."
msgstr ""

#: src/exercises/chromium/build-rules.md:46
msgid ""
"`allow_unsafe = true` is required here because `#[no_mangle]` might allow "
"Rust to generate two functions with the same name, and Rust can no longer "
"guarantee that the right one is called."
msgstr ""

#: src/exercises/chromium/build-rules.md:50
msgid ""
"If you need a pure Rust executable, you can also do that using the "
"`rust_executable` gn template."
msgstr ""

#: src/chromium/interoperability-with-cpp.md:3
msgid ""
"The Rust community offers multiple options for C++/Rust interop, with new "
"tools being developed all the time. At the moment, Chromium uses a tool "
"called CXX."
msgstr ""

#: src/chromium/interoperability-with-cpp.md:6
msgid ""
"You describe your whole language boundary in an interface definition "
"language (which looks a lot like Rust) and then CXX tools generate "
"declarations for functions and types in both Rust and C++."
msgstr ""

#: src/chromium/interoperability-with-cpp.md:21
msgid ""
"Talk through the diagram. Explain that behind the scenes, this is doing just "
"the same as you previously did. Point out that automating the process has "
"the following benefits:"
msgstr ""

#: src/chromium/interoperability-with-cpp.md:25
msgid ""
"The tool guarantees that the C++ and Rust sides match (e.g. you get compile "
"errors if the `#[cxx::bridge]` doesn't match the actual C++ or Rust "
"definitions, but with out-of-sync manual bindings you'd get Undefined "
"Behavior)"
msgstr ""

#: src/chromium/interoperability-with-cpp.md:29
msgid ""
"The tool automates generation of FFI thunks (small, C-ABI-compatible, free "
"functions) for non-C features (e.g. enabling FFI calls into Rust or C++ "
"methods; manual bindings would require authoring such top-level, free "
"functions manually)"
msgstr ""

#: src/chromium/interoperability-with-cpp.md:34
msgid "The tool and the library can handle a set of core types - for example:"
msgstr ""

#: src/chromium/interoperability-with-cpp.md:35
msgid ""
"`&[T]` can be passed across the FFI boundary, even though it doesn't "
"guarantee any particular ABI or memory layout. With manual bindings `std::"
"span<T>` / `&[T]` have to be manually destructured and rebuilt out of a "
"pointer and length - this is error-prone given that each language represents "
"empty slices slightly differently)"
msgstr ""

#: src/chromium/interoperability-with-cpp.md:40
msgid ""
"Smart pointers like `std::unique_ptr<T>`, `std::shared_ptr<T>`, and/or `Box` "
"are natively supported. With manual bindings, one would have to pass C-ABI-"
"compatible raw pointers, which would increase lifetime and memory-safety "
"risks."
msgstr ""

#: src/chromium/interoperability-with-cpp.md:44
msgid ""
"`rust::String` and `CxxString` types understand and maintain differences in "
"string representation across the languages (e.g. `rust::String::lossy` can "
"build a Rust string from non-UTF8 input and `rust::String::c_str` can NUL-"
"terminate a string)."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:3
msgid ""
"CXX requires that the whole C++/Rust boundary is declared in `cxx::bridge` "
"\"modules\" inside `.rs` source code."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:16
msgid "\"example/include/blobstore.h\""
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:24
msgid "// Definitions of Rust types and functions go here\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:30
msgid "Point out:"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:32
#, fuzzy
msgid "Native support for C++'s `std::unique_ptr` in Rust"
msgstr "내장 테스트 지원."

#: src/chromium/interoperability-with-cpp/example-bindings.md:34
msgid "Calls from C++ to Rust, and Rust types (in the top part)"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:35
msgid "Calls from Rust to C++, and C++ types (in the bottom part)"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:37
msgid ""
"**Common misconception**: It _looks_ like a C++ header is being parsed by "
"Rust, but this is misleading. This header is never interpreted by Rust, but "
"simply `#include`d in the generated C++ code for the benefit of C++ "
"compilers."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:3
msgid ""
"By far the most useful page when using CXX is the [type reference](https://"
"cxx.rs/bindings.html)."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:5
msgid "CXX fundamentally suits cases where:"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:7
msgid ""
"Your Rust-C++ interface is sufficiently simple that you can declare all of "
"it."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:8
msgid ""
"You're using only the types natively supported by CXX already, for example "
"`std::unique_ptr`, `std::string`, `&[u8]` etc."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:11
msgid ""
"It has many limitations --- for example lack of support for Rust's `Option` "
"type."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:13
msgid ""
"These limitations constrain us to using Rust in Chromium only for well "
"isolated \"leaf nodes\" rather than for arbitrary Rust-C++ interop. When "
"considering a use-case for Rust in Chromium, a good starting point is to "
"draft the CXX bindings for the language boundary to see if it appears simple "
"enough."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:26
msgid ""
"You should also discuss some of the other sticky points with CXX, for "
"example:"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:28
msgid ""
"Its error handling is based around C++ exceptions (given on the next slide)"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:29
msgid "Function pointers are awkward to use."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:3
msgid ""
"CXX's support for `Result<T,E>` relies on C++ exceptions, so we can't use "
"that in Chromium. Alternatives:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:6
msgid ""
"Where success can be represented as a simple Boolean, as done in our [QR "
"code generator](https://source.chromium.org/chromium/chromium/src/+/main:"
"components/qr_code_generator/qr_code_generator_ffi_glue.rs;l=10): Return a "
"Boolean representing success, and record results using out-parameters:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:9
msgid "\"qr_code_generator\""
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:21
msgid ""
"Where success is more complex, provide a Rust object which can be queried "
"for details of success or failure:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:29
msgid "// whether successful\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:30
msgid "// or some more complex error type\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:32
msgid "// or some more complex success type\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:38
msgid "The best way to learn CXX is by doing, so, another exercise!"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:1
#, fuzzy
msgid "Using cxx in Chromium"
msgstr "Rust on Exercism"

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:3
msgid ""
"In Chromium, we define an independent `#[cxx::bridge] mod` for each leaf-"
"node where we want to use Rust. You'd typically have one for each "
"`rust_static_library`. Just add"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:7
msgid ""
"```gn\n"
"cxx_bindings = [ \"my_rust_file.rs\" ]\n"
"   # list of files containing #[cxx::bridge], not all source files\n"
"allow_unsafe = true\n"
"```"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:13
msgid ""
"to your existing `rust_static_library` target alongside `crate_root` and "
"`sources`."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:16
msgid "C++ headers will be generated at a sensible location, so you can just"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:19
msgid "\"ui/base/my_rust_file.rs.h\""
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:22
msgid ""
"You will find some utility functions in `//base` to convert to/from Chromium "
"C++ types to CXX Rust types --- for example [`SpanToRustSlice`](https://"
"source.chromium.org/chromium/chromium/src/+/main:base/containers/span_rust.h;"
"l=21)."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:27
msgid "Students may ask --- why do we still need `allow_unsafe = true`?"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:29
msgid ""
"The broad answer is that no C/C++ code is \"safe\" by the normal Rust "
"standards. Calling back and forth to C/C++ from Rust may do arbitrary things "
"to memory, and compromise the safety of Rust's own data layouts. Presence of "
"_too many_ `unsafe` keywords in C/C++ interop can harm the signal-to-noise "
"ratio of such a keyword, and is [controversial](https://steveklabnik.com/"
"writing/the-cxx-debate), but strictly, bringing any foreign code into a Rust "
"binary can cause unexpected behavior from Rust's perspective."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:36
msgid ""
"The narrow answer lies in the diagram at the top of this page --- behind the "
"scenes, CXX generates Rust `unsafe` and `extern \"C\"` functions just like "
"we did manually in the previous section."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:3
msgid "Part one"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:5
msgid ""
"In the Rust file you previously created, add a `#[cxx::bridge]` which "
"specifies a single function, to be called from C++, called "
"`hello_from_rust`, taking no parameters and returning no value."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:8
msgid ""
"Modify your previous `hello_from_rust` function to remove `extern \"C\"` and "
"`#[no_mangle]`. This is now just a standard Rust function."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:10
msgid "Modify your `gn` target to build these bindings."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:11
msgid ""
"In your C++ code, remove the forward-declaration of `hello_from_rust`. "
"Instead, include the generated header file."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:13
#, fuzzy
msgid "Build and run!"
msgstr "빌드 규칙"

#: src/exercises/chromium/interoperability-with-cpp.md:15
msgid "Part two"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:17
msgid ""
"It's a good idea to play with CXX a little. It helps you think about how "
"flexible Rust in Chromium actually is."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:22
msgid "Call back into C++ from Rust. You will need:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:23
msgid ""
"An additional header file which you can `include!` from your `cxx::bridge`. "
"You'll need to declare your C++ function in that new header file."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:25
msgid ""
"An `unsafe` block to call such a function, or alternatively specify the "
"`unsafe` keyword in your `#[cxx::bridge]` [as described here](https://cxx.rs/"
"extern-c++.html#functions-and-member-functions)."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:27
msgid ""
"You may also need to `#include \"third_party/rust/cxx/v1/crate/include/cxx."
"h\"`"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:28
msgid "Pass a C++ string from C++ into Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:29
msgid "Pass a reference to a C++ object into Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:30
msgid ""
"Intentionally get the Rust function signatures mismatched from the `#[cxx::"
"bridge]`, and get used to the errors you see."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:32
msgid ""
"Intentionally get the C++ function signatures mismatched from the `#[cxx::"
"bridge]`, and get used to the errors you see."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:34
msgid ""
"Pass a `std::unique_ptr` of some type from C++ into Rust, so that Rust can "
"own some C++ object."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:36
msgid ""
"Create a Rust object and pass it into C++, so that C++ owns it. (Hint: you "
"need a `Box`)."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:38
msgid "Declare some methods on a C++ type. Call them from Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:39
msgid "Declare some methods on a Rust type. Call them from C++."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:41
msgid "Part three"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:43
msgid ""
"Now you understand the strengths and limitations of CXX interop, think of a "
"couple of use-cases for Rust in Chromium where the interface would be "
"sufficiently simple. Sketch how you might define that interface."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:49
msgid "The [`cxx` binding reference](https://cxx.rs/bindings.html)"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:50
msgid ""
"The [`rust_static_library` gn template](https://source.chromium.org/chromium/"
"chromium/src/+/main:build/rust/rust_static_library.gni;l=16)"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:56
msgid "Some of the questions you may encounter:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:57
msgid ""
"I'm seeing a problem initializing a variable of type X with type Y, where X "
"and Y are both function types. This is because your C++ function doesn't "
"quite match the declaration in your `cxx::bridge`."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:61
msgid ""
"I seem to be able to freely convert C++ references into Rust references. "
"Doesn't that risk UB? For CXX's _opaque_ types, no, because they are zero-"
"sized. For CXX trivial types yes, it's _possible_ to cause UB, although "
"CXX's design makes it quite difficult to craft such an example."
msgstr ""

#: src/chromium/adding-third-party-crates.md:3
msgid ""
"Rust libraries are called \"crates\" and are found at [crates.io](https://"
"crates.io). It's _very easy_ for Rust crates to depend upon one another. So "
"they do!"
msgstr ""

#: src/chromium/adding-third-party-crates.md:8
#: src/chromium/adding-third-party-crates.md:10
msgid "Lots"
msgstr ""

#: src/chromium/adding-third-party-crates.md:8
msgid "Consistent: `Cargo.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates.md:9
msgid "Typical library size"
msgstr ""

#: src/chromium/adding-third-party-crates.md:9
msgid "Large-ish"
msgstr ""

#: src/chromium/adding-third-party-crates.md:9
msgid "Small"
msgstr ""

#: src/chromium/adding-third-party-crates.md:10
msgid "Transitive dependencies"
msgstr ""

#: src/chromium/adding-third-party-crates.md:10
msgid "Few"
msgstr ""

#: src/chromium/adding-third-party-crates.md:12
msgid "For a Chromium engineer, this has pros and cons:"
msgstr ""

#: src/chromium/adding-third-party-crates.md:14
msgid ""
"All crates use a common build system so we can automate their inclusion into "
"Chromium..."
msgstr ""

#: src/chromium/adding-third-party-crates.md:16
msgid ""
"... but, crates typically have transitive dependencies, so you will likely "
"have to bring in multiple libraries."
msgstr ""

#: src/chromium/adding-third-party-crates.md:19
msgid "We'll discuss:"
msgstr ""

#: src/chromium/adding-third-party-crates.md:21
msgid "How to put a crate in the Chromium source code tree"
msgstr ""

#: src/chromium/adding-third-party-crates.md:22
msgid "How to make `gn` build rules for it"
msgstr ""

#: src/chromium/adding-third-party-crates.md:23
msgid "How to audit its source code for sufficient safety."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:1
msgid "Configuring the `Cargo.toml` file to add crates"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:3
msgid ""
"Chromium has a single set of centrally-managed direct crate dependencies. "
"These are managed through a single [`Cargo.toml`](https://source.chromium."
"org/chromium/chromium/src/+/main:third_party/rust/chromium_crates_io/Cargo."
"toml):"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:6
msgid ""
"```toml\n"
"[dependencies]\n"
"bitflags = \"1\"\n"
"cfg-if = \"1\"\n"
"cxx = \"1\"\n"
"# lots more...\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:14
msgid ""
"As with any other `Cargo.toml`, you can specify [more details about the "
"dependencies](https://doc.rust-lang.org/cargo/reference/specifying-"
"dependencies.html) --- most commonly, you'll want to specify the `features` "
"that you wish to enable in the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:18
msgid ""
"When adding a crate to Chromium, you'll often need to provide some extra "
"information in an additional file, `gnrt_config.toml`, which we'll meet next."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:1
msgid "Configuring `gnrt_config.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:3
msgid ""
"Alongside `Cargo.toml` is [`gnrt_config.toml`](https://source.chromium.org/"
"chromium/chromium/src/+/main:third_party/rust/chromium_crates_io/gnrt_config."
"toml). This contains Chromium-specific extensions to crate handling."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:6
msgid ""
"If you add a new crate, you should specify at least the `group`. This is one "
"of:"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:16
#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:15
msgid "For instance,"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:23
msgid ""
"Depending on the crate source code layout, you may also need to use this "
"file to specify where its `LICENSE` file(s) can be found."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:26
msgid ""
"Later, we'll see some other things you will need to configure in this file "
"to resolve problems."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:3
msgid ""
"A tool called `gnrt` knows how to download crates and how to generate `BUILD."
"gn` rules."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:6
msgid "To start, download the crate you want like this:"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:13
msgid ""
"Although the `gnrt` tool is part of the Chromium source code, by running "
"this command you will be downloading and running its dependencies from "
"`crates.io`. See [the earlier section](../cargo.md) discussing this security "
"decision."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:18
msgid "This `vendor` command may download:"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:20
msgid "Direct and transitive dependencies"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:21
msgid ""
"New versions of other crates, as required by `cargo` to resolve the complete "
"set of crates required by Chromium."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:24
msgid ""
"Chromium maintains patches for some crates, kept in `//third_party/rust/"
"chromium_crates_io/patches`. These will be reapplied automatically, but if "
"patching fails you may need to take manual action."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:1
#, fuzzy
msgid "Generating `gn` build rules"
msgstr "제네릭"

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:3
msgid ""
"Once you've downloaded the crate, generate the `BUILD.gn` files like this:"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:9
msgid "Now run `git status`. You should find:"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:11
msgid ""
"At least one new crate source code in `third_party/rust/chromium_crates_io/"
"vendor`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:12
msgid ""
"At least one new `BUILD.gn` in `third_party/rust/<crate name>/v<major semver "
"version>`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:13
msgid "An appropriate `README.chromium`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:17
msgid ""
"Take a close look, especially at the things generated in `third_party/rust`."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:21
msgid ""
"Talk a little about semver --- and specifically the way that in Chromium "
"it's to allow multiple incompatible versions of a crate, which is "
"discouraged but sometimes necessary in the Cargo ecosystem."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:3
msgid ""
"If your build fails, it may be because of a `build.rs`: programs which do "
"arbitrary things at build time. This is fundamentally at odds with the "
"design of `gn` and `ninja` which aim for static, deterministic, build rules "
"to maximize parallelism and repeatability of builds."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:8
msgid ""
"Some `build.rs` actions are automatically supported; others require action:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:10
msgid "build script effect"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:10
msgid "Supported by our gn templates"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:10
msgid "Work required by you"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:12
msgid "Checking rustc version to configure features on and off"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:12
#: src/chromium/adding-third-party-crates/resolving-problems.md:13
msgid "None"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:13
msgid "Checking platform or CPU to configure features on and off"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:14
msgid "Yes - specify in `gnrt_config.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:15
msgid "Building C/C++"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:15
#: src/chromium/adding-third-party-crates/resolving-problems.md:16
msgid "Patch around it"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:16
#, fuzzy
msgid "Arbitrary other actions"
msgstr "Cargo에 통합됨"

#: src/chromium/adding-third-party-crates/resolving-problems.md:18
msgid ""
"Fortunately, most crates don't contain a build script, and fortunately, most "
"build scripts only do the top two actions."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:3
msgid ""
"If `ninja` complains about missing files, check the `build.rs` to see if it "
"writes source code files."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:6
msgid ""
"If so, modify [`gnrt_config.toml`](../configuring-gnrt-config-toml.md) to "
"add `build-script-outputs` to the crate. If this is a transitive dependency, "
"that is, one on which Chromium code should not directly depend, also add "
"`allow-first-party-usage=false`. There are several examples already in that "
"file:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:11
msgid ""
"```toml\n"
"[crate.unicode-linebreak]\n"
"allow-first-party-usage = false\n"
"build-script-outputs = [ \"tables.rs\" ]\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:17
msgid ""
"Now rerun [`gnrt.py -- gen`](../generating-gn-build-rules.md) to regenerate "
"`BUILD.gn` files to inform ninja that this particular output file is input "
"to subsequent build steps."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:3
msgid ""
"Some crates use the [`cc`](https://crates.io/crates/cc) crate to build and "
"link C/C++ libraries. Other crates parse C/C++ using [`bindgen`](https://"
"crates.io/crates/bindgen) within their build scripts. These actions can't be "
"supported in a Chromium context --- our gn, ninja and LLVM build system is "
"very specific in expressing relationships between build actions."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:9
msgid "So, your options are:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:11
msgid "Avoid these crates"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:12
msgid "Apply a patch to the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:14
msgid ""
"Patches should be kept in `third_party/rust/chromium_crates_io/patches/"
"<crate>` - see for example the [patches against the `cxx` crate](https://"
"source.chromium.org/chromium/chromium/src/+/main:third_party/rust/"
"chromium_crates_io/patches/cxx/) - and will be applied automatically by "
"`gnrt` each time it upgrades the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:3
msgid ""
"Once you've added a third-party crate and generated build rules, depending "
"on a crate is simple. Find your `rust_static_library` target, and add a "
"`dep` on the `:lib` target within your crate."
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:9
msgid ""
"```bob\n"
"                     +------------+      +----------------------+\n"
"\"//third_party/rust\" | crate name | \"/v\" | major semver version | \"/:"
"lib\"\n"
"                     +------------+      +----------------------+\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:17
msgid ""
"```gn\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"  deps = [ \"//third_party/rust/example_rust_crate/v1:lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:1
msgid "Auditing third party crates"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:3
msgid ""
"Adding new libraries is subject to Chromium's standard [policies](https://"
"chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/rust."
"md#Third_party-review), but of course also subject to security review. As "
"you may be bringing in not just a single crate but also transitive "
"dependencies, there may be a lot of code to review. On the other hand, safe "
"Rust code can have limited negative side effects. How should you review it?"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:9
msgid ""
"Over time Chromium aims to move to a process based around [cargo vet]"
"(https://mozilla.github.io/cargo-vet/)."
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:11
msgid ""
"Meanwhile, for each new crate addition, we are checking for the following:"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:13
msgid ""
"Understand why each crate is used. What's the relationship between crates? "
"If the build system for each crate contains a `build.rs` or procedural "
"macros, work out what they're for. Are they compatible with the way Chromium "
"is normally built?"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:17
msgid "Check each crate seems to be reasonably well maintained"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:18
msgid ""
"Use `cd third-party/rust/chromium_crates_io; cargo audit` to check for known "
"vulnerabilities (first you'll need to `cargo install cargo-audit`, which "
"ironically involves downloading lots of dependencies from the internet[2](../"
"cargo.md))"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:21
msgid ""
"Ensure any `unsafe` code is good enough for the [Rule of Two](https://"
"chromium.googlesource.com/chromium/src/+/main/docs/security/rule-of-2."
"md#unsafe-code-in-safe-languages)"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:22
msgid "Check for any use of `fs` or `net` APIs"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:23
msgid ""
"Read all the code at a sufficient level to look for anything out of place "
"that might have been maliciously inserted. (You can't realistically aim for "
"100% perfection here: there's often just too much code.)"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:27
msgid ""
"These are just guidelines --- work with reviewers from `security@chromium."
"org` to work out the right way to become confident of the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:1
msgid "Checking crates into Chromium source code"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:3
msgid "`git status` should reveal:"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:4
msgid "Crate code in `//third_party/rust/chromium_crates_io`"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:5
msgid ""
"Metadata (`BUILD.gn` and `README.chromium`) in `//third_party/rust/<crate>/"
"<version>`"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:7
msgid "Please also add an `OWNERS` file in the latter location."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:9
msgid ""
"You should land all this, along with your `Cargo.toml` and `gnrt_config."
"toml` changes, into the Chromium repo."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:12
msgid ""
"**Important**: you need to use `git add -f` because otherwise `.gitignore` "
"files may result in some files being skipped."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:15
msgid ""
"As you do so, you might find presubmit checks fail because of non-inclusive "
"language. This is because Rust crate data tends to include names of git "
"branches, and many projects still use non-inclusive terminology there. So "
"you may need to run:"
msgstr ""

#: src/chromium/adding-third-party-crates/keeping-up-to-date.md:3
msgid ""
"As the OWNER of any third party Chromium dependency, you are [expected to "
"keep it up to date with any security fixes](https://chromium.googlesource."
"com/chromium/src/+/main/docs/adding_to_third_party.md#add-owners). It is "
"hoped that we will soon automate this for Rust crates, but for now, it's "
"still your responsibility just as it is for any other third party dependency."
msgstr ""

#: src/exercises/chromium/third-party.md:3
msgid ""
"Add [uwuify](https://crates.io/crates/uwuify) to Chromium, turning off the "
"crate's [default features](https://doc.rust-lang.org/cargo/reference/"
"features.html#the-default-feature). Assume that the crate will be used in "
"shipping Chromium, but won't be used to handle untrustworthy input."
msgstr ""

#: src/exercises/chromium/third-party.md:7
msgid ""
"(In the next exercise we'll use uwuify from Chromium, but feel free to skip "
"ahead and do that now if you like. Or, you could create a new "
"[`rust_executable` target](https://source.chromium.org/chromium/chromium/src/"
"+/main:build/rust/rust_executable.gni) which uses `uwuify`)."
msgstr ""

#: src/exercises/chromium/third-party.md:14
msgid ""
"The total crates needed are: uwuify, smallvec, scopeguard, parking_lot, "
"parking_lot_core, lock_api and instant. If students are downloading even "
"more than that, they probably forgot to turn off the default features."
msgstr ""

#: src/exercises/chromium/third-party.md:18
msgid ""
"Thanks to [Daniel Liu](https://github.com/Daniel-Liu-c0deb0t) for this "
"crate! "
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:1
msgid "Bringing it together --- Exercise"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:3
msgid ""
"In this exercise, you're going to add a whole new Chromium feature, bringing "
"together everything you already learned."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:6
msgid "The brief from Product Management"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:8
msgid ""
"A community of pixies has been discovered living in a remote rainforest. "
"It's important that we get Chromium for Pixies delivered to them as soon as "
"possible."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:12
msgid ""
"The requirement is to translate all Chromium's UI strings into Pixie "
"language."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:14
msgid ""
"There's not time to wait for proper translations, but fortunately pixie "
"language is very close to English, and it turns out there's a Rust crate "
"which does the translation."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:18
msgid ""
"In fact, you already [imported that crate in the previous exercise](https://"
"crates.io/crates/uwuify)."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:20
msgid ""
"(Obviously, real translations of Chrome require incredible care and "
"diligence. Don't ship this!)"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:23
msgid "Steps"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:25
msgid ""
"Modify `ResourceBundle::MaybeMangleLocalizedString` so that it uwuifies all "
"strings before display. In this special build of Chromium, it should always "
"do this irrespective of the setting of `mangle_localized_strings_`."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:29
msgid ""
"If you've done everything right across all these exercises, congratulations, "
"you should have created Chrome for pixies!"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:37
msgid ""
"UTF16 vs UTF8. Students should be aware that Rust strings are always UTF8, "
"and will probably decide that it's better to do the conversion on the C++ "
"side using `base::UTF16ToUTF8` and back again."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:40
msgid ""
"If students decide to do the conversion on the Rust side, they'll need to "
"consider [`String::from_utf16`](https://doc.rust-lang.org/std/string/struct."
"String.html#method.from_utf16), consider error handling, and consider which "
"[CXX supported types can transfer a lot of u16s](https://cxx.rs/binding/"
"slice.html)."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:43
msgid ""
"Students may design the C++/Rust boundary in several different ways, e.g. "
"taking and returning strings by value, or taking a mutable reference to a "
"string. If a mutable reference is used, CXX will likely tell the student "
"that they need to use [`Pin`](https://doc.rust-lang.org/std/pin/). You may "
"need to explain what `Pin` does, and then explain why CXX needs it for "
"mutable references to C++ data: the answer is that C++ data can't be moved "
"around like Rust data, because it may contain self-referential pointers."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:50
msgid ""
"The C++ target containing `ResourceBundle::MaybeMangleLocalizedString` will "
"need to depend on a `rust_static_library` target. The student probably "
"already did this."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:53
msgid ""
"The `rust_static_library` target will need to depend on `//third_party/rust/"
"uwuify/v0_2:lib`."
msgstr ""

#: src/bare-metal/alloc.md:23
msgid ""
"// Safe because `HEAP` is only used here and `entry` is only called once.\n"
msgstr ""

#: src/bare-metal/alloc.md:25
msgid "// Give the allocator some memory to allocate.\n"
msgstr ""

#: src/bare-metal/alloc.md:31
msgid "// Now we can do things that require heap allocation.\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:16
msgid "/// GPIO port 0 peripheral address\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:19
msgid "// GPIO peripheral offsets\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:24
msgid "// PIN_CNF fields\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:34
#: src/bare-metal/microcontrollers/pacs.md:21
#: src/bare-metal/microcontrollers/hals.md:25
msgid "// Configure GPIO 0 pins 21 and 28 as push-pull outputs.\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:37
#: src/bare-metal/microcontrollers/mmio.md:51
msgid ""
"// Safe because the pointers are to valid peripheral control registers, and\n"
"    // no aliases exist.\n"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:48
#: src/bare-metal/microcontrollers/pacs.md:39
#: src/bare-metal/microcontrollers/hals.md:29
msgid "// Set pin 28 low and pin 21 high to turn the LED on.\n"
msgstr ""

#: src/bare-metal/microcontrollers/hals.md:22
msgid "// Create HAL wrapper for GPIO port 0.\n"
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:11
msgid "// let gpio0_01_again = gpio0.p0_01; // Error, moved.\n"
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:19
msgid "// pin_input.is_high(); // Error, moved.\n"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:7
msgid "GDB stub and Microsoft DAP (Debug Adapter Protocol) server"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md:21
msgid "On gLinux or Debian:"
msgstr ""

#: src/exercises/bare-metal/morning.md:3
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port."
msgstr ""

#: src/exercises/bare-metal/compass.md:3
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port. If you have time, try displaying it on the LEDs somehow too, or "
"use the buttons somehow."
msgstr ""

#: src/exercises/bare-metal/compass.md:6
msgid "Hints:"
msgstr ""

#: src/exercises/bare-metal/compass.md:8
msgid ""
"Check the documentation for the [`lsm303agr`](https://docs.rs/lsm303agr/"
"latest/lsm303agr/) and [`microbit-v2`](https://docs.rs/microbit-v2/latest/"
"microbit/) crates, as well as the [micro:bit hardware](https://tech.microbit."
"org/hardware/)."
msgstr ""

#: src/exercises/bare-metal/compass.md:11
msgid ""
"The LSM303AGR Inertial Measurement Unit is connected to the internal I2C bus."
msgstr ""

#: src/exercises/bare-metal/compass.md:12
msgid ""
"TWI is another name for I2C, so the I2C master peripheral is called TWIM."
msgstr ""

#: src/exercises/bare-metal/compass.md:13
msgid ""
"The LSM303AGR driver needs something implementing the `embedded_hal::"
"blocking::i2c::WriteRead` trait. The [`microbit::hal::Twim`](https://docs.rs/"
"microbit-v2/latest/microbit/hal/struct.Twim.html) struct implements this."
msgstr ""

#: src/exercises/bare-metal/compass.md:17
msgid ""
"You have a [`microbit::Board`](https://docs.rs/microbit-v2/latest/microbit/"
"struct.Board.html) struct with fields for the various pins and peripherals."
msgstr ""

#: src/exercises/bare-metal/compass.md:19
msgid ""
"You can also look at the [nRF52833 datasheet](https://infocenter.nordicsemi."
"com/pdf/nRF52833_PS_v1.5.pdf) if you want, but it shouldn't be necessary for "
"this exercise."
msgstr ""

#: src/exercises/bare-metal/compass.md:23
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `compass` directory for the following files."
msgstr ""

#: src/exercises/bare-metal/compass.md:44
#: src/exercises/bare-metal/solutions-morning.md:32
msgid "// Configure serial port.\n"
msgstr ""

#: src/exercises/bare-metal/compass.md:52
msgid ""
"// Set up the I2C controller and Inertial Measurement Unit.\n"
"    // TODO\n"
msgstr ""

#: src/exercises/bare-metal/compass.md:55
#: src/exercises/bare-metal/solutions-morning.md:56
msgid "\"Ready.\""
msgstr ""

#: src/exercises/bare-metal/compass.md:58
msgid ""
"// Read compass data and log it to the serial port.\n"
"        // TODO\n"
msgstr ""

#: src/exercises/bare-metal/compass.md:64 src/exercises/bare-metal/rtc.md:385
msgid "_Cargo.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md:85
msgid "_Embed.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md:100 src/exercises/bare-metal/rtc.md:985
msgid "_.cargo/config.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md:112
msgid "See the serial output on Linux with:"
msgstr ""

#: src/exercises/bare-metal/compass.md:118
msgid ""
"Or on Mac OS something like (the device name may be slightly different):"
msgstr ""

#: src/exercises/bare-metal/compass.md:124
msgid "Use Ctrl+A Ctrl+Q to quit picocom."
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:5
msgid "([back to exercise](compass.md))"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:40
msgid "// Set up the I2C controller and Inertial Measurement Unit.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:41
msgid "\"Setting up IMU...\""
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:49
msgid "// Set up display and timer.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:59
msgid "// Read compass data and log it to the serial port.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:67
msgid "\"{},{},{}\\t{},{},{}\""
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:103
msgid ""
"// If button A is pressed, switch to the next mode and briefly blink all "
"LEDs on.\n"
msgstr ""

#: src/bare-metal/aps/entry-point.md:3
msgid ""
"Before we can start running Rust code, we need to do some initialisation."
msgstr ""

#: src/bare-metal/aps/entry-point.md:5
msgid ""
"```armasm\n"
".section .init.entry, \"ax\"\n"
".global entry\n"
"entry:\n"
"    /*\n"
"     * Load and apply the memory management configuration, ready to enable "
"MMU and\n"
"     * caches.\n"
"     */\n"
"    adrp x30, idmap\n"
"    msr ttbr0_el1, x30\n"
"\n"
"    mov_i x30, .Lmairval\n"
"    msr mair_el1, x30\n"
"\n"
"    mov_i x30, .Ltcrval\n"
"    /* Copy the supported PA range into TCR_EL1.IPS. */\n"
"    mrs x29, id_aa64mmfr0_el1\n"
"    bfi x30, x29, #32, #4\n"
"\n"
"    msr tcr_el1, x30\n"
"\n"
"    mov_i x30, .Lsctlrval\n"
"\n"
"    /*\n"
"     * Ensure everything before this point has completed, then invalidate "
"any\n"
"     * potentially stale local TLB entries before they start being used.\n"
"     */\n"
"    isb\n"
"    tlbi vmalle1\n"
"    ic iallu\n"
"    dsb nsh\n"
"    isb\n"
"\n"
"    /*\n"
"     * Configure sctlr_el1 to enable MMU and cache and don't proceed until "
"this\n"
"     * has completed.\n"
"     */\n"
"    msr sctlr_el1, x30\n"
"    isb\n"
"\n"
"    /* Disable trapping floating point access in EL1. */\n"
"    mrs x30, cpacr_el1\n"
"    orr x30, x30, #(0x3 << 20)\n"
"    msr cpacr_el1, x30\n"
"    isb\n"
"\n"
"    /* Zero out the bss section. */\n"
"    adr_l x29, bss_begin\n"
"    adr_l x30, bss_end\n"
"0:  cmp x29, x30\n"
"    b.hs 1f\n"
"    stp xzr, xzr, [x29], #16\n"
"    b 0b\n"
"\n"
"1:  /* Prepare the stack. */\n"
"    adr_l x30, boot_stack_end\n"
"    mov sp, x30\n"
"\n"
"    /* Set up exception vector. */\n"
"    adr x30, vector_table_el1\n"
"    msr vbar_el1, x30\n"
"\n"
"    /* Call into Rust code. */\n"
"    bl main\n"
"\n"
"    /* Loop forever waiting for interrupts. */\n"
"2:  wfi\n"
"    b 2b\n"
"```"
msgstr ""

#: src/bare-metal/aps/entry-point.md:77
msgid ""
"This is the same as it would be for C: initialising the processor state, "
"zeroing the BSS, and setting up the stack pointer."
msgstr ""

#: src/bare-metal/aps/entry-point.md:79
msgid ""
"The BSS (block starting symbol, for historical reasons) is the part of the "
"object file which containing statically allocated variables which are "
"initialised to zero. They are omitted from the image, to avoid wasting space "
"on zeroes. The compiler assumes that the loader will take care of zeroing "
"them."
msgstr ""

#: src/bare-metal/aps/entry-point.md:83
msgid ""
"The BSS may already be zeroed, depending on how memory is initialised and "
"the image is loaded, but we zero it to be sure."
msgstr ""

#: src/bare-metal/aps/entry-point.md:85
msgid ""
"We need to enable the MMU and cache before reading or writing any memory. If "
"we don't:"
msgstr ""

#: src/bare-metal/aps/entry-point.md:86
msgid ""
"Unaligned accesses will fault. We build the Rust code for the `aarch64-"
"unknown-none` target which sets `+strict-align` to prevent the compiler "
"generating unaligned accesses, so it should be fine in this case, but this "
"is not necessarily the case in general."
msgstr ""

#: src/bare-metal/aps/entry-point.md:89
msgid ""
"If it were running in a VM, this can lead to cache coherency issues. The "
"problem is that the VM is accessing memory directly with the cache disabled, "
"while the host has cacheable aliases to the same memory. Even if the host "
"doesn't explicitly access the memory, speculative accesses can lead to cache "
"fills, and then changes from one or the other will get lost when the cache "
"is cleaned or the VM enables the cache. (Cache is keyed by physical address, "
"not VA or IPA.)"
msgstr ""

#: src/bare-metal/aps/entry-point.md:94
msgid ""
"For simplicity, we just use a hardcoded pagetable (see `idmap.S`) which "
"identity maps the first 1 GiB of address space for devices, the next 1 GiB "
"for DRAM, and another 1 GiB higher up for more devices. This matches the "
"memory layout that QEMU uses."
msgstr ""

#: src/bare-metal/aps/entry-point.md:97
msgid ""
"We also set up the exception vector (`vbar_el1`), which we'll see more about "
"later."
msgstr ""

#: src/bare-metal/aps/entry-point.md:98
msgid ""
"All examples this afternoon assume we will be running at exception level 1 "
"(EL1). If you need to run at a different exception level you'll need to "
"modify `entry.S` accordingly."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:19
msgid ""
"// Safe because this only uses the declared registers and doesn't do\n"
"    // anything with memory.\n"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:22
msgid "\"hvc #0\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:23
msgid "\"w0\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:24
msgid "\"w1\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:25
msgid "\"w2\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:26
msgid "\"w3\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:27
msgid "\"w4\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:28
msgid "\"w5\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:29
msgid "\"w6\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:30
msgid "\"w7\""
msgstr ""

#: src/bare-metal/aps/uart.md:9
msgid "/// Minimal driver for a PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/uart.md:17 src/bare-metal/aps/better-uart/driver.md:13
msgid ""
"/// Constructs a new instance of the UART driver for a PL011 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the 8 MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""

#: src/bare-metal/aps/uart.md:29 src/bare-metal/aps/better-uart/driver.md:27
#: src/exercises/bare-metal/rtc.md:336
msgid "/// Writes a single byte to the UART.\n"
msgstr ""

#: src/bare-metal/aps/uart.md:31 src/bare-metal/aps/better-uart/driver.md:29
#: src/exercises/bare-metal/rtc.md:338
msgid "// Wait until there is room in the TX buffer.\n"
msgstr ""

#: src/bare-metal/aps/uart.md:34 src/bare-metal/aps/uart.md:46
msgid ""
"// Safe because we know that the base address points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
msgstr ""

#: src/bare-metal/aps/uart.md:37 src/bare-metal/aps/better-uart/driver.md:35
#: src/exercises/bare-metal/rtc.md:344
msgid "// Write to the TX buffer.\n"
msgstr ""

#: src/bare-metal/aps/uart.md:41 src/bare-metal/aps/better-uart/driver.md:39
#: src/exercises/bare-metal/rtc.md:348
msgid "// Wait until the UART is no longer busy.\n"
msgstr ""

#: src/bare-metal/aps/uart/traits.md:3
msgid ""
"We derived the `Debug` trait. It would be useful to implement a few more "
"traits too."
msgstr ""

#: src/bare-metal/aps/uart/traits.md:16 src/exercises/bare-metal/rtc.md:379
#: src/exercises/bare-metal/solutions-afternoon.md:231
msgid ""
"// Safe because it just contains a pointer to device memory, which can be\n"
"// accessed from any context.\n"
msgstr ""

#: src/bare-metal/aps/uart/traits.md:24
msgid ""
"Implementing `Write` lets us use the `write!` and `writeln!` macros with our "
"`Uart` type."
msgstr ""

#: src/bare-metal/aps/uart/traits.md:25
msgid ""
"Run the example in QEMU with `make qemu_minimal` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:3
msgid ""
"The [`bitflags`](https://crates.io/crates/bitflags) crate is useful for "
"working with bitflags."
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:9
#: src/exercises/bare-metal/rtc.md:238
msgid "/// Flags from the UART flag register.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:13
#: src/exercises/bare-metal/rtc.md:242
msgid "/// Clear to send.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:15
#: src/exercises/bare-metal/rtc.md:244
msgid "/// Data set ready.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:17
#: src/exercises/bare-metal/rtc.md:246
msgid "/// Data carrier detect.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:19
#: src/exercises/bare-metal/rtc.md:248
msgid "/// UART busy transmitting data.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:21
#: src/exercises/bare-metal/rtc.md:250
msgid "/// Receive FIFO is empty.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:23
#: src/exercises/bare-metal/rtc.md:252
msgid "/// Transmit FIFO is full.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:25
#: src/exercises/bare-metal/rtc.md:254
msgid "/// Receive FIFO is full.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:27
#: src/exercises/bare-metal/rtc.md:256
msgid "/// Transmit FIFO is empty.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:29
#: src/exercises/bare-metal/rtc.md:258
msgid "/// Ring indicator.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:37
msgid ""
"The `bitflags!` macro creates a newtype something like `Flags(u16)`, along "
"with a bunch of method implementations to get and set flags."
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md:3
msgid ""
"We can use a struct to represent the memory layout of the UART's registers."
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md:41
msgid ""
"[`#[repr(C)]`](https://doc.rust-lang.org/reference/type-layout.html#the-c-"
"representation) tells the compiler to lay the struct fields out in order, "
"following the same rules as C. This is necessary for our struct to have a "
"predictable layout, as default Rust representation allows the compiler to "
"(among other things) reorder fields however it sees fit."
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:3
msgid "Now let's use the new `Registers` struct in our driver."
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:6
msgid "/// Driver for a PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:32
#: src/bare-metal/aps/better-uart/driver.md:55
#: src/exercises/bare-metal/rtc.md:341 src/exercises/bare-metal/rtc.md:364
msgid ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:43
#: src/exercises/bare-metal/rtc.md:352
msgid ""
"/// Reads and returns a pending byte, or `None` if nothing has been "
"received.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:49
#: src/exercises/bare-metal/rtc.md:358
msgid "// TODO: Check for error conditions in bits 8-11.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:64
msgid ""
"Note the use of `addr_of!` / `addr_of_mut!` to get pointers to individual "
"fields without creating an intermediate reference, which would be unsound."
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:3
msgid ""
"Let's write a small program using our driver to write to the serial console, "
"and echo incoming bytes."
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:19
#: src/bare-metal/aps/logging/using.md:18 src/exercises/bare-metal/rtc.md:41
#: src/exercises/bare-metal/solutions-afternoon.md:33
msgid "/// Base address of the primary PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:25
#: src/bare-metal/aps/logging/using.md:24 src/exercises/bare-metal/rtc.md:47
#: src/exercises/bare-metal/solutions-afternoon.md:44
msgid ""
"// Safe because `PL011_BASE_ADDRESS` is the base address of a PL011 device,\n"
"    // and nothing else accesses that address range.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:29
#: src/bare-metal/aps/logging/using.md:29
msgid "\"main({x0:#x}, {x1:#x}, {x2:#x}, {x3:#x})\""
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:35
msgid "b'\\r'"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:36
#: src/async/pitfalls/cancellation.md:27
msgid "b'\\n'"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:38
msgid "b'q'"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:44
msgid "\"Bye!\""
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:51
msgid ""
"As in the [inline assembly](../inline-assembly.md) example, this `main` "
"function is called from our entry point code in `entry.S`. See the speaker "
"notes there for details."
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:53
msgid ""
"Run the example in QEMU with `make qemu` under `src/bare-metal/aps/examples`."
msgstr ""

#: src/bare-metal/aps/logging.md:28 src/exercises/bare-metal/rtc.md:190
msgid "\"[{}] {}\""
msgstr ""

#: src/bare-metal/aps/logging.md:37 src/exercises/bare-metal/rtc.md:199
msgid "/// Initialises UART logger.\n"
msgstr ""

#: src/bare-metal/aps/logging/using.md:3
msgid "We need to initialise the logger before we use it."
msgstr ""

#: src/bare-metal/aps/logging/using.md:38 src/exercises/bare-metal/rtc.md:69
#: src/exercises/bare-metal/solutions-afternoon.md:121
msgid "\"{info}\""
msgstr ""

#: src/bare-metal/aps/logging/using.md:46
msgid "Note that our panic handler can now log details of panics."
msgstr ""

#: src/bare-metal/aps/logging/using.md:47
msgid ""
"Run the example in QEMU with `make qemu_logger` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/exceptions.md:3
msgid ""
"AArch64 defines an exception vector table with 16 entries, for 4 types of "
"exceptions (synchronous, IRQ, FIQ, SError) from 4 states (current EL with "
"SP0, current EL with SPx, lower EL using AArch64, lower EL using AArch32). "
"We implement this in assembly to save volatile registers to the stack before "
"calling into Rust code:"
msgstr ""

#: src/bare-metal/aps/exceptions.md:64
msgid "EL is exception level; all our examples this afternoon run in EL1."
msgstr ""

#: src/bare-metal/aps/exceptions.md:65
msgid ""
"For simplicity we aren't distinguishing between SP0 and SPx for the current "
"EL exceptions, or between AArch32 and AArch64 for the lower EL exceptions."
msgstr ""

#: src/bare-metal/aps/exceptions.md:67
msgid ""
"For this example we just log the exception and power down, as we don't "
"expect any of them to actually happen."
msgstr ""

#: src/bare-metal/aps/exceptions.md:69
msgid ""
"We can think of exception handlers and our main execution context more or "
"less like different threads. [`Send` and `Sync`](../../concurrency/send-sync."
"md) will control what we can share between them, just like with threads. For "
"example, if we want to share some value between exception handlers and the "
"rest of the program, and it's `Send` but not `Sync`, then we'll need to wrap "
"it in something like a `Mutex` and put it in a static."
msgstr ""

#: src/bare-metal/aps/other-projects.md:17
msgid ""
"The RaspberryPi OS tutorial runs Rust code before the MMU and caches are "
"enabled. This will read and write memory (e.g. the stack). However:"
msgstr ""

#: src/bare-metal/aps/other-projects.md:19
msgid ""
"Without the MMU and cache, unaligned accesses will fault. It builds with "
"`aarch64-unknown-none` which sets `+strict-align` to prevent the compiler "
"generating unaligned accesses so it should be alright, but this is not "
"necessarily the case in general."
msgstr ""

#: src/bare-metal/aps/other-projects.md:22
msgid ""
"If it were running in a VM, this can lead to cache coherency issues. The "
"problem is that the VM is accessing memory directly with the cache disabled, "
"while the host has cacheable aliases to the same memory. Even if the host "
"doesn't explicitly access the memory, speculative accesses can lead to cache "
"fills, and then changes from one or the other will get lost. Again this is "
"alright in this particular case (running directly on the hardware with no "
"hypervisor), but isn't a good pattern in general."
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:14
msgid "// Create a new page table with identity mapping.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:16
msgid "// Map a 2 MiB region of memory as read-only.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:21
msgid "// Set `TTBR0_EL1` to activate the page table.\n"
msgstr ""

#: src/exercises/bare-metal/afternoon.md:3
msgid "We will write a driver for the PL031 real-time clock device."
msgstr ""

#: src/exercises/bare-metal/rtc.md:6
msgid ""
"Use it to print the current time to the serial console. You can use the "
"[`chrono`](https://crates.io/crates/chrono) crate for date/time formatting."
msgstr ""

#: src/exercises/bare-metal/rtc.md:8
msgid ""
"Use the match register and raw interrupt status to busy-wait until a given "
"time, e.g. 3 seconds in the future. (Call [`core::hint::spin_loop`](https://"
"doc.rust-lang.org/core/hint/fn.spin_loop.html) inside the loop.)"
msgstr ""

#: src/exercises/bare-metal/rtc.md:10
msgid ""
"_Extension if you have time:_ Enable and handle the interrupt generated by "
"the RTC match. You can use the driver provided in the [`arm-gic`](https://"
"docs.rs/arm-gic/) crate to configure the Arm Generic Interrupt Controller."
msgstr ""

#: src/exercises/bare-metal/rtc.md:12
msgid "Use the RTC interrupt, which is wired to the GIC as `IntId::spi(2)`."
msgstr ""

#: src/exercises/bare-metal/rtc.md:13
msgid ""
"Once the interrupt is enabled, you can put the core to sleep via `arm_gic::"
"wfi()`, which will cause the core to sleep until it receives an interrupt."
msgstr ""

#: src/exercises/bare-metal/rtc.md:16
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `rtc` directory for the following files."
msgstr ""

#: src/exercises/bare-metal/rtc.md:37
#: src/exercises/bare-metal/solutions-afternoon.md:29
msgid "/// Base addresses of the GICv3.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:52
#: src/exercises/bare-metal/solutions-afternoon.md:49
msgid "\"main({:#x}, {:#x}, {:#x}, {:#x})\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:54
#: src/exercises/bare-metal/solutions-afternoon.md:51
msgid ""
"// Safe because `GICD_BASE_ADDRESS` and `GICR_BASE_ADDRESS` are the base\n"
"    // addresses of a GICv3 distributor and redistributor respectively, and\n"
"    // nothing else accesses those address ranges.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:60
msgid "// TODO: Create instance of RTC driver and print current time.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:62
msgid "// TODO: Wait for 3 seconds.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:75
msgid ""
"_src/exceptions.rs_ (you should only need to change this for the 3rd part of "
"the exercise):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:80 src/exercises/bare-metal/rtc.md:154
#: src/exercises/bare-metal/rtc.md:215 src/exercises/bare-metal/rtc.md:415
msgid ""
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:101
msgid "\"sync_exception_current\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:107
#, fuzzy
msgid "\"irq_current\""
msgstr "_birthday_service/src/client.rs_:"

#: src/exercises/bare-metal/rtc.md:108
msgid "\"No pending interrupt\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:109
msgid "\"IRQ {intid:?}\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:114
msgid "\"fiq_current\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:120
msgid "\"serr_current\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:126
msgid "\"sync_lower\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:132
msgid "\"irq_lower\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:138
msgid "\"fiq_lower\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:144
msgid "\"serr_lower\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:149
msgid "_src/logger.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:167
msgid "// ANCHOR: main\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:210
msgid "_src/pl011.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:233
msgid "// ANCHOR: Flags\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:261
msgid "// ANCHOR_END: Flags\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:265
msgid ""
"/// Flags from the UART Receive Status Register / Error Clear Register.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:269
msgid "/// Framing error.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:271
msgid "/// Parity error.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:273
msgid "/// Break error.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:275
msgid "/// Overrun error.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:279
msgid "// ANCHOR: Registers\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:311
msgid "// ANCHOR_END: Registers\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:313
msgid ""
"// ANCHOR: Uart\n"
"/// Driver for a PL011 UART.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:322
msgid ""
"/// Constructs a new instance of the UART driver for a PL011 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:368
msgid "// ANCHOR_END: Uart\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:410
msgid "_build.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:433 src/exercises/bare-metal/rtc.md:435
msgid "\"linux\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:434 src/exercises/bare-metal/rtc.md:436
msgid "\"CROSS_COMPILE\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:436
#, fuzzy
msgid "\"aarch64-none-elf\""
msgstr "aarch64-paging"

#: src/exercises/bare-metal/rtc.md:439
msgid "\"entry.S\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:441
msgid "\"idmap.S\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:442
msgid "\"empty\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:446
msgid "_entry.S_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:450
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
".macro adr_l, reg:req, sym:req\n"
"\tadrp \\reg, \\sym\n"
"\tadd \\reg, \\reg, :lo12:\\sym\n"
".endm\n"
"\n"
".macro mov_i, reg:req, imm:req\n"
"\tmovz \\reg, :abs_g3:\\imm\n"
"\tmovk \\reg, :abs_g2_nc:\\imm\n"
"\tmovk \\reg, :abs_g1_nc:\\imm\n"
"\tmovk \\reg, :abs_g0_nc:\\imm\n"
".endm\n"
"\n"
".set .L_MAIR_DEV_nGnRE,\t0x04\n"
".set .L_MAIR_MEM_WBWA,\t0xff\n"
".set .Lmairval, .L_MAIR_DEV_nGnRE | (.L_MAIR_MEM_WBWA << 8)\n"
"\n"
"/* 4 KiB granule size for TTBR0_EL1. */\n"
".set .L_TCR_TG0_4KB, 0x0 << 14\n"
"/* 4 KiB granule size for TTBR1_EL1. */\n"
".set .L_TCR_TG1_4KB, 0x2 << 30\n"
"/* Disable translation table walk for TTBR1_EL1, generating a translation "
"fault instead. */\n"
".set .L_TCR_EPD1, 0x1 << 23\n"
"/* Translation table walks for TTBR0_EL1 are inner sharable. */\n"
".set .L_TCR_SH_INNER, 0x3 << 12\n"
"/*\n"
" * Translation table walks for TTBR0_EL1 are outer write-back read-allocate "
"write-allocate\n"
" * cacheable.\n"
" */\n"
".set .L_TCR_RGN_OWB, 0x1 << 10\n"
"/*\n"
" * Translation table walks for TTBR0_EL1 are inner write-back read-allocate "
"write-allocate\n"
" * cacheable.\n"
" */\n"
".set .L_TCR_RGN_IWB, 0x1 << 8\n"
"/* Size offset for TTBR0_EL1 is 2**39 bytes (512 GiB). */\n"
".set .L_TCR_T0SZ_512, 64 - 39\n"
".set .Ltcrval, .L_TCR_TG0_4KB | .L_TCR_TG1_4KB | .L_TCR_EPD1 | ."
"L_TCR_RGN_OWB\n"
".set .Ltcrval, .Ltcrval | .L_TCR_RGN_IWB | .L_TCR_SH_INNER | ."
"L_TCR_T0SZ_512\n"
"\n"
"/* Stage 1 instruction access cacheability is unaffected. */\n"
".set .L_SCTLR_ELx_I, 0x1 << 12\n"
"/* SP alignment fault if SP is not aligned to a 16 byte boundary. */\n"
".set .L_SCTLR_ELx_SA, 0x1 << 3\n"
"/* Stage 1 data access cacheability is unaffected. */\n"
".set .L_SCTLR_ELx_C, 0x1 << 2\n"
"/* EL0 and EL1 stage 1 MMU enabled. */\n"
".set .L_SCTLR_ELx_M, 0x1 << 0\n"
"/* Privileged Access Never is unchanged on taking an exception to EL1. */\n"
".set .L_SCTLR_EL1_SPAN, 0x1 << 23\n"
"/* SETEND instruction disabled at EL0 in aarch32 mode. */\n"
".set .L_SCTLR_EL1_SED, 0x1 << 8\n"
"/* Various IT instructions are disabled at EL0 in aarch32 mode. */\n"
".set .L_SCTLR_EL1_ITD, 0x1 << 7\n"
".set .L_SCTLR_EL1_RES1, (0x1 << 11) | (0x1 << 20) | (0x1 << 22) | (0x1 << "
"28) | (0x1 << 29)\n"
".set .Lsctlrval, .L_SCTLR_ELx_M | .L_SCTLR_ELx_C | .L_SCTLR_ELx_SA | ."
"L_SCTLR_EL1_ITD | .L_SCTLR_EL1_SED\n"
".set .Lsctlrval, .Lsctlrval | .L_SCTLR_ELx_I | .L_SCTLR_EL1_SPAN | ."
"L_SCTLR_EL1_RES1\n"
"\n"
"/**\n"
" * This is a generic entry point for an image. It carries out the operations "
"required to prepare the\n"
" * loaded image to be run. Specifically, it zeroes the bss section using "
"registers x25 and above,\n"
" * prepares the stack, enables floating point, and sets up the exception "
"vector. It preserves x0-x3\n"
" * for the Rust entry point, as these may contain boot parameters.\n"
" */\n"
".section .init.entry, \"ax\"\n"
".global entry\n"
"entry:\n"
"\t/* Load and apply the memory management configuration, ready to enable MMU "
"and caches. */\n"
"\tadrp x30, idmap\n"
"\tmsr ttbr0_el1, x30\n"
"\n"
"\tmov_i x30, .Lmairval\n"
"\tmsr mair_el1, x30\n"
"\n"
"\tmov_i x30, .Ltcrval\n"
"\t/* Copy the supported PA range into TCR_EL1.IPS. */\n"
"\tmrs x29, id_aa64mmfr0_el1\n"
"\tbfi x30, x29, #32, #4\n"
"\n"
"\tmsr tcr_el1, x30\n"
"\n"
"\tmov_i x30, .Lsctlrval\n"
"\n"
"\t/*\n"
"\t * Ensure everything before this point has completed, then invalidate any "
"potentially stale\n"
"\t * local TLB entries before they start being used.\n"
"\t */\n"
"\tisb\n"
"\ttlbi vmalle1\n"
"\tic iallu\n"
"\tdsb nsh\n"
"\tisb\n"
"\n"
"\t/*\n"
"\t * Configure sctlr_el1 to enable MMU and cache and don't proceed until "
"this has completed.\n"
"\t */\n"
"\tmsr sctlr_el1, x30\n"
"\tisb\n"
"\n"
"\t/* Disable trapping floating point access in EL1. */\n"
"\tmrs x30, cpacr_el1\n"
"\torr x30, x30, #(0x3 << 20)\n"
"\tmsr cpacr_el1, x30\n"
"\tisb\n"
"\n"
"\t/* Zero out the bss section. */\n"
"\tadr_l x29, bss_begin\n"
"\tadr_l x30, bss_end\n"
"0:\tcmp x29, x30\n"
"\tb.hs 1f\n"
"\tstp xzr, xzr, [x29], #16\n"
"\tb 0b\n"
"\n"
"1:\t/* Prepare the stack. */\n"
"\tadr_l x30, boot_stack_end\n"
"\tmov sp, x30\n"
"\n"
"\t/* Set up exception vector. */\n"
"\tadr x30, vector_table_el1\n"
"\tmsr vbar_el1, x30\n"
"\n"
"\t/* Call into Rust code. */\n"
"\tbl main\n"
"\n"
"\t/* Loop forever waiting for interrupts. */\n"
"2:\twfi\n"
"\tb 2b\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:595
msgid "_exceptions.S_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:599
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"/**\n"
" * Saves the volatile registers onto the stack. This currently takes 14\n"
" * instructions, so it can be used in exception handlers with 18 "
"instructions\n"
" * left.\n"
" *\n"
" * On return, x0 and x1 are initialised to elr_el2 and spsr_el2 "
"respectively,\n"
" * which can be used as the first and second arguments of a subsequent "
"call.\n"
" */\n"
".macro save_volatile_to_stack\n"
"\t/* Reserve stack space and save registers x0-x18, x29 & x30. */\n"
"\tstp x0, x1, [sp, #-(8 * 24)]!\n"
"\tstp x2, x3, [sp, #8 * 2]\n"
"\tstp x4, x5, [sp, #8 * 4]\n"
"\tstp x6, x7, [sp, #8 * 6]\n"
"\tstp x8, x9, [sp, #8 * 8]\n"
"\tstp x10, x11, [sp, #8 * 10]\n"
"\tstp x12, x13, [sp, #8 * 12]\n"
"\tstp x14, x15, [sp, #8 * 14]\n"
"\tstp x16, x17, [sp, #8 * 16]\n"
"\tstr x18, [sp, #8 * 18]\n"
"\tstp x29, x30, [sp, #8 * 20]\n"
"\n"
"\t/*\n"
"\t * Save elr_el1 & spsr_el1. This such that we can take nested exception\n"
"\t * and still be able to unwind.\n"
"\t */\n"
"\tmrs x0, elr_el1\n"
"\tmrs x1, spsr_el1\n"
"\tstp x0, x1, [sp, #8 * 22]\n"
".endm\n"
"\n"
"/**\n"
" * Restores the volatile registers from the stack. This currently takes 14\n"
" * instructions, so it can be used in exception handlers while still leaving "
"18\n"
" * instructions left; if paired with save_volatile_to_stack, there are 4\n"
" * instructions to spare.\n"
" */\n"
".macro restore_volatile_from_stack\n"
"\t/* Restore registers x2-x18, x29 & x30. */\n"
"\tldp x2, x3, [sp, #8 * 2]\n"
"\tldp x4, x5, [sp, #8 * 4]\n"
"\tldp x6, x7, [sp, #8 * 6]\n"
"\tldp x8, x9, [sp, #8 * 8]\n"
"\tldp x10, x11, [sp, #8 * 10]\n"
"\tldp x12, x13, [sp, #8 * 12]\n"
"\tldp x14, x15, [sp, #8 * 14]\n"
"\tldp x16, x17, [sp, #8 * 16]\n"
"\tldr x18, [sp, #8 * 18]\n"
"\tldp x29, x30, [sp, #8 * 20]\n"
"\n"
"\t/* Restore registers elr_el1 & spsr_el1, using x0 & x1 as scratch. */\n"
"\tldp x0, x1, [sp, #8 * 22]\n"
"\tmsr elr_el1, x0\n"
"\tmsr spsr_el1, x1\n"
"\n"
"\t/* Restore x0 & x1, and release stack space. */\n"
"\tldp x0, x1, [sp], #8 * 24\n"
".endm\n"
"\n"
"/**\n"
" * This is a generic handler for exceptions taken at the current EL while "
"using\n"
" * SP0. It behaves similarly to the SPx case by first switching to SPx, "
"doing\n"
" * the work, then switching back to SP0 before returning.\n"
" *\n"
" * Switching to SPx and calling the Rust handler takes 16 instructions. To\n"
" * restore and return we need an additional 16 instructions, so we can "
"implement\n"
" * the whole handler within the allotted 32 instructions.\n"
" */\n"
".macro current_exception_sp0 handler:req\n"
"\tmsr spsel, #1\n"
"\tsave_volatile_to_stack\n"
"\tbl \\handler\n"
"\trestore_volatile_from_stack\n"
"\tmsr spsel, #0\n"
"\teret\n"
".endm\n"
"\n"
"/**\n"
" * This is a generic handler for exceptions taken at the current EL while "
"using\n"
" * SPx. It saves volatile registers, calls the Rust handler, restores "
"volatile\n"
" * registers, then returns.\n"
" *\n"
" * This also works for exceptions taken from EL0, if we don't care about\n"
" * non-volatile registers.\n"
" *\n"
" * Saving state and jumping to the Rust handler takes 15 instructions, and\n"
" * restoring and returning also takes 15 instructions, so we can fit the "
"whole\n"
" * handler in 30 instructions, under the limit of 32.\n"
" */\n"
".macro current_exception_spx handler:req\n"
"\tsave_volatile_to_stack\n"
"\tbl \\handler\n"
"\trestore_volatile_from_stack\n"
"\teret\n"
".endm\n"
"\n"
".section .text.vector_table_el1, \"ax\"\n"
".global vector_table_el1\n"
".balign 0x800\n"
"vector_table_el1:\n"
"sync_cur_sp0:\n"
"\tcurrent_exception_sp0 sync_exception_current\n"
"\n"
".balign 0x80\n"
"irq_cur_sp0:\n"
"\tcurrent_exception_sp0 irq_current\n"
"\n"
".balign 0x80\n"
"fiq_cur_sp0:\n"
"\tcurrent_exception_sp0 fiq_current\n"
"\n"
".balign 0x80\n"
"serr_cur_sp0:\n"
"\tcurrent_exception_sp0 serr_current\n"
"\n"
".balign 0x80\n"
"sync_cur_spx:\n"
"\tcurrent_exception_spx sync_exception_current\n"
"\n"
".balign 0x80\n"
"irq_cur_spx:\n"
"\tcurrent_exception_spx irq_current\n"
"\n"
".balign 0x80\n"
"fiq_cur_spx:\n"
"\tcurrent_exception_spx fiq_current\n"
"\n"
".balign 0x80\n"
"serr_cur_spx:\n"
"\tcurrent_exception_spx serr_current\n"
"\n"
".balign 0x80\n"
"sync_lower_64:\n"
"\tcurrent_exception_spx sync_lower\n"
"\n"
".balign 0x80\n"
"irq_lower_64:\n"
"\tcurrent_exception_spx irq_lower\n"
"\n"
".balign 0x80\n"
"fiq_lower_64:\n"
"\tcurrent_exception_spx fiq_lower\n"
"\n"
".balign 0x80\n"
"serr_lower_64:\n"
"\tcurrent_exception_spx serr_lower\n"
"\n"
".balign 0x80\n"
"sync_lower_32:\n"
"\tcurrent_exception_spx sync_lower\n"
"\n"
".balign 0x80\n"
"irq_lower_32:\n"
"\tcurrent_exception_spx irq_lower\n"
"\n"
".balign 0x80\n"
"fiq_lower_32:\n"
"\tcurrent_exception_spx fiq_lower\n"
"\n"
".balign 0x80\n"
"serr_lower_32:\n"
"\tcurrent_exception_spx serr_lower\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:780
msgid "_idmap.S_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:784
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
".set .L_TT_TYPE_BLOCK, 0x1\n"
".set .L_TT_TYPE_PAGE,  0x3\n"
".set .L_TT_TYPE_TABLE, 0x3\n"
"\n"
"/* Access flag. */\n"
".set .L_TT_AF, 0x1 << 10\n"
"/* Not global. */\n"
".set .L_TT_NG, 0x1 << 11\n"
".set .L_TT_XN, 0x3 << 53\n"
"\n"
".set .L_TT_MT_DEV, 0x0 << 2\t\t\t// MAIR #0 (DEV_nGnRE)\n"
".set .L_TT_MT_MEM, (0x1 << 2) | (0x3 << 8)\t// MAIR #1 (MEM_WBWA), inner "
"shareable\n"
"\n"
".set .L_BLOCK_DEV, .L_TT_TYPE_BLOCK | .L_TT_MT_DEV | .L_TT_AF | .L_TT_XN\n"
".set .L_BLOCK_MEM, .L_TT_TYPE_BLOCK | .L_TT_MT_MEM | .L_TT_AF | .L_TT_NG\n"
"\n"
".section \".rodata.idmap\", \"a\", %progbits\n"
".global idmap\n"
".align 12\n"
"idmap:\n"
"\t/* level 1 */\n"
"\t.quad\t\t.L_BLOCK_DEV | 0x0\t\t    // 1 GiB of device mappings\n"
"\t.quad\t\t.L_BLOCK_MEM | 0x40000000\t// 1 GiB of DRAM\n"
"\t.fill\t\t254, 8, 0x0\t\t\t// 254 GiB of unmapped VA space\n"
"\t.quad\t\t.L_BLOCK_DEV | 0x4000000000 // 1 GiB of device mappings\n"
"\t.fill\t\t255, 8, 0x0\t\t\t// 255 GiB of remaining VA space\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:829
msgid "_image.ld_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:833
msgid ""
"```ld\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"/*\n"
" * Code will start running at this symbol which is placed at the start of "
"the\n"
" * image.\n"
" */\n"
"ENTRY(entry)\n"
"\n"
"MEMORY\n"
"{\n"
"\timage : ORIGIN = 0x40080000, LENGTH = 2M\n"
"}\n"
"\n"
"SECTIONS\n"
"{\n"
"\t/*\n"
"\t * Collect together the code.\n"
"\t */\n"
"\t.init : ALIGN(4096) {\n"
"\t\ttext_begin = .;\n"
"\t\t*(.init.entry)\n"
"\t\t*(.init.*)\n"
"\t} >image\n"
"\t.text : {\n"
"\t\t*(.text.*)\n"
"\t} >image\n"
"\ttext_end = .;\n"
"\n"
"\t/*\n"
"\t * Collect together read-only data.\n"
"\t */\n"
"\t.rodata : ALIGN(4096) {\n"
"\t\trodata_begin = .;\n"
"\t\t*(.rodata.*)\n"
"\t} >image\n"
"\t.got : {\n"
"\t\t*(.got)\n"
"\t} >image\n"
"\trodata_end = .;\n"
"\n"
"\t/*\n"
"\t * Collect together the read-write data including .bss at the end which\n"
"\t * will be zero'd by the entry code.\n"
"\t */\n"
"\t.data : ALIGN(4096) {\n"
"\t\tdata_begin = .;\n"
"\t\t*(.data.*)\n"
"\t\t/*\n"
"\t\t * The entry point code assumes that .data is a multiple of 32\n"
"\t\t * bytes long.\n"
"\t\t */\n"
"\t\t. = ALIGN(32);\n"
"\t\tdata_end = .;\n"
"\t} >image\n"
"\n"
"\t/* Everything beyond this point will not be included in the binary. */\n"
"\tbin_end = .;\n"
"\n"
"\t/* The entry point code assumes that .bss is 16-byte aligned. */\n"
"\t.bss : ALIGN(16)  {\n"
"\t\tbss_begin = .;\n"
"\t\t*(.bss.*)\n"
"\t\t*(COMMON)\n"
"\t\t. = ALIGN(16);\n"
"\t\tbss_end = .;\n"
"\t} >image\n"
"\n"
"\t.stack (NOLOAD) : ALIGN(4096) {\n"
"\t\tboot_stack_begin = .;\n"
"\t\t. += 40 * 4096;\n"
"\t\t. = ALIGN(4096);\n"
"\t\tboot_stack_end = .;\n"
"\t} >image\n"
"\n"
"\t. = ALIGN(4K);\n"
"\tPROVIDE(dma_region = .);\n"
"\n"
"\t/*\n"
"\t * Remove unused sections from the image.\n"
"\t */\n"
"\t/DISCARD/ : {\n"
"\t\t/* The image loads itself so doesn't need these sections. */\n"
"\t\t*(.gnu.hash)\n"
"\t\t*(.hash)\n"
"\t\t*(.interp)\n"
"\t\t*(.eh_frame_hdr)\n"
"\t\t*(.eh_frame)\n"
"\t\t*(.note.gnu.build-id)\n"
"\t}\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:940
msgid "_Makefile_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:945
msgid "# Copyright 2023 Google LLC"
msgstr ""

#: src/exercises/bare-metal/rtc.md:959
msgid "$(shell uname -s)"
msgstr ""

#: src/exercises/bare-metal/rtc.md:978
msgid "stdio -display none -kernel $< -s"
msgstr ""

#: src/exercises/bare-metal/rtc.md:981
msgid "cargo clean"
msgstr ""

#: src/exercises/bare-metal/rtc.md:995
msgid "Run the code in QEMU with `make qemu`."
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:5
msgid "([back to exercise](rtc.md))"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:36
msgid "/// Base address of the PL031 RTC.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:38
msgid "/// The IRQ used by the PL031 RTC.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:57
msgid ""
"// Safe because `PL031_BASE_ADDRESS` is the base address of a PL031 device,\n"
"    // and nothing else accesses that address range.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:62
msgid "\"RTC: {time}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:70
msgid "// Wait for 3 seconds, without interrupts.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:74
#: src/exercises/bare-metal/solutions-afternoon.md:95
msgid "\"Waiting for {}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:78
#: src/exercises/bare-metal/solutions-afternoon.md:86
#: src/exercises/bare-metal/solutions-afternoon.md:102
#: src/exercises/bare-metal/solutions-afternoon.md:110
msgid "\"matched={}, interrupt_pending={}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:90
#: src/exercises/bare-metal/solutions-afternoon.md:114
msgid "\"Finished waiting\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:92
msgid "// Wait another 3 seconds for an interrupt.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:127
msgid "_pl031.rs_:"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:134
msgid "/// Data register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:136
msgid "/// Match register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:138
msgid "/// Load register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:140
msgid "/// Control register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:143
msgid "/// Interrupt Mask Set or Clear register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:146
msgid "/// Raw Interrupt Status\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:149
msgid "/// Masked Interrupt Status\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:152
msgid "/// Interrupt Clear Register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:156
msgid "/// Driver for a PL031 real-time clock.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:164
msgid ""
"/// Constructs a new instance of the RTC driver for a PL031 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL031 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:178
msgid "/// Reads the current RTC value.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:180
#: src/exercises/bare-metal/solutions-afternoon.md:188
#: src/exercises/bare-metal/solutions-afternoon.md:196
#: src/exercises/bare-metal/solutions-afternoon.md:207
#: src/exercises/bare-metal/solutions-afternoon.md:219
#: src/exercises/bare-metal/solutions-afternoon.md:226
msgid ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL031 device which is appropriately mapped.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:185
msgid ""
"/// Writes a match value. When the RTC value matches this then an interrupt\n"
"    /// will be generated (if it is enabled).\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:193
msgid ""
"/// Returns whether the match register matches the RTC value, whether or "
"not\n"
"    /// the interrupt is enabled.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:202
msgid ""
"/// Returns whether there is currently an interrupt pending.\n"
"    ///\n"
"    /// This should be true if and only if `matched` returns true and the\n"
"    /// interrupt is masked.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:213
msgid ""
"/// Sets or clears the interrupt mask.\n"
"    ///\n"
"    /// When the mask is true the interrupt is enabled; when it is false "
"the\n"
"    /// interrupt is disabled.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:224
msgid "/// Clears a pending interrupt, if any.\n"
msgstr ""

#: src/concurrency/threads.md:12
msgid "\"Count in thread: {i}!\""
msgstr ""

#: src/concurrency/threads.md:18
msgid "\"Main thread: {i}\""
msgstr ""

#: src/concurrency/channels.md:15 src/concurrency/channels.md:16
#: src/concurrency/channels.md:20
msgid "\"Received: {:?}\""
msgstr ""

#: src/concurrency/channels/unbounded.md:16
#: src/concurrency/channels/bounded.md:16
msgid "\"Message {i}\""
msgstr ""

#: src/concurrency/channels/unbounded.md:17
#: src/concurrency/channels/bounded.md:17
msgid "\"{thread_id:?}: sent Message {i}\""
msgstr ""

#: src/concurrency/channels/unbounded.md:19
#: src/concurrency/channels/bounded.md:19
msgid "\"{thread_id:?}: done\""
msgstr ""

#: src/concurrency/channels/unbounded.md:24
#: src/concurrency/channels/bounded.md:24
msgid "\"Main: got {msg}\""
msgstr ""

#: src/concurrency/channels/bounded.md:31
msgid ""
"Calling `send` will block the current thread until there is space in the "
"channel for the new message. The thread can be blocked indefinitely if there "
"is nobody who reads from the channel."
msgstr ""

#: src/concurrency/channels/bounded.md:32
msgid ""
"A call to `send` will abort with an error (that is why it returns `Result`) "
"if the channel is closed. A channel is closed when the receiver is dropped."
msgstr ""

#: src/concurrency/channels/bounded.md:33
msgid ""
"A bounded channel with a size of zero is called a \"rendezvous channel\". "
"Every send will block the current thread until another thread calls `read`."
msgstr ""

#: src/concurrency/shared_state/arc.md:16
msgid "\"{thread_id:?}: {v:?}\""
msgstr ""

#: src/concurrency/shared_state/arc.md:21
#: src/concurrency/shared_state/example.md:17
#: src/concurrency/shared_state/example.md:45
msgid "\"v: {v:?}\""
msgstr ""

#: src/concurrency/shared_state/mutex.md:11
#: src/concurrency/shared_state/mutex.md:18
msgid "\"v: {:?}\""
msgstr ""

#: src/concurrency/shared_state/example.md:6
msgid "// use std::sync::{Arc, Mutex};\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:28
#: src/exercises/concurrency/dining-philosophers-async.md:23
msgid ""
"// left_fork: ...\n"
"    // right_fork: ...\n"
"    // thoughts: ...\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:36
#: src/exercises/concurrency/solutions-morning.md:24
#: src/exercises/concurrency/dining-philosophers-async.md:31
#: src/exercises/concurrency/solutions-afternoon.md:25
msgid "\"Eureka! {} has a new idea!\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:41
#: src/exercises/concurrency/dining-philosophers-async.md:36
#: src/exercises/concurrency/solutions-afternoon.md:30
msgid "// Pick up forks...\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:42
#: src/exercises/concurrency/solutions-morning.md:33
#: src/exercises/concurrency/dining-philosophers-async.md:37
#: src/exercises/concurrency/solutions-afternoon.md:37
msgid "\"{} is eating...\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:48
#: src/exercises/concurrency/solutions-morning.md:39
#: src/exercises/concurrency/dining-philosophers-async.md:43
#: src/exercises/concurrency/solutions-afternoon.md:45
msgid "\"Hypatia\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:48
#: src/exercises/concurrency/solutions-morning.md:39
#: src/exercises/concurrency/dining-philosophers-async.md:43
#: src/exercises/concurrency/solutions-afternoon.md:45
msgid "\"Plato\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:48
#: src/exercises/concurrency/solutions-morning.md:39
#: src/exercises/concurrency/dining-philosophers-async.md:43
#: src/exercises/concurrency/solutions-afternoon.md:45
msgid "\"Aristotle\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:48
#: src/exercises/concurrency/solutions-morning.md:39
#: src/exercises/concurrency/dining-philosophers-async.md:43
#: src/exercises/concurrency/solutions-afternoon.md:45
msgid "\"Pythagoras\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:51
#: src/exercises/concurrency/dining-philosophers-async.md:47
#: src/exercises/concurrency/solutions-afternoon.md:49
msgid "// Create forks\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:53
#: src/exercises/concurrency/dining-philosophers-async.md:49
#: src/exercises/concurrency/solutions-afternoon.md:53
msgid "// Create philosophers\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:55
msgid "// Make each of them think and eat 100 times\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:57
#: src/exercises/concurrency/dining-philosophers-async.md:53
#: src/exercises/concurrency/solutions-afternoon.md:88
msgid "// Output their thoughts\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:61
msgid "You can use the following `Cargo.toml`:"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:65
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md:37
msgid ""
"```toml\n"
"[package]\n"
"name = \"link-checker\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"reqwest = { version = \"0.11.12\", features = [\"blocking\", \"rustls-"
"tls\"] }\n"
"scraper = \"0.13.0\"\n"
"thiserror = \"1.0.37\"\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md:64
#: src/exercises/concurrency/solutions-morning.md:95
msgid "\"request error: {0}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:66
#: src/exercises/concurrency/solutions-morning.md:97
msgid "\"bad http response: {0}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:77
#: src/exercises/concurrency/solutions-morning.md:108
msgid "\"Checking {:#}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:95
#: src/exercises/concurrency/solutions-morning.md:126
msgid "\"href\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:102
#: src/exercises/concurrency/solutions-morning.md:133
msgid "\"On {base_url:#}: ignored unparsable {href:?}: {err}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:111
#: src/exercises/concurrency/solutions-morning.md:249
msgid "\"https://www.google.org\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:114
msgid "\"Links: {links:#?}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:115
msgid "\"Could not extract links: {err:#}\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:5
msgid "([back to exercise](dining-philosophers.md))"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:29
msgid "\"{} is trying to eat\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:53
msgid ""
"// To avoid a deadlock, we have to break the symmetry\n"
"        // somewhere. This will swap the forks without deinitializing\n"
"        // either of them.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:77
msgid "\"{thought}\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:84
msgid "([back to exercise](link-checker.md))"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:155
msgid ""
"/// Determine whether links within the given page should be extracted.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:163
msgid ""
"/// Mark the given page as visited, returning false if it had already\n"
"    /// been visited.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:189
msgid "// The sender got dropped. No more commands coming in.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:233
msgid "\"Got crawling error: {:#}\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:251
msgid "\"Bad URLs: {:#?}\""
msgstr ""

#: src/async/async-await.md:10
msgid "\"Count is: {i}!\""
msgstr ""

#: src/async/runtimes/tokio.md:15
msgid "\"Count in task: {i}!\""
msgstr ""

#: src/async/runtimes/tokio.md:25
msgid "\"Main task: {i}\""
msgstr ""

#: src/async/tasks.md:16
msgid "\"127.0.0.1:6142\""
msgstr ""

#: src/async/tasks.md:17
msgid "\"listening on port 6142\""
msgstr ""

#: src/async/tasks.md:22
msgid "\"connection from {addr:?}\""
msgstr ""

#: src/async/tasks.md:25
msgid "b\"Who are you?\\n\""
msgstr ""

#: src/async/tasks.md:26 src/async/tasks.md:37 src/async/tasks.md:43
msgid "\"socket error: {e:?}\""
msgstr ""

#: src/async/tasks.md:34
msgid "\"Thanks for dialing in, {name}!\\n\""
msgstr ""

#: src/async/tasks.md:54
msgid ""
"Try connecting to it with a TCP connection tool like [nc](https://www.unix."
"com/man-page/linux/1/nc/) or [telnet](https://www.unix.com/man-page/linux/1/"
"telnet/)."
msgstr ""

#: src/async/channels.md:13
msgid "\"Received {count} pings so far.\""
msgstr ""

#: src/async/channels.md:16
msgid "\"ping_handler complete\""
msgstr ""

#: src/async/channels.md:24
msgid "\"Failed to send ping.\""
msgstr ""

#: src/async/channels.md:25
msgid "\"Sent {} pings so far.\""
msgstr ""

#: src/async/channels.md:29
msgid "\"Something went wrong in ping handler task.\""
msgstr ""

#: src/async/control-flow/join.md:21
msgid "\"https://google.com\""
msgstr ""

#: src/async/control-flow/join.md:22
msgid "\"https://httpbin.org/ip\""
msgstr ""

#: src/async/control-flow/join.md:23
msgid "\"https://play.rust-lang.org/\""
msgstr ""

#: src/async/control-flow/join.md:24
msgid "\"BAD_URL\""
msgstr ""

#: src/async/control-flow/select.md:40
msgid "\"Felix\""
msgstr ""

#: src/async/control-flow/select.md:42
msgid "\"Failed to send cat.\""
msgstr ""

#: src/async/control-flow/select.md:47
msgid "\"Rex\""
msgstr ""

#: src/async/control-flow/select.md:49
msgid "\"Failed to send dog.\""
msgstr ""

#: src/async/control-flow/select.md:54
msgid "\"Failed to receive winner\""
msgstr ""

#: src/async/control-flow/select.md:56
msgid "\"Winner is {winner:?}\""
msgstr ""

#: src/async/control-flow/select.md:76
msgid ""
"An alternative is to pass `&mut future` instead of the future itself, but "
"this can lead to issues, further discussed in the pinning slide."
msgstr ""

#: src/async/pitfalls.md:8
#, fuzzy
msgid "[Cancellation](pitfalls/cancellation.md)"
msgstr "[고정](pitfalls/pin.md)"

#: src/async/pitfalls/blocking-executor.md:14
msgid "\"future {id} slept for {duration_ms}ms, finished after {}ms\""
msgstr ""

#: src/async/pitfalls/blocking-executor.md:19
msgid "\"current_thread\""
msgstr ""

#: src/async/pitfalls/pin.md:16
msgid ""
"// A work item. In this case, just sleep for the given time and respond\n"
"// with a message on the `respond_on` channel.\n"
msgstr ""

#: src/async/pitfalls/pin.md:24
msgid "// A worker which listens for work on a queue and performs it.\n"
msgstr ""

#: src/async/pitfalls/pin.md:31
msgid "// Pretend to work.\n"
msgstr ""

#: src/async/pitfalls/pin.md:34
msgid "\"failed to send response\""
msgstr ""

#: src/async/pitfalls/pin.md:37
msgid "// TODO: report number of iterations every 100ms\n"
msgstr ""

#: src/async/pitfalls/pin.md:41
msgid "// A requester which requests work and waits for it to complete.\n"
msgstr ""

#: src/async/pitfalls/pin.md:51
msgid "\"failed to send on work queue\""
msgstr ""

#: src/async/pitfalls/pin.md:52
msgid "\"failed waiting for response\""
msgstr ""

#: src/async/pitfalls/pin.md:61
msgid "\"work result for iteration {i}: {resp}\""
msgstr ""

#: src/async/pitfalls/async-traits.md:30
msgid "\"running all sleepers..\""
msgstr ""

#: src/async/pitfalls/async-traits.md:34
msgid "\"slept for {}ms\""
msgstr ""

#: src/async/pitfalls/cancellation.md:3
msgid ""
"Dropping a future implies it can never be polled again. This is called "
"_cancellation_ and it can occur at any `await` point. Care is needed to "
"ensure the system works correctly even when futures are cancelled. For "
"example, it shouldn't deadlock or lose data."
msgstr ""

#: src/async/pitfalls/cancellation.md:51
msgid "\"hi\\nthere\\n\""
msgstr ""

#: src/async/pitfalls/cancellation.md:57
msgid "\"tick!\""
msgstr ""

#: src/async/pitfalls/cancellation.md:72
msgid ""
"The compiler doesn't help with cancellation-safety. You need to read API "
"documentation and consider what state your `async fn` holds."
msgstr ""

#: src/async/pitfalls/cancellation.md:75
msgid ""
"Unlike `panic` and `?`, cancellation is part of normal control flow (vs "
"error-handling)."
msgstr ""

#: src/async/pitfalls/cancellation.md:78
msgid "The example loses parts of the string."
msgstr ""

#: src/async/pitfalls/cancellation.md:80
msgid ""
"Whenever the `tick()` branch finishes first, `next()` and its `buf` are "
"dropped."
msgstr ""

#: src/async/pitfalls/cancellation.md:82
msgid ""
"`LinesReader` can be made cancellation-safe by making `buf` part of the "
"struct:"
msgstr ""

#: src/async/pitfalls/cancellation.md:95
msgid "// prefix buf and bytes with self.\n"
msgstr ""

#: src/async/pitfalls/cancellation.md:104
msgid ""
"[`Interval::tick`](https://docs.rs/tokio/latest/tokio/time/struct.Interval."
"html#method.tick) is cancellation-safe because it keeps track of whether a "
"tick has been 'delivered'."
msgstr ""

#: src/async/pitfalls/cancellation.md:107
msgid ""
"[`AsyncReadExt::read`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncReadExt.html#method.read) is cancellation-safe because it either "
"returns or doesn't read data."
msgstr ""

#: src/async/pitfalls/cancellation.md:110
msgid ""
"[`AsyncBufReadExt::read_line`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncBufReadExt.html#method.read_line) is similar to the example and _isn't_ "
"cancellation-safe. See its documentation for details and alternatives."
msgstr ""

#: src/exercises/concurrency/afternoon.md:3
msgid ""
"To practice your Async Rust skills, we have again two exercises for you:"
msgstr ""

#: src/exercises/concurrency/afternoon.md:5
msgid ""
"Dining philosophers: we already saw this problem in the morning. This time "
"you are going to implement it with Async Rust."
msgstr ""

#: src/exercises/concurrency/afternoon.md:8
msgid ""
"A Broadcast Chat Application: this is a larger project that allows you "
"experiment with more advanced Async Rust features."
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:3
msgid ""
"See [dining philosophers](dining-philosophers.md) for a description of the "
"problem."
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:51
#: src/exercises/concurrency/solutions-afternoon.md:77
msgid "// Make them think and eat\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:57
msgid ""
"Since this time you are using Async Rust, you'll need a `tokio` dependency. "
"You can use the following `Cargo.toml`:"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:62
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers-async-dine\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"\n"
"[dependencies]\n"
"tokio = {version = \"1.26.0\", features = [\"sync\", \"time\", \"macros\", "
"\"rt-multi-thread\"]}\n"
"```"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:72
msgid ""
"Also note that this time you have to use the `Mutex` and the `mpsc` module "
"from the `tokio` crate."
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:77
msgid "Can you make your implementation single-threaded? "
msgstr ""

#: src/exercises/concurrency/chat-app.md:3
msgid ""
"In this exercise, we want to use our new knowledge to implement a broadcast "
"chat application. We have a chat server that the clients connect to and "
"publish their messages. The client reads user messages from the standard "
"input, and sends them to the server. The chat server broadcasts each message "
"that it receives to all the clients."
msgstr ""

#: src/exercises/concurrency/chat-app.md:9
msgid ""
"For this, we use [a broadcast channel](https://docs.rs/tokio/latest/tokio/"
"sync/broadcast/fn.channel.html) on the server, and [`tokio_websockets`]"
"(https://docs.rs/tokio-websockets/0.4.0/tokio_websockets/) for the "
"communication between the client and the server."
msgstr ""

#: src/exercises/concurrency/chat-app.md:13
msgid "Create a new Cargo project and add the following dependencies:"
msgstr ""

#: src/exercises/concurrency/chat-app.md:15
#, fuzzy
msgid "_Cargo.toml_:"
msgstr "Embed.toml:"

#: src/exercises/concurrency/chat-app.md:19
msgid ""
"```toml\n"
"[package]\n"
"name = \"chat-async\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"\n"
"[dependencies]\n"
"futures-util = { version = \"0.3.28\", features = [\"sink\"] }\n"
"http = \"0.2.9\"\n"
"tokio = { version = \"1.28.1\", features = [\"full\"] }\n"
"tokio-websockets = { version = \"0.4.0\", features = [\"client\", "
"\"fastrand\", \"server\", \"sha1_smol\"] }\n"
"```"
msgstr ""

#: src/exercises/concurrency/chat-app.md:32
msgid "The required APIs"
msgstr ""

#: src/exercises/concurrency/chat-app.md:33
msgid ""
"You are going to need the following functions from `tokio` and "
"[`tokio_websockets`](https://docs.rs/tokio-websockets/0.4.0/"
"tokio_websockets/). Spend a few minutes to familiarize yourself with the "
"API. "
msgstr ""

#: src/exercises/concurrency/chat-app.md:37
msgid ""
"[StreamExt::next()](https://docs.rs/futures-util/0.3.28/futures_util/stream/"
"trait.StreamExt.html#method.next) implemented by `WebsocketStream`: for "
"asynchronously reading messages from a Websocket Stream."
msgstr ""

#: src/exercises/concurrency/chat-app.md:39
msgid ""
"[SinkExt::send()](https://docs.rs/futures-util/0.3.28/futures_util/sink/"
"trait.SinkExt.html#method.send) implemented by `WebsocketStream`: for "
"asynchronously sending messages on a Websocket Stream."
msgstr ""

#: src/exercises/concurrency/chat-app.md:41
msgid ""
"[Lines::next_line()](https://docs.rs/tokio/latest/tokio/io/struct.Lines."
"html#method.next_line): for asynchronously reading user messages from the "
"standard input."
msgstr ""

#: src/exercises/concurrency/chat-app.md:43
msgid ""
"[Sender::subscribe()](https://docs.rs/tokio/latest/tokio/sync/broadcast/"
"struct.Sender.html#method.subscribe): for subscribing to a broadcast channel."
msgstr ""

#: src/exercises/concurrency/chat-app.md:48
msgid ""
"Normally in a Cargo project, you can have only one binary, and one `src/main."
"rs` file. In this project, we need two binaries. One for the client, and one "
"for the server. You could potentially make them two separate Cargo projects, "
"but we are going to put them in a single Cargo project with two binaries. "
"For this to work, the client and the server code should go under `src/bin` "
"(see the [documentation](https://doc.rust-lang.org/cargo/reference/cargo-"
"targets.html#binaries)). "
msgstr ""

#: src/exercises/concurrency/chat-app.md:55
msgid ""
"Copy the following server and client code into `src/bin/server.rs` and `src/"
"bin/client.rs`, respectively. Your task is to complete these files as "
"described below. "
msgstr ""

#: src/exercises/concurrency/chat-app.md:78
#: src/exercises/concurrency/chat-app.md:125
msgid "// TODO: For a hint, see the description of the task below.\n"
msgstr ""

#: src/exercises/concurrency/chat-app.md:86
#: src/exercises/concurrency/solutions-afternoon.md:149
msgid "\"127.0.0.1:2000\""
msgstr ""

#: src/exercises/concurrency/chat-app.md:87
#: src/exercises/concurrency/solutions-afternoon.md:150
msgid "\"listening on port 2000\""
msgstr ""

#: src/exercises/concurrency/chat-app.md:91
#: src/exercises/concurrency/solutions-afternoon.md:154
msgid "\"New connection from {addr:?}\""
msgstr ""

#: src/exercises/concurrency/chat-app.md:94
#: src/exercises/concurrency/solutions-afternoon.md:157
msgid "// Wrap the raw TCP stream into a websocket.\n"
msgstr ""

#: src/exercises/concurrency/chat-app.md:117
#: src/exercises/concurrency/solutions-afternoon.md:178
msgid "\"ws://127.0.0.1:2000\""
msgstr ""

#: src/exercises/concurrency/chat-app.md:145
msgid "Implement the `handle_connection` function in `src/bin/server.rs`."
msgstr ""

#: src/exercises/concurrency/chat-app.md:146
msgid ""
"Hint: Use `tokio::select!` for concurrently performing two tasks in a "
"continuous loop. One task receives messages from the client and broadcasts "
"them. The other sends messages received by the server to the client."
msgstr ""

#: src/exercises/concurrency/chat-app.md:149
msgid "Complete the main function in `src/bin/client.rs`."
msgstr ""

#: src/exercises/concurrency/chat-app.md:150
msgid ""
"Hint: As before, use `tokio::select!` in a continuous loop for concurrently "
"performing two tasks: (1) reading user messages from standard input and "
"sending them to the server, and (2) receiving messages from the server, and "
"displaying them for the user."
msgstr ""

#: src/exercises/concurrency/chat-app.md:154
msgid ""
"Optional: Once you are done, change the code to broadcast messages to all "
"clients, but the sender of the message."
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:5
msgid "([back to exercise](dining-philosophers-async.md))"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:32
msgid ""
"// Add a delay before picking the second fork to allow the execution\n"
"        // to transfer to another task\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:40
msgid "// The locks are dropped here\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:60
msgid ""
"// To avoid a deadlock, we have to break the symmetry\n"
"            // somewhere. This will swap the forks without deinitializing\n"
"            // either of them.\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:74
msgid "// tx is dropped here, so we don't need to explicitly drop it later\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:90
msgid "\"Here is a thought: {thought}\""
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:97
msgid "([back to exercise](chat-app.md))"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:117
msgid "\"Welcome to chat! Type a message\""
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:121
msgid ""
"// A continuous loop for concurrently performing two tasks: (1) receiving\n"
"    // messages from `ws_stream` and broadcasting them, and (2) receiving\n"
"    // messages on `bcast_rx` and sending them to the client.\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:130
msgid "\"From client {addr:?} {text:?}\""
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:185
msgid "// Continuous loop for concurrently sending and receiving messages.\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:192
msgid "\"From server: {}\""
msgstr ""

#: src/glossary.md:3
msgid ""
"The following is a glossary which aims to give a short definition of many "
"Rust terms. For translations, this also serves to connect the term back to "
"the English original."
msgstr ""

#: src/glossary.md:30
msgid ""
"allocate:  \n"
"Dynamic memory allocation on [the heap](memory-management/stack-vs-heap.md)."
msgstr ""

#: src/glossary.md:32
msgid ""
"argument:  \n"
"Information that is passed into a function or method."
msgstr ""

#: src/glossary.md:34
msgid ""
"Bare-metal Rust:  \n"
"Low-level Rust development, often deployed to a system without an operating "
"system. See [Bare-metal Rust](bare-metal.md)."
msgstr ""

#: src/glossary.md:37
msgid ""
"block:  \n"
"See [Blocks](control-flow/blocks.md) and _scope_."
msgstr ""

#: src/glossary.md:39
msgid ""
"borrow:  \n"
"See [Borrowing](ownership/borrowing.md)."
msgstr ""

#: src/glossary.md:41
msgid ""
"borrow checker:  \n"
"The part of the Rust compiler which checks that all borrows are valid."
msgstr ""

#: src/glossary.md:43
msgid ""
"brace:  \n"
"`{` and `}`. Also called _curly brace_, they delimit _blocks_."
msgstr ""

#: src/glossary.md:45
msgid ""
"build:  \n"
"The process of converting source code into executable code or a usable "
"program."
msgstr ""

#: src/glossary.md:47
msgid ""
"call:  \n"
"To invoke or execute a function or method."
msgstr ""

#: src/glossary.md:49
msgid ""
"channel:  \n"
"Used to safely pass messages [between threads](concurrency/channels.md)."
msgstr ""

#: src/glossary.md:51
msgid ""
"Comprehensive Rust 🦀:  \n"
"The courses here are jointly called Comprehensive Rust 🦀."
msgstr ""

#: src/glossary.md:53
msgid ""
"concurrency:  \n"
"The execution of multiple tasks or processes at the same time."
msgstr ""

#: src/glossary.md:55
msgid ""
"Concurrency in Rust:  \n"
"See [Concurrency in Rust](concurrency.md)."
msgstr ""

#: src/glossary.md:57
msgid ""
"constant:  \n"
"A value that does not change during the execution of a program."
msgstr ""

#: src/glossary.md:59
msgid ""
"control flow:  \n"
"The order in which the individual statements or instructions are executed in "
"a program."
msgstr ""

#: src/glossary.md:61
msgid ""
"crash:  \n"
"An unexpected and unhandled failure or termination of a program."
msgstr ""

#: src/glossary.md:63
msgid ""
"enumeration:  \n"
"A data type that consists of named constant values."
msgstr ""

#: src/glossary.md:65
msgid ""
"error:  \n"
"An unexpected condition or result that deviates from the expected behavior."
msgstr ""

#: src/glossary.md:67
msgid ""
"error handling:  \n"
"The process of managing and responding to errors that occur during program "
"execution."
msgstr ""

#: src/glossary.md:69
msgid ""
"exercise:  \n"
"A task or problem designed to practice and test programming skills."
msgstr ""

#: src/glossary.md:71
msgid ""
"function:  \n"
"A reusable block of code that performs a specific task."
msgstr ""

#: src/glossary.md:73
msgid ""
"garbage collector:  \n"
"A mechanism that automatically frees up memory occupied by objects that are "
"no longer in use."
msgstr ""

#: src/glossary.md:75
msgid ""
"generics:  \n"
"A feature that allows writing code with placeholders for types, enabling "
"code reuse with different data types."
msgstr ""

#: src/glossary.md:77
msgid ""
"immutable:  \n"
"Unable to be changed after creation."
msgstr ""

#: src/glossary.md:79
msgid ""
"integration test:  \n"
"A type of test that verifies the interactions between different parts or "
"components of a system."
msgstr ""

#: src/glossary.md:81
msgid ""
"keyword:  \n"
"A reserved word in a programming language that has a specific meaning and "
"cannot be used as an identifier."
msgstr ""

#: src/glossary.md:83
msgid ""
"library:  \n"
"A collection of precompiled routines or code that can be used by programs."
msgstr ""

#: src/glossary.md:85
msgid ""
"macro:  \n"
"Rust macros can be recognized by a `!` in the name. Macros are used when "
"normal functions are not enough. A typical example is `format!`, which takes "
"a variable number of arguments, which isn't supported by Rust functions."
msgstr ""

#: src/glossary.md:90
msgid ""
"`main` function:  \n"
"Rust programs start executing with the `main` function."
msgstr ""

#: src/glossary.md:92
msgid ""
"match:  \n"
"A control flow construct in Rust that allows for pattern matching on the "
"value of an expression."
msgstr ""

#: src/glossary.md:94
msgid ""
"memory leak:  \n"
"A situation where a program fails to release memory that is no longer "
"needed, leading to a gradual increase in memory usage."
msgstr ""

#: src/glossary.md:96
msgid ""
"method:  \n"
"A function associated with an object or a type in Rust."
msgstr ""

#: src/glossary.md:98
msgid ""
"module:  \n"
"A namespace that contains definitions, such as functions, types, or traits, "
"to organize code in Rust."
msgstr ""

#: src/glossary.md:100
msgid ""
"move:  \n"
"The transfer of ownership of a value from one variable to another in Rust."
msgstr ""

#: src/glossary.md:102
msgid ""
"mutable:  \n"
"A property in Rust that allows variables to be modified after they have been "
"declared."
msgstr ""

#: src/glossary.md:104
msgid ""
"ownership:  \n"
"The concept in Rust that defines which part of the code is responsible for "
"managing the memory associated with a value."
msgstr ""

#: src/glossary.md:106
msgid ""
"panic:  \n"
"An unrecoverable error condition in Rust that results in the termination of "
"the program."
msgstr ""

#: src/glossary.md:108
msgid ""
"parameter:  \n"
"A value that is passed into a function or method when it is called."
msgstr ""

#: src/glossary.md:110
msgid ""
"pattern:  \n"
"A combination of values, literals, or structures that can be matched against "
"an expression in Rust."
msgstr ""

#: src/glossary.md:112
msgid ""
"payload:  \n"
"The data or information carried by a message, event, or data structure."
msgstr ""

#: src/glossary.md:114
msgid ""
"program:  \n"
"A set of instructions that a computer can execute to perform a specific task "
"or solve a particular problem."
msgstr ""

#: src/glossary.md:116
msgid ""
"programming language:  \n"
"A formal system used to communicate instructions to a computer, such as Rust."
msgstr ""

#: src/glossary.md:118
msgid ""
"receiver:  \n"
"The first parameter in a Rust method that represents the instance on which "
"the method is called."
msgstr ""

#: src/glossary.md:120
msgid ""
"reference counting:  \n"
"A memory management technique in which the number of references to an object "
"is tracked, and the object is deallocated when the count reaches zero."
msgstr ""

#: src/glossary.md:122
msgid ""
"return:  \n"
"A keyword in Rust used to indicate the value to be returned from a function."
msgstr ""

#: src/glossary.md:124
msgid ""
"Rust:  \n"
"A systems programming language that focuses on safety, performance, and "
"concurrency."
msgstr ""

#: src/glossary.md:126
msgid ""
"Rust Fundamentals:  \n"
"Days 1 to 3 of this course."
msgstr ""

#: src/glossary.md:128
msgid ""
"Rust in Android:  \n"
"See [Rust in Android](android.md)."
msgstr ""

#: src/glossary.md:130
msgid ""
"Rust in Chromium:  \n"
"See [Rust in Chromium](chromium.md)."
msgstr ""

#: src/glossary.md:132
msgid ""
"safe:  \n"
"Refers to code that adheres to Rust's ownership and borrowing rules, "
"preventing memory-related errors."
msgstr ""

#: src/glossary.md:134
msgid ""
"scope:  \n"
"The region of a program where a variable is valid and can be used."
msgstr ""

#: src/glossary.md:136
msgid ""
"standard library:  \n"
"A collection of modules providing essential functionality in Rust."
msgstr ""

#: src/glossary.md:138
msgid ""
"static:  \n"
"A keyword in Rust used to define static variables or items with a `'static` "
"lifetime."
msgstr ""

#: src/glossary.md:140
msgid ""
"string:  \n"
"A data type storing textual data. See [`String` vs `str`](basic-syntax/"
"string-slices.html) for more."
msgstr ""

#: src/glossary.md:142
msgid ""
"struct:  \n"
"A composite data type in Rust that groups together variables of different "
"types under a single name."
msgstr ""

#: src/glossary.md:144
msgid ""
"test:  \n"
"A Rust module containing functions that test the correctness of other "
"functions."
msgstr ""

#: src/glossary.md:146
msgid ""
"thread:  \n"
"A separate sequence of execution in a program, allowing concurrent execution."
msgstr ""

#: src/glossary.md:148
msgid ""
"thread safety:  \n"
"The property of a program that ensures correct behavior in a multithreaded "
"environment."
msgstr ""

#: src/glossary.md:150
msgid ""
"trait:  \n"
"A collection of methods defined for an unknown type, providing a way to "
"achieve polymorphism in Rust."
msgstr ""

#: src/glossary.md:152
msgid ""
"type:  \n"
"A classification that specifies which operations can be performed on values "
"of a particular kind in Rust."
msgstr ""

#: src/glossary.md:154
msgid ""
"type inference:  \n"
"The ability of the Rust compiler to deduce the type of a variable or "
"expression."
msgstr ""

#: src/glossary.md:156
msgid ""
"undefined behavior:  \n"
"Actions or conditions in Rust that have no specified result, often leading "
"to unpredictable program behavior."
msgstr ""

#: src/glossary.md:158
msgid ""
"union:  \n"
"A data type that can hold values of different types but only one at a time."
msgstr ""

#: src/glossary.md:160
msgid ""
"unit test:  \n"
"Rust comes with built-in support for running small unit tests and larger "
"integration tests. See [Unit Tests](testing/unit-tests.html)."
msgstr ""

#: src/glossary.md:163
msgid ""
"unsafe:  \n"
"The subset of Rust which allows you to trigger _undefined behavior_. See "
"[Unsafe Rust](unsafe.html)."
msgstr ""

#: src/glossary.md:165
msgid ""
"variable:  \n"
"A memory location storing data. Variables are valid in a _scope_. "
msgstr ""
