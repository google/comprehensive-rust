msgid ""
msgstr ""
"Project-Id-Version: Comprehensive Rust ü¶Ä\n"
"POT-Creation-Date: 2023-09-19\n"
"PO-Revision-Date: 2023-10-18 20:05+0300\n"
"Last-Translator: Oleksandr Leoshko <sleo170504@gmail.com>\n"
"Language-Team: \n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.4\n"

#: src/SUMMARY.md:4 src/index.md:1
msgid "Welcome to Comprehensive Rust ü¶Ä"
msgstr "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ Comprehensive Rust ü¶Ä"

#: src/SUMMARY.md:5 src/running-the-course.md:1
msgid "Running the Course"
msgstr "–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∫—É—Ä—Å—É"

#: src/SUMMARY.md:6 src/running-the-course/course-structure.md:1
msgid "Course Structure"
msgstr "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å—É"

#: src/SUMMARY.md:7 src/running-the-course/keyboard-shortcuts.md:1
msgid "Keyboard Shortcuts"
msgstr "–ì–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ"

#: src/SUMMARY.md:8 src/running-the-course/translations.md:1
msgid "Translations"
msgstr "–ü–µ—Ä–µ–∫–ª–∞–¥–∏"

#: src/SUMMARY.md:9 src/cargo.md:1
msgid "Using Cargo"
msgstr "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Cargo"

#: src/SUMMARY.md:10
msgid "Rust Ecosystem"
msgstr "–ï–∫–æ—Å–∏—Å—Ç–µ–º–∞ Rust"

#: src/SUMMARY.md:11
msgid "Code Samples"
msgstr "–ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—É"

#: src/SUMMARY.md:12
msgid "Running Cargo Locally"
msgstr "–õ–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ Cargo"

#: src/SUMMARY.md:15
msgid "Day 1: Morning"
msgstr "–î–µ–Ω—å 1: –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:19 src/SUMMARY.md:79 src/SUMMARY.md:134 src/SUMMARY.md:192
#: src/SUMMARY.md:218 src/SUMMARY.md:268
msgid "Welcome"
msgstr "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ"

#: src/SUMMARY.md:20 src/welcome-day-1/what-is-rust.md:1
msgid "What is Rust?"
msgstr "–©–æ —Ç–∞–∫–µ Rust?"

#: src/SUMMARY.md:21 src/hello-world.md:1
msgid "Hello World!"
msgstr "Hello World!"

#: src/SUMMARY.md:22 src/hello-world/small-example.md:1
msgid "Small Example"
msgstr "–ù–µ–≤–µ–ª–∏–∫–∏–π –ü—Ä–∏–∫–ª–∞–¥"

#: src/SUMMARY.md:23 src/why-rust.md:1
msgid "Why Rust?"
msgstr "–ß–æ–º—É Rust?"

#: src/SUMMARY.md:24 src/why-rust/compile-time.md:1
msgid "Compile Time Guarantees"
msgstr "–ì–∞—Ä–∞–Ω—Ç—ñ—ó –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"

#: src/SUMMARY.md:25 src/why-rust/runtime.md:1
msgid "Runtime Guarantees"
msgstr "–ì–∞—Ä–∞–Ω—Ç—ñ—ó –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"

#: src/SUMMARY.md:26 src/why-rust/modern.md:1
msgid "Modern Features"
msgstr "–°—É—á–∞—Å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ"

#: src/SUMMARY.md:27 src/basic-syntax.md:1
msgid "Basic Syntax"
msgstr "–ë–∞–∑–æ–≤–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å"

#: src/SUMMARY.md:28 src/basic-syntax/scalar-types.md:1
msgid "Scalar Types"
msgstr "–°–∫–∞–ª—è—Ä–Ω—ñ —Ç–∏–ø–∏"

#: src/SUMMARY.md:29 src/basic-syntax/compound-types.md:1
msgid "Compound Types"
msgstr "–°–∫–ª–∞–¥–µ–Ω—ñ —Ç–∏–ø–∏"

#: src/SUMMARY.md:30 src/basic-syntax/references.md:1
msgid "References"
msgstr "–ü–æ—Å–∏–ª–∞–Ω–Ω—è"

#: src/SUMMARY.md:31 src/basic-syntax/references-dangling.md:1
msgid "Dangling References"
msgstr "–í–∏—Å—è—á—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"

#: src/SUMMARY.md:32 src/basic-syntax/slices.md:1
msgid "Slices"
msgstr "–°–ª–∞–π—Å–∏"

#: src/SUMMARY.md:33
msgid "String vs str"
msgstr "String —Ç–∞ str"

#: src/SUMMARY.md:34 src/basic-syntax/functions.md:1
msgid "Functions"
msgstr "–§—É–Ω–∫—Ü—ñ—ó"

#: src/SUMMARY.md:35 src/basic-syntax/rustdoc.md:1
msgid "Rustdoc"
msgstr "Rustdoc"

#: src/SUMMARY.md:36 src/SUMMARY.md:102 src/basic-syntax/methods.md:1
#: src/methods.md:1
msgid "Methods"
msgstr "–ú–µ—Ç–æ–¥–∏"

#: src/SUMMARY.md:37
msgid "Overloading"
msgstr "–ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"

#: src/SUMMARY.md:38 src/SUMMARY.md:71 src/SUMMARY.md:105 src/SUMMARY.md:125
#: src/SUMMARY.md:154 src/SUMMARY.md:184 src/SUMMARY.md:211 src/SUMMARY.md:232
#: src/SUMMARY.md:260 src/SUMMARY.md:282 src/SUMMARY.md:303
#: src/exercises/android/morning.md:1 src/exercises/bare-metal/morning.md:1
#: src/exercises/bare-metal/afternoon.md:1
#: src/exercises/concurrency/morning.md:1
#: src/exercises/concurrency/afternoon.md:1
msgid "Exercises"
msgstr "–í–ø—Ä–∞–≤–∏"

#: src/SUMMARY.md:39 src/exercises/day-1/implicit-conversions.md:1
msgid "Implicit Conversions"
msgstr "–ù–µ—è–≤–Ω—ñ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è"

#: src/SUMMARY.md:40
msgid "Arrays and for Loops"
msgstr "–ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏ for"

#: src/SUMMARY.md:42
msgid "Day 1: Afternoon"
msgstr "–î–µ–Ω—å 1: –ü–æ–ª—É–¥–µ–Ω—å"

#: src/SUMMARY.md:44 src/SUMMARY.md:295 src/control-flow.md:1
msgid "Control Flow"
msgstr "–ü–æ—Ç—ñ–∫ –∫–æ–Ω—Ç—Ä–æ–ª—é"

#: src/SUMMARY.md:45 src/control-flow/blocks.md:1
msgid "Blocks"
msgstr "–ë–ª–æ–∫–∏"

#: src/SUMMARY.md:46
msgid "if expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ if"

#: src/SUMMARY.md:47
msgid "for expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ for"

#: src/SUMMARY.md:48
msgid "while expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ while"

#: src/SUMMARY.md:49
msgid "break & continue"
msgstr "break —Ç–∞ continue"

#: src/SUMMARY.md:50
msgid "loop expressions"
msgstr "—Ü–∏–∫–ª–∏"

#: src/SUMMARY.md:52 src/basic-syntax/variables.md:1
msgid "Variables"
msgstr "–ó–º—ñ–Ω–Ω—ñ"

#: src/SUMMARY.md:53 src/basic-syntax/type-inference.md:1
msgid "Type Inference"
msgstr "–í–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤"

#: src/SUMMARY.md:54
msgid "static & const"
msgstr "static —Ç–∞ const"

#: src/SUMMARY.md:55 src/basic-syntax/scopes-shadowing.md:1
msgid "Scopes and Shadowing"
msgstr "–û–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Ç–∞ –∑–∞—Ç—ñ–Ω–µ–Ω–Ω—è"

#: src/SUMMARY.md:56 src/enums.md:1
msgid "Enums"
msgstr "–ü–µ—Ä–µ–ª—ñ—á—É–≤–∞–Ω—ñ —Ç–∏–ø–∏"

#: src/SUMMARY.md:57 src/enums/variant-payloads.md:1
msgid "Variant Payloads"
msgstr "–í–∞—Ä—ñ–∞–Ω—Ç–∏ –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º"

#: src/SUMMARY.md:58 src/enums/sizes.md:1
msgid "Enum Sizes"
msgstr "–†–æ–∑–º—ñ—Ä–∏ –ø–µ—Ä–µ–ª—ñ—á—É–≤–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤"

#: src/SUMMARY.md:60 src/control-flow/novel.md:1
msgid "Novel Control Flow"
msgstr "–ù–æ–≤—ñ—Ç–Ω—ñ–π –ø–æ—Ç—ñ–∫ –∫–æ–Ω—Ç—Ä–æ–ª—é"

#: src/SUMMARY.md:61
msgid "if let expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ if let"

#: src/SUMMARY.md:62
msgid "while let expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ while let"

#: src/SUMMARY.md:63
msgid "match expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ match"

#: src/SUMMARY.md:65 src/pattern-matching.md:1
msgid "Pattern Matching"
msgstr "–ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∑—Ä–∞–∑–∫—ñ–≤"

#: src/SUMMARY.md:66 src/pattern-matching/destructuring-enums.md:1
msgid "Destructuring Enums"
msgstr "–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ—á—É–≤–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤"

#: src/SUMMARY.md:67 src/pattern-matching/destructuring-structs.md:1
msgid "Destructuring Structs"
msgstr "–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä"

#: src/SUMMARY.md:68 src/pattern-matching/destructuring-arrays.md:1
msgid "Destructuring Arrays"
msgstr "–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—ñ–≤"

#: src/SUMMARY.md:69 src/pattern-matching/match-guards.md:1
msgid "Match Guards"
msgstr "–£–º–æ–≤–Ω—ñ –∑–∞–ø–æ–±—ñ–∂–Ω–∏–∫–∏"

#: src/SUMMARY.md:72 src/exercises/day-1/luhn.md:1
#: src/exercises/day-1/solutions-afternoon.md:3
msgid "Luhn Algorithm"
msgstr "–ê–ª–≥–æ—Ä–∏—Ç–º –õ—É–Ω–∞"

#: src/SUMMARY.md:73
msgid "Pattern Matching (TBD)"
msgstr "–ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∑—Ä–∞–∑–∫—ñ–≤"

#: src/SUMMARY.md:75
msgid "Day 2: Morning"
msgstr "–î–µ–Ω—å 2: –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:81 src/memory-management.md:1
msgid "Memory Management"
msgstr "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é"

#: src/SUMMARY.md:82
msgid "Stack vs Heap"
msgstr "–°—Ç–µ–∫ —Ç–∞ –ö—É–ø–∞"

#: src/SUMMARY.md:83
msgid "Stack Memory"
msgstr "–°—Ç–µ–∫–æ–≤–∞ –ø–∞–º'—è—Ç—å"

#: src/SUMMARY.md:84 src/memory-management/manual.md:1
msgid "Manual Memory Management"
msgstr "–†—É—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é"

#: src/SUMMARY.md:85 src/memory-management/scope-based.md:1
msgid "Scope-Based Memory Management"
msgstr "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º—è—Ç—Ç—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±–ª–∞—Å—Ç–µ–π –≤–∏–¥–∏–º–æ—Å—Ç—ñ"

#: src/SUMMARY.md:86
msgid "Garbage Collection"
msgstr "–ó–±–∏—Ä–∞–Ω–Ω—è —Å–º—ñ—Ç—Ç—è"

#: src/SUMMARY.md:87
msgid "Rust Memory Management"
msgstr "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é –≤ Rust"

#: src/SUMMARY.md:88 src/ownership.md:1
msgid "Ownership"
msgstr "–í–æ–ª–æ–¥—ñ–Ω–Ω—è"

#: src/SUMMARY.md:89 src/ownership/move-semantics.md:1
msgid "Move Semantics"
msgstr "–°–µ–º–∞–Ω—Ç–∏–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è"

#: src/SUMMARY.md:90 src/ownership/moved-strings-rust.md:1
msgid "Moved Strings in Rust"
msgstr "–ü–µ—Ä–µ–º—ñ—â–µ–Ω—ñ —Å—Ç—Ä—ñ—á–∫–∏ –≤ Rust"

#: src/SUMMARY.md:91
msgid "Double Frees in Modern C++"
msgstr "–ü–æ–¥–≤—ñ–π–Ω—ñ –≤–∏–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –≤ —Å—É—á–∞—Å–Ω–æ–º—É C++"

#: src/SUMMARY.md:92 src/ownership/moves-function-calls.md:1
msgid "Moves in Function Calls"
msgstr "–ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —É –≤–∏–∫–ª–∏–∫–∞—Ö —Ñ—É–Ω–∫—Ü—ñ–π"

#: src/SUMMARY.md:93 src/ownership/copy-clone.md:1
msgid "Copying and Cloning"
msgstr "–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è"

#: src/SUMMARY.md:94 src/ownership/borrowing.md:1
msgid "Borrowing"
msgstr "–ó–∞–ø–æ–∑–∏—á–µ–Ω–Ω—è"

#: src/SUMMARY.md:95 src/ownership/shared-unique-borrows.md:1
msgid "Shared and Unique Borrows"
msgstr "–°–ø—ñ–ª—å–Ω—ñ —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–∞–ø–æ–∑–∏—á–µ–Ω–Ω—è"

#: src/SUMMARY.md:96 src/ownership/lifetimes.md:1
msgid "Lifetimes"
msgstr "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è"

#: src/SUMMARY.md:97 src/ownership/lifetimes-function-calls.md:1
msgid "Lifetimes in Function Calls"
msgstr "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è —É –≤–∏–∫–ª–∏–∫–∞—Ö —Ñ—É–Ω–∫—Ü—ñ–π"

#: src/SUMMARY.md:98 src/ownership/lifetimes-data-structures.md:1
msgid "Lifetimes in Data Structures"
msgstr "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –¥–∞–Ω–∏—Ö"

#: src/SUMMARY.md:99 src/structs.md:1
msgid "Structs"
msgstr "–°—Ç—Ä—É–∫—Ç—É—Ä–∏"

#: src/SUMMARY.md:100 src/structs/tuple-structs.md:1
msgid "Tuple Structs"
msgstr "–ö–æ—Ä—Ç–µ–∂–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏"

#: src/SUMMARY.md:101 src/structs/field-shorthand.md:1
msgid "Field Shorthand Syntax"
msgstr "–°–∫–æ—Ä–æ—á–µ–Ω–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ–ª—ñ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä"

#: src/SUMMARY.md:103 src/methods/receiver.md:1
msgid "Method Receiver"
msgstr "–û—Ç—Ä–∏–º—É–≤–∞—á –º–µ—Ç–æ–¥—É"

#: src/SUMMARY.md:104 src/SUMMARY.md:166 src/SUMMARY.md:281
#: src/methods/example.md:1 src/concurrency/shared_state/example.md:1
msgid "Example"
msgstr "–ü—Ä–∏–∫–ª–∞–¥"

#: src/SUMMARY.md:106 src/exercises/day-2/book-library.md:1
msgid "Storing Books"
msgstr "–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–Ω–∏–∂–æ–∫"

#: src/SUMMARY.md:107 src/exercises/day-2/health-statistics.md:1
msgid "Health Statistics"
msgstr "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—è"

#: src/SUMMARY.md:109
msgid "Day 2: Afternoon"
msgstr "–î–µ–Ω—å 2: –ü–æ–ª—É–¥–µ–Ω—å"

#: src/SUMMARY.md:111 src/std.md:1
msgid "Standard Library"
msgstr "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞"

#: src/SUMMARY.md:112
msgid "Option and Result"
msgstr "Option —Ç–∞ Result"

#: src/SUMMARY.md:113 src/std/string.md:1
msgid "String"
msgstr "String"

#: src/SUMMARY.md:114
msgid "Vec"
msgstr "Vec"

#: src/SUMMARY.md:115
msgid "HashMap"
msgstr "HashMap"

#: src/SUMMARY.md:116
msgid "Box"
msgstr "Box"

#: src/SUMMARY.md:117
msgid "Recursive Data Types"
msgstr "–†–µ–∫—É—Ä—Å–∏–≤–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö"

#: src/SUMMARY.md:118 src/std/box-niche.md:1
msgid "Niche Optimization"
msgstr "–ù—ñ—à–µ–≤–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è"

#: src/SUMMARY.md:119
msgid "Rc"
msgstr "Rc"

#: src/SUMMARY.md:120
msgid "Cell/RefCell"
msgstr "Cell/RefCell"

#: src/SUMMARY.md:121 src/modules.md:1
msgid "Modules"
msgstr "–ú–æ–¥—É–ª—ñ"

#: src/SUMMARY.md:122 src/modules/visibility.md:1
msgid "Visibility"
msgstr "–í–∏–¥–∏–º—ñ—Å—Ç—å"

#: src/SUMMARY.md:123 src/modules/paths.md:1
msgid "Paths"
msgstr "–®–ª—è—Ö–∏"

#: src/SUMMARY.md:124 src/modules/filesystem.md:1
msgid "Filesystem Hierarchy"
msgstr "–Ü—î—Ä–∞—Ä—Ö—ñ—è —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏"

#: src/SUMMARY.md:126 src/exercises/day-2/iterators-and-ownership.md:1
msgid "Iterators and Ownership"
msgstr "–Ü—Ç–µ—Ä–∞—Ç–æ—Ä–∏ —Ç–∞ –≤–æ–ª–æ–¥—ñ–Ω–Ω—è"

#: src/SUMMARY.md:127 src/exercises/day-2/strings-iterators.md:1
#: src/exercises/day-2/solutions-afternoon.md:3
msgid "Strings and Iterators"
msgstr "–°—Ç—Ä—ñ—á–∫–∏ —Ç–∞ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∏"

#: src/SUMMARY.md:130
msgid "Day 3: Morning"
msgstr "–î–µ–Ω—å 3: –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:135 src/generics.md:1
msgid "Generics"
msgstr "–£–∑–∞–≥–∞–ª—å–Ω–µ–Ω—ñ —Ç–∏–ø–∏"

#: src/SUMMARY.md:136 src/generics/data-types.md:1
msgid "Generic Data Types"
msgstr "–£–∑–∞–≥–∞–ª—å–Ω–µ–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö"

#: src/SUMMARY.md:137 src/generics/methods.md:1
msgid "Generic Methods"
msgstr "–£–∑–∞–≥–∞–ª—å–Ω–µ–Ω—ñ –º–µ—Ç–æ–¥–∏"

#: src/SUMMARY.md:138 src/generics/monomorphization.md:1
msgid "Monomorphization"
msgstr "–ú–æ–Ω–æ–º–æ—Ä—Ñ—ñ–∑–∞—Ü—ñ—è"

#: src/SUMMARY.md:139 src/traits.md:1
msgid "Traits"
msgstr "–¢—Ä–µ–π—Ç–∏"

#: src/SUMMARY.md:140 src/traits/trait-objects.md:1
msgid "Trait Objects"
msgstr "–¢—Ä–µ–π—Ç-–æ–±'—î–∫—Ç–∏"

#: src/SUMMARY.md:141 src/traits/deriving-traits.md:1
msgid "Deriving Traits"
msgstr "–ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–π—Ç—ñ–≤"

#: src/SUMMARY.md:142 src/traits/default-methods.md:1
msgid "Default Methods"
msgstr "–ú–µ—Ç–æ–¥–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"

#: src/SUMMARY.md:143 src/traits/trait-bounds.md:1
msgid "Trait Bounds"
msgstr "–û–±–º–µ–∂–µ–Ω–Ω—è —Ç—Ä–µ–π—Ç—É"

#: src/SUMMARY.md:144
msgid "impl Trait"
msgstr "impl Trait"

#: src/SUMMARY.md:145 src/traits/important-traits.md:1
msgid "Important Traits"
msgstr "–í–∞–∂–ª–∏–≤—ñ —Ç—Ä–µ–π—Ç–∏"

#: src/SUMMARY.md:146
msgid "Iterator"
msgstr "–Ü—Ç–µ—Ä–∞—Ç–æ—Ä"

#: src/SUMMARY.md:147 src/traits/from-iterator.md:1
msgid "FromIterator"
msgstr "FromIterator"

#: src/SUMMARY.md:148
msgid "From and Into"
msgstr "From —Ç–∞ Into"

#: src/SUMMARY.md:149
msgid "Read and Write"
msgstr "Read —Ç–∞ Write"

#: src/SUMMARY.md:150
msgid "Drop"
msgstr "–¢—Ä–µ–π—Ç `Drop`"

#: src/SUMMARY.md:151
msgid "Default"
msgstr "–¢—Ä–µ–π—Ç `Default`"

#: src/SUMMARY.md:152
msgid "Operators: Add, Mul, ..."
msgstr "–û–ø–µ—Ä–∞—Ç–æ—Ä–∏: Add, Mul, ..."

#: src/SUMMARY.md:153
msgid "Closures: Fn, FnMut, FnOnce"
msgstr "–ó–∞–º–∏–∫–∞–Ω–Ω—è: Fn, FnMut, FnOnce"

#: src/SUMMARY.md:155 src/exercises/day-3/simple-gui.md:1
#: src/exercises/day-3/solutions-morning.md:3
msgid "A Simple GUI Library"
msgstr "–ü—Ä–æ—Å—Ç–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"

#: src/SUMMARY.md:156 src/exercises/day-3/solutions-morning.md:175
msgid "Points and Polygons"
msgstr "–¢–æ—á–∫–∏ —ñ –±–∞–≥–∞—Ç–æ–∫—É—Ç–Ω–∏–∫–∏"

#: src/SUMMARY.md:158
msgid "Day 3: Afternoon"
msgstr "–î–µ–Ω—å 3: –ü–æ–ª—É–¥–µ–Ω—å"

#: src/SUMMARY.md:160 src/error-handling.md:1
msgid "Error Handling"
msgstr "–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"

#: src/SUMMARY.md:161 src/error-handling/panics.md:1
msgid "Panics"
msgstr "–ü–∞–Ω—ñ–∫–∏"

#: src/SUMMARY.md:162
msgid "Catching Stack Unwinding"
msgstr "–ü–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–Ω—è —Ä–æ–∑–º–æ—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–µ–∫–∞"

#: src/SUMMARY.md:163
msgid "Structured Error Handling"
msgstr "–°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"

#: src/SUMMARY.md:164
msgid "Propagating Errors with ?"
msgstr "–†–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ?"

#: src/SUMMARY.md:165 src/error-handling/converting-error-types.md:1
#: src/error-handling/converting-error-types-example.md:1
msgid "Converting Error Types"
msgstr "–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫"

#: src/SUMMARY.md:167 src/error-handling/deriving-error-enums.md:1
msgid "Deriving Error Enums"
msgstr "–ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—á–∏—Å–ª—é–≤–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫"

#: src/SUMMARY.md:168 src/error-handling/dynamic-errors.md:1
msgid "Dynamic Error Types"
msgstr "–î–∏–Ω–∞–º—ñ—á–Ω—ñ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫"

#: src/SUMMARY.md:169 src/error-handling/error-contexts.md:1
msgid "Adding Context to Errors"
msgstr "–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–æ –ø–æ–º–∏–ª–æ–∫"

#: src/SUMMARY.md:170 src/testing.md:1
msgid "Testing"
msgstr "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è"

#: src/SUMMARY.md:171 src/testing/unit-tests.md:1
msgid "Unit Tests"
msgstr "–ú–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏"

#: src/SUMMARY.md:172 src/testing/test-modules.md:1
msgid "Test Modules"
msgstr "–¢–µ—Å—Ç–æ–≤—ñ –º–æ–¥—É–ª—ñ"

#: src/SUMMARY.md:173 src/testing/doc-tests.md:1
msgid "Documentation Tests"
msgstr "–¢–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó"

#: src/SUMMARY.md:174 src/testing/integration-tests.md:1
msgid "Integration Tests"
msgstr "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏"

#: src/SUMMARY.md:175 src/bare-metal/useful-crates.md:1
msgid "Useful crates"
msgstr "–ö–æ—Ä–∏—Å–Ω—ñ –∫—Ä–µ–π—Ç–∏"

#: src/SUMMARY.md:176 src/unsafe.md:1
msgid "Unsafe Rust"
msgstr "–ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π Rust"

#: src/SUMMARY.md:177 src/unsafe/raw-pointers.md:1
msgid "Dereferencing Raw Pointers"
msgstr "–†–æ–∑—ñ–º–µ–Ω—É–≤–∞–Ω–Ω—è \"—Å–∏—Ä–∏—Ö\" –≤–∫–∞–∑—ñ–≤–Ω–∏–∫—ñ–≤"

#: src/SUMMARY.md:178 src/unsafe/mutable-static-variables.md:1
msgid "Mutable Static Variables"
msgstr "–ù–µ—Å—Ç–∞–ª—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ"

#: src/SUMMARY.md:179 src/unsafe/unions.md:1
msgid "Unions"
msgstr "–û–±'—î–¥–Ω–∞–Ω–Ω—è"

#: src/SUMMARY.md:180 src/unsafe/calling-unsafe-functions.md:1
msgid "Calling Unsafe Functions"
msgstr "–í–∏–∫–ª–∏–∫ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"

#: src/SUMMARY.md:181 src/unsafe/writing-unsafe-functions.md:1
msgid "Writing Unsafe Functions"
msgstr "–ù–∞–ø–∏—Å–∞–Ω–Ω—è –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"

#: src/SUMMARY.md:182
msgid "Extern Functions"
msgstr "–ó–æ–≤–Ω—ñ—à–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó"

#: src/SUMMARY.md:183 src/unsafe/unsafe-traits.md:1
msgid "Implementing Unsafe Traits"
msgstr "–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Ç—Ä–µ–π—Ç—ñ–≤"

#: src/SUMMARY.md:185 src/exercises/day-3/safe-ffi-wrapper.md:1
#: src/exercises/day-3/solutions-afternoon.md:3
msgid "Safe FFI Wrapper"
msgstr "–ë–µ–∑–ø–µ—á–Ω–∞ –æ–±–≥–æ—Ä—Ç–∫–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó (FFI)"

#: src/SUMMARY.md:188 src/SUMMARY.md:258 src/bare-metal/android.md:1
msgid "Android"
msgstr "Android"

#: src/SUMMARY.md:193 src/android/setup.md:1
msgid "Setup"
msgstr "–£—Å—Ç–∞–Ω–æ–≤–∫–∞"

#: src/SUMMARY.md:194 src/android/build-rules.md:1
msgid "Build Rules"
msgstr "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–±—É–¥–æ–≤–∏"

#: src/SUMMARY.md:195
msgid "Binary"
msgstr "–ë—ñ–Ω–∞—Ä–Ω–∏–π"

#: src/SUMMARY.md:196
msgid "Library"
msgstr "–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞"

#: src/SUMMARY.md:197 src/android/aidl.md:1
msgid "AIDL"
msgstr "AIDL"

#: src/SUMMARY.md:198
msgid "Interface"
msgstr "–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å"

#: src/SUMMARY.md:199
msgid "Implementation"
msgstr "–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è"

#: src/SUMMARY.md:200
msgid "Server"
msgstr "–°–µ—Ä–≤–µ—Ä"

#: src/SUMMARY.md:201 src/android/aidl/deploy.md:1
msgid "Deploy"
msgstr "–†–æ–∑–≥–æ—Ä—Ç–∫–∞"

#: src/SUMMARY.md:202
msgid "Client"
msgstr "–ö–ª—ñ–µ–Ω—Ç"

#: src/SUMMARY.md:203 src/android/aidl/changing.md:1
msgid "Changing API"
msgstr "–ó–º—ñ–Ω–∞ API"

#: src/SUMMARY.md:204 src/SUMMARY.md:248 src/android/logging.md:1
#: src/bare-metal/aps/logging.md:1
msgid "Logging"
msgstr "–ñ—É—Ä–Ω–∞–ª—é–≤–∞–Ω–Ω—è"

#: src/SUMMARY.md:205 src/android/interoperability.md:1
msgid "Interoperability"
msgstr "–í–∑–∞—î–º–æ–¥—ñ—è"

#: src/SUMMARY.md:206
msgid "With C"
msgstr "–ó –°"

#: src/SUMMARY.md:207
msgid "Calling C with Bindgen"
msgstr "–í–∏–∫–ª–∏–∫ –° –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Bindgen"

#: src/SUMMARY.md:208
msgid "Calling Rust from C"
msgstr "–í–∏–∫–ª–∏–∫ Rust –∑ C"

#: src/SUMMARY.md:209 src/android/interoperability/cpp.md:1
msgid "With C++"
msgstr "–ó –°++"

#: src/SUMMARY.md:210
msgid "With Java"
msgstr "–ó Java"

#: src/SUMMARY.md:214
msgid "Bare Metal: Morning"
msgstr "–ó–∞–ª—ñ–∑–æ: –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:219
msgid "no_std"
msgstr "no_std"

#: src/SUMMARY.md:220
msgid "A Minimal Example"
msgstr "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥"

#: src/SUMMARY.md:221
msgid "alloc"
msgstr "–≤–∏–¥—ñ–ª–µ–Ω–Ω—è"

#: src/SUMMARY.md:222 src/bare-metal/microcontrollers.md:1
msgid "Microcontrollers"
msgstr "–ú—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏"

#: src/SUMMARY.md:223 src/bare-metal/microcontrollers/mmio.md:1
msgid "Raw MMIO"
msgstr "–°–∏—Ä–∏–π –≤–≤—ñ–¥ –≤–∏–≤—ñ–¥ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ—ó –ø–∞–º'—è—Ç—ñ"

#: src/SUMMARY.md:224
msgid "PACs"
msgstr "–ö—Ä–µ–π—Ç–∏ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–µ—Ä–∏—Ñ–µ—Ä—ñ–π–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ (PACs)"

#: src/SUMMARY.md:225
msgid "HAL Crates"
msgstr "–ö—Ä–µ–π—Ç–∏ –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—ó –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (HAL)"

#: src/SUMMARY.md:226
msgid "Board Support Crates"
msgstr "–ö—Ä–µ–π—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–ª–∞—Ç"

#: src/SUMMARY.md:227
msgid "The Type State Pattern"
msgstr "–®–∞–±–ª–æ–Ω —Å—Ç–∞–Ω—É —Ç–∏–ø—É"

#: src/SUMMARY.md:228
msgid "embedded-hal"
msgstr "embedded-hal"

#: src/SUMMARY.md:229
msgid "probe-rs, cargo-embed"
msgstr "probe-rs, cargo-embed"

#: src/SUMMARY.md:230 src/bare-metal/microcontrollers/debugging.md:1
msgid "Debugging"
msgstr "–í—ñ–¥–ª–∞–¥–∫–∞"

#: src/SUMMARY.md:231 src/SUMMARY.md:251
msgid "Other Projects"
msgstr "–Ü–Ω—à—ñ –ø—Ä–æ—î–∫—Ç–∏"

#: src/SUMMARY.md:233 src/exercises/bare-metal/compass.md:1
#: src/exercises/bare-metal/solutions-morning.md:3
msgid "Compass"
msgstr "–ö–æ–º–ø–∞—Å"

#: src/SUMMARY.md:235
msgid "Bare Metal: Afternoon"
msgstr "–ó–∞–ª—ñ–∑–æ: –ü–æ–ª—É–¥–µ–Ω—å"

#: src/SUMMARY.md:237
msgid "Application Processors"
msgstr "–ü—Ä–∏–∫–ª–∞–¥–Ω—ñ –ø—Ä–æ—Ü–µ—Å–æ—Ä–∏"

#: src/SUMMARY.md:238 src/bare-metal/aps/entry-point.md:1
msgid "Getting Ready to Rust"
msgstr "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ Rust"

#: src/SUMMARY.md:239
msgid "Inline Assembly"
msgstr "–í–±—É–¥–æ–≤–∞–Ω–∞ –∑–±—ñ—Ä–∫–∞"

#: src/SUMMARY.md:240
msgid "MMIO"
msgstr "–í–≤—ñ–¥ –≤–∏–≤—ñ–¥ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ—ó –ø–∞–º'—è—Ç—ñ"

#: src/SUMMARY.md:241
msgid "Let's Write a UART Driver"
msgstr "–î–∞–≤–∞–π—Ç–µ –Ω–∞–ø–∏—à–µ–º–æ –¥—Ä–∞–π–≤–µ—Ä UART"

#: src/SUMMARY.md:242
msgid "More Traits"
msgstr "–ë—ñ–ª—å—à–µ —Ç—Ä–µ–π—Ç—ñ–≤"

#: src/SUMMARY.md:243
msgid "A Better UART Driver"
msgstr "–ö—Ä–∞—â–∏–π –¥—Ä–∞–π–≤–µ—Ä UART"

#: src/SUMMARY.md:244 src/bare-metal/aps/better-uart/bitflags.md:1
msgid "Bitflags"
msgstr "–ë—ñ—Ç–æ–≤—ñ –ø—Ä–∞–ø–æ—Ä—Ü—ñ (–∫—Ä–µ–π—Ç bitflags)"

#: src/SUMMARY.md:245
msgid "Multiple Registers"
msgstr "–†–µ–≥—ñ—Å—Ç—Ä–∏"

#: src/SUMMARY.md:246 src/bare-metal/aps/better-uart/driver.md:1
msgid "Driver"
msgstr "–î—Ä–∞–π–≤–µ—Ä"

#: src/SUMMARY.md:247 src/SUMMARY.md:249
msgid "Using It"
msgstr "–ô–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"

#: src/SUMMARY.md:250 src/bare-metal/aps/exceptions.md:1
msgid "Exceptions"
msgstr "–í–∏–π–Ω—è—Ç–∫–∏"

#: src/SUMMARY.md:252
msgid "Useful Crates"
msgstr "–ö–æ—Ä–∏—Å–Ω—ñ –∫—Ä–µ–π—Ç–∏"

#: src/SUMMARY.md:253
msgid "zerocopy"
msgstr "–Ω—É–ª—å–æ–≤–∞ –∫–æ–ø—ñ—è"

#: src/SUMMARY.md:254
msgid "aarch64-paging"
msgstr "aarch64-paging"

#: src/SUMMARY.md:255
msgid "buddy_system_allocator"
msgstr "buddy_system_allocator"

#: src/SUMMARY.md:256
msgid "tinyvec"
msgstr "tinyvec"

#: src/SUMMARY.md:257
msgid "spin"
msgstr "spin"

#: src/SUMMARY.md:259 src/bare-metal/android/vmbase.md:1
msgid "vmbase"
msgstr "vmbase"

#: src/SUMMARY.md:261
msgid "RTC Driver"
msgstr "–î—Ä–∞–π–≤–µ—Ä –≥–æ–¥–∏–Ω–Ω–∏–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É"

#: src/SUMMARY.md:264
msgid "Concurrency: Morning"
msgstr "–ü–∞—Ä–∞–ª–µ–ª—ñ–∑–º: –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:269 src/concurrency/threads.md:1
msgid "Threads"
msgstr "–ü–æ—Ç–æ–∫–∏"

#: src/SUMMARY.md:270 src/concurrency/scoped-threads.md:1
msgid "Scoped Threads"
msgstr "–ü–æ—Ç–æ–∫–∏ –∑ –æ–±–ª–∞—Å—Ç—é –≤–∏–¥–∏–º–æ—Å—Ç—ñ"

#: src/SUMMARY.md:271 src/concurrency/channels.md:1
msgid "Channels"
msgstr "–ö–∞–Ω–∞–ª–∏"

#: src/SUMMARY.md:272 src/concurrency/channels/unbounded.md:1
msgid "Unbounded Channels"
msgstr "–ù–µ–∑–∞–≤'—è–∑–∞–Ω—ñ –∫–∞–Ω–∞–ª–∏"

#: src/SUMMARY.md:273 src/concurrency/channels/bounded.md:1
msgid "Bounded Channels"
msgstr "–ó–∞–≤'—è–∑–∞–Ω—ñ –∫–∞–Ω–∞–ª–∏"

#: src/SUMMARY.md:274
msgid "Send and Sync"
msgstr "Send —Ç–∞ Sync"

#: src/SUMMARY.md:274
msgid "Send"
msgstr "Send"

#: src/SUMMARY.md:274
msgid "Sync"
msgstr "Sync"

#: src/SUMMARY.md:277 src/concurrency/send-sync/examples.md:1
msgid "Examples"
msgstr "–ü—Ä–∏–∫–ª–∞–¥–∏"

#: src/SUMMARY.md:278 src/concurrency/shared_state.md:1
msgid "Shared State"
msgstr "–°–ø—ñ–ª—å–Ω–∏–π —Å—Ç–∞–Ω"

#: src/SUMMARY.md:279
msgid "Arc"
msgstr "Arc"

#: src/SUMMARY.md:280
msgid "Mutex"
msgstr "Mutex"

#: src/SUMMARY.md:283 src/SUMMARY.md:304
#: src/exercises/concurrency/dining-philosophers.md:1
#: src/exercises/concurrency/solutions-morning.md:3
msgid "Dining Philosophers"
msgstr "–û–±—ñ–¥–Ω—ñ —Ñ—ñ–ª–æ—Å–æ—Ñ–∏"

#: src/SUMMARY.md:284 src/exercises/concurrency/link-checker.md:1
msgid "Multi-threaded Link Checker"
msgstr "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å"

#: src/SUMMARY.md:286
msgid "Concurrency: Afternoon"
msgstr "–ü–∞—Ä–∞–ª–µ–ª—å–Ω—ñ—Å—Ç—å: –ø—ñ—Å–ª—è –æ–±—ñ–¥—É"

#: src/SUMMARY.md:288
msgid "Async Basics"
msgstr "–û—Å–Ω–æ–≤–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"

#: src/SUMMARY.md:289
msgid "async/await"
msgstr "async/await"

#: src/SUMMARY.md:290 src/async/futures.md:1
msgid "Futures"
msgstr "Futures"

#: src/SUMMARY.md:291 src/async/runtimes.md:1
msgid "Runtimes"
msgstr "–°–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"

#: src/SUMMARY.md:292 src/async/runtimes/tokio.md:1
msgid "Tokio"
msgstr "–¢–æ–∫—ñ–æ"

#: src/SUMMARY.md:293 src/exercises/concurrency/link-checker.md:126
#: src/async/tasks.md:1 src/exercises/concurrency/chat-app.md:143
msgid "Tasks"
msgstr "–ó–∞–≤–¥–∞–Ω–Ω—è"

#: src/SUMMARY.md:294 src/async/channels.md:1
msgid "Async Channels"
msgstr "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –∫–∞–Ω–∞–ª–∏"

#: src/SUMMARY.md:296 src/async/control-flow/join.md:1
msgid "Join"
msgstr "Join"

#: src/SUMMARY.md:297 src/async/control-flow/select.md:1
msgid "Select"
msgstr "Select"

#: src/SUMMARY.md:298
msgid "Pitfalls"
msgstr "–ü—ñ–¥–≤–æ–¥–Ω—ñ –∫–∞–º–µ–Ω—ñ"

#: src/SUMMARY.md:299
msgid "Blocking the Executor"
msgstr "–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –í–∏–∫–æ–Ω–∞–≤—Ü—è"

#: src/SUMMARY.md:300 src/async/pitfalls/pin.md:1
msgid "Pin"
msgstr "Pin"

#: src/SUMMARY.md:301 src/async/pitfalls/async-traits.md:1
msgid "Async Traits"
msgstr "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ Traits"

#: src/SUMMARY.md:302 src/async/pitfalls/cancellation.md:1
msgid "Cancellation"
msgstr "–ê–Ω—É–ª—é–≤–∞–Ω–Ω—è"

#: src/SUMMARY.md:305 src/exercises/concurrency/chat-app.md:1
#: src/exercises/concurrency/solutions-afternoon.md:119
msgid "Broadcast Chat Application"
msgstr "–ü—Ä–æ–≥—Ä–∞–º–∞ —à–∏—Ä–æ–∫–æ–º–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É"

#: src/SUMMARY.md:308
msgid "Final Words"
msgstr "–ó–∞–∫–ª—é—á–Ω—ñ —Å–ª–æ–≤–∞"

#: src/SUMMARY.md:312 src/thanks.md:1
msgid "Thanks!"
msgstr "–î—è–∫—É—é!"

#: src/SUMMARY.md:313
msgid "Other Resources"
msgstr "–Ü–Ω—à—ñ —Ä–µ—Å—É—Ä—Å–∏"

#: src/SUMMARY.md:314 src/credits.md:1
msgid "Credits"
msgstr "–ö—Ä–µ–¥–∏—Ç–∏"

#: src/SUMMARY.md:317 src/exercises/solutions.md:1
msgid "Solutions"
msgstr "–†—ñ—à–µ–Ω–Ω—è"

#: src/SUMMARY.md:322
msgid "Day 1 Morning"
msgstr "–î–µ–Ω—å 1 –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:323
msgid "Day 1 Afternoon"
msgstr "–î–µ–Ω—å 1 –ü—ñ—Å–ª—è –æ–±—ñ–¥—É"

#: src/SUMMARY.md:324
msgid "Day 2 Morning"
msgstr "–î–µ–Ω—å 2 –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:325
msgid "Day 2 Afternoon"
msgstr "–î–µ–Ω—å 2 –ü—ñ—Å–ª—è –æ–±—ñ–¥—É"

#: src/SUMMARY.md:326
msgid "Day 3 Morning"
msgstr "–î–µ–Ω—å 3 –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:327
msgid "Day 3 Afternoon"
msgstr "–î–µ–Ω—å 3 –ü—ñ—Å–ª—è –æ–±—ñ–¥—É"

#: src/SUMMARY.md:328
msgid "Bare Metal Rust Morning"
msgstr "Rust –Ω–∞ –≥–æ–ª–æ–º—É –∑–∞–ª—ñ–∑—ñ –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:329 src/exercises/bare-metal/solutions-afternoon.md:1
msgid "Bare Metal Rust Afternoon"
msgstr "Rust –Ω–∞ –≥–æ–ª–æ–º—É –∑–∞–ª—ñ–∑—ñ –ü—ñ—Å–ª—è –æ–±—ñ–¥—É"

#: src/SUMMARY.md:330
msgid "Concurrency Morning"
msgstr "–û–¥–Ω–æ—á–∞—Å–Ω–∏–π –†–∞–Ω–æ–∫"

#: src/SUMMARY.md:331
msgid "Concurrency Afternoon"
msgstr "–û–¥–Ω–æ—á–∞—Å–Ω–∏–π –æ–±—ñ–¥"

#: src/index.md:3
msgid ""
"[![Build workflow](https://img.shields.io/github/actions/workflow/status/"
"google/comprehensive-rust/build.yml?style=flat-square)](https://github.com/"
"google/comprehensive-rust/actions/workflows/build.yml?query=branch%3Amain) [!"
"[GitHub contributors](https://img.shields.io/github/contributors/google/"
"comprehensive-rust?style=flat-square)](https://github.com/google/"
"comprehensive-rust/graphs/contributors) [![GitHub stars](https://img.shields."
"io/github/stars/google/comprehensive-rust?style=flat-square)](https://github."
"com/google/comprehensive-rust/stargazers)"
msgstr ""
"[![–†–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è](https://img.shields.io/github/actions/workflow/"
"status/google/comprehensive-rust/build.yml?style=flat-square)](https://"
"github.com /google/comprehensive-rust/actions/workflows/build.yml?"
"query=branch%3Amain) [![–£—á–∞—Å–Ω–∏–∫–∏ GitHub](https://img.shields.io/github/"
"contributors/google/comprehensive-rust?style=flat-square)](https://github."
"com/google/comprehensive-rust/graphs/contributors) [![–∑—ñ—Ä–∫–∏ GitHub](https://"
"img.shields.io/github/stars/google/comprehensive-rust?style=flat-square)]"
"(https://github.com/google/comprehensive-rust/stargazers)"

#: src/index.md:7
msgid ""
"This is a free Rust course developed by the Android team at Google. The "
"course covers the full spectrum of Rust, from basic syntax to advanced "
"topics like generics and error handling."
msgstr ""
"–¶–µ —Ç—Ä—å–æ—Ö–¥–µ–Ω–Ω–∏–π –∫—É—Ä—Å –ø–æ –º–æ–≤—ñ Rust, —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ—é Android. –ö—É—Ä—Å –æ—Ö–æ–ø–ª—é—î "
"–≤–µ—Å—å —Å–ø–µ–∫—Ç—Ä Rust, –≤—ñ–¥ –±–∞–∑–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –¥–æ —Å–∫–ª–∞–¥–Ω–∏—Ö —Ç–µ–º, —Ç–∞–∫–∏—Ö —è–∫ "
"—É–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è (generics) –∏ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫. –û—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –∫—É—Ä—Å—É —Ç–µ–∂ –æ—Ö–æ–ø–ª—é—î "
"–æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –ø—ñ–¥ Android."

#: src/index.md:11
msgid ""
"The latest version of the course can be found at <https://google.github.io/"
"comprehensive-rust/>. If you are reading somewhere else, please check there "
"for updates."
msgstr ""
"–û—Å—Ç–∞–Ω–Ω—é –≤–µ—Ä—Å—ñ—é –∫—É—Ä—Å—É –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –∑–∞ –∞–¥—Ä–µ—Å–æ—é <https://google.github.io/"
"comprehensive-rust/>. –Ø–∫—â–æ –≤–∏ —á–∏—Ç–∞—î—Ç–µ –¥–µ—Å—å –≤ —ñ–Ω—à–æ–º—É –º—ñ—Å—Ü—ñ, –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ —Ç–∞–º "
"–Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è."

#: src/index.md:15
msgid ""
"The goal of the course is to teach you Rust. We assume you don't know "
"anything about Rust and hope to:"
msgstr ""
"–¶—ñ–ª—å –∫—É—Ä—Å—É --- –Ω–∞–≤—á–∏—Ç–∏ –≤–∞—Å –º–æ–≤—ñ Rust. –ú–∏ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –≤–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞—î—Ç–µ "
"–ø—Ä–æ Rust –∏ —Å–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—è:"

#: src/index.md:18
msgid "Give you a comprehensive understanding of the Rust syntax and language."
msgstr "–î–∞—Ç–∏ –ø–æ–≤–Ω–µ —É—è–≤–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ç–∞ —Å–µ–º–∞–Ω—Ç–∏–∫—É Rust."

#: src/index.md:19
msgid "Enable you to modify existing programs and write new programs in Rust."
msgstr "–ù–∞–≤—á–∏—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º —Ç–∞ –ø–∏—Å–∞—Ç–∏ –Ω–æ–≤—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –Ω–∞ Rust."

#: src/index.md:20
msgid "Show you common Rust idioms."
msgstr "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω—ñ —ñ–¥—ñ–æ–º–∏ –º–æ–≤–∏ Rust."

#: src/index.md:22
msgid "We call the first three course days Rust Fundamentals."
msgstr "–ü–µ—Ä—à—ñ —Ç—Ä–∏ –¥–Ω—ñ –∫—É—Ä—Å—É –º–∏ –Ω–∞–∑–∏–≤–∞—î–º–æ Rust Fundamentals."

#: src/index.md:24
msgid ""
"Building on this, you're invited to dive into one or more specialized topics:"
msgstr ""
"–ü–µ—Ä—à—ñ —Ç—Ä–∏ –¥–Ω—ñ –ø–æ–∑–Ω–∞–π–æ–º–ª—è—Ç—å –≤–∞—Å —ñ–∑ –æ—Å–Ω–æ–≤–∞–º–∏ Rust. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–∞–º  "
"–ø—Ä–æ–ø–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≥–ª–∏–±–∏—Ç–∏—Å—è –≤ –æ–¥–Ω—É –∞–±–æ –∫—ñ–ª—å–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ç–µ–º:"

#: src/index.md:26
msgid ""
"[Android](android.md): a half-day course on using Rust for Android platform "
"development (AOSP). This includes interoperability with C, C++, and Java."
msgstr ""
"[Android](android.md): —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω—É –¥–Ω—è –∫—É—Ä—Å –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Rust "
"–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ Android (AOSP). –°—é–¥–∏ –≤—Ö–æ–¥–∏—Ç—å –≤–∑–∞—î–º–æ–¥—ñ—è –∑ C, C++ —Ç–∞ "
"Java."

#: src/index.md:28
msgid ""
"[Bare-metal](bare-metal.md): a whole-day class on using Rust for bare-metal "
"(embedded) development. Both microcontrollers and application processors are "
"covered."
msgstr ""
"[–ì–æ–ª–µ –∑–∞–ª—ñ–∑–æ](bare-metal.md): –æ–¥–Ω–æ–¥–µ–Ω–Ω–µ –∑–∞–Ω—è—Ç—Ç—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Rust –¥–ª—è "
"–Ω–∏–∑—å–∫–æ—Ä—ñ–≤–Ω–µ–≤–æ—ó (embedded) —Ä–æ–∑—Ä–æ–±–∫–∏, —â–æ –æ—Ö–æ–ø–ª—é—î —è–∫ –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏, —Ç–∞–∫ —ñ "
"–∑–≤–∏—á–∞–π–Ω—ñ –ø—Ä–æ—Ü–µ—Å–æ—Ä–∏."

#: src/index.md:31
msgid ""
"[Concurrency](concurrency.md): a whole-day class on concurrency in Rust. We "
"cover both classical concurrency (preemptively scheduling using threads and "
"mutexes) and async/await concurrency (cooperative multitasking using "
"futures)."
msgstr ""
"[Concurrency](concurrency.md): –ø–æ–≤–Ω–∏–π –¥–µ–Ω—å –∑–∞–Ω—è—Ç—å –∑ –≤–∏–≤—á–µ–Ω–Ω—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ "
"—É Rust. –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —è–∫ –∫–ª–∞—Å–∏—á–Ω—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å (–≤–∏—Ç—ñ—Å–Ω—é—é—á–∏ "
"–±–∞–≥–∞—Ç–æ–∑–∞–¥–∞—á–Ω—ñ—Å—Ç—å –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø–æ—Ç–æ–∫—ñ–≤ —ñ –º'—é—Ç–µ–∫—Å—ñ–≤), —Ç–∞–∫ —ñ async/await "
"–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å (–∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞ –±–∞–≥–∞—Ç–æ–∑–∞–¥–∞—á–Ω—ñ—Å—Ç—å –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º futures)."

#: src/index.md:37
msgid "Non-Goals"
msgstr "–ó–∞ —Ä–∞–º–∫–∞–º–∏ –∫—É—Ä—Å—É"

#: src/index.md:39
msgid ""
"Rust is a large language and we won't be able to cover all of it in a few "
"days. Some non-goals of this course are:"
msgstr ""
"Rust --- —Ü–µ –æ–±'—î–º–Ω–∞ –º–æ–≤–∞, —ñ –º–∏ –Ω–µ –∑–º–æ–∂–µ–º–æ –æ—Ö–æ–ø–∏—Ç–∏ —ó—ó –∑–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤. –¢–µ–º–∏, "
"—â–æ –≤–∏—Ö–æ–¥—è—Ç—å –∑–∞ –º–µ–∂—ñ –∫—É—Ä—Å—É:"

#: src/index.md:42
msgid ""
"Learning how to develop macros: please see [Chapter 19.5 in the Rust Book]"
"(https://doc.rust-lang.org/book/ch19-06-macros.html) and [Rust by Example]"
"(https://doc.rust-lang.org/rust-by-example/macros.html) instead."
msgstr ""
"–ù–∞–ø–∏—Å–∞–Ω–Ω—è –º–∞–∫—Ä–æ—Å—ñ–≤, –¥–∏–≤. [–†–æ–∑–¥—ñ–ª 19.5 —É The Rust Book](https://doc.rust-lang."
"org/book/ch19-06-macros.html) –∏ [Rust by Example](https://doc.rust-lang.org/"
"rust-by-example/macros.html)."

#: src/index.md:46
msgid "Assumptions"
msgstr "–ü—Ä–∏–ø—É—â–µ–Ω–Ω—è"

#: src/index.md:48
msgid ""
"The course assumes that you already know how to program. Rust is a "
"statically-typed language and we will sometimes make comparisons with C and "
"C++ to better explain or contrast the Rust approach."
msgstr ""
"–ü–µ—Ä–µ–¥–±–∞—á–∞—î—Ç—å—Å—è, —â–æ –≤–∏ –≤–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞—Ç–∏. Rust --- —Ü–µ —Å—Ç–∞—Ç–∏—á–Ω–æ "
"—Ç–∏–ø—ñ–∑–æ–≤–∞–Ω–∞ –º–æ–≤–∞, —ñ —ñ–Ω–æ–¥—ñ –º–∏ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏–º–µ–º–æ —ñ –∑—ñ—Å—Ç–∞–≤–ª—è—Ç–∏–º–µ–º–æ —ó—ó –∑ C —ñ C++, "
"—â–æ–± –∫—Ä–∞—â–µ –ø–æ—è—Å–Ω–∏—Ç–∏ —á–∏ –ø—ñ–¥–∫—Ä–µ—Å–ª–∏—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—é —É –ø—ñ–¥—Ö–æ–¥–∞—Ö –¥–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∫–æ–¥—É –Ω–∞ "
"Rust."

#: src/index.md:52
msgid ""
"If you know how to program in a dynamically-typed language such as Python or "
"JavaScript, then you will be able to follow along just fine too."
msgstr ""
"–Ø–∫—â–æ –≤–∏ –∑–Ω–∞—î—Ç–µ, —è–∫ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞—Ç–∏ –º–æ–≤–æ—é –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–æ—é —Ç–∏–ø—ñ–∑–∞—Ü—ñ—î—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "
"Python –∞–±–æ JavaScript, –≤–∏ –∑–º–æ–∂–µ—Ç–µ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ü–µ–π –∫—É—Ä—Å."

#: src/index.md:57
msgid ""
"This is an example of a _speaker note_. We will use these to add additional "
"information to the slides. This could be key points which the instructor "
"should cover as well as answers to typical questions which come up in class."
msgstr ""
"–¶–µ –ø—Ä–∏–∫–ª–∞–¥ _–Ω–æ—Ç–∞—Ç–æ–∫ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞_. –ú–∏ –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ó—Ö –¥–ª—è "
"–¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–æ —Å–ª–∞–π–¥—ñ–≤. –¶–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏, "
"—è–∫—ñ –≤–∏–∫–ª–∞–¥–∞—á –ø–æ–≤–∏–Ω–µ–Ω –≤–∏—Å–≤—ñ—Ç–ª–∏—Ç–∏, –∞ —Ç–∞–∫–æ–∂ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ç–∏–ø–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ "
"–≤–∏–Ω–∏–∫–∞—é—Ç—å –ø—ñ–¥ —á–∞—Å –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∫—É—Ä—Å—É."

#: src/running-the-course.md:3 src/running-the-course/course-structure.md:3
msgid "This page is for the course instructor."
msgstr "–¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞ –∫—É—Ä—Å—É."

#: src/running-the-course.md:5
msgid ""
"Here is a bit of background information about how we've been running the "
"course internally at Google."
msgstr ""
"–û—Å—å –∫–æ—Ä–æ—Ç–∫–∞ –¥–æ–≤—ñ–¥–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–µ, —è–∫ –º–∏ –ø—Ä–æ–≤–æ–¥–∏–ª–∏ –∫—É—Ä—Å –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ "
"Google."

#: src/running-the-course.md:8
msgid ""
"We typically run classes from 10:00 am to 4:00 pm, with a 1 hour lunch break "
"in the middle. This leaves 2.5 hours for the morning class and 2.5 hours for "
"the afternoon class. Note that this is just a recommendation: you can also "
"spend 3 hour on the morning session to give people more time for exercises. "
"The downside of longer session is that people can become very tired after 6 "
"full hours of class in the afternoon."
msgstr ""
"–ó–∞–∑–≤–∏—á–∞–π –º–∏ –ø—Ä–æ–≤–æ–¥–∏–º–æ –∑–∞–Ω—è—Ç—Ç—è –∑ 10:00 –¥–æ 16:00, –∑ 1-–≥–æ–¥–∏–Ω–Ω–æ—é –ø–µ—Ä–µ—Ä–≤–æ—é –Ω–∞ "
"–æ–±—ñ–¥ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ. –¶–µ –∑–∞–ª–∏—à–∞—î 2,5 –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ä–∞–Ω–∫–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è —Ç–∞ 2,5 –≥–æ–¥–∏–Ω–∏ "
"–¥–ª—è –ø—ñ—Å–ª—è–æ–±—ñ–¥–Ω—å–æ–≥–æ. –ó–∞—É–≤–∞–∂—Ç–µ, —â–æ —Ü–µ –ª–∏—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –≤–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ "
"–ø—Ä–∏–¥—ñ–ª–∏—Ç–∏ 3 –≥–æ–¥–∏–Ω–∏ —Ä–∞–Ω–∫–æ–≤–æ–º—É –∑–∞–Ω—è—Ç—Ç—é, —â–æ–± –¥–∞—Ç–∏ –ª—é–¥—è–º –±—ñ–ª—å—à–µ —á–∞—Å—É –¥–ª—è –≤–ø—Ä–∞–≤. "
"–ù–µ–¥–æ–ª—ñ–∫–æ–º –¥–æ–≤—à–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è —î —Ç–µ, —â–æ –ª—é–¥–∏ –º–æ–∂—É—Ç—å –¥—É–∂–µ –≤—Ç–æ–º–∏—Ç–∏—Å—è –ø—ñ—Å–ª—è 6 –ø–æ–≤–Ω–∏—Ö "
"–≥–æ–¥–∏–Ω –∑–∞–Ω—è—Ç—å —É –¥—Ä—É–≥—ñ–π –ø–æ–ª–æ–≤–∏–Ω—ñ –¥–Ω—è."

#: src/running-the-course.md:16
msgid "Before you run the course, you will want to:"
msgstr "–ü–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è–º –∫—É—Ä—Å—É –±–∞–∂–∞–Ω–æ:"

#: src/running-the-course.md:18
msgid ""
"Make yourself familiar with the course material. We've included speaker "
"notes to help highlight the key points (please help us by contributing more "
"speaker notes!). When presenting, you should make sure to open the speaker "
"notes in a popup (click the link with a little arrow next to \"Speaker "
"Notes\"). This way you have a clean screen to present to the class."
msgstr ""
"–û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ –∫—É—Ä—Å—É. –ú–∏ –¥–æ–¥–∞–ª–∏ –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞ –Ω–∞ –¥–µ—è–∫–∏—Ö "
"—Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö, —â–æ–± –≤–∏–¥—ñ–ª–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏ (–±—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–ø–æ–º–∞–≥–∞–π—Ç–µ –Ω–∞–º, "
"–¥–æ–¥–∞—é—á–∏ —Å–≤–æ—ó –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤!). –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–¥–∫—Ä–∏–ª–∏ –Ω–æ—Ç–∞—Ç–∫–∏ "
"–¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞ —É —Å–ø–ª–∏–≤–∞—é—á–æ–º—É –≤—ñ–∫–Ω—ñ (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –º–∞–ª–µ–Ω—å–∫–æ—é "
"—Å—Ç—Ä—ñ–ª–∫–æ—é –ø–æ—Ä—É—á –∑ ‚Äù–ù–æ—Ç–∞—Ç–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞‚Äù). –£ –≤–∞—Å –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è –æ–∫—Ä–µ–º–µ –≤—ñ–∫–Ω–æ —ñ–∑ "
"–∑–∞–º—ñ—Ç–∫–∞–º–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞, –≤ —Ç–æ–π —á–∞—Å, —è–∫ –æ—Å–Ω–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –≤–∏ –º–æ–∂–µ—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ "
"–∫–ª–∞—Å—É."

#: src/running-the-course.md:24
msgid ""
"Decide on the dates. Since the course takes at least three full days, we "
"recommend that you schedule the days over two weeks. Course participants "
"have said that they find it helpful to have a gap in the course since it "
"helps them process all the information we give them."
msgstr ""
"–í–∏–∑–Ω–∞—á–∏—Ç–∏—Å—å –∑ –¥–∞—Ç–∞–º–∏. –û—Å–∫—ñ–ª—å–∫–∏ –∫—É—Ä—Å –≤–∏–º–∞–≥–∞—î —â–æ–Ω–∞–π–º–µ–Ω—à–µ —Ç—Ä–∏ –¥–Ω—ñ, –º–∏ "
"—Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∞–º –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Ç—Ä–∏ –¥–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º –¥–≤–æ—Ö —Ç–∏–∂–Ω—ñ–≤. –ù–∞ –Ω–∞—à –¥–æ—Å–≤—ñ–¥, "
"—É—á–∞—Å–Ω–∏–∫–∏ –∫—É—Ä—Å—É –≤–≤–∞–∂–∞—é—Ç—å –∫–æ—Ä–∏—Å–Ω–æ—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ—Ä–≤, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –¥–æ–ø–æ–º–∞–≥–∞—î —ó–º "
"–∫—Ä–∞—â–µ –æ—Å–º–∏—Å–ª–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é."

#: src/running-the-course.md:29
msgid ""
"Find a room large enough for your in-person participants. We recommend a "
"class size of 15-25 people. That's small enough that people are comfortable "
"asking questions --- it's also small enough that one instructor will have "
"time to answer the questions. Make sure the room has _desks_ for yourself "
"and for the students: you will all need to be able to sit and work with your "
"laptops. In particular, you will be doing a lot of live-coding as an "
"instructor, so a lectern won't be very helpful for you."
msgstr ""
"–ó–Ω–∞–π—Ç–∏ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –¥–æ—Å–∏—Ç—å –ø—Ä–æ—Å—Ç–æ—Ä–µ –¥–ª—è –æ—á–Ω–æ—ó —É—á–∞—Å—Ç—ñ. –ú–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ, —â–æ–± —É "
"–∫–ª–∞—Å—ñ –±—É–ª–æ 15-20 —á–æ–ª–æ–≤—ñ–∫. –¶–µ –¥–æ—Å–∏—Ç—å –Ω–µ–±–∞–≥–∞—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –ª—é–¥—è–º –±—É–ª–æ "
"–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ —Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –∞ —É –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑–∞–ª–∏—à–∏–≤—Å—è —á–∞—Å –Ω–∞ —Ç–µ, —â–æ–± –Ω–∞ –Ω–∏—Ö "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏."

#: src/running-the-course.md:37
msgid ""
"On the day of your course, show up to the room a little early to set things "
"up. We recommend presenting directly using `mdbook serve` running on your "
"laptop (see the [installation instructions](https://github.com/google/"
"comprehensive-rust#building)). This ensures optimal performance with no lag "
"as you change pages. Using your laptop will also allow you to fix typos as "
"you or the course participants spot them."
msgstr ""
"–£ –¥–µ–Ω—å –∑–∞–Ω—è—Ç—Ç—è –ø—Ä–∏—Ö–æ–¥—å—Ç–µ –≤ –∫—ñ–º–Ω–∞—Ç—É —Ç—Ä–æ—Ö–∏ —Ä–∞–Ω—ñ—à–µ, —â–æ–±–∏ –≤—Å–µ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏. –ú–∏ "
"—Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `mdbook serve`, –∑–∞–ø—É—â–µ–Ω–æ–≥–æ –Ω–∞ "
"–≤–∞—à–æ–º—É –Ω–æ—É—Ç–±—É—Ü—ñ (–¥–∏–≤. [installation instructions](https://github.com/google/"
"comprehensive-rust#building)). –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î –æ–ø—Ç–∏–º–∞–ª—å–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±–µ–∑ "
"–∑–∞—Ç—Ä–∏–º–æ–∫ –ø—ñ–¥ —á–∞—Å –∑–º—ñ–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–æ—É—Ç–±—É–∫–∞ —Ç–∞–∫–æ–∂ –¥–æ–∑–≤–æ–ª–∏—Ç—å –≤–∞–º "
"–≤–∏–ø—Ä–∞–≤–ª—è—Ç–∏ –¥—Ä—É–∫–∞—Ä—Å—å–∫—ñ –ø–æ–º–∏–ª–∫–∏ –≤ –º—ñ—Ä—É —ó—Ö –≤–∏—è–≤–ª–µ–Ω–Ω—è –≤–∞–º–∏ –∞–±–æ —É—á–∞—Å–Ω–∏–∫–∞–º–∏ –∫—É—Ä—Å—É."

#: src/running-the-course.md:43
msgid ""
"Let people solve the exercises by themselves or in small groups. We "
"typically spend 30-45 minutes on exercises in the morning and in the "
"afternoon (including time to review the solutions). Make sure to ask people "
"if they're stuck or if there is anything you can help with. When you see "
"that several people have the same problem, call it out to the class and "
"offer a solution, e.g., by showing people where to find the relevant "
"information in the standard library."
msgstr ""
"–î–æ–∑–≤–æ–ª—å—Ç–µ —É—á–∞—Å–Ω–∏–∫–∞–º –≤–∏—Ä—ñ—à—É–≤–∞—Ç–∏ –≤–ø—Ä–∞–≤–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –∞–±–æ —É –Ω–µ–≤–µ–ª–∏–∫–∏—Ö –≥—Ä—É–ø–∞—Ö. "
"–ó–∞–∑–≤–∏—á–∞–π –º–∏ –ø—Ä–∏–¥—ñ–ª—è—î–º–æ –≤–ø—Ä–∞–≤–∞–º –ø–æ 30-45 —Ö–≤–∏–ª–∏–Ω –≤—Ä–∞–Ω—Ü—ñ —Ç–∞ —É –¥—Ä—É–≥—ñ–π –ø–æ–ª–æ–≤–∏–Ω—ñ "
"–¥–Ω—è (–≤–∫–ª—é—á–∞—é—á–∏ —á–∞—Å –Ω–∞ —Ä–æ–∑–±—ñ—Ä —Ä—ñ—à–µ–Ω—å). –û–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–∞–ø–∏—Ç–∞–π—Ç–µ, —á–∏ –Ω–µ –º–∞—é—Ç—å "
"–≤–æ–Ω–∏ —Ç—Ä—É–¥–Ω–æ—â—ñ–≤ —ñ —á–∏ —î —â–æ—Å—å, –∑ —á–∏–º –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏. –ö–æ–ª–∏ –≤–∏ –±–∞—á–∏—Ç–µ, —â–æ —É "
"–∫—ñ–ª—å–∫–æ—Ö –ª—é–¥–µ–π –æ–¥–Ω–∞ —ñ —Ç–∞ –∂ –ø—Ä–æ–±–ª–µ–º–∞, –ø–æ–≤—ñ–¥–æ–º—Ç–µ –ø—Ä–æ —Ü–µ–π –∫–ª–∞—Å —ñ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ "
"—Ä—ñ—à–µ–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–∫–∞–∑–∞–≤—à–∏, –¥–µ –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π "
"–±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ."

#: src/running-the-course.md:51
msgid ""
"That is all, good luck running the course! We hope it will be as much fun "
"for you as it has been for us!"
msgstr ""
"–ù–∞ —Ü—å–æ–º—É –≤—Å–µ, —É–¥–∞—á—ñ —É –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—ñ –∫—É—Ä—Å—É! –ú–∏ —Å–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—è, —â–æ –≤–∞–º –±—É–¥–µ —Ç–∞–∫ "
"—Å–∞–º–æ –≤–µ—Å–µ–ª–æ, —è–∫ —ñ –Ω–∞–º!"

#: src/running-the-course.md:54
msgid ""
"Please [provide feedback](https://github.com/google/comprehensive-rust/"
"discussions/86) afterwards so that we can keep improving the course. We "
"would love to hear what worked well for you and what can be made better. "
"Your students are also very welcome to [send us feedback](https://github.com/"
"google/comprehensive-rust/discussions/100)!"
msgstr ""
"–ë—É–¥—å –ª–∞—Å–∫–∞, [–∑–∞–ª–∏—à—ñ—Ç—å –≤—ñ–¥–≥—É–∫](https://github.com/google/comprehensive-rust/"
"discussions/86), —â–æ–± –º–∏ –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —É–¥–æ—Å–∫–æ–Ω–∞–ª—é–≤–∞—Ç–∏ –∫—É—Ä—Å. –ú–∏ —Ö–æ—Ç—ñ–ª–∏ –± "
"–ø–æ—á—É—Ç–∏, —â–æ –±—É–ª–æ –¥–æ–±—Ä–µ —ñ —â–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∫—Ä–∞—â–µ. –í–∞—à—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ —Ç–∞–∫–æ–∂ –º–æ–∂—É—Ç—å "
"[–Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó –≤—ñ–¥–≥—É–∫–∏](https://github.com/google/comprehensive-rust/"
"discussions/100)!"

#: src/running-the-course/course-structure.md:5
msgid "Rust Fundamentals"
msgstr "–û—Å–Ω–æ–≤–∏ Rust"

#: src/running-the-course/course-structure.md:7
msgid ""
"The first three days make up [Rust Fundaments](../welcome-day-1.md). The "
"days are fast paced and we cover a lot of ground:"
msgstr ""
"–ü–µ—Ä—à—ñ —Ç—Ä–∏ –¥–Ω—ñ —Å–∫–ª–∞–¥–∞—é—Ç—å [–û—Å–Ω–æ–≤–∏ Rust](../welcome-day-1.md). –î–Ω—ñ "
"—à–≤–∏–¥–∫–æ–ø–ª–∏–Ω–Ω—ñ, —ñ –º–∏ –æ—Ö–æ–ø–ª—é—î–º–æ –±–∞–≥–∞—Ç–æ –º—ñ—Å—Ü—å:"

#: src/running-the-course/course-structure.md:10
msgid "Day 1: Basic Rust, syntax, control flow, creating and consuming values."
msgstr ""
"–î–µ–Ω—å 1: –ë–∞–∑–æ–≤–∏–π Rust, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ø–æ—Ç—ñ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è "
"–∑–Ω–∞—á–µ–Ω—å."

#: src/running-the-course/course-structure.md:11
msgid ""
"Day 2: Memory management, ownership, compound data types, and the standard "
"library."
msgstr ""
"–î–µ–Ω—å 2: –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—Ç—é, –≤–æ–ª–æ–¥—ñ–Ω–Ω—è, —Å–∫–ª–∞–¥–æ–≤—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ "
"–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞."

#: src/running-the-course/course-structure.md:12
msgid "Day 3: Generics, traits, error handling, testing, and unsafe Rust."
msgstr ""
"–î–µ–Ω—å 3: –¢—Ä–µ–π—Ç–∏ —Ç–∞ —É–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è, –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π "
"Rust."

#: src/running-the-course/course-structure.md:14
msgid "Deep Dives"
msgstr "–ì–ª–∏–±–æ–∫–µ –∑–∞–Ω—É—Ä–µ–Ω–Ω—è"

#: src/running-the-course/course-structure.md:16
msgid ""
"In addition to the 3-day class on Rust Fundamentals, we cover some more "
"specialized topics:"
msgstr ""
"–ù–∞ –¥–æ–¥–∞—Ç–æ–∫ –¥–æ 3-–¥–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å—É –∑ –æ—Å–Ω–æ–≤ Rust, –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —â–µ –∫—ñ–ª—å–∫–∞ "
"—Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö —Ç–µ–º:"

#: src/running-the-course/course-structure.md:19
msgid "Rust in Android"
msgstr "Rust –≤ Android"

#: src/running-the-course/course-structure.md:21
msgid ""
"The [Rust in Android](../android.md) deep dive is a half-day course on using "
"Rust for Android platform development. This includes interoperability with "
"C, C++, and Java."
msgstr ""
"[Rust –≤ Android](../android.md) --- —Ü–µ –Ω–∞–ø—ñ–≤–¥–µ–Ω–Ω–∏–π –∫—É—Ä—Å –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Rust "
"–¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ –Ω–∞ Android –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ. –°—é–¥–∏ –≤—Ö–æ–¥–∏—Ç—å –≤–∑–∞—î–º–æ–¥—ñ—è –∑ C, C++ —Ç–∞ Java."

#: src/running-the-course/course-structure.md:25
msgid ""
"You will need an [AOSP checkout](https://source.android.com/docs/setup/"
"download/downloading). Make a checkout of the [course repository](https://"
"github.com/google/comprehensive-rust) on the same machine and move the `src/"
"android/` directory into the root of your AOSP checkout. This will ensure "
"that the Android build system sees the `Android.bp` files in `src/android/`."
msgstr ""
"–í–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è [AOSP](https://source.android.com/docs/setup/download/"
"downloading). –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ [—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –∫—É—Ä—Å—É](https://github.com/google/"
"comprehensive-rust) –Ω–∞ —Ç–æ–π –∂–µ –∫–æ–º–ø'—é—Ç–µ—Ä, —â–æ —ñ –∫—É—Ä—Å —ñ –ø–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ "
"`src/android/` –≤ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –∫–∞—Ç–∞–ª–æ–≥ –≤–∞—à–æ–≥–æ AOSP. –¶–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ —Å–∏—Å—Ç–µ–º–∞ "
"–∑–±–∏—Ä–∞–Ω–Ω—è Android –ø–æ–±–∞—á–∏—Ç—å —Ñ–∞–π–ª–∏ `Android.bp` –≤ `src/android/`."

#: src/running-the-course/course-structure.md:30
msgid ""
"Ensure that `adb sync` works with your emulator or real device and pre-build "
"all Android examples using `src/android/build_all.sh`. Read the script to "
"see the commands it runs and make sure they work when you run them by hand."
msgstr ""
"–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ `adb sync` –ø—Ä–∞—Ü—é—î –∑ –≤–∞—à–∏–º –µ–º—É–ª—è—Ç–æ—Ä–æ–º –∞–±–æ —Ä–µ–∞–ª—å–Ω–∏–º "
"–ø—Ä–∏—Å—Ç—Ä–æ—î–º, —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–±–µ—Ä—ñ—Ç—å —É—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ Android, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `src/"
"android/build_all.sh`. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ –≤—ñ–Ω "
"–∑–∞–ø—É—Å–∫–∞—î, —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–æ–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å, –∫–æ–ª–∏ –≤–∏ –∑–∞–ø—É—Å–∫–∞—î—Ç–µ —ó—Ö –≤—Ä—É—á–Ω—É."

#: src/running-the-course/course-structure.md:37
msgid "Bare-Metal Rust"
msgstr "Rust –Ω–∞ –≥–æ–ª–æ–º—É –∑–∞–ª—ñ–∑—ñ"

#: src/running-the-course/course-structure.md:39
msgid ""
"The [Bare-Metal Rust](../bare-metal.md) deep dive is a full day class on "
"using Rust for bare-metal (embedded) development. Both microcontrollers and "
"application processors are covered."
msgstr ""
"[Rust –Ω–∞ –≥–æ–ª–æ–º—É –∑–∞–ª—ñ–∑—ñ](../bare-metal.md): –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ –ø–æ–≤–Ω–∏–π –¥–µ–Ω—å –∑ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Rust –¥–ª—è –Ω–∏–∑—å–∫–æ—Ä—ñ–≤–Ω–µ–≤–æ—ó (embedded) —Ä–æ–∑—Ä–æ–±–∫–∏. –†–æ–∑–≥–ª—è–¥–∞—é—Ç—å—Å—è —è–∫ "
"–º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏, —Ç–∞–∫ —ñ –ø—Ä–∏–∫–ª–∞–¥–Ω—ñ –ø—Ä–æ—Ü–µ—Å–æ—Ä–∏."

#: src/running-the-course/course-structure.md:43
msgid ""
"For the microcontroller part, you will need to buy the [BBC micro:bit]"
"(https://microbit.org/) v2 development board ahead of time. Everybody will "
"need to install a number of packages as described on the [welcome page](../"
"bare-metal.md)."
msgstr ""
"–©–æ–¥–æ —á–∞—Å—Ç–∏–Ω–∏ –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤, —Ç–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –ø—Ä–∏–¥–±–∞—Ç–∏ "
"–ø–ª–∞—Ç—É —Ä–æ–∑—Ä–æ–±–∫–∏ [BBC micro:bit](https://microbit.org/) v2. –£—Å—ñ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ "
"–≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –ø–∞–∫–µ—Ç—ñ–≤, —è–∫ –æ–ø–∏—Å–∞–Ω–æ –Ω–∞ [—Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è](../bare-metal."
"md)."

#: src/running-the-course/course-structure.md:48
msgid "Concurrency in Rust"
msgstr "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å –≤ Rust"

#: src/running-the-course/course-structure.md:50
msgid ""
"The [Concurrency in Rust](../concurrency.md) deep dive is a full day class "
"on classical as well as `async`/`await` concurrency."
msgstr ""
"[–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å –≤ Rust](../concurrency.md) —Ü–µ —Ü—ñ–ª–∏–π –¥–µ–Ω—å –∑–∞–Ω—è—Ç—å –∑ –∫–ª–∞—Å–∏—á–Ω–æ—ó, "
"–∞ —Ç–∞–∫–æ–∂ `async`/`await` –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ."

#: src/running-the-course/course-structure.md:53
msgid ""
"You will need a fresh crate set up and the dependencies downloaded and ready "
"to go. You can then copy/paste the examples into `src/main.rs` to experiment "
"with them:"
msgstr ""
"–í–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–æ–≤–∏–π –∫—Ä–µ–π—Ç, –∞ —Ç–∞–∫–æ–∂ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ "
"–≥–æ—Ç–æ–≤—ñ –¥–æ —Ä–æ–±–æ—Ç–∏. –ü–æ—Ç—ñ–º –≤–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –≤ `src/main.rs`, —â–æ–± "
"–ø–æ–µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –∑ –Ω–∏–º–∏:"

#: src/running-the-course/course-structure.md:57
msgid ""
"```shell\n"
"cargo init concurrency\n"
"cd concurrency\n"
"cargo add tokio --features full\n"
"cargo run\n"
"```"
msgstr ""

#: src/running-the-course/course-structure.md:64
msgid "Format"
msgstr "–§–æ—Ä–º–∞—Ç"

#: src/running-the-course/course-structure.md:66
msgid ""
"The course is meant to be very interactive and we recommend letting the "
"questions drive the exploration of Rust!"
msgstr ""
"–ö—É—Ä—Å –∑–∞–¥—É–º–∞–Ω–∏–π –¥—É–∂–µ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º, —ñ –º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ, —â–æ–± –ø–∏—Ç–∞–Ω–Ω—è —Å–ø—Ä–∏—è–ª–∏ "
"–≤–∏–≤—á–µ–Ω–Ω—é Rust!"

#: src/running-the-course/keyboard-shortcuts.md:3
msgid "There are several useful keyboard shortcuts in mdBook:"
msgstr "–£ mdBook —î –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–æ—î–¥–Ω–∞–Ω—å –∫–ª–∞–≤—ñ—à:"

#: src/running-the-course/keyboard-shortcuts.md:5
msgid "Arrow-Left"
msgstr "–°—Ç—Ä—ñ–ª–∫–∞ –≤–ª—ñ–≤–æ"

#: src/running-the-course/keyboard-shortcuts.md:5
msgid ": Navigate to the previous page."
msgstr ": –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫—É."

#: src/running-the-course/keyboard-shortcuts.md:6
msgid "Arrow-Right"
msgstr "–°—Ç—Ä—ñ–ª–∫–∞ –≤–ø—Ä–∞–≤–æ"

#: src/running-the-course/keyboard-shortcuts.md:6
msgid ": Navigate to the next page."
msgstr ": –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏."

#: src/running-the-course/keyboard-shortcuts.md:7 src/cargo/code-samples.md:19
msgid "Ctrl + Enter"
msgstr "Ctrl + Enter"

#: src/running-the-course/keyboard-shortcuts.md:7
msgid ": Execute the code sample that has focus."
msgstr ": –í–∏–∫–æ–Ω–∞–π—Ç–µ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É, —è–∫–∏–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É —Ñ–æ–∫—É—Å—ñ."

#: src/running-the-course/keyboard-shortcuts.md:8
msgid "s"
msgstr "s"

#: src/running-the-course/keyboard-shortcuts.md:8
msgid ": Activate the search bar."
msgstr ": –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø–∞–Ω–µ–ª—å –ø–æ—à—É–∫—É."

#: src/running-the-course/translations.md:3
msgid ""
"The course has been translated into other languages by a set of wonderful "
"volunteers:"
msgstr "–ö—É—Ä—Å –±—É–≤ –ø–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —ñ–Ω—à–∏–º–∏ –º–æ–≤–∞–º–∏ –≥—Ä—É–ø–æ—é —á—É–¥–æ–≤–∏—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä—ñ–≤:"

#: src/running-the-course/translations.md:6
msgid ""
"[Brazilian Portuguese](https://google.github.io/comprehensive-rust/pt-BR/) "
"by [@rastringer](https://github.com/rastringer), [@hugojacob](https://github."
"com/hugojacob), [@joaovicmendes](https://github.com/joaovicmendes) and "
"[@henrif75](https://github.com/henrif75)."
msgstr ""
"[–ë—Ä–∞–∑–∏–ª—å—Å–∫–∞ –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å—å–∫–∞](https://google.github.io/comprehensive-rust/pt-"
"BR/) –≤—ñ–¥ [@rastringer](https://github.com/rastringer) —ñ [@hugojacob](https://"
"github.com/hugojacob)."

#: src/running-the-course/translations.md:7
msgid ""
"[Korean](https://google.github.io/comprehensive-rust/ko/) by [@keispace]"
"(https://github.com/keispace), [@jiyongp](https://github.com/jiyongp) and "
"[@jooyunghan](https://github.com/jooyunghan)."
msgstr ""
"[–ö–æ—Ä–µ–π—Å–∫–∞](https://google.github.io/comprehensive-rust/ko/) –≤—ñ–¥ [@keispace]"
"(https://github.com/keispace), [@jiyongp](https://github.com/jiyongp) —ñ "
"[@jooyunghan](https://github.com/jooyunghan).\\* \\[–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞\\]\\[ua\\] "
"–≤—ñ–¥ \\[@git-user-cpp\\]."

#: src/running-the-course/translations.md:9
msgid ""
"Use the language picker in the top-right corner to switch between languages."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤–∏–±–æ—Ä—É –º–æ–≤–∏ —É –≤–µ—Ä—Ö–Ω—å–æ–º—É –ø—Ä–∞–≤–æ–º—É –∫—É—Ç—ñ –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è "
"–º—ñ–∂ –º–æ–≤–∞–º–∏."

#: src/running-the-course/translations.md:11
msgid "Incomplete Translations"
msgstr "–ü–µ—Ä–µ–∫–ª–∞–¥–∏"

#: src/running-the-course/translations.md:13
msgid ""
"There is a large number of in-progress translations. We link to the most "
"recently updated translations:"
msgstr ""
"–Ü—Å–Ω—É—î –≤–µ–ª–∏–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤. –ú–∏ –ø–æ—Å–∏–ª–∞—î–º–æ—Å—è –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ "
"–æ–Ω–æ–≤–ª–µ–Ω—ñ –ø–µ—Ä–µ–∫–ª–∞–¥–∏:"

#: src/running-the-course/translations.md:16
msgid ""
"[Bengali](https://google.github.io/comprehensive-rust/bn/) by [@raselmandol]"
"(https://github.com/raselmandol)."
msgstr ""
"[–ë–µ–Ω–≥–∞–ª—å—Å—å–∫–∞](https://google.github.io/comprehensive-rust/bn) –≤—ñ–¥ "
"[@raselmandol](https://github.com/raselmandol)."

#: src/running-the-course/translations.md:17
msgid ""
"[French](https://google.github.io/comprehensive-rust/fr/) by [@KookaS]"
"(https://github.com/KookaS) and [@vcaen](https://github.com/vcaen)."
msgstr ""
"[–§—Ä–∞–Ω—Ü—É–∑—å–∫–∞](https://google.github.io/comprehensive-rust/fr/) –≤—ñ–¥ [@KookaS]"
"(https://github.com/KookaS) —ñ [@vcaen](https://github.com/vcaen)."

#: src/running-the-course/translations.md:18
msgid ""
"[German](https://google.github.io/comprehensive-rust/de/) by [@Throvn]"
"(https://github.com/Throvn) and [@ronaldfw](https://github.com/ronaldfw)."
msgstr ""
"[–ù—ñ–º–µ—Ü—å–∫–∞](https://google.github.io/comprehensive-rust/de/) –≤—ñ–¥ [@Throvn]"
"(https://github.com/Throvn) —ñ [@ronaldfw](https://github.com/ronaldfw)."

#: src/running-the-course/translations.md:19
msgid ""
"[Japanese](https://google.github.io/comprehensive-rust/ja/) by [@CoinEZ-JPN]"
"(https://github.com/CoinEZ) and [@momotaro1105](https://github.com/"
"momotaro1105)."
msgstr ""
"[–Ø–ø–æ–Ω—å—Å–∫–∞](https://google.github.io/comprehensive-rust/ja/) –≤—ñ–¥ [@CoinEZ-JPN]"
"(https://github.com/CoinEZ) —ñ [@momotaro1105](https://github.com/"
"momotaro1105)."

#: src/running-the-course/translations.md:21
msgid ""
"If you want to help with this effort, please see [our instructions](https://"
"github.com/google/comprehensive-rust/blob/main/TRANSLATIONS.md) for how to "
"get going. Translations are coordinated on the [issue tracker](https://"
"github.com/google/comprehensive-rust/issues/282)."
msgstr ""
"–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤ —Ü—å–æ–º—É, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ [our "
"instructions](https://github.com/google/comprehensive-rust/blob/main/"
"TRANSLATIONS.md) –ø—Ä–æ —Ç–µ, —è–∫ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É. –ü–µ—Ä–µ–∫–ª–∞–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω—É—é—Ç—å—Å—è –∑–∞ "
"–¥–æ–ø–æ–º–æ–≥–æ—é [issue tracker](https://github.com/google/comprehensive-rust/"
"issues/282)."

#: src/cargo.md:3
msgid ""
"When you start reading about Rust, you will soon meet [Cargo](https://doc."
"rust-lang.org/cargo/), the standard tool used in the Rust ecosystem to build "
"and run Rust applications. Here we want to give a brief overview of what "
"Cargo is and how it fits into the wider ecosystem and how it fits into this "
"training."
msgstr ""
"–ö–æ–ª–∏ –≤–∏ –ø–æ—á–Ω–µ—Ç–µ —á–∏—Ç–∞—Ç–∏ –ø—Ä–æ Rust, —Ç–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–µ—Å—è –∑ [Cargo]"
"(https://doc.rust-lang.org/cargo/), —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º, —â–æ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –µ–∫–æ—Å–∏—Å—Ç–µ–º—ñ Rust –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º. –¢—É—Ç –º–∏ "
"—Ö–æ—á–µ–º–æ –¥–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–≥–ª—è–¥ —Ç–æ–≥–æ, —â–æ —Ç–∞–∫–µ Cargo —ñ —è–∫ –≤—ñ–Ω –≤–ø–∏—Å—É—î—Ç—å—Å—è –≤ —à–∏—Ä—à—É "
"–µ–∫–æ—Å–∏—Å—Ç–µ–º—É —ñ –≤ —Ü–µ–π –∫—É—Ä—Å."

#: src/cargo.md:8
msgid "Installation"
msgstr "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è"

#: src/cargo.md:10
msgid "**Please follow the instructions on <https://rustup.rs/>.**"
msgstr "**–î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–∞ <https://rustup.rs/>.**"

#: src/cargo.md:12
msgid ""
"This will give you the Cargo build tool (`cargo`) and the Rust compiler "
"(`rustc`). You will also get `rustup`, a command line utility that you can "
"use to install/switch toolchains, setup cross compilation, etc."
msgstr ""
"–Ø–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤–∏ –æ—Ç—Ä–∏–º–∞—ç—Ç–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–±—É–¥–æ–≤–∏ Cargo (`cargo`) —Ç–∞ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä "
"Rust (`rustc`). –ü–æ—Ä—è–¥ –∑ `cargo` —Ç–∞ `rustc`, –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π `rustup` —è–∫ "
"—É—Ç–∏–ª—ñ—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ—ó —Å—Ç—Ä—ñ—á–∫–∏, —è–∫—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è/"
"–ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞–±–æ—Ä—ñ–≤ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫—Ä–æ—Å-–∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó —ñ —Ç.–¥."

#: src/cargo.md:16
msgid ""
"On Debian/Ubuntu, you can also install Cargo, the Rust source and the [Rust "
"formatter](https://github.com/rust-lang/rustfmt) via `apt`. However, this "
"gets you an outdated rust version and may lead to unexpected behavior. The "
"command would be:"
msgstr ""
"–£ Debian/Ubuntu –≤–∏ –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Cargo, –≤–∏—Ö—ñ–¥–Ω–∏–π –∫–æ–¥ Rust —Ç–∞ [Rust "
"formatter](https://github.com/rust-lang/rustfmt) –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `apt`. –û–¥–Ω–∞–∫ "
"—Ü–µ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–æ—ó –≤–µ—Ä—Å—ñ—ó Rust —ñ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ—ó "
"–ø–æ–≤–µ–¥—ñ–Ω–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ç–∞–∫—É –∫–æ–º–∞–Ω–¥—É: "

#: src/cargo.md:18
msgid ""
"```shell\n"
"sudo apt install cargo rust-src rustfmt\n"
"```"
msgstr ""

#: src/cargo.md:22
msgid ""
"We suggest using [VS Code](https://code.visualstudio.com/) to edit the code "
"(but any LSP compatible editor works with rust-analyzer[3](https://rust-"
"analyzer.github.io/))."
msgstr ""
"–ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ [VS Code](https://code.visualstudio.com/) –¥–ª—è "
"—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–¥—É (–æ–¥–Ω–∞–∫ –±—É–¥—å-—è–∫–∏–π LSP —Å—É–º—ñ—Å–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–∞—Ü—é—î –∑ rust-"
"analyzer[3](https://rust-analyzer.github.io/)."

#: src/cargo.md:24
msgid ""
"Some folks also like to use the [JetBrains](https://www.jetbrains.com/"
"clion/) family of IDEs, which do their own analysis but have their own "
"tradeoffs. If you prefer them, you can install the [Rust Plugin](https://www."
"jetbrains.com/rust/). Please take note that as of January 2023 debugging "
"only works on the CLion version of the JetBrains IDEA suite."
msgstr ""
"–î–µ–∫–æ–º—É —Ç–∞–∫–æ–∂ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å—ñ–º–µ–π—Å—Ç–≤–æ IDE [JetBrains](https://"
"www.jetbrains.com/clion/), —è–∫—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å –≤–ª–∞—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑, –∞–ª–µ –º–∞—é—Ç—å —Å–≤–æ—ó "
"–æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ. –Ø–∫—â–æ –≤–∏ –≤–≤–∞–∂–∞—î—Ç–µ –∑–∞ –∫—Ä–∞—â–µ, –≤–∏ –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ [Rust Plugin]"
"(https://www.jetbrains.com/rust/). –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ —Å—Ç–∞–Ω–æ–º –Ω–∞ —Å—ñ—á–µ–Ω—å 2023 "
"—Ä–æ–∫—É –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î —Ç—ñ–ª—å–∫–∏ –≤ CLion."

#: src/cargo/rust-ecosystem.md:1
msgid "The Rust Ecosystem"
msgstr "–ï–∫–æ—Å–∏—Å—Ç–µ–º–∞ Rust"

#: src/cargo/rust-ecosystem.md:3
msgid ""
"The Rust ecosystem consists of a number of tools, of which the main ones are:"
msgstr "–ï–∫–æ—Å–∏—Å—Ç–µ–º–∞ Rust —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ —Ä—è–¥—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤, –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –∑ —è–∫–∏—Ö —î:"

#: src/cargo/rust-ecosystem.md:5
msgid ""
"`rustc`: the Rust compiler which turns `.rs` files into binaries and other "
"intermediate formats."
msgstr ""
"`rustc`: –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä Rust, —è–∫–∏–π –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª–∏ `.rs` –Ω–∞ –±—ñ–Ω–∞—Ä–Ω—ñ —Ñ–∞–π–ª–∏ —Ç–∞ "
"—ñ–Ω—à—ñ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏."

#: src/cargo/rust-ecosystem.md:8
msgid ""
"`cargo`: the Rust dependency manager and build tool. Cargo knows how to "
"download dependencies, usually hosted on <https://crates.io>, and it will "
"pass them to `rustc` when building your project. Cargo also comes with a "
"built-in test runner which is used to execute unit tests."
msgstr ""
"`cargo`: –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π Rust —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–±—ñ—Ä–∫–∏. Cargo –∑–Ω–∞—î, —è–∫  "
"–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, —Ä–æ–∑–º—ñ—â–µ–Ω—ñ –Ω–∞ <https://crates.io>, —ñ –ø–µ—Ä–µ–¥–∞—Ç–∏ —ó—Ö "
"`rustc` –ø—Ä–∏ –∑–±—ñ—Ä—Ü—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É. Cargo —Ç–∞–∫–æ–∂ –ø–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è –∑ –≤–±—É–¥–æ–≤–∞–Ω–∏–º "
"—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –∑–∞–ø—É—Å–∫—É —Ç–µ—Å—Ç—ñ–≤, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–æ–¥—É–ª—å–Ω–∏—Ö "
"—Ç–µ—Å—Ç—ñ–≤."

#: src/cargo/rust-ecosystem.md:13
msgid ""
"`rustup`: the Rust toolchain installer and updater. This tool is used to "
"install and update `rustc` and `cargo` when new versions of Rust is "
"released. In addition, `rustup` can also download documentation for the "
"standard library. You can have multiple versions of Rust installed at once "
"and `rustup` will let you switch between them as needed."
msgstr ""
"`rustup`: –ø—Ä–æ–≥—Ä–∞–º–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–±–æ—Ä—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ Rust. –¶–µ–π "
"—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è `rustc` —ñ `cargo` "
"–ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –Ω–æ–≤–∏—Ö –≤–µ—Ä—Å—ñ–π Rust. –û–∫—Ä—ñ–º —Ç–æ–≥–æ, `rustup` —Ç–∞–∫–æ–∂ –º–æ–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ "
"–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏. –í–∏ –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –≤–µ—Ä—Å—ñ–π Rust "
"–æ–¥–Ω–æ—á–∞—Å–Ω–æ —ñ `rustup` –¥–æ–∑–≤–æ–ª–∏—Ç—å –≤–∞–º –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏—Å—è –º—ñ–∂ –Ω–∏–º–∏ –∑–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ."

#: src/cargo/rust-ecosystem.md:21 src/hello-world.md:25
#: src/hello-world/small-example.md:27 src/why-rust/runtime.md:10
#: src/why-rust/modern.md:21 src/basic-syntax/compound-types.md:30
#: src/basic-syntax/references.md:23
#: src/pattern-matching/destructuring-enums.md:35
#: src/ownership/double-free-modern-cpp.md:55
#: src/error-handling/try-operator.md:48
#: src/error-handling/converting-error-types-example.md:50
#: src/concurrency/threads.md:30 src/async/async-await.md:25
msgid "Key points:"
msgstr "–ö–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏:"

#: src/cargo/rust-ecosystem.md:23
msgid ""
"Rust has a rapid release schedule with a new release coming out every six "
"weeks. New releases maintain backwards compatibility with old releases --- "
"plus they enable new functionality."
msgstr ""
"–£ Rust —Å—Ç—Ä—ñ–º–∫–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ä–µ–ª—ñ–∑—ñ–≤: –Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è –≤–∏—Ö–æ–¥–∏—Ç—å –∫–æ–∂–Ω—ñ —à—ñ—Å—Ç—å —Ç–∏–∂–Ω—ñ–≤. "
"–ù–æ–≤—ñ –≤–µ—Ä—Å—ñ—ó –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å –∑–≤–æ—Ä–æ—Ç–Ω—É —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å —ñ–∑ —Å—Ç–∞—Ä–∏–º–∏ –≤–µ—Ä—Å—ñ—è–º–∏ --- –Ω–∞ "
"–¥–æ–¥–∞—Ç–æ–∫ –≤–æ–Ω–∏ –Ω–∞–¥–∞—é—Ç—å –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ."

#: src/cargo/rust-ecosystem.md:27
msgid ""
"There are three release channels: \"stable\", \"beta\", and \"nightly\"."
msgstr "–Ü—Å–Ω—É—î —Ç—Ä–∏ –≤–∏–¥–∏ —Ä–µ–ª—ñ–∑—ñ–≤: \"stable\", \"beta\" —Ç–∞ \"nightly\"."

#: src/cargo/rust-ecosystem.md:29
msgid ""
"New features are being tested on \"nightly\", \"beta\" is what becomes "
"\"stable\" every six weeks."
msgstr ""
"–ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–µ—Å—Ç—É—é—Ç—å—Å—è –Ω–∞ \"nightly\", \"beta\" --- —Ü–µ —Ç–µ, —â–æ —Å—Ç–∞—î "
"\"stable\" –∫–æ–∂–Ω—ñ —à—ñ—Å—Ç—å —Ç–∏–∂–Ω—ñ–≤."

#: src/cargo/rust-ecosystem.md:32
msgid ""
"Dependencies can also be resolved from alternative [registries](https://doc."
"rust-lang.org/cargo/reference/registries.html), git, folders, and more."
msgstr ""
"–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–∏—Ä—ñ—à–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö [—Ä–µ—î—Å—Ç—Ä—ñ–≤]"
"(https://doc.rust-lang.org/cargo/reference/registries.html), git, –ø–∞–ø–æ–∫ —Ç–æ—â–æ."

#: src/cargo/rust-ecosystem.md:34
msgid ""
"Rust also has [editions](https://doc.rust-lang.org/edition-guide/): the "
"current edition is Rust 2021. Previous editions were Rust 2015 and Rust 2018."
msgstr ""
"Rust —Ç–∞–∫–æ–∂ –º–∞—î \\[—Ä–µ–¥–∞–∫—Ü—ñ—ó\\]: –ø–æ—Ç–æ—á–Ω–∞ —Ä–µ–¥–∞–∫—Ü—ñ—è --- Rust 2021. –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ "
"—Ä–µ–¥–∞–∫—Ü—ñ—è–º–∏ –±—É–ª–∏ Rust 2015 —Ç–∞ Rust 2018."

#: src/cargo/rust-ecosystem.md:37
msgid ""
"The editions are allowed to make backwards incompatible changes to the "
"language."
msgstr "–†–µ–¥–∞–∫—Ü—ñ—è–º –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≤–Ω–æ—Å–∏—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω–æ-–Ω–µ—Å—É–º—ñ—Å–Ω—ñ –∑–º—ñ–Ω–∏ –¥–æ –º–æ–≤–∏."

#: src/cargo/rust-ecosystem.md:40
msgid ""
"To prevent breaking code, editions are opt-in: you select the edition for "
"your crate via the `Cargo.toml` file."
msgstr ""
"–©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–±–æ—ó–≤, —Ä–µ–¥–∞–∫—Ü—ñ—é –¥–ª—è —Å–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –º–æ–∂–Ω–∞ —è–≤–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —É —Ñ–∞–π–ª—ñ "
"`Cargo.toml`."

#: src/cargo/rust-ecosystem.md:43
msgid ""
"To avoid splitting the ecosystem, Rust compilers can mix code written for "
"different editions."
msgstr ""
"–©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥—ñ–ª—É –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏, –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä Rust –º–æ–∂–µ –∑–º—ñ—à—É–≤–∞—Ç–∏ –∫–æ–¥, "
"–Ω–∞–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–¥–∞–∫—Ü—ñ–π."

#: src/cargo/rust-ecosystem.md:46
msgid ""
"Mention that it is quite rare to ever use the compiler directly not through "
"`cargo` (most users never do)."
msgstr ""
"–í–∞—Ä—Ç–æ –∑–≥–∞–¥–∞—Ç–∏, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ, –∞ –Ω–µ —á–µ—Ä–µ–∑ "
"`cargo`, —î —Ä—ñ–¥–∫—ñ—Å–Ω–∏–º —è–≤–∏—â–µ–º (–±—ñ–ª—å—à—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω—ñ–∫–æ–ª–∏ —Ü—å–æ–≥–æ –Ω–µ —Ä–æ–±–ª—è—Ç—å)."

#: src/cargo/rust-ecosystem.md:48
msgid ""
"It might be worth alluding that Cargo itself is an extremely powerful and "
"comprehensive tool.  It is capable of many advanced features including but "
"not limited to: "
msgstr ""
"Cargo —Å–∞–º –ø–æ —Å–æ–±—ñ —î –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ –ø–æ—Ç—É–∂–Ω–∏–º —ñ –≤—Å–µ–æ—Å—è–∂–Ω–∏–º —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º. –í—ñ–Ω "
"–ø—ñ–¥—Ç—Ä–∏–º—É—î –±–µ–∑–ª—ñ—á –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π, –≤–∫–ª—é—á–∞—é—á–∏, –∫—Ä—ñ–º —ñ–Ω—à–æ–≥–æ: "

#: src/cargo/rust-ecosystem.md:49
msgid "Project/package structure"
msgstr "–°—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É/–ø–∞–∫–µ—Ç–∞"

#: src/cargo/rust-ecosystem.md:50
msgid "[workspaces](https://doc.rust-lang.org/cargo/reference/workspaces.html)"
msgstr ""
"[—Ä–æ–±–æ—á—ñ –æ–±–ª–∞—Å—Ç—ñ](https://doc.rust-lang.org/cargo/reference/workspaces.html)"

#: src/cargo/rust-ecosystem.md:51
msgid "Dev Dependencies and Runtime Dependency management/caching"
msgstr ""
"–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è/–∫–µ—à—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ (dev) —Ç–∞ —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è "
"(runtime)"

#: src/cargo/rust-ecosystem.md:52
msgid ""
"[build scripting](https://doc.rust-lang.org/cargo/reference/build-scripts."
"html)"
msgstr ""
"[—Å—Ü–µ–Ω–∞—Ä—ñ—ó –ø–æ–±—É–¥–æ–≤–∏](https://doc.rust-lang.org/cargo/reference/build-scripts."
"html)"

#: src/cargo/rust-ecosystem.md:53
msgid ""
"[global installation](https://doc.rust-lang.org/cargo/commands/cargo-install."
"html)"
msgstr ""
"[–≥–ª–æ–±–∞–ª—å–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞](https://doc.rust-lang.org/cargo/commands/cargo-install."
"html)"

#: src/cargo/rust-ecosystem.md:54
msgid ""
"It is also extensible with sub command plugins as well (such as [cargo "
"clippy](https://github.com/rust-lang/rust-clippy))."
msgstr ""
"–í—ñ–Ω —Ç–∞–∫–æ–∂ —Ä–æ–∑—à–∏—Ä—é—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–ª–∞–≥—ñ–Ω—ñ–≤ –ø—ñ–¥–∫–æ–º–∞–Ω–¥ (—Ç–∞–∫–∏—Ö —è–∫ [cargo "
"clippy](https://github.com/rust-lang/rust-clippy))."

#: src/cargo/rust-ecosystem.md:55
msgid ""
"Read more from the [official Cargo Book](https://doc.rust-lang.org/cargo/)"
msgstr ""
"–î–æ–∫–ª–∞–¥–Ω—ñ—à–µ —á–∏—Ç–∞–π—Ç–µ –≤ [–æ—Ñ—ñ—Ü—ñ–π–Ω—ñ–π Cargo Book](https://doc.rust-lang.org/cargo/)"

#: src/cargo/code-samples.md:1
msgid "Code Samples in This Training"
msgstr "–ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—É –≤ —Ü—å–æ–º—É –∫—É—Ä—Å—ñ"

#: src/cargo/code-samples.md:3
msgid ""
"For this training, we will mostly explore the Rust language through examples "
"which can be executed through your browser. This makes the setup much easier "
"and ensures a consistent experience for everyone."
msgstr ""
"–£ —Ü—å–æ–º—É –∫—É—Ä—Å—ñ –º–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–∏–≤—á–∞—Ç–∏–º–µ–º–æ –º–æ–≤—É Rust –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥–∞—Ö, —è–∫—ñ –º–æ–∂—É—Ç—å "
"–±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ —É –≤–∞—à–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ. –¶–µ –∑–Ω–∞—á–Ω–æ —Å–ø—Ä–æ—â—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ "
"–∑–∞–±–µ–∑–ø–µ—á—É—î –æ–¥–Ω–∞–∫–æ–≤–∏–π –¥–æ—Å–≤—ñ–¥ –¥–ª—è –≤—Å—ñ—Ö."

#: src/cargo/code-samples.md:7
msgid ""
"Installing Cargo is still encouraged: it will make it easier for you to do "
"the exercises. On the last day, we will do a larger exercise which shows you "
"how to work with dependencies and for that you need Cargo."
msgstr ""
"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Cargo, —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è: —Ü–µ –ø–æ–ª–µ–≥—à–∏—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è "
"–≤–ø—Ä–∞–≤. –í –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –º–∏ –≤–∏–∫–æ–Ω–∞—î–º–æ –±—ñ–ª—å—à –º–∞—Å—à—Ç–∞–±–Ω—É –≤–ø—Ä–∞–≤—É, —è–∫–∞ –ø–æ–∫–∞–∂–µ –≤–∞–º "
"—è–∫ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —ñ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏, —ñ –¥–ª—è —Ü—å–æ–≥–æ –≤–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è Cargo."

#: src/cargo/code-samples.md:11
msgid "The code blocks in this course are fully interactive:"
msgstr "–ë–ª–æ–∫–∏ –∫–æ–¥—É –≤ —Ü—å–æ–º—É –∫—É—Ä—Å—ñ —î –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º–∏:"

#: src/cargo/code-samples.md:13
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    println!(\"Edit me!\");\n"
"}\n"
"```"
msgstr ""

#: src/cargo/code-samples.md:19
msgid "You can use "
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "

#: src/cargo/code-samples.md:19
msgid " to execute the code when focus is in the text box."
msgstr ""
" –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É, –∫–æ–ª–∏ —Ñ–æ–∫—É—Å –≤–≤–µ–¥–µ–Ω–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—ñ."

#: src/cargo/code-samples.md:24
msgid ""
"Most code samples are editable like shown above. A few code samples are not "
"editable for various reasons:"
msgstr ""
"–ë—ñ–ª—å—à—ñ—Å—Ç—å –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∫–æ–¥—É –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, —è–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤–∏—â–µ. –ö—ñ–ª—å–∫–∞ "
"–ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∫–æ–¥—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—á–∏–Ω:"

#: src/cargo/code-samples.md:27
msgid ""
"The embedded playgrounds cannot execute unit tests. Copy-paste the code and "
"open it in the real Playground to demonstrate unit tests."
msgstr ""
"–í–±—É–¥–æ–≤–∞–Ω–∏–π —É —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–¥—É –Ω–µ –º–æ–∂–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏. "
"–°–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥ —ñ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –π–æ–≥–æ –≤ Rust Playground, —â–æ–± –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ "
"–º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏."

#: src/cargo/code-samples.md:30
msgid ""
"The embedded playgrounds lose their state the moment you navigate away from "
"the page! This is the reason that the students should solve the exercises "
"using a local Rust installation or via the Playground."
msgstr ""
"–í–±—É–¥–æ–≤–∞–Ω—ñ –≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∏ –∫–æ–¥—É –≤—Ç—Ä–∞—á–∞—é—Ç—å —Å–≤—ñ–π —Å—Ç–∞–Ω —É —Ç–æ–π –º–æ–º–µ–Ω—Ç, –∫–æ–ª–∏ "
"–≤–∏ –π–¥–µ—Ç–µ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏! –°–∞–º–µ –∑ —Ü—ñ—î—ó –ø—Ä–∏—á–∏–Ω–∏ —É—á–Ω—ñ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –≤–ø—Ä–∞–≤–∏, "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ª–æ–∫–∞–ª—å–Ω—É —É—Å—Ç–∞–Ω–æ–≤–∫—É Rust –∞–±–æ Rust Playground."

#: src/cargo/running-locally.md:1
msgid "Running Code Locally with Cargo"
msgstr "–ó–∞–ø—É—Å–∫ –∫–æ–¥—É –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Cargo"

#: src/cargo/running-locally.md:3
msgid ""
"If you want to experiment with the code on your own system, then you will "
"need to first install Rust. Do this by following the [instructions in the "
"Rust Book](https://doc.rust-lang.org/book/ch01-01-installation.html). This "
"should give you a working `rustc` and `cargo`. At the time of writing, the "
"latest stable Rust release has these version numbers:"
msgstr ""
"–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –∑ –∫–æ–¥–æ–º –Ω–∞ —Å–≤–æ—ó–π —Å–∏—Å—Ç–µ–º—ñ, —Ç–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ "
"–±—É–¥–µ —Å–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Rust. –ó—Ä–æ–±—ñ—Ç—å —Ü–µ, –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å [—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π —É The "
"Rust Book](https://doc.rust-lang.org/book/ch01-01-installation.html). –£ "
"–≤–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ –∑'—è–≤–ª—è—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ `rustc` —Ç–∞ `cargo`. –ù–∞ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—è "
"—Å—Ç–∞—Ç—Ç—ñ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –≤–∏–ø—É—Å–∫ Rust –º–∞—î —Ç–∞–∫—ñ –≤–µ—Ä—Å—ñ—ó:"

#: src/cargo/running-locally.md:8
msgid ""
"```shell\n"
"% rustc --version\n"
"rustc 1.69.0 (84c898d65 2023-04-16)\n"
"% cargo --version\n"
"cargo 1.69.0 (6e9a83356 2023-04-12)\n"
"```"
msgstr ""

#: src/cargo/running-locally.md:15
msgid ""
"You can use any later version too since Rust maintains backwards "
"compatibility."
msgstr ""
"–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±—É–¥—å-—è–∫—É –ø—ñ–∑–Ω—ñ—à—É –≤–µ—Ä—Å—ñ—é, –æ—Å–∫—ñ–ª—å–∫–∏ Rust "
"–ø—ñ–¥—Ç—Ä–∏–º—É—î –∑–≤–æ—Ä–æ—Ç–Ω—É —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å."

#: src/cargo/running-locally.md:17
msgid ""
"With this in place, follow these steps to build a Rust binary from one of "
"the examples in this training:"
msgstr ""
"–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–π—Ç–µ —Ç–∞–∫—ñ –∫—Ä–æ–∫–∏, —â–æ–± –∑—ñ–±—Ä–∞—Ç–∏ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤—ñ "
"–æ–¥–Ω–æ–≥–æ –∑ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —É —Ü—å–æ–º—É –∫—É—Ä—Å—ñ:"

#: src/cargo/running-locally.md:20
msgid "Click the \"Copy to clipboard\" button on the example you want to copy."
msgstr ""
"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"Copy to clipboard\" –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ –∫–æ–¥—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ "
"—Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏."

#: src/cargo/running-locally.md:22
msgid ""
"Use `cargo new exercise` to create a new `exercise/` directory for your code:"
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `cargo new exercise`, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é `exercise/"
"` –¥–ª—è –≤–∞—à–æ–≥–æ –∫–æ–¥—É:"

#: src/cargo/running-locally.md:24
msgid ""
"```shell\n"
"$ cargo new exercise\n"
"     Created binary (application) `exercise` package\n"
"```"
msgstr ""
"```shell\n"
"$ cargo new exercise\n"
"     Created binary (application) `exercise` package\n"
"```"

#: src/cargo/running-locally.md:29
msgid ""
"Navigate into `exercise/` and use `cargo run` to build and run your binary:"
msgstr ""
"–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é `exercise/` —ñ –≤–∏–∫–æ–Ω–∞–π—Ç–µ `cargo run` –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ç–∞ "
"–∑–∞–ø—É—Å–∫—É –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É:"

#: src/cargo/running-locally.md:31
msgid ""
"```shell\n"
"$ cd exercise\n"
"$ cargo run\n"
"   Compiling exercise v0.1.0 (/home/mgeisler/tmp/exercise)\n"
"    Finished dev [unoptimized + debuginfo] target(s) in 0.75s\n"
"     Running `target/debug/exercise`\n"
"Hello, world!\n"
"```"
msgstr ""
"```shell\n"
"$ cd exercise\n"
"$ cargo run\n"
"   Compiling exercise v0.1.0 (/home/mgeisler/tmp/exercise)\n"
"    Finished dev [unoptimized + debuginfo] target(s) in 0.75s\n"
"     Running `target/debug/exercise`\n"
"Hello, world!\n"
"```"

#: src/cargo/running-locally.md:40
msgid ""
"Replace the boiler-plate code in `src/main.rs` with your own code. For "
"example, using the example on the previous page, make `src/main.rs` look like"
msgstr ""
"–ó–∞–º—ñ–Ω—ñ—Ç—å —à–∞–±–ª–æ–Ω–Ω–∏–π –∫–æ–¥ —É `src/main.rs` –Ω–∞ —Å–≤—ñ–π –∫–æ–¥. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –ø—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏, –∑—Ä–æ–±—ñ—Ç—å `src/main.rs` "
"—Å—Ö–æ–∂–∏–º –Ω–∞"

#: src/cargo/running-locally.md:43
msgid ""
"```rust\n"
"fn main() {\n"
"    println!(\"Edit me!\");\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"fn main() {\n"
"    println!(\"Edit me!\");\n"
"}\n"
"```"

#: src/cargo/running-locally.md:49
msgid "Use `cargo run` to build and run your updated binary:"
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `cargo run` –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ç–∞ –∑–∞–ø—É—Å–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ "
"—Ñ–∞–π–ª—É:"

#: src/cargo/running-locally.md:51
msgid ""
"```shell\n"
"$ cargo run\n"
"   Compiling exercise v0.1.0 (/home/mgeisler/tmp/exercise)\n"
"    Finished dev [unoptimized + debuginfo] target(s) in 0.24s\n"
"     Running `target/debug/exercise`\n"
"Edit me!\n"
"```"
msgstr ""
"```shell\n"
"$ cargo run\n"
"   Compiling exercise v0.1.0 (/home/mgeisler/tmp/exercise)\n"
"    Finished dev [unoptimized + debuginfo] target(s) in 0.24s\n"
"     Running `target/debug/exercise`\n"
"Edit me!\n"
"```"

#: src/cargo/running-locally.md:59
msgid ""
"Use `cargo check` to quickly check your project for errors, use `cargo "
"build` to compile it without running it. You will find the output in `target/"
"debug/` for a normal debug build. Use `cargo build --release` to produce an "
"optimized release build in `target/release/`."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `cargo check` –¥–ª—è —à–≤–∏–¥–∫–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç—É –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å "
"–ø–æ–º–∏–ª–æ–∫ —ñ `cargo build` –¥–ª—è  –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É –±–µ–∑ –π–æ–≥–æ –∑–∞–ø—É—Å–∫—É. –í–∏ "
"–∑–Ω–∞–π–¥–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó `target/debug/` –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂—É–≤–∞–ª—å–Ω–æ—ó –∑–±—ñ—Ä–∫–∏. "
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `cargo build --release` –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ—Ö —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó "
"–∑–±—ñ—Ä–∫–∏ –≤ `target/release/`."

#: src/cargo/running-locally.md:64
msgid ""
"You can add dependencies for your project by editing `Cargo.toml`. When you "
"run `cargo` commands, it will automatically download and compile missing "
"dependencies for you."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è –≤–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞–≤—à–∏ —Ñ–∞–π–ª `Cargo."
"toml`. –ö–æ–ª–∏ –≤–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `cargo`, –≤–æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å —ñ "
"—Å–∫–æ–º–ø—ñ–ª—é—î –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–ª—è –≤–∞—Å."

#: src/cargo/running-locally.md:72
msgid ""
"Try to encourage the class participants to install Cargo and use a local "
"editor. It will make their life easier since they will have a normal "
"development environment."
msgstr ""
"–ó–∞–ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ —É—á–∞—Å–Ω–∏–∫–∞–º –∑–∞–Ω—è—Ç—Ç—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Cargo —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–∏–π "
"—Ä–µ–¥–∞–∫—Ç–æ—Ä. –¶–µ –ø–æ–ª–µ–≥—à–∏—Ç—å —ó–º –∂–∏—Ç—Ç—è, —Ç–æ–º—É —â–æ —É –Ω–∏—Ö –±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ "
"—Ä–æ–∑—Ä–æ–±–∫–∏."

#: src/welcome-day-1.md:1
msgid "Welcome to Day 1"
msgstr "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –î–Ω—è 1"

#: src/welcome-day-1.md:3
msgid ""
"This is the first day of Rust Fundamentals. We will cover a lot of ground "
"today:"
msgstr ""
"–¶–µ –ø–µ—Ä—à–∏–π –¥–µ–Ω—å Rust Fundamentals. –°—å–æ–≥–æ–¥–Ω—ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –±–∞–≥–∞—Ç–æ –ø–∏—Ç–∞–Ω—å:"

#: src/welcome-day-1.md:6
msgid ""
"Basic Rust syntax: variables, scalar and compound types, enums, structs, "
"references, functions, and methods."
msgstr ""
"–ë–∞–∑–æ–≤–∏–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Rust: –∑–º—ñ–Ω–Ω—ñ, —Å–∫–∞–ª—è—Ä–Ω—ñ —Ç–∞ —Å–∫–ª–∞–¥–µ–Ω—ñ —Ç–∏–ø–∏, –ø–µ—Ä–µ–ª—ñ–∫–∏, "
"—Å—Ç—Ä—É–∫—Ç—É—Ä–∏, –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –º–µ—Ç–æ–¥–∏."

#: src/welcome-day-1.md:9
msgid ""
"Control flow constructs: `if`, `if let`, `while`, `while let`, `break`, and "
"`continue`."
msgstr ""
"–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ—Ç–æ–∫—É –∫–µ—Ä—É–≤–∞–Ω–Ω—è: `if`, `if let`, `while`, `while let`, `break` "
"—ñ `continue`."

#: src/welcome-day-1.md:12
msgid "Pattern matching: destructuring enums, structs, and arrays."
msgstr "–ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤: –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–ª—ñ–∫—ñ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä —ñ –º–∞—Å–∏–≤—ñ–≤."

#: src/welcome-day-1.md:16
msgid "Please remind the students that:"
msgstr "–ù–∞–≥–∞–¥–∞–π—Ç–µ —É—á–Ω—è–º, —â–æ:"

#: src/welcome-day-1.md:18
msgid ""
"They should ask questions when they get them, don't save them to the end."
msgstr ""
"–í–æ–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–∞–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, –∫–æ–ª–∏ –≤–æ–Ω–∏ —ó—Ö –æ—Ç—Ä–∏–º–∞—é—Ç—å, –Ω–µ –∑–±–µ—Ä—ñ–≥–∞–π—Ç–µ —ó—Ö –¥–æ "
"–∫—ñ–Ω—Ü—è."

#: src/welcome-day-1.md:19
msgid ""
"The class is meant to be interactive and discussions are very much "
"encouraged!"
msgstr "–ö–ª–∞—Å –º–∞—î –±—É—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º, —Ç–æ–º—É –¥–∏—Å–∫—É—Å—ñ—ó –¥—É–∂–µ –∑–∞–æ—Ö–æ—á—É—é—Ç—å—Å—è!"

#: src/welcome-day-1.md:20
msgid ""
"As an instructor, you should try to keep the discussions relevant, i.e., "
"keep the discussions related to how Rust does things vs some other "
"language.  It can be hard to find the right balance, but err on the side of "
"allowing  discussions since they engage people much more than one-way "
"communication."
msgstr ""
"–Ø–∫ —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –Ω–∞–º–∞–≥–∞—Ç–∏—Å—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏–º–∏, "
"—Ç–æ–±—Ç–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è, –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ –∑ —Ç–∏–º, —è–∫ Rust —â–æ—Å—å —Ä–æ–±–∏—Ç—å –ø—Ä–æ—Ç–∏ "
"—ñ–Ω—à–æ—ó –º–æ–≤–∏. –ú–æ–∂–µ –±—É—Ç–∏ –≤–∞–∂–∫–æ –∑–Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å, –∞–ª–µ –¥–æ–∑–≤–æ–ª—å—Ç–µ "
"–æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –∑–∞–ª—É—á–∞—é—Ç—å –ª—é–¥–µ–π –Ω–∞–±–∞–≥–∞—Ç–æ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—î "
"—Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è."

#: src/welcome-day-1.md:24
msgid ""
"The questions will likely mean that we talk about things ahead of the slides."
msgstr ""
"–ó–∞–ø–∏—Ç–∞–Ω–Ω—è, —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ, –æ–∑–Ω–∞—á–∞—Ç–∏–º—É—Ç—å, —â–æ –º–∏ –æ–±–≥–æ–≤–æ—Ä—é—î–º–æ —Ä–µ—á—ñ –Ω–∞–ø–µ—Ä–µ–¥–æ–¥–Ω—ñ "
"—Å–ª–∞–π–¥—ñ–≤."

#: src/welcome-day-1.md:25
msgid ""
"This is perfectly okay! Repetition is an important part of learning. "
"Remember that the slides are just a support and you are free to skip them as "
"you like."
msgstr ""
"–¶–µ —Ü—ñ–ª–∫–æ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —î –≤–∞–∂–ª–∏–≤–æ—é —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞–≤—á–∞–Ω–Ω—è. –ü–∞–º‚Äô—è—Ç–∞–π—Ç–µ, —â–æ "
"—Å–ª–∞–π–¥–∏ —î –ª–∏—à–µ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é, —ñ –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ —ó—Ö, —è–∫ –∑–∞–±–∞–∂–∞—î—Ç–µ."

#: src/welcome-day-1.md:29
msgid ""
"The idea for the first day is to show _just enough_ of Rust to be able to "
"speak about the famous borrow checker. The way Rust handles memory is a "
"major feature and we should show students this right away."
msgstr ""
"–Ü–¥–µ—è –ø–µ—Ä—à–æ–≥–æ –¥–Ω—è –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ _—Ä—ñ–≤–Ω–æ —Å—Ç—ñ–ª—å–∫–∏_ Rust, —â–æ–± "
"–º–æ–∂–Ω–∞ –±—É–ª–æ –≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ –∑–Ω–∞–º–µ–Ω–∏—Ç—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–æ–∑–∏–∫. –¢–µ, —è–∫ Rust –æ–±—Ä–æ–±–ª—è—î "
"–ø–∞–º‚Äô—è—Ç—å, —î –≥–æ–ª–æ–≤–Ω–æ—é –æ—Å–æ–±–ª–∏–≤—ñ—Å—Ç—é, —ñ –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –Ω–µ–≥–∞–π–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º."

#: src/welcome-day-1.md:33
msgid ""
"If you're teaching this in a classroom, this is a good place to go over the "
"schedule. We suggest splitting the day into two parts (following the slides):"
msgstr ""
"–Ø–∫—â–æ –≤–∏ –≤–∏–∫–ª–∞–¥–∞—î—Ç–µ —Ü–µ –≤ –∫–ª–∞—Å—ñ, —Ü–µ –≥–∞—Ä–Ω–µ –º—ñ—Å—Ü–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥. "
"–ü—Ä–æ–ø–æ–Ω—É—î–º–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –¥–µ–Ω—å –Ω–∞ –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ (–∑–∞ —Å–ª–∞–π–¥–∞–º–∏):"

#: src/welcome-day-1.md:36
msgid "Morning: 9:00 to 12:00,"
msgstr "–†–∞–Ω–æ–∫: –∑ 9:00 –¥–æ 12:00,"

#: src/welcome-day-1.md:37
msgid "Afternoon: 13:00 to 16:00."
msgstr "–ü—ñ—Å–ª—è–æ–±—ñ–¥–Ω—ñ–π —á–∞—Å: –∑ 13:00 –¥–æ 16:00."

#: src/welcome-day-1.md:39
msgid ""
"You can of course adjust this as necessary. Please make sure to include "
"breaks, we recommend a break every hour!"
msgstr ""
"–í–∏, –∑–≤–∏—á–∞–π–Ω–æ, –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ü–µ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ "
"–ø–µ—Ä–µ–¥–±–∞—á—Ç–µ –ø–µ—Ä–µ—Ä–≤–∏, –º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–µ—Ä–µ—Ä–≤—É —â–æ–≥–æ–¥–∏–Ω–∏!"

#: src/welcome-day-1/what-is-rust.md:3
msgid ""
"Rust is a new programming language which had its [1.0 release in 2015]"
"(https://blog.rust-lang.org/2015/05/15/Rust-1.0.html):"
msgstr ""
"Rust ‚Äî —Ü–µ –Ω–æ–≤–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —è–∫–∞ –≤–∏–ø—É—Å—Ç–∏–ª–∞ [1.0 —É 2015 —Ä–æ—Ü—ñ](https://"
"blog.rust-lang.org/2015/05/15/Rust-1.0.html):"

#: src/welcome-day-1/what-is-rust.md:5
msgid "Rust is a statically compiled language in a similar role as C++"
msgstr ""
"Rust ‚Äî —Ü–µ —Å—Ç–∞—Ç–∏—á–Ω–æ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–∞ –º–æ–≤–∞, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î —Ç–∞–∫—É —Å–∞–º—É —Ä–æ–ª—å, —è–∫ C++"

#: src/welcome-day-1/what-is-rust.md:6
msgid "`rustc` uses LLVM as its backend."
msgstr "`rustc` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î LLVM —è–∫ —Å–µ—Ä–≤–µ—Ä–Ω—É —á–∞—Å—Ç–∏–Ω—É."

#: src/welcome-day-1/what-is-rust.md:7
msgid ""
"Rust supports many [platforms and architectures](https://doc.rust-lang.org/"
"nightly/rustc/platform-support.html):"
msgstr ""
"Rust –ø—ñ–¥—Ç—Ä–∏–º—É—î –±–∞–≥–∞—Ç–æ [–ø–ª–∞—Ç—Ñ–æ—Ä–º —ñ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä](https://doc.rust-lang.org/"
"nightly/rustc/platform-support.html):"

#: src/welcome-day-1/what-is-rust.md:9
msgid "x86, ARM, WebAssembly, ..."
msgstr "x86, ARM, WebAssembly, ..."

#: src/welcome-day-1/what-is-rust.md:10
msgid "Linux, Mac, Windows, ..."
msgstr "Linux, Mac, Windows, ..."

#: src/welcome-day-1/what-is-rust.md:11
msgid "Rust is used for a wide range of devices:"
msgstr "Rust –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —à–∏—Ä–æ–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä—É –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤:"

#: src/welcome-day-1/what-is-rust.md:12
msgid "firmware and boot loaders,"
msgstr "–ø—Ä–æ—à–∏–≤–∫–∏ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á—ñ,"

#: src/welcome-day-1/what-is-rust.md:13
msgid "smart displays,"
msgstr "—Ä–æ–∑—É–º–Ω—ñ –¥–∏—Å–ø–ª–µ—ó,"

#: src/welcome-day-1/what-is-rust.md:14
msgid "mobile phones,"
msgstr "–º–æ–±—ñ–ª—å–Ω—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏,"

#: src/welcome-day-1/what-is-rust.md:15
msgid "desktops,"
msgstr "—Ä–æ–±–æ—á—ñ —Å—Ç–æ–ª–∏,"

#: src/welcome-day-1/what-is-rust.md:16
msgid "servers."
msgstr "—Å–µ—Ä–≤–µ—Ä—ñ–≤."

#: src/welcome-day-1/what-is-rust.md:21
msgid "Rust fits in the same area as C++:"
msgstr "Rust –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—ñ–π —Å–∞–º—ñ–π –æ–±–ª–∞—Å—Ç—ñ, —â–æ –π C++:"

#: src/welcome-day-1/what-is-rust.md:23
msgid "High flexibility."
msgstr "–í–∏—Å–æ–∫–∞ –≥–Ω—É—á–∫—ñ—Å—Ç—å."

#: src/welcome-day-1/what-is-rust.md:24
msgid "High level of control."
msgstr "–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∫–æ–Ω—Ç—Ä–æ–ª—é."

#: src/welcome-day-1/what-is-rust.md:25
msgid ""
"Can be scaled down to very constrained devices such as microcontrollers."
msgstr "–ú–æ–∂–Ω–∞ –∑–º–µ–Ω—à–∏—Ç–∏ –¥–æ –¥—É–∂–µ –æ–±–º–µ–∂–µ–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤, —Ç–∞–∫–∏—Ö —è–∫ –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏."

#: src/welcome-day-1/what-is-rust.md:26
msgid "Has no runtime or garbage collection."
msgstr "–ù–µ –º–∞—î —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–±–æ –∑–±–∏—Ä–∞–Ω–Ω—è —Å–º—ñ—Ç—Ç—è."

#: src/welcome-day-1/what-is-rust.md:27
msgid "Focuses on reliability and safety without sacrificing performance."
msgstr "–ó–æ—Å–µ—Ä–µ–¥–∂–µ–Ω–æ –Ω–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ —Ç–∞ –±–µ–∑–ø–µ—Ü—ñ –±–µ–∑ —à–∫–æ–¥–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."

#: src/hello-world.md:3
msgid ""
"Let us jump into the simplest possible Rust program, a classic Hello World "
"program:"
msgstr ""
"–ü–µ—Ä–µ–π–¥–µ–º–æ –¥–æ –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ Rust, –∫–ª–∞—Å–∏—á–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ Hello World:"

#: src/hello-world.md:6
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    println!(\"Hello üåç!\");\n"
"}\n"
"```"
msgstr ""

#: src/hello-world.md:12
msgid "What you see:"
msgstr "–©–æ —Ç–∏ –±–∞—á–∏—à:"

#: src/hello-world.md:14
msgid "Functions are introduced with `fn`."
msgstr "–§—É–Ω–∫—Ü—ñ—ó –≤–≤–æ–¥—è—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `fn`."

#: src/hello-world.md:15
msgid "Blocks are delimited by curly braces like in C and C++."
msgstr "–ë–ª–æ–∫–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ —Ñ—ñ–≥—É—Ä–Ω–∏–º–∏ –¥—É–∂–∫–∞–º–∏, —è–∫ —É C —ñ C++."

#: src/hello-world.md:16
msgid "The `main` function is the entry point of the program."
msgstr "–§—É–Ω–∫—Ü—ñ—è `main` —î —Ç–æ—á–∫–æ—é –≤—Ö–æ–¥—É –≤ –ø—Ä–æ–≥—Ä–∞–º—É."

#: src/hello-world.md:17
msgid "Rust has hygienic macros, `println!` is an example of this."
msgstr "Rust –º–∞—î –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω—ñ –º–∞–∫—Ä–æ—Å–∏, `println!` —î –ø—Ä–∏–∫–ª–∞–¥–æ–º —Ü—å–æ–≥–æ."

#: src/hello-world.md:18
msgid "Rust strings are UTF-8 encoded and can contain any Unicode character."
msgstr ""
"–†—è–¥–∫–∏ Rust –º–∞—é—Ç—å –∫–æ–¥—É–≤–∞–Ω–Ω—è UTF-8 —ñ –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ –±—É–¥—å-—è–∫—ñ —Å–∏–º–≤–æ–ª–∏ Unicode."

#: src/hello-world.md:22
msgid ""
"This slide tries to make the students comfortable with Rust code. They will "
"see a ton of it over the next three days so we start small with something "
"familiar."
msgstr ""
"–¶–µ–π —Å–ª–∞–π–¥ —Å–ø—Ä—è–º–æ–≤–∞–Ω–∏–π –Ω–∞ —Ç–µ, —â–æ–± —Å—Ç—É–¥–µ–Ω—Ç–∏ –∑–≤–∏–∫–ª–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ –∫–æ–¥–æ–º Rust. "
"–í–æ–Ω–∏ –ø–æ–±–∞—á–∞—Ç—å –º–∞—Å—É —Ü—å–æ–≥–æ –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Ç—Ä—å–æ—Ö –¥–Ω—ñ–≤, —Ç–æ–∂ –º–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ "
"–º–∞–ª–æ–≥–æ –∑ —á–æ–≥–æ—Å—å –∑–Ω–∞–π–æ–º–æ–≥–æ."

#: src/hello-world.md:27
msgid ""
"Rust is very much like other languages in the C/C++/Java tradition. It is "
"imperative and it doesn't try to reinvent things unless absolutely necessary."
msgstr ""
"Rust –¥—É–∂–µ —Å—Ö–æ–∂–∏–π –Ω–∞ —ñ–Ω—à—ñ –º–æ–≤–∏ —Ç—Ä–∞–¥–∏—Ü—ñ—ó C/C++/Java. –¶–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ, —ñ –≤–æ–Ω–æ –Ω–µ "
"–Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–Ω–∞–π—Ç–∏ —â–æ—Å—å –∑–∞–Ω–æ–≤–æ, —è–∫—â–æ —Ü–µ –Ω–µ —î –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º."

#: src/hello-world.md:31
msgid "Rust is modern with full support for things like Unicode."
msgstr "Rust —Å—É—á–∞—Å–Ω–∏–π —ñ–∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ç–∞–∫–∏—Ö —Ä–µ—á–µ–π, —è–∫ Unicode."

#: src/hello-world.md:33
msgid ""
"Rust uses macros for situations where you want to have a variable number of "
"arguments (no function [overloading](basic-syntax/functions-interlude.md))."
msgstr ""
"Rust –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–∞–∫—Ä–æ—Å–∏ –¥–ª—è —Å–∏—Ç—É–∞—Ü—ñ–π, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å "
"–∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ (–Ω–µ–º–∞—î —Ñ—É–Ω–∫—Ü—ñ—ó [–ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è](basic-syntax/functions-interlude."
"md))."

#: src/hello-world.md:36
msgid ""
"Macros being 'hygienic' means they don't accidentally capture identifiers "
"from the scope they are used in. Rust macros are actually only [partially "
"hygienic](https://veykril.github.io/tlborm/decl-macros/minutiae/hygiene."
"html)."
msgstr ""
"–ú–∞–∫—Ä–æ—Å–∏ —î ¬´–≥—ñ–≥—ñ—î–Ω—ñ—á–Ω–∏–º–∏¬ª –æ–∑–Ω–∞—á–∞—î, —â–æ –≤–æ–Ω–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ –Ω–µ –∑–∞—Ö–æ–ø–ª—é—é—Ç—å "
"—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –∑ –æ–±–ª–∞—Å—Ç—ñ, —É —è–∫—ñ–π –≤–æ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è. –ú–∞–∫—Ä–æ—Å–∏ Rust "
"–Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –ª–∏—à–µ [—á–∞—Å—Ç–∫–æ–≤–æ –≥—ñ–≥—ñ—î–Ω—ñ—á–Ω—ñ](https://veykril.github.io/tlborm/decl-"
"macros/minutiae/hygiene .html)."

#: src/hello-world.md:40
msgid ""
"Rust is multi-paradigm. For example, it has powerful [object-oriented "
"programming features](https://doc.rust-lang.org/book/ch17-00-oop.html), and, "
"while it is not a functional language, it includes a range of [functional "
"concepts](https://doc.rust-lang.org/book/ch13-00-functional-features.html)."
msgstr ""
"–Ü—Ä–∂–∞ —î –º—É–ª—å—Ç–∏–ø–∞—Ä–∞–¥–∏–≥–º–æ—é. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–Ω –º–∞—î –ø–æ—Ç—É–∂–Ω—ñ [—Ñ—É–Ω–∫—Ü—ñ—ó –æ–±‚Äô—î–∫—Ç–Ω–æ-"
"–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è](https://doc.rust-lang.org/book/ch17-00-oop."
"html), —ñ, —Ö–æ—á–∞ —Ü–µ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞ –º–æ–≤–∞, –≤—ñ–Ω –≤–∫–ª—é—á–∞—î –¥—ñ–∞–ø–∞–∑–æ–Ω "
"[—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –ø–æ–Ω—è—Ç—å](https://doc.rust-lang.org/book/ch13-00-functional-"
"features.html)."

#: src/hello-world/small-example.md:3
msgid "Here is a small example program in Rust:"
msgstr "–û—Å—å –Ω–µ–≤–µ–ª–∏–∫–∏–π –ø—Ä–∏–∫–ª–∞–¥ –ø—Ä–æ–≥—Ä–∞–º–∏ –≤ Rust:"

#: src/hello-world/small-example.md:5
msgid ""
"```rust,editable\n"
"fn main() {              // Program entry point\n"
"    let mut x: i32 = 6;  // Mutable variable binding\n"
"    print!(\"{x}\");       // Macro for printing, like printf\n"
"    while x != 1 {       // No parenthesis around expression\n"
"        if x % 2 == 0 {  // Math like in other languages\n"
"            x = x / 2;\n"
"        } else {\n"
"            x = 3 * x + 1;\n"
"        }\n"
"        print!(\" -> {x}\");\n"
"    }\n"
"    println!();\n"
"}\n"
"```"
msgstr ""

#: src/hello-world/small-example.md:23
msgid ""
"The code implements the Collatz conjecture: it is believed that the loop "
"will always end, but this is not yet proved. Edit the code and play with "
"different inputs."
msgstr ""
"–ö–æ–¥ —Ä–µ–∞–ª—ñ–∑—É—î –≥—ñ–ø–æ—Ç–µ–∑—É –ö–æ–ª–ª–∞—Ç—Ü–∞: –≤–≤–∞–∂–∞—î—Ç—å—Å—è, —â–æ —Ü–∏–∫–ª –∑–∞–≤–∂–¥–∏ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è, –∞–ª–µ "
"—Ü–µ —â–µ –Ω–µ –¥–æ–≤–µ–¥–µ–Ω–æ. –†–µ–¥–∞–≥—É–π—Ç–µ –∫–æ–¥ —ñ –≥—Ä–∞–π—Ç–µ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –≤–≤–µ–¥–µ–Ω–Ω—è–º–∏."

#: src/hello-world/small-example.md:29
msgid ""
"Explain that all variables are statically typed. Try removing `i32` to "
"trigger type inference. Try with `i8` instead and trigger a runtime integer "
"overflow."
msgstr ""
"–ü–æ—è—Å–Ω—ñ—Ç—å, —â–æ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –º–∞—é—Ç—å —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Ç–∏–ø. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ `i32`, —â–æ–± "
"–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É. –ù–∞—Ç–æ–º—ñ—Å—Ç—å —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ `i8` —ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å "
"—Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/hello-world/small-example.md:32
msgid "Change `let mut x` to `let x`, discuss the compiler error."
msgstr "–ó–º—ñ–Ω—ñ—Ç—å `let mut x` –Ω–∞ `let x`, –æ–±–≥–æ–≤–æ—Ä—ñ—Ç—å –ø–æ–º–∏–ª–∫—É –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞."

#: src/hello-world/small-example.md:34
msgid ""
"Show how `print!` gives a compilation error if the arguments don't match the "
"format string."
msgstr ""
"–ü–æ–∫–∞–∂—ñ—Ç—å, —è–∫ `print!` –≤–∏–¥–∞—î –ø–æ–º–∏–ª–∫—É –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó, —è–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –Ω–µ "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ä—è–¥–∫—É —Ñ–æ—Ä–º–∞—Ç—É."

#: src/hello-world/small-example.md:37
msgid ""
"Show how you need to use `{}` as a placeholder if you want to print an "
"expression which is more complex than just a single variable."
msgstr ""
"–ü–æ–∫–∞–∂—ñ—Ç—å, —è–∫ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `{}` —è–∫ –∑–∞–ø–æ–≤–Ω—é–≤–∞—á, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ "
"–Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ –≤–∏—Ä–∞–∑, —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π –∑–∞ –æ–¥–Ω—É –∑–º—ñ–Ω–Ω—É."

#: src/hello-world/small-example.md:40
msgid ""
"Show the students the standard library, show them how to search for `std::"
"fmt` which has the rules of the formatting mini-language. It's important "
"that the students become familiar with searching in the standard library."
msgstr ""
"–ü–æ–∫–∞–∂—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É, –ø–æ–∫–∞–∂—ñ—Ç—å —ó–º, —è–∫ —à—É–∫–∞—Ç–∏ `std::fmt`, "
"—è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –º—ñ–Ω—ñ-–º–æ–≤–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è. –í–∞–∂–ª–∏–≤–æ, —â–æ–± —É—á–Ω—ñ –æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—è "
"–∑ –ø–æ—à—É–∫–æ–º —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ."

#: src/hello-world/small-example.md:44
msgid ""
"In a shell `rustup doc std::fmt` will open a browser on the local std::fmt "
"documentation"
msgstr ""
"–£ –æ–±–æ–ª–æ–Ω—Ü—ñ `rustup doc std::fmt` –≤—ñ–¥–∫—Ä–∏—î –±—Ä–∞—É–∑–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó std::"
"fmt"

#: src/why-rust.md:3
msgid "Some unique selling points of Rust:"
msgstr "–î–µ—è–∫—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏ Rust:"

#: src/why-rust.md:5
msgid "Compile time memory safety."
msgstr "–ë–µ–∑–ø–µ–∫–∞ –ø–∞–º'—è—Ç—ñ —á–∞—Å—É –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó."

#: src/why-rust.md:6
msgid "Lack of undefined runtime behavior."
msgstr "–í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/why-rust.md:7
msgid "Modern language features."
msgstr "–°—É—á–∞—Å–Ω—ñ –º–æ–≤–Ω—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ."

#: src/why-rust.md:11
msgid ""
"Make sure to ask the class which languages they have experience with. "
"Depending on the answer you can highlight different features of Rust:"
msgstr ""
"–û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –∑–∞–ø–∏—Ç–∞–π—Ç–µ –≤ –∫–ª–∞—Å—É, —è–∫–∏–º–∏ –º–æ–≤–∞–º–∏ –≤–æ–Ω–∏ –º–∞—é—Ç—å –¥–æ—Å–≤—ñ–¥. –ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ "
"–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–¥—ñ–ª–∏—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó Rust:"

#: src/why-rust.md:14
msgid ""
"Experience with C or C++: Rust eliminates a whole class of _runtime errors_ "
"via the borrow checker. You get performance like in C and C++, but you don't "
"have the memory unsafety issues. In addition, you get a modern language with "
"constructs like pattern matching and built-in dependency management."
msgstr ""
"–î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∑ C –∞–±–æ C++: Rust —É—Å—É–≤–∞—î —Ü—ñ–ª–∏–π –∫–ª–∞—Å _–ø–æ–º–∏–ª–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è_ –∑–∞ "
"–¥–æ–ø–æ–º–æ–≥–æ—é –∑–∞—Å–æ–±—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ø–æ–∑–∏—á–µ–Ω—å. –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, —è–∫ —É C —ñ "
"C++, –∞–ª–µ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–±–ª–µ–º —ñ–∑ –Ω–µ–±–µ–∑–ø–µ–∫–æ—é –ø–∞–º‚Äô—è—Ç—ñ. –ö—Ä—ñ–º —Ç–æ–≥–æ, –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ "
"—Å—É—á–∞—Å–Ω—É –º–æ–≤—É –∑ —Ç–∞–∫–∏–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏, —è–∫ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ —ñ –≤–±—É–¥–æ–≤–∞–Ω–µ "
"–∫–µ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏."

#: src/why-rust.md:19
msgid ""
"Experience with Java, Go, Python, JavaScript...: You get the same memory "
"safety as in those languages, plus a similar high-level language feeling. In "
"addition you get fast and predictable performance like C and C++ (no garbage "
"collector) as well as access to low-level hardware (should you need it)"
msgstr ""
"–î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∑ Java, Go, Python, JavaScript...: –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ —Ç–∞–∫—É —Å–∞–º—É "
"–±–µ–∑–ø–µ–∫—É –ø–∞–º‚Äô—è—Ç—ñ, —â–æ –π —É —Ü–∏—Ö –º–æ–≤–∞—Ö, –∞ —Ç–∞–∫–æ–∂ –ø–æ–¥—ñ–±–Ω–µ –≤—ñ–¥—á—É—Ç—Ç—è –º–æ–≤–∏ –≤–∏—Å–æ–∫–æ–≥–æ "
"—Ä—ñ–≤–Ω—è. –ö—Ä—ñ–º —Ç–æ–≥–æ, –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ —à–≤–∏–¥–∫—É —Ç–∞ –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, —è–∫-–æ—Ç "
"C —ñ C++ (–±–µ–∑ –∑–±–∏—Ä–∞—á–∞ —Å–º—ñ—Ç—Ç—è), –∞ —Ç–∞–∫–æ–∂ –¥–æ—Å—Ç—É–ø –¥–æ –∞–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è "
"–Ω–∏–∑—å–∫–æ–≥–æ —Ä—ñ–≤–Ω—è (—è–∫—â–æ –≤–æ–Ω–æ –≤–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è)"

#: src/why-rust/compile-time.md:3
msgid "Static memory management at compile time:"
msgstr "–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ—é –ø–∞–º'—è—Ç—Ç—é –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó:"

#: src/why-rust/compile-time.md:5
msgid "No uninitialized variables."
msgstr "–ù–µ–º–∞—î –Ω–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö."

#: src/why-rust/compile-time.md:6
msgid "No memory leaks (_mostly_, see notes)."
msgstr "–ù–µ–º–∞—î –≤–∏—Ç–æ–∫—ñ–≤ –ø–∞–º'—è—Ç—ñ (_–ø–µ—Ä–µ–≤–∞–∂–Ω–æ_, –¥–∏–≤. –ø—Ä–∏–º—ñ—Ç–∫–∏)."

#: src/why-rust/compile-time.md:7
msgid "No double-frees."
msgstr "–ù—ñ—è–∫–∏—Ö –ø–æ–¥–≤—ñ–π–Ω–∏—Ö –∑–≤—ñ–ª—å–Ω–µ–Ω—å."

#: src/why-rust/compile-time.md:8
msgid "No use-after-free."
msgstr "–ë–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—ñ—Å–ª—è –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è."

#: src/why-rust/compile-time.md:9
msgid "No `NULL` pointers."
msgstr "–ù–µ–º–∞—î –≤–∫–∞–∑—ñ–≤–Ω–∏–∫—ñ–≤ `NULL`."

#: src/why-rust/compile-time.md:10
msgid "No forgotten locked mutexes."
msgstr "–ù–µ–º–∞—î –∑–∞–±—É—Ç–∏—Ö –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –º'—é—Ç–µ–∫—Å—ñ–≤."

#: src/why-rust/compile-time.md:11
msgid "No data races between threads."
msgstr "–ù–µ–º–∞—î –ø–µ—Ä–µ–≥–æ–Ω—ñ–≤ –¥–∞–Ω–∏—Ö –º—ñ–∂ –ø–æ—Ç–æ–∫–∞–º–∏."

#: src/why-rust/compile-time.md:12
msgid "No iterator invalidation."
msgstr "–ù–µ–º–∞—î –Ω–µ–¥—ñ–π—Å–Ω–æ—Å—Ç—ñ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞."

#: src/why-rust/compile-time.md:16
msgid ""
"It is possible to produce memory leaks in (safe) Rust. Some examples are:"
msgstr "–£ (–±–µ–∑–ø–µ—á–Ω–æ–º—É) Rust –º–æ–∂–ª–∏–≤—ñ –≤–∏—Ç–æ–∫–∏ –ø–∞–º‚Äô—è—Ç—ñ. –î–µ—è–∫—ñ –ø—Ä–∏–∫–ª–∞–¥–∏:"

#: src/why-rust/compile-time.md:19
msgid ""
"You can use [`Box::leak`](https://doc.rust-lang.org/std/boxed/struct.Box."
"html#method.leak) to leak a pointer. A use of this could be to get runtime-"
"initialized and runtime-sized static variables"
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ [`Box::leak`](https://doc.rust-lang.org/std/boxed/"
"struct.Box.html#method.leak) –¥–ª—è –≤–∏—Ç–æ–∫—É –ø–æ–∫–∞–∂—á–∏–∫–∞. –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ "
"–¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞ "
"—Ä–æ–∑–º—ñ—Ä–æ–º –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è"

#: src/why-rust/compile-time.md:21
msgid ""
"You can use [`std::mem::forget`](https://doc.rust-lang.org/std/mem/fn.forget."
"html) to make the compiler \"forget\" about a value (meaning the destructor "
"is never run)."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ [`std::mem::forget`](https://doc.rust-lang.org/std/"
"mem/fn.forget.html), —â–æ–± –∑–º—É—Å–∏—Ç–∏ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä ¬´–∑–∞–±—É—Ç–∏¬ª –ø—Ä–æ –∑–Ω–∞—á–µ–Ω–Ω—è (—Ç–æ–±—Ç–æ "
"–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω—ñ–∫–æ–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è)."

#: src/why-rust/compile-time.md:23
msgid ""
"You can also accidentally create a [reference cycle](https://doc.rust-lang."
"org/book/ch15-06-reference-cycles.html) with `Rc` or `Arc`."
msgstr ""
"–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤–∏–ø–∞–¥–∫–æ–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ [–¥–æ–≤—ñ–¥–∫–æ–≤–∏–π —Ü–∏–∫–ª](https://doc.rust-lang."
"org/book/ch15-06-reference-cycles.html) –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `Rc` –∞–±–æ `Arc`."

#: src/why-rust/compile-time.md:25
msgid ""
"In fact, some will consider infinitely populating a collection a memory leak "
"and Rust does not protect from those."
msgstr ""
"–§–∞–∫—Ç–∏—á–Ω–æ, –¥–µ—Ö—Ç–æ –≤–≤–∞–∂–∞—Ç–∏–º–µ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó –≤–∏—Ç–æ–∫–æ–º –ø–∞–º‚Äô—è—Ç—ñ, –∞ "
"Rust –≤—ñ–¥ —Ü—å–æ–≥–æ –Ω–µ –∑–∞—Ö–∏—â–∞—î."

#: src/why-rust/compile-time.md:28
msgid ""
"For the purpose of this course, \"No memory leaks\" should be understood as "
"\"Pretty much no _accidental_ memory leaks\"."
msgstr ""
"–î–ª—è —Ü—ñ–ª–µ–π —Ü—å–æ–≥–æ –∫—É—Ä—Å—É ¬´–ù–µ–º–∞—î –≤–∏—Ç–æ–∫—ñ–≤ –ø–∞–º‚Äô—è—Ç—ñ¬ª —Å–ª—ñ–¥ —Ä–æ–∑—É–º—ñ—Ç–∏ —è–∫ ¬´–ü—Ä–∞–∫—Ç–∏—á–Ω–æ "
"–Ω–µ–º–∞—î _–≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö_ –≤–∏—Ç–æ–∫—ñ–≤ –ø–∞–º‚Äô—è—Ç—ñ¬ª."

#: src/why-rust/runtime.md:3
msgid "No undefined behavior at runtime:"
msgstr "–ù–µ–º–∞—î –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è:"

#: src/why-rust/runtime.md:5
msgid "Array access is bounds checked."
msgstr "–î–æ—Å—Ç—É–ø –¥–æ –º–∞—Å–∏–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –Ω–∞ –º–µ–∂—ñ."

#: src/why-rust/runtime.md:6
msgid "Integer overflow is defined (panic or wrap-around)."
msgstr "–í–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è (–ø–∞–Ω—ñ–∫–∞ –∞–±–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è)."

#: src/why-rust/runtime.md:12
msgid ""
"Integer overflow is defined via the [`overflow-checks`](https://doc.rust-"
"lang.org/rustc/codegen-options/index.html#overflow-checks) compile-time "
"flag. If enabled, the program will panic (a controlled crash of the "
"program), otherwise you get wrap-around semantics. By default, you get "
"panics in debug mode (`cargo build`) and wrap-around in release mode (`cargo "
"build --release`)."
msgstr ""
"–¶—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–µ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ–∑–Ω–∞—á–∫–∏ [`overflow-"
"checks`](https://doc.rust-lang.org/rustc/codegen-options/index.html#overflow-"
"checks) –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó. –Ø–∫—â–æ –≤–≤—ñ–º–∫–Ω—É—Ç–∏, –ø—Ä–æ–≥—Ä–∞–º–∞ –≤–∏–Ω–∏–∫–Ω–µ –ø–∞–Ω—ñ–∫–∞ "
"(–∫–æ–Ω—Ç—Ä–æ–ª—å–æ–≤–∞–Ω–∏–π –∑–±—ñ–π –ø—Ä–æ–≥—Ä–∞–º–∏), —ñ–Ω–∞–∫—à–µ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–µ–º–∞–Ω—Ç–∏–∫—É –æ–±–µ—Ä—Ç–∞–Ω–Ω—è. –ó–∞ "
"–∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–∞–Ω—ñ–∫—É –≤ —Ä–µ–∂–∏–º—ñ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è (`cargo build`) —ñ "
"–æ–±–µ—Ä—Ç–∞–Ω–Ω—è –≤ —Ä–µ–∂–∏–º—ñ –≤–∏–ø—É—Å–∫—É (`cargo build --release`)."

#: src/why-rust/runtime.md:18
msgid ""
"Bounds checking cannot be disabled with a compiler flag. It can also not be "
"disabled directly with the `unsafe` keyword. However, `unsafe` allows you to "
"call functions such as `slice::get_unchecked` which does not do bounds "
"checking."
msgstr ""
"–ü–µ—Ä–µ–≤—ñ—Ä–∫—É –º–µ–∂ –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ–∑–Ω–∞—á–∫–∏ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞. –ô–æ–≥–æ "
"—Ç–∞–∫–æ–∂ –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ `unsafe`. "
"–û–¥–Ω–∞–∫ `unsafe` –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ç–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫ `slice::get_unchecked`, "
"—è–∫–∞ –Ω–µ –≤–∏–∫–æ–Ω—É—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –º–µ–∂."

#: src/why-rust/modern.md:3
msgid "Rust is built with all the experience gained in the last decades."
msgstr "Rust –±—É–¥—É—î—Ç—å—Å—è –∑ —É—Å—ñ–º –¥–æ—Å–≤—ñ–¥–æ–º, –Ω–∞–±—É—Ç–∏–º –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–µ—Å—è—Ç–∏–ª—ñ—Ç—Ç—è."

#: src/why-rust/modern.md:5
msgid "Language Features"
msgstr "–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ –º–æ–≤–∏"

#: src/why-rust/modern.md:7
msgid "Enums and pattern matching."
msgstr "–ü–µ—Ä–µ–ª—ñ–∫–∏ —Ç–∞ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤."

#: src/why-rust/modern.md:8
msgid "Generics."
msgstr "–î–∂–µ–Ω–µ—Ä–∏–∫–∏."

#: src/why-rust/modern.md:9
msgid "No overhead FFI."
msgstr "–ë–µ–∑ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö FFI."

#: src/why-rust/modern.md:10
msgid "Zero-cost abstractions."
msgstr "–ê–±—Å—Ç—Ä–∞–∫—Ü—ñ—ó –±–µ–∑ –≤–∏—Ç—Ä–∞—Ç."

#: src/why-rust/modern.md:12
msgid "Tooling"
msgstr "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"

#: src/why-rust/modern.md:14
msgid "Great compiler errors."
msgstr "–í–µ–ª–∏–∫—ñ –ø–æ–º–∏–ª–∫–∏ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞."

#: src/why-rust/modern.md:15
msgid "Built-in dependency manager."
msgstr "–í–±—É–¥–æ–≤–∞–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π."

#: src/why-rust/modern.md:16
msgid "Built-in support for testing."
msgstr "–í–±—É–¥–æ–≤–∞–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è."

#: src/why-rust/modern.md:17
msgid "Excellent Language Server Protocol support."
msgstr "–ß—É–¥–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –º–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞."

#: src/why-rust/modern.md:23
msgid ""
"Zero-cost abstractions, similar to C++, means that you don't have to 'pay' "
"for higher-level programming constructs with memory or CPU. For example, "
"writing a loop using `for` should result in roughly the same low level "
"instructions as using the `.iter().fold()` construct."
msgstr ""
"–ê–±—Å—Ç—Ä–∞–∫—Ü—ñ—ó –∑ –Ω—É–ª—å–æ–≤–æ—é –≤–∞—Ä—Ç—ñ—Å—Ç—é, –ø–æ–¥—ñ–±–Ω—ñ –¥–æ C++, –æ–∑–Ω–∞—á–∞—é—Ç—å, —â–æ –≤–∞–º –Ω–µ "
"–ø–æ—Ç—Ä—ñ–±–Ω–æ ¬´–ø–ª–∞—Ç–∏—Ç–∏¬ª –∑–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
"–ø–∞–º‚Äô—è—Ç—ñ —á–∏ –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ü–∏–∫–ª—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `for` –º–∞—î "
"–ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –ø—Ä–∏–±–ª–∏–∑–Ω–æ —Ç–∏—Ö —Å–∞–º–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–∏–∑—å–∫–æ–≥–æ —Ä—ñ–≤–Ω—è, —â–æ –π "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó `.iter().fold()`."

#: src/why-rust/modern.md:28
msgid ""
"It may be worth mentioning that Rust enums are 'Algebraic Data Types', also "
"known as 'sum types', which allow the type system to express things like "
"`Option<T>` and `Result<T, E>`."
msgstr ""
"–ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –∑–≥–∞–¥–∞—Ç–∏, —â–æ –ø–µ—Ä–µ–ª—ñ–∫–∏ Rust ‚Äî —Ü–µ ¬´–∞–ª–≥–µ–±—Ä–∞—ó—á–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö¬ª, "
"—Ç–∞–∫–æ–∂ –≤—ñ–¥–æ–º—ñ —è–∫ ¬´—Ç–∏–ø–∏ —Å—É–º¬ª, —è–∫—ñ –¥–æ–∑–≤–æ–ª—è—é—Ç—å —Å–∏—Å—Ç–µ–º—ñ —Ç–∏–ø—ñ–≤ –≤–∏—Ä–∞–∂–∞—Ç–∏ —Ç–∞–∫—ñ —Ä–µ—á—ñ, "
"—è–∫ ¬´Option<T>¬ª —ñ ¬´Result<T, E>¬ª."

#: src/why-rust/modern.md:32
msgid ""
"Remind people to read the errors --- many developers have gotten used to "
"ignore lengthy compiler output. The Rust compiler is significantly more "
"talkative than other compilers. It will often provide you with _actionable_ "
"feedback, ready to copy-paste into your code."
msgstr ""
"–ù–∞–≥–∞–¥–∞–π—Ç–µ –ª—é–¥—è–º –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏ --- –±–∞–≥–∞—Ç–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ –∑–≤–∏–∫–ª–∏ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ "
"–¥–æ–≤–≥–∏–π –≤–∏—Ö—ñ–¥ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞. –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä Rust –∑–Ω–∞—á–Ω–æ –±–∞–ª–∞–∫—É—á—ñ—à–∏–π, –Ω—ñ–∂ —ñ–Ω—à—ñ "
"–∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∏. –í—ñ–Ω —á–∞—Å—Ç–æ –Ω–∞–¥–∞—î –≤–∞–º _–¥—ñ—î–≤—ñ_ –≤—ñ–¥–≥—É–∫–∏, –≥–æ—Ç–æ–≤—ñ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–∞ "
"–≤—Å—Ç–∞–≤–∏—Ç–∏ —É –≤–∞—à –∫–æ–¥."

#: src/why-rust/modern.md:37
msgid ""
"The Rust standard library is small compared to languages like Java, Python, "
"and Go. Rust does not come with several things you might consider standard "
"and essential:"
msgstr ""
"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Rust –Ω–µ–≤–µ–ª–∏–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ —Ç–∞–∫–∏–º–∏ –º–æ–≤–∞–º–∏, —è–∫ Java, "
"Python —ñ Go. –£ Rust –Ω–µ–º–∞—î –∫—ñ–ª—å–∫–æ—Ö —Ä–µ—á–µ–π, —è–∫—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–≤–∞–∂–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º–∏ "
"—Ç–∞ –≤–∞–∂–ª–∏–≤–∏–º–∏:"

#: src/why-rust/modern.md:41
msgid "a random number generator, but see [rand](https://docs.rs/rand/)."
msgstr "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª, –∞–ª–µ –¥–∏–≤. [rand](https://docs.rs/rand/)."

#: src/why-rust/modern.md:42
msgid "support for SSL or TLS, but see [rusttls](https://docs.rs/rustls/)."
msgstr "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ SSL –∞–±–æ TLS, –∞–ª–µ –¥–∏–≤. [rusttls](https://docs.rs/rustls/)."

#: src/why-rust/modern.md:43
msgid "support for JSON, but see [serde_json](https://docs.rs/serde_json/)."
msgstr "–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ JSON, –∞–ª–µ –¥–∏–≤. [serde_json](https://docs.rs/serde_json/)."

#: src/why-rust/modern.md:45
msgid ""
"The reasoning behind this is that functionality in the standard library "
"cannot go away, so it has to be very stable. For the examples above, the "
"Rust community is still working on finding the best solution --- and perhaps "
"there isn't a single \"best solution\" for some of these things."
msgstr ""
"–ü—Ä–∏—á–∏–Ω–æ—é —Ü—å–æ–≥–æ —î —Ç–µ, —â–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –Ω–µ –º–æ–∂–µ "
"–∑–Ω–∏–∫–Ω—É—Ç–∏, —Ç–æ–º—É –≤–æ–Ω–∞ –º–∞—î –±—É—Ç–∏ –¥—É–∂–µ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—é. –î–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—Ö –≤–∏—â–µ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ "
"—Å–ø—ñ–ª—å–Ω–æ—Ç–∞ Rust –≤—Å–µ —â–µ –ø—Ä–∞—Ü—é—î –Ω–∞–¥ –ø–æ—à—É–∫–æ–º –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è --- —ñ, –º–æ–∂–ª–∏–≤–æ, "
"–¥–ª—è –¥–µ—è–∫–∏—Ö —ñ–∑ —Ü–∏—Ö —Ä–µ—á–µ–π –Ω–µ —ñ—Å–Ω—É—î —î–¥–∏–Ω–æ–≥–æ \"–Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è\"."

#: src/why-rust/modern.md:50
msgid ""
"Rust comes with a built-in package manager in the form of Cargo and this "
"makes it trivial to download and compile third-party crates. A consequence "
"of this is that the standard library can be smaller."
msgstr ""
"Rust –ø–æ—Å—Ç–∞—á–∞—î—Ç—å—Å—è –∑ –≤–±—É–¥–æ–≤–∞–Ω–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–∞–∫—É–Ω–∫—ñ–≤ —É —Ñ–æ—Ä–º—ñ Cargo, —ñ —Ü–µ "
"—Å–ø—Ä–æ—â—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—é —è—â–∏–∫—ñ–≤ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤. –ù–∞—Å–ª—ñ–¥–∫–æ–º "
"—Ü—å–æ–≥–æ —î —Ç–µ, —â–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–æ—é."

#: src/why-rust/modern.md:54
msgid ""
"Discovering good third-party crates can be a problem. Sites like <https://"
"lib.rs/> help with this by letting you compare health metrics for crates to "
"find a good and trusted one."
msgstr ""
"–í–∏—è–≤–ª–µ–Ω–Ω—è —Ö–æ—Ä–æ—à–∏—Ö —è—â–∏–∫—ñ–≤ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤ –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º–æ—é. –¢–∞–∫—ñ "
"—Å–∞–π—Ç–∏, —è–∫ <https://lib.rs/>, –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å —É —Ü—å–æ–º—É, –¥–æ–∑–≤–æ–ª—è—é—á–∏ –ø–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ "
"–ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑–¥–æ—Ä–æ–≤‚Äô—è —è—â–∏–∫—ñ–≤, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–∏–π —ñ –Ω–∞–¥—ñ–π–Ω–∏–π."

#: src/why-rust/modern.md:58
msgid ""
"[rust-analyzer](https://rust-analyzer.github.io/) is a well supported LSP "
"implementation used in major IDEs and text editors."
msgstr ""
"[rust-analyzer](https://rust-analyzer.github.io/) ‚Äî —Ü–µ –¥–æ–±—Ä–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ "
"—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è LSP, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–∏—Ö IDE —ñ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö."

#: src/basic-syntax.md:3
msgid "Much of the Rust syntax will be familiar to you from C, C++ or Java:"
msgstr "–ó–Ω–∞—á–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É Rust –±—É–¥–µ –≤–∞–º –∑–Ω–∞–π–æ–º–∞ –∑ C, C++ –∞–±–æ Java:"

#: src/basic-syntax.md:5
msgid "Blocks and scopes are delimited by curly braces."
msgstr "–ë–ª–æ–∫–∏ —Ç–∞ –æ–±–ª–∞—Å—Ç—ñ –ø–æ–¥—ñ–ª—è—é—Ç—å—Å—è —Ñ—ñ–≥—É—Ä–Ω–∏–º–∏ –¥—É–∂–∫–∞–º–∏."

#: src/basic-syntax.md:6
msgid ""
"Line comments are started with `//`, block comments are delimited by `/* ... "
"*/`."
msgstr ""
"–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ —Ä—è–¥–∫—ñ–≤ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ `//`, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –±–ª–æ–∫—ñ–≤ –≤—ñ–¥–æ–∫—Ä–µ–º–ª—é—é—Ç—å—Å—è "
"`/* ... */`."

#: src/basic-syntax.md:8
msgid "Keywords like `if` and `while` work the same."
msgstr "–¢–∞–∫—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞, —è–∫ ¬´—è–∫—â–æ¬ª —Ç–∞ ¬´–ø–æ–∫–∏¬ª –ø—Ä–∞—Ü—é—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤–æ."

#: src/basic-syntax.md:9
msgid "Variable assignment is done with `=`, comparison is done with `==`."
msgstr ""
"–ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `=`, –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è ‚Äî –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
"`==`."

#: src/basic-syntax/scalar-types.md:3 src/basic-syntax/compound-types.md:3
#: src/exercises/day-3/safe-ffi-wrapper.md:16
msgid "Types"
msgstr "–¢–∏–ø–∏"

#: src/basic-syntax/scalar-types.md:3 src/basic-syntax/compound-types.md:3
msgid "Literals"
msgstr "–õ—ñ—Ç–µ—Ä–∞–ª–∏"

#: src/basic-syntax/scalar-types.md:5
msgid "Signed integers"
msgstr "–¶—ñ–ª—ñ —á–∏—Å–ª–∞ –∑—ñ –∑–Ω–∞–∫–æ–º"

#: src/basic-syntax/scalar-types.md:5
msgid "`i8`, `i16`, `i32`, `i64`, `i128`, `isize`"
msgstr "`i8`, `i16`, `i32`, `i64`, `i128`, `isize`"

#: src/basic-syntax/scalar-types.md:5
msgid "`-10`, `0`, `1_000`, `123_i64`"
msgstr "\"-10\", \"0\", \"1_000\", \"123_i64\""

#: src/basic-syntax/scalar-types.md:6
msgid "Unsigned integers"
msgstr "–ë–µ–∑–∑–Ω–∞–∫–æ–≤—ñ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞"

#: src/basic-syntax/scalar-types.md:6
msgid "`u8`, `u16`, `u32`, `u64`, `u128`, `usize`"
msgstr "`u8`, `u16`, `u32`, `u64`, `u128`, `usize`"

#: src/basic-syntax/scalar-types.md:6
msgid "`0`, `123`, `10_u16`"
msgstr "`0`, `123`, `10_u16`"

#: src/basic-syntax/scalar-types.md:7
msgid "Floating point numbers"
msgstr "–ß–∏—Å–ª–∞ –∑ –ø–ª–∞–≤–∞—é—á–æ—é –∫–æ–º–æ—é"

#: src/basic-syntax/scalar-types.md:7
msgid "`f32`, `f64`"
msgstr "`f32`, `f64`"

#: src/basic-syntax/scalar-types.md:7
msgid "`3.14`, `-10.0e20`, `2_f32`"
msgstr "`3.14`, `-10.0e20`, `2_f32`"

#: src/basic-syntax/scalar-types.md:8
msgid "Strings"
msgstr "—Ä—è–¥–∫–∏"

#: src/basic-syntax/scalar-types.md:8
msgid "`&str`"
msgstr "`&str`"

#: src/basic-syntax/scalar-types.md:8
msgid "`\"foo\"`, `\"two\\nlines\"`"
msgstr "`\"foo\"`, `\"–¥–≤–∞\\n—Ä—è–¥–∫–∏\"`"

#: src/basic-syntax/scalar-types.md:9
msgid "Unicode scalar values"
msgstr "–°–∫–∞–ª—è—Ä–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è Unicode"

#: src/basic-syntax/scalar-types.md:9
msgid "`char`"
msgstr "`char`"

#: src/basic-syntax/scalar-types.md:9
msgid "`'a'`, `'Œ±'`, `'‚àû'`"
msgstr "`'a'`, `'Œ±'`, `'‚àû'`"

#: src/basic-syntax/scalar-types.md:10
msgid "Booleans"
msgstr "–õ–æ–≥—ñ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è"

#: src/basic-syntax/scalar-types.md:10
msgid "`bool`"
msgstr "`bool`"

#: src/basic-syntax/scalar-types.md:10
msgid "`true`, `false`"
msgstr "`true`, `false`"

#: src/basic-syntax/scalar-types.md:12
msgid "The types have widths as follows:"
msgstr "–¢–∏–ø–∏ –º–∞—é—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —à–∏—Ä–∏–Ω—É:"

#: src/basic-syntax/scalar-types.md:14
msgid "`iN`, `uN`, and `fN` are _N_ bits wide,"
msgstr "`iN`, `uN` —ñ `fN` –º–∞—é—Ç—å —à–∏—Ä–∏–Ω—É _N_ –±—ñ—Ç,"

#: src/basic-syntax/scalar-types.md:15
msgid "`isize` and `usize` are the width of a pointer,"
msgstr "`isize` —ñ `usize` ‚Äì —Ü–µ —à–∏—Ä–∏–Ω–∞ –ø–æ–∫–∞–∂—á–∏–∫–∞,"

#: src/basic-syntax/scalar-types.md:16
msgid "`char` is 32 bits wide,"
msgstr "`char` –º–∞—î —à–∏—Ä–∏–Ω—É 32 –±—ñ—Ç–∏,"

#: src/basic-syntax/scalar-types.md:17
msgid "`bool` is 8 bits wide."
msgstr "`bool` –º–∞—î —à–∏—Ä–∏–Ω—É 8 –±—ñ—Ç."

#: src/basic-syntax/scalar-types.md:21
msgid "There are a few syntaxes which are not shown above:"
msgstr "–Ñ –∫—ñ–ª—å–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—ñ–≤, —è–∫—ñ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤–∏—â–µ:"

#: src/basic-syntax/scalar-types.md:23
msgid ""
"Raw strings allow you to create a `&str` value with escapes disabled: "
"`r\"\\n\" == \"\\\\n\"`. You can embed double-quotes by using an equal "
"amount of `#` on either side of the quotes:"
msgstr ""
"–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ —Ä—è–¥–∫–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è `&str` –∑ –≤–∏–º–∫–Ω–µ–Ω–∏–º–∏ "
"–µ–∫—Ä–∞–Ω–∞–º–∏: `r\"\\n\" == \"\\\\n\"`. –í–∏ –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç–∏ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏, "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –æ–¥–Ω–∞–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å `#` –∑ –æ–±–æ—Ö –±–æ–∫—ñ–≤ –ª–∞–ø–æ–∫:"

#: src/basic-syntax/scalar-types.md:27
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    println!(r#\"<a href=\"link.html\">link</a>\"#);\n"
"    println!(\"<a href=\\\"link.html\\\">link</a>\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/scalar-types.md:34
msgid "Byte strings allow you to create a `&[u8]` value directly:"
msgstr "–†—è–¥–∫–∏ –±–∞–π—Ç—ñ–≤ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è `&[u8]`:"

#: src/basic-syntax/scalar-types.md:36
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    println!(\"{:?}\", b\"abc\");\n"
"    println!(\"{:?}\", &[97, 98, 99]);\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/scalar-types.md:43
msgid ""
"All underscores in numbers can be left out, they are for legibility only. So "
"`1_000` can be written as `1000` (or `10_00`), and `123_i64` can be written "
"as `123i64`."
msgstr ""
"–£—Å—ñ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –≤ —Ü–∏—Ñ—Ä–∞—Ö –º–æ–∂–Ω–∞ –æ–ø—É—Å–∫–∞—Ç–∏, –≤–æ–Ω–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –ª–∏—à–µ –¥–ª—è "
"—Ä–æ–∑–±—ñ—Ä–ª–∏–≤–æ—Å—Ç—ñ. –û—Ç–∂–µ, `1_000` –º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ —è–∫ `1000` (–∞–±–æ `10_00`), –∞ "
"`123_i64` –º–æ–∂–Ω–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ —è–∫ `123i64`."

#: src/basic-syntax/compound-types.md:5
msgid "Arrays"
msgstr "–ú–∞—Å–∏–≤–∏"

#: src/basic-syntax/compound-types.md:5
msgid "`[T; N]`"
msgstr ""

#: src/basic-syntax/compound-types.md:5
msgid "`[20, 30, 40]`, `[0; 3]`"
msgstr ""

#: src/basic-syntax/compound-types.md:6
msgid "Tuples"
msgstr "–ö–æ—Ä—Ç–µ–∂—ñ"

#: src/basic-syntax/compound-types.md:6
msgid "`()`, `(T,)`, `(T1, T2)`, ..."
msgstr "\"()\", \"(T,)\", \"(T1, T2)\", ..."

#: src/basic-syntax/compound-types.md:6
msgid "`()`, `('x',)`, `('x', 1.2)`, ..."
msgstr "`()`, `('x',)`, `('x', 1.2)`, ..."

#: src/basic-syntax/compound-types.md:8
msgid "Array assignment and access:"
msgstr "–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å–∏–≤—É —Ç–∞ –¥–æ—Å—Ç—É–ø:"

#: src/basic-syntax/compound-types.md:10
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut a: [i8; 10] = [42; 10];\n"
"    a[5] = 0;\n"
"    println!(\"a: {:?}\", a);\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/compound-types.md:18
msgid "Tuple assignment and access:"
msgstr "–ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è –∫–æ—Ä—Ç–µ–∂—É —Ç–∞ –¥–æ—Å—Ç—É–ø:"

#: src/basic-syntax/compound-types.md:20
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let t: (i8, bool) = (7, true);\n"
"    println!(\"1st index: {}\", t.0);\n"
"    println!(\"2nd index: {}\", t.1);\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/compound-types.md:32
msgid "Arrays:"
msgstr "–ú–∞—Å–∏–≤–∏:"

#: src/basic-syntax/compound-types.md:34
msgid ""
"A value of the array type `[T; N]` holds `N` (a compile-time constant) "
"elements of the same type `T`. Note that the length of the array is _part of "
"its type_, which means that `[u8; 3]` and `[u8; 4]` are considered two "
"different types."
msgstr ""

#: src/basic-syntax/compound-types.md:38
msgid "We can use literals to assign values to arrays."
msgstr "–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª—ñ—Ç–µ—Ä–∞–ª–∏ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –º–∞—Å–∏–≤–∞–º."

#: src/basic-syntax/compound-types.md:40
msgid ""
"In the main function, the print statement asks for the debug implementation "
"with the `?` format parameter: `{}` gives the default output, `{:?}` gives "
"the debug output. We could also have used `{a}` and `{a:?}` without "
"specifying the value after the format string."
msgstr ""
"–£ –≥–æ–ª–æ–≤–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó –æ–ø–µ—Ä–∞—Ç–æ—Ä print –∑–∞–ø–∏—Ç—É—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –∑–∞ "
"–¥–æ–ø–æ–º–æ–≥–æ—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ–æ—Ä–º–∞—Ç—É `?`: `{}` –¥–∞—î –≤–∏—Ö—ñ–¥ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, `{:?}` –¥–∞—î "
"–≤–∏—Ö—ñ–¥ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è. –ú–∏ —Ç–∞–∫–æ–∂ –º–æ–≥–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `{a}` —ñ `{a:?}` –±–µ–∑ "
"–≤–∫–∞–∑—ñ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä—è–¥–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É."

#: src/basic-syntax/compound-types.md:45
msgid ""
"Adding `#`, eg `{a:#?}`, invokes a \"pretty printing\" format, which can be "
"easier to read."
msgstr ""
"–î–æ–¥–∞–≤–∞–Ω–Ω—è `#`, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `{a:#?}`, –≤–∏–∫–ª–∏–∫–∞—î —Ñ–æ—Ä–º–∞—Ç \"–≥–∞—Ä–Ω–æ–≥–æ –¥—Ä—É–∫—É\", —è–∫–∏–π "
"–º–æ–∂–µ –±—É—Ç–∏ –ª–µ–≥—à–∏–º –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è."

#: src/basic-syntax/compound-types.md:47
msgid "Tuples:"
msgstr "–ö–æ—Ä—Ç–µ–∂—ñ:"

#: src/basic-syntax/compound-types.md:49
msgid "Like arrays, tuples have a fixed length."
msgstr "–Ø–∫ —ñ –º–∞—Å–∏–≤–∏, –∫–æ—Ä—Ç–µ–∂—ñ –º–∞—é—Ç—å —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É –¥–æ–≤–∂–∏–Ω—É."

#: src/basic-syntax/compound-types.md:51
msgid "Tuples group together values of different types into a compound type."
msgstr "–ö–æ—Ä—Ç–µ–∂—ñ –≥—Ä—É–ø—É—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —É —Å–∫–ª–∞–¥–µ–Ω–∏–π —Ç–∏–ø."

#: src/basic-syntax/compound-types.md:53
msgid ""
"Fields of a tuple can be accessed by the period and the index of the value, "
"e.g. `t.0`, `t.1`."
msgstr ""
"–î–æ—Å—Ç—É–ø –¥–æ –ø–æ–ª—ñ–≤ –∫–æ—Ä—Ç–µ–∂—É –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞ –∫—Ä–∞–ø–∫–æ—é —Ç–∞ —ñ–Ω–¥–µ–∫—Å–æ–º –∑–Ω–∞—á–µ–Ω–Ω—è, "
"–Ω–∞–ø—Ä–∏–∫–ª–∞–¥. `t.0`, `t.1`."

#: src/basic-syntax/compound-types.md:55
msgid ""
"The empty tuple `()` is also known as the \"unit type\". It is both a type, "
"and the only valid value of that type - that is to say both the type and its "
"value are expressed as `()`. It is used to indicate, for example, that a "
"function or expression has no return value, as we'll see in a future slide. "
msgstr ""
"–ü–æ—Ä–æ–∂–Ω—ñ–π –∫–æ—Ä—Ç–µ–∂ `()` —Ç–∞–∫–æ–∂ –≤—ñ–¥–æ–º–∏–π —è–∫ \"—Ç–∏–ø –æ–¥–∏–Ω–∏—Ü—ñ\". –¶–µ —ñ —Ç–∏–ø, —ñ —î–¥–∏–Ω–µ "
"–¥—ñ–π—Å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—å–æ–≥–æ —Ç–∏–ø—É, —Ç–æ–±—Ç–æ —ñ —Ç–∏–ø, —ñ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏—Ä–∞–∂–∞—é—Ç—å—Å—è —è–∫ "
"`()`. –í—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —â–æ–± –≤–∫–∞–∑–∞—Ç–∏, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –∞–±–æ –≤–∏—Ä–∞–∑ –Ω–µ "
"–º–∞—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è, —è–∫ –º–∏ –ø–æ–±–∞—á–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Å–ª–∞–π–¥—ñ."

#: src/basic-syntax/compound-types.md:59
msgid ""
"You can think of it as `void` that can be familiar to you from other  "
"programming languages."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –¥—É–º–∞—Ç–∏ –ø—Ä–æ —Ü–µ —è–∫ –ø—Ä–æ ¬´–ø—É—Å—Ç–æ—Ç—É¬ª, —è–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –∑–Ω–∞–π–æ–º–∞ –≤–∞–º –∑ —ñ–Ω—à–∏—Ö "
"–º–æ–≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è."

#: src/basic-syntax/references.md:3
msgid "Like C++, Rust has references:"
msgstr "–Ø–∫ —ñ C++, Rust –º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è:"

#: src/basic-syntax/references.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut x: i32 = 10;\n"
"    let ref_x: &mut i32 = &mut x;\n"
"    *ref_x = 20;\n"
"    println!(\"x: {x}\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/references.md:14
msgid "Some notes:"
msgstr "–î–µ—è–∫—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏:"

#: src/basic-syntax/references.md:16
msgid ""
"We must dereference `ref_x` when assigning to it, similar to C and C++ "
"pointers."
msgstr ""
"–ú–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Ä–æ–∑—ñ–º–µ–Ω—É–≤–∞—Ç–∏ ref_x –ø—ñ–¥ —á–∞—Å –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è, –ø–æ–¥—ñ–±–Ω–æ –¥–æ –ø–æ–∫–∞–∂—á–∏–∫—ñ–≤ C —ñ "
"C++."

#: src/basic-syntax/references.md:17
msgid ""
"Rust will auto-dereference in some cases, in particular when invoking "
"methods (try `ref_x.count_ones()`)."
msgstr ""
"–£ –¥–µ—è–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö Rust –≤–∏–∫–æ–Ω—É—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑—ñ–º–µ–Ω—É–≤–∞–Ω–Ω—è, –∑–æ–∫—Ä–µ–º–∞ –ø—ñ–¥ —á–∞—Å "
"–≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—ñ–≤ (—Å–ø—Ä–æ–±—É–π—Ç–µ ref_x.count_ones())."

#: src/basic-syntax/references.md:19
msgid ""
"References that are declared as `mut` can be bound to different values over "
"their lifetime."
msgstr ""
"–ü–æ—Å–∏–ª–∞–Ω–Ω—è, –æ–≥–æ–ª–æ—à–µ–Ω—ñ —è–∫ `mut`, –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ "
"–ø—Ä–æ—Ç—è–≥–æ–º —Å–≤–æ–≥–æ –∂–∏—Ç—Ç—è."

#: src/basic-syntax/references.md:25
msgid ""
"Be sure to note the difference between `let mut ref_x: &i32` and `let ref_x: "
"&mut i32`. The first one represents a mutable reference which can be bound "
"to different values, while the second represents a reference to a mutable "
"value."
msgstr ""
"–û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ `let mut ref_x: &i32` —ñ `let "
"ref_x: &mut i32`. –ü–µ—Ä—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –∑–º—ñ–Ω–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —è–∫–µ –º–æ–∂–µ –±—É—Ç–∏ "
"–ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–µ –¥–æ —Ä—ñ–∑–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å, —Ç–æ–¥—ñ —è–∫ –¥—Ä—É–≥–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–º—ñ–Ω–Ω–µ "
"–∑–Ω–∞—á–µ–Ω–Ω—è."

#: src/basic-syntax/references-dangling.md:3
msgid "Rust will statically forbid dangling references:"
msgstr "Rust —Å—Ç–∞—Ç–∏—á–Ω–æ –∑–∞–±–æ—Ä–æ–Ω—è—î –≤–∏—Å—è—á—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:"

#: src/basic-syntax/references-dangling.md:5
msgid ""
"```rust,editable,compile_fail\n"
"fn main() {\n"
"    let ref_x: &i32;\n"
"    {\n"
"        let x: i32 = 10;\n"
"        ref_x = &x;\n"
"    }\n"
"    println!(\"ref_x: {ref_x}\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/references-dangling.md:16
msgid "A reference is said to \"borrow\" the value it refers to."
msgstr "–ö–∞–∂—É—Ç—å, —â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è ¬´–ø–æ–∑–∏—á–∞—î¬ª –∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –≤–æ–Ω–æ –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è."

#: src/basic-syntax/references-dangling.md:17
msgid ""
"Rust is tracking the lifetimes of all references to ensure they live long "
"enough."
msgstr ""
"Rust –≤—ñ–¥—Å—Ç–µ–∂—É—î —Ç–µ—Ä–º—ñ–Ω–∏ –∂–∏—Ç—Ç—è –≤—Å—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å, —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –≤–æ–Ω–∏ –∂–∏–≤—É—Ç—å "
"–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–æ–≤–≥–æ."

#: src/basic-syntax/references-dangling.md:19
msgid "We will talk more about borrowing when we get to ownership."
msgstr "–ü—Ä–æ –∑–∞–ø–æ–∑–∏—á–µ–Ω–Ω—è –º–∏ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –±—ñ–ª—å—à–µ, –∫–æ–ª–∏ –¥—ñ–π–¥–µ–º–æ –¥–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ."

#: src/basic-syntax/slices.md:3
msgid "A slice gives you a view into a larger collection:"
msgstr "–§—Ä–∞–≥–º–µ–Ω—Ç –¥–∞—î –∑–º–æ–≥—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±—ñ–ª—å—à—É –∫–æ–ª–µ–∫—Ü—ñ—é:"

#: src/basic-syntax/slices.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut a: [i32; 6] = [10, 20, 30, 40, 50, 60];\n"
"    println!(\"a: {a:?}\");\n"
"\n"
"    let s: &[i32] = &a[2..4];\n"
"\n"
"    println!(\"s: {s:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/slices.md:16
msgid "Slices borrow data from the sliced type."
msgstr "–ó—Ä—ñ–∑–∏ –∑–∞–ø–æ–∑–∏—á—É—é—Ç—å –¥–∞–Ω—ñ –∑—ñ –∑—Ä—ñ–∑–∞–Ω–æ–≥–æ —Ç–∏–ø—É."

#: src/basic-syntax/slices.md:17
msgid "Question: What happens if you modify `a[3]` right before printing `s`?"
msgstr ""
"–ó–∞–ø–∏—Ç–∞–Ω–Ω—è: —â–æ —Å—Ç–∞–Ω–µ—Ç—å—Å—è, —è–∫—â–æ –∑–º—ñ–Ω–∏—Ç–∏ `a[3]` –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –ø–µ—Ä–µ–¥ –¥—Ä—É–∫–æ–º `s`?"

#: src/basic-syntax/slices.md:21
msgid ""
"We create a slice by borrowing `a` and specifying the starting and ending "
"indexes in brackets."
msgstr ""
"–ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç, –∑–∞–ø–æ–∑–∏—á—É—é—á–∏ `a` —Ç–∞ –≤–∫–∞–∑—É—é—á–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ –∫—ñ–Ω—Ü–µ–≤–∏–π "
"—ñ–Ω–¥–µ–∫—Å–∏ –≤ –¥—É–∂–∫–∞—Ö."

#: src/basic-syntax/slices.md:23
msgid ""
"If the slice starts at index 0, Rust‚Äôs range syntax allows us to drop the "
"starting index, meaning that `&a[0..a.len()]` and `&a[..a.len()]` are "
"identical."
msgstr ""
"–Ø–∫—â–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —ñ–Ω–¥–µ–∫—Å—É 0, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥—ñ–∞–ø–∞–∑–æ–Ω—É Rust –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º "
"–≤—ñ–¥–∫–∏–Ω—É—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å, —Ç–æ–±—Ç–æ `&a[0..a.len()]` —ñ `&a[..a.len()]` "
"—ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ."

#: src/basic-syntax/slices.md:25
msgid ""
"The same is true for the last index, so `&a[2..a.len()]` and `&a[2..]` are "
"identical."
msgstr ""
"–¢–µ —Å–∞–º–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É, —Ç–æ–º—É `&a[2..a.len()]` —ñ `&a[2..]` "
"—ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ."

#: src/basic-syntax/slices.md:27
msgid ""
"To easily create a slice of the full array, we can therefore use `&a[..]`."
msgstr ""
"–©–æ–± –ª–µ–≥–∫–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–æ–≤–Ω–æ–≥–æ –º–∞—Å–∏–≤—É, –º–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "
"`&a[..]`."

#: src/basic-syntax/slices.md:29
msgid ""
"`s` is a reference to a slice of `i32`s. Notice that the type of `s` "
"(`&[i32]`) no longer mentions the array length. This allows us to perform "
"computation on slices of different sizes."
msgstr ""
"`s` —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç `i32`s. –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ —Ç–∏–ø `s` (`&[i32]`) "
"–±—ñ–ª—å—à–µ –Ω–µ –∑–≥–∞–¥—É—î –¥–æ–≤–∂–∏–Ω—É –º–∞—Å–∏–≤—É. –¶–µ –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –Ω–∞ "
"–∑—Ä—ñ–∑–∞—Ö —Ä—ñ–∑–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É."

#: src/basic-syntax/slices.md:31
msgid ""
"Slices always borrow from another object. In this example, `a` has to remain "
"'alive' (in scope) for at least as long as our slice. "
msgstr ""
"–ó—Ä—ñ–∑–∏ –∑–∞–≤–∂–¥–∏ –∑–∞–ø–æ–∑–∏—á—É—é—Ç—å—Å—è –∑ —ñ–Ω—à–æ–≥–æ –æ–±'—î–∫—Ç–∞. –£ —Ü—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ \"a\" –º–∞—î "
"–∑–∞–ª–∏—à–∞—Ç–∏—Å—è \"–∂–∏–≤–∏–º\" (–≤ –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ) –ø—Ä–∏–Ω–∞–π–º–Ω—ñ —Å—Ç—ñ–ª—å–∫–∏ –∂, —Å–∫—ñ–ª—å–∫–∏ –Ω–∞—à "
"—Ñ—Ä–∞–≥–º–µ–Ω—Ç."

#: src/basic-syntax/slices.md:33
msgid ""
"The question about modifying `a[3]` can spark an interesting discussion, but "
"the answer is that for memory safety reasons you cannot do it through `a` at "
"this point in the execution, but you can read the data from both `a` and `s` "
"safely. It works before you created the slice, and again after the "
"`println`, when the slice is no longer used. More details will be explained "
"in the borrow checker section."
msgstr ""
"–ü–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—é `a[3]` –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü—ñ–∫–∞–≤—É –¥–∏—Å–∫—É—Å—ñ—é, –∞–ª–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å "
"–ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ –∑ –º—ñ—Ä–∫—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏ –ø–∞–º‚Äô—è—Ç—ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ —á–µ—Ä–µ–∑ "
"`a` –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ —á–∏—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –æ–±–æ—Ö `a ` —ñ `s` "
"–±–µ–∑–ø–µ—á–Ω–æ. –í—ñ–Ω –ø—Ä–∞—Ü—é—î –¥–æ —Ç–æ–≥–æ, —è–∫ –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç, —ñ –∑–Ω–æ–≤—É –ø—ñ—Å–ª—è "
"`println`, –∫–æ–ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è. –î–æ–∫–ª–∞–¥–Ω—ñ—à–µ –±—É–¥–µ –æ–ø–∏—Å–∞–Ω–æ "
"–≤ —Ä–æ–∑–¥—ñ–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ø–æ–∑–∏—á–µ–Ω—å."

#: src/basic-syntax/string-slices.md:1
msgid "`String` vs `str`"
msgstr "`String` –ø—Ä–æ—Ç–∏ `str`"

#: src/basic-syntax/string-slices.md:3
msgid "We can now understand the two string types in Rust:"
msgstr "–¢–µ–ø–µ—Ä –º–∏ –º–æ–∂–µ–º–æ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –¥–≤–∞ —Ç–∏–ø–∏ —Ä—è–¥–∫—ñ–≤ —É Rust:"

#: src/basic-syntax/string-slices.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let s1: &str = \"World\";\n"
"    println!(\"s1: {s1}\");\n"
"\n"
"    let mut s2: String = String::from(\"Hello \");\n"
"    println!(\"s2: {s2}\");\n"
"    s2.push_str(s1);\n"
"    println!(\"s2: {s2}\");\n"
"    \n"
"    let s3: &str = &s2[6..];\n"
"    println!(\"s3: {s3}\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/string-slices.md:20
msgid "Rust terminology:"
msgstr "–¢–µ—Ä–º—ñ–Ω–æ–ª–æ–≥—ñ—è Rust:"

#: src/basic-syntax/string-slices.md:22
msgid "`&str` an immutable reference to a string slice."
msgstr "`&str` –Ω–µ–∑–º—ñ–Ω–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ä—è–¥–∫–∞."

#: src/basic-syntax/string-slices.md:23
msgid "`String` a mutable string buffer."
msgstr "`String` –∑–º—ñ–Ω–Ω–∏–π –±—É—Ñ–µ—Ä —Ä—è–¥–∫–∞."

#: src/basic-syntax/string-slices.md:27
msgid ""
"`&str` introduces a string slice, which is an immutable reference to UTF-8 "
"encoded string data  stored in a block of memory. String literals "
"(`‚ÄùHello‚Äù`), are stored in the program‚Äôs binary."
msgstr ""
"`&str` –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ä—è–¥–∫–∞, —è–∫–∏–π —î –Ω–µ–∑–º—ñ–Ω–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –¥–∞–Ω—ñ —Ä—è–¥–∫–∞ "
"–≤ –∫–æ–¥—É–≤–∞–Ω–Ω—ñ UTF-8, —â–æ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –±–ª–æ—Ü—ñ –ø–∞–º‚Äô—è—Ç—ñ. –†—è–¥–∫–æ–≤—ñ –ª—ñ—Ç–µ—Ä–∞–ª–∏ "
"(`‚ÄùHello‚Äù`) –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –±—ñ–Ω–∞—Ä–Ω–æ–º—É —Ñ–∞–π–ª—ñ –ø—Ä–æ–≥—Ä–∞–º–∏."

#: src/basic-syntax/string-slices.md:30
msgid ""
"Rust‚Äôs `String` type is a wrapper around a vector of bytes. As with a "
"`Vec<T>`, it is owned."
msgstr ""
"–¢–∏–ø `String` Rust ‚Äî —Ü–µ –æ–±–æ–ª–æ–Ω–∫–∞ –Ω–∞–≤–∫–æ–ª–æ –≤–µ–∫—Ç–æ—Ä–∞ –±–∞–π—Ç—ñ–≤. –Ø–∫ —ñ —É –≤–∏–ø–∞–¥–∫—É –∑ "
"`Vec<T>`, –≤—ñ–Ω –Ω–∞–ª–µ–∂–∏—Ç—å."

#: src/basic-syntax/string-slices.md:32
msgid ""
"As with many other types `String::from()` creates a string from a string "
"literal; `String::new()`  creates a new empty string, to which string data "
"can be added using the `push()` and `push_str()` methods."
msgstr ""

#: src/basic-syntax/string-slices.md:35
msgid ""
"The `format!()` macro is a convenient way to generate an owned string from "
"dynamic values. It  accepts the same format specification as `println!()`."
msgstr ""
"–ú–∞–∫—Ä–æ—Å `format!()` ‚Äî —Ü–µ –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —Ä—è–¥–æ–∫ —ñ–∑ "
"–¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å. –í—ñ–Ω –ø—Ä–∏–π–º–∞—î —Ç—É —Å–∞–º—É —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É, —â–æ –π `println!"
"()`."

#: src/basic-syntax/string-slices.md:38
msgid ""
"You can borrow `&str` slices from `String` via `&` and optionally range "
"selection."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–∑–∏—á–∏—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ `&str` –∑ `String` —á–µ—Ä–µ–∑ `&` —ñ –≤–∏–±—ñ—Ä –¥—ñ–∞–ø–∞–∑–æ–Ω—É."

#: src/basic-syntax/string-slices.md:40
msgid ""
"For C++ programmers: think of `&str` as `const char*` from C++, but the one "
"that always points  to a valid string in memory. Rust `String` is a rough "
"equivalent of `std::string` from C++  (main difference: it can only contain "
"UTF-8 encoded bytes and will never use a small-string optimization)."
msgstr ""
"–î–ª—è –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ C++: –¥—É–º–∞–π—Ç–µ –ø—Ä–æ `&str` —è–∫ –ø—Ä–æ `const char*` —ñ–∑ C++, –∞–ª–µ "
"—Ç–æ–π, —è–∫–∏–π –∑–∞–≤–∂–¥–∏ –≤–∫–∞–∑—É—î –Ω–∞ –¥—ñ–π—Å–Ω–∏–π —Ä—è–¥–æ–∫ —É –ø–∞–º‚Äô—è—Ç—ñ. Rust `String` ‚Äî —Ü–µ "
"–ø—Ä–∏–±–ª–∏–∑–Ω–∏–π –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç `std::string` –∑ C++ (–≥–æ–ª–æ–≤–Ω–∞ –≤—ñ–¥–º—ñ–Ω–Ω—ñ—Å—Ç—å: –≤—ñ–Ω –º–æ–∂–µ "
"–º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –±–∞–π—Ç–∏ –≤ –∫–æ–¥—É–≤–∞–Ω–Ω—ñ UTF-8 —ñ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ "
"–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –∑–∞ –º–∞–ª–∏–º–∏ —Ä—è–¥–∫–∞–º–∏)."

#: src/basic-syntax/functions.md:3
msgid ""
"A Rust version of the famous [FizzBuzz](https://en.wikipedia.org/wiki/"
"Fizz_buzz) interview question:"
msgstr ""
"Rust-–≤–µ—Ä—Å—ñ—è –≤—ñ–¥–æ–º–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —ñ–Ω—Ç–µ—Ä–≤‚Äô—é [FizzBuzz](https://en.wikipedia."
"org/wiki/Fizz_buzz):"

#: src/basic-syntax/functions.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    print_fizzbuzz_to(20);\n"
"}\n"
"\n"
"fn is_divisible(n: u32, divisor: u32) -> bool {\n"
"    if divisor == 0 {\n"
"        return false;\n"
"    }\n"
"    n % divisor == 0\n"
"}\n"
"\n"
"fn fizzbuzz(n: u32) -> String {\n"
"    let fizz = if is_divisible(n, 3) { \"fizz\" } else { \"\" };\n"
"    let buzz = if is_divisible(n, 5) { \"buzz\" } else { \"\" };\n"
"    if fizz.is_empty() && buzz.is_empty() {\n"
"        return format!(\"{n}\");\n"
"    }\n"
"    format!(\"{fizz}{buzz}\")\n"
"}\n"
"\n"
"fn print_fizzbuzz_to(n: u32) {\n"
"    for i in 1..=n {\n"
"        println!(\"{}\", fizzbuzz(i));\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/functions.md:35
msgid ""
"We refer in `main` to a function written below. Neither forward declarations "
"nor headers are necessary. "
msgstr ""
"–£ `main` –º–∏ –ø–æ—Å–∏–ª–∞—î–º–æ—Å—è –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é, –Ω–∞–ø–∏—Å–∞–Ω—É –Ω–∏–∂—á–µ. –ù—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è, "
"–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ."

#: src/basic-syntax/functions.md:36
msgid ""
"Declaration parameters are followed by a type (the reverse of some "
"programming languages), then a return type."
msgstr ""
"–ó–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–ª—ñ–¥—É—î —Ç–∏–ø (–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤‚Äô—è–∑–æ–∫ –∑ –¥–µ—è–∫–∏–º–∏ –º–æ–≤–∞–º–∏ "
"–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è), –∞ –ø–æ—Ç—ñ–º —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è."

#: src/basic-syntax/functions.md:37
msgid ""
"The last expression in a function body (or any block) becomes the return "
"value. Simply omit the `;` at the end of the expression."
msgstr ""

#: src/basic-syntax/functions.md:38
msgid ""
"Some functions have no return value, and return the 'unit type', `()`. The "
"compiler will infer this if the `-> ()` return type is omitted."
msgstr ""
"–î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–µ –º–∞—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è, —ñ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å ¬´—Ç–∏–ø –æ–¥–∏–Ω–∏—Ü—ñ "
"–≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è¬ª, `()`. –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä –≤–∏–∑–Ω–∞—á–∏—Ç—å —Ü–µ, —è–∫—â–æ —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è `-> ()` "
"–ø—Ä–æ–ø—É—â–µ–Ω–æ."

#: src/basic-syntax/functions.md:39
msgid ""
"The range expression in the `for` loop in `print_fizzbuzz_to()` contains "
"`=n`, which causes it to include the upper bound."
msgstr ""
"–í–∏—Ä–∞–∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—É –≤ —Ü–∏–∫–ª—ñ `for` —É `print_fizzbuzz_to()` –º—ñ—Å—Ç–∏—Ç—å `=n`, —â–æ "
"–∑–º—É—à—É—î –π–æ–≥–æ –≤–∫–ª—é—á–∞—Ç–∏ –≤–µ—Ä—Ö–Ω—é –º–µ–∂—É."

#: src/basic-syntax/rustdoc.md:3
msgid ""
"All language items in Rust can be documented using special `///` syntax."
msgstr ""
"–£—Å—ñ –º–æ–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ Rust –º–æ–∂–Ω–∞ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ "
"—Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É `///`."

#: src/basic-syntax/rustdoc.md:5
msgid ""
"```rust,editable\n"
"/// Determine whether the first argument is divisible by the second "
"argument.\n"
"///\n"
"/// If the second argument is zero, the result is false.\n"
"fn is_divisible_by(lhs: u32, rhs: u32) -> bool {\n"
"    if rhs == 0 {\n"
"        return false;  // Corner case, early return\n"
"    }\n"
"    lhs % rhs == 0     // The last expression in a block is the return "
"value\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/rustdoc.md:17
msgid ""
"The contents are treated as Markdown. All published Rust library crates are "
"automatically documented at [`docs.rs`](https://docs.rs) using the [rustdoc]"
"(https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html) tool. It is "
"idiomatic to document all public items in an API using this pattern."
msgstr ""
"–í–º—ñ—Å—Ç —Ä–æ–∑–≥–ª—è–¥–∞—î—Ç—å—Å—è —è–∫ Markdown. –£—Å—ñ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ —è—â–∏–∫–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ Rust "
"–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—É—é—Ç—å—Å—è –Ω–∞ [`docs.rs`](https://docs.rs) –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
"[rustdoc](https://doc.rust-lang.org/rustdoc/what-is-rustdoc) .html). "
"–Ü–¥—ñ–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –ø—É–±–ª—ñ—á–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ API –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü—å–æ–≥–æ "
"—à–∞–±–ª–æ–Ω—É."

#: src/basic-syntax/rustdoc.md:24
msgid ""
"Show students the generated docs for the `rand` crate at [`docs.rs/rand`]"
"(https://docs.rs/rand)."
msgstr ""
"–ü–æ–∫–∞–∂—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è —è—â–∏–∫–∞ `rand` –Ω–∞ [`docs.rs/rand`]"
"(https://docs.rs/rand)."

#: src/basic-syntax/rustdoc.md:27
msgid ""
"This course does not include rustdoc on slides, just to save space, but in "
"real code they should be present."
msgstr ""
"–¶–µ–π –∫—É—Ä—Å –Ω–µ –º—ñ—Å—Ç–∏—Ç—å rustdoc –Ω–∞ —Å–ª–∞–π–¥–∞—Ö, —â–æ–± –∑–∞–æ—â–∞–¥–∏—Ç–∏ –º—ñ—Å—Ü–µ, –∞–ª–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É "
"–∫–æ–¥—ñ –≤–æ–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ–º–∏."

#: src/basic-syntax/rustdoc.md:30
msgid ""
"Inner doc comments are discussed later (in the page on modules) and need not "
"be addressed here."
msgstr ""
"–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±–≥–æ–≤–æ—Ä—é—é—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ (–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ "
"–º–æ–¥—É–ª—ñ–≤), —ñ —ó—Ö —Ç—É—Ç –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑–≥–ª—è–¥–∞—Ç–∏."

#: src/basic-syntax/rustdoc.md:33
msgid ""
"Rustdoc comments can contain code snippets that we can run and test using "
"`cargo test`. We will discuss these tests in the [Testing section](../"
"testing/doc-tests.html)."
msgstr ""
"–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ Rustdoc –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –∫–æ–¥—É, —è–∫—ñ –º–∏ –º–æ–∂–µ–º–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Ç–∞ "
"—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `cargo test`. –ú–∏ –æ–±–≥–æ–≤–æ—Ä–∏–º–æ —Ü—ñ —Ç–µ—Å—Ç–∏ –≤ [—Ä–æ–∑–¥—ñ–ª—ñ "
"—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è](../testing/doc-tests.html)."

#: src/basic-syntax/methods.md:3
msgid ""
"Methods are functions associated with a type. The `self` argument of a "
"method is an instance of the type it is associated with:"
msgstr ""
"–ú–µ—Ç–æ–¥–∏ ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—ó, –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ –∑ —Ç–∏–ø–æ–º. –ê—Ä–≥—É–º–µ–Ω—Ç `self` –º–µ—Ç–æ–¥—É —î –µ–∫–∑–µ–º–ø–ª—è—Ä–æ–º "
"—Ç–∏–ø—É, –∑ —è–∫–∏–º –≤—ñ–Ω –ø–æ–≤‚Äô—è–∑–∞–Ω–∏–π:"

#: src/basic-syntax/methods.md:6
msgid ""
"```rust,editable\n"
"struct Rectangle {\n"
"    width: u32,\n"
"    height: u32,\n"
"}\n"
"\n"
"impl Rectangle {\n"
"    fn area(&self) -> u32 {\n"
"        self.width * self.height\n"
"    }\n"
"\n"
"    fn inc_width(&mut self, delta: u32) {\n"
"        self.width += delta;\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let mut rect = Rectangle { width: 10, height: 5 };\n"
"    println!(\"old area: {}\", rect.area());\n"
"    rect.inc_width(5);\n"
"    println!(\"new area: {}\", rect.area());\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/methods.md:30
msgid ""
"We will look much more at methods in today's exercise and in tomorrow's "
"class."
msgstr ""
"–ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –º–µ—Ç–æ–¥–∏ –Ω–∞–±–∞–≥–∞—Ç–æ –±—ñ–ª—å—à–µ –≤ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –≤–ø—Ä–∞–≤—ñ —Ç–∞ –Ω–∞ "
"–∑–∞–≤—Ç—Ä–∞—à–Ω—å–æ–º—É —É—Ä–æ—Ü—ñ."

#: src/basic-syntax/methods.md:34
msgid "Add a static method called `Rectangle::new` and call this from `main`:"
msgstr ""
"–î–æ–¥–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –ø—ñ–¥ –Ω–∞–∑–≤–æ—é `Rectangle::new` —ñ –≤–∏–∫–ª–∏—á—Ç–µ —Ü–µ –∑ `main`:"

#: src/basic-syntax/methods.md:36
msgid ""
"```rust,editable,compile_fail\n"
"fn new(width: u32, height: u32) -> Rectangle {\n"
"    Rectangle { width, height }\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/methods.md:42
msgid ""
"While _technically_, Rust does not have custom constructors, static methods "
"are commonly used to initialize structs (but don't have to). The actual "
"constructor, `Rectangle { width, height }`, could be called directly. See "
"the [Rustnomicon](https://doc.rust-lang.org/nomicon/constructors.html)."
msgstr ""
"–•–æ—á–∞ _—Ç–µ—Ö–Ω—ñ—á–Ω–æ_, Rust –Ω–µ –º–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤, –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó "
"—Å—Ç—Ä—É–∫—Ç—É—Ä –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Å—Ç–∞—Ç–∏—á–Ω—ñ –º–µ—Ç–æ–¥–∏ (–∞–ª–µ —Ü–µ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ). "
"–§–∞–∫—Ç–∏—á–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, `Rectangle { width, height }`, –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ "
"–±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ [Rustnomicon](https://doc.rust-lang.org/nomicon/"
"constructors.html)."

#: src/basic-syntax/methods.md:45
msgid ""
"Add a `Rectangle::square(width: u32)` constructor to illustrate that such "
"static methods can take arbitrary parameters."
msgstr ""
"–î–æ–¥–∞–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä `Rectangle::square(width: u32)`, —â–æ–± –ø—Ä–æ—ñ–ª—é—Å—Ç—Ä—É–≤–∞—Ç–∏, —â–æ "
"—Ç–∞–∫—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –º–æ–∂—É—Ç—å –ø—Ä–∏–π–º–∞—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏."

#: src/basic-syntax/functions-interlude.md:1
msgid "Function Overloading"
msgstr "–ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π"

#: src/basic-syntax/functions-interlude.md:3
msgid "Overloading is not supported:"
msgstr "–ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è:"

#: src/basic-syntax/functions-interlude.md:5
msgid "Each function has a single implementation:"
msgstr "–ö–æ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –æ–¥–Ω—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é:"

#: src/basic-syntax/functions-interlude.md:6
msgid "Always takes a fixed number of parameters."
msgstr "–ó–∞–≤–∂–¥–∏ –ø—Ä–∏–π–º–∞—î —Ñ—ñ–∫—Å–æ–≤–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤."

#: src/basic-syntax/functions-interlude.md:7
msgid "Always takes a single set of parameter types."
msgstr "–ó–∞–≤–∂–¥–∏ –ø—Ä–∏–π–º–∞—î –æ–¥–∏–Ω –Ω–∞–±—ñ—Ä —Ç–∏–ø—ñ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤."

#: src/basic-syntax/functions-interlude.md:8
msgid "Default values are not supported:"
msgstr "–ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è:"

#: src/basic-syntax/functions-interlude.md:9
msgid "All call sites have the same number of arguments."
msgstr "–£—Å—ñ —Å–∞–π—Ç–∏ –≤–∏–∫–ª–∏–∫—ñ–≤ –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤."

#: src/basic-syntax/functions-interlude.md:10
msgid "Macros are sometimes used as an alternative."
msgstr "–ú–∞–∫—Ä–æ—Å–∏ —ñ–Ω–æ–¥—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —è–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞."

#: src/basic-syntax/functions-interlude.md:12
msgid "However, function parameters can be generic:"
msgstr "–û–¥–Ω–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–º–∏:"

#: src/basic-syntax/functions-interlude.md:14
msgid ""
"```rust,editable\n"
"fn pick_one<T>(a: T, b: T) -> T {\n"
"    if std::process::id() % 2 == 0 { a } else { b }\n"
"}\n"
"\n"
"fn main() {\n"
"    println!(\"coin toss: {}\", pick_one(\"heads\", \"tails\"));\n"
"    println!(\"cash prize: {}\", pick_one(500, 1000));\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/functions-interlude.md:27
msgid ""
"When using generics, the standard library's `Into<T>` can provide a kind of "
"limited polymorphism on argument types. We will see more details in a later "
"section."
msgstr ""
"–ü—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –¥–∂–µ–Ω–µ—Ä–∏–∫—ñ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ `Into<T>` –º–æ–∂–µ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ "
"–ø–µ–≤–Ω–∏–π –æ–±–º–µ–∂–µ–Ω–∏–π –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º —Ç–∏–ø—ñ–≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤. –ú–∏ –ø–æ–±–∞—á–∏–º–æ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π —É "
"–Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ."

#: src/exercises/day-1/morning.md:1
msgid "Day 1: Morning Exercises"
msgstr "–î–µ–Ω—å 1: –†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞"

#: src/exercises/day-1/morning.md:3
msgid "In these exercises, we will explore two parts of Rust:"
msgstr "–£ —Ü–∏—Ö –≤–ø—Ä–∞–≤–∞—Ö –º–∏ –¥–æ—Å–ª—ñ–¥–∏–º–æ –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ Rust:"

#: src/exercises/day-1/morning.md:5
msgid "Implicit conversions between types."
msgstr "–ù–µ—è–≤–Ω—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–∂ —Ç–∏–ø–∞–º–∏."

#: src/exercises/day-1/morning.md:7
msgid "Arrays and `for` loops."
msgstr "–ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏ for."

#: src/exercises/day-1/morning.md:11
msgid "A few things to consider while solving the exercises:"
msgstr "–ö—ñ–ª—å–∫–∞ —Ä–µ—á–µ–π, —è–∫—ñ —Å–ª—ñ–¥ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –≤–ø—Ä–∞–≤:"

#: src/exercises/day-1/morning.md:13
msgid ""
"Use a local Rust installation, if possible. This way you can get auto-"
"completion in your editor. See the page about [Using Cargo](../../cargo.md) "
"for details on installing Rust."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—É —É—Å—Ç–∞–Ω–æ–≤–∫—É Rust, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ. –¢–∞–∫–∏–º —á–∏–Ω–æ–º –≤–∏ –º–æ–∂–µ—Ç–µ "
"–æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —É —Å–≤–æ—î–º—É —Ä–µ–¥–∞–∫—Ç–æ—Ä—ñ. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–æ "
"[–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Cargo](../../cargo.md), —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è "
"Rust."

#: src/exercises/day-1/morning.md:17
msgid "Alternatively, use the Rust Playground."
msgstr "–ö—Ä—ñ–º —Ç–æ–≥–æ, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —ñ–≥—Ä–æ–≤–∏–º –º–∞–π–¥–∞–Ω—á–∏–∫–æ–º Rust."

#: src/exercises/day-1/morning.md:19
msgid ""
"The code snippets are not editable on purpose: the inline code snippets lose "
"their state if you navigate away from the page."
msgstr ""
"–§—Ä–∞–≥–º–µ–Ω—Ç–∏ –∫–æ–¥—É –Ω–µ –º–æ–∂–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–≤–º–∏—Å–Ω–æ: –≤–±—É–¥–æ–≤–∞–Ω—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ –∫–æ–¥—É "
"–≤—Ç—Ä–∞—á–∞—é—Ç—å —Å–≤—ñ–π —Å—Ç–∞–Ω, —è–∫—â–æ –≤–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏."

#: src/exercises/day-1/morning.md:22 src/exercises/day-2/morning.md:11
#: src/exercises/day-3/morning.md:9 src/exercises/bare-metal/morning.md:7
#: src/exercises/concurrency/morning.md:12
msgid ""
"After looking at the exercises, you can look at the [solutions](solutions-"
"morning.md) provided."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—É–≤—à–∏ –≤–ø—Ä–∞–≤–∏, –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–¥–∞–Ω—ñ [—Ä—ñ—à–µ–Ω–Ω—è](solutions-"
"morning.md)."

#: src/exercises/day-1/implicit-conversions.md:3
msgid ""
"Rust will not automatically apply _implicit conversions_ between types "
"([unlike C++](https://en.cppreference.com/w/cpp/language/"
"implicit_conversion)). You can see this in a program like this:"
msgstr ""
"Rust –Ω–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ _–Ω–µ—è–≤–Ω—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è_ –º—ñ–∂ —Ç–∏–ø–∞–º–∏ ([–Ω–∞ "
"–≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ C++](https://en.cppreference.com/w/cpp/language/"
"implicit_conversion)). –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏ —Ü–µ –≤ —Ç–∞–∫—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ:"

#: src/exercises/day-1/implicit-conversions.md:6
msgid ""
"```rust,editable,compile_fail\n"
"fn multiply(x: i16, y: i16) -> i16 {\n"
"    x * y\n"
"}\n"
"\n"
"fn main() {\n"
"    let x: i8 = 15;\n"
"    let y: i16 = 1000;\n"
"\n"
"    println!(\"{x} * {y} = {}\", multiply(x, y));\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-1/implicit-conversions.md:19
msgid ""
"The Rust integer types all implement the [`From<T>`](https://doc.rust-lang."
"org/std/convert/trait.From.html) and [`Into<T>`](https://doc.rust-lang.org/"
"std/convert/trait.Into.html) traits to let us convert between them. The "
"`From<T>` trait has a single `from()` method and similarly, the `Into<T>` "
"trait has a single `into()` method. Implementing these traits is how a type "
"expresses that it can be converted into another type."
msgstr ""
"–£—Å—ñ —Ü—ñ–ª—ñ —Ç–∏–ø–∏ Rust —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å [`From<T>`](https://doc.rust-lang.org/std/"
"convert/trait.From.html) —ñ [`Into<T>`](https: //doc.rust-lang.org/std/"
"convert/trait.Into.html), —â–æ–± –º–∏ –º–æ–≥–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –º—ñ–∂ –Ω–∏–º–∏. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ "
"`From<T>` –º–∞—î —î–¥–∏–Ω–∏–π –º–µ—Ç–æ–¥ `from()`, –∞ –æ–∑–Ω–∞–∫–∞ `Into<T>` –º–∞—î –æ–¥–∏–Ω –º–µ—Ç–æ–¥ "
"`into()`. –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ü–∏—Ö –æ–∑–Ω–∞–∫ —î —Ç–∏–º, —è–∫ —Ç–∏–ø –≤–∏—Ä–∞–∂–∞—î, —â–æ –π–æ–≥–æ –º–æ–∂–Ω–∞ "
"–ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞ —ñ–Ω—à–∏–π —Ç–∏–ø."

#: src/exercises/day-1/implicit-conversions.md:25
msgid ""
"The standard library has an implementation of `From<i8> for i16`, which "
"means that we can convert a variable `x` of type `i8` to an `i16` by "
"calling  `i16::from(x)`. Or, simpler, with `x.into()`, because `From<i8> for "
"i16` implementation automatically create an implementation of `Into<i16> for "
"i8`."
msgstr ""
"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –º–∞—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é `From<i8> –¥–ª—è i16`, —â–æ –æ–∑–Ω–∞—á–∞—î, —â–æ –º–∏ "
"–º–æ–∂–µ–º–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∑–º—ñ–Ω–Ω—É `x` —Ç–∏–ø—É `i8` –Ω–∞ `i16`, –≤–∏–∫–ª–∏–∫–∞–≤—à–∏ `i16::from(x)`. "
"–ê–±–æ, –ø—Ä–æ—Å—Ç—ñ—à–µ, –∑ `x.into()`, –æ—Å–∫—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è `From<i8> –¥–ª—è i16` "
"–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é `Into<i16> –¥–ª—è i8`."

#: src/exercises/day-1/implicit-conversions.md:30
msgid ""
"The same applies for your own `From` implementations for your own types, so "
"it is sufficient to only implement `From` to get a respective `Into` "
"implementation automatically."
msgstr ""
"–¢–µ —Å–∞–º–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –≤–∞—à–∏—Ö –≤–ª–∞—Å–Ω–∏—Ö —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ–π `From` –¥–ª—è –≤–∞—à–∏—Ö –≤–ª–∞—Å–Ω–∏—Ö —Ç–∏–ø—ñ–≤, "
"—Ç–æ–º—É –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ª–∏—à–µ `From`, —â–æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É "
"—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é `Into`."

#: src/exercises/day-1/implicit-conversions.md:33
msgid "Execute the above program and look at the compiler error."
msgstr "–í–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω—É –≤–∏—â–µ –ø—Ä–æ–≥—Ä–∞–º—É —Ç–∞ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ –ø–æ–º–∏–ª–∫—É –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞."

#: src/exercises/day-1/implicit-conversions.md:35
msgid "Update the code above to use `into()` to do the conversion."
msgstr ""
"–û–Ω–æ–≤—ñ—Ç—å –∫–æ–¥ –≤–∏—â–µ, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `in()` –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è."

#: src/exercises/day-1/implicit-conversions.md:37
msgid ""
"Change the types of `x` and `y` to other things (such as `f32`, `bool`, "
"`i128`) to see which types you can convert to which other types. Try "
"converting small types to big types and the other way around. Check the "
"[standard library documentation](https://doc.rust-lang.org/std/convert/trait."
"From.html) to see if `From<T>` is implemented for the pairs you check."
msgstr ""
"–ó–º—ñ–Ω—ñ—Ç—å —Ç–∏–ø–∏ `x` —ñ `y` –Ω–∞ —ñ–Ω—à—ñ —Ä–µ—á—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `f32`, `bool`, `i128`), —â–æ–± "
"–ø–æ–±–∞—á–∏—Ç–∏, —è–∫—ñ —Ç–∏–ø–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞ —ñ–Ω—à—ñ —Ç–∏–ø–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ "
"–º–∞–ª—ñ —Ç–∏–ø–∏ –Ω–∞ –≤–µ–ª–∏–∫—ñ —Ç–∏–ø–∏ —ñ –Ω–∞–≤–ø–∞–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ [—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ—á–Ω—É "
"–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é](https://doc.rust-lang.org/std/convert/trait.From.html), —â–æ–± "
"–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ `From<T>` –¥–ª—è –ø–∞—Ä, —è–∫—ñ –≤–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç–µ."

#: src/exercises/day-1/for-loops.md:1
#: src/exercises/day-1/solutions-morning.md:3
msgid "Arrays and `for` Loops"
msgstr "–ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏ for"

#: src/exercises/day-1/for-loops.md:3
msgid "We saw that an array can be declared like this:"
msgstr "–ú–∏ –ø–æ–±–∞—á–∏–ª–∏, —â–æ –º–∞—Å–∏–≤ –º–æ–∂–Ω–∞ –æ–≥–æ–ª–æ—Å–∏—Ç–∏ —Ç–∞–∫:"

#: src/exercises/day-1/for-loops.md:5
msgid ""
"```rust\n"
"let array = [10, 20, 30];\n"
"```"
msgstr ""

#: src/exercises/day-1/for-loops.md:9
msgid ""
"You can print such an array by asking for its debug representation with `{:?}"
"`:"
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ —Ç–∞–∫–∏–π –º–∞—Å–∏–≤, –∑–∞–ø–∏—Ç–∞–≤—à–∏ –π–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è "
"–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `{:?}`:"

#: src/exercises/day-1/for-loops.md:11
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let array = [10, 20, 30];\n"
"    println!(\"array: {array:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-1/for-loops.md:18
msgid ""
"Rust lets you iterate over things like arrays and ranges using the `for` "
"keyword:"
msgstr ""
"Rust –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç–∏ —Ç–∞–∫—ñ —Ä–µ—á—ñ, —è–∫ –º–∞—Å–∏–≤–∏ —Ç–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏, "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ `for`:"

#: src/exercises/day-1/for-loops.md:21
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let array = [10, 20, 30];\n"
"    print!(\"Iterating over array:\");\n"
"    for n in &array {\n"
"        print!(\" {n}\");\n"
"    }\n"
"    println!();\n"
"\n"
"    print!(\"Iterating over range:\");\n"
"    for i in 0..3 {\n"
"        print!(\" {}\", array[i]);\n"
"    }\n"
"    println!();\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-1/for-loops.md:38
msgid ""
"Use the above to write a function `pretty_print` which pretty-print a matrix "
"and a function `transpose` which will transpose a matrix (turn rows into "
"columns):"
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω–µ –≤–∏—â–µ, —â–æ–± –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é `pretty_print`, —è–∫–∞ "
"–∫—Ä–∞—Å–∏–≤–æ –¥—Ä—É–∫—É—î –º–∞—Ç—Ä–∏—Ü—é, —ñ —Ñ—É–Ω–∫—Ü—ñ—é `transpose`, —è–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ–Ω—É—î –º–∞—Ç—Ä–∏—Ü—é "
"(–ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä—è–¥–∫–∏ –Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ):"

#: src/exercises/day-1/for-loops.md:41
msgid ""
"```bob\n"
"           ‚éõ‚é°1 2 3‚é§‚éû      ‚é°1 4 7‚é§\n"
"\"transpose\"‚éú‚é¢4 5 6‚é•‚éü  \"==\"‚é¢2 5 8‚é•\n"
"           ‚éù‚é£7 8 9‚é¶‚é†      ‚é£3 6 9‚é¶\n"
"```"
msgstr ""

#: src/exercises/day-1/for-loops.md:47
msgid "Hard-code both functions to operate on 3 √ó 3 matrices."
msgstr "–ñ–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥—É–π—Ç–µ –æ–±–∏–¥–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–∞—Ç—Ä–∏—Ü—è–º–∏ 3 √ó 3."

#: src/exercises/day-1/for-loops.md:49
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and implement the "
"functions:"
msgstr ""
"–°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ –∫–æ–¥ –Ω–∞ <https://play.rust-lang.org/> —ñ –∑–∞—Å—Ç–æ—Å—É–π—Ç–µ "
"—Ñ—É–Ω–∫—Ü—ñ—ó:"

#: src/exercises/day-1/for-loops.md:52
msgid ""
"```rust,should_panic\n"
"// TODO: remove this when you're done with your implementation.\n"
"#![allow(unused_variables, dead_code)]\n"
"\n"
"fn transpose(matrix: [[i32; 3]; 3]) -> [[i32; 3]; 3] {\n"
"    unimplemented!()\n"
"}\n"
"\n"
"fn pretty_print(matrix: &[[i32; 3]; 3]) {\n"
"    unimplemented!()\n"
"}\n"
"\n"
"fn main() {\n"
"    let matrix = [\n"
"        [101, 102, 103], // <-- the comment makes rustfmt add a newline\n"
"        [201, 202, 203],\n"
"        [301, 302, 303],\n"
"    ];\n"
"\n"
"    println!(\"matrix:\");\n"
"    pretty_print(&matrix);\n"
"\n"
"    let transposed = transpose(matrix);\n"
"    println!(\"transposed:\");\n"
"    pretty_print(&transposed);\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-1/for-loops.md:80
msgid "Bonus Question"
msgstr "–ë–æ–Ω—É—Å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"

#: src/exercises/day-1/for-loops.md:82
msgid ""
"Could you use `&[i32]` slices instead of hard-coded 3 √ó 3 matrices for your "
"argument and return types? Something like `&[&[i32]]` for a two-dimensional "
"slice-of-slices. Why or why not?"
msgstr ""
"–ß–∏ –º–æ–∂–µ—Ç–µ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ `&[i32]` –∑–∞–º—ñ—Å—Ç—å –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö "
"–º–∞—Ç—Ä–∏—Ü—å 3 √ó 3 –¥–ª—è –≤–∞—à–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ —Ç–∏–ø—ñ–≤ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è? –©–æ—Å—å –Ω–∞ –∑—Ä–∞–∑–æ–∫ "
"`&[&[i32]]` –¥–ª—è –¥–≤–æ–≤–∏–º—ñ—Ä–Ω–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤. –ß–æ–º—É –∞–±–æ —á–æ–º—É –Ω—ñ?"

#: src/exercises/day-1/for-loops.md:87
msgid ""
"See the [`ndarray` crate](https://docs.rs/ndarray/) for a production quality "
"implementation."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ [`ndarray` —è—â–∏–∫](https://docs.rs/ndarray/), —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ "
"—è–∫—ñ—Å—Ç—å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞."

#: src/exercises/day-1/for-loops.md:92
msgid ""
"The solution and the answer to the bonus section are available in the  "
"[Solution](solutions-morning.md#arrays-and-for-loops) section."
msgstr ""
"–†—ñ—à–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ —Ä–æ–∑–¥—ñ–ª—ñ [–†—ñ—à–µ–Ω–Ω—è]"
"(solutions-morning.md#arrays-and-for-loops)."

#: src/exercises/day-1/for-loops.md:95
msgid ""
"The use of the reference `&array` within `for n in &array` is a subtle "
"preview of issues of ownership that will come later in the afternoon."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è `&array` —É `for n in &array` —î —Ç–æ–Ω–∫–∏–º –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º "
"–ø–µ—Ä–µ–≥–ª—è–¥–æ–º –ø–∏—Ç–∞–Ω—å –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ, —è–∫—ñ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø—ñ–∑–Ω—ñ—à–µ –≤–¥–µ–Ω—å."

#: src/exercises/day-1/for-loops.md:98
msgid "Without the `&`..."
msgstr "–ë–µ–∑ `&`..."

#: src/exercises/day-1/for-loops.md:99
msgid ""
"The loop would have been one that consumes the array.  This is a change "
"[introduced in the 2021 Edition](https://doc.rust-lang.org/edition-guide/"
"rust-2021/IntoIterator-for-arrays.html)."
msgstr ""
"–¶–∏–∫–ª –º–∞–≤ –±–∏ —Å–ø–æ–∂–∏–≤–∞—Ç–∏ –º–∞—Å–∏–≤. –¶–µ –∑–º—ñ–Ω–∞ [–≤–Ω–µ—Å–µ–Ω–∞ —É –≤–∏–ø—É—Å–∫ 2021](https://doc."
"rust-lang.org/edition-guide/rust-2021/IntoIterator-for-arrays.html)."

#: src/exercises/day-1/for-loops.md:102
msgid ""
"An implicit array copy would have occurred.  Since `i32` is a copy type, "
"then `[i32; 3]` is also a copy type."
msgstr ""

#: src/control-flow.md:3
msgid ""
"As we have seen, `if` is an expression in Rust. It is used to conditionally "
"evaluate one of two blocks, but the blocks can have a value which then "
"becomes the value of the `if` expression. Other control flow expressions "
"work similarly in Rust."
msgstr ""
"–Ø–∫ –º–∏ –±–∞—á–∏–ª–∏, `if` —î –≤–∏—Ä–∞–∑–æ–º —É Rust. –í—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —É–º–æ–≤–Ω–æ–≥–æ "
"–æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∑ –¥–≤–æ—Ö –±–ª–æ–∫—ñ–≤, –∞–ª–µ –±–ª–æ–∫–∏ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—ñ–º "
"—Å—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–∏—Ä–∞–∑—É if. –Ü–Ω—à—ñ –≤–∏—Ä–∞–∑–∏ –ø–æ—Ç–æ–∫—É –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å –ø–æ–¥—ñ–±–Ω–∏–º "
"—á–∏–Ω–æ–º —É Rust."

#: src/control-flow/blocks.md:3
msgid ""
"A block in Rust contains a sequence of expressions. Each block has a value "
"and a type, which are those of the last expression of the block:"
msgstr ""
"–ë–ª–æ–∫ —É Rust –º—ñ—Å—Ç–∏—Ç—å –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –≤–∏—Ä–∞–∑—ñ–≤. –ö–æ–∂–µ–Ω –±–ª–æ–∫ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ —Ç–∏–ø, "
"—è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –≤–∏—Ä–∞–∑—É –±–ª–æ–∫—É:"

#: src/control-flow/blocks.md:7
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let x = {\n"
"        let y = 10;\n"
"        println!(\"y: {y}\");\n"
"        let z = {\n"
"            let w = {\n"
"                3 + 4\n"
"            };\n"
"            println!(\"w: {w}\");\n"
"            y * w\n"
"        };\n"
"        println!(\"z: {z}\");\n"
"        z - y\n"
"    };\n"
"    println!(\"x: {x}\");\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/blocks.md:26
msgid ""
"If the last expression ends with `;`, then the resulting value and type is "
"`()`."
msgstr ""

#: src/control-flow/blocks.md:28
msgid ""
"The same rule is used for functions: the value of the function body is the "
"return value:"
msgstr ""
"–¢–µ —Å–∞–º–µ –ø—Ä–∞–≤–∏–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π: –∑–Ω–∞—á–µ–Ω–Ω—è —Ç—ñ–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—ó —î "
"–∑–Ω–∞—á–µ–Ω–Ω—è–º, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è:"

#: src/control-flow/blocks.md:31
msgid ""
"```rust,editable\n"
"fn double(x: i32) -> i32 {\n"
"    x + x\n"
"}\n"
"\n"
"fn main() {\n"
"    println!(\"doubled: {}\", double(7));\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/blocks.md:43 src/enums.md:34 src/enums/sizes.md:28
#: src/pattern-matching.md:25 src/pattern-matching/match-guards.md:22
#: src/structs.md:31 src/methods.md:30 src/methods/example.md:46
msgid "Key Points:"
msgstr "–ö–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏:"

#: src/control-flow/blocks.md:44
msgid ""
"The point of this slide is to show that blocks have a type and value in "
"Rust. "
msgstr "–ú–µ—Ç–∞ —Ü—å–æ–≥–æ —Å–ª–∞–π–¥–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ –±–ª–æ–∫–∏ –º–∞—é—Ç—å —Ç–∏–ø —ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ Rust."

#: src/control-flow/blocks.md:45
msgid ""
"You can show how the value of the block changes by changing the last line in "
"the block. For instance, adding/removing a semicolon or using a `return`."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–∏, —è–∫ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è –±–ª–æ–∫—É, –∑–º—ñ–Ω–∏–≤—à–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ —É "
"–±–ª–æ—Ü—ñ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫—Ä–∞–ø–∫–∏ –∑ –∫–æ–º–æ—é –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è "
"`return`."

#: src/control-flow/if-expressions.md:1
msgid "`if` expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ `if`"

#: src/control-flow/if-expressions.md:3
msgid ""
"You use [`if` expressions](https://doc.rust-lang.org/reference/expressions/"
"if-expr.html#if-expressions) exactly like `if` statements in other languages:"
msgstr ""
"–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –≤–∏—Ä–∞–∑–∏ [`if`](https://doc.rust-lang.org/reference/"
"expressions/if-expr.html#if-expressions) —Ç–∞–∫ —Å–∞–º–æ, —è–∫ —ñ –≤–∏—Ä–∞–∑–∏ `if` –≤ —ñ–Ω—à–∏—Ö "
"–º–æ–≤–∞—Ö:"

#: src/control-flow/if-expressions.md:7
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut x = 10;\n"
"    if x % 2 == 0 {\n"
"        x = x / 2;\n"
"    } else {\n"
"        x = 3 * x + 1;\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/if-expressions.md:18
msgid ""
"In addition, you can use `if` as an expression. The last expression of each "
"block becomes the value of the `if` expression:"
msgstr ""
"–ö—Ä—ñ–º —Ç–æ–≥–æ, –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `if` —è–∫ –≤–∏—Ä–∞–∑. –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏—Ä–∞–∑ –∫–æ–∂–Ω–æ–≥–æ "
"–±–ª–æ–∫—É —Å—Ç–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è–º –≤–∏—Ä–∞–∑—É if:"

#: src/control-flow/if-expressions.md:22
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut x = 10;\n"
"    x = if x % 2 == 0 {\n"
"        x / 2\n"
"    } else {\n"
"        3 * x + 1\n"
"    };\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/if-expressions.md:35
msgid ""
"Because `if` is an expression and must have a particular type, both of its "
"branch blocks must have the same type. Consider showing what happens if you "
"add `;` after `x / 2` in the second example."
msgstr ""

#: src/control-flow/for-expressions.md:1
msgid "`for` loops"
msgstr "–ø–µ—Ç–ª—ñ `–∑–∞`"

#: src/control-flow/for-expressions.md:3
msgid ""
"The [`for` loop](https://doc.rust-lang.org/std/keyword.for.html) is closely "
"related to the [`while let` loop](while-let-expressions.md). It will "
"automatically call `into_iter()` on the expression and then iterate over it:"
msgstr ""
"–¶–∏–∫–ª [`for`] (https://doc.rust-lang.org/std/keyword.for.html) —Ç—ñ—Å–Ω–æ "
"–ø–æ–≤‚Äô—è–∑–∞–Ω–∏–π —ñ–∑ —Ü–∏–∫–ª–æ–º [`while let`] (while-let-expressions.md). –í—ñ–Ω "
"–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–ª–∏—á–µ `into_iter()` –¥–ª—è –≤–∏—Ä–∞–∑—É, –∞ –ø–æ—Ç—ñ–º –ø–µ—Ä–µ–±–µ—Ä–µ –π–æ–≥–æ:"

#: src/control-flow/for-expressions.md:7
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let v = vec![10, 20, 30];\n"
"\n"
"    for x in v {\n"
"        println!(\"x: {x}\");\n"
"    }\n"
"    \n"
"    for i in (0..10).step_by(2) {\n"
"        println!(\"i: {i}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/for-expressions.md:21
msgid "You can use `break` and `continue` here as usual."
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `break` —ñ `continue` —Ç—É—Ç, —è–∫ –∑–∞–∑–≤–∏—á–∞–π."

#: src/control-flow/for-expressions.md:25
msgid "Index iteration is not a special syntax in Rust for just that case."
msgstr ""
"–Ü—Ç–µ—Ä–∞—Ü—ñ—è —ñ–Ω–¥–µ–∫—Å—É –Ω–µ —î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º —É Rust –ª–∏—à–µ –¥–ª—è —Ü—å–æ–≥–æ –≤–∏–ø–∞–¥–∫—É."

#: src/control-flow/for-expressions.md:26
msgid "`(0..10)` is a range that implements an `Iterator` trait. "
msgstr "\"(0..10)\" ‚Äì —Ü–µ –¥—ñ–∞–ø–∞–∑–æ–Ω, —è–∫–∏–π —Ä–µ–∞–ª—ñ–∑—É—î –æ–∑–Ω–∞–∫—É \"—ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞\"."

#: src/control-flow/for-expressions.md:27
msgid ""
"`step_by` is a method that returns another `Iterator` that skips every other "
"element. "
msgstr ""
"`step_by` ‚Äî —Ü–µ –º–µ—Ç–æ–¥, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î —â–µ –æ–¥–∏–Ω `—ñ—Ç–µ—Ä–∞—Ç–æ—Ä`, —è–∫–∏–π –ø—Ä–æ–ø—É—Å–∫–∞—î –≤—Å—ñ "
"—ñ–Ω—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏."

#: src/control-flow/for-expressions.md:28
msgid ""
"Modify the elements in the vector and explain the compiler errors. Change "
"vector `v` to be mutable and the for loop to `for x in v.iter_mut()`."
msgstr ""
"–ó–º—ñ–Ω—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ —É –≤–µ–∫—Ç–æ—Ä—ñ —Ç–∞ –ø–æ—è—Å–Ω—ñ—Ç—å –ø–æ–º–∏–ª–∫–∏ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞. –ó–º—ñ–Ω—ñ—Ç—å –≤–µ–∫—Ç–æ—Ä "
"`v` –Ω–∞ –∑–º—ñ–Ω–Ω–∏–π, –∞ —Ü–∏–∫–ª for ‚Äî –Ω–∞ `for x —É v.iter_mut()`."

#: src/control-flow/while-expressions.md:1
msgid "`while` loops"
msgstr "—Ü–∏–∫–ª–∏ `while`"

#: src/control-flow/while-expressions.md:3
msgid ""
"The [`while` keyword](https://doc.rust-lang.org/reference/expressions/loop-"
"expr.html#predicate-loops) works very similar to other languages:"
msgstr ""
"–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ [`while`](https://doc.rust-lang.org/reference/expressions/loop-"
"expr.html#predicate-loops) –ø—Ä–∞—Ü—é—î –¥—É–∂–µ –ø–æ–¥—ñ–±–Ω–æ –¥–æ —ñ–Ω—à–∏—Ö –º–æ–≤:"

#: src/control-flow/while-expressions.md:6
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut x = 10;\n"
"    while x != 1 {\n"
"        x = if x % 2 == 0 {\n"
"            x / 2\n"
"        } else {\n"
"            3 * x + 1\n"
"        };\n"
"    }\n"
"    println!(\"Final x: {x}\");\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/break-continue.md:1
msgid "`break` and `continue`"
msgstr "`break` —ñ `continue`"

#: src/control-flow/break-continue.md:3
msgid ""
"If you want to exit a loop early, use [`break`](https://doc.rust-lang.org/"
"reference/expressions/loop-expr.html#break-expressions),"
msgstr ""
"–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏ –∑ —Ü–∏–∫–ª—É —Ä–∞–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ [`break`](https://doc."
"rust-lang.org/reference/expressions/loop-expr.html#break-expressions),"

#: src/control-flow/break-continue.md:4
msgid ""
"If you want to immediately start the next iteration use [`continue`](https://"
"doc.rust-lang.org/reference/expressions/loop-expr.html#continue-expressions)."
msgstr ""
"–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–µ–≥–∞–π–Ω–æ –ø–æ—á–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —ñ—Ç–µ—Ä–∞—Ü—ñ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ "
"[`–ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏`](https://doc.rust-lang.org/reference/expressions/loop-expr."
"html#continue-expressions)."

#: src/control-flow/break-continue.md:7
msgid ""
"Both `continue` and `break` can optionally take a label argument which is "
"used to break out of nested loops:"
msgstr ""
"–Ü `continue`, —ñ `break` –º–æ–∂—É—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø—Ä–∏–π–º–∞—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –º—ñ—Ç–∫–∏, —è–∫–∏–π "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤:"

#: src/control-flow/break-continue.md:10
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let v = vec![10, 20, 30];\n"
"    let mut iter = v.into_iter();\n"
"    'outer: while let Some(x) = iter.next() {\n"
"        println!(\"x: {x}\");\n"
"        let mut i = 0;\n"
"        while i < x {\n"
"            println!(\"x: {x}, i: {i}\");\n"
"            i += 1;\n"
"            if i == 3 {\n"
"                break 'outer;\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/break-continue.md:28
msgid ""
"In this case we break the outer loop after 3 iterations of the inner loop."
msgstr ""
"–£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –º–∏ —Ä–æ–∑—Ä–∏–≤–∞—î–º–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —Ü–∏–∫–ª –ø—ñ—Å–ª—è 3 —ñ—Ç–µ—Ä–∞—Ü—ñ–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ "
"—Ü–∏–∫–ª—É."

#: src/control-flow/loop-expressions.md:1
msgid "`loop` expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ `—Ü–∏–∫–ª—É`"

#: src/control-flow/loop-expressions.md:3
msgid ""
"Finally, there is a [`loop` keyword](https://doc.rust-lang.org/reference/"
"expressions/loop-expr.html#infinite-loops) which creates an endless loop."
msgstr ""
"–ù–∞—Ä–µ—à—Ç—ñ, —î [`loop` –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ](https://doc.rust-lang.org/reference/"
"expressions/loop-expr.html#infinite-loops), —è–∫–µ —Å—Ç–≤–æ—Ä—é—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª."

#: src/control-flow/loop-expressions.md:6
msgid "Here you must either `break` or `return` to stop the loop:"
msgstr "–¢—É—Ç –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∞–±–æ `break`, –∞–±–æ `return`, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ —Ü–∏–∫–ª:"

#: src/control-flow/loop-expressions.md:8
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut x = 10;\n"
"    loop {\n"
"        x = if x % 2 == 0 {\n"
"            x / 2\n"
"        } else {\n"
"            3 * x + 1\n"
"        };\n"
"        if x == 1 {\n"
"            break;\n"
"        }\n"
"    }\n"
"    println!(\"Final x: {x}\");\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/loop-expressions.md:27
msgid "Break the `loop` with a value (e.g. `break 8`) and print it out."
msgstr ""
"–†–æ–∑—ñ—Ä–≤—ñ—Ç—å ¬´—Ü–∏–∫–ª¬ª –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ¬´break 8¬ª) —ñ —Ä–æ–∑–¥—Ä—É–∫—É–π—Ç–µ –π–æ–≥–æ."

#: src/control-flow/loop-expressions.md:28
msgid ""
"Note that `loop` is the only looping construct which returns a non-trivial "
"value. This is because it's guaranteed to be entered at least once (unlike "
"`while` and `for` loops)."
msgstr ""
"–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ `loop` ‚Äî —Ü–µ —î–¥–∏–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ü–∏–∫–ª—É, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–µ—Ç—Ä–∏–≤—ñ–∞–ª—å–Ω–µ "
"–∑–Ω–∞—á–µ–Ω–Ω—è. –¶–µ —Ç–æ–º—É, —â–æ –π–æ–≥–æ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –±—É–¥–µ –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–∏–Ω —Ä–∞–∑ (–Ω–∞ "
"–≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ —Ü–∏–∫–ª—ñ–≤ `while` —ñ `for`)."

#: src/basic-syntax/variables.md:3
msgid ""
"Rust provides type safety via static typing. Variable bindings are immutable "
"by default:"
msgstr ""
"Rust –∑–∞–±–µ–∑–ø–µ—á—É—î –±–µ–∑–ø–µ–∫—É —Ç–∏–ø—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç–∞—Ç–∏—á–Ω–æ—ó —Ç–∏–ø—ñ–∑–∞—Ü—ñ—ó. –ü—Ä–∏–≤'—è–∑–∫–∏ "
"–∑–º—ñ–Ω–Ω–∏—Ö –Ω–µ–∑–º—ñ–Ω–Ω—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º:"

#: src/basic-syntax/variables.md:6
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let x: i32 = 10;\n"
"    println!(\"x: {x}\");\n"
"    // x = 20;\n"
"    // println!(\"x: {x}\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/variables.md:17
msgid ""
"Due to type inference the `i32` is optional. We will gradually show the "
"types less and less as the course progresses."
msgstr ""
"–ß–µ—Ä–µ–∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É `i32` —î –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º. –ú–∏ –ø–æ—Å—Ç—É–ø–æ–≤–æ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏–º–µ–º–æ "
"—Ç–∏–ø–∏ –≤—Å–µ —Ä—ñ–¥—à–µ –≤ –º—ñ—Ä—É –ø—Ä–æ—Å—É–≤–∞–Ω–Ω—è –∫—É—Ä—Å—É."

#: src/basic-syntax/type-inference.md:3
msgid "Rust will look at how the variable is _used_ to determine the type:"
msgstr "Rust –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç—å, —è–∫ _–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è_ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É:"

#: src/basic-syntax/type-inference.md:5
msgid ""
"```rust,editable\n"
"fn takes_u32(x: u32) {\n"
"    println!(\"u32: {x}\");\n"
"}\n"
"\n"
"fn takes_i8(y: i8) {\n"
"    println!(\"i8: {y}\");\n"
"}\n"
"\n"
"fn main() {\n"
"    let x = 10;\n"
"    let y = 20;\n"
"\n"
"    takes_u32(x);\n"
"    takes_i8(y);\n"
"    // takes_u32(y);\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/type-inference.md:26
msgid ""
"This slide demonstrates how the Rust compiler infers types based on "
"constraints given by variable declarations and usages."
msgstr ""
"–ù–∞ —Ü—å–æ–º—É —Å–ª–∞–π–¥—ñ –ø–æ–∫–∞–∑–∞–Ω–æ, —è–∫ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä Rust –≤–∏–≤–æ–¥–∏—Ç—å —Ç–∏–ø–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ "
"–æ–±–º–µ–∂–µ–Ω—å, –∑–∞–¥–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è–º–∏ –∑–º—ñ–Ω–Ω–∏—Ö —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º."

#: src/basic-syntax/type-inference.md:28
msgid ""
"It is very important to emphasize that variables declared like this are not "
"of some sort of dynamic \"any type\" that can hold any data. The machine "
"code generated by such declaration is identical to the explicit declaration "
"of a type. The compiler does the job for us and helps us write more concise "
"code."
msgstr ""
"–î—É–∂–µ –≤–∞–∂–ª–∏–≤–æ –ø—ñ–¥–∫—Ä–µ—Å–ª–∏—Ç–∏, —â–æ –∑–º—ñ–Ω–Ω—ñ, –æ–≥–æ–ª–æ—à–µ–Ω—ñ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º, –Ω–µ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ "
"—è–∫–æ–≥–æ—Å—å –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ ¬´–±—É–¥—å-—è–∫–æ–≥–æ —Ç–∏–ø—É¬ª, —è–∫–∏–π –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –±—É–¥—å-—è–∫—ñ –¥–∞–Ω—ñ. "
"–ú–∞—à–∏–Ω–Ω–∏–π –∫–æ–¥, –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Ç–∞–∫–æ—é –¥–µ–∫–ª–∞—Ä–∞—Ü—ñ—î—é, —ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–π —è–≤–Ω–æ–º—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—é "
"—Ç–∏–ø—É. –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä –≤–∏–∫–æ–Ω—É—î —Ä–æ–±–æ—Ç—É –∑–∞ –Ω–∞—Å —ñ –¥–æ–ø–æ–º–∞–≥–∞—î –Ω–∞–º –ø–∏—Å–∞—Ç–∏ –±—ñ–ª—å—à —Å—Ç–∏—Å–ª–∏–π "
"–∫–æ–¥."

#: src/basic-syntax/type-inference.md:32
msgid ""
"The following code tells the compiler to copy into a certain generic "
"container without the code ever explicitly specifying the contained type, "
"using `_` as a placeholder:"
msgstr ""
"–ù–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ –∫–æ–¥ –ø–æ–≤—ñ–¥–æ–º–ª—è—î –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä—É —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤ –ø–µ–≤–Ω–∏–π –∑–∞–≥–∞–ª—å–Ω–∏–π "
"–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–µ–∑ —è–≤–Ω–æ–≥–æ –≤–∫–∞–∑—ñ–≤–∫–∏ –∫–æ–¥—É —Ç–∏–ø—É, —â–æ –º—ñ—Å—Ç–∏—Ç—å—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `_` —è–∫ "
"–∑–∞–ø–æ–≤–Ω—é–≤–∞—á:"

#: src/basic-syntax/type-inference.md:34
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut v = Vec::new();\n"
"    v.push((10, false));\n"
"    v.push((20, true));\n"
"    println!(\"v: {v:?}\");\n"
"\n"
"    let vv = v.iter().collect::<std::collections::HashSet<_>>();\n"
"    println!(\"vv: {vv:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/type-inference.md:46
msgid ""
"[`collect`](https://doc.rust-lang.org/stable/std/iter/trait.Iterator."
"html#method.collect) relies on [`FromIterator`](https://doc.rust-lang.org/"
"std/iter/trait.FromIterator.html), which [`HashSet`](https://doc.rust-lang."
"org/std/collections/struct.HashSet.html#impl-FromIterator%3CT%3E-for-"
"HashSet%3CT,+S%3E) implements."
msgstr ""
"[`collect`](https://doc.rust-lang.org/stable/std/iter/trait.Iterator."
"html#method.collect) –ø–æ–∫–ª–∞–¥–∞—î—Ç—å—Å—è –Ω–∞ [`FromIterator`](https://doc.rust- lang."
"org/std/iter/trait.FromIterator.html), —è–∫–∏–π [`HashSet`](https://doc.rust-"
"lang.org/std/collections/struct.HashSet.html#impl-FromIterator%3CT% 3E-for-"
"HashSet%3CT,+S%3E)."

#: src/basic-syntax/static-and-const.md:1
msgid "Static and Constant Variables"
msgstr "–°—Ç–∞—Ç–∏—á–Ω—ñ —Ç–∞ –ø–æ—Å—Ç—ñ–π–Ω—ñ –∑–º—ñ–Ω–Ω—ñ"

#: src/basic-syntax/static-and-const.md:3
msgid ""
"Static and constant variables are two different ways to create globally-"
"scoped values that cannot be moved or reallocated during the execution of "
"the program. "
msgstr ""
"–°—Ç–∞—Ç–∏—á–Ω—ñ —Ç–∞ –ø–æ—Å—Ç—ñ–π–Ω—ñ –∑–º—ñ–Ω–Ω—ñ ‚Äî —Ü–µ –¥–≤–∞ —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö "
"–∑–Ω–∞—á–µ–Ω—å, —è–∫—ñ –Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —á–∏ –ø–µ—Ä–µ—Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è "
"–ø—Ä–æ–≥—Ä–∞–º–∏."

#: src/basic-syntax/static-and-const.md:6
msgid "`const`"
msgstr "`const`"

#: src/basic-syntax/static-and-const.md:8
msgid ""
"Constant variables are evaluated at compile time and their values are "
"inlined wherever they are used:"
msgstr ""
"–ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ü—ñ–Ω—é—é—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó, –∞ —ó—Ö–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è "
"–≤—Å—Ç–∞–≤–ª—è—é—Ç—å—Å—è —Å–∫—Ä—ñ–∑—å, –¥–µ –≤–æ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è:"

#: src/basic-syntax/static-and-const.md:11
msgid ""
"```rust,editable\n"
"const DIGEST_SIZE: usize = 3;\n"
"const ZERO: Option<u8> = Some(42);\n"
"\n"
"fn compute_digest(text: &str) -> [u8; DIGEST_SIZE] {\n"
"    let mut digest = [ZERO.unwrap_or(0); DIGEST_SIZE];\n"
"    for (idx, &b) in text.as_bytes().iter().enumerate() {\n"
"        digest[idx % DIGEST_SIZE] = digest[idx % DIGEST_SIZE]."
"wrapping_add(b);\n"
"    }\n"
"    digest\n"
"}\n"
"\n"
"fn main() {\n"
"    let digest = compute_digest(\"Hello\");\n"
"    println!(\"Digest: {digest:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/static-and-const.md:29
msgid ""
"According to the [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html) these are inlined upon use."
msgstr ""
"–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ [–ö–Ω–∏–≥–∏ RFC RFC] (https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html) –≤–æ–Ω–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è."

#: src/basic-syntax/static-and-const.md:31
msgid ""
"Only functions marked `const` can be called at compile time to generate "
"`const` values. `const` functions can however be called at runtime."
msgstr ""
"–õ–∏—à–µ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é `const` –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –¥–ª—è "
"—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å `const`. –û–¥–Ω–∞–∫ —Ñ—É–Ω–∫—Ü—ñ—ó `const` –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å "
"–≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/basic-syntax/static-and-const.md:33
msgid "`static`"
msgstr "`—Å—Ç–∞—Ç–∏—á–Ω–∏–π`"

#: src/basic-syntax/static-and-const.md:35
msgid ""
"Static variables will live during the whole execution of the program, and "
"therefore will not move:"
msgstr ""
"–°—Ç–∞—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –±—É–¥—É—Ç—å –∂–∏—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏, —Ç–æ–º—É –Ω–µ "
"–±—É–¥—É—Ç—å –ø–µ—Ä–µ–º—ñ—â–∞—Ç–∏—Å—è:"

#: src/basic-syntax/static-and-const.md:37
msgid ""
"```rust,editable\n"
"static BANNER: &str = \"Welcome to RustOS 3.14\";\n"
"\n"
"fn main() {\n"
"    println!(\"{BANNER}\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/static-and-const.md:45
msgid ""
"As noted in the [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html), these are not inlined upon use and have an actual "
"associated memory location.  This is useful for unsafe and  embedded code, "
"and the variable lives through the entirety of the program execution. When a "
"globally-scoped value does not have a reason to need object identity, "
"`const` is generally preferred."
msgstr ""
"–Ø–∫ –∑–∞–∑–Ω–∞—á–µ–Ω–æ –≤ [–ö–Ω–∏–∑—ñ Rust RFC](https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html), –≤–æ–Ω–∏ –Ω–µ –≤–±—É–¥–æ–≤—É—é—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞ –º–∞—é—Ç—å —Ñ–∞–∫—Ç–∏—á–Ω–µ "
"–ø–æ–≤‚Äô—è–∑–∞–Ω–µ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –≤ –ø–∞–º‚Äô—è—Ç—ñ. –¶–µ –∫–æ—Ä–∏—Å–Ω–æ –¥–ª—è –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ç–∞ –≤–±—É–¥–æ–≤–∞–Ω–æ–≥–æ "
"–∫–æ–¥—É, —ñ –∑–º—ñ–Ω–Ω–∞ –∂–∏–≤–µ –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏. –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è "
"–≥–ª–æ–±–∞–ª—å–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î —ñ–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—ñ –æ–±‚Äô—î–∫—Ç–∞, –ø–µ—Ä–µ–≤–∞–≥–∞ "
"–Ω–∞–¥–∞—î—Ç—å—Å—è `const`."

#: src/basic-syntax/static-and-const.md:49
msgid ""
"Because `static` variables are accessible from any thread, they must be "
"`Sync`. Interior mutability is possible through a [`Mutex`](https://doc.rust-"
"lang.org/std/sync/struct.Mutex.html), atomic or similar. It is also possible "
"to have mutable statics, but they require manual synchronisation so any "
"access to them requires `unsafe` code. We will look at [mutable statics](../"
"unsafe/mutable-static-variables.md) in the chapter on Unsafe Rust."
msgstr ""
"–û—Å–∫—ñ–ª—å–∫–∏ `static` –∑–º—ñ–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –ø–æ—Ç–æ–∫—É, –≤–æ–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ "
"`Sync`. –í–Ω—É—Ç—Ä—ñ—à–Ω—è –∑–º—ñ–Ω–Ω—ñ—Å—Ç—å –º–æ–∂–ª–∏–≤–∞ —á–µ—Ä–µ–∑ [`Mutex`](https://doc.rust-lang."
"org/std/sync/struct.Mutex.html), –∞—Ç–æ–º–∞—Ä–Ω–∏–π –∞–±–æ –ø–æ–¥—ñ–±–Ω–∏–π. –¢–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –º–∞—Ç–∏ "
"–∑–º—ñ–Ω–Ω—É —Å—Ç–∞—Ç–∏–∫—É, –∞–ª–µ –≤–æ–Ω–∞ –ø–æ—Ç—Ä–µ–±—É—î —Ä—É—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó, —Ç–æ–º—É –±—É–¥—å-—è–∫–∏–π "
"–¥–æ—Å—Ç—É–ø –¥–æ –Ω–∏—Ö –ø–æ—Ç—Ä–µ–±—É—î `–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ` –∫–æ–¥—É. –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ [–∑–º—ñ–Ω–Ω—É —Å—Ç–∞—Ç–∏–∫—É]"
"(../unsafe/mutable-static-variables.md) —É —Ä–æ–∑–¥—ñ–ª—ñ –ø—Ä–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π Rust."

#: src/basic-syntax/static-and-const.md:57
msgid "Mention that `const` behaves semantically similar to C++'s `constexpr`."
msgstr "–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ `const` –ø–æ–≤–æ–¥–∏—Ç—å—Å—è —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ –ø–æ–¥—ñ–±–Ω–æ –¥–æ `constexpr` C++."

#: src/basic-syntax/static-and-const.md:58
msgid ""
"`static`, on the other hand, is much more similar to a `const` or mutable "
"global variable in C++."
msgstr ""
"`static`, –∑ —ñ–Ω—à–æ–≥–æ –±–æ–∫—É, –Ω–∞–±–∞–≥–∞—Ç–æ –±—ñ–ª—å—à–µ —Å—Ö–æ–∂–∏–π –Ω–∞ `const` –∞–±–æ –∑–º—ñ–Ω–Ω—É "
"–≥–ª–æ–±–∞–ª—å–Ω—É –∑–º—ñ–Ω–Ω—É –≤ C++."

#: src/basic-syntax/static-and-const.md:59
msgid ""
"`static` provides object identity: an address in memory and state as "
"required by types with interior mutability such as `Mutex<T>`."
msgstr ""
"`static` –∑–∞–±–µ–∑–ø–µ—á—É—î —ñ–¥–µ–Ω—Ç–∏—á–Ω—ñ—Å—Ç—å –æ–±‚Äô—î–∫—Ç–∞: –∞–¥—Ä–µ—Å—É –≤ –ø–∞–º‚Äô—è—Ç—ñ —Ç–∞ —Å—Ç–∞–Ω "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ç–∏–ø—ñ–≤ —ñ–∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—é –∑–º—ñ–Ω–Ω—ñ—Å—Ç—é, —Ç–∞–∫–∏—Ö —è–∫ `Mutex<T>`."

#: src/basic-syntax/static-and-const.md:60
msgid ""
"It isn't super common that one would need a runtime evaluated constant, but "
"it is helpful and safer than using a static."
msgstr ""
"–¶–µ –Ω–µ –Ω–∞–¥—Ç–æ –ø–æ—à–∏—Ä–µ–Ω–µ —è–≤–∏—â–µ, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∑ –æ—Ü—ñ–Ω–∫–æ—é —á–∞—Å—É "
"–≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –∞–ª–µ —Ü–µ –∫–æ—Ä–∏—Å–Ω–æ —Ç–∞ –±–µ–∑–ø–µ—á–Ω—ñ—à–µ, –Ω—ñ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ static."

#: src/basic-syntax/static-and-const.md:61
msgid "`thread_local` data can be created with the macro `std::thread_local`."
msgstr ""
"–î–∞–Ω—ñ `thread_local` –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–∞–∫—Ä–æ—Å—É `std::thread_local`."

#: src/basic-syntax/static-and-const.md:63
msgid "Properties table:"
msgstr "–¢–∞–±–ª–∏—Ü—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π:"

#: src/basic-syntax/static-and-const.md:65
msgid "Property"
msgstr "–í–ª–∞—Å–Ω—ñ—Å—Ç—å"

#: src/basic-syntax/static-and-const.md:65
msgid "Static"
msgstr "–°—Ç–∞—Ç–∏—á–Ω–∏–π"

#: src/basic-syntax/static-and-const.md:65
msgid "Constant"
msgstr "–ü–æ—Å—Ç—ñ–π–Ω–∏–π"

#: src/basic-syntax/static-and-const.md:67
msgid "Has an address in memory"
msgstr "–ú–∞—î –∞–¥—Ä–µ—Å—É –≤ –ø–∞–º'—è—Ç—ñ"

#: src/basic-syntax/static-and-const.md:67
#: src/basic-syntax/static-and-const.md:68
#: src/basic-syntax/static-and-const.md:70
#: src/basic-syntax/static-and-const.md:71
msgid "Yes"
msgstr "–¢–∞–∫"

#: src/basic-syntax/static-and-const.md:67
msgid "No (inlined)"
msgstr "–ù—ñ (–≤—Å—Ç–∞–≤–ª–µ–Ω–æ)"

#: src/basic-syntax/static-and-const.md:68
msgid "Lives for the entire duration of the program"
msgstr "–ñ–∏–≤–µ –ø—Ä–æ—Ç—è–≥–æ–º —É—Å—å–æ–≥–æ —Ç–µ—Ä–º—ñ–Ω—É –ø—Ä–æ–≥—Ä–∞–º–∏"

#: src/basic-syntax/static-and-const.md:68
#: src/basic-syntax/static-and-const.md:69
#: src/basic-syntax/static-and-const.md:71
msgid "No"
msgstr "–ù–µ–º–∞—î"

#: src/basic-syntax/static-and-const.md:69
msgid "Can be mutable"
msgstr "–ú–æ–∂–µ –±—É—Ç–∏ –∑–º—ñ–Ω–Ω–∏–º"

#: src/basic-syntax/static-and-const.md:69
msgid "Yes (unsafe)"
msgstr "–¢–∞–∫ (–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ)"

#: src/basic-syntax/static-and-const.md:70
msgid "Evaluated at compile time"
msgstr "–û—Ü—ñ–Ω—é—î—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó"

#: src/basic-syntax/static-and-const.md:70
msgid "Yes (initialised at compile time)"
msgstr "–¢–∞–∫ (—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó)"

#: src/basic-syntax/static-and-const.md:71
msgid "Inlined wherever it is used"
msgstr "–í–±—É–¥–æ–≤–∞–Ω–∏–π —Å–∫—Ä—ñ–∑—å, –¥–µ –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è"

#: src/basic-syntax/scopes-shadowing.md:3
msgid ""
"You can shadow variables, both those from outer scopes and variables from "
"the same scope:"
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Ç—ñ–Ω—è—Ç–∏ –∑–º—ñ–Ω–Ω—ñ, —è–∫ —ñ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –æ–±–ª–∞—Å—Ç–µ–π, —Ç–∞–∫ —ñ –∑–º—ñ–Ω–Ω—ñ –∑ —Ç—ñ—î—ó –∂ "
"–æ–±–ª–∞—Å—Ç—ñ:"

#: src/basic-syntax/scopes-shadowing.md:6
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let a = 10;\n"
"    println!(\"before: {a}\");\n"
"\n"
"    {\n"
"        let a = \"hello\";\n"
"        println!(\"inner scope: {a}\");\n"
"\n"
"        let a = true;\n"
"        println!(\"shadowed in inner scope: {a}\");\n"
"    }\n"
"\n"
"    println!(\"after: {a}\");\n"
"}\n"
"```"
msgstr ""

#: src/basic-syntax/scopes-shadowing.md:25
msgid ""
"Definition: Shadowing is different from mutation, because after shadowing "
"both variable's memory locations exist at the same time. Both are available "
"under the same name, depending where you use it in the code. "
msgstr ""
"–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –∑–∞—Ç—ñ–Ω–µ–Ω–Ω—è –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ –º—É—Ç–∞—Ü—ñ—ó, –æ—Å–∫—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –∑–∞—Ç—ñ–Ω–µ–Ω–Ω—è "
"–æ–±–∏–¥–≤—ñ –æ–±–ª–∞—Å—Ç—ñ –ø–∞–º‚Äô—è—Ç—ñ –∑–º—ñ–Ω–Ω–æ—ó —ñ—Å–Ω—É—é—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–æ. –û–±–∏–¥–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—ñ–¥ "
"–æ–¥–Ω–∞–∫–æ–≤–æ—é –Ω–∞–∑–≤–æ—é, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, –¥–µ –≤–∏ —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –≤ –∫–æ–¥—ñ."

#: src/basic-syntax/scopes-shadowing.md:26
msgid "A shadowing variable can have a different type. "
msgstr "–ó–º—ñ–Ω–Ω–∞ –∑–∞—Ç—ñ–Ω–µ–Ω–Ω—è –º–æ–∂–µ –º–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–∏–ø."

#: src/basic-syntax/scopes-shadowing.md:27
msgid ""
"Shadowing looks obscure at first, but is convenient for holding on to values "
"after `.unwrap()`."
msgstr ""
"–ó–∞—Ç—ñ–Ω–µ–Ω–Ω—è —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–≥–ª—è–¥–∞—î –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–º, –∞–ª–µ –∑—Ä—É—á–Ω–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å "
"–ø—ñ—Å–ª—è `.unwrap()`."

#: src/basic-syntax/scopes-shadowing.md:28
msgid ""
"The following code demonstrates why the compiler can't simply reuse memory "
"locations when shadowing an immutable variable in a scope, even if the type "
"does not change."
msgstr ""
"–ù–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î, —á–æ–º—É –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –Ω–µ –º–æ–∂–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—ñ –ø—ñ–¥ —á–∞—Å –∑–∞—Ç—ñ–Ω–µ–Ω–Ω—è –Ω–µ–∑–º—ñ–Ω–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó –≤ "
"–æ–±–ª–∞—Å—Ç—ñ, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç–∏–ø –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è."

#: src/basic-syntax/scopes-shadowing.md:30
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let a = 1;\n"
"    let b = &a;\n"
"    let a = a + 1;\n"
"    println!(\"{a} {b}\");\n"
"}\n"
"```"
msgstr ""

#: src/enums.md:3
msgid ""
"The `enum` keyword allows the creation of a type which has a few different "
"variants:"
msgstr ""
"–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ `enum` –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–ø, —è–∫–∏–π –º–∞—î –∫—ñ–ª—å–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:"

#: src/enums.md:6
msgid ""
"```rust,editable\n"
"fn generate_random_number() -> i32 {\n"
"    // Implementation based on https://xkcd.com/221/\n"
"    4  // Chosen by fair dice roll. Guaranteed to be random.\n"
"}\n"
"\n"
"#[derive(Debug)]\n"
"enum CoinFlip {\n"
"    Heads,\n"
"    Tails,\n"
"}\n"
"\n"
"fn flip_coin() -> CoinFlip {\n"
"    let random_number = generate_random_number();\n"
"    if random_number % 2 == 0 {\n"
"        return CoinFlip::Heads;\n"
"    } else {\n"
"        return CoinFlip::Tails;\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    println!(\"You got: {:?}\", flip_coin());\n"
"}\n"
"```"
msgstr ""

#: src/enums.md:36
msgid "Enumerations allow you to collect a set of values under one type"
msgstr "–ü–µ—Ä–µ—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∑—ñ–±—Ä–∞—Ç–∏ –Ω–∞–±—ñ—Ä –∑–Ω–∞—á–µ–Ω—å –ø—ñ–¥ –æ–¥–∏–Ω —Ç–∏–ø"

#: src/enums.md:37
msgid ""
"This page offers an enum type `CoinFlip` with two variants `Heads` and "
"`Tails`. You might note the namespace when using variants."
msgstr ""
"–¶—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–æ–ø–æ–Ω—É—î —Ç–∏–ø –ø–µ—Ä–µ–ª—ñ–∫—É `CoinFlip` –∑ –¥–≤–æ–º–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ `Heads` —ñ "
"`Tails`. –í–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É –Ω–∞ –ø—Ä–æ—Å—Ç—ñ—Ä —ñ–º–µ–Ω –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è "
"–≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤."

#: src/enums.md:38
msgid "This might be a good time to compare Structs and Enums:"
msgstr "–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –≥–∞—Ä–Ω–∏–π —á–∞—Å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è Structs —ñ Enum:"

#: src/enums.md:39
msgid ""
"In both, you can have a simple version without fields (unit struct) or one "
"with different types of fields (variant payloads). "
msgstr ""
"–í –æ–±–æ—Ö –≤–∏ –º–æ–∂–µ—Ç–µ –º–∞—Ç–∏ –ø—Ä–æ—Å—Ç—É –≤–µ—Ä—Å—ñ—é –±–µ–∑ –ø–æ–ª—ñ–≤ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–¥–∏–Ω–∏—Ü—å) –∞–±–æ –∑ "
"—Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –ø–æ–ª—ñ–≤ (–≤–∞—Ä—ñ–∞–Ω—Ç–Ω—ñ –∫–æ—Ä–∏—Å–Ω—ñ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)."

#: src/enums.md:40
msgid "In both, associated functions are defined within an `impl` block."
msgstr "–í –æ–±–æ—Ö –∞—Å–æ—Ü—ñ–π–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤ –±–ª–æ—Ü—ñ `impl`."

#: src/enums.md:41
msgid ""
"You could even implement the different variants of an enum with separate "
"structs but then they wouldn‚Äôt be the same type as they would if they were "
"all defined in an enum. "
msgstr ""
"–í–∏ –Ω–∞–≤—ñ—Ç—å –º–æ–∂–µ—Ç–µ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ enum –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–∫—Ä–µ–º–∏—Ö "
"—Å—Ç—Ä—É–∫—Ç—É—Ä, –∞–ª–µ —Ç–æ–¥—ñ –≤–æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç—å —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ —Ç–∏–ø—É, —è–∫–±–∏ –≤–æ–Ω–∏ –±—É–ª–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ "
"–≤ enum."

#: src/enums/variant-payloads.md:3
msgid ""
"You can define richer enums where the variants carry data. You can then use "
"the `match` statement to extract the data from each variant:"
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –±—ñ–ª—å—à –±–∞–≥–∞—Ç—ñ –ø–µ—Ä–µ–ª—ñ–∫–∏, –¥–µ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–µ—Å—É—Ç—å –¥–∞–Ω—ñ. –ü–æ—Ç—ñ–º –≤–∏ "
"–º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä `match`, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –∫–æ–∂–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É:"

#: src/enums/variant-payloads.md:6
msgid ""
"```rust,editable\n"
"enum WebEvent {\n"
"    PageLoad,                 // Variant without payload\n"
"    KeyPress(char),           // Tuple struct variant\n"
"    Click { x: i64, y: i64 }, // Full struct variant\n"
"}\n"
"\n"
"#[rustfmt::skip]\n"
"fn inspect(event: WebEvent) {\n"
"    match event {\n"
"        WebEvent::PageLoad       => println!(\"page loaded\"),\n"
"        WebEvent::KeyPress(c)    => println!(\"pressed '{c}'\"),\n"
"        WebEvent::Click { x, y } => println!(\"clicked at x={x}, y={y}\"),\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let load = WebEvent::PageLoad;\n"
"    let press = WebEvent::KeyPress('x');\n"
"    let click = WebEvent::Click { x: 20, y: 80 };\n"
"\n"
"    inspect(load);\n"
"    inspect(press);\n"
"    inspect(click);\n"
"}\n"
"```"
msgstr ""

#: src/enums/variant-payloads.md:35
msgid ""
"The values in the enum variants can only be accessed after being pattern "
"matched. The pattern binds references to the fields in the \"match arm\" "
"after the `=>`."
msgstr ""
"–î–æ—Å—Ç—É–ø –¥–æ –∑–Ω–∞—á–µ–Ω—å —É –≤–∞—Ä—ñ–∞–Ω—Ç–∞—Ö –ø–µ—Ä–µ–ª—ñ–∫—É –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–∏—à–µ –ø—ñ—Å–ª—è "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —à–∞–±–ª–æ–Ω—É. –®–∞–±–ª–æ–Ω –ø—Ä–∏–≤‚Äô—è–∑—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–æ –ø–æ–ª—ñ–≤ —É ¬´—Ä—É—Ü—ñ "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ¬ª –ø—ñ—Å–ª—è `=>`."

#: src/enums/variant-payloads.md:36
msgid ""
"The expression is matched against the patterns from top to bottom. There is "
"no fall-through like in C or C++."
msgstr ""
"–í–∏—Ä–∞–∑ –∑—ñ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è —ñ–∑ —à–∞–±–ª–æ–Ω–∞–º–∏ –∑–≤–µ—Ä—Ö—É –≤–Ω–∏–∑. –ù–µ–º–∞—î –ø—Ä–æ–≤–∞–ª—ñ–≤, —è–∫ —É C –∞–±–æ C++."

#: src/enums/variant-payloads.md:37
msgid ""
"The match expression has a value. The value is the last expression in the "
"match arm which was executed."
msgstr ""
"–í–∏—Ä–∞–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è. –ó–Ω–∞—á–µ–Ω–Ω—è ‚Äî —Ü–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏—Ä–∞–∑ —É –≥—Ä—É–ø—ñ "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ, —è–∫–∏–π –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–æ."

#: src/enums/variant-payloads.md:38
msgid ""
"Starting from the top we look for what pattern matches the value then run "
"the code following the arrow. Once we find a match, we stop. "
msgstr ""
"–ü–æ—á–∏–Ω–∞—é—á–∏ –∑–≥–æ—Ä–∏, –º–∏ —à—É–∫–∞—î–º–æ, —è–∫–∏–π —à–∞–±–ª–æ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–Ω–∞—á–µ–Ω–Ω—é, –∞ –ø–æ—Ç—ñ–º "
"–∑–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–¥ –∑–∞ —Å—Ç—Ä—ñ–ª–∫–æ—é. –ö–æ–ª–∏ –º–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ –∑–±—ñ–≥, –º–∏ –∑—É–ø–∏–Ω—è—î–º–æ—Å—å."

#: src/enums/variant-payloads.md:39
msgid ""
"Demonstrate what happens when the search is inexhaustive. Note the advantage "
"the Rust compiler provides by confirming when all cases are handled. "
msgstr ""
"–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–π—Ç–µ, —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ –ø–æ—à—É–∫ —î –Ω–µ–≤–∏—á–µ—Ä–ø–Ω–∏–º. –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É "
"–Ω–∞ –ø–µ—Ä–µ–≤–∞–≥—É, —è–∫—É –Ω–∞–¥–∞—î –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä Rust, –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—á–∏, –∫–æ–ª–∏ –≤—Å—ñ –≤–∏–ø–∞–¥–∫–∏ "
"–æ–±—Ä–æ–±–ª–µ–Ω–æ."

#: src/enums/variant-payloads.md:40
msgid "`match` inspects a hidden discriminant field in the `enum`."
msgstr "`match` –ø–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç–Ω–µ –ø–æ–ª–µ –≤ `enum`."

#: src/enums/variant-payloads.md:41
msgid ""
"It is possible to retrieve the discriminant by calling `std::mem::"
"discriminant()`"
msgstr "–ú–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç, –≤–∏–∫–ª–∏–∫–∞–≤—à–∏ `std::mem::discriminant()`"

#: src/enums/variant-payloads.md:42
msgid ""
"This is useful, for example, if implementing `PartialEq` for structs where "
"comparing field values doesn't affect equality."
msgstr ""
"–¶–µ –∫–æ—Ä–∏—Å–Ω–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ `PartialEq` –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä, –¥–µ "
"–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –ø–æ–ª—ñ–≤ –Ω–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ —Ä—ñ–≤–Ω—ñ—Å—Ç—å."

#: src/enums/variant-payloads.md:43
msgid ""
"`WebEvent::Click { ... }` is not exactly the same as `WebEvent::"
"Click(Click)` with a top level `struct Click { ... }`. The inlined version "
"cannot implement traits, for example."
msgstr ""
"`WebEvent::Click { ... }` –Ω–µ –∑–æ–≤—Å—ñ–º —Ç–µ —Å–∞–º–µ, —â–æ `WebEvent::Click(Click)` –∑ "
"–≤–µ—Ä—Ö–Ω—å–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é `struct Click { ... }`. –í–±—É–¥–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –Ω–µ –º–æ–∂–µ "
"—Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ–∑–Ω–∞–∫–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥."

#: src/enums/sizes.md:3
msgid ""
"Rust enums are packed tightly, taking constraints due to alignment into "
"account:"
msgstr ""
"–ü–µ—Ä–µ–ª—ñ–∫–∏ Rust —É–ø–∞–∫–æ–≤–∞–Ω—ñ —â—ñ–ª—å–Ω–æ, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è:"

#: src/enums/sizes.md:5
msgid ""
"```rust,editable\n"
"use std::any::type_name;\n"
"use std::mem::{align_of, size_of};\n"
"\n"
"fn dbg_size<T>() {\n"
"    println!(\"{}: size {} bytes, align: {} bytes\",\n"
"        type_name::<T>(), size_of::<T>(), align_of::<T>());\n"
"}\n"
"\n"
"enum Foo {\n"
"    A,\n"
"    B,\n"
"}\n"
"\n"
"fn main() {\n"
"    dbg_size::<Foo>();\n"
"}\n"
"```"
msgstr ""

#: src/enums/sizes.md:24
msgid ""
"See the [Rust Reference](https://doc.rust-lang.org/reference/type-layout."
"html)."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ [–¥–æ–≤—ñ–¥–Ω–∏–∫ Rust](https://doc.rust-lang.org/reference/type-layout."
"html)."

#: src/enums/sizes.md:30
msgid ""
"Internally Rust is using a field (discriminant) to keep track of the enum "
"variant."
msgstr ""
"–í–Ω—É—Ç—Ä—ñ—à–Ω—å–æ Rust –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ–ª–µ (–¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç), —â–æ–± –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤–∞—Ä—ñ–∞–Ω—Ç "
"–ø–µ—Ä–µ–ª—ñ–∫—É."

#: src/enums/sizes.md:32
msgid ""
"You can control the discriminant if needed (e.g., for compatibility with C):"
msgstr ""
"–ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –º–æ–∂–Ω–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ C):"

#: src/enums/sizes.md:34
msgid ""
"```rust,editable\n"
"#[repr(u32)]\n"
"enum Bar {\n"
"    A,  // 0\n"
"    B = 10000,\n"
"    C,  // 10001\n"
"}\n"
"\n"
"fn main() {\n"
"    println!(\"A: {}\", Bar::A as u32);\n"
"    println!(\"B: {}\", Bar::B as u32);\n"
"    println!(\"C: {}\", Bar::C as u32);\n"
"}\n"
"```"
msgstr ""

#: src/enums/sizes.md:49
msgid ""
"Without `repr`, the discriminant type takes 2 bytes, because 10001 fits 2 "
"bytes."
msgstr ""
"–ë–µ–∑ `repr` —Ç–∏–ø –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç–∞ –∑–∞–π–º–∞—î 2 –±–∞–π—Ç–∏, –æ—Å–∫—ñ–ª—å–∫–∏ 10001 –≤–º—ñ—â—É—î 2 –±–∞–π—Ç–∏."

#: src/enums/sizes.md:53
msgid "Try out other types such as"
msgstr "–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ —Ç–∏–ø–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥"

#: src/enums/sizes.md:55
msgid "`dbg_size!(bool)`: size 1 bytes, align: 1 bytes,"
msgstr "`dbg_size!(bool)`: —Ä–æ–∑–º—ñ—Ä 1 –±–∞–π—Ç, –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è: 1 –±–∞–π—Ç,"

#: src/enums/sizes.md:56
msgid ""
"`dbg_size!(Option<bool>)`: size 1 bytes, align: 1 bytes (niche optimization, "
"see below),"
msgstr ""
"`dbg_size!(Option<bool>)`: —Ä–æ–∑–º—ñ—Ä 1 –±–∞–π—Ç, –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è: 1 –±–∞–π—Ç (–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è "
"–Ω—ñ—à—ñ, –¥–∏–≤. –Ω–∏–∂—á–µ),"

#: src/enums/sizes.md:57
msgid "`dbg_size!(&i32)`: size 8 bytes, align: 8 bytes (on a 64-bit machine),"
msgstr ""
"`dbg_size!(&i32)`: —Ä–æ–∑–º—ñ—Ä 8 –±–∞–π—Ç, –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è: 8 –±–∞–π—Ç (–Ω–∞ 64-–±—ñ—Ç–Ω—ñ–π –º–∞—à–∏–Ω—ñ),"

#: src/enums/sizes.md:58
msgid ""
"`dbg_size!(Option<&i32>)`: size 8 bytes, align: 8 bytes (null pointer "
"optimization, see below)."
msgstr ""
"`dbg_size!(Option<&i32>)`: —Ä–æ–∑–º—ñ—Ä 8 –±–∞–π—Ç—ñ–≤, –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è: 8 –±–∞–π—Ç—ñ–≤ "
"(–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω—É–ª—å–æ–≤–æ–≥–æ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫–∞, –¥–∏–≤. –Ω–∏–∂—á–µ)."

#: src/enums/sizes.md:60
msgid ""
"Niche optimization: Rust will merge unused bit patterns for the enum "
"discriminant."
msgstr ""
"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω—ñ—à—ñ: Rust –æ–±‚Äô—î–¥–Ω–∞—î –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –±—ñ—Ç—ñ–≤ –¥–ª—è "
"–¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç–∞ enum."

#: src/enums/sizes.md:63
msgid ""
"Null pointer optimization: For [some types](https://doc.rust-lang.org/std/"
"option/#representation), Rust guarantees that `size_of::<T>()` equals "
"`size_of::<Option<T>>()`."
msgstr ""
"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω—É–ª—å–æ–≤–æ–≥–æ –ø–æ–∫–∞–∂—á–∏–∫–∞: –¥–ª—è [–¥–µ—è–∫–∏—Ö —Ç–∏–ø—ñ–≤](https://doc.rust-lang."
"org/std/option/#representation) Rust –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ `size_of::<T>()` –¥–æ—Ä—ñ–≤–Ω—é—î "
"`size_of::<Option <T>>()`."

#: src/enums/sizes.md:67
msgid ""
"Example code if you want to show how the bitwise representation _may_ look "
"like in practice. It's important to note that the compiler provides no "
"guarantees regarding this representation, therefore this is totally unsafe."
msgstr ""
"–ü—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–∏, —è–∫ _–º–æ–∂–µ_ –≤–∏–≥–ª—è–¥–∞—Ç–∏ –ø–æ—Ä–æ–∑—Ä—è–¥–Ω–µ "
"–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ. –í–∞–∂–ª–∏–≤–æ –∑–∞–∑–Ω–∞—á–∏—Ç–∏, —â–æ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–¥–∞—î –∂–æ–¥–Ω–∏—Ö "
"–≥–∞—Ä–∞–Ω—Ç—ñ–π —â–æ–¥–æ —Ü—å–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è, —Ç–æ–º—É —Ü–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ."

#: src/enums/sizes.md:70
msgid ""
"```rust,editable\n"
"use std::mem::transmute;\n"
"\n"
"macro_rules! dbg_bits {\n"
"    ($e:expr, $bit_type:ty) => {\n"
"        println!(\"- {}: {:#x}\", stringify!($e), transmute::<_, "
"$bit_type>($e));\n"
"    };\n"
"}\n"
"\n"
"fn main() {\n"
"    // TOTALLY UNSAFE. Rust provides no guarantees about the bitwise\n"
"    // representation of types.\n"
"    unsafe {\n"
"        println!(\"Bitwise representation of bool\");\n"
"        dbg_bits!(false, u8);\n"
"        dbg_bits!(true, u8);\n"
"\n"
"        println!(\"Bitwise representation of Option<bool>\");\n"
"        dbg_bits!(None::<bool>, u8);\n"
"        dbg_bits!(Some(false), u8);\n"
"        dbg_bits!(Some(true), u8);\n"
"\n"
"        println!(\"Bitwise representation of Option<Option<bool>>\");\n"
"        dbg_bits!(Some(Some(false)), u8);\n"
"        dbg_bits!(Some(Some(true)), u8);\n"
"        dbg_bits!(Some(None::<bool>), u8);\n"
"        dbg_bits!(None::<Option<bool>>, u8);\n"
"\n"
"        println!(\"Bitwise representation of Option<&i32>\");\n"
"        dbg_bits!(None::<&i32>, usize);\n"
"        dbg_bits!(Some(&0i32), usize);\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/enums/sizes.md:105
msgid ""
"More complex example if you want to discuss what happens when we chain more "
"than 256 `Option`s together."
msgstr ""
"–ë—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏, —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ –º–∏ "
"–æ–±‚Äô—î–¥–Ω—É—î–º–æ –±—ñ–ª—å—à–µ 256 –æ–ø—Ü—ñ–π."

#: src/enums/sizes.md:107
msgid ""
"```rust,editable\n"
"#![recursion_limit = \"1000\"]\n"
"\n"
"use std::mem::transmute;\n"
"\n"
"macro_rules! dbg_bits {\n"
"    ($e:expr, $bit_type:ty) => {\n"
"        println!(\"- {}: {:#x}\", stringify!($e), transmute::<_, "
"$bit_type>($e));\n"
"    };\n"
"}\n"
"\n"
"// Macro to wrap a value in 2^n Some() where n is the number of \"@\" "
"signs.\n"
"// Increasing the recursion limit is required to evaluate this macro.\n"
"macro_rules! many_options {\n"
"    ($value:expr) => { Some($value) };\n"
"    ($value:expr, @) => {\n"
"        Some(Some($value))\n"
"    };\n"
"    ($value:expr, @ $($more:tt)+) => {\n"
"        many_options!(many_options!($value, $($more)+), $($more)+)\n"
"    };\n"
"}\n"
"\n"
"fn main() {\n"
"    // TOTALLY UNSAFE. Rust provides no guarantees about the bitwise\n"
"    // representation of types.\n"
"    unsafe {\n"
"        assert_eq!(many_options!(false), Some(false));\n"
"        assert_eq!(many_options!(false, @), Some(Some(false)));\n"
"        assert_eq!(many_options!(false, @@), "
"Some(Some(Some(Some(false)))));\n"
"\n"
"        println!(\"Bitwise representation of a chain of 128 Option's.\");\n"
"        dbg_bits!(many_options!(false, @@@@@@@), u8);\n"
"        dbg_bits!(many_options!(true, @@@@@@@), u8);\n"
"\n"
"        println!(\"Bitwise representation of a chain of 256 Option's.\");\n"
"        dbg_bits!(many_options!(false, @@@@@@@@), u16);\n"
"        dbg_bits!(many_options!(true, @@@@@@@@), u16);\n"
"\n"
"        println!(\"Bitwise representation of a chain of 257 Option's.\");\n"
"        dbg_bits!(many_options!(Some(false), @@@@@@@@), u16);\n"
"        dbg_bits!(many_options!(Some(true), @@@@@@@@), u16);\n"
"        dbg_bits!(many_options!(None::<bool>, @@@@@@@@), u16);\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/novel.md:3
msgid ""
"Rust has a few control flow constructs which differ from other languages. "
"They are used for pattern matching:"
msgstr ""
"Rust –º–∞—î –∫—ñ–ª—å–∫–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –ø–æ—Ç–æ–∫—É –∫–µ—Ä—É–≤–∞–Ω–Ω—è, —è–∫—ñ –≤—ñ–¥—Ä—ñ–∑–Ω—è—é—Ç—å—Å—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö "
"–º–æ–≤. –í–æ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∑—Ä–∞–∑–∫—ñ–≤:"

#: src/control-flow/novel.md:6 src/control-flow/if-let-expressions.md:1
msgid "`if let` expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ `if let`"

#: src/control-flow/novel.md:7
msgid "`while let` expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ `while let`"

#: src/control-flow/novel.md:8 src/control-flow/match-expressions.md:1
msgid "`match` expressions"
msgstr "–≤–∏—Ä–∞–∑–∏ `match`"

#: src/control-flow/if-let-expressions.md:3
msgid ""
"The [`if let` expression](https://doc.rust-lang.org/reference/expressions/if-"
"expr.html#if-let-expressions) lets you execute different code depending on "
"whether a value matches a pattern:"
msgstr ""
"–í–∏—Ä–∞–∑ [`if let`](https://doc.rust-lang.org/reference/expressions/if-expr."
"html#if-let-expressions) –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –∫–æ–¥ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, —á–∏ "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É :"

#: src/control-flow/if-let-expressions.md:7
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let arg = std::env::args().next();\n"
"    if let Some(value) = arg {\n"
"        println!(\"Program name: {value}\");\n"
"    } else {\n"
"        println!(\"Missing name?\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/if-let-expressions.md:18
#: src/control-flow/while-let-expressions.md:21
#: src/control-flow/match-expressions.md:23
msgid ""
"See [pattern matching](../pattern-matching.md) for more details on patterns "
"in Rust."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ [–∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤](../pattern-matching.md), —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è "
"–±—ñ–ª—å—à–µ –ø—Ä–æ —à–∞–±–ª–æ–Ω–∏ –≤ Rust."

#: src/control-flow/if-let-expressions.md:23
msgid ""
"Unlike `match`, `if let` does not have to cover all branches. This can make "
"it more concise than `match`."
msgstr ""
"–ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ `match`, `if let` –Ω–µ –º–∞—î –æ—Ö–æ–ø–ª—é–≤–∞—Ç–∏ –≤—Å—ñ –≥—ñ–ª–∫–∏. –¶–µ –º–æ–∂–µ "
"–∑—Ä–æ–±–∏—Ç–∏ –π–æ–≥–æ –±—ñ–ª—å—à –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–º, –Ω—ñ–∂ `match`."

#: src/control-flow/if-let-expressions.md:24
msgid "A common usage is handling `Some` values when working with `Option`."
msgstr ""
"–ó–∞–≥–∞–ª—å–Ω–∏–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º —î –æ–±—Ä–æ–±–∫–∞ –∑–Ω–∞—á–µ–Ω—å `Some` –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑ `Option`."

#: src/control-flow/if-let-expressions.md:25
msgid ""
"Unlike `match`, `if let` does not support guard clauses for pattern matching."
msgstr ""
"–ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ `match`, `if let` –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∑–∞—Ö–∏—Å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è "
"–∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É."

#: src/control-flow/if-let-expressions.md:26
msgid ""
"Since 1.65, a similar [let-else](https://doc.rust-lang.org/rust-by-example/"
"flow_control/let_else.html) construct allows to do a destructuring "
"assignment, or if it fails, execute a block which is required to abort "
"normal control flow (with `panic`/`return`/`break`/`continue`):"
msgstr ""
"–ü–æ—á–∏–Ω–∞—é—á–∏ –∑ –≤–µ—Ä—Å—ñ—ó 1.65, –ø–æ–¥—ñ–±–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è [let-else](https://doc.rust-"
"lang.org/rust-by-example/flow_control/let_else.html) –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ–Ω–∞—Ç–∏ "
"–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó –∞–±–æ, —è–∫—â–æ —Ü–µ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è, –≤–∏–∫–æ–Ω–∞—Ç–∏ –±–ª–æ–∫, —è–∫–∏–π "
"–ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –ø—Ä–∏–ø–∏–Ω–µ–Ω–Ω—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É –∫–µ—Ä—É–≤–∞–Ω–Ω—è (–∑ `panic`/`return`/"
"`break`/`continue`):"

#: src/control-flow/if-let-expressions.md:28
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    println!(\"{:?}\", second_word_to_upper(\"foo bar\"));\n"
"}\n"
" \n"
"fn second_word_to_upper(s: &str) -> Option<String> {\n"
"    let mut it = s.split(' ');\n"
"    let (Some(_), Some(item)) = (it.next(), it.next()) else {\n"
"        return None;\n"
"    };\n"
"    Some(item.to_uppercase())\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/control-flow/while-let-expressions.md:1
msgid "`while let` loops"
msgstr "—Ü–∏–∫–ª–∏ `while let`"

#: src/control-flow/while-let-expressions.md:3
msgid ""
"Like with `if let`, there is a [`while let`](https://doc.rust-lang.org/"
"reference/expressions/loop-expr.html#predicate-pattern-loops) variant which "
"repeatedly tests a value against a pattern:"
msgstr ""
"–ü–æ–¥—ñ–±–Ω–æ –¥–æ `if let`, —ñ—Å–Ω—É—î –≤–∞—Ä—ñ–∞–Ω—Ç [`while let`](https://doc.rust-lang.org/"
"reference/expressions/loop-expr.html#predicate-pattern-loops), —è–∫–∏–π "
"–Ω–µ–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ—Ç–∏ —à–∞–±–ª–æ–Ω—É:"

#: src/control-flow/while-let-expressions.md:6
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let v = vec![10, 20, 30];\n"
"    let mut iter = v.into_iter();\n"
"\n"
"    while let Some(x) = iter.next() {\n"
"        println!(\"x: {x}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/while-let-expressions.md:17
msgid ""
"Here the iterator returned by `v.into_iter()` will return a `Option<i32>` on "
"every call to `next()`. It returns `Some(x)` until it is done, after which "
"it will return `None`. The `while let` lets us keep iterating through all "
"items."
msgstr ""
"–¢—É—Ç —ñ—Ç–µ—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î `v.into_iter()`, –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏–º–µ `Option<i32>` –ø—ñ–¥ "
"—á–∞—Å –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É `next()`. –í—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î `Some(x)`, –¥–æ–∫–∏ –Ω–µ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ, "
"–ø—ñ—Å–ª—è —á–æ–≥–æ –ø–æ–≤–µ—Ä—Ç–∞—î `None`. `while let` –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ "
"–ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏."

#: src/control-flow/while-let-expressions.md:26
msgid ""
"Point out that the `while let` loop will keep going as long as the value "
"matches the pattern."
msgstr ""
"–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ —Ü–∏–∫–ª `while let` —Ç—Ä–∏–≤–∞—Ç–∏–º–µ, –¥–æ–∫–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î "
"—à–∞–±–ª–æ–Ω—É."

#: src/control-flow/while-let-expressions.md:27
msgid ""
"You could rewrite the `while let` loop as an infinite loop with an if "
"statement that breaks when there is no value to unwrap for `iter.next()`. "
"The `while let` provides syntactic sugar for the above scenario."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç–∏ —Ü–∏–∫–ª `while let` —è–∫ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª —ñ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º if, "
"—è–∫–∏–π –ø–µ—Ä–µ—Ä–∏–≤–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ –Ω–µ–º–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –¥–ª—è `iter.next()`. "
"`while let` –∑–∞–±–µ–∑–ø–µ—á—É—î —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∏–π —Ü—É–∫–æ—Ä –¥–ª—è –≤–∏—â–µ–Ω–∞–≤–µ–¥–µ–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é."

#: src/control-flow/match-expressions.md:3
msgid ""
"The [`match` keyword](https://doc.rust-lang.org/reference/expressions/match-"
"expr.html) is used to match a value against one or more patterns. In that "
"sense, it works like a series of `if let` expressions:"
msgstr ""
"–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ [`match`](https://doc.rust-lang.org/reference/expressions/"
"match-expr.html) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –æ–¥–Ω–∏–º –∞–±–æ "
"–∫—ñ–ª—å–∫–æ–º–∞ —à–∞–±–ª–æ–Ω–∞–º–∏. –£ —Ü—å–æ–º—É —Å–µ–Ω—Å—ñ —Ü–µ –ø—Ä–∞—Ü—é—î —è–∫ —Å–µ—Ä—ñ—è –≤–∏—Ä–∞–∑—ñ–≤ `if let`:"

#: src/control-flow/match-expressions.md:7
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    match std::env::args().next().as_deref() {\n"
"        Some(\"cat\") => println!(\"Will do cat things\"),\n"
"        Some(\"ls\")  => println!(\"Will ls some files\"),\n"
"        Some(\"mv\")  => println!(\"Let's move some files\"),\n"
"        Some(\"rm\")  => println!(\"Uh, dangerous!\"),\n"
"        None        => println!(\"Hmm, no program name?\"),\n"
"        _           => println!(\"Unknown program name!\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/control-flow/match-expressions.md:20
msgid ""
"Like `if let`, each match arm must have the same type. The type is the last "
"expression of the block, if any. In the example above, the type is `()`."
msgstr ""
"–Ø–∫ —ñ `if let`, –∫–æ–∂–Ω–∞ —Ä—É–∫–∞ –∑–±—ñ–≥—É –ø–æ–≤–∏–Ω–Ω–∞ –º–∞—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π —Ç–∏–ø. –¢–∏–ø ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ–π "
"–≤–∏—Ä–∞–∑ –±–ª–æ–∫—É, —è–∫—â–æ —Ç–∞–∫–∏–π —î. –£ –Ω–∞–≤–µ–¥–µ–Ω–æ–º—É –≤–∏—â–µ –ø—Ä–∏–∫–ª–∞–¥—ñ —Ç–∏–ø `()`."

#: src/control-flow/match-expressions.md:28
msgid "Save the match expression to a variable and print it out."
msgstr "–ó–±–µ—Ä–µ–∂—ñ—Ç—å –≤–∏—Ä–∞–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–æ –∑–º—ñ–Ω–Ω–æ—ó —Ç–∞ —Ä–æ–∑–¥—Ä—É–∫—É–π—Ç–µ –π–æ–≥–æ."

#: src/control-flow/match-expressions.md:29
msgid "Remove `.as_deref()` and explain the error."
msgstr "–í–∏–¥–∞–ª—ñ—Ç—å `.as_deref()` —ñ –ø–æ—è—Å–Ω—ñ—Ç—å –ø–æ–º–∏–ª–∫—É."

#: src/control-flow/match-expressions.md:30
msgid ""
"`std::env::args().next()` returns an `Option<String>`, but we cannot match "
"against `String`."
msgstr ""
"`std::env::args().next()` –ø–æ–≤–µ—Ä—Ç–∞—î `Option<String>`, –∞–ª–µ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ "
"–ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ `String`."

#: src/control-flow/match-expressions.md:31
msgid ""
"`as_deref()` transforms an `Option<T>` to `Option<&T::Target>`. In our case, "
"this turns `Option<String>` into `Option<&str>`."
msgstr ""
"`as_deref()` –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î `Option<T>` –Ω–∞ `Option<&T::Target>`. –£ –Ω–∞—à–æ–º—É "
"–≤–∏–ø–∞–¥–∫—É —Ü–µ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î `Option<String>` –Ω–∞ `Option<&str>`."

#: src/control-flow/match-expressions.md:32
msgid ""
"We can now use pattern matching to match against the `&str` inside `Option`."
msgstr ""
"–¢–µ–ø–µ—Ä –º–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –∑–∞ —à–∞–±–ª–æ–Ω–æ–º –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ "
"`&str` –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ `Option`."

#: src/pattern-matching.md:3
msgid ""
"The `match` keyword let you match a value against one or more _patterns_. "
"The comparisons are done from top to bottom and the first match wins."
msgstr ""
"–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ `match` –¥–æ–∑–≤–æ–ª—è—î –∑—ñ—Å—Ç–∞–≤–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –æ–¥–Ω–∏–º –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–æ–º–∞ "
"_—à–∞–±–ª–æ–Ω–∞–º–∏_. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∑–≤–µ—Ä—Ö—É –≤–Ω–∏–∑, —ñ –≤–∏–≥—Ä–∞—î –ø–µ—Ä—à–∏–π –∑–±—ñ–≥."

#: src/pattern-matching.md:6
msgid "The patterns can be simple values, similarly to `switch` in C and C++:"
msgstr ""
"–®–∞–±–ª–æ–Ω–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø—Ä–æ—Å—Ç–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏, –ø–æ–¥—ñ–±–Ω–æ –¥–æ `switch` —É C —Ç–∞ C++:"

#: src/pattern-matching.md:8
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let input = 'x';\n"
"\n"
"    match input {\n"
"        'q'                   => println!(\"Quitting\"),\n"
"        'a' | 's' | 'w' | 'd' => println!(\"Moving around\"),\n"
"        '0'..='9'             => println!(\"Number input\"),\n"
"        _                     => println!(\"Something else\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/pattern-matching.md:21
msgid "The `_` pattern is a wildcard pattern which matches any value."
msgstr "–®–∞–±–ª–æ–Ω `_` ‚Äî —à–∞–±–ª–æ–Ω –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –±—É–¥—å-—è–∫–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—é."

#: src/pattern-matching.md:26
msgid ""
"You might point out how some specific characters are being used when in a "
"pattern"
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏, —è–∫ –¥–µ—è–∫—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ —à–∞–±–ª–æ–Ω—ñ"

#: src/pattern-matching.md:27
msgid "`|` as an `or`"
msgstr "`|` —è–∫ `–∞–±–æ`"

#: src/pattern-matching.md:28
msgid "`..` can expand as much as it needs to be"
msgstr "`..` –º–æ–∂–µ —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏—Å—è –Ω–∞—Å—Ç—ñ–ª—å–∫–∏, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ"

#: src/pattern-matching.md:29
msgid "`1..=5` represents an inclusive range"
msgstr "`1..=5` –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –≤–∫–ª—é—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω"

#: src/pattern-matching.md:30
msgid "`_` is a wild card"
msgstr "`_` - —Å–∏–º–≤–æ–ª –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏"

#: src/pattern-matching.md:31
msgid ""
"It can be useful to show how binding works, by for instance replacing a "
"wildcard character with a variable, or removing the quotes around `q`."
msgstr ""
"–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏, —è–∫ –ø—Ä–∞—Ü—é—î –∑–≤‚Äô—è–∑—É–≤–∞–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "
"–∑–∞–º—ñ–Ω–∏–≤—à–∏ —Å–∏–º–≤–æ–ª –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–º—ñ–Ω–Ω–æ—é –∞–±–æ –≤–∏–¥–∞–ª–∏–≤—à–∏ –ª–∞–ø–∫–∏ –Ω–∞–≤–∫–æ–ª–æ `q`."

#: src/pattern-matching.md:32
msgid "You can demonstrate matching on a reference."
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –Ω–∞ –¥–æ–≤—ñ–¥—Ü—ñ."

#: src/pattern-matching.md:33
msgid ""
"This might be a good time to bring up the concept of irrefutable patterns, "
"as the term can show up in error messages."
msgstr ""
"–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–¥–∞–ª–∏–π —á–∞—Å, —â–æ–± –ø—ñ–¥–Ω—è—Ç–∏ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—é –Ω–µ—Å–ø—Ä–æ—Å—Ç–æ–≤–Ω–∏—Ö —à–∞–±–ª–æ–Ω—ñ–≤, "
"–æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ–π —Ç–µ—Ä–º—ñ–Ω –º–æ–∂–µ –∑‚Äô—è–≤–ª—è—Ç–∏—Å—è –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏."

#: src/pattern-matching/destructuring-enums.md:3
msgid ""
"Patterns can also be used to bind variables to parts of your values. This is "
"how you inspect the structure of your types. Let us start with a simple "
"`enum` type:"
msgstr ""
"–®–∞–±–ª–æ–Ω–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ –∑–º—ñ–Ω–Ω–∏—Ö –¥–æ —á–∞—Å—Ç–∏–Ω –≤–∞—à–∏—Ö "
"–∑–Ω–∞—á–µ–Ω—å. –¢–∞–∫–∏–º —á–∏–Ω–æ–º –≤–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–∞—à–∏—Ö —Ç–∏–ø—ñ–≤. –ü–æ—á–Ω–µ–º–æ –∑ "
"–ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–∏–ø—É `enum`:"

#: src/pattern-matching/destructuring-enums.md:6
msgid ""
"```rust,editable\n"
"enum Result {\n"
"    Ok(i32),\n"
"    Err(String),\n"
"}\n"
"\n"
"fn divide_in_two(n: i32) -> Result {\n"
"    if n % 2 == 0 {\n"
"        Result::Ok(n / 2)\n"
"    } else {\n"
"        Result::Err(format!(\"cannot divide {n} into two equal parts\"))\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let n = 100;\n"
"    match divide_in_two(n) {\n"
"        Result::Ok(half) => println!(\"{n} divided in two is {half}\"),\n"
"        Result::Err(msg) => println!(\"sorry, an error happened: {msg}\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/pattern-matching/destructuring-enums.md:29
msgid ""
"Here we have used the arms to _destructure_ the `Result` value. In the first "
"arm, `half` is bound to the value inside the `Ok` variant. In the second "
"arm, `msg` is bound to the error message."
msgstr ""

#: src/pattern-matching/destructuring-enums.md:36
msgid ""
"The `if`/`else` expression is returning an enum that is later unpacked with "
"a `match`."
msgstr ""
"–í–∏—Ä–∞–∑ `if`/`else` –ø–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä–µ–ª—ñ–∫, —è–∫–∏–π –ø—ñ–∑–Ω—ñ—à–µ —Ä–æ–∑–ø–∞–∫–æ–≤—É—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
"`match`."

#: src/pattern-matching/destructuring-enums.md:37
msgid ""
"You can try adding a third variant to the enum definition and displaying the "
"errors when running the code. Point out the places where your code is now "
"inexhaustive and how the compiler tries to give you hints."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∏ —Ç—Ä–µ—Ç—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–æ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è enum —ñ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ "
"–ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É. –í–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ü—è, –¥–µ –≤–∞—à –∫–æ–¥ –∑–∞—Ä–∞–∑ —î "
"–Ω–µ–≤–∏—á–µ—Ä–ø–Ω–∏–º, —ñ —è–∫ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –¥–∞—Ç–∏ –≤–∞–º –ø—ñ–¥–∫–∞–∑–∫–∏."

#: src/pattern-matching/destructuring-structs.md:3
msgid "You can also destructure `structs`:"
msgstr "–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ `—Å—Ç—Ä—É–∫—Ç—É—Ä–∏`:"

#: src/pattern-matching/destructuring-structs.md:5
msgid ""
"```rust,editable\n"
"struct Foo {\n"
"    x: (u32, u32),\n"
"    y: u32,\n"
"}\n"
"\n"
"#[rustfmt::skip]\n"
"fn main() {\n"
"    let foo = Foo { x: (1, 2), y: 3 };\n"
"    match foo {\n"
"        Foo { x: (1, b), y } => println!(\"x.0 = 1, b = {b}, y = {y}\"),\n"
"        Foo { y: 2, x: i }   => println!(\"y = 2, x = {i:?}\"),\n"
"        Foo { y, .. }        => println!(\"y = {y}, other fields were "
"ignored\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/pattern-matching/destructuring-structs.md:23
msgid "Change the literal values in `foo` to match with the other patterns."
msgstr "–ó–º—ñ–Ω—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –ª—ñ—Ç–µ—Ä–∞–ª—ñ–≤ —É `foo`, —â–æ–± –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —ñ–Ω—à–∏–º —à–∞–±–ª–æ–Ω–∞–º."

#: src/pattern-matching/destructuring-structs.md:24
msgid "Add a new field to `Foo` and make changes to the pattern as needed."
msgstr "–î–æ–¥–∞–π—Ç–µ –Ω–æ–≤–µ –ø–æ–ª–µ –¥–æ `Foo` —ñ –≤–Ω–µ—Å—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∑–º—ñ–Ω–∏ –¥–æ —à–∞–±–ª–æ–Ω—É."

#: src/pattern-matching/destructuring-structs.md:25
msgid ""
"The distinction between a capture and a constant expression can be hard to "
"spot. Try changing the `2` in the second arm to a variable, and see that it "
"subtly doesn't work. Change it to a `const` and see it working again."
msgstr ""
"–†—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è–º —ñ –ø–æ—Å—Ç—ñ–π–Ω–∏–º –≤–∏—Ä–∞–∑–æ–º –º–æ–∂–µ –±—É—Ç–∏ –≤–∞–∂–∫–æ –ø–æ–º—ñ—Ç–∏—Ç–∏. "
"–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ `2` —É –¥—Ä—É–≥–æ–º—É –ø–ª–µ—á—ñ –Ω–∞ –∑–º—ñ–Ω–Ω—É, —ñ –ø–æ–±–∞—á–∏—Ç–µ, —â–æ —Ü–µ –Ω–µ–ø–æ–º—ñ—Ç–Ω–æ "
"–Ω–µ –ø—Ä–∞—Ü—é—î. –ó–º—ñ–Ω—ñ—Ç—å –π–æ–≥–æ –Ω–∞ `const` —ñ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è, —è–∫ –≤—ñ–Ω –∑–Ω–æ–≤—É –∑–∞–ø—Ä–∞—Ü—é—î."

#: src/pattern-matching/destructuring-arrays.md:3
msgid ""
"You can destructure arrays, tuples, and slices by matching on their elements:"
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞—Ç–∏ –º–∞—Å–∏–≤–∏, –∫–æ—Ä—Ç–µ–∂—ñ —Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏, –∑—ñ—Å—Ç–∞–≤–ª—è—é—á–∏ —ó—Ö–Ω—ñ "
"–µ–ª–µ–º–µ–Ω—Ç–∏:"

#: src/pattern-matching/destructuring-arrays.md:5
msgid ""
"```rust,editable\n"
"#[rustfmt::skip]\n"
"fn main() {\n"
"    let triple = [0, -2, 3];\n"
"    println!(\"Tell me about {triple:?}\");\n"
"    match triple {\n"
"        [0, y, z] => println!(\"First is 0, y = {y}, and z = {z}\"),\n"
"        [1, ..]   => println!(\"First is 1 and the rest were ignored\"),\n"
"        _         => println!(\"All elements were ignored\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/pattern-matching/destructuring-arrays.md:21
msgid ""
"Destructuring of slices of unknown length also works with patterns of fixed "
"length."
msgstr ""
"–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ –Ω–µ–≤—ñ–¥–æ–º–æ—ó –¥–æ–≤–∂–∏–Ω–∏ —Ç–∞–∫–æ–∂ –ø—Ä–∞—Ü—é—î –∑ —à–∞–±–ª–æ–Ω–∞–º–∏ "
"—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏."

#: src/pattern-matching/destructuring-arrays.md:24
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    inspect(&[0, -2, 3]);\n"
"    inspect(&[0, -2, 3, 4]);\n"
"}\n"
"\n"
"#[rustfmt::skip]\n"
"fn inspect(slice: &[i32]) {\n"
"    println!(\"Tell me about {slice:?}\");\n"
"    match slice {\n"
"        &[0, y, z] => println!(\"First is 0, y = {y}, and z = {z}\"),\n"
"        &[1, ..]   => println!(\"First is 1 and the rest were ignored\"),\n"
"        _          => println!(\"All elements were ignored\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/pattern-matching/destructuring-arrays.md:41
msgid "Create a new pattern using `_` to represent an element. "
msgstr "–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `_` –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞."

#: src/pattern-matching/destructuring-arrays.md:42
msgid "Add more values to the array."
msgstr "–î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω—å –¥–æ –º–∞—Å–∏–≤—É."

#: src/pattern-matching/destructuring-arrays.md:43
msgid ""
"Point out that how `..` will expand to account for different number of "
"elements."
msgstr ""
"–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —Ç–µ, —è–∫ ¬´..¬ª –±—É–¥–µ —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏—Å—è, —â–æ–± –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—É "
"–∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤."

#: src/pattern-matching/destructuring-arrays.md:44
msgid "Show matching against the tail with patterns `[.., b]` and `[a@..,b]`"
msgstr ""
"–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ç–∏ —Ö–≤–æ—Å—Ç–∞ –∑–∞ —à–∞–±–ª–æ–Ω–∞–º–∏ \"[.., b]\" —ñ \"[a@..,b]\""

#: src/pattern-matching/match-guards.md:3
msgid ""
"When matching, you can add a _guard_ to a pattern. This is an arbitrary "
"Boolean expression which will be executed if the pattern matches:"
msgstr ""
"–ü—ñ–¥ —á–∞—Å –∑—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ _guard_ –¥–æ —à–∞–±–ª–æ–Ω—É. –¶–µ –¥–æ–≤—ñ–ª—å–Ω–∏–π "
"–ª–æ–≥—ñ—á–Ω–∏–π –≤–∏—Ä–∞–∑, —è–∫–∏–π –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ, —è–∫—â–æ —à–∞–±–ª–æ–Ω –∑–±—ñ–≥–∞—î—Ç—å—Å—è:"

#: src/pattern-matching/match-guards.md:6
msgid ""
"```rust,editable\n"
"#[rustfmt::skip]\n"
"fn main() {\n"
"    let pair = (2, -2);\n"
"    println!(\"Tell me about {pair:?}\");\n"
"    match pair {\n"
"        (x, y) if x == y     => println!(\"These are twins\"),\n"
"        (x, y) if x + y == 0 => println!(\"Antimatter, kaboom!\"),\n"
"        (x, _) if x % 2 == 1 => println!(\"The first one is odd\"),\n"
"        _                    => println!(\"No correlation...\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/pattern-matching/match-guards.md:23
msgid ""
"Match guards as a separate syntax feature are important and necessary when "
"we wish to concisely express more complex ideas than patterns alone would "
"allow."
msgstr ""
"–ó–∞—Ö–∏—Å–Ω–∏–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —è–∫ –æ–∫—Ä–µ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É —î –≤–∞–∂–ª–∏–≤–æ—é —Ç–∞ "
"–Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—é, –∫–æ–ª–∏ –º–∏ —Ö–æ—á–µ–º–æ —Å—Ç–∏—Å–ª–æ –≤–∏—Å–ª–æ–≤–∏—Ç–∏ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω—ñ —ñ–¥–µ—ó, –Ω—ñ–∂ —Ü–µ "
"–¥–æ–∑–≤–æ–ª–∏–ª–∏ –± —Å–∞–º—ñ —à–∞–±–ª–æ–Ω–∏."

#: src/pattern-matching/match-guards.md:24
msgid ""
"They are not the same as separate `if` expression inside of the match arm. "
"An `if` expression inside of the branch block (after `=>`) happens after the "
"match arm is selected. Failing the `if` condition inside of that block won't "
"result in other arms of the original `match` expression being considered."
msgstr ""
"–¶–µ –Ω–µ —Ç–µ —Å–∞–º–µ, —â–æ –æ–∫—Ä–µ–º–∏–π –≤–∏—Ä–∞–∑ if –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–ª–µ—á–∞ –∑–±—ñ–≥—É. –í–∏—Ä–∞–∑ `if` "
"–≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –±–ª–æ–∫—É —Ä–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è (–ø—ñ—Å–ª—è `=>`) –≤–∏–Ω–∏–∫–∞—î –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –ø–ª–µ—á–∞ "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ. –ù–µ–≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤–∏ `if` –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ü—å–æ–≥–æ –±–ª–æ–∫—É –Ω–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ "
"—Ä–æ–∑–≥–ª—è–¥—É —ñ–Ω—à–∏—Ö —á–∞—Å—Ç–∏–Ω –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –≤–∏—Ä–∞–∑—É `match`."

#: src/pattern-matching/match-guards.md:26
msgid "You can use the variables defined in the pattern in your if expression."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤ —à–∞–±–ª–æ–Ω—ñ, —É —Å–≤–æ—î–º—É –≤–∏—Ä–∞–∑—ñ if."

#: src/pattern-matching/match-guards.md:27
msgid ""
"The condition defined in the guard applies to every expression in a pattern "
"with an `|`."
msgstr ""
"–£–º–æ–≤–∞, –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –≤ guard, –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –≤–∏—Ä–∞–∑—É –≤ —à–∞–±–ª–æ–Ω—ñ –∑ `|`."

#: src/exercises/day-1/afternoon.md:1
msgid "Day 1: Afternoon Exercises"
msgstr "–î–µ–Ω—å 1: –ø—ñ—Å–ª—è–æ–±—ñ–¥–Ω—ñ –≤–ø—Ä–∞–≤–∏"

#: src/exercises/day-1/afternoon.md:3
msgid "We will look at two things:"
msgstr "–ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –¥–≤—ñ —Ä–µ—á—ñ:"

#: src/exercises/day-1/afternoon.md:5
msgid "The Luhn algorithm,"
msgstr "–ê–ª–≥–æ—Ä–∏—Ç–º –õ—É–Ω–∞,"

#: src/exercises/day-1/afternoon.md:7
msgid "An exercise on pattern matching."
msgstr "–í–ø—Ä–∞–≤–∞ –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑–∞ –∑—Ä–∞–∑–∫–æ–º."

#: src/exercises/day-1/afternoon.md:11 src/exercises/day-2/afternoon.md:7
#: src/exercises/bare-metal/afternoon.md:7
#: src/exercises/concurrency/afternoon.md:13
msgid ""
"After looking at the exercises, you can look at the [solutions](solutions-"
"afternoon.md) provided."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—É–≤—à–∏ –≤–ø—Ä–∞–≤–∏, –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–¥–∞–Ω—ñ [—Ä—ñ—à–µ–Ω–Ω—è](solutions-"
"afternoon.md)."

#: src/exercises/day-1/luhn.md:3
msgid ""
"The [Luhn algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) is used "
"to validate credit card numbers. The algorithm takes a string as input and "
"does the following to validate the credit card number:"
msgstr ""
"[–ê–ª–≥–æ—Ä–∏—Ç–º –õ—É–Ω–∞](https://en.wikipedia.org/wiki/Luhn_algorithm) "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–º–µ—Ä—ñ–≤ –∫—Ä–µ–¥–∏—Ç–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫. –ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–π–º–∞—î "
"—Ä—è–¥–æ–∫ —è–∫ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ —Ç–∞ –≤–∏–∫–æ–Ω—É—î –Ω–∞—Å—Ç—É–ø–Ω–µ, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–Ω–æ—ó "
"–∫–∞—Ä—Ç–∫–∏:"

#: src/exercises/day-1/luhn.md:7
msgid "Ignore all spaces. Reject number with less than two digits."
msgstr "–Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–±—ñ–ª–∏. –í—ñ–¥—Ö–∏–ª—è—Ç–∏ –Ω–æ–º–µ—Ä —ñ–∑ –º–µ–Ω—à –Ω—ñ–∂ –¥–≤–æ–º–∞ —Ü–∏—Ñ—Ä–∞–º–∏."

#: src/exercises/day-1/luhn.md:9
msgid ""
"Moving from **right to left**, double every second digit: for the number "
"`1234`, we double `3` and `1`. For the number `98765`, we double `6` and `8`."
msgstr ""
"–†—É—Ö–∞—é—á–∏—Å—å **—Å–ø—Ä–∞–≤–∞ –Ω–∞–ª—ñ–≤–æ**, –ø–æ–¥–≤–æ—é–π—Ç–µ –∫–æ–∂–Ω—É –¥—Ä—É–≥—É —Ü–∏—Ñ—Ä—É: –¥–ª—è —á–∏—Å–ª–∞ ¬´1234¬ª "
"–º–∏ –ø–æ–¥–≤–æ—é—î–º–æ ¬´3¬ª —ñ ¬´1¬ª. –î–ª—è —á–∏—Å–ª–∞ \"98765\" –º–∏ –ø–æ–¥–≤–æ—é—î–º–æ \"6\" —ñ \"8\"."

#: src/exercises/day-1/luhn.md:12
msgid ""
"After doubling a digit, sum the digits if the result is greater than 9. So "
"doubling `7` becomes `14` which becomes `1 + 4 = 5`."
msgstr ""
"–ü—ñ—Å–ª—è –ø–æ–¥–≤–æ—î–Ω–Ω—è —Ü–∏—Ñ—Ä–∏ –ø—ñ–¥—Å—É–º—É–π—Ç–µ —Ü–∏—Ñ—Ä–∏, —è–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ñ–ª—å—à–∏–π –∑–∞ 9. –¢–∞–∫–∏–º "
"—á–∏–Ω–æ–º, –ø–æ–¥–≤–æ—î–Ω–Ω—è \"7\" –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ \"14\", —è–∫–µ —Å—Ç–∞—î \"1 + 4 = 5\"."

#: src/exercises/day-1/luhn.md:15
msgid "Sum all the undoubled and doubled digits."
msgstr "–ü—ñ–¥—Å—É–º—É–π—Ç–µ –≤—Å—ñ –Ω–µ–ø–æ–¥–≤–æ—î–Ω—ñ —Ç–∞ –ø–æ–¥–≤–æ—î–Ω—ñ —Ü–∏—Ñ—Ä–∏."

#: src/exercises/day-1/luhn.md:17
msgid "The credit card number is valid if the sum ends with `0`."
msgstr "–ù–æ–º–µ—Ä –∫—Ä–µ–¥–∏—Ç–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏ –¥—ñ–π—Å–Ω–∏–π, —è–∫—â–æ —Å—É–º–∞ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ ¬´0¬ª."

#: src/exercises/day-1/luhn.md:19
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and implement the "
"function."
msgstr ""
"–°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ –∫–æ–¥ –Ω–∞ <https://play.rust-lang.org/> —ñ –∑–∞—Å—Ç–æ—Å—É–π—Ç–µ "
"—Ñ—É–Ω–∫—Ü—ñ—é."

#: src/exercises/day-1/luhn.md:21
msgid ""
"Try to solve the problem the \"simple\" way first, using `for` loops and "
"integers. Then, revisit the solution and try to implement it with iterators."
msgstr ""
"–°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É ¬´–ø—Ä–æ—Å—Ç–∏–º¬ª —Å–ø–æ—Å–æ–±–æ–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ "
"—Ü–∏–∫–ª–∏ for —ñ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞. –ü–æ—Ç—ñ–º –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ä—ñ—à–µ–Ω–Ω—è —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ "
"–π–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —ñ—Ç–µ—Ä–∞—Ç–æ—Ä—ñ–≤."

#: src/exercises/day-1/luhn.md:25
msgid ""
"```rust\n"
"// TODO: remove this when you're done with your implementation.\n"
"#![allow(unused_variables, dead_code)]\n"
"\n"
"pub fn luhn(cc_number: &str) -> bool {\n"
"    unimplemented!()\n"
"}\n"
"\n"
"#[test]\n"
"fn test_non_digit_cc_number() {\n"
"    assert!(!luhn(\"foo\"));\n"
"    assert!(!luhn(\"foo 0 0\"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_empty_cc_number() {\n"
"    assert!(!luhn(\"\"));\n"
"    assert!(!luhn(\" \"));\n"
"    assert!(!luhn(\"  \"));\n"
"    assert!(!luhn(\"    \"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_single_digit_cc_number() {\n"
"    assert!(!luhn(\"0\"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_two_digit_cc_number() {\n"
"    assert!(luhn(\" 0 0 \"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_valid_cc_number() {\n"
"    assert!(luhn(\"4263 9826 4026 9299\"));\n"
"    assert!(luhn(\"4539 3195 0343 6467\"));\n"
"    assert!(luhn(\"7992 7398 713\"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_invalid_cc_number() {\n"
"    assert!(!luhn(\"4223 9826 4026 9299\"));\n"
"    assert!(!luhn(\"4539 3195 0343 6476\"));\n"
"    assert!(!luhn(\"8273 1232 7352 0569\"));\n"
"}\n"
"\n"
"#[allow(dead_code)]\n"
"fn main() {}\n"
"```"
msgstr ""

#: src/welcome-day-2.md:1
msgid "Welcome to Day 2"
msgstr "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –î–Ω—è 2"

#: src/welcome-day-2.md:3
msgid "Now that we have seen a fair amount of Rust, we will continue with:"
msgstr "–¢–µ–ø–µ—Ä, –∫–æ–ª–∏ –º–∏ –ø–æ–±–∞—á–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–Ω—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å Rust, –º–∏ –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ:"

#: src/welcome-day-2.md:5
msgid ""
"Memory management: stack vs heap, manual memory management, scope-based "
"memory management, and garbage collection."
msgstr ""
"–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—Ç—é: —Å—Ç–µ–∫ –ø—Ä–æ—Ç–∏ –∫—É–ø–∏, –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—Ç—é –≤—Ä—É—á–Ω—É, –∫–µ—Ä—É–≤–∞–Ω–Ω—è "
"–ø–∞–º‚Äô—è—Ç—Ç—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–±–ª–∞—Å—Ç—ñ —Ç–∞ –∑–±–∏—Ä–∞–Ω–Ω—è —Å–º—ñ—Ç—Ç—è."

#: src/welcome-day-2.md:8
msgid ""
"Ownership: move semantics, copying and cloning, borrowing, and lifetimes."
msgstr ""
"–ü—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ: —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è, –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è, "
"–∑–∞–ø–æ–∑–∏—á–µ–Ω–Ω—è —Ç–∞ —Ç–µ—Ä–º—ñ–Ω–∏ –∂–∏—Ç—Ç—è."

#: src/welcome-day-2.md:10
msgid "Structs and methods."
msgstr "–°—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞ –º–µ—Ç–æ–¥–∏."

#: src/welcome-day-2.md:12
msgid ""
"The Standard Library: `String`, `Option` and `Result`, `Vec`, `HashMap`, "
"`Rc` and `Arc`."
msgstr ""
"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞: `String`, `Option` —ñ `Result`, `Vec`, `HashMap`, `Rc` "
"—ñ `Arc`."

#: src/welcome-day-2.md:15
msgid "Modules: visibility, paths, and filesystem hierarchy."
msgstr "–ú–æ–¥—É–ª—ñ: –≤–∏–¥–∏–º—ñ—Å—Ç—å, —à–ª—è—Ö–∏ —Ç–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—è —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏."

#: src/memory-management.md:3
msgid "Traditionally, languages have fallen into two broad categories:"
msgstr "–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–æ –º–æ–≤–∏ –ø–æ–¥—ñ–ª—è—é—Ç—å—Å—è –Ω–∞ –¥–≤—ñ –≤–µ–ª–∏–∫—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:"

#: src/memory-management.md:5
msgid "Full control via manual memory management: C, C++, Pascal, ..."
msgstr "–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —á–µ—Ä–µ–∑ —Ä—É—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é: C, C++, Pascal, ..."

#: src/memory-management.md:6
msgid ""
"Full safety via automatic memory management at runtime: Java, Python, Go, "
"Haskell, ..."
msgstr ""
"–ü–æ–≤–Ω–∞ –±–µ–∑–ø–µ–∫–∞ –∑–∞–≤–¥—è–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—é –ø–∞–º‚Äô—è—Ç—Ç—é –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: "
"Java, Python, Go, Haskell, ..."

#: src/memory-management.md:8
msgid "Rust offers a new mix:"
msgstr "Rust –ø—Ä–æ–ø–æ–Ω—É—î –Ω–æ–≤—É —Å—É–º—ñ—à:"

#: src/memory-management.md:10
msgid ""
"Full control _and_ safety via compile time enforcement of correct memory "
"management."
msgstr ""
"–ü–æ–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å _—ñ_ –±–µ–∑–ø–µ–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ "
"–∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é."

#: src/memory-management.md:13
msgid "It does this with an explicit ownership concept."
msgstr "–¶–µ —Ä–æ–±–∏—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —á—ñ—Ç–∫–æ—ó –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ."

#: src/memory-management.md:15
msgid "First, let's refresh how memory management works."
msgstr "–ü–æ-–ø–µ—Ä—à–µ, –¥–∞–≤–∞–π—Ç–µ –æ–Ω–æ–≤–∏–º–æ, —è–∫ –ø—Ä–∞—Ü—é—î –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—Ç—é."

#: src/memory-management/stack-vs-heap.md:1
msgid "The Stack vs The Heap"
msgstr "–°—Ç–µ–∫ –ø—Ä–æ—Ç–∏ –∫—É–ø–∏"

#: src/memory-management/stack-vs-heap.md:3
msgid "Stack: Continuous area of memory for local variables."
msgstr "–°—Ç–µ–∫: –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å –ø–∞–º'—è—Ç—ñ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö."

#: src/memory-management/stack-vs-heap.md:4
msgid "Values have fixed sizes known at compile time."
msgstr "–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—é—Ç—å —Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏, –≤—ñ–¥–æ–º—ñ –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó."

#: src/memory-management/stack-vs-heap.md:5
msgid "Extremely fast: just move a stack pointer."
msgstr "–ù–∞–¥–∑–≤–∏—á–∞–π–Ω–æ —à–≤–∏–¥–∫–æ: –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å –ø–æ–∫–∞–∂—á–∏–∫ —Å—Ç–µ–∫–∞."

#: src/memory-management/stack-vs-heap.md:6
msgid "Easy to manage: follows function calls."
msgstr "–õ–µ–≥–∫–æ –∫–µ—Ä—É–≤–∞—Ç–∏: —Å–ª—ñ–¥–∫—É—î –∑–∞ –≤–∏–∫–ª–∏–∫–∞–º–∏ —Ñ—É–Ω–∫—Ü—ñ–π."

#: src/memory-management/stack-vs-heap.md:7
msgid "Great memory locality."
msgstr "–ß—É–¥–æ–≤–∞ –ø–∞–º'—è—Ç—å –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ."

#: src/memory-management/stack-vs-heap.md:9
msgid "Heap: Storage of values outside of function calls."
msgstr "–ö—É–ø–∞: –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –ø–æ–∑–∞ –≤–∏–∫–ª–∏–∫–∞–º–∏ —Ñ—É–Ω–∫—Ü—ñ–π."

#: src/memory-management/stack-vs-heap.md:10
msgid "Values have dynamic sizes determined at runtime."
msgstr "–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—é—Ç—å –¥–∏–Ω–∞–º—ñ—á–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/memory-management/stack-vs-heap.md:11
msgid "Slightly slower than the stack: some book-keeping needed."
msgstr "–¢—Ä–æ—Ö–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ, –Ω—ñ–∂ —Å—Ç–µ–∫: –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ø–µ–≤–Ω–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è."

#: src/memory-management/stack-vs-heap.md:12
msgid "No guarantee of memory locality."
msgstr "–ù–µ–º–∞—î –≥–∞—Ä–∞–Ω—Ç—ñ—ó –ª–æ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –ø–∞–º'—è—Ç—ñ."

#: src/memory-management/stack.md:1
msgid "Stack and Heap Example"
msgstr "–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–µ–∫–∞ —Ç–∞ –∫—É–ø–∏"

#: src/memory-management/stack.md:3
msgid ""
"Creating a `String` puts fixed-sized metadata on the stack and dynamically "
"sized data, the actual string, on the heap:"
msgstr ""
"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è `String` –ø–æ–º—ñ—â–∞—î –º–µ—Ç–∞–¥–∞–Ω—ñ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –≤ —Å—Ç–µ–∫, –∞ –¥–∞–Ω—ñ "
"–¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É, —Ñ–∞–∫—Ç–∏—á–Ω–∏–π —Ä—è–¥–æ–∫, —É –∫—É–ø—É:"

#: src/memory-management/stack.md:6
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let s1 = String::from(\"Hello\");\n"
"}\n"
"```"
msgstr ""

#: src/memory-management/stack.md:12
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - -.\n"
":                           :     :                               :\n"
":    s1                     :     :                               :\n"
":   +-----------+-------+   :     :   +----+----+----+----+----+  :\n"
":   | ptr       |   o---+---+-----+-->| H  | e  | l  | l  | o  |  :\n"
":   | len       |     5 |   :     :   +----+----+----+----+----+  :\n"
":   | capacity  |     5 |   :     :                               :\n"
":   +-----------+-------+   :     :                               :\n"
":                           :     `- - - - - - - - - - - - - - - -'\n"
"`- - - - - - - - - - - - - -'\n"
"```"
msgstr ""

#: src/memory-management/stack.md:28
msgid ""
"Mention that a `String` is backed by a `Vec`, so it has a capacity and "
"length and can grow if mutable via reallocation on the heap."
msgstr ""
"–ó–≥–∞–¥–∞–π—Ç–µ, —â–æ `String` –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è `Vec`, —Ç–æ–º—É –≤—ñ–Ω –º–∞—î —î–º–Ω—ñ—Å—Ç—å —ñ –¥–æ–≤–∂–∏–Ω—É —ñ "
"–º–æ–∂–µ –∑—Ä–æ—Å—Ç–∞—Ç–∏, —è–∫—â–æ –≤—ñ–Ω –∑–º—ñ–Ω–Ω–∏–π —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ä–æ–∑–ø–æ–¥—ñ–ª —É –∫—É–ø—ñ."

#: src/memory-management/stack.md:30
msgid ""
"If students ask about it, you can mention that the underlying memory is heap "
"allocated using the [System Allocator](https://doc.rust-lang.org/std/alloc/"
"struct.System.html) and custom allocators can be implemented using the "
"[Allocator API](https://doc.rust-lang.org/std/alloc/index.html)"
msgstr ""
"–Ø–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç–∏ –∑–∞–ø–∏—Ç–∞—é—Ç—å –ø—Ä–æ —Ü–µ, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≥–∞–¥–∞—Ç–∏, —â–æ –æ—Å–Ω–æ–≤–Ω–∞ –ø–∞–º‚Äô—è—Ç—å "
"—Ä–æ–∑–ø–æ–¥—ñ–ª—è—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é [System Allocator](https://doc.rust-lang.org/std/"
"alloc/struct.System.html) —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª—å–Ω–∏—Ü—å–∫—ñ —Ä–æ–∑–ø–æ–¥—ñ–ª—å–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ "
"—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é [API —Ä–æ–∑–ø–æ–¥—ñ–ª—å–Ω–∏–∫–∞](https://doc.rust-lang.org/std/"
"alloc/index.html)"

#: src/memory-management/stack.md:32
msgid ""
"We can inspect the memory layout with `unsafe` code. However, you should "
"point out that this is rightfully unsafe!"
msgstr ""
"–ú–∏ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º–∞–∫–µ—Ç –ø–∞–º‚Äô—è—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ` –∫–æ–¥—É. –û–¥–Ω–∞–∫ "
"–≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–∞–∑–Ω–∞—á–∏—Ç–∏, —â–æ —Ü–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ!"

#: src/memory-management/stack.md:34
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut s1 = String::from(\"Hello\");\n"
"    s1.push(' ');\n"
"    s1.push_str(\"world\");\n"
"    // DON'T DO THIS AT HOME! For educational purposes only.\n"
"    // String provides no guarantees about its layout, so this could lead "
"to\n"
"    // undefined behavior.\n"
"    unsafe {\n"
"        let (ptr, capacity, len): (usize, usize, usize) = std::mem::"
"transmute(s1);\n"
"        println!(\"ptr = {ptr:#x}, len = {len}, capacity = {capacity}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/memory-management/manual.md:3
msgid "You allocate and deallocate heap memory yourself."
msgstr "–í–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î—Ç–µ —Ç–∞ –∑–≤—ñ–ª—å–Ω—è—î—Ç–µ –ø–∞–º‚Äô—è—Ç—å –∫—É–ø–∏."

#: src/memory-management/manual.md:5
msgid ""
"If not done with care, this can lead to crashes, bugs, security "
"vulnerabilities, and memory leaks."
msgstr ""
"–Ø–∫—â–æ –Ω–µ —Ä–æ–±–∏—Ç–∏ —Ü–µ –æ–±–µ—Ä–µ–∂–Ω–æ, —Ü–µ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –∑–±–æ—ó–≤, –ø–æ–º–∏–ª–æ–∫, –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ "
"—Å–∏—Å—Ç–µ–º–∏ –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –≤–∏—Ç–æ–∫—É –ø–∞–º‚Äô—è—Ç—ñ."

#: src/memory-management/manual.md:7
msgid "C Example"
msgstr "C –ü—Ä–∏–∫–ª–∞–¥"

#: src/memory-management/manual.md:9
msgid "You must call `free` on every pointer you allocate with `malloc`:"
msgstr ""
"–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ `free` –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–∞–∂—á–∏–∫–∞, —è–∫–∏–π –≤–∏ –≤–∏–¥—ñ–ª—è—î—Ç–µ –∑–∞ "
"–¥–æ–ø–æ–º–æ–≥–æ—é `malloc`:"

#: src/memory-management/manual.md:11
msgid ""
"```c\n"
"void foo(size_t n) {\n"
"    int* int_array = malloc(n * sizeof(int));\n"
"    //\n"
"    // ... lots of code\n"
"    //\n"
"    free(int_array);\n"
"}\n"
"```"
msgstr ""

#: src/memory-management/manual.md:21
msgid ""
"Memory is leaked if the function returns early between `malloc` and `free`: "
"the pointer is lost and we cannot deallocate the memory. Worse, freeing the "
"pointer twice, or accessing a freed pointer can lead to exploitable security "
"vulnerabilities."
msgstr ""
"–í–∏—Ç—ñ–∫ –ø–∞–º‚Äô—è—Ç—ñ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —Ä–∞–Ω—ñ—à–µ –º—ñ–∂ `malloc` —ñ "
"`free`: –ø–æ–∫–∞–∂—á–∏–∫ –≤—Ç—Ä–∞—á–∞—î—Ç—å—Å—è, —ñ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø–∞–º‚Äô—è—Ç—å. –ì—ñ—Ä—à–µ —Ç–æ–≥–æ, "
"–¥–≤—ñ—á—ñ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∑–≤—ñ–ª—å–Ω–µ–Ω–æ–≥–æ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫–∞ –º–æ–∂–µ "
"–ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç–µ–π –±–µ–∑–ø–µ–∫–∏."

#: src/memory-management/scope-based.md:3
msgid ""
"Constructors and destructors let you hook into the lifetime of an object."
msgstr "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏ —Ç–∞ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —á–∞—Å –∂–∏—Ç—Ç—è –æ–±‚Äô—î–∫—Ç–∞."

#: src/memory-management/scope-based.md:5
msgid ""
"By wrapping a pointer in an object, you can free memory when the object is "
"destroyed. The compiler guarantees that this happens, even if an exception "
"is raised."
msgstr ""
"–ó–∞–≥–æ—Ä—Ç–∞—é—á–∏ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –≤ –æ–±‚Äô—î–∫—Ç, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –ø–∞–º‚Äô—è—Ç—å, –∫–æ–ª–∏ –æ–±‚Äô—î–∫—Ç "
"–∑–Ω–∏—â–µ–Ω–æ. –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ —Ü–µ —Å—Ç–∞–Ω–µ—Ç—å—Å—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–∏–Ω–∏–∫–Ω–µ –≤–∏–Ω—è—Ç–æ–∫."

#: src/memory-management/scope-based.md:9
msgid ""
"This is often called _resource acquisition is initialization_ (RAII) and "
"gives you smart pointers."
msgstr ""
"–¶–µ —á–∞—Å—Ç–æ –Ω–∞–∑–∏–≤–∞—é—Ç—å _–æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—É —î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é_ (RAII) —ñ –¥–∞—î —Ä–æ–∑—É–º–Ω—ñ "
"–≤–∫–∞–∑—ñ–≤–Ω–∏–∫–∏."

#: src/memory-management/scope-based.md:12
msgid "C++ Example"
msgstr "–ü—Ä–∏–∫–ª–∞–¥ C++"

#: src/memory-management/scope-based.md:14
msgid ""
"```c++\n"
"void say_hello(std::unique_ptr<Person> person) {\n"
"  std::cout << \"Hello \" << person->name << std::endl;\n"
"}\n"
"```"
msgstr ""

#: src/memory-management/scope-based.md:20
msgid ""
"The `std::unique_ptr` object is allocated on the stack, and points to memory "
"allocated on the heap."
msgstr ""
"–û–±‚Äô—î–∫—Ç `std::unique_ptr` —Ä–æ–∑–º—ñ—â–µ–Ω–æ –≤ —Å—Ç–µ–∫—É —Ç–∞ –≤–∫–∞–∑—É—î –Ω–∞ –ø–∞–º‚Äô—è—Ç—å, –≤–∏–¥—ñ–ª–µ–Ω—É –≤ "
"–∫—É–ø—ñ."

#: src/memory-management/scope-based.md:22
msgid "At the end of `say_hello`, the `std::unique_ptr` destructor will run."
msgstr "–ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ `say_hello` –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä `std::unique_ptr`."

#: src/memory-management/scope-based.md:23
msgid "The destructor frees the `Person` object it points to."
msgstr "–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–≤—ñ–ª—å–Ω—è—î –æ–±‚Äô—î–∫—Ç `Person`, –Ω–∞ —è–∫–∏–π –≤—ñ–Ω –≤–∫–∞–∑—É—î."

#: src/memory-management/scope-based.md:25
msgid ""
"Special move constructors are used when passing ownership to a function:"
msgstr ""
"–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ–¥–∞—á—ñ –ø—Ä–∞–≤–∞ "
"–≤–ª–∞—Å–Ω–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:"

#: src/memory-management/scope-based.md:27
msgid ""
"```c++\n"
"std::unique_ptr<Person> person = find_person(\"Carla\");\n"
"say_hello(std::move(person));\n"
"```"
msgstr ""

#: src/memory-management/garbage-collection.md:1
msgid "Automatic Memory Management"
msgstr "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é"

#: src/memory-management/garbage-collection.md:3
msgid ""
"An alternative to manual and scope-based memory management is automatic "
"memory management:"
msgstr ""
"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ—é —Ä—É—á–Ω–æ–º—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—é –ø–∞–º‚Äô—è—Ç—Ç—é —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—é –ø–∞–º‚Äô—è—Ç—Ç—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ "
"–æ–±—Å—è–≥—É —î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—Ç—é:"

#: src/memory-management/garbage-collection.md:6
msgid "The programmer never allocates or deallocates memory explicitly."
msgstr "–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –Ω—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏–¥—ñ–ª—è—î —Ç–∞ –Ω–µ –∑–≤—ñ–ª—å–Ω—è—î –ø–∞–º'—è—Ç—å —è–≤–Ω–æ."

#: src/memory-management/garbage-collection.md:7
msgid ""
"A garbage collector finds unused memory and deallocates it for the "
"programmer."
msgstr ""
"–ó–±–∏—Ä–∞—á —Å–º—ñ—Ç—Ç—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—É –ø–∞–º'—è—Ç—å —ñ –∑–≤—ñ–ª—å–Ω—è—î —ó—ó –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∞."

#: src/memory-management/garbage-collection.md:9
msgid "Java Example"
msgstr "–ü—Ä–∏–∫–ª–∞–¥ Java"

#: src/memory-management/garbage-collection.md:11
msgid "The `person` object is not deallocated after `sayHello` returns:"
msgstr "–û–±‚Äô—î–∫—Ç `person` –Ω–µ –∑–≤—ñ–ª—å–Ω—è—î—Ç—å—Å—è –ø—ñ—Å–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è `sayHello`:"

#: src/memory-management/garbage-collection.md:13
msgid ""
"```java\n"
"void sayHello(Person person) {\n"
"  System.out.println(\"Hello \" + person.getName());\n"
"}\n"
"```"
msgstr ""

#: src/memory-management/rust.md:1
msgid "Memory Management in Rust"
msgstr "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—Ç—é –≤ Rust"

#: src/memory-management/rust.md:3
msgid "Memory management in Rust is a mix:"
msgstr "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—Ç—é –≤ Rust —î —Å—É–º—ñ—à—à—é:"

#: src/memory-management/rust.md:5
msgid "Safe and correct like Java, but without a garbage collector."
msgstr "–ë–µ–∑–ø–µ—á–Ω–∏–π —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π, —è–∫ Java, –∞–ª–µ –±–µ–∑ –∑–±–∏—Ä–∞—á–∞ —Å–º—ñ—Ç—Ç—è."

#: src/memory-management/rust.md:6
msgid "Scope-based like C++, but the compiler enforces full adherence."
msgstr ""
"–ù–∞ –æ—Å–Ω–æ–≤—ñ –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ, —è–∫ C++, –∞–ª–µ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –∑–∞–±–µ–∑–ø–µ—á—É—î –ø–æ–≤–Ω–µ "
"–¥–æ—Ç—Ä–∏–º–∞–Ω–Ω—è."

#: src/memory-management/rust.md:7
msgid ""
"A Rust user can choose the right abstraction for the situation, some even "
"have no cost at runtime like C."
msgstr ""
"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á Rust –º–æ–∂–µ –≤–∏–±—Ä–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—é –¥–ª—è —Å–∏—Ç—É–∞—Ü—ñ—ó, –¥–µ—è–∫—ñ –Ω–∞–≤—ñ—Ç—å "
"–Ω–µ –º–∞—é—Ç—å –≤–∏—Ç—Ä–∞—Ç –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫ C."

#: src/memory-management/rust.md:9
msgid "Rust achieves this by modeling _ownership_ explicitly."
msgstr "Rust –¥–æ—Å—è–≥–∞—î —Ü—å–æ–≥–æ —à–ª—è—Ö–æ–º —è–≤–Ω–æ–≥–æ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è _–≤–æ–ª–æ–¥—ñ–Ω–Ω—è_."

#: src/memory-management/rust.md:13
msgid ""
"If asked how at this point, you can mention that in Rust this is usually "
"handled by RAII wrapper types such as [Box](https://doc.rust-lang.org/std/"
"boxed/struct.Box.html), [Vec](https://doc.rust-lang.org/std/vec/struct.Vec."
"html), [Rc](https://doc.rust-lang.org/std/rc/struct.Rc.html), or [Arc]"
"(https://doc.rust-lang.org/std/sync/struct.Arc.html). These encapsulate "
"ownership and memory allocation via various means, and prevent the potential "
"errors in C."
msgstr ""
"–Ø–∫—â–æ –≤–∞—Å –∑–∞–ø–∏—Ç–∞—é—Ç—å, —è–∫ –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≥–∞–¥–∞—Ç–∏, —â–æ –≤ Rust —Ü–µ "
"–∑–∞–∑–≤–∏—á–∞–π –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è —Ç–∏–ø–∞–º–∏ –æ–±–≥–æ—Ä—Ç–æ–∫ RAII, —Ç–∞–∫–∏–º–∏ —è–∫ [Box](https://doc.rust-"
"lang.org/std/boxed/struct.Box.html), [Vec](https://doc.rust-lang.org/std/vec/"
"struct.Vec.html), [Rc](https://doc.rust-lang.org/std/rc/struct.Rc .html) –∞–±–æ "
"[Arc](https://doc.rust-lang.org/std/sync/struct.Arc.html). –í–æ–Ω–∏ —ñ–Ω–∫–∞–ø—Å—É–ª—é—é—Ç—å "
"–ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ —Ç–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø–∞–º‚Äô—è—Ç—ñ —Ä—ñ–∑–Ω–∏–º–∏ –∑–∞—Å–æ–±–∞–º–∏ —Ç–∞ –∑–∞–ø–æ–±—ñ–≥–∞—é—Ç—å "
"–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–º –ø–æ–º–∏–ª–∫–∞–º —É C."

#: src/memory-management/rust.md:15
msgid ""
"You may be asked about destructors here, the [Drop](https://doc.rust-lang."
"org/std/ops/trait.Drop.html) trait is the Rust equivalent."
msgstr ""
"–¢—É—Ç –≤–∞—Å –º–æ–∂—É—Ç—å –∑–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏, —Ç—Ä–µ–π—Ç [Drop](https://doc.rust-lang."
"org/std/ops/trait.Drop.html) —î –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–æ–º Rust."

#: src/ownership.md:3
msgid ""
"All variable bindings have a _scope_ where they are valid and it is an error "
"to use a variable outside its scope:"
msgstr ""
"–£—Å—ñ –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ –∑–º—ñ–Ω–Ω–∏—Ö –º–∞—é—Ç—å _–æ–±–ª–∞—Å—Ç—å_, –¥–µ –≤–æ–Ω–∏ –¥—ñ–π—Å–Ω—ñ, —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è "
"–∑–º—ñ–Ω–Ω–æ—ó –ø–æ–∑–∞ —ó—ó –æ–±–ª–∞—Å—Ç—é —î –ø–æ–º–∏–ª–∫–æ—é:"

#: src/ownership.md:6
msgid ""
"```rust,editable,compile_fail\n"
"struct Point(i32, i32);\n"
"\n"
"fn main() {\n"
"    {\n"
"        let p = Point(3, 4);\n"
"        println!(\"x: {}\", p.0);\n"
"    }\n"
"    println!(\"y: {}\", p.1);\n"
"}\n"
"```"
msgstr ""

#: src/ownership.md:18
msgid ""
"At the end of the scope, the variable is _dropped_ and the data is freed."
msgstr "–£ –∫—ñ–Ω—Ü—ñ –æ–±–ª–∞—Å—Ç—ñ –∑–º—ñ–Ω–Ω–∞ _–≤—ñ–¥–∫–∏–¥–∞—î—Ç—å—Å—è_, –∞ –¥–∞–Ω—ñ –∑–≤—ñ–ª—å–Ω—è—é—Ç—å—Å—è."

#: src/ownership.md:19
msgid "A destructor can run here to free up resources."
msgstr "–¢—É—Ç –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä, —â–æ–± –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ —Ä–µ—Å—É—Ä—Å–∏."

#: src/ownership.md:20
msgid "We say that the variable _owns_ the value."
msgstr "–ú–∏ –≥–æ–≤–æ—Ä–∏–º–æ, —â–æ –∑–º—ñ–Ω–Ω–∞ _–≤–æ–ª–æ–¥—ñ—î_ –∑–Ω–∞—á–µ–Ω–Ω—è–º."

#: src/ownership/move-semantics.md:3
msgid "An assignment will transfer _ownership_ between variables:"
msgstr "–ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è –ø–µ—Ä–µ–¥–∞—Å—Ç—å _–≤–ª–∞—Å–Ω—ñ—Å—Ç—å_ –º—ñ–∂ –∑–º—ñ–Ω–Ω–∏–º–∏:"

#: src/ownership/move-semantics.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let s1: String = String::from(\"Hello!\");\n"
"    let s2: String = s1;\n"
"    println!(\"s2: {s2}\");\n"
"    // println!(\"s1: {s1}\");\n"
"}\n"
"```"
msgstr ""

#: src/ownership/move-semantics.md:14
msgid "The assignment of `s1` to `s2` transfers ownership."
msgstr "–ü—Ä–∏—Å–≤–æ—î–Ω–Ω—è `s1` `s2` –ø–µ—Ä–µ–¥–∞—î –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ."

#: src/ownership/move-semantics.md:15
msgid "When `s1` goes out of scope, nothing happens: it does not own anything."
msgstr ""
"–ö–æ–ª–∏ `s1` –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ, –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è: –≤—ñ–Ω "
"–Ω—ñ—á–æ–≥–æ –Ω–µ –≤–æ–ª–æ–¥—ñ—î."

#: src/ownership/move-semantics.md:16
msgid "When `s2` goes out of scope, the string data is freed."
msgstr "–ö–æ–ª–∏ `s2` –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ, –¥–∞–Ω—ñ —Ä—è–¥–∫–∞ –∑–≤—ñ–ª—å–Ω—è—é—Ç—å—Å—è."

#: src/ownership/move-semantics.md:17
msgid "There is always _exactly_ one variable binding which owns a value."
msgstr "–ó–∞–≤–∂–¥–∏ —ñ—Å–Ω—É—î _—Ä—ñ–≤–Ω–æ_ –æ–¥–Ω–µ –∑–≤‚Äô—è–∑—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó, —è–∫–µ –≤–æ–ª–æ–¥—ñ—î –∑–Ω–∞—á–µ–Ω–Ω—è–º."

#: src/ownership/move-semantics.md:21
msgid ""
"Mention that this is the opposite of the defaults in C++, which copies by "
"value unless you use `std::move` (and the move constructor is defined!)."
msgstr ""
"–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ —Ü–µ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—ñ—Å—Ç—å —Ç–∏–ø–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —É C++, —è–∫—ñ –∫–æ–ø—ñ—é—é—Ç—å –∑–∞ "
"–∑–Ω–∞—á–µ–Ω–Ω—è–º, —è–∫—â–æ –≤–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ `std::move` (—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è "
"–≤–∏–∑–Ω–∞—á–µ–Ω–æ!)."

#: src/ownership/move-semantics.md:23
msgid ""
"It is only the ownership that moves. Whether any machine code is generated "
"to manipulate the data itself is a matter of optimization, and such copies "
"are aggressively optimized away."
msgstr ""
"–†—É—Ö–∞—î—Ç—å—Å—è –ª–∏—à–µ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ. –ß–∏ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –±—É–¥—å-—è–∫–∏–π –º–∞—à–∏–Ω–Ω–∏–π –∫–æ–¥ –¥–ª—è "
"–º–∞–Ω—ñ–ø—É–ª—é–≤–∞–Ω–Ω—è —Å–∞–º–∏–º–∏ –¥–∞–Ω–∏–º–∏, —î –ø–∏—Ç–∞–Ω–Ω—è–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó, —ñ —Ç–∞–∫—ñ –∫–æ–ø—ñ—ó –∞–≥—Ä–µ—Å–∏–≤–Ω–æ "
"–æ–ø—Ç–∏–º—ñ–∑—É—é—Ç—å—Å—è."

#: src/ownership/move-semantics.md:25
msgid ""
"Simple values (such as integers) can be marked `Copy` (see later slides)."
msgstr ""
"–ü—Ä–æ—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Ü—ñ–ª—ñ —á–∏—Å–ª–∞) –º–æ–∂–Ω–∞ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ `–ö–æ–ø—ñ—é–≤–∞—Ç–∏` (–¥–∏–≤. "
"–Ω–∞—Å—Ç—É–ø–Ω—ñ —Å–ª–∞–π–¥–∏)."

#: src/ownership/move-semantics.md:27
msgid "In Rust, clones are explicit (by using `clone`)."
msgstr "–£ Rust –∫–ª–æ–Ω–∏ —î —è–≤–Ω–∏–º–∏ (–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `clone`)."

#: src/ownership/moved-strings-rust.md:3
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let s1: String = String::from(\"Rust\");\n"
"    let s2: String = s1;\n"
"}\n"
"```"
msgstr ""

#: src/ownership/moved-strings-rust.md:10
msgid "The heap data from `s1` is reused for `s2`."
msgstr "–î–∞–Ω—ñ –∫—É–ø–∏ –∑ `s1` –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è `s2`."

#: src/ownership/moved-strings-rust.md:11
msgid "When `s1` goes out of scope, nothing happens (it has been moved from)."
msgstr ""
"–ö–æ–ª–∏ `s1` –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ, –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è (–π–æ–≥–æ "
"–±—É–ª–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –∑)."

#: src/ownership/moved-strings-rust.md:13
msgid "Before move to `s2`:"
msgstr "–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–æ `s2`:"

#: src/ownership/moved-strings-rust.md:15
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - -.\n"
":                           :     :                           :\n"
":    s1                     :     :                           :\n"
":   +-----------+-------+   :     :   +----+----+----+----+   :\n"
":   | ptr       |   o---+---+-----+-->| R  | u  | s  | t  |   :\n"
":   | len       |     4 |   :     :   +----+----+----+----+   :\n"
":   | capacity  |     4 |   :     :                           :\n"
":   +-----------+-------+   :     :                           :\n"
":                           :     `- - - - - - - - - - - - - -'\n"
":                           :\n"
"`- - - - - - - - - - - - - -'\n"
"```"
msgstr ""

#: src/ownership/moved-strings-rust.md:30
msgid "After move to `s2`:"
msgstr "–ü—ñ—Å–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ `s2`:"

#: src/ownership/moved-strings-rust.md:32
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - -.\n"
":                           :     :                           :\n"
":    s1 \"(inaccessible)\"    :     :                           :\n"
":   +-----------+-------+   :     :   +----+----+----+----+   :\n"
":   | ptr       |   o---+---+--+--+-->| R  | u  | s  | t  |   :\n"
":   | len       |     4 |   :  |  :   +----+----+----+----+   :\n"
":   | capacity  |     4 |   :  |  :                           :\n"
":   +-----------+-------+   :  |  :                           :\n"
":                           :  |  `- - - - - - - - - - - - - -'\n"
":    s2                     :  |\n"
":   +-----------+-------+   :  |\n"
":   | ptr       |   o---+---+--'\n"
":   | len       |     4 |   :\n"
":   | capacity  |     4 |   :\n"
":   +-----------+-------+   :\n"
":                           :\n"
"`- - - - - - - - - - - - - -'\n"
"```"
msgstr ""

#: src/ownership/double-free-modern-cpp.md:1
msgid "Defensive Copies in Modern C++"
msgstr "–ó–∞—Ö–∏—Å–Ω—ñ –∫–æ–ø—ñ—ó –≤ —Å—É—á–∞—Å–Ω–æ–º—É C++"

#: src/ownership/double-free-modern-cpp.md:3
msgid "Modern C++ solves this differently:"
msgstr "–°—É—á–∞—Å–Ω–∏–π C++ –≤–∏—Ä—ñ—à—É—î —Ü–µ —ñ–Ω–∞–∫—à–µ:"

#: src/ownership/double-free-modern-cpp.md:5
msgid ""
"```c++\n"
"std::string s1 = \"Cpp\";\n"
"std::string s2 = s1;  // Duplicate the data in s1.\n"
"```"
msgstr ""

#: src/ownership/double-free-modern-cpp.md:10
msgid ""
"The heap data from `s1` is duplicated and `s2` gets its own independent copy."
msgstr "–î–∞–Ω—ñ –∫—É–ø–∏ –∑ `s1` –¥—É–±–ª—é—é—Ç—å—Å—è, –∞ `s2` –æ—Ç—Ä–∏–º—É—î –≤–ª–∞—Å–Ω—É –Ω–µ–∑–∞–ª–µ–∂–Ω—É –∫–æ–ø—ñ—é."

#: src/ownership/double-free-modern-cpp.md:11
msgid "When `s1` and `s2` go out of scope, they each free their own memory."
msgstr ""
"–ö–æ–ª–∏ `s1` —ñ `s2` –≤–∏—Ö–æ–¥—è—Ç—å –∑–∞ –º–µ–∂—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ, –∫–æ–∂–µ–Ω –∑ –Ω–∏—Ö –∑–≤—ñ–ª—å–Ω—è—î –≤–ª–∞—Å–Ω—É "
"–ø–∞–º'—è—Ç—å."

#: src/ownership/double-free-modern-cpp.md:13
msgid "Before copy-assignment:"
msgstr "–ü–µ—Ä–µ–¥ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è–º:"

#: src/ownership/double-free-modern-cpp.md:16
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - -.\n"
":                           :     :                       :\n"
":    s1                     :     :                       :\n"
":   +-----------+-------+   :     :   +----+----+----+    :\n"
":   | ptr       |   o---+---+--+--+-->| C  | p  | p  |    :\n"
":   | len       |     3 |   :     :   +----+----+----+    :\n"
":   | capacity  |     3 |   :     :                       :\n"
":   +-----------+-------+   :     :                       :\n"
":                           :     `- - - - - - - - - - - -'\n"
"`- - - - - - - - - - - - - -'\n"
"```"
msgstr ""

#: src/ownership/double-free-modern-cpp.md:30
msgid "After copy-assignment:"
msgstr "–ü—ñ—Å–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:"

#: src/ownership/double-free-modern-cpp.md:32
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - -.\n"
":                           :     :                       :\n"
":    s1                     :     :                       :\n"
":   +-----------+-------+   :     :   +----+----+----+    :\n"
":   | ptr       |   o---+---+--+--+-->| C  | p  | p  |    :\n"
":   | len       |     3 |   :     :   +----+----+----+    :\n"
":   | capacity  |     3 |   :     :                       :\n"
":   +-----------+-------+   :     :                       :\n"
":                           :     :                       :\n"
":    s2                     :     :                       :\n"
":   +-----------+-------+   :     :   +----+----+----+    :\n"
":   | ptr       |   o---+---+-----+-->| C  | p  | p  |    :\n"
":   | len       |     3 |   :     :   +----+----+----+    :\n"
":   | capacity  |     3 |   :     :                       :\n"
":   +-----------+-------+   :     :                       :\n"
":                           :     `- - - - - - - - - - - -'\n"
"`- - - - - - - - - - - - - -'\n"
"```"
msgstr ""

#: src/ownership/double-free-modern-cpp.md:57
msgid ""
"C++ has made a slightly different choice than Rust. Because `=` copies data, "
"the string data has to be cloned. Otherwise we would get a double-free when "
"either string goes out of scope."
msgstr ""
"C++ –∑—Ä–æ–±–∏–≤ –¥–µ—â–æ —ñ–Ω—à–∏–π –≤–∏–±—ñ—Ä, –Ω—ñ–∂ Rust. –û—Å–∫—ñ–ª—å–∫–∏ `=` –∫–æ–ø—ñ—é—î –¥–∞–Ω—ñ, –¥–∞–Ω—ñ —Ä—è–¥–∫–∞ "
"–ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–ª–æ–Ω—É–≤–∞—Ç–∏. –Ü–Ω–∞–∫—à–µ –º–∏ –æ—Ç—Ä–∏–º–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–µ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è, –∫–æ–ª–∏ –±—É–¥—å-—è–∫–∏–π "
"—Ä—è–¥–æ–∫ –≤–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –º–µ–∂—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ."

#: src/ownership/double-free-modern-cpp.md:61
msgid ""
"C++ also has [`std::move`](https://en.cppreference.com/w/cpp/utility/move), "
"which is used to indicate when a value may be moved from. If the example had "
"been `s2 = std::move(s1)`, no heap allocation would take place. After the "
"move, `s1` would be in a valid but unspecified state. Unlike Rust, the "
"programmer is allowed to keep using `s1`."
msgstr ""
"C++ —Ç–∞–∫–æ–∂ –º–∞—î [`std::move`](https://en.cppreference.com/w/cpp/utility/move), "
"—è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤–∫–∞–∑—ñ–≤–∫–∏, –∫–æ–ª–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏. –Ø–∫–±–∏ "
"–ø—Ä–∏–∫–ª–∞–¥ –±—É–≤ `s2 = std::move(s1)`, —Ä–æ–∑–ø–æ–¥—ñ–ª—É –∫—É–ø–∏ –Ω–µ –≤—ñ–¥–±—É–ª–æ—Å—è –±. –ü—ñ—Å–ª—è "
"–ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è `s1` –±—É–¥–µ –≤ –¥—ñ–π—Å–Ω–æ–º—É, –∞–ª–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ. –ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ "
"Rust, –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—É –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `s1`."

#: src/ownership/double-free-modern-cpp.md:66
msgid ""
"Unlike Rust, `=` in C++ can run arbitrary code as determined by the type "
"which is being copied or moved."
msgstr ""
"–ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ Rust, `=' —É C++ –º–æ–∂–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω–∏–π –∫–æ–¥, —è–∫–∏–π "
"–≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —Ç–∏–ø–æ–º, —è–∫–∏–π –∫–æ–ø—ñ—é—î—Ç—å—Å—è –∞–±–æ –ø–µ—Ä–µ–º—ñ—â—É—î—Ç—å—Å—è."

#: src/ownership/moves-function-calls.md:3
msgid ""
"When you pass a value to a function, the value is assigned to the function "
"parameter. This transfers ownership:"
msgstr ""
"–ö–æ–ª–∏ –≤–∏ –ø–µ—Ä–µ–¥–∞—î—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó, —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏—Å–≤–æ—é—î—Ç—å—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—É "
"—Ñ—É–Ω–∫—Ü—ñ—ó. –¶–µ –ø–µ—Ä–µ–¥–∞—î –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ:"

#: src/ownership/moves-function-calls.md:6
msgid ""
"```rust,editable\n"
"fn say_hello(name: String) {\n"
"    println!(\"Hello {name}\")\n"
"}\n"
"\n"
"fn main() {\n"
"    let name = String::from(\"Alice\");\n"
"    say_hello(name);\n"
"    // say_hello(name);\n"
"}\n"
"```"
msgstr ""

#: src/ownership/moves-function-calls.md:20
msgid ""
"With the first call to `say_hello`, `main` gives up ownership of `name`. "
"Afterwards, `name` cannot be used anymore within `main`."
msgstr ""
"–ó –ø–µ—Ä—à–∏–º –≤–∏–∫–ª–∏–∫–æ–º `say_hello` `main` –ø–µ—Ä–µ–¥–∞—î –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –Ω–∞ `name`. "
"–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ `name` –±—ñ–ª—å—à–µ –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ `main`."

#: src/ownership/moves-function-calls.md:21
msgid ""
"The heap memory allocated for `name` will be freed at the end of the "
"`say_hello` function."
msgstr ""
"–ü–∞–º‚Äô—è—Ç—å –∫—É–ø–∏, –≤–∏–¥—ñ–ª–µ–Ω–∞ –¥–ª—è `name`, –±—É–¥–µ –∑–≤—ñ–ª—å–Ω–µ–Ω–æ –≤ –∫—ñ–Ω—Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó "
"`say_hello`."

#: src/ownership/moves-function-calls.md:22
msgid ""
"`main` can retain ownership if it passes `name` as a reference (`&name`) and "
"if `say_hello` accepts a reference as a parameter."
msgstr ""
"`main` –º–æ–∂–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ, —è–∫—â–æ –≤—ñ–Ω –ø–µ—Ä–µ–¥–∞—î `name` —è–∫ –ø–æ—Å–∏–ª–∞–Ω–Ω—è "
"(`&name`) —ñ —è–∫—â–æ `say_hello` –ø—Ä–∏–π–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä."

#: src/ownership/moves-function-calls.md:23
msgid ""
"Alternatively, `main` can pass a clone of `name` in the first call (`name."
"clone()`)."
msgstr ""
"–ö—Ä—ñ–º —Ç–æ–≥–æ, `main` –º–æ–∂–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–ª–æ–Ω `name` –ø—ñ–¥ —á–∞—Å –ø–µ—Ä—à–æ–≥–æ –≤–∏–∫–ª–∏–∫—É (`name."
"clone()`)."

#: src/ownership/moves-function-calls.md:24
msgid ""
"Rust makes it harder than C++ to inadvertently create copies by making move "
"semantics the default, and by forcing programmers to make clones explicit."
msgstr ""
"Rust —É—Å–∫–ª–∞–¥–Ω—é—î –Ω–µ–Ω–∞–≤–º–∏—Å–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ø—ñ–π, –Ω—ñ–∂ C++, —Ä–æ–±–ª—è—á–∏ —Å–µ–º–∞–Ω—Ç–∏–∫—É "
"–ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —ñ –∑–º—É—à—É—é—á–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ —Ä–æ–±–∏—Ç–∏ –∫–ª–æ–Ω–∏ —è–≤–Ω–∏–º–∏."

#: src/ownership/copy-clone.md:3
msgid ""
"While move semantics are the default, certain types are copied by default:"
msgstr ""
"–•–æ—á–∞ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —î —Ç–∏–ø–æ–≤–æ—é, –ø–µ–≤–Ω—ñ —Ç–∏–ø–∏ –∫–æ–ø—ñ—é—é—Ç—å—Å—è –∑–∞ —É–º–æ–≤—á–∞–Ω–Ω—è–º:"

#: src/ownership/copy-clone.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let x = 42;\n"
"    let y = x;\n"
"    println!(\"x: {x}\");\n"
"    println!(\"y: {y}\");\n"
"}\n"
"```"
msgstr ""

#: src/ownership/copy-clone.md:14
msgid "These types implement the `Copy` trait."
msgstr "–¶—ñ —Ç–∏–ø–∏ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å \"–ö–æ–ø—ñ—é–≤–∞—Ç–∏\"."

#: src/ownership/copy-clone.md:16
msgid "You can opt-in your own types to use copy semantics:"
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ —Ç–∏–ø–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å–µ–º–∞–Ω—Ç–∏–∫–∏ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è:"

#: src/ownership/copy-clone.md:18
msgid ""
"```rust,editable\n"
"#[derive(Copy, Clone, Debug)]\n"
"struct Point(i32, i32);\n"
"\n"
"fn main() {\n"
"    let p1 = Point(3, 4);\n"
"    let p2 = p1;\n"
"    println!(\"p1: {p1:?}\");\n"
"    println!(\"p2: {p2:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/ownership/copy-clone.md:30
msgid "After the assignment, both `p1` and `p2` own their own data."
msgstr "–ü—ñ—Å–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ `p1`, —ñ `p2` –≤–æ–ª–æ–¥—ñ—é—Ç—å –≤–ª–∞—Å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏."

#: src/ownership/copy-clone.md:31
msgid "We can also use `p1.clone()` to explicitly copy the data."
msgstr ""
"–ú–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `p1.clone()` –¥–ª—è —è–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö."

#: src/ownership/copy-clone.md:35
msgid "Copying and cloning are not the same thing:"
msgstr "–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–∞ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è ‚Äì —Ü–µ –Ω–µ –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ:"

#: src/ownership/copy-clone.md:37
msgid ""
"Copying refers to bitwise copies of memory regions and does not work on "
"arbitrary objects."
msgstr ""
"–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Å—Ç–æ—Å—É—î—Ç—å—Å—è –ø–æ—Ä–æ–∑—Ä—è–¥–Ω–∏—Ö –∫–æ–ø—ñ–π –æ–±–ª–∞—Å—Ç–µ–π –ø–∞–º‚Äô—è—Ç—ñ —Ç–∞ –Ω–µ –ø—Ä–∞—Ü—é—î –∑ "
"–¥–æ–≤—ñ–ª—å–Ω–∏–º–∏ –æ–±‚Äô—î–∫—Ç–∞–º–∏."

#: src/ownership/copy-clone.md:38
msgid ""
"Copying does not allow for custom logic (unlike copy constructors in C++)."
msgstr ""
"–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –Ω–µ –¥–æ–ø—É—Å–∫–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ (–Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤ "
"–∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ C++)."

#: src/ownership/copy-clone.md:39
msgid ""
"Cloning is a more general operation and also allows for custom behavior by "
"implementing the `Clone` trait."
msgstr ""
"–ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ –±—ñ–ª—å—à –∑–∞–≥–∞–ª—å–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è, —è–∫–∞ —Ç–∞–∫–æ–∂ –¥–æ–ø—É—Å–∫–∞—î –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É "
"–ø–æ–≤–µ–¥—ñ–Ω–∫—É —à–ª—è—Ö–æ–º —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ—ó ¬´–ö–ª–æ–Ω—É–≤–∞—Ç–∏¬ª."

#: src/ownership/copy-clone.md:40
msgid "Copying does not work on types that implement the `Drop` trait."
msgstr "–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–∞—Ü—é—î –∑ —Ç–∏–ø–∞–º–∏, —è–∫—ñ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Drop."

#: src/ownership/copy-clone.md:42 src/ownership/lifetimes-function-calls.md:29
msgid "In the above example, try the following:"
msgstr "–£ –Ω–∞–≤–µ–¥–µ–Ω–æ–º—É –≤–∏—â–µ –ø—Ä–∏–∫–ª–∞–¥—ñ —Å–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–µ:"

#: src/ownership/copy-clone.md:44
msgid ""
"Add a `String` field to `struct Point`. It will not compile because `String` "
"is not a `Copy` type."
msgstr ""
"–î–æ–¥–∞–π—Ç–µ –ø–æ–ª–µ `String` –¥–æ `struct Point`. –í—ñ–Ω –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ "
"`String` –Ω–µ —î —Ç–∏–ø–æ–º `Copy`."

#: src/ownership/copy-clone.md:45
msgid ""
"Remove `Copy` from the `derive` attribute. The compiler error is now in the "
"`println!` for  `p1`."
msgstr ""
"–í–∏–¥–∞–ª—ñ—Ç—å `Copy` –∑ –∞—Ç—Ä–∏–±—É—Ç–∞ `derive`. –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞ —Ç–µ–ø–µ—Ä —É `println!` "
"–¥–ª—è `p1`."

#: src/ownership/copy-clone.md:46
msgid "Show that it works if you clone `p1` instead."
msgstr "–ü–æ–∫–∞–∂—ñ—Ç—å, —â–æ —Ü–µ –ø—Ä–∞—Ü—é—î, —è–∫—â–æ –∑–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –∫–ª–æ–Ω—É–≤–∞—Ç–∏ `p1`."

#: src/ownership/copy-clone.md:48
msgid ""
"If students ask about `derive`, it is sufficient to say that this is a way "
"to generate code in Rust at compile time. In this case the default "
"implementations of `Copy` and `Clone` traits are generated."
msgstr ""
"–Ø–∫—â–æ —É—á–Ω—ñ –∑–∞–ø–∏—Ç—É—é—Ç—å –ø—Ä–æ `derive`, –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–∫–∞–∑–∞—Ç–∏, —â–æ —Ü–µ —Å–ø–æ—Å—ñ–± –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ "
"–∫–æ–¥ —É Rust –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó. –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ "
"—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–∑–Ω–∞–∫ `–ö–æ–ø—ñ—é–≤–∞—Ç–∏` —ñ `–ö–ª–æ–Ω—É–≤–∞—Ç–∏`."

#: src/ownership/borrowing.md:3
msgid ""
"Instead of transferring ownership when calling a function, you can let a "
"function _borrow_ the value:"
msgstr ""
"–ó–∞–º—ñ—Å—Ç—å —Ç–æ–≥–æ, —â–æ–± –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó, –≤–∏ "
"–º–æ–∂–µ—Ç–µ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó _–ø–æ–∑–∏—á–∏—Ç–∏_ –∑–Ω–∞—á–µ–Ω–Ω—è:"

#: src/ownership/borrowing.md:6
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Point(i32, i32);\n"
"\n"
"fn add(p1: &Point, p2: &Point) -> Point {\n"
"    Point(p1.0 + p2.0, p1.1 + p2.1)\n"
"}\n"
"\n"
"fn main() {\n"
"    let p1 = Point(3, 4);\n"
"    let p2 = Point(10, 20);\n"
"    let p3 = add(&p1, &p2);\n"
"    println!(\"{p1:?} + {p2:?} = {p3:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/ownership/borrowing.md:22
msgid "The `add` function _borrows_ two points and returns a new point."
msgstr "–§—É–Ω–∫—Ü—ñ—è `add` _–ø–æ–∑–∏—á–∞—î_ –¥–≤—ñ —Ç–æ—á–∫–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤—É —Ç–æ—á–∫—É."

#: src/ownership/borrowing.md:23
msgid "The caller retains ownership of the inputs."
msgstr "–ê–±–æ–Ω–µ–Ω—Ç –∑–±–µ—Ä—ñ–≥–∞—î –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –Ω–∞ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ."

#: src/ownership/borrowing.md:27
msgid "Notes on stack returns:"
msgstr "–ü—Ä–∏–º—ñ—Ç–∫–∏ —â–æ–¥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Å—Ç–µ–∫–∞:"

#: src/ownership/borrowing.md:28
msgid ""
"Demonstrate that the return from `add` is cheap because the compiler can "
"eliminate the copy operation. Change the above code to print stack addresses "
"and run it on the [Playground](https://play.rust-lang.org/) or look at the "
"assembly in [Godbolt](https://rust.godbolt.org/). In the \"DEBUG\" "
"optimization level, the addresses should change, while they stay the same "
"when changing to the \"RELEASE\" setting:"
msgstr ""
"–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–π—Ç–µ, —â–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ `add` —î –¥–µ—à–µ–≤–∏–º, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –º–æ–∂–µ "
"–≤–∏–∫–ª—é—á–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è. –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞–≤–µ–¥–µ–Ω–∏–π –≤–∏—â–µ –∫–æ–¥, —â–æ–± –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏ "
"–∞–¥—Ä–µ—Å–∏ —Å—Ç–µ–∫—ñ–≤, —ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –Ω–∞ [Playground](https://play.rust-lang.org/) "
"–∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∑–±—ñ—Ä–∫—É –≤ [Godbolt](https://rust.godbolt.org/ ). –ù–∞ —Ä—ñ–≤–Ω—ñ "
"–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó \"DEBUG\" –∞–¥—Ä–µ—Å–∏ –º–∞—é—Ç—å –∑–º—ñ–Ω–∏—Ç–∏—Å—è, –∞–ª–µ –≤–æ–Ω–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è "
"–Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ \"RELEASE\":"

#: src/ownership/borrowing.md:30
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Point(i32, i32);\n"
"\n"
"fn add(p1: &Point, p2: &Point) -> Point {\n"
"    let p = Point(p1.0 + p2.0, p1.1 + p2.1);\n"
"    println!(\"&p.0: {:p}\", &p.0);\n"
"    p\n"
"}\n"
"\n"
"pub fn main() {\n"
"    let p1 = Point(3, 4);\n"
"    let p2 = Point(10, 20);\n"
"    let p3 = add(&p1, &p2);\n"
"    println!(\"&p3.0: {:p}\", &p3.0);\n"
"    println!(\"{p1:?} + {p2:?} = {p3:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/ownership/borrowing.md:48
msgid "The Rust compiler can do return value optimization (RVO)."
msgstr "–ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä Rust –º–æ–∂–µ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è (RVO)."

#: src/ownership/borrowing.md:49
msgid ""
"In C++, copy elision has to be defined in the language specification because "
"constructors can have side effects. In Rust, this is not an issue at all. If "
"RVO did not happen, Rust will always perform a simple and efficient `memcpy` "
"copy."
msgstr ""
"–£ C++ –∑–∞–±–æ—Ä–æ–Ω–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –≤ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –º–æ–≤–∏, "
"–æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –ø–æ–±—ñ—á–Ω—ñ –µ—Ñ–µ–∫—Ç–∏. –£ Rust —Ü–µ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ "
"–ø—Ä–æ–±–ª–µ–º–∞. –Ø–∫—â–æ RVO –Ω–µ –≤—ñ–¥–±—É–ª–æ—Å—è, Rust –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏–º–µ –ø—Ä–æ—Å—Ç—É —Ç–∞ "
"–µ—Ñ–µ–∫—Ç–∏–≤–Ω—É –∫–æ–ø—ñ—é `memcpy`."

#: src/ownership/shared-unique-borrows.md:3
msgid "Rust puts constraints on the ways you can borrow values:"
msgstr "Rust –Ω–∞–∫–ª–∞–¥–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —Å–ø–æ—Å–æ–±–∏ –∑–∞–ø–æ–∑–∏—á–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å:"

#: src/ownership/shared-unique-borrows.md:5
msgid "You can have one or more `&T` values at any given time, _or_"
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –º–∞—Ç–∏ –æ–¥–Ω–µ –∞–±–æ –∫—ñ–ª—å–∫–∞ –∑–Ω–∞—á–µ–Ω—å `&T` –≤ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç —á–∞—Å—É, _–∞–±–æ_"

#: src/ownership/shared-unique-borrows.md:6
msgid "You can have exactly one `&mut T` value."
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –º–∞—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è `&mut T`."

#: src/ownership/shared-unique-borrows.md:8
msgid ""
"```rust,editable,compile_fail\n"
"fn main() {\n"
"    let mut a: i32 = 10;\n"
"    let b: &i32 = &a;\n"
"\n"
"    {\n"
"        let c: &mut i32 = &mut a;\n"
"        *c = 20;\n"
"    }\n"
"\n"
"    println!(\"a: {a}\");\n"
"    println!(\"b: {b}\");\n"
"}\n"
"```"
msgstr ""

#: src/ownership/shared-unique-borrows.md:25
msgid ""
"The above code does not compile because `a` is borrowed as mutable (through "
"`c`) and as immutable (through `b`) at the same time."
msgstr ""
"–ù–∞–≤–µ–¥–µ–Ω–∏–π –≤–∏—â–µ –∫–æ–¥ –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ `a` –∑–∞–ø–æ–∑–∏—á–µ–Ω–æ —è–∫ –∑–º—ñ–Ω–Ω–∏–π "
"(—á–µ—Ä–µ–∑ `c`) —ñ —è–∫ –Ω–µ–∑–º—ñ–Ω–Ω–∏–π (—á–µ—Ä–µ–∑ `b`) –æ–¥–Ω–æ—á–∞—Å–Ω–æ."

#: src/ownership/shared-unique-borrows.md:26
msgid ""
"Move the `println!` statement for `b` before the scope that introduces `c` "
"to make the code compile."
msgstr ""
"–ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä `println!` –¥–ª—è `b` –ø–µ—Ä–µ–¥ –æ–±–ª–∞—Å—Ç—é, —è–∫–∞ –≤–≤–æ–¥–∏—Ç—å `c`, —â–æ–± "
"–∫–æ–º–ø—ñ–ª—é–≤–∞—Ç–∏ –∫–æ–¥."

#: src/ownership/shared-unique-borrows.md:27
msgid ""
"After that change, the compiler realizes that `b` is only ever used before "
"the new mutable borrow of `a` through `c`. This is a feature of the borrow "
"checker called \"non-lexical lifetimes\"."
msgstr ""
"–ü—ñ—Å–ª—è —Ü—ñ—î—ó –∑–º—ñ–Ω–∏ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä —Ä–æ–∑—É–º—ñ—î, —â–æ `b` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–¥ "
"–Ω–æ–≤–∏–º –∑–º—ñ–Ω–Ω–∏–º –∑–∞–ø–æ–∑–∏—á–µ–Ω–Ω—è–º `a` —á–µ—Ä–µ–∑ `c`. –¶–µ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ø–æ–∑–∏—á–µ–Ω—å "
"–ø—ñ–¥ –Ω–∞–∑–≤–æ—é ¬´–Ω–µ–ª–µ–∫—Å–∏—á–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ –∂–∏—Ç—Ç—è¬ª."

#: src/ownership/lifetimes.md:3
msgid "A borrowed value has a _lifetime_:"
msgstr "–ü–æ–∑–∏—á–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—î _—á–∞—Å –∂–∏—Ç—Ç—è_:"

#: src/ownership/lifetimes.md:5
msgid "The lifetime can be implicit: `add(p1: &Point, p2: &Point) -> Point`."
msgstr "–ß–∞—Å –∂–∏—Ç—Ç—è –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—è–≤–Ω–∏–º: `add(p1: &Point, p2: &Point) -> Point`."

#: src/ownership/lifetimes.md:6
msgid "Lifetimes can also be explicit: `&'a Point`, `&'document str`."
msgstr "–ß–∞—Å –∂–∏—Ç—Ç—è —Ç–∞–∫–æ–∂ –º–æ–∂–µ –±—É—Ç–∏ —è–≤–Ω–∏–º: `&'a Point`, `&'document str`."

#: src/ownership/lifetimes.md:7 src/ownership/lifetimes-function-calls.md:23
msgid ""
"Read `&'a Point` as \"a borrowed `Point` which is valid for at least the "
"lifetime `a`\"."
msgstr ""
"–ß–∏—Ç–∞–π—Ç–µ `&'a Point` —è–∫ \"–ø–æ–∑–∏—á–µ–Ω–∏–π `Point`, —è–∫–∏–π –¥—ñ–π—Å–Ω–∏–π –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –ø—Ä–æ—Ç—è–≥–æ–º "
"—É—Å—å–æ–≥–æ –∂–∏—Ç—Ç—è `a`\"."

#: src/ownership/lifetimes.md:9
msgid ""
"Lifetimes are always inferred by the compiler: you cannot assign a lifetime "
"yourself."
msgstr ""
"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è –∑–∞–≤–∂–¥–∏ –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–æ–º: –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ "
"—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ."

#: src/ownership/lifetimes.md:11
msgid ""
"Lifetime annotations create constraints; the compiler verifies that there is "
"a valid solution."
msgstr ""

#: src/ownership/lifetimes.md:13
msgid ""
"Lifetimes for function arguments and return values must be fully specified, "
"but Rust allows lifetimes to be elided in most cases with [a few simple "
"rules](https://doc.rust-lang.org/nomicon/lifetime-elision.html)."
msgstr ""
"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –º–∞—î –±—É—Ç–∏ "
"–ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–∑–Ω–∞—á–µ–Ω–∞, –∞–ª–µ Rust –¥–æ–∑–≤–æ–ª—è—î —É –±—ñ–ª—å—à–æ—Å—Ç—ñ –≤–∏–ø–∞–¥–∫—ñ–≤ –≤–∏–∫–ª—é—á–∞—Ç–∏ "
"—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é [–∫—ñ–ª—å–∫–æ—Ö –ø—Ä–æ—Å—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª](https://doc.rust-lang."
"org/nomicon/lifetime-elision.html) ."

#: src/ownership/lifetimes-function-calls.md:3
msgid ""
"In addition to borrowing its arguments, a function can return a borrowed "
"value:"
msgstr ""
"–û–∫—Ä—ñ–º –∑–∞–ø–æ–∑–∏—á–µ–Ω–Ω—è —Å–≤–æ—ó—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –ø–æ–∑–∏—á–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è:"

#: src/ownership/lifetimes-function-calls.md:5
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Point(i32, i32);\n"
"\n"
"fn left_most<'a>(p1: &'a Point, p2: &'a Point) -> &'a Point {\n"
"    if p1.0 < p2.0 { p1 } else { p2 }\n"
"}\n"
"\n"
"fn main() {\n"
"    let p1: Point = Point(10, 10);\n"
"    let p2: Point = Point(20, 20);\n"
"    let p3: &Point = left_most(&p1, &p2);\n"
"    println!(\"left-most point: {:?}\", p3);\n"
"}\n"
"```"
msgstr ""

#: src/ownership/lifetimes-function-calls.md:21
msgid "`'a` is a generic parameter, it is inferred by the compiler."
msgstr "\"a\" —î –∑–∞–≥–∞–ª—å–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –π–æ–≥–æ –≤–∏–∑–Ω–∞—á–∞—î –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä."

#: src/ownership/lifetimes-function-calls.md:22
msgid "Lifetimes start with `'` and `'a` is a typical default name."
msgstr ""
"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ ```, –∞ ``a` —î —Ç–∏–ø–æ–≤–æ—é –Ω–∞–∑–≤–æ—é –∑–∞ —É–º–æ–≤—á–∞–Ω–Ω—è–º."

#: src/ownership/lifetimes-function-calls.md:25
msgid ""
"The _at least_ part is important when parameters are in different scopes."
msgstr ""
"–ß–∞—Å—Ç–∏–Ω–∞ _at least_ –≤–∞–∂–ª–∏–≤–∞, –∫–æ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ —Ä—ñ–∑–Ω–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö."

#: src/ownership/lifetimes-function-calls.md:31
msgid ""
"Move the declaration of `p2` and `p3` into a new scope (`{ ... }`), "
"resulting in the following code:"
msgstr ""
"–ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è `p2` —ñ `p3` –≤ –Ω–æ–≤—É –æ–±–ª–∞—Å—Ç—å (`{ ... }`), —â–æ –ø—Ä–∏–∑–≤–µ–¥–µ "
"–¥–æ —Ç–∞–∫–æ–≥–æ –∫–æ–¥—É:"

#: src/ownership/lifetimes-function-calls.md:32
msgid ""
"```rust,ignore\n"
"#[derive(Debug)]\n"
"struct Point(i32, i32);\n"
"\n"
"fn left_most<'a>(p1: &'a Point, p2: &'a Point) -> &'a Point {\n"
"    if p1.0 < p2.0 { p1 } else { p2 }\n"
"}\n"
"\n"
"fn main() {\n"
"    let p1: Point = Point(10, 10);\n"
"    let p3: &Point;\n"
"    {\n"
"        let p2: Point = Point(20, 20);\n"
"        p3 = left_most(&p1, &p2);\n"
"    }\n"
"    println!(\"left-most point: {:?}\", p3);\n"
"}\n"
"```"
msgstr ""

#: src/ownership/lifetimes-function-calls.md:50
msgid "Note how this does not compile since `p3` outlives `p2`."
msgstr "–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ —Ü–µ –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ `p3` –ø–µ—Ä–µ–∂–∏–≤–∞—î `p2`."

#: src/ownership/lifetimes-function-calls.md:52
msgid ""
"Reset the workspace and change the function signature to `fn left_most<'a, "
"'b>(p1: &'a Point, p2: &'a Point) -> &'b Point`. This will not compile "
"because the relationship between the lifetimes `'a` and `'b` is unclear."
msgstr ""
"–°–∫–∏–Ω—å—Ç–µ —Ä–æ–±–æ—á—É –æ–±–ª–∞—Å—Ç—å —ñ –∑–º—ñ–Ω—ñ—Ç—å –ø—ñ–¥–ø–∏—Å —Ñ—É–Ω–∫—Ü—ñ—ó –Ω–∞ `fn left_most<'a, 'b>(p1: "
"&'a Point, p2: &'a Point) -> &'b Point`. –¶–µ –Ω–µ –±—É–¥–µ –∫–æ–º–ø—ñ–ª—é–≤–∞—Ç–∏—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ "
"–∑–≤‚Äô—è–∑–æ–∫ –º—ñ–∂ —á–∞—Å–∞–º–∏ –∂–∏—Ç—Ç—è `'a` —ñ `'b` –Ω–µ—è—Å–Ω–∏–π."

#: src/ownership/lifetimes-function-calls.md:53
msgid "Another way to explain it:"
msgstr "–Ü–Ω—à–∏–π —Å–ø–æ—Å—ñ–± –ø–æ—è—Å–Ω–∏—Ç–∏ —Ü–µ:"

#: src/ownership/lifetimes-function-calls.md:54
msgid ""
"Two references to two values are borrowed by a function and the function "
"returns another reference."
msgstr ""
"–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø–æ–∑–∏—á—É—î –¥–≤–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–Ω—è, —ñ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω—à–µ "
"–ø–æ—Å–∏–ª–∞–Ω–Ω—è."

#: src/ownership/lifetimes-function-calls.md:56
msgid ""
"It must have come from one of those two inputs (or from a global variable)."
msgstr ""
"–í—ñ–Ω, –º–∞–±—É—Ç—å, –Ω–∞–¥—ñ–π—à–æ–≤ –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –∑ —Ü–∏—Ö –¥–≤–æ—Ö –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–∞–±–æ –≤—ñ–¥ "
"–≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∑–º—ñ–Ω–Ω–æ—ó)."

#: src/ownership/lifetimes-function-calls.md:57
msgid ""
"Which one is it? The compiler needs to know, so at the call site the "
"returned reference is not used for longer than a variable from where the "
"reference came from."
msgstr ""
"—è–∫–∏–π —Ü–µ? –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä –ø–æ–≤–∏–Ω–µ–Ω –∑–Ω–∞—Ç–∏, —Ç–æ–º—É –Ω–∞ —Å–∞–π—Ç—ñ –≤–∏–∫–ª–∏–∫—É –ø–æ–≤–µ—Ä–Ω—É—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è "
"–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–æ–≤—à–µ, –Ω—ñ–∂ –∑–º—ñ–Ω–Ω–∞, –∑–≤—ñ–¥–∫–∏ –Ω–∞–¥—ñ–π—à–ª–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."

#: src/ownership/lifetimes-data-structures.md:3
msgid ""
"If a data type stores borrowed data, it must be annotated with a lifetime:"
msgstr ""
"–Ø–∫—â–æ —Ç–∏–ø –¥–∞–Ω–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—î –∑–∞–ø–æ–∑–∏—á–µ–Ω—ñ –¥–∞–Ω—ñ, –≤—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∞–Ω–æ—Ç–æ–≤–∞–Ω–∏–π —á–∞—Å–æ–º "
"–∂–∏—Ç—Ç—è:"

#: src/ownership/lifetimes-data-structures.md:5
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Highlight<'doc>(&'doc str);\n"
"\n"
"fn erase(text: String) {\n"
"    println!(\"Bye {text}!\");\n"
"}\n"
"\n"
"fn main() {\n"
"    let text = String::from(\"The quick brown fox jumps over the lazy dog."
"\");\n"
"    let fox = Highlight(&text[4..19]);\n"
"    let dog = Highlight(&text[35..43]);\n"
"    // erase(text);\n"
"    println!(\"{fox:?}\");\n"
"    println!(\"{dog:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/ownership/lifetimes-data-structures.md:25
msgid ""
"In the above example, the annotation on `Highlight` enforces that the data "
"underlying the contained `&str` lives at least as long as any instance of "
"`Highlight` that uses that data."
msgstr ""
"–£ –Ω–∞–≤–µ–¥–µ–Ω–æ–º—É –≤–∏—â–µ –ø—Ä–∏–∫–ª–∞–¥—ñ –∞–Ω–æ—Ç–∞—Ü—ñ—è –Ω–∞ `Highlight` –∑–∞–±–µ–∑–ø–µ—á—É—î —Ç–µ, —â–æ –¥–∞–Ω—ñ, "
"—â–æ –ª–µ–∂–∞—Ç—å –≤ –æ—Å–Ω–æ–≤—ñ `&str`, –∂–∏–≤—É—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ —Å—Ç—ñ–ª—å–∫–∏ –∂, —Å–∫—ñ–ª—å–∫–∏ –±—É–¥—å-—è–∫–∏–π "
"–µ–∫–∑–µ–º–ø–ª—è—Ä `Highlight`, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü—ñ –¥–∞–Ω—ñ."

#: src/ownership/lifetimes-data-structures.md:26
msgid ""
"If `text` is consumed before the end of the lifetime of `fox` (or `dog`), "
"the borrow checker throws an error."
msgstr ""
"–Ø–∫—â–æ `text` —Å–ø–æ–∂–∏–≤–∞—î—Ç—å—Å—è –¥–æ –∫—ñ–Ω—Ü—è –∂–∏—Ç—Ç—è `fox` (–∞–±–æ `dog`), –∑–∞—Å—ñ–± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ "
"–∑–∞–ø–æ–∑–∏—á–µ–Ω—å –≤–∏–¥–∞—î –ø–æ–º–∏–ª–∫—É."

#: src/ownership/lifetimes-data-structures.md:27
msgid ""
"Types with borrowed data force users to hold on to the original data. This "
"can be useful for creating lightweight views, but it generally makes them "
"somewhat harder to use."
msgstr ""
"–¢–∏–ø–∏ –∑ –∑–∞–ø–æ–∑–∏—á–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑–º—É—à—É—é—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤–∏—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ. –¶–µ "
"–º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–µ–≥–∫–∏—Ö –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤, –∞–ª–µ –∑–∞–∑–≤–∏—á–∞–π —É—Å–∫–ª–∞–¥–Ω—é—î "
"—ó—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è."

#: src/ownership/lifetimes-data-structures.md:28
msgid "When possible, make data structures own their data directly."
msgstr ""
"–Ø–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ, –∑—Ä–æ–±—ñ—Ç—å —Ç–∞–∫, —â–æ–± —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤–æ–ª–æ–¥—ñ–ª–∏ "
"—Å–≤–æ—ó–º–∏ –¥–∞–Ω–∏–º–∏."

#: src/ownership/lifetimes-data-structures.md:29
msgid ""
"Some structs with multiple references inside can have more than one lifetime "
"annotation. This can be necessary if there is a need to describe lifetime "
"relationships between the references themselves, in addition to the lifetime "
"of the struct itself. Those are very advanced use cases."
msgstr ""
"–î–µ—è–∫—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑ –¥–µ–∫—ñ–ª—å–∫–æ–º–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –±—ñ–ª—å—à–µ –æ–¥–Ω—ñ—î—ó "
"–∞–Ω–æ—Ç–∞—Ü—ñ—ó –∑–∞ –≤–µ—Å—å —á–∞—Å —ñ—Å–Ω—É–≤–∞–Ω–Ω—è. –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º, —è–∫—â–æ —î –ø–æ—Ç—Ä–µ–±–∞ "
"–æ–ø–∏—Å–∞—Ç–∏ –∑–≤‚Äô—è–∑–∫–∏ –º—ñ–∂ —Å–∞–º–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –¥–æ–¥–∞—Ç–æ–∫ –¥–æ —á–∞—Å—É –∂–∏—Ç—Ç—è —Å–∞–º–æ—ó "
"—Å—Ç—Ä—É–∫—Ç—É—Ä–∏. –¶–µ –¥—É–∂–µ —Å–∫–ª–∞–¥–Ω—ñ –≤–∏–ø–∞–¥–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è."

#: src/structs.md:3
msgid "Like C and C++, Rust has support for custom structs:"
msgstr "–ü–æ–¥—ñ–±–Ω–æ –¥–æ C —ñ C++, Rust –ø—ñ–¥—Ç—Ä–∏–º—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞–ª—å–Ω–∏—Ü—å–∫—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:"

#: src/structs.md:5
msgid ""
"```rust,editable\n"
"struct Person {\n"
"    name: String,\n"
"    age: u8,\n"
"}\n"
"\n"
"fn main() {\n"
"    let mut peter = Person {\n"
"        name: String::from(\"Peter\"),\n"
"        age: 27,\n"
"    };\n"
"    println!(\"{} is {} years old\", peter.name, peter.age);\n"
"    \n"
"    peter.age = 28;\n"
"    println!(\"{} is {} years old\", peter.name, peter.age);\n"
"    \n"
"    let jackie = Person {\n"
"        name: String::from(\"Jackie\"),\n"
"        ..peter\n"
"    };\n"
"    println!(\"{} is {} years old\", jackie.name, jackie.age);\n"
"}\n"
"```"
msgstr ""

#: src/structs.md:33
msgid "Structs work like in C or C++."
msgstr "–°—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å —è–∫ —É C –∞–±–æ C++."

#: src/structs.md:34
msgid "Like in C++, and unlike in C, no typedef is needed to define a type."
msgstr ""
"–Ø–∫ —ñ –≤ C++, —ñ –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ C, –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω typedef."

#: src/structs.md:35
msgid "Unlike in C++, there is no inheritance between structs."
msgstr "–ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ C++, –º—ñ–∂ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –Ω–µ–º–∞—î —É—Å–ø–∞–¥–∫—É–≤–∞–Ω–Ω—è."

#: src/structs.md:36
msgid ""
"Methods are defined in an `impl` block, which we will see in following "
"slides."
msgstr ""
"–ú–µ—Ç–æ–¥–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤ –±–ª–æ—Ü—ñ `impl`, —è–∫–∏–π –º–∏ –ø–æ–±–∞—á–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–∞–π–¥–∞—Ö."

#: src/structs.md:37
msgid ""
"This may be a good time to let people know there are different types of "
"structs. "
msgstr ""
"–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–¥–∞–ª–∏–π —á–∞—Å, —â–æ–± –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ª—é–¥—è–º, —â–æ —ñ—Å–Ω—É—é—Ç—å —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ "
"—Å—Ç—Ä—É–∫—Ç—É—Ä."

#: src/structs.md:38
msgid ""
"Zero-sized structs `e.g., struct Foo;` might be used when implementing a "
"trait on some type but don‚Äôt have any data that you want to store in the "
"value itself. "
msgstr ""

#: src/structs.md:39
msgid ""
"The next slide will introduce Tuple structs, used when the field names are "
"not important."
msgstr ""
"–ù–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Å–ª–∞–π–¥—ñ –±—É–¥–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ—Ä—Ç–µ–∂—É, —è–∫—ñ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è, –∫–æ–ª–∏ —ñ–º–µ–Ω–∞ –ø–æ–ª—ñ–≤ –Ω–µ –≤–∞–∂–ª–∏–≤—ñ."

#: src/structs.md:40
msgid ""
"The syntax `..peter` allows us to copy the majority of the fields from the "
"old struct without having to explicitly type it all out. It must always be "
"the last element."
msgstr ""
"–°–∏–Ω—Ç–∞–∫—Å–∏—Å `..peter` –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –±—ñ–ª—å—à—ñ—Å—Ç—å –ø–æ–ª—ñ–≤ –∑—ñ —Å—Ç–∞—Ä–æ—ó "
"—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–µ–∑ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —è–≤–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –≤—Å—å–æ–≥–æ. –¶–µ –∑–∞–≤–∂–¥–∏ –º–∞—î –±—É—Ç–∏ "
"–æ—Å—Ç–∞–Ω–Ω—ñ–º –µ–ª–µ–º–µ–Ω—Ç–æ–º."

#: src/structs/tuple-structs.md:3
msgid "If the field names are unimportant, you can use a tuple struct:"
msgstr "–Ø–∫—â–æ —ñ–º–µ–Ω–∞ –ø–æ–ª—ñ–≤ –Ω–µ–≤–∞–∂–ª–∏–≤—ñ, –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ—Ä—Ç–µ–∂—É:"

#: src/structs/tuple-structs.md:5
msgid ""
"```rust,editable\n"
"struct Point(i32, i32);\n"
"\n"
"fn main() {\n"
"    let p = Point(17, 23);\n"
"    println!(\"({}, {})\", p.0, p.1);\n"
"}\n"
"```"
msgstr ""

#: src/structs/tuple-structs.md:14
msgid "This is often used for single-field wrappers (called newtypes):"
msgstr ""
"–¶–µ —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±–≥–æ—Ä—Ç–æ–∫ –∑ –æ–¥–Ω–∏–º –ø–æ–ª–µ–º (—Ç–∞–∫ –∑–≤–∞–Ω—ñ –Ω–æ–≤—ñ —Ç–∏–ø–∏):"

#: src/structs/tuple-structs.md:16
msgid ""
"```rust,editable,compile_fail\n"
"struct PoundsOfForce(f64);\n"
"struct Newtons(f64);\n"
"\n"
"fn compute_thruster_force() -> PoundsOfForce {\n"
"    todo!(\"Ask a rocket scientist at NASA\")\n"
"}\n"
"\n"
"fn set_thruster_force(force: Newtons) {\n"
"    // ...\n"
"}\n"
"\n"
"fn main() {\n"
"    let force = compute_thruster_force();\n"
"    set_thruster_force(force);\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/structs/tuple-structs.md:37
msgid ""
"Newtypes are a great way to encode additional information about the value in "
"a primitive type, for example:"
msgstr ""
"Newtypes ‚Äî —á—É–¥–æ–≤–∏–π —Å–ø–æ—Å—ñ–± –∑–∞–∫–æ–¥—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ "
"–ø—Ä–∏–º—ñ—Ç–∏–≤–Ω–æ–º—É —Ç–∏–ø—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:"

#: src/structs/tuple-structs.md:38
msgid "The number is measured in some units: `Newtons` in the example above."
msgstr ""
"–ß–∏—Å–ª–æ –≤–∏–º—ñ—Ä—é—î—Ç—å—Å—è –≤ –¥–µ—è–∫–∏—Ö –æ–¥–∏–Ω–∏—Ü—è—Ö: —É –Ω–∞–≤–µ–¥–µ–Ω–æ–º—É –≤–∏—â–µ –ø—Ä–∏–∫–ª–∞–¥—ñ \"–ù—å—é—Ç–æ–Ω\"."

#: src/structs/tuple-structs.md:39
msgid ""
"The value passed some validation when it was created, so you no longer have "
"to validate it again at every use: 'PhoneNumber(String)`or`OddNumber(u32)\\`."
msgstr ""
"–ó–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–π—à–ª–æ –ø–µ–≤–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, —Ç–æ–º—É –≤–∞–º –±—ñ–ª—å—à–µ –Ω–µ "
"–ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –π–æ–≥–æ –∑–Ω–æ–≤—É –ø—ñ–¥ —á–∞—Å –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ¬´–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É "
"(—Ä—è–¥–æ–∫)¬ª –∞–±–æ ¬´–ù–µ–ø–∞—Ä–Ω–∏–π –Ω–æ–º–µ—Ä (u32)¬ª."

#: src/structs/tuple-structs.md:40
msgid ""
"Demonstrate how to add a `f64` value to a `Newtons` type by accessing the "
"single field in the newtype."
msgstr ""
"–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–π—Ç–µ, —è–∫ –¥–æ–¥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è `f64` –¥–æ —Ç–∏–ø—É `Newtons`, –æ—Ç—Ä–∏–º–∞–≤—à–∏ "
"–¥–æ—Å—Ç—É–ø –¥–æ —î–¥–∏–Ω–æ–≥–æ –ø–æ–ª—è –≤ newtype."

#: src/structs/tuple-structs.md:41
msgid ""
"Rust generally doesn‚Äôt like inexplicit things, like automatic unwrapping or "
"for instance using booleans as integers."
msgstr ""
"Rust –∑–∞–∑–≤–∏—á–∞–π –Ω–µ –ª—é–±–∏—Ç—å –Ω–µ—è–≤–Ω–∏—Ö —Ä–µ—á–µ–π, —Ç–∞–∫–∏—Ö —è–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∞–±–æ, "
"–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–≥—ñ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —è–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª."

#: src/structs/tuple-structs.md:42
msgid "Operator overloading is discussed on Day 3 (generics)."
msgstr "–ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –æ–±–≥–æ–≤–æ—Ä—é—î—Ç—å—Å—è –≤ –¥–µ–Ω—å 3 (–≥–µ–Ω–µ—Ä–∏–∫–∏)."

#: src/structs/tuple-structs.md:43
msgid ""
"The example is a subtle reference to the [Mars Climate Orbiter](https://en."
"wikipedia.org/wiki/Mars_Climate_Orbiter) failure."
msgstr ""
"–¶–µ–π –ø—Ä–∏–∫–ª–∞–¥ —î —Ç–æ–Ω–∫–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –Ω–µ–≤–¥–∞—á—É [Mars Climate Orbiter](https://en."
"wikipedia.org/wiki/Mars_Climate_Orbiter)."

#: src/structs/field-shorthand.md:3
msgid ""
"If you already have variables with the right names, then you can create the "
"struct using a shorthand:"
msgstr ""
"–Ø–∫—â–æ —É –≤–∞—Å —É–∂–µ —î –∑–º—ñ–Ω–Ω—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ —ñ–º–µ–Ω–∞–º–∏, –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É "
"–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è:"

#: src/structs/field-shorthand.md:6
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Person {\n"
"    name: String,\n"
"    age: u8,\n"
"}\n"
"\n"
"impl Person {\n"
"    fn new(name: String, age: u8) -> Person {\n"
"        Person { name, age }\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let peter = Person::new(String::from(\"Peter\"), 27);\n"
"    println!(\"{peter:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/structs/field-shorthand.md:27
msgid ""
"The `new` function could be written using `Self` as a type, as it is "
"interchangeable with the struct type name"
msgstr ""
"–§—É–Ω–∫—Ü—ñ—è `new` –º–æ–∂–µ –±—É—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∞ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º `Self` —è–∫ —Ç–∏–ø—É, –æ—Å–∫—ñ–ª—å–∫–∏ "
"–≤–æ–Ω–∞ –≤–∑–∞—î–º–æ–∑–∞–º—ñ–Ω–Ω–∞ –∑ –Ω–∞–∑–≤–æ—é —Ç–∏–ø—É struct"

#: src/structs/field-shorthand.md:29
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Person {\n"
"    name: String,\n"
"    age: u8,\n"
"}\n"
"impl Person {\n"
"    fn new(name: String, age: u8) -> Self {\n"
"        Self { name, age }\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/structs/field-shorthand.md:41
msgid ""
"Implement the `Default` trait for the struct. Define some fields and use the "
"default values for the other fields."
msgstr ""
"–†–µ–∞–ª—ñ–∑—É–π—Ç–µ –∞—Ç—Ä–∏–±—É—Ç `Default` –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏. –í–∏–∑–Ω–∞—á—Ç–µ –¥–µ—è–∫—ñ –ø–æ–ª—è —Ç–∞ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–ª—ñ–≤."

#: src/structs/field-shorthand.md:43
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Person {\n"
"    name: String,\n"
"    age: u8,\n"
"}\n"
"impl Default for Person {\n"
"    fn default() -> Person {\n"
"        Person {\n"
"            name: \"Bot\".to_string(),\n"
"            age: 0,\n"
"        }\n"
"    }\n"
"}\n"
"fn create_default() {\n"
"    let tmp = Person {\n"
"        ..Person::default()\n"
"    };\n"
"    let tmp = Person {\n"
"        name: \"Sam\".to_string(),\n"
"        ..Person::default()\n"
"    };\n"
"}\n"
"```"
msgstr ""

#: src/structs/field-shorthand.md:68
msgid "Methods are defined in the `impl` block."
msgstr "–ú–µ—Ç–æ–¥–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –≤ –±–ª–æ—Ü—ñ `impl`."

#: src/structs/field-shorthand.md:69
msgid ""
"Use struct update syntax to define a new structure using `peter`. Note that "
"the variable `peter` will no longer be accessible afterwards."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏, —â–æ–± –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É "
"–∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `peter`. –ó–∞—É–≤–∞–∂—Ç–µ, —â–æ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –∑–º—ñ–Ω–Ω–∞ `peter` –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ "
"–¥–æ—Å—Ç—É–ø–Ω–æ—é."

#: src/structs/field-shorthand.md:70
msgid ""
"Use `{:#?}` when printing structs to request the `Debug` representation."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `{:#?}` –ø—ñ–¥ —á–∞—Å –¥—Ä—É–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è –∑–∞–ø–∏—Ç—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è "
"`Debug`."

#: src/methods.md:3
msgid ""
"Rust allows you to associate functions with your new types. You do this with "
"an `impl` block:"
msgstr ""
"Rust –¥–æ–∑–≤–æ–ª—è—î –ø–æ–≤‚Äô—è–∑—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –Ω–æ–≤–∏–º–∏ —Ç–∏–ø–∞–º–∏. –í–∏ —Ä–æ–±–∏—Ç–µ —Ü–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
"–±–ª–æ–∫—É `impl`:"

#: src/methods.md:6
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Person {\n"
"    name: String,\n"
"    age: u8,\n"
"}\n"
"\n"
"impl Person {\n"
"    fn say_hello(&self) {\n"
"        println!(\"Hello, my name is {}\", self.name);\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let peter = Person {\n"
"        name: String::from(\"Peter\"),\n"
"        age: 27,\n"
"    };\n"
"    peter.say_hello();\n"
"}\n"
"```"
msgstr ""

#: src/methods.md:31
msgid "It can be helpful to introduce methods by comparing them to functions."
msgstr "–ú–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–∏ –º–µ—Ç–æ–¥–∏, –ø–æ—Ä—ñ–≤–Ω—é—é—á–∏ —ó—Ö —ñ–∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏."

#: src/methods.md:32
msgid ""
"Methods are called on an instance of a type (such as a struct or enum), the "
"first parameter represents the instance as `self`."
msgstr ""
"–ú–µ—Ç–æ–¥–∏ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è –¥–ª—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç–∏–ø—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, struct –∞–±–æ enum), –ø–µ—Ä—à–∏–π "
"–ø–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –µ–∫–∑–µ–º–ø–ª—è—Ä —è–∫ `self`."

#: src/methods.md:33
msgid ""
"Developers may choose to use methods to take advantage of method receiver "
"syntax and to help keep them more organized. By using methods we can keep "
"all the implementation code in one predictable place."
msgstr ""
"–†–æ–∑—Ä–æ–±–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥–∏, —â–æ–± —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –ø–µ—Ä–µ–≤–∞–≥–∞–º–∏ "
"—Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É –ø—Ä–∏–π–º–∞—á–∞ –º–µ—Ç–æ–¥—ñ–≤ —ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ —ó–º –±—É—Ç–∏ –±—ñ–ª—å—à –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω–∏–º–∏. "
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥–∏, –º–∏ –º–æ–∂–µ–º–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤–µ—Å—å –∫–æ–¥ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤ –æ–¥–Ω–æ–º—É "
"–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–æ–º—É –º—ñ—Å—Ü—ñ."

#: src/methods.md:34
msgid "Point out the use of the keyword `self`, a method receiver."
msgstr ""
"–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ `self`, –ø—Ä–∏–π–º–∞—á–∞ –º–µ—Ç–æ–¥—É."

#: src/methods.md:35
msgid ""
"Show that it is an abbreviated term for `self: Self` and perhaps show how "
"the struct name could also be used."
msgstr ""
"–ü–æ–∫–∞–∂—ñ—Ç—å, —â–æ —Ü–µ —Å–∫–æ—Ä–æ—á–µ–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –¥–ª—è `self: Self` —ñ, –º–æ–∂–ª–∏–≤–æ, –ø–æ–∫–∞–∂—ñ—Ç—å, —è–∫ "
"–º–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏."

#: src/methods.md:36
msgid ""
"Explain that `Self` is a type alias for the type the `impl` block is in and "
"can be used elsewhere in the block."
msgstr ""
"–ü–æ—è—Å–Ω—ñ—Ç—å, —â–æ `Self` ‚Äî —Ü–µ –ø—Å–µ–≤–¥–æ–Ω—ñ–º —Ç–∏–ø—É –¥–ª—è —Ç–∏–ø—É, –¥–æ —è–∫–æ–≥–æ –≤—Ö–æ–¥–∏—Ç—å –±–ª–æ–∫ "
"`impl`, —ñ –π–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–µ—ñ–Ω–¥–µ –≤ –±–ª–æ—Ü—ñ."

#: src/methods.md:37
msgid ""
"Note how `self` is used like other structs and dot notation can be used to "
"refer to individual fields."
msgstr ""
"–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ `self` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, —è–∫ —ñ —ñ–Ω—à—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏, —ñ –∫—Ä–∞–ø–∫–æ–≤–∞ "
"–Ω–æ—Ç–∞—Ü—ñ—è –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–∫—Ä–µ–º—ñ –ø–æ–ª—è."

#: src/methods.md:38
msgid ""
"This might be a good time to demonstrate how the `&self` differs from `self` "
"by modifying the code and trying to run say_hello twice."
msgstr ""
"–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –≥–∞—Ä–Ω–∏–π —á–∞—Å, —â–æ–± –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏, —á–∏–º `&self` –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ "
"`self`, –∑–º—ñ–Ω–∏–≤—à–∏ –∫–æ–¥ —ñ —Å–ø—Ä–æ–±—É–≤–∞–≤—à–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ say_hello –¥–≤—ñ—á—ñ."

#: src/methods.md:39
msgid "We describe the distinction between method receivers next."
msgstr "–î–∞–ª—ñ –º–∏ –æ–ø–∏—à–µ–º–æ —Ä—ñ–∑–Ω–∏—Ü—é –º—ñ–∂ –ø—Ä–∏–π–º–∞—á–∞–º–∏ –º–µ—Ç–æ–¥—ñ–≤."

#: src/methods/receiver.md:3
msgid ""
"The `&self` above indicates that the method borrows the object immutably. "
"There are other possible receivers for a method:"
msgstr ""
"`&self` –≤–∏—â–µ –≤–∫–∞–∑—É—î –Ω–∞ —Ç–µ, —â–æ –º–µ—Ç–æ–¥ –Ω–µ–∑–º—ñ–Ω–Ω–æ –ø–æ–∑–∏—á–∞—î –æ–±‚Äô—î–∫—Ç. –Ü—Å–Ω—É—é—Ç—å —ñ–Ω—à—ñ "
"–º–æ–∂–ª–∏–≤—ñ –ø—Ä–∏–π–º–∞—á—ñ –¥–ª—è –º–µ—Ç–æ–¥—É:"

#: src/methods/receiver.md:6
msgid ""
"`&self`: borrows the object from the caller using a shared and immutable "
"reference. The object can be used again afterwards."
msgstr ""
"`&self`: –∑–∞–ø–æ–∑–∏—á—É—î –æ–±‚Äô—î–∫—Ç —É –≤–∏–∫–ª–∏–∫–∞—é—á–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ç–∞ "
"–Ω–µ–∑–º—ñ–Ω–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –æ–±‚Äô—î–∫—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É."

#: src/methods/receiver.md:8
msgid ""
"`&mut self`: borrows the object from the caller using a unique and mutable "
"reference. The object can be used again afterwards."
msgstr ""
"`&mut self`: –∑–∞–ø–æ–∑–∏—á—É—î –æ–±‚Äô—î–∫—Ç —É –∞–±–æ–Ω–µ–Ω—Ç–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —Ç–∞ –∑–º—ñ–Ω–Ω–µ "
"–ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –æ–±‚Äô—î–∫—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É."

#: src/methods/receiver.md:10
msgid ""
"`self`: takes ownership of the object and moves it away from the caller. The "
"method becomes the owner of the object. The object will be dropped "
"(deallocated) when the method returns, unless its ownership is explicitly "
"transmitted. Complete ownership does not automatically mean mutability."
msgstr ""
"`self`: –ø—Ä–∏–π–º–∞—î –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –Ω–∞ –æ–±'—î–∫—Ç —ñ –ø–µ—Ä–µ–º—ñ—â—É—î –π–æ–≥–æ –≤—ñ–¥ –∞–±–æ–Ω–µ–Ω—Ç–∞. "
"–ú–µ—Ç–æ–¥ —Å—Ç–∞—î –≤–ª–∞—Å–Ω–∏–∫–æ–º –æ–±'—î–∫—Ç–∞. –û–±‚Äô—î–∫—Ç –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ (–≤–∏–ª—É—á–µ–Ω–æ), –∫–æ–ª–∏ –º–µ—Ç–æ–¥ "
"–ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è, —è–∫—â–æ –π–æ–≥–æ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —è–≤–Ω–æ. –ü–æ–≤–Ω–∞ –≤–ª–∞—Å–Ω—ñ—Å—Ç—å –Ω–µ "
"–æ–∑–Ω–∞—á–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–º—ñ–Ω–∏."

#: src/methods/receiver.md:14
msgid "`mut self`: same as above, but the method can mutate the object. "
msgstr "`mut self`: —Ç–µ —Å–∞–º–µ, —â–æ –π –≤–∏—â–µ, –∞–ª–µ –º–µ—Ç–æ–¥ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ–±‚Äô—î–∫—Ç."

#: src/methods/receiver.md:15
msgid ""
"No receiver: this becomes a static method on the struct. Typically used to "
"create constructors which are called `new` by convention."
msgstr ""
"–ù–µ–º–∞—î –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: —Ü–µ —Å—Ç–∞—î —Å—Ç–∞—Ç–∏—á–Ω–∏–º –º–µ—Ç–æ–¥–æ–º —É —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ. –ó–∞–∑–≤–∏—á–∞–π "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤, —è–∫—ñ –∑–∞ –¥–æ–º–æ–≤–ª–µ–Ω—ñ—Å—Ç—é "
"–Ω–∞–∑–∏–≤–∞—é—Ç—å—Å—è ¬´–Ω–æ–≤–∏–º–∏¬ª."

#: src/methods/receiver.md:18
msgid ""
"Beyond variants on `self`, there are also [special wrapper types](https://"
"doc.rust-lang.org/reference/special-types-and-traits.html) allowed to be "
"receiver types, such as `Box<Self>`."
msgstr ""
"–û–∫—Ä—ñ–º –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ `self`, —ñ—Å–Ω—É—é—Ç—å —Ç–∞–∫–æ–∂ [—Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ –æ–±–æ–ª–æ–Ω–∫–∏](https://doc."
"rust-lang.org/reference/special-types-and-traits.html), —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ "
"—Ç–∏–ø–∞–º–∏ –ø—Ä–∏–π–º–∞—á—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `Box <Self>`."

#: src/methods/receiver.md:24
msgid ""
"Consider emphasizing \"shared and immutable\" and \"unique and mutable\". "
"These constraints always come together in Rust due to borrow checker rules, "
"and `self` is no exception. It isn't possible to reference a struct from "
"multiple locations and call a mutating (`&mut self`) method on it."
msgstr ""
"–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–≥–æ–ª–æ—Å–∏—Ç–∏ –Ω–∞ ¬´—Å–ø—ñ–ª—å–Ω–∏—Ö —ñ –Ω–µ–∑–º—ñ–Ω–Ω–∏—Ö¬ª —ñ ¬´—É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ –∑–º—ñ–Ω–Ω–∏—Ö¬ª. –¶—ñ "
"–æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞–≤–∂–¥–∏ –ø–æ—î–¥–Ω—É—é—Ç—å—Å—è –≤ Rust –∑–∞–≤–¥—è–∫–∏ –ø—Ä–∞–≤–∏–ª–∞–º –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–ø–æ–∑–∏—á–µ–Ω—å, —ñ "
"`self` –Ω–µ —î –≤–∏–Ω—è—Ç–∫–æ–º. –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ—Å–∏–ª–∞—Ç–∏—Å—è –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ –∫—ñ–ª—å–∫–æ—Ö –º—ñ—Å—Ü—å —ñ "
"–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –Ω–∞ –Ω—ñ–π –º—É—Ç—É—é—á–∏–π –º–µ—Ç–æ–¥ (`&mut self`)."

#: src/methods/example.md:3
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Race {\n"
"    name: String,\n"
"    laps: Vec<i32>,\n"
"}\n"
"\n"
"impl Race {\n"
"    fn new(name: &str) -> Race {  // No receiver, a static method\n"
"        Race { name: String::from(name), laps: Vec::new() }\n"
"    }\n"
"\n"
"    fn add_lap(&mut self, lap: i32) {  // Exclusive borrowed read-write "
"access to self\n"
"        self.laps.push(lap);\n"
"    }\n"
"\n"
"    fn print_laps(&self) {  // Shared and read-only borrowed access to self\n"
"        println!(\"Recorded {} laps for {}:\", self.laps.len(), self.name);\n"
"        for (idx, lap) in self.laps.iter().enumerate() {\n"
"            println!(\"Lap {idx}: {lap} sec\");\n"
"        }\n"
"    }\n"
"\n"
"    fn finish(self) {  // Exclusive ownership of self\n"
"        let total = self.laps.iter().sum::<i32>();\n"
"        println!(\"Race {} is finished, total lap time: {}\", self.name, "
"total);\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let mut race = Race::new(\"Monaco Grand Prix\");\n"
"    race.add_lap(70);\n"
"    race.add_lap(68);\n"
"    race.print_laps();\n"
"    race.add_lap(71);\n"
"    race.print_laps();\n"
"    race.finish();\n"
"    // race.add_lap(42);\n"
"}\n"
"```"
msgstr ""

#: src/methods/example.md:47
msgid "All four methods here use a different method receiver."
msgstr "–£—Å—ñ —á–æ—Ç–∏—Ä–∏ –º–µ—Ç–æ–¥–∏ —Ç—É—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Ä—ñ–∑–Ω—ñ –ø—Ä–∏–π–º–∞—á—ñ –º–µ—Ç–æ–¥—ñ–≤."

#: src/methods/example.md:48
msgid ""
"You can point out how that changes what the function can do with the "
"variable values and if/how it can be used again in `main`."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏, —è–∫ —Ü–µ –∑–º—ñ–Ω—é—î —Ç–µ, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ —Ä–æ–±–∏—Ç–∏ –∑—ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ "
"–∑–º—ñ–Ω–Ω–∏—Ö, —ñ —è–∫—â–æ/—è–∫ —ó—ó –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É –≤ `main`."

#: src/methods/example.md:49
msgid ""
"You can showcase the error that appears when trying to call `finish` twice."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É, —è–∫–∞ –∑‚Äô—è–≤–ª—è—î—Ç—å—Å—è –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –¥–≤—ñ—á—ñ "
"–≤–∏–∫–ª–∏–∫–∞—Ç–∏ `finish`."

#: src/methods/example.md:50
msgid ""
"Note that although the method receivers are different, the non-static "
"functions are called the same way in the main body. Rust enables automatic "
"referencing and dereferencing when calling methods. Rust automatically adds "
"in the `&`, `*`, `muts` so that that object matches the method signature."
msgstr ""
"–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ —Ö–æ—á–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ –º–µ—Ç–æ–¥—ñ–≤ —Ä—ñ–∑–Ω—ñ, –Ω–µ—Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è "
"–æ–¥–Ω–∞–∫–æ–≤–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ—Ä–ø—É—Å—ñ. Rust –ø—ñ–¥—Ç—Ä–∏–º—É—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ "
"—Ä–æ–∑—ñ–º–µ–Ω—É–≤–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É –º–µ—Ç–æ–¥—ñ–≤. Rust –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–¥–∞—î `&`, `*`, "
"`muts`, —â–æ–± —Ü–µ–π –æ–±‚Äô—î–∫—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–≤ —Å–∏–≥–Ω–∞—Ç—É—Ä—ñ –º–µ—Ç–æ–¥—É."

#: src/methods/example.md:51
msgid ""
"You might point out that `print_laps` is using a vector that is iterated "
"over. We describe vectors in more detail in the afternoon. "
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–∑–Ω–∞—á–∏—Ç–∏, —â–æ `print_laps` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–µ–∫—Ç–æ—Ä, —è–∫–∏–π –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è. "
"–ë—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ –≤–µ–∫—Ç–æ—Ä–∏ –æ–ø–∏—Å—É—î–º–æ –≤–¥–µ–Ω—å."

#: src/exercises/day-2/morning.md:1
msgid "Day 2: Morning Exercises"
msgstr "–î–µ–Ω—å 2: –†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞"

#: src/exercises/day-2/morning.md:3
msgid "We will look at implementing methods in two contexts:"
msgstr "–ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –º–µ—Ç–æ–¥–∏ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤ –¥–≤–æ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö:"

#: src/exercises/day-2/morning.md:5
msgid "Storing books and querying the collection"
msgstr "–ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫–Ω–∏–≥ —ñ –∑–∞–ø–∏—Ç–∏ –ø—Ä–æ –∫–æ–ª–µ–∫—Ü—ñ—é"

#: src/exercises/day-2/morning.md:7
msgid "Keeping track of health statistics for patients"
msgstr "–í–µ–¥–µ–Ω–Ω—è –º–µ–¥–∏—á–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤"

#: src/exercises/day-2/book-library.md:3
msgid ""
"We will learn much more about structs and the `Vec<T>` type tomorrow. For "
"now, you just need to know part of its API:"
msgstr ""
"–ó–∞–≤—Ç—Ä–∞ –º–∏ –¥—ñ–∑–Ω–∞—î–º–æ—Å—è –Ω–∞–±–∞–≥–∞—Ç–æ –±—ñ–ª—å—à–µ –ø—Ä–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞ —Ç–∏–ø `Vec<T>`. –ù–∞—Ä–∞–∑—ñ "
"–≤–∞–º –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω—É –π–æ–≥–æ API:"

#: src/exercises/day-2/book-library.md:6
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut vec = vec![10, 20];\n"
"    vec.push(30);\n"
"    let midpoint = vec.len() / 2;\n"
"    println!(\"middle value: {}\", vec[midpoint]);\n"
"    for item in &vec {\n"
"        println!(\"item: {item}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-2/book-library.md:18
msgid ""
"Use this to model a library's book collection. Copy the code below to "
"<https://play.rust-lang.org/> and update the types to make it compile:"
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ –¥–ª—è –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è –∫–Ω–∏–∂–∫–æ–≤–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏. –°–∫–æ–ø—ñ—é–π—Ç–µ "
"–Ω–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ –∫–æ–¥ –Ω–∞ <https://play.rust-lang.org/> —ñ –æ–Ω–æ–≤—ñ—Ç—å —Ç–∏–ø–∏, —â–æ–± –≤—ñ–Ω "
"—Å–∫–æ–º–ø—ñ–ª—é–≤–∞–≤—Å—è:"

#: src/exercises/day-2/book-library.md:21
msgid ""
"```rust,should_panic\n"
"struct Library {\n"
"    books: Vec<Book>,\n"
"}\n"
"\n"
"struct Book {\n"
"    title: String,\n"
"    year: u16,\n"
"}\n"
"\n"
"impl Book {\n"
"    // This is a constructor, used below.\n"
"    fn new(title: &str, year: u16) -> Book {\n"
"        Book {\n"
"            title: String::from(title),\n"
"            year,\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// Implement the methods below. Update the `self` parameter to\n"
"// indicate the method's required level of ownership over the object:\n"
"//\n"
"// - `&self` for shared read-only access,\n"
"// - `&mut self` for unique and mutable access,\n"
"// - `self` for unique access by value.\n"
"impl Library {\n"
"    fn new() -> Library {\n"
"        todo!(\"Initialize and return a `Library` value\")\n"
"    }\n"
"\n"
"    //fn len(self) -> usize {\n"
"    //    todo!(\"Return the length of `self.books`\")\n"
"    //}\n"
"\n"
"    //fn is_empty(self) -> bool {\n"
"    //    todo!(\"Return `true` if `self.books` is empty\")\n"
"    //}\n"
"\n"
"    //fn add_book(self, book: Book) {\n"
"    //    todo!(\"Add a new book to `self.books`\")\n"
"    //}\n"
"\n"
"    //fn print_books(self) {\n"
"    //    todo!(\"Iterate over `self.books` and print each book's title and "
"year\")\n"
"    //}\n"
"\n"
"    //fn oldest_book(self) -> Option<&Book> {\n"
"    //    todo!(\"Return a reference to the oldest book (if any)\")\n"
"    //}\n"
"}\n"
"\n"
"// This shows the desired behavior. Uncomment the code below and\n"
"// implement the missing methods. You will need to update the\n"
"// method signatures, including the \"self\" parameter! You may\n"
"// also need to update the variable bindings within main.\n"
"fn main() {\n"
"    let library = Library::new();\n"
"\n"
"    //println!(\"The library is empty: library.is_empty() -> {}\", library."
"is_empty());\n"
"    //\n"
"    //library.add_book(Book::new(\"Lord of the Rings\", 1954));\n"
"    //library.add_book(Book::new(\"Alice's Adventures in Wonderland\", "
"1865));\n"
"    //\n"
"    //println!(\"The library is no longer empty: library.is_empty() -> {}\", "
"library.is_empty());\n"
"    //\n"
"    //\n"
"    //library.print_books();\n"
"    //\n"
"    //match library.oldest_book() {\n"
"    //    Some(book) => println!(\"The oldest book is {}\", book.title),\n"
"    //    None => println!(\"The library is empty!\"),\n"
"    //}\n"
"    //\n"
"    //println!(\"The library has {} books\", library.len());\n"
"    //library.print_books();\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-2/book-library.md:102
msgid "[Solution](solutions-afternoon.md#designing-a-library)"
msgstr "[–†—ñ—à–µ–Ω–Ω—è](solutions-afternoon.md#designing-a-library)"

#: src/exercises/day-2/health-statistics.md:3
msgid ""
"You're working on implementing a health-monitoring system. As part of that, "
"you need to keep track of users' health statistics."
msgstr ""
"–í–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –Ω–∞–¥ –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è–º —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–¥–æ—Ä–æ–≤‚Äô—è. –£ —Ä–∞–º–∫–∞—Ö —Ü—å–æ–≥–æ "
"–≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–¥–æ—Ä–æ–≤‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."

#: src/exercises/day-2/health-statistics.md:6
msgid ""
"You'll start with some stubbed functions in an `impl` block as well as a "
"`User` struct definition. Your goal is to implement the stubbed out methods "
"on the `User` `struct` defined in the `impl` block."
msgstr ""
"–í–∏ –ø–æ—á–Ω–µ—Ç–µ –∑ –¥–µ—è–∫–∏—Ö –∑–∞–≥–ª—É—à–µ–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —É –±–ª–æ—Ü—ñ `impl`, –∞ —Ç–∞–∫–æ–∂ –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è "
"—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ `User`. –í–∞—à–∞ –º–µ—Ç–∞ ‚Äî —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–∞–≥–ª—É—à–µ–Ω—ñ –º–µ—Ç–æ–¥–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ "
"`User`, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ–π —É –±–ª–æ—Ü—ñ `impl`."

#: src/exercises/day-2/health-statistics.md:10
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and fill in the missing "
"methods:"
msgstr ""
"–°–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥ –Ω–∏–∂—á–µ –Ω–∞ <https://play.rust-lang.org/> —ñ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ "
"–º–µ—Ç–æ–¥–∏:"

#: src/exercises/day-2/health-statistics.md:13
msgid ""
"```rust,should_panic\n"
"// TODO: remove this when you're done with your implementation.\n"
"#![allow(unused_variables, dead_code)]\n"
"\n"
"pub struct User {\n"
"    name: String,\n"
"    age: u32,\n"
"    height: f32,\n"
"    visit_count: usize,\n"
"    last_blood_pressure: Option<(u32, u32)>,\n"
"}\n"
"\n"
"pub struct Measurements {\n"
"    height: f32,\n"
"    blood_pressure: (u32, u32),\n"
"}\n"
"\n"
"pub struct HealthReport<'a> {\n"
"    patient_name: &'a str,\n"
"    visit_count: u32,\n"
"    height_change: f32,\n"
"    blood_pressure_change: Option<(i32, i32)>,\n"
"}\n"
"\n"
"impl User {\n"
"    pub fn new(name: String, age: u32, height: f32) -> Self {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    pub fn name(&self) -> &str {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    pub fn age(&self) -> u32 {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    pub fn height(&self) -> f32 {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    pub fn doctor_visits(&self) -> u32 {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    pub fn set_age(&mut self, new_age: u32) {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    pub fn set_height(&mut self, new_height: f32) {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    pub fn visit_doctor(&mut self, measurements: Measurements) -> "
"HealthReport {\n"
"        unimplemented!()\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let bob = User::new(String::from(\"Bob\"), 32, 155.2);\n"
"    println!(\"I'm {} and my age is {}\", bob.name(), bob.age());\n"
"}\n"
"\n"
"#[test]\n"
"fn test_height() {\n"
"    let bob = User::new(String::from(\"Bob\"), 32, 155.2);\n"
"    assert_eq!(bob.height(), 155.2);\n"
"}\n"
"\n"
"#[test]\n"
"fn test_set_age() {\n"
"    let mut bob = User::new(String::from(\"Bob\"), 32, 155.2);\n"
"    assert_eq!(bob.age(), 32);\n"
"    bob.set_age(33);\n"
"    assert_eq!(bob.age(), 33);\n"
"}\n"
"\n"
"#[test]\n"
"fn test_visit() {\n"
"    let mut bob = User::new(String::from(\"Bob\"), 32, 155.2);\n"
"    assert_eq!(bob.doctor_visits(), 0);\n"
"    let report = bob.visit_doctor(Measurements {\n"
"        height: 156.1,\n"
"        blood_pressure: (120, 80),\n"
"    });\n"
"    assert_eq!(report.patient_name, \"Bob\");\n"
"    assert_eq!(report.visit_count, 1);\n"
"    assert_eq!(report.blood_pressure_change, None);\n"
"\n"
"    let report = bob.visit_doctor(Measurements {\n"
"        height: 156.1,\n"
"        blood_pressure: (115, 76),\n"
"    });\n"
"\n"
"    assert_eq!(report.visit_count, 2);\n"
"    assert_eq!(report.blood_pressure_change, Some((-5, -4)));\n"
"}\n"
"```"
msgstr ""

#: src/std.md:3
msgid ""
"Rust comes with a standard library which helps establish a set of common "
"types used by Rust library and programs. This way, two libraries can work "
"together smoothly because they both use the same `String` type."
msgstr ""
"Rust –ø–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—é –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é, —è–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ "
"–Ω–∞–±—ñ—Ä –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Ç–∏–ø—ñ–≤, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏ Rust. "
"–¢–∞–∫–∏–º —á–∏–Ω–æ–º, –¥–≤—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –º–æ–∂—É—Ç—å –±–µ–∑–ø–µ—Ä–µ—à–∫–æ–¥–Ω–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Ä–∞–∑–æ–º, –æ—Å–∫—ñ–ª—å–∫–∏ "
"–æ–±–∏–¥–≤—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Ç–æ–π —Å–∞–º–∏–π —Ç–∏–ø `String`."

#: src/std.md:7
msgid "The common vocabulary types include:"
msgstr "–î–æ –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ª–µ–∫—Å–∏–∫–∏ –≤—Ö–æ–¥—è—Ç—å:"

#: src/std.md:9
msgid ""
"[`Option` and `Result`](std/option-result.md) types: used for optional "
"values and [error handling](error-handling.md)."
msgstr ""
"–¢–∏–ø–∏ [`Option` —ñ `Result`](std/option-result.md): –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è "
"–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å —ñ [–æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫](error-handling.md)."

#: src/std.md:12
msgid "[`String`](std/string.md): the default string type used for owned data."
msgstr ""
"[`–†—è–¥–æ–∫`](std/string.md): —Ç–∏–ø–æ–≤–∏–π —Ç–∏–ø —Ä—è–¥–∫–∞, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è "
"–¥–∞–Ω–∏—Ö, —â–æ –Ω–∞–ª–µ–∂–∞—Ç—å."

#: src/std.md:14
msgid "[`Vec`](std/vec.md): a standard extensible vector."
msgstr "[`Vec`](std/vec.md): —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–æ–∑—à–∏—Ä—é–≤–∞–Ω–∏–π –≤–µ–∫—Ç–æ—Ä."

#: src/std.md:16
msgid ""
"[`HashMap`](std/hashmap.md): a hash map type with a configurable hashing "
"algorithm."
msgstr ""
"[`HashMap`](std/hashmap.md): —Ç–∏–ø —Ö–µ—à-–∫–∞—Ä—Ç–∏ –∑ –Ω–∞—Å—Ç—Ä–æ—é–≤–∞–Ω–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º "
"—Ö–µ—à—É–≤–∞–Ω–Ω—è."

#: src/std.md:19
msgid "[`Box`](std/box.md): an owned pointer for heap-allocated data."
msgstr "[`Box`](std/box.md): –≤–ª–∞—Å–Ω–∏–π –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –¥–ª—è –¥–∞–Ω–∏—Ö, –≤–∏–¥—ñ–ª–µ–Ω–∏—Ö —É –∫—É–ø—ñ."

#: src/std.md:21
msgid ""
"[`Rc`](std/rc.md): a shared reference-counted pointer for heap-allocated "
"data."
msgstr ""
"[`Rc`](std/rc.md): —Å–ø—ñ–ª—å–Ω–∏–π –ø–æ–∫–∞–∂—á–∏–∫ —ñ–∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º –ø–æ—Å–∏–ª–∞–Ω—å –¥–ª—è –¥–∞–Ω–∏—Ö, "
"–≤–∏–¥—ñ–ª–µ–Ω–∏—Ö —É –∫—É–ø—ñ."

#: src/std.md:25
msgid ""
"In fact, Rust contains several layers of the Standard Library: `core`, "
"`alloc` and `std`. "
msgstr ""
"–ù–∞—Å–ø—Ä–∞–≤–¥—ñ Rust –º—ñ—Å—Ç–∏—Ç—å –∫—ñ–ª—å–∫–∞ —Ä—ñ–≤–Ω—ñ–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏: `core`, `alloc` "
"—ñ `std`."

#: src/std.md:26
msgid ""
"`core` includes the most basic types and functions that don't depend on "
"`libc`, allocator or even the presence of an operating system. "
msgstr ""
"`core` –≤–∫–ª—é—á–∞—î –Ω–∞–π–ø—Ä–æ—Å—Ç—ñ—à—ñ —Ç–∏–ø–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –Ω–µ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ `libc`, "
"—Ä–æ–∑–ø–æ–¥—ñ–ª—é–≤–∞—á–∞ —á–∏ –Ω–∞–≤—ñ—Ç—å –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏."

#: src/std.md:28
msgid ""
"`alloc` includes types which require a global heap allocator, such as `Vec`, "
"`Box` and `Arc`."
msgstr ""
"`alloc` –≤–∫–ª—é—á–∞—î —Ç–∏–ø–∏, –¥–ª—è —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª—å–Ω–∏–∫ –∫—É–ø–∏, "
"–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `Vec`, `Box` —ñ `Arc`."

#: src/std.md:29
msgid ""
"Embedded Rust applications often only use `core`, and sometimes `alloc`."
msgstr ""
"–í–±—É–¥–æ–≤–∞–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ Rust —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –ª–∏—à–µ `core`, –∞ —ñ–Ω–æ–¥—ñ `alloc`."

#: src/std/option-result.md:1
msgid "`Option` and `Result`"
msgstr "`–í–∞—Ä—ñ–∞–Ω—Ç` —ñ `–†–µ–∑—É–ª—å—Ç–∞—Ç`"

#: src/std/option-result.md:3
msgid "The types represent optional data:"
msgstr "–¢–∏–ø–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ:"

#: src/std/option-result.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let numbers = vec![10, 20, 30];\n"
"    let first: Option<&i8> = numbers.first();\n"
"    println!(\"first: {first:?}\");\n"
"\n"
"    let idx: Result<usize, usize> = numbers.binary_search(&10);\n"
"    println!(\"idx: {idx:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/std/option-result.md:18
msgid "`Option` and `Result` are widely used not just in the standard library."
msgstr ""
"`Option` —ñ `Result` —à–∏—Ä–æ–∫–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –Ω–µ —Ç—ñ–ª—å–∫–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ–π "
"–±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ."

#: src/std/option-result.md:19
msgid "`Option<&T>` has zero space overhead compared to `&T`."
msgstr "`Option<&T>` –º–∞—î –Ω—É–ª—å–æ–≤–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ `&T`."

#: src/std/option-result.md:20
msgid ""
"`Result` is the standard type to implement error handling as we will see on "
"Day 3."
msgstr ""
"`–†–µ–∑—É–ª—å—Ç–∞—Ç` ‚Äî —Ü–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–∏–ø –¥–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫, —è–∫ –º–∏ "
"–ø–æ–±–∞—á–∏–º–æ –≤ –¥–µ–Ω—å 3."

#: src/std/option-result.md:21
msgid "`binary_search` returns `Result<usize, usize>`."
msgstr "`binary_search` –ø–æ–≤–µ—Ä—Ç–∞—î `Result<usize, usize>`."

#: src/std/option-result.md:22
msgid "If found, `Result::Ok` holds the index where the element is found."
msgstr "–Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ, `Result::Ok` –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω–¥–µ–∫—Å, –¥–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç."

#: src/std/option-result.md:23
msgid ""
"Otherwise, `Result::Err` contains the index where such an element should be "
"inserted."
msgstr ""
"–í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É `Result::Err` –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω–¥–µ–∫—Å, –∫—É–¥–∏ —Å–ª—ñ–¥ –≤—Å—Ç–∞–≤–∏—Ç–∏ —Ç–∞–∫–∏–π "
"–µ–ª–µ–º–µ–Ω—Ç."

#: src/std/string.md:3
msgid ""
"[`String`](https://doc.rust-lang.org/std/string/struct.String.html) is the "
"standard heap-allocated growable UTF-8 string buffer:"
msgstr ""
"[`String`](https://doc.rust-lang.org/std/string/struct.String.html) ‚Äî —Ü–µ "
"—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—É—Ñ–µ—Ä —Ä—è–¥–∫—ñ–≤ UTF-8, —â–æ –Ω–∞—Ä–æ—â—É—î—Ç—å—Å—è, —ñ–∑ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ—é –¥–∏–Ω–∞–º—ñ—á–Ω–æ—é "
"–ø–∞–º‚Äô—è—Ç—Ç—é:"

#: src/std/string.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut s1 = String::new();\n"
"    s1.push_str(\"Hello\");\n"
"    println!(\"s1: len = {}, capacity = {}\", s1.len(), s1.capacity());\n"
"\n"
"    let mut s2 = String::with_capacity(s1.len() + 1);\n"
"    s2.push_str(&s1);\n"
"    s2.push('!');\n"
"    println!(\"s2: len = {}, capacity = {}\", s2.len(), s2.capacity());\n"
"\n"
"    let s3 = String::from(\"üá®üá≠\");\n"
"    println!(\"s3: len = {}, number of chars = {}\", s3.len(),\n"
"             s3.chars().count());\n"
"}\n"
"```"
msgstr ""

#: src/std/string.md:22
msgid ""
"`String` implements [`Deref<Target = str>`](https://doc.rust-lang.org/std/"
"string/struct.String.html#deref-methods-str), which means that you can call "
"all `str` methods on a `String`."
msgstr ""
"`String` —Ä–µ–∞–ª—ñ–∑—É—î [`Deref<Target = str>`](https://doc.rust-lang.org/std/"
"string/struct.String.html#deref-methods-str), —â–æ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ "
"–≤–∏–∫–ª–∏–∫–∞—Ç–∏ —É—Å—ñ –º–µ—Ç–æ–¥–∏ `str` —É `String`."

#: src/std/string.md:30
msgid ""
"`String::new` returns a new empty string, use `String::with_capacity` when "
"you know how much data you want to push to the string."
msgstr ""
"`String::new` –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `String::"
"with_capacity`, —è–∫—â–æ –∑–Ω–∞—î—Ç–µ, —Å–∫—ñ–ª—å–∫–∏ –¥–∞–Ω–∏—Ö –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –≤ —Ä—è–¥–æ–∫."

#: src/std/string.md:31
msgid ""
"`String::len` returns the size of the `String` in bytes (which can be "
"different from its length in characters)."
msgstr ""
"`String::len` –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–æ–∑–º—ñ—Ä `String` —É –±–∞–π—Ç–∞—Ö (—è–∫–∏–π –º–æ–∂–µ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –≤—ñ–¥ "
"–π–æ–≥–æ –¥–æ–≤–∂–∏–Ω–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö)."

#: src/std/string.md:32
msgid ""
"`String::chars` returns an iterator over the actual characters. Note that a "
"`char` can be different from what a human will consider a \"character\" due "
"to [grapheme clusters](https://docs.rs/unicode-segmentation/latest/"
"unicode_segmentation/struct.Graphemes.html)."
msgstr ""
"`String::chars` –ø–æ–≤–µ—Ä—Ç–∞—î —ñ—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ–≤–µ—Ä—Ö —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤. –ó–∞—É–≤–∞–∂—Ç–µ, —â–æ "
"`char` –º–æ–∂–µ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è –≤—ñ–¥ —Ç–æ–≥–æ, —â–æ –ª—é–¥–∏–Ω–∞ –≤–≤–∞–∂–∞—Ç–∏–º–µ ¬´—Å–∏–º–≤–æ–ª–æ–º¬ª —á–µ—Ä–µ–∑ "
"[–∫–ª–∞—Å—Ç–µ—Ä–∏ –≥—Ä–∞—Ñ–µ–º](https://docs.rs/unicode-segmentation/latest/"
"unicode_segmentation/struct.Graphemes.html)."

#: src/std/string.md:33
msgid ""
"When people refer to strings they could either be talking about `&str` or "
"`String`."
msgstr ""
"–ö–æ–ª–∏ –ª—é–¥–∏ –ø–æ—Å–∏–ª–∞—é—Ç—å—Å—è –Ω–∞ —Ä—è–¥–∫–∏, –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å –≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ `&str` –∞–±–æ `String`."

#: src/std/string.md:34
msgid ""
"When a type implements `Deref<Target = T>`, the compiler will let you "
"transparently call methods from `T`."
msgstr ""
"–ö–æ–ª–∏ —Ç–∏–ø —Ä–µ–∞–ª—ñ–∑—É—î `Deref<Target = T>`, –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –¥–æ–∑–≤–æ–ª–∏—Ç—å –≤–∞–º –ø—Ä–æ–∑–æ—Ä–æ "
"–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ –∑ `T`."

#: src/std/string.md:35
msgid ""
"`String` implements `Deref<Target = str>` which transparently gives it "
"access to `str`'s methods."
msgstr ""
"`String` —Ä–µ–∞–ª—ñ–∑—É—î `Deref<Target = str>`, —â–æ –ø—Ä–æ–∑–æ—Ä–æ –Ω–∞–¥–∞—î –π–æ–º—É –¥–æ—Å—Ç—É–ø –¥–æ "
"–º–µ—Ç–æ–¥—ñ–≤ `str`."

#: src/std/string.md:36
msgid "Write and compare `let s3 = s1.deref();` and  `let s3 = &*s1`;."
msgstr ""

#: src/std/string.md:37
msgid ""
"`String` is implemented as a wrapper around a vector of bytes, many of the "
"operations you see supported on vectors are also supported on `String`, but "
"with some extra guarantees."
msgstr ""
"`String` —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —è–∫ –æ–±–æ–ª–æ–Ω–∫—É –Ω–∞–≤–∫–æ–ª–æ –≤–µ–∫—Ç–æ—Ä–∞ –±–∞–π—Ç—ñ–≤, –±–∞–≥–∞—Ç–æ –æ–ø–µ—Ä–∞—Ü—ñ–π, "
"—è–∫—ñ –≤–∏ –±–∞—á–∏—Ç–µ, —â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –Ω–∞–¥ –≤–µ–∫—Ç–æ—Ä–∞–º–∏, —Ç–∞–∫–æ–∂ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è `String`, "
"–∞–ª–µ –∑ –¥–µ—è–∫–∏–º–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –≥–∞—Ä–∞–Ω—Ç—ñ—è–º–∏."

#: src/std/string.md:38
msgid "Compare the different ways to index a `String`:"
msgstr "–ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏ —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è `String`:"

#: src/std/string.md:39
msgid ""
"To a character by using `s3.chars().nth(i).unwrap()` where `i` is in-bound, "
"out-of-bounds."
msgstr ""
"–î–æ —Å–∏–º–≤–æ–ª—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `s3.chars().nth(i).unwrap()`, –¥–µ `i` —î –≤—Ö—ñ–¥–Ω–∏–º, –ø–æ–∑–∞ "
"–º–µ–∂–∞–º–∏."

#: src/std/string.md:40
msgid ""
"To a substring by using `s3[0..4]`, where that slice is on character "
"boundaries or not."
msgstr ""
"–î–æ –ø—ñ–¥—Ä—è–¥–∫–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `s3[0..4]`, –¥–µ —Ü–µ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –º–µ–∂–∞—Ö "
"—Å–∏–º–≤–æ–ª—ñ–≤ —á–∏ –Ω—ñ."

#: src/std/vec.md:1
msgid "`Vec`"
msgstr "`Vec`"

#: src/std/vec.md:3
msgid ""
"[`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html) is the standard "
"resizable heap-allocated buffer:"
msgstr ""
"[`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html) ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π "
"–±—É—Ñ–µ—Ä —ñ–∑ –∑–º—ñ–Ω–Ω–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º, –≤–∏–¥—ñ–ª–µ–Ω–∏–π —É –∫—É–ø—ñ:"

#: src/std/vec.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut v1 = Vec::new();\n"
"    v1.push(42);\n"
"    println!(\"v1: len = {}, capacity = {}\", v1.len(), v1.capacity());\n"
"\n"
"    let mut v2 = Vec::with_capacity(v1.len() + 1);\n"
"    v2.extend(v1.iter());\n"
"    v2.push(9999);\n"
"    println!(\"v2: len = {}, capacity = {}\", v2.len(), v2.capacity());\n"
"\n"
"    // Canonical macro to initialize a vector with elements.\n"
"    let mut v3 = vec![0, 0, 1, 2, 3, 4];\n"
"\n"
"    // Retain only the even elements.\n"
"    v3.retain(|x| x % 2 == 0);\n"
"    println!(\"{v3:?}\");\n"
"\n"
"    // Remove consecutive duplicates.\n"
"    v3.dedup();\n"
"    println!(\"{v3:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/std/vec.md:29
msgid ""
"`Vec` implements [`Deref<Target = [T]>`](https://doc.rust-lang.org/std/vec/"
"struct.Vec.html#deref-methods-%5BT%5D), which means that you can call slice "
"methods on a `Vec`."
msgstr ""
"`Vec` —Ä–µ–∞–ª—ñ–∑—É—î [`Deref<Target = [T]>`](https://doc.rust-lang.org/std/vec/"
"struct.Vec.html#deref-methods-%5BT%5D), —è–∫–∏–π –æ–∑–Ω–∞—á–∞—î, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ "
"–º–µ—Ç–æ–¥–∏ –∑—Ä—ñ–∑—É –Ω–∞ `Vec`."

#: src/std/vec.md:37
msgid ""
"`Vec` is a type of collection, along with `String` and `HashMap`. The data "
"it contains is stored on the heap. This means the amount of data doesn't "
"need to be  known at compile time. It can grow or shrink at runtime."
msgstr ""
"`Vec` ‚Äî —Ü–µ —Ç–∏–ø –∫–æ–ª–µ–∫—Ü—ñ—ó —Ä–∞–∑–æ–º —ñ–∑ `String` —ñ `HashMap`. –î–∞–Ω—ñ, —è–∫—ñ –≤—ñ–Ω "
"–º—ñ—Å—Ç–∏—Ç—å, –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –∫—É–ø—ñ. –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ "
"–∑–Ω–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó. –í—ñ–Ω –º–æ–∂–µ —Ä–æ—Å—Ç–∏ –∞–±–æ –∑–º–µ–Ω—à—É–≤–∞—Ç–∏—Å—è –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/std/vec.md:40
msgid ""
"Notice how `Vec<T>` is a generic type too, but you don't have to specify `T` "
"explicitly. As always with Rust type inference, the `T` was established "
"during the first `push` call."
msgstr ""
"–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ `Vec<T>` —Ç–∞–∫–æ–∂ —î –∑–∞–≥–∞–ª—å–Ω–∏–º —Ç–∏–ø–æ–º, –∞–ª–µ –≤–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ "
"–≤–∫–∞–∑—É–≤–∞—Ç–∏ `T` —è–≤–Ω–æ. –Ø–∫ –∑–∞–≤–∂–¥–∏ –∑ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è–º —Ç–∏–ø—É Rust, `T` –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ "
"–ø—ñ–¥ —á–∞—Å –ø–µ—Ä—à–æ–≥–æ –≤–∏–∫–ª–∏–∫—É `push`."

#: src/std/vec.md:42
msgid ""
"`vec![...]` is a canonical macro to use instead of `Vec::new()` and it "
"supports adding initial elements to the vector."
msgstr ""
"`vec![...]` ‚Äî —Ü–µ –∫–∞–Ω–æ–Ω—ñ—á–Ω–∏–π –º–∞–∫—Ä–æ—Å –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å `Vec::new()`, "
"—è–∫–∏–π –ø—ñ–¥—Ç—Ä–∏–º—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ –≤–µ–∫—Ç–æ—Ä–∞."

#: src/std/vec.md:44
msgid ""
"To index the vector you use `[` `]`, but they will panic if out of bounds. "
"Alternatively, using `get` will return an `Option`. The `pop` function will "
"remove the last element."
msgstr ""
"–©–æ–± —ñ–Ω–¥–µ–∫—Å—É–≤–∞—Ç–∏ –≤–µ–∫—Ç–æ—Ä, –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ `[` `]`, –∞–ª–µ –≤–æ–Ω–∏ –ø–∞–Ω—ñ–∫—É—é—Ç—å, —è–∫—â–æ "
"–≤–∏–π–¥—É—Ç—å –∑–∞ –º–µ–∂—ñ. –ö—Ä—ñ–º —Ç–æ–≥–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `get` –ø–æ–≤–µ—Ä–Ω–µ `Option`. –§—É–Ω–∫—Ü—ñ—è "
"`pop` –≤–∏–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç."

#: src/std/vec.md:46
msgid ""
"Show iterating over a vector and mutating the value: `for e in &mut v { *e "
"+= 50; }`"
msgstr ""

#: src/std/hashmap.md:1 src/bare-metal/no_std.md:46
msgid "`HashMap`"
msgstr "`HashMap`"

#: src/std/hashmap.md:3
msgid "Standard hash map with protection against HashDoS attacks:"
msgstr "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ö–µ—à-–∫–∞—Ä—Ç–∞ —ñ–∑ –∑–∞—Ö–∏—Å—Ç–æ–º –≤—ñ–¥ HashDoS-–∞—Ç–∞–∫:"

#: src/std/hashmap.md:5
msgid ""
"```rust,editable\n"
"use std::collections::HashMap;\n"
"\n"
"fn main() {\n"
"    let mut page_counts = HashMap::new();\n"
"    page_counts.insert(\"Adventures of Huckleberry Finn\".to_string(), "
"207);\n"
"    page_counts.insert(\"Grimms' Fairy Tales\".to_string(), 751);\n"
"    page_counts.insert(\"Pride and Prejudice\".to_string(), 303);\n"
"\n"
"    if !page_counts.contains_key(\"Les Mis√©rables\") {\n"
"        println!(\"We know about {} books, but not Les Mis√©rables.\",\n"
"                 page_counts.len());\n"
"    }\n"
"\n"
"    for book in [\"Pride and Prejudice\", \"Alice's Adventure in "
"Wonderland\"] {\n"
"        match page_counts.get(book) {\n"
"            Some(count) => println!(\"{book}: {count} pages\"),\n"
"            None => println!(\"{book} is unknown.\")\n"
"        }\n"
"    }\n"
"\n"
"    // Use the .entry() method to insert a value if nothing is found.\n"
"    for book in [\"Pride and Prejudice\", \"Alice's Adventure in "
"Wonderland\"] {\n"
"        let page_count: &mut i32 = page_counts.entry(book.to_string())."
"or_insert(0);\n"
"        *page_count += 1;\n"
"    }\n"
"\n"
"    println!(\"{page_counts:#?}\");\n"
"}\n"
"```"
msgstr ""

#: src/std/hashmap.md:38
msgid ""
"`HashMap` is not defined in the prelude and needs to be brought into scope."
msgstr "`HashMap` –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ –≤ –ø—Ä–µ–ª—é–¥—ñ—ó, —ñ –π–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–ª—é—á–∏—Ç–∏ –≤ –æ–±–ª–∞—Å—Ç—å."

#: src/std/hashmap.md:39
msgid ""
"Try the following lines of code. The first line will see if a book is in the "
"hashmap and if not return an alternative value. The second line will insert "
"the alternative value in the hashmap if the book is not found."
msgstr ""
"–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä—è–¥–∫–∏ –∫–æ–¥—É. –£ –ø–µ—Ä—à–æ–º—É —Ä—è–¥–∫—É –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–æ, —á–∏ —î –∫–Ω–∏–≥–∞ –≤ "
"—Ö–µ—à-–∫–∞—Ä—Ç—ñ, —ñ —è–∫—â–æ –Ω—ñ, –ø–æ–≤–µ—Ä–Ω–µ—Ç—å—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –£ –¥—Ä—É–≥–æ–º—É —Ä—è–¥–∫—É "
"–±—É–¥–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ —Ö–µ—à-–∫–∞—Ä—Ç—É, —è–∫—â–æ –∫–Ω–∏–≥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞."

#: src/std/hashmap.md:41
msgid ""
"```rust,ignore\n"
"  let pc1 = page_counts\n"
"      .get(\"Harry Potter and the Sorcerer's Stone \")\n"
"      .unwrap_or(&336);\n"
"  let pc2 = page_counts\n"
"      .entry(\"The Hunger Games\".to_string())\n"
"      .or_insert(374);\n"
"```"
msgstr ""

#: src/std/hashmap.md:49
msgid "Unlike `vec!`, there is unfortunately no standard `hashmap!` macro."
msgstr "–ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ `vec!`, –Ω–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–∞–∫—Ä–æ—Å—É `hashmap!`."

#: src/std/hashmap.md:50
msgid ""
"Although, since Rust 1.56, HashMap implements [`From<[(K, V); N]>`](https://"
"doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#impl-"
"From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V,+RandomState%3E), which allows "
"us to easily initialize a hash map from a literal array:"
msgstr ""

#: src/std/hashmap.md:52
msgid ""
"```rust,ignore\n"
"  let page_counts = HashMap::from([\n"
"    (\"Harry Potter and the Sorcerer's Stone\".to_string(), 336),\n"
"    (\"The Hunger Games\".to_string(), 374),\n"
"  ]);\n"
"```"
msgstr ""

#: src/std/hashmap.md:59
msgid ""
"Alternatively HashMap can be built from any `Iterator` which yields key-"
"value tuples."
msgstr ""
"–ö—Ä—ñ–º —Ç–æ–≥–æ, HashMap –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑ –±—É–¥—å-—è–∫–æ–≥–æ `—ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞`, —è–∫–∏–π –¥–∞—î –∫–æ—Ä—Ç–µ–∂—ñ "
"–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–Ω—è."

#: src/std/hashmap.md:60
msgid ""
"We are showing `HashMap<String, i32>`, and avoid using `&str` as key to make "
"examples easier. Using references in collections can, of course, be done, "
"but it can lead into complications with the borrow checker."
msgstr ""
"–ú–∏ –ø–æ–∫–∞–∑—É—î–º–æ `HashMap<String, i32>` —ñ —É–Ω–∏–∫–∞—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `&str` —è–∫ –∫–ª—é—á–∞, "
"—â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å —É –∫–æ–ª–µ–∫—Ü—ñ—è—Ö, –∑–≤–∏—á–∞–π–Ω–æ, –º–æ–∂–Ω–∞, "
"–∞–ª–µ —Ü–µ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ —É—Å–∫–ª–∞–¥–Ω–µ–Ω—å —ñ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –∑–∞–ø–æ–∑–∏—á–µ–Ω—å."

#: src/std/hashmap.md:62
msgid ""
"Try removing `to_string()` from the example above and see if it still "
"compiles. Where do you think we might run into issues?"
msgstr ""
"–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ `to_string()` —ñ–∑ –ø—Ä–∏–∫–ª–∞–¥—É –≤–∏—â–µ —Ç–∞ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è, —á–∏ –≤—ñ–Ω —É—Å–µ "
"—â–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è. –Ø–∫ –≤–∏ –¥—É–º–∞—î—Ç–µ, –¥–µ –º–∏ –º–æ–∂–µ–º–æ –∑—ñ—Ç–∫–Ω—É—Ç–∏—Å—è –∑ –ø—Ä–æ–±–ª–µ–º–∞–º–∏?"

#: src/std/hashmap.md:64
msgid ""
"This type has several \"method-specific\" return types, such as `std::"
"collections::hash_map::Keys`. These types often appear in searches of the "
"Rust docs. Show students the docs for this type, and the helpful link back "
"to the `keys` method."
msgstr ""
"–¶–µ–π —Ç–∏–ø –º–∞—î –∫—ñ–ª—å–∫–∞ ¬´—Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö¬ª —Ç–∏–ø—ñ–≤ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è, —Ç–∞–∫–∏—Ö —è–∫ `std::"
"collections::hash_map::Keys`. –¶—ñ —Ç–∏–ø–∏ —á–∞—Å—Ç–æ –∑‚Äô—è–≤–ª—è—é—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –≤ "
"–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö Rust. –ü–æ–∫–∞–∂—ñ—Ç—å —É—á–Ω—è–º –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É —Ç–∞ –∫–æ—Ä–∏—Å–Ω–µ "
"–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–µ—Ç–æ–¥ ¬´–∫–ª—é—á—ñ¬ª."

#: src/std/box.md:1
msgid "`Box`"
msgstr "`–ö–æ—Ä–æ–±–∫–∞`"

#: src/std/box.md:3
msgid ""
"[`Box`](https://doc.rust-lang.org/std/boxed/struct.Box.html) is an owned "
"pointer to data on the heap:"
msgstr ""
"[`Box`](https://doc.rust-lang.org/std/boxed/struct.Box.html) ‚Äî —Ü–µ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ "
"–Ω–∞ –¥–∞–Ω—ñ –≤ –∫—É–ø—ñ:"

#: src/std/box.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let five = Box::new(5);\n"
"    println!(\"five: {}\", *five);\n"
"}\n"
"```"
msgstr ""

#: src/std/box.md:13
msgid ""
"```bob\n"
" Stack                     Heap\n"
".- - - - - - -.     .- - - - - - -.\n"
":             :     :             :\n"
":    five     :     :             :\n"
":   +-----+   :     :   +-----+   :\n"
":   | o---|---+-----+-->|  5  |   :\n"
":   +-----+   :     :   +-----+   :\n"
":             :     :             :\n"
":             :     :             :\n"
"`- - - - - - -'     `- - - - - - -'\n"
"```"
msgstr ""

#: src/std/box.md:26
msgid ""
"`Box<T>` implements `Deref<Target = T>`, which means that you can [call "
"methods from `T` directly on a `Box<T>`](https://doc.rust-lang.org/std/ops/"
"trait.Deref.html#more-on-deref-coercion)."
msgstr ""
"`Box<T>` —Ä–µ–∞–ª—ñ–∑—É—î `Deref<Target = T>`, —â–æ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ [–≤–∏–∫–ª–∏–∫–∞—Ç–∏ "
"–º–µ—Ç–æ–¥–∏ –∑ `T` –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ `Box<T>`](https://doc.rust-lang.org /std/ops/"
"trait.Deref.html#more-on-deref-coercion)."

#: src/std/box.md:34
msgid ""
"`Box` is like `std::unique_ptr` in C++, except that it's guaranteed to be "
"not null. "
msgstr ""
"`Box` —Å—Ö–æ–∂–∏–π –Ω–∞ `std::unique_ptr` —É C++, –∑–∞ –≤–∏–Ω—è—Ç–∫–æ–º —Ç–æ–≥–æ, —â–æ –≤—ñ–Ω "
"–≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –Ω–µ –±—É–¥–µ –Ω—É–ª—å–æ–≤–∏–º."

#: src/std/box.md:35
msgid ""
"In the above example, you can even leave out the `*` in the `println!` "
"statement thanks to `Deref`. "
msgstr ""
"–£ –Ω–∞–≤–µ–¥–µ–Ω–æ–º—É –≤–∏—â–µ –ø—Ä–∏–∫–ª–∞–¥—ñ –≤–∏ –Ω–∞–≤—ñ—Ç—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ `*` –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ "
"`println!` –∑–∞–≤–¥—è–∫–∏ `Deref`."

#: src/std/box.md:36
msgid "A `Box` can be useful when you:"
msgstr "`Box` –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º, –∫–æ–ª–∏ –≤–∏:"

#: src/std/box.md:37
msgid ""
"have a type whose size that can't be known at compile time, but the Rust "
"compiler wants to know an exact size."
msgstr ""
"–º–∞—Ç–∏ —Ç–∏–ø, —Ä–æ–∑–º—ñ—Ä —è–∫–æ–≥–æ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥–æ–º–∏–π –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó, –∞–ª–µ "
"–∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä Rust —Ö–æ—á–µ –∑–Ω–∞—Ç–∏ —Ç–æ—á–Ω–∏–π —Ä–æ–∑–º—ñ—Ä."

#: src/std/box.md:38
msgid ""
"want to transfer ownership of a large amount of data. To avoid copying large "
"amounts of data on the stack, instead store the data on the heap in a `Box` "
"so only the pointer is moved."
msgstr ""
"—Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø—Ä–∞–≤–æ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –Ω–∞ –≤–µ–ª–∏–∫–∏–π –æ–±—Å—è–≥ –¥–∞–Ω–∏—Ö. –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ "
"–∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö –æ–±—Å—è–≥—ñ–≤ –¥–∞–Ω–∏—Ö —É —Å—Ç–µ–∫—É, –Ω–∞—Ç–æ–º—ñ—Å—Ç—å –∑–±–µ—Ä—ñ–≥–∞–π—Ç–µ –¥–∞–Ω—ñ –≤ –∫—É–ø—ñ –≤ "
"`Box`, —â–æ–± –ø–µ—Ä–µ–º—ñ—â—É–≤–∞–≤—Å—è –ª–∏—à–µ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫."

#: src/std/box-recursive.md:1
msgid "Box with Recursive Data Structures"
msgstr "–ö–æ—Ä–æ–±–∫–∞ –∑ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏ –¥–∞–Ω–∏—Ö"

#: src/std/box-recursive.md:3
msgid ""
"Recursive data types or data types with dynamic sizes need to use a `Box`:"
msgstr ""
"–î–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö –∞–±–æ —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö —ñ–∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ "
"–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `Box`:"

#: src/std/box-recursive.md:5 src/std/box-niche.md:3
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"enum List<T> {\n"
"    Cons(T, Box<List<T>>),\n"
"    Nil,\n"
"}\n"
"\n"
"fn main() {\n"
"    let list: List<i32> = List::Cons(1, Box::new(List::Cons(2, Box::"
"new(List::Nil))));\n"
"    println!(\"{list:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/std/box-recursive.md:18
msgid ""
"```bob\n"
" Stack                           Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"- -.\n"
":                         :     :                                               :\n"
":    "
"list                 :     :                                               :\n"
":   +------+----+----+    :     :    +------+----+----+    +------+----+----"
"+   :\n"
":   | Cons | 1  | o--+----+-----+--->| Cons | 2  | o--+--->| Nil  | // | // "
"|   :\n"
":   +------+----+----+    :     :    +------+----+----+    +------+----+----"
"+   :\n"
":                         :     :                                               :\n"
":                         :     :                                               :\n"
"'- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"- -'\n"
"```"
msgstr ""

#: src/std/box-recursive.md:33
msgid ""
"If `Box` was not used and we attempted to embed a `List` directly into the "
"`List`, the compiler would not compute a fixed size of the struct in memory "
"(`List` would be of infinite size)."
msgstr ""
"–Ø–∫—â–æ `Box` –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è, —ñ –º–∏ –Ω–∞–º–∞–≥–∞–ª–∏—Å—è –≤—Å—Ç–∞–≤–∏—Ç–∏ `List` "
"–±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ `List`, –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –Ω–µ –æ–±—á–∏—Å–ª—é–≤–∞–≤ –±–∏ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä "
"—Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤ –ø–∞–º‚Äô—è—Ç—ñ (`List` –º–∞–≤ –±–∏ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ä–æ–∑–º—ñ—Ä)."

#: src/std/box-recursive.md:36
msgid ""
"`Box` solves this problem as it has the same size as a regular pointer and "
"just points at the next element of the `List` in the heap."
msgstr ""
"`Box` –≤–∏—Ä—ñ—à—É—î —Ü—é –ø—Ä–æ–±–ª–µ–º—É, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∞—î —Ç–æ–π —Å–∞–º–∏–π —Ä–æ–∑–º—ñ—Ä, —â–æ –π –∑–≤–∏—á–∞–π–Ω–∏–π "
"–ø–æ–∫–∞–∂—á–∏–∫, —ñ –ª–∏—à–µ –≤–∫–∞–∑—É—î –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç `List` —É –∫—É–ø—ñ."

#: src/std/box-recursive.md:39
msgid ""
"Remove the `Box` in the List definition and show the compiler error. "
"\"Recursive with indirection\" is a hint you might want to use a Box or "
"reference of some kind, instead of storing a value directly."
msgstr ""
"–í–∏–¥–∞–ª—ñ—Ç—å `Box` —É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∑—ñ—Ç—å –ø–æ–º–∏–ª–∫—É –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞. "
"¬´–†–µ–∫—É—Ä—Å–∏–≤–Ω–∏–π –∑ –Ω–µ–ø—Ä—è–º–∏–º¬ª ‚Äî —Ü–µ –ø—ñ–¥–∫–∞–∑–∫–∞, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Box –∞–±–æ "
"–ø–æ—Å–∏–ª–∞–Ω–Ω—è —è–∫–æ–≥–æ—Å—å —Ç–∏–ø—É, –∑–∞–º—ñ—Å—Ç—å —Ç–æ–≥–æ, —â–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ."

#: src/std/box-niche.md:16
msgid ""
"A `Box` cannot be empty, so the pointer is always valid and non-`null`. This "
"allows the compiler to optimize the memory layout:"
msgstr ""
"`Box` –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, —Ç–æ–º—É –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –∑–∞–≤–∂–¥–∏ –¥—ñ–π—Å–Ω–∏–π —ñ –Ω–µ —î `null`. –¶–µ "
"–¥–æ–∑–≤–æ–ª—è—î –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä—É –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ:"

#: src/std/box-niche.md:19
msgid ""
"```bob\n"
" Stack                           Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"-.\n"
":                         :     :                                             :\n"
":    "
"list                 :     :                                             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":   | 1  | o--+-----------+-----+--->| 2  | o--+--->| // | null "
"|             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":                         :     :                                             :\n"
":                         :     :                                             :\n"
"`- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"-'\n"
"```"
msgstr ""

#: src/std/rc.md:1
msgid "`Rc`"
msgstr "`Rc`"

#: src/std/rc.md:3
msgid ""
"[`Rc`](https://doc.rust-lang.org/std/rc/struct.Rc.html) is a reference-"
"counted shared pointer. Use this when you need to refer to the same data "
"from multiple places:"
msgstr ""
"[`Rc`](https://doc.rust-lang.org/std/rc/struct.Rc.html) ‚Äî —Ü–µ —Å–ø—ñ–ª—å–Ω–∏–π "
"–ø–æ–∫–∞–∂—á–∏–∫ —ñ–∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º –ø–æ—Å–∏–ª–∞–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü–µ, –∫–æ–ª–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ "
"–∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ç–∏—Ö —Å–∞–º–∏—Ö –¥–∞–Ω–∏—Ö –∑ –∫—ñ–ª—å–∫–æ—Ö –º—ñ—Å—Ü—å:"

#: src/std/rc.md:6
msgid ""
"```rust,editable\n"
"use std::rc::Rc;\n"
"\n"
"fn main() {\n"
"    let mut a = Rc::new(10);\n"
"    let mut b = Rc::clone(&a);\n"
"\n"
"    println!(\"a: {a}\");\n"
"    println!(\"b: {b}\");\n"
"}\n"
"```"
msgstr ""

#: src/std/rc.md:18
msgid ""
"See [`Arc`](../concurrency/shared_state/arc.md) and [`Mutex`](https://doc."
"rust-lang.org/std/sync/struct.Mutex.html) if you are in a multi-threaded "
"context."
msgstr "–Ø–∫—â–æ –≤–∏ —î —É –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ."

#: src/std/rc.md:19
msgid ""
"You can _downgrade_ a shared pointer into a [`Weak`](https://doc.rust-lang."
"org/std/rc/struct.Weak.html) pointer to create cycles that will get dropped."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ _–ø–æ–Ω–∏–∑–∏—Ç–∏_ —Å–ø—ñ–ª—å–Ω–∏–π –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ [`—Å–ª–∞–±–∫–∏–π`](https://doc.rust-lang."
"org/std/rc/struct.Weak.html) –≤–∫–∞–∑—ñ–≤–Ω–∏–∫, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ü–∏–∫–ª–∏, —è–∫—ñ –±—É–¥–µ "
"–≤–∏–¥–∞–ª–µ–Ω–æ."

#: src/std/rc.md:29
msgid ""
"`Rc`'s count ensures that its contained value is valid for as long as there "
"are references."
msgstr "–õ—ñ—á–∏–ª—å–Ω–∏–∫ `Rc` –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —î –¥—ñ–π—Å–Ω–∏–º, –¥–æ–∫–∏ —î –ø–æ—Å–∏–ª–∞–Ω–Ω—è."

#: src/std/rc.md:30
msgid "`Rc` in Rust is like `std::shared_ptr` in C++."
msgstr "`Rc` —É Rust —Å—Ö–æ–∂–∏–π –Ω–∞ `std::shared_ptr` —É C++."

#: src/std/rc.md:31
msgid ""
"`Rc::clone` is cheap: it creates a pointer to the same allocation and "
"increases the reference count. Does not make a deep clone and can generally "
"be ignored when looking for performance issues in code."
msgstr ""
"`Rc::clone` –¥–µ—à–µ–≤–∏–π: –≤—ñ–Ω —Å—Ç–≤–æ—Ä—é—î –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –Ω–∞ —Ç–æ–π —Å–∞–º–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª —ñ –∑–±—ñ–ª—å—à—É—î "
"–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å–∏–ª–∞–Ω—å. –ù–µ —Ä–æ–±–∏—Ç—å –≥–ª–∏–±–æ–∫–æ–≥–æ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è, —ñ, —è–∫ –ø—Ä–∞–≤–∏–ª–æ, –π–æ–≥–æ "
"–º–æ–∂–Ω–∞ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏, —à—É–∫–∞—é—á–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é –≤ –∫–æ–¥—ñ."

#: src/std/rc.md:32
msgid ""
"`make_mut` actually clones the inner value if necessary (\"clone-on-write\") "
"and returns a mutable reference."
msgstr ""
"`make_mut` —Ñ–∞–∫—Ç–∏—á–Ω–æ –∫–ª–æ–Ω—É—î –≤–Ω—É—Ç—Ä—ñ—à–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ (\"–∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è "
"–ø—Ä–∏ –∑–∞–ø–∏—Å—ñ\") —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–º—ñ–Ω–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."

#: src/std/rc.md:33
msgid "Use `Rc::strong_count` to check the reference count."
msgstr "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `Rc::strong_count`, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å–∏–ª–∞–Ω—å."

#: src/std/rc.md:34
msgid ""
"`Rc::downgrade` gives you a _weakly reference-counted_ object to create "
"cycles that will be dropped properly (likely in combination with `RefCell`, "
"on the next slide)."
msgstr ""
"`Rc::downgrade` –¥–∞—î –≤–∞–º –æ–±‚Äô—î–∫—Ç –∑—ñ —Å–ª–∞–±–∫–æ—é –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º –ø–æ—Å–∏–ª–∞–Ω—å_ –¥–ª—è "
"—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ–≤, —è–∫—ñ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º (—ñ–º–æ–≤—ñ—Ä–Ω–æ, —É –ø–æ—î–¥–Ω–∞–Ω–Ω—ñ "
"–∑ `RefCell` –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Å–ª–∞–π–¥—ñ)."

#: src/std/cell.md:1
msgid "`Cell` and `RefCell`"
msgstr "`Cell` —ñ `RefCell`"

#: src/std/cell.md:3
msgid ""
"[`Cell`](https://doc.rust-lang.org/std/cell/struct.Cell.html) and [`RefCell`]"
"(https://doc.rust-lang.org/std/cell/struct.RefCell.html) implement what Rust "
"calls _interior mutability:_ mutation of values in an immutable context."
msgstr ""
"[`Cell`](https://doc.rust-lang.org/std/cell/struct.Cell.html) —ñ [`RefCell`]"
"(https://doc.rust-lang.org/std/cell /struct.RefCell.html) —Ä–µ–∞–ª—ñ–∑—É—î —Ç–µ, —â–æ "
"Rust –Ω–∞–∑–∏–≤–∞—î _–≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—é –º—ñ–Ω–ª–∏–≤—ñ—Å—Ç—é:_ –º—É—Ç–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å —É –Ω–µ–∑–º—ñ–Ω–Ω–æ–º—É "
"–∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ."

#: src/std/cell.md:8
msgid ""
"`Cell` is typically used for simple types, as it requires copying or moving "
"values. More complex interior types typically use `RefCell`, which tracks "
"shared and exclusive references at runtime and panics if they are misused."
msgstr ""
"`Cell` –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö —Ç–∏–ø—ñ–≤, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏–º–∞–≥–∞—î "
"–∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å. –ë—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω—ñ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–∏–ø–∏ –∑–∞–∑–≤–∏—á–∞–π "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å `RefCell`, —è–∫–∏–π –≤—ñ–¥—Å—Ç–µ–∂—É—î —Å–ø—ñ–ª—å–Ω—ñ —Ç–∞ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è "
"–ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞ –ø–∞–Ω—ñ–∫—É—î, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ."

#: src/std/cell.md:12
msgid ""
"```rust,editable\n"
"use std::cell::RefCell;\n"
"use std::rc::Rc;\n"
"\n"
"#[derive(Debug, Default)]\n"
"struct Node {\n"
"    value: i64,\n"
"    children: Vec<Rc<RefCell<Node>>>,\n"
"}\n"
"\n"
"impl Node {\n"
"    fn new(value: i64) -> Rc<RefCell<Node>> {\n"
"        Rc::new(RefCell::new(Node { value, ..Node::default() }))\n"
"    }\n"
"\n"
"    fn sum(&self) -> i64 {\n"
"        self.value + self.children.iter().map(|c| c.borrow().sum()).sum::"
"<i64>()\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let root = Node::new(1);\n"
"    root.borrow_mut().children.push(Node::new(5));\n"
"    let subtree = Node::new(10);\n"
"    subtree.borrow_mut().children.push(Node::new(11));\n"
"    subtree.borrow_mut().children.push(Node::new(12));\n"
"    root.borrow_mut().children.push(subtree);\n"
"\n"
"    println!(\"graph: {root:#?}\");\n"
"    println!(\"graph sum: {}\", root.borrow().sum());\n"
"}\n"
"```"
msgstr ""

#: src/std/cell.md:47
msgid ""
"If we were using `Cell` instead of `RefCell` in this example, we would have "
"to move the `Node` out of the `Rc` to push children, then move it back in. "
"This is safe because there's always one, un-referenced value in the cell, "
"but it's not ergonomic."
msgstr ""
"–Ø–∫–±–∏ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ `Cell` –∑–∞–º—ñ—Å—Ç—å `RefCell` —É —Ü—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ, –Ω–∞–º "
"–¥–æ–≤–µ–ª–æ—Å—è –± –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ `Node` –∑ `Rc`, —â–æ–± –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, –∞ "
"–ø–æ—Ç—ñ–º –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –π–æ–≥–æ –Ω–∞–∑–∞–¥. –¶–µ –±–µ–∑–ø–µ—á–Ω–æ, —Ç–æ–º—É —â–æ –∑–∞–≤–∂–¥–∏ —î –æ–¥–∏–Ω, -"
"–ø–æ—Å–∏–ª–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–º—ñ—Ä—Ü—ñ, –∞–ª–µ —Ü–µ –Ω–µ –µ—Ä–≥–æ–Ω–æ–º—ñ—á–Ω–æ."

#: src/std/cell.md:48
msgid ""
"To do anything with a Node, you must call a `RefCell` method, usually "
"`borrow` or `borrow_mut`."
msgstr ""
"–©–æ–± –∑—Ä–æ–±–∏—Ç–∏ –±—É–¥—å-—â–æ –∑ –≤—É–∑–ª–æ–º, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ—Ç–æ–¥ `RefCell`, –∑–∞–∑–≤–∏—á–∞–π "
"`borrow` –∞–±–æ `borrow_mut`."

#: src/std/cell.md:49
msgid ""
"Demonstrate that reference loops can be created by adding `root` to `subtree."
"children` (don't try to print it!)."
msgstr ""
"–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–π—Ç–µ, —â–æ —Ü–∏–∫–ª–∏ –ø–æ—Å–∏–ª–∞–Ω—å –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏, –¥–æ–¥–∞–≤—à–∏ `root` –¥–æ "
"`subtree.children` (–Ω–µ –Ω–∞–º–∞–≥–∞–π—Ç–µ—Å—è –π–æ–≥–æ –Ω–∞–¥—Ä—É–∫—É–≤–∞—Ç–∏!)."

#: src/std/cell.md:50
msgid ""
"To demonstrate a runtime panic, add a `fn inc(&mut self)` that increments "
"`self.value` and calls the same method on its children. This will panic in "
"the presence of the reference loop, with `thread 'main' panicked at 'already "
"borrowed: BorrowMutError'`."
msgstr ""
"–©–æ–± –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø–∞–Ω—ñ–∫—É –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –¥–æ–¥–∞–π—Ç–µ `fn inc(&mut self)`, "
"—è–∫–∏–π –∑–±—ñ–ª—å—à—É—î `self.value` —ñ –≤–∏–∫–ª–∏–∫–∞—î —Ç–æ–π —Å–∞–º–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –π–æ–≥–æ –¥—ñ—Ç–µ–π. –¶–µ "
"–ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –ø–∞–Ω—ñ–∫–∏ –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ü–∏–∫–ª—É –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –∑ `–ø–æ—Ç–æ–∫–æ–º 'main' –ø–∞–Ω—ñ–∫–∏ "
"–≤—ñ–¥ '–≤–∂–µ –∑–∞–ø–æ–∑–∏—á–µ–Ω–æ: BorrowMutError'`."

#: src/modules.md:3
msgid "We have seen how `impl` blocks let us namespace functions to a type."
msgstr ""
"–ú–∏ –±–∞—á–∏–ª–∏, —è–∫ –±–ª–æ–∫–∏ `impl` –¥–æ–∑–≤–æ–ª—è—é—Ç—å –Ω–∞–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–æ—Å—Ç–æ—Ä–æ–º —ñ–º–µ–Ω –¥–æ "
"—Ç–∏–ø—É."

#: src/modules.md:5
msgid "Similarly, `mod` lets us namespace types and functions:"
msgstr ""
"–¢–∞–∫ —Å–∞–º–æ `mod` –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç–∏–ø–∏ –ø—Ä–æ—Å—Ç–æ—Ä—É —ñ–º–µ–Ω —ñ —Ñ—É–Ω–∫—Ü—ñ—ó:"

#: src/modules.md:7
msgid ""
"```rust,editable\n"
"mod foo {\n"
"    pub fn do_something() {\n"
"        println!(\"In the foo module\");\n"
"    }\n"
"}\n"
"\n"
"mod bar {\n"
"    pub fn do_something() {\n"
"        println!(\"In the bar module\");\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    foo::do_something();\n"
"    bar::do_something();\n"
"}\n"
"```"
msgstr ""

#: src/modules.md:28
msgid ""
"Packages provide functionality and include a `Cargo.toml` file that "
"describes how to build a bundle of 1+ crates."
msgstr ""
"–ü–∞–∫–µ—Ç–∏ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —ñ –≤–∫–ª—é—á–∞—é—Ç—å —Ñ–∞–π–ª `Cargo.toml`, —è–∫–∏–π "
"–æ–ø–∏—Å—É—î, —è–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Ç —ñ–∑ 1+ —è—â–∏–∫—ñ–≤."

#: src/modules.md:29
msgid ""
"Crates are a tree of modules, where a binary crate creates an executable and "
"a library crate compiles to a library."
msgstr ""
"Crates ‚Äî —Ü–µ –¥–µ—Ä–µ–≤–æ –º–æ–¥—É–ª—ñ–≤, —É —è–∫–æ–º—É –±—ñ–Ω–∞—Ä–Ω–∏–π crate —Å—Ç–≤–æ—Ä—é—î –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª, "
"–∞ –±—ñ–±–ª—ñ–æ—Ç–µ—á–Ω–∏–π crate –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è –≤ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É."

#: src/modules.md:30
msgid "Modules define organization, scope, and are the focus of this section."
msgstr "–ú–æ–¥—É–ª—ñ –≤–∏–∑–Ω–∞—á–∞—é—Ç—å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é, –æ–±—Å—è–≥ —ñ —î —Ç–µ–º–æ—é —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É."

#: src/modules/visibility.md:3
msgid "Modules are a privacy boundary:"
msgstr "–ú–æ–¥—É–ª—ñ —î –º–µ–∂–µ—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ:"

#: src/modules/visibility.md:5
msgid "Module items are private by default (hides implementation details)."
msgstr ""
"–ï–ª–µ–º–µ–Ω—Ç–∏ –º–æ–¥—É–ª—è —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–ø—Ä–∏—Ö–æ–≤—É—î –¥–µ—Ç–∞–ª—ñ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó)."

#: src/modules/visibility.md:6
msgid "Parent and sibling items are always visible."
msgstr "–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫—ñ —Ç–∞ —Ä—ñ–¥–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞–≤–∂–¥–∏ –≤–∏–¥–Ω–æ."

#: src/modules/visibility.md:7
msgid ""
"In other words, if an item is visible in module `foo`, it's visible in all "
"the descendants of `foo`."
msgstr ""
"–Ü–Ω—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º–∏–π —É –º–æ–¥—É–ª—ñ `foo`, –≤—ñ–Ω –≤–∏–¥–∏–º–∏–π —É –≤—Å—ñ—Ö "
"–Ω–∞—â–∞–¥–∫–∞—Ö `foo`."

#: src/modules/visibility.md:10
msgid ""
"```rust,editable\n"
"mod outer {\n"
"    fn private() {\n"
"        println!(\"outer::private\");\n"
"    }\n"
"\n"
"    pub fn public() {\n"
"        println!(\"outer::public\");\n"
"    }\n"
"\n"
"    mod inner {\n"
"        fn private() {\n"
"            println!(\"outer::inner::private\");\n"
"        }\n"
"\n"
"        pub fn public() {\n"
"            println!(\"outer::inner::public\");\n"
"            super::private();\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    outer::public();\n"
"}\n"
"```"
msgstr ""

#: src/modules/visibility.md:39
msgid "Use the `pub` keyword to make modules public."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ `pub`, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –º–æ–¥—É–ª—ñ –∑–∞–≥–∞–ª—å–Ω–æ–¥–æ—Å—Ç—É–ø–Ω–∏–º–∏."

#: src/modules/visibility.md:41
msgid ""
"Additionally, there are advanced `pub(...)` specifiers to restrict the scope "
"of public visibility."
msgstr ""
"–ö—Ä—ñ–º —Ç–æ–≥–æ, —ñ—Å–Ω—É—é—Ç—å —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ `pub(...)` –¥–ª—è –æ–±–º–µ–∂–µ–Ω–Ω—è "
"–≤–∏–¥–∏–º–æ—Å—Ç—ñ –¥–ª—è –≤—Å—ñ—Ö."

#: src/modules/visibility.md:43
msgid ""
"See the [Rust Reference](https://doc.rust-lang.org/reference/visibility-and-"
"privacy.html#pubin-path-pubcrate-pubsuper-and-pubself)."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ [–¥–æ–≤—ñ–¥–Ω–∏–∫ Rust](https://doc.rust-lang.org/reference/visibility-"
"and-privacy.html#pubin-path-pubcrate-pubsuper-and-pubself)."

#: src/modules/visibility.md:44
msgid "Configuring `pub(crate)` visibility is a common pattern."
msgstr "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ `pub(crate)` —î —Ç–∏–ø–æ–≤–∏–º —à–∞–±–ª–æ–Ω–æ–º."

#: src/modules/visibility.md:45
msgid "Less commonly, you can give visibility to a specific path."
msgstr "–†—ñ–¥—à–µ –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥–∞—Ç–∏ –≤–∏–¥–∏–º—ñ—Å—Ç—å –ø–µ–≤–Ω–æ–º—É —à–ª—è—Ö—É."

#: src/modules/visibility.md:46
msgid ""
"In any case, visibility must be granted to an ancestor module (and all of "
"its descendants)."
msgstr ""
"–£ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –≤–∏–¥–∏–º—ñ—Å—Ç—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –Ω–∞–¥–∞–Ω–∞ –º–æ–¥—É–ª—é-–ø—Ä–µ–¥–∫—É (—ñ –≤—Å—ñ–º "
"–π–æ–≥–æ –Ω–∞—â–∞–¥–∫–∞–º)."

#: src/modules/paths.md:3
msgid "Paths are resolved as follows:"
msgstr "–®–ª—è—Ö–∏ –≤–∏—Ä—ñ—à—É—é—Ç—å—Å—è —Ç–∞–∫–∏–º —á–∏–Ω–æ–º:"

#: src/modules/paths.md:5
msgid "As a relative path:"
msgstr "–Ø–∫ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö:"

#: src/modules/paths.md:6
msgid "`foo` or `self::foo` refers to `foo` in the current module,"
msgstr "`foo` –∞–±–æ `self::foo` –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ `foo` –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –º–æ–¥—É–ª—ñ,"

#: src/modules/paths.md:7
msgid "`super::foo` refers to `foo` in the parent module."
msgstr "`super::foo` –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ `foo` —É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –º–æ–¥—É–ª—ñ."

#: src/modules/paths.md:9
msgid "As an absolute path:"
msgstr "–Ø–∫ –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö:"

#: src/modules/paths.md:10
msgid "`crate::foo` refers to `foo` in the root of the current crate,"
msgstr "`crate::foo` –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ `foo` –≤ –∫–æ—Ä–µ–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —è—â–∏–∫–∞,"

#: src/modules/paths.md:11
msgid "`bar::foo` refers to `foo` in the `bar` crate."
msgstr "`bar::foo` –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è –Ω–∞ `foo` –≤ —è—â–∏–∫—É `bar`."

#: src/modules/paths.md:13
msgid ""
"A module can bring symbols from another module into scope with `use`. You "
"will typically see something like this at the top of each module:"
msgstr ""
"–ú–æ–¥—É–ª—å –º–æ–∂–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∏ –∑ —ñ–Ω—à–æ–≥–æ –º–æ–¥—É–ª—è –≤ –æ–±–ª–∞—Å—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `use`. "
"–ó–∞–∑–≤–∏—á–∞–π –≤–∏ –ø–æ–±–∞—á–∏—Ç–µ —â–æ—Å—å –Ω–∞ –∑—Ä–∞–∑–æ–∫ —Ü—å–æ–≥–æ —É –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –∫–æ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è:"

#: src/modules/paths.md:16
msgid ""
"```rust,editable\n"
"use std::collections::HashSet;\n"
"use std::mem::transmute;\n"
"```"
msgstr ""

#: src/modules/filesystem.md:3
msgid ""
"Omitting the module content will tell Rust to look for it in another file:"
msgstr ""
"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—è –≤–º—ñ—Å—Ç—É –º–æ–¥—É–ª—è –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ —Ç–æ–≥–æ, —â–æ Rust —à—É–∫–∞—Ç–∏–º–µ –π–æ–≥–æ –≤ —ñ–Ω—à–æ–º—É "
"—Ñ–∞–π–ª—ñ:"

#: src/modules/filesystem.md:5
msgid ""
"```rust,editable,compile_fail\n"
"mod garden;\n"
"```"
msgstr ""

#: src/modules/filesystem.md:9
msgid ""
"This tells rust that the `garden` module content is found at `src/garden."
"rs`. Similarly, a `garden::vegetables` module can be found at `src/garden/"
"vegetables.rs`."
msgstr ""
"–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª—è—î rust, —â–æ –≤–º—ñ—Å—Ç –º–æ–¥—É–ª—è `garden` –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ `src/garden.rs`. "
"–¢–∞–∫ —Å–∞–º–æ –º–æ–¥—É–ª—å `garden::vegetables` –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –Ω–∞ `src/garden/vegetables."
"rs`."

#: src/modules/filesystem.md:12
msgid "The `crate` root is in:"
msgstr "–ö–æ—Ä—ñ–Ω—å `crate` –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤:"

#: src/modules/filesystem.md:14
msgid "`src/lib.rs` (for a library crate)"
msgstr "`src/lib.rs` (–¥–ª—è —è—â–∏–∫–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏)"

#: src/modules/filesystem.md:15
msgid "`src/main.rs` (for a binary crate)"
msgstr "`src/main.rs` (–¥–ª—è binary crate)"

#: src/modules/filesystem.md:17
msgid ""
"Modules defined in files can be documented, too, using \"inner doc "
"comments\". These document the item that contains them -- in this case, a "
"module."
msgstr ""
"–ú–æ–¥—É–ª—ñ, –≤–∏–∑–Ω–∞—á–µ–Ω—ñ —É —Ñ–∞–π–ª–∞—Ö, —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
"¬´–≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞¬ª. –í–æ–Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç—É—é—Ç—å –µ–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π —ó—Ö "
"–º—ñ—Å—Ç–∏—Ç—å ‚Äì —É —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ü–µ –º–æ–¥—É–ª—å."

#: src/modules/filesystem.md:20
msgid ""
"```rust,editable,compile_fail\n"
"//! This module implements the garden, including a highly performant "
"germination\n"
"//! implementation.\n"
"\n"
"// Re-export types from this module.\n"
"pub use seeds::SeedPacket;\n"
"pub use garden::Garden;\n"
"\n"
"/// Sow the given seed packets.\n"
"pub fn sow(seeds: Vec<SeedPacket>) { todo!() }\n"
"\n"
"/// Harvest the produce in the garden that is ready.\n"
"pub fn harvest(garden: &mut Garden) { todo!() }\n"
"```"
msgstr ""

#: src/modules/filesystem.md:37
msgid ""
"Before Rust 2018, modules needed to be located at `module/mod.rs` instead of "
"`module.rs`, and this is still a working alternative for editions after 2018."
msgstr ""
"–î–æ Rust 2018 –º–æ–¥—É–ª—ñ –º–∞–ª–∏ —Ä–æ–∑—Ç–∞—à–æ–≤—É–≤–∞—Ç–∏—Å—è –Ω–∞ `module/mod.rs` –∑–∞–º—ñ—Å—Ç—å `module."
"rs`, —ñ —Ü–µ –≤—Å–µ —â–µ —Ä–æ–±–æ—á–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –≤–∏–ø—É—Å–∫—ñ–≤ –ø—ñ—Å–ª—è 2018 —Ä–æ–∫—É."

#: src/modules/filesystem.md:39
msgid ""
"The main reason to introduce `filename.rs` as alternative to `filename/mod."
"rs` was because many files named `mod.rs` can be hard to distinguish in IDEs."
msgstr ""
"–û—Å–Ω–æ–≤–Ω–æ—é –ø—Ä–∏—á–∏–Ω–æ—é –≤–≤–µ–¥–µ–Ω–Ω—è `filename.rs` —è–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏ `filename/mod.rs` "
"–±—É–ª–æ —Ç–µ, —â–æ –±–∞–≥–∞—Ç–æ —Ñ–∞–π–ª—ñ–≤ –∑ –Ω–∞–∑–≤–∞–º–∏ `mod.rs` –≤–∞–∂–∫–æ —Ä–æ–∑—Ä—ñ–∑–Ω–∏—Ç–∏ –≤ IDE."

#: src/modules/filesystem.md:42
msgid "Deeper nesting can use folders, even if the main module is a file:"
msgstr ""
"–ë—ñ–ª—å—à –≥–ª–∏–±–æ–∫–µ –≤–∫–ª–∞–¥–µ–Ω–Ω—è –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–∞–ø–∫–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–º "
"–º–æ–¥—É–ª–µ–º —î —Ñ–∞–π–ª:"

#: src/modules/filesystem.md:44
msgid ""
"```ignore\n"
"src/\n"
"‚îú‚îÄ‚îÄ main.rs\n"
"‚îú‚îÄ‚îÄ top_module.rs\n"
"‚îî‚îÄ‚îÄ top_module/\n"
"    ‚îî‚îÄ‚îÄ sub_module.rs\n"
"```"
msgstr ""

#: src/modules/filesystem.md:52
msgid ""
"The place rust will look for modules can be changed with a compiler "
"directive:"
msgstr ""
"–ú—ñ—Å—Ü–µ, –¥–µ Rust —à—É–∫–∞—Ç–∏–º–µ –º–æ–¥—É–ª—ñ, –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–∏—Ä–µ–∫—Ç–∏–≤–∏ "
"–∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞:"

#: src/modules/filesystem.md:54
msgid ""
"```rust,ignore\n"
"#[path = \"some/path.rs\"]\n"
"mod some_module;\n"
"```"
msgstr ""

#: src/modules/filesystem.md:59
msgid ""
"This is useful, for example, if you would like to place tests for a module "
"in a file named `some_module_test.rs`, similar to the convention in Go."
msgstr ""
"–¶–µ –∫–æ—Ä–∏—Å–Ω–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –¥–ª—è –º–æ–¥—É–ª—è —É —Ñ–∞–π–ª—ñ –∑ "
"—ñ–º–µ–Ω–µ–º `some_module_test.rs`, –ø–æ–¥—ñ–±–Ω–æ –¥–æ —É–º–æ–≤ —É Go."

#: src/exercises/day-2/afternoon.md:1
msgid "Day 2: Afternoon Exercises"
msgstr "–î–µ–Ω—å 2: –ø—ñ—Å–ª—è–æ–±—ñ–¥–Ω—ñ –≤–ø—Ä–∞–≤–∏"

#: src/exercises/day-2/afternoon.md:3
msgid "The exercises for this afternoon will focus on strings and iterators."
msgstr ""
"–í–ø—Ä–∞–≤–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–µ–Ω—å –±—É–¥—É—Ç—å –∑–æ—Å–µ—Ä–µ–¥–∂–µ–Ω—ñ –Ω–∞ —Ä—è–¥–∫–∞—Ö —Ç–∞ —ñ—Ç–µ—Ä–∞—Ç–æ—Ä–∞—Ö."

#: src/exercises/day-2/iterators-and-ownership.md:3
msgid ""
"The ownership model of Rust affects many APIs. An example of this is the "
"[`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) and "
"[`IntoIterator`](https://doc.rust-lang.org/std/iter/trait.IntoIterator.html) "
"traits."
msgstr ""
"–ú–æ–¥–µ–ª—å –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ Rust –≤–ø–ª–∏–≤–∞—î –Ω–∞ –±–∞–≥–∞—Ç–æ API. –ü—Ä–∏–∫–ª–∞–¥–æ–º —Ü—å–æ–≥–æ —î [`Iterator`]"
"(https://doc.rust-lang.org/std/iter/trait.Iterator.html) —ñ [`IntoIterator`]"
"(https://doc.rust-lang .org/std/iter/trait.IntoIterator.html)."

#: src/exercises/day-2/iterators-and-ownership.md:8 src/bare-metal/no_std.md:28
msgid "`Iterator`"
msgstr "`–Ü—Ç–µ—Ä–∞—Ç–æ—Ä`"

#: src/exercises/day-2/iterators-and-ownership.md:10
msgid ""
"Traits are like interfaces: they describe behavior (methods) for a type. The "
"`Iterator` trait simply says that you can call `next` until you get `None` "
"back:"
msgstr ""
"–¢—Ä–µ–π—Ç–∏ —Å—Ö–æ–∂—ñ –Ω–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏: –≤–æ–Ω–∏ –æ–ø–∏—Å—É—é—Ç—å –ø–æ–≤–µ–¥—ñ–Ω–∫—É (–º–µ—Ç–æ–¥–∏) –¥–ª—è —Ç–∏–ø—É. "
"–§—É–Ω–∫—Ü—ñ—è `Iterator` –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ `next`, –¥–æ–∫–∏ –Ω–µ "
"–æ—Ç—Ä–∏–º–∞—î—Ç–µ `None` –Ω–∞–∑–∞–¥:"

#: src/exercises/day-2/iterators-and-ownership.md:13
msgid ""
"```rust\n"
"pub trait Iterator {\n"
"    type Item;\n"
"    fn next(&mut self) -> Option<Self::Item>;\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-2/iterators-and-ownership.md:20
msgid "You use this trait like this:"
msgstr "–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —Ü—é —Ä–∏—Å—É —Ç–∞–∫:"

#: src/exercises/day-2/iterators-and-ownership.md:22
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let v: Vec<i8> = vec![10, 20, 30];\n"
"    let mut iter = v.iter();\n"
"\n"
"    println!(\"v[0]: {:?}\", iter.next());\n"
"    println!(\"v[1]: {:?}\", iter.next());\n"
"    println!(\"v[2]: {:?}\", iter.next());\n"
"    println!(\"No more items: {:?}\", iter.next());\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-2/iterators-and-ownership.md:34
msgid "What is the type returned by the iterator? Test your answer here:"
msgstr "–Ø–∫–∏–π —Ç–∏–ø –ø–æ–≤–µ—Ä—Ç–∞—î —ñ—Ç–µ—Ä–∞—Ç–æ—Ä? –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç—É—Ç:"

#: src/exercises/day-2/iterators-and-ownership.md:36
msgid ""
"```rust,editable,compile_fail\n"
"fn main() {\n"
"    let v: Vec<i8> = vec![10, 20, 30];\n"
"    let mut iter = v.iter();\n"
"\n"
"    let v0: Option<..> = iter.next();\n"
"    println!(\"v0: {v0:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-2/iterators-and-ownership.md:46
msgid "Why is this type used?"
msgstr "–ß–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ü–µ–π —Ç–∏–ø?"

#: src/exercises/day-2/iterators-and-ownership.md:48
msgid "`IntoIterator`"
msgstr "`IntoIterator`"

#: src/exercises/day-2/iterators-and-ownership.md:50
msgid ""
"The `Iterator` trait tells you how to _iterate_ once you have created an "
"iterator. The related trait `IntoIterator` tells you how to create the "
"iterator:"
msgstr ""
"–§—É–Ω–∫—Ü—ñ—è `Iterator` –≥–æ–≤–æ—Ä–∏—Ç—å –≤–∞–º, —è–∫ _—ñ—Ç–µ—Ä—É–≤–∞—Ç–∏_ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ "
"—ñ—Ç–µ—Ä–∞—Ç–æ—Ä. –ü–æ–≤‚Äô—è–∑–∞–Ω–∞ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `IntoIterator` —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—î, —è–∫ —Å—Ç–≤–æ—Ä–∏—Ç–∏ "
"—ñ—Ç–µ—Ä–∞—Ç–æ—Ä:"

#: src/exercises/day-2/iterators-and-ownership.md:53
msgid ""
"```rust\n"
"pub trait IntoIterator {\n"
"    type Item;\n"
"    type IntoIter: Iterator<Item = Self::Item>;\n"
"\n"
"    fn into_iter(self) -> Self::IntoIter;\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-2/iterators-and-ownership.md:62
msgid ""
"The syntax here means that every implementation of `IntoIterator` must "
"declare two types:"
msgstr ""
"–°–∏–Ω—Ç–∞–∫—Å–∏—Å —Ç—É—Ç –æ–∑–Ω–∞—á–∞—î, —â–æ –∫–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è `IntoIterator` –º–∞—î –æ–≥–æ–ª–æ—à—É–≤–∞—Ç–∏ "
"–¥–≤–∞ —Ç–∏–ø–∏:"

#: src/exercises/day-2/iterators-and-ownership.md:65
msgid "`Item`: the type we iterate over, such as `i8`,"
msgstr "`Item`: —Ç–∏–ø, —è–∫–∏–π –º–∏ –ø–æ–≤—Ç–æ—Ä—é—î–º–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `i8`,"

#: src/exercises/day-2/iterators-and-ownership.md:66
msgid "`IntoIter`: the `Iterator` type returned by the `into_iter` method."
msgstr "`IntoIter`: —Ç–∏–ø `Iterator`, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –º–µ—Ç–æ–¥–æ–º `into_iter`."

#: src/exercises/day-2/iterators-and-ownership.md:68
msgid ""
"Note that `IntoIter` and `Item` are linked: the iterator must have the same "
"`Item` type, which means that it returns `Option<Item>`"
msgstr ""
"–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ `IntoIter` —ñ `Item` –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ: —ñ—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —Ç–æ–π —Å–∞–º–∏–π "
"—Ç–∏–ø `Item`, —â–æ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î `Option<Item>`"

#: src/exercises/day-2/iterators-and-ownership.md:71
msgid "Like before, what  is the type returned by the iterator?"
msgstr "–Ø–∫ —ñ —Ä–∞–Ω—ñ—à–µ, —è–∫–∏–π —Ç–∏–ø –ø–æ–≤–µ—Ä—Ç–∞—î —ñ—Ç–µ—Ä–∞—Ç–æ—Ä?"

#: src/exercises/day-2/iterators-and-ownership.md:73
msgid ""
"```rust,editable,compile_fail\n"
"fn main() {\n"
"    let v: Vec<String> = vec![String::from(\"foo\"), String::"
"from(\"bar\")];\n"
"    let mut iter = v.into_iter();\n"
"\n"
"    let v0: Option<..> = iter.next();\n"
"    println!(\"v0: {v0:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-2/iterators-and-ownership.md:83
msgid "`for` Loops"
msgstr "`–∑–∞` –¶–∏–∫–ª–∏"

#: src/exercises/day-2/iterators-and-ownership.md:85
msgid ""
"Now that we know both `Iterator` and `IntoIterator`, we can build `for` "
"loops. They call `into_iter()` on an expression and iterates over the "
"resulting iterator:"
msgstr ""
"–¢–µ–ø–µ—Ä, –∫–æ–ª–∏ –º–∏ –∑–Ω–∞—î–º–æ —ñ `Iterator`, —ñ `IntoIterator`, –º–∏ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ "
"—Ü–∏–∫–ª–∏ `for`. –í–æ–Ω–∏ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å `into_iter()` –¥–ª—è –≤–∏—Ä–∞–∑—É —Ç–∞ –ø–æ–≤—Ç–æ—Ä—é—é—Ç—å "
"–æ—Ç—Ä–∏–º–∞–Ω–∏–π —ñ—Ç–µ—Ä–∞—Ç–æ—Ä:"

#: src/exercises/day-2/iterators-and-ownership.md:89
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let v: Vec<String> = vec![String::from(\"foo\"), String::"
"from(\"bar\")];\n"
"\n"
"    for word in &v {\n"
"        println!(\"word: {word}\");\n"
"    }\n"
"\n"
"    for word in v {\n"
"        println!(\"word: {word}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-2/iterators-and-ownership.md:103
msgid "What is the type of `word` in each loop?"
msgstr "–Ø–∫–∏–π —Ç–∏–ø —Å–ª–æ–≤–∞ –≤ –∫–æ–∂–Ω–æ–º—É —Ü–∏–∫–ª—ñ?"

#: src/exercises/day-2/iterators-and-ownership.md:105
msgid ""
"Experiment with the code above and then consult the documentation for [`impl "
"IntoIterator for &Vec<T>`](https://doc.rust-lang.org/std/vec/struct.Vec."
"html#impl-IntoIterator-for-%26'a+Vec%3CT,+A%3E) and [`impl IntoIterator for "
"Vec<T>`](https://doc.rust-lang.org/std/vec/struct.Vec.html#impl-IntoIterator-"
"for-Vec%3CT,+A%3E) to check your answers."
msgstr ""
"–ü–æ–µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–π—Ç–µ –∑ –∫–æ–¥–æ–º –≤–∏—â–µ, –∞ –ø–æ—Ç—ñ–º –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó –¥–ª—è "
"[`impl IntoIterator for &Vec<T>`](https://doc.rust-lang.org/std/vec/struct."
"Vec.html#impl-IntoIterator-for -%26'a+Vec%3CT,+A%3E) —ñ [`impl IntoIterator "
"–¥–ª—è Vec<T>`](https://doc.rust-lang.org/std/vec/struct.Vec.html# impl-"
"IntoIterator-for-Vec%3CT,+A%3E), —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."

#: src/exercises/day-2/strings-iterators.md:3
msgid ""
"In this exercise, you are implementing a routing component of a web server. "
"The server is configured with a number of _path prefixes_ which are matched "
"against _request paths_. The path prefixes can contain a wildcard character "
"which matches a full segment. See the unit tests below."
msgstr ""
"–£ —Ü—ñ–π –≤–ø—Ä–∞–≤—ñ –≤–∏ —Ä–µ–∞–ª—ñ–∑—É—î—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞. –°–µ—Ä–≤–µ—Ä "
"–Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∑ –∫—ñ–ª—å–∫–æ–º–∞ _–ø—Ä–µ—Ñ—ñ–∫—Å–∞–º–∏ —à–ª—è—Ö—É_, —è–∫—ñ –∑–±—ñ–≥–∞—é—Ç—å—Å—è –∑ _—à–ª—è—Ö–∞–º–∏ "
"–∑–∞–ø–∏—Ç—É_. –ü—Ä–µ—Ñ—ñ–∫—Å–∏ —à–ª—è—Ö—É –º–æ–∂—É—Ç—å –º—ñ—Å—Ç–∏—Ç–∏ —Å–∏–º–≤–æ–ª –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, —è–∫–∏–π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î "
"–ø–æ–≤–Ω–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ –Ω–∏–∂—á–µ."

#: src/exercises/day-2/strings-iterators.md:8
msgid ""
"Copy the following code to <https://play.rust-lang.org/> and make the tests "
"pass. Try avoiding allocating a `Vec` for your intermediate results:"
msgstr ""
"–°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ –∫–æ–¥ –Ω–∞ <https://play.rust-lang.org/> —ñ "
"–ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ç–µ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç—å —É—Å–ø—ñ—à–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —É–Ω–∏–∫–∞—Ç–∏ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è "
"`Vec` –¥–ª—è –≤–∞—à–∏—Ö –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:"

#: src/exercises/day-2/strings-iterators.md:12
msgid ""
"```rust\n"
"// TODO: remove this when you're done with your implementation.\n"
"#![allow(unused_variables, dead_code)]\n"
"\n"
"pub fn prefix_matches(prefix: &str, request_path: &str) -> bool {\n"
"    unimplemented!()\n"
"}\n"
"\n"
"#[test]\n"
"fn test_matches_without_wildcard() {\n"
"    assert!(prefix_matches(\"/v1/publishers\", \"/v1/publishers\"));\n"
"    assert!(prefix_matches(\"/v1/publishers\", \"/v1/publishers/"
"abc-123\"));\n"
"    assert!(prefix_matches(\"/v1/publishers\", \"/v1/publishers/abc/"
"books\"));\n"
"\n"
"    assert!(!prefix_matches(\"/v1/publishers\", \"/v1\"));\n"
"    assert!(!prefix_matches(\"/v1/publishers\", \"/v1/publishersBooks\"));\n"
"    assert!(!prefix_matches(\"/v1/publishers\", \"/v1/parent/"
"publishers\"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_matches_with_wildcard() {\n"
"    assert!(prefix_matches(\n"
"        \"/v1/publishers/*/books\",\n"
"        \"/v1/publishers/foo/books\"\n"
"    ));\n"
"    assert!(prefix_matches(\n"
"        \"/v1/publishers/*/books\",\n"
"        \"/v1/publishers/bar/books\"\n"
"    ));\n"
"    assert!(prefix_matches(\n"
"        \"/v1/publishers/*/books\",\n"
"        \"/v1/publishers/foo/books/book1\"\n"
"    ));\n"
"\n"
"    assert!(!prefix_matches(\"/v1/publishers/*/books\", \"/v1/"
"publishers\"));\n"
"    assert!(!prefix_matches(\n"
"        \"/v1/publishers/*/books\",\n"
"        \"/v1/publishers/foo/booksByAuthor\"\n"
"    ));\n"
"}\n"
"```"
msgstr ""

#: src/welcome-day-3.md:1
msgid "Welcome to Day 3"
msgstr "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –¥–Ω—è 3"

#: src/welcome-day-3.md:3
msgid "Today, we will cover some more advanced topics of Rust:"
msgstr "–°—å–æ–≥–æ–¥–Ω—ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –¥–µ—è–∫—ñ –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω—ñ —Ç–µ–º–∏ Rust:"

#: src/welcome-day-3.md:5
msgid ""
"Traits: deriving traits, default methods, and important standard library "
"traits."
msgstr ""
"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: –æ–∑–Ω–∞–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è, –º–µ—Ç–æ–¥–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —ñ –≤–∞–∂–ª–∏–≤—ñ –æ–∑–Ω–∞–∫–∏ "
"—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏."

#: src/welcome-day-3.md:8
msgid ""
"Generics: generic data types, generic methods, monomorphization, and trait "
"objects."
msgstr ""
"–ì–µ–Ω–µ—Ä–∏–∫–∏: –∑–∞–≥–∞–ª—å–Ω—ñ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö, –∑–∞–≥–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏, –º–æ–Ω–æ–º–æ—Ä—Ñ—ñ–∑–∞—Ü—ñ—è —Ç–∞ –æ–±‚Äô—î–∫—Ç–∏ "
"–æ–∑–Ω–∞–∫."

#: src/welcome-day-3.md:11
msgid "Error handling: panics, `Result`, and the try operator `?`."
msgstr "–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫: –ø–∞–Ω—ñ–∫–∞, `–†–µ–∑—É–ª—å—Ç–∞—Ç` —ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–ø—Ä–æ–±–∏ `?`."

#: src/welcome-day-3.md:13
msgid "Testing: unit tests, documentation tests, and integration tests."
msgstr "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏, —Ç–µ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏."

#: src/welcome-day-3.md:15
msgid ""
"Unsafe Rust: raw pointers, static variables, unsafe functions, and extern "
"functions."
msgstr ""
"–ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π Rust: –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –ø–æ–∫–∞–∂—á–∏–∫–∏, —Å—Ç–∞—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ, –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó "
"—Ç–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó."

#: src/generics.md:3
msgid ""
"Rust support generics, which lets you abstract algorithms or data structures "
"(such as sorting or a binary tree) over the types used or stored."
msgstr ""
"Rust –ø—ñ–¥—Ç—Ä–∏–º—É—î —É–Ω—ñ–≤–µ—Ä—Å–∞–ª–∏, —è–∫—ñ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –∞–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ "
"–¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ –±—ñ–Ω–∞—Ä–Ω–µ –¥–µ—Ä–µ–≤–æ) –Ω–∞–¥ —Ç–∏–ø–∞–º–∏, —è–∫—ñ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∞–±–æ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è."

#: src/generics/data-types.md:3
msgid "You can use generics to abstract over the concrete field type:"
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ä–∏–∫–∏ –¥–ª—è –∞–±—Å—Ç—Ä–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∏–ø–æ–º "
"–ø–æ–ª—è:"

#: src/generics/data-types.md:5
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Point<T> {\n"
"    x: T,\n"
"    y: T,\n"
"}\n"
"\n"
"fn main() {\n"
"    let integer = Point { x: 5, y: 10 };\n"
"    let float = Point { x: 1.0, y: 4.0 };\n"
"    println!(\"{integer:?} and {float:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/generics/data-types.md:21
msgid "Try declaring a new variable `let p = Point { x: 5, y: 10.0 };`."
msgstr ""

#: src/generics/data-types.md:23
msgid "Fix the code to allow points that have elements of different types."
msgstr "–í–∏–ø—Ä–∞–≤—Ç–µ –∫–æ–¥, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ —Ç–æ—á–∫–∏, —è–∫—ñ –º–∞—é—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤."

#: src/generics/methods.md:3
msgid "You can declare a generic type on your `impl` block:"
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –æ–≥–æ–ª–æ—Å–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–∏–ø —É —Å–≤–æ—î–º—É –±–ª–æ—Ü—ñ `impl`:"

#: src/generics/methods.md:5
msgid ""
"```rust,editable\n"
"#[derive(Debug)]\n"
"struct Point<T>(T, T);\n"
"\n"
"impl<T> Point<T> {\n"
"    fn x(&self) -> &T {\n"
"        &self.0  // + 10\n"
"    }\n"
"\n"
"    // fn set_x(&mut self, x: T)\n"
"}\n"
"\n"
"fn main() {\n"
"    let p = Point(5, 10);\n"
"    println!(\"p.x = {}\", p.x());\n"
"}\n"
"```"
msgstr ""

#: src/generics/methods.md:25
msgid ""
"_Q:_ Why `T` is specified twice in `impl<T> Point<T> {}`? Isn't that "
"redundant?"
msgstr "_–ó:_ –ß–æ–º—É `T` –≤–∫–∞–∑–∞–Ω–æ –¥–≤—ñ—á—ñ –≤ `impl<T> Point<T> {}`? –•—ñ–±–∞ —Ü–µ –Ω–µ –∑–∞–π–≤–µ?"

#: src/generics/methods.md:26
msgid ""
"This is because it is a generic implementation section for generic type. "
"They are independently generic."
msgstr ""
"–¶–µ –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è —Ç–∏–º, —â–æ —Ü–µ —Ä–æ–∑–¥—ñ–ª –∑–∞–≥–∞–ª—å–Ω–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É. "
"–í–æ–Ω–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —î —Ä–æ–¥–æ–≤–∏–º–∏."

#: src/generics/methods.md:27
msgid "It means these methods are defined for any `T`."
msgstr "–¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ —Ü—ñ –º–µ—Ç–æ–¥–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ `T`."

#: src/generics/methods.md:28
msgid "It is possible to write `impl Point<u32> { .. }`. "
msgstr "–ú–æ–∂–Ω–∞ –Ω–∞–ø–∏—Å–∞—Ç–∏ `impl Point<u32> { .. }`."

#: src/generics/methods.md:29
msgid ""
"`Point` is still generic and you can use `Point<f64>`, but methods in this "
"block will only be available for `Point<u32>`."
msgstr ""
"`Point` –≤—Å–µ —â–µ —î –∑–∞–≥–∞–ª—å–Ω–∏–º, —ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `Point<f64>`, –∞–ª–µ "
"–º–µ—Ç–æ–¥–∏ –≤ —Ü—å–æ–º—É –±–ª–æ—Ü—ñ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—à–µ –¥–ª—è `Point<u32>`."

#: src/generics/monomorphization.md:3
msgid "Generic code is turned into non-generic code based on the call sites:"
msgstr ""
"–ó–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–¥ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ –Ω–µ–∑–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–∞–π—Ç—ñ–≤ –≤–∏–∫–ª–∏–∫—ñ–≤:"

#: src/generics/monomorphization.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let integer = Some(5);\n"
"    let float = Some(5.0);\n"
"}\n"
"```"
msgstr ""

#: src/generics/monomorphization.md:12
msgid "behaves as if you wrote"
msgstr "–ø–æ–≤–æ–¥–∏—Ç—å—Å—è —Ç–∞–∫, –Ω—ñ–±–∏ –≤–∏ –Ω–∞–ø–∏—Å–∞–ª–∏"

#: src/generics/monomorphization.md:14
msgid ""
"```rust,editable\n"
"enum Option_i32 {\n"
"    Some(i32),\n"
"    None,\n"
"}\n"
"\n"
"enum Option_f64 {\n"
"    Some(f64),\n"
"    None,\n"
"}\n"
"\n"
"fn main() {\n"
"    let integer = Option_i32::Some(5);\n"
"    let float = Option_f64::Some(5.0);\n"
"}\n"
"```"
msgstr ""

#: src/generics/monomorphization.md:31
msgid ""
"This is a zero-cost abstraction: you get exactly the same result as if you "
"had hand-coded the data structures without the abstraction."
msgstr ""
"–¶–µ –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—è –∑ –Ω—É–ª—å–æ–≤–∏–º–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏: –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–π —Å–∞–º–∏–π "
"—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω—ñ–±–∏ –≤–∏ –≤—Ä—É—á–Ω—É –∫–æ–¥—É–≤–∞–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –±–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—ó."

#: src/traits.md:3
msgid ""
"Rust lets you abstract over types with traits. They're similar to interfaces:"
msgstr ""
"Rust –¥–æ–∑–≤–æ–ª—è—î –∞–±—Å—Ç—Ä–∞–≥—É–≤–∞—Ç–∏—Å—è –≤—ñ–¥ —Ç–∏–ø—ñ–≤ —ñ–∑ —Ä–∏—Å–∞–º–∏. –í–æ–Ω–∏ —Å—Ö–æ–∂—ñ –Ω–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏:"

#: src/traits.md:5
msgid ""
"```rust,editable\n"
"trait Pet {\n"
"    fn name(&self) -> String;\n"
"}\n"
"\n"
"struct Dog {\n"
"    name: String,\n"
"}\n"
"\n"
"struct Cat;\n"
"\n"
"impl Pet for Dog {\n"
"    fn name(&self) -> String {\n"
"        self.name.clone()\n"
"    }\n"
"}\n"
"\n"
"impl Pet for Cat {\n"
"    fn name(&self) -> String {\n"
"        String::from(\"The cat\") // No name, cats won't respond to it "
"anyway.\n"
"    }\n"
"}\n"
"\n"
"fn greet<P: Pet>(pet: &P) {\n"
"    println!(\"Who's a cutie? {} is!\", pet.name());\n"
"}\n"
"\n"
"fn main() {\n"
"    let fido = Dog { name: \"Fido\".into() };\n"
"    greet(&fido);\n"
"\n"
"    let captain_floof = Cat;\n"
"    greet(&captain_floof);\n"
"}\n"
"```"
msgstr ""

#: src/traits/trait-objects.md:3
msgid ""
"Trait objects allow for values of different types, for instance in a "
"collection:"
msgstr "–û–±‚Äô—î–∫—Ç–∏ –æ–∑–Ω–∞–∫ –¥–æ–ø—É—Å–∫–∞—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —É –∫–æ–ª–µ–∫—Ü—ñ—ó:"

#: src/traits/trait-objects.md:5
msgid ""
"```rust,editable\n"
"trait Pet {\n"
"    fn name(&self) -> String;\n"
"}\n"
"\n"
"struct Dog {\n"
"    name: String,\n"
"}\n"
"\n"
"struct Cat;\n"
"\n"
"impl Pet for Dog {\n"
"    fn name(&self) -> String {\n"
"        self.name.clone()\n"
"    }\n"
"}\n"
"\n"
"impl Pet for Cat {\n"
"    fn name(&self) -> String {\n"
"        String::from(\"The cat\") // No name, cats won't respond to it "
"anyway.\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let pets: Vec<Box<dyn Pet>> = vec![\n"
"        Box::new(Cat),\n"
"        Box::new(Dog { name: String::from(\"Fido\") }),\n"
"    ];\n"
"    for pet in pets {\n"
"        println!(\"Hello {}!\", pet.name());\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/traits/trait-objects.md:40
msgid "Memory layout after allocating `pets`:"
msgstr "–†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—ñ –ø—ñ—Å–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è ¬´–¥–æ–º–∞—à–Ω—ñ—Ö —Ç–≤–∞—Ä–∏–Ω¬ª:"

#: src/traits/trait-objects.md:42
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - "
"- -.\n"
":                           :     :                                             :\n"
":    "
"pets                   :     :                                             :\n"
":   +-----------+-------+   :     :   +-----+-----"
"+                             :\n"
":   | ptr       |   o---+---+-----+-->| o o | o o "
"|                             :\n"
":   | len       |     2 |   :     :   +-|-|-+-|-|-"
"+                             :\n"
":   | capacity  |     2 |   :     :     | |   | |   +---------------"
"+           :\n"
":   +-----------+-------+   :     :     | |   | '-->| name: \"Fido\"  "
"|           :\n"
":                           :     :     | |   |     +---------------"
"+           :\n"
"`- - - - - - - - - - - - - -'     :     | |   "
"|                                 :\n"
"                                  :     | |   |     +----------------------"
"+    :   \n"
"                                  :     | |   '---->| \"<Dog as Pet>::name\" "
"|    :\n"
"                                  :     | |         +----------------------"
"+    : \n"
"                                  :     | "
"|                                     : \n"
"                                  :     | |   +-"
"+                               :   \n"
"                                  :     | '-->|"
"\\|                               :     \n"
"                                  :     |     +-"
"+                               :    \n"
"                                  :     "
"|                                       : \n"
"                                  :     |     +----------------------"
"+          : \n"
"                                  :     '---->| \"<Cat as Pet>::name\" "
"|          : \n"
"                                  :           +----------------------"
"+          :\n"
"                                  :                                             :\n"
"                                  '- - - - - - - - - - - - - - - - - - - - - "
"- -'\n"
"\n"
"```"
msgstr ""

#: src/traits/trait-objects.md:72
msgid ""
"Types that implement a given trait may be of different sizes. This makes it "
"impossible to have things like `Vec<Pet>` in the example above."
msgstr ""
"–¢–∏–ø–∏, —è–∫—ñ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å –¥–∞–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å, –º–æ–∂—É—Ç—å –±—É—Ç–∏ —Ä—ñ–∑–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É. –¶–µ "
"—É–Ω–µ–º–æ–∂–ª–∏–≤–ª—é—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–∞–∫–∏—Ö —Ä–µ—á–µ–π, —è–∫ `Vec<Pet>` —É –ø—Ä–∏–∫–ª–∞–¥—ñ –≤–∏—â–µ."

#: src/traits/trait-objects.md:73
msgid ""
"`dyn Pet` is a way to tell the compiler about a dynamically sized type that "
"implements `Pet`."
msgstr ""
"`dyn Pet` ‚Äî —Ü–µ —Å–ø–æ—Å—ñ–± –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä—É –ø—Ä–æ —Ç–∏–ø –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É, "
"—è–∫–∏–π —Ä–µ–∞–ª—ñ–∑—É—î `Pet`."

#: src/traits/trait-objects.md:74
msgid ""
"In the example, `pets` holds _fat pointers_ to objects that implement `Pet`. "
"The fat pointer consists of two components, a pointer to the actual object "
"and a pointer to the virtual method table for the `Pet` implementation of "
"that particular object."
msgstr ""
"–£ –ø—Ä–∏–∫–ª–∞–¥—ñ `pets` –º—ñ—Å—Ç–∏—Ç—å _–∂–∏—Ä–Ω—ñ –ø–æ–∫–∞–∂—á–∏–∫–∏_ –Ω–∞ –æ–±‚Äô—î–∫—Ç–∏, —è–∫—ñ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å "
"`Pet`. –ñ–∏—Ä–Ω–∏–π –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –¥–≤–æ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤, –≤–∫–∞–∑—ñ–≤–Ω–∏–∫–∞ –Ω–∞ "
"—Ñ–∞–∫—Ç–∏—á–Ω–∏–π –æ–±‚Äô—î–∫—Ç —ñ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—é –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ –¥–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó "
"`Pet` —Ü—å–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±'—î–∫—Ç–∞."

#: src/traits/trait-objects.md:75
msgid "Compare these outputs in the above example:"
msgstr "–ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ —Ü—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ –Ω–∞–≤–µ–¥–µ–Ω–æ–º—É –≤–∏—â–µ –ø—Ä–∏–∫–ª–∞–¥—ñ:"

#: src/traits/trait-objects.md:76
msgid ""
"```rust,ignore\n"
"    println!(\"{} {}\", std::mem::size_of::<Dog>(), std::mem::size_of::"
"<Cat>());\n"
"    println!(\"{} {}\", std::mem::size_of::<&Dog>(), std::mem::size_of::"
"<&Cat>());\n"
"    println!(\"{}\", std::mem::size_of::<&dyn Pet>());\n"
"    println!(\"{}\", std::mem::size_of::<Box<dyn Pet>>());\n"
"```"
msgstr ""

#: src/traits/deriving-traits.md:3
msgid ""
"Rust derive macros work by automatically generating code that implements the "
"specified traits for a data structure."
msgstr ""
"–ú–∞–∫—Ä–æ—Å–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Rust –ø—Ä–∞—Ü—é—é—Ç—å —à–ª—è—Ö–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–¥—É, —è–∫–∏–π "
"—Ä–µ–∞–ª—ñ–∑—É—î –≤–∫–∞–∑–∞–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö."

#: src/traits/deriving-traits.md:5
msgid "You can let the compiler derive a number of traits as follows:"
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä—É –≤–∏–≤–µ—Å—Ç–∏ —Ä—è–¥ –æ–∑–Ω–∞–∫ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —á–∏–Ω–æ–º:"

#: src/traits/deriving-traits.md:7
msgid ""
"```rust,editable\n"
"#[derive(Debug, Clone, PartialEq, Eq, Default)]\n"
"struct Player {\n"
"    name: String,\n"
"    strength: u8,\n"
"    hit_points: u8,\n"
"}\n"
"\n"
"fn main() {\n"
"    let p1 = Player::default();\n"
"    let p2 = p1.clone();\n"
"    println!(\"Is {:?}\\nequal to {:?}?\\nThe answer is {}!\", &p1, &p2,\n"
"             if p1 == p2 { \"yes\" } else { \"no\" });\n"
"}\n"
"```"
msgstr ""

#: src/traits/default-methods.md:3
msgid "Traits can implement behavior in terms of other trait methods:"
msgstr "–†–∏—Å–∏ –º–æ–∂—É—Ç—å —Ä–µ–∞–ª—ñ–∑–æ–≤—É–≤–∞—Ç–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫—É –∑ —Ç–æ—á–∫–∏ –∑–æ—Ä—É —ñ–Ω—à–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ —Ä–∏—Å:"

#: src/traits/default-methods.md:5
msgid ""
"```rust,editable\n"
"trait Equals {\n"
"    fn equals(&self, other: &Self) -> bool;\n"
"    fn not_equals(&self, other: &Self) -> bool {\n"
"        !self.equals(other)\n"
"    }\n"
"}\n"
"\n"
"#[derive(Debug)]\n"
"struct Centimeter(i16);\n"
"\n"
"impl Equals for Centimeter {\n"
"    fn equals(&self, other: &Centimeter) -> bool {\n"
"        self.0 == other.0\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let a = Centimeter(10);\n"
"    let b = Centimeter(20);\n"
"    println!(\"{a:?} equals {b:?}: {}\", a.equals(&b));\n"
"    println!(\"{a:?} not_equals {b:?}: {}\", a.not_equals(&b));\n"
"}\n"
"```"
msgstr ""

#: src/traits/default-methods.md:32
msgid ""
"Traits may specify pre-implemented (default) methods and methods that users "
"are required to implement themselves. Methods with default implementations "
"can rely on required methods."
msgstr ""
"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–∂—É—Ç—å –≤–∏–∑–Ω–∞—á–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º) "
"–º–µ—Ç–æ–¥–∏ —Ç–∞ –º–µ—Ç–æ–¥–∏, —è–∫—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–≤–∏–Ω–Ω—ñ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ. –ú–µ—Ç–æ–¥–∏ –∑ "
"—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è–º–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –º–æ–∂—É—Ç—å –ø–æ–∫–ª–∞–¥–∞—Ç–∏—Å—è –Ω–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–µ—Ç–æ–¥–∏."

#: src/traits/default-methods.md:35
msgid "Move method `not_equals` to a new trait `NotEquals`."
msgstr "–ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å –º–µ—Ç–æ–¥ `not_equals` –¥–æ –Ω–æ–≤–æ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–∞ `NotEquals`."

#: src/traits/default-methods.md:37
msgid "Make `Equals` a super trait for `NotEquals`."
msgstr "–ó—Ä–æ–±—ñ—Ç—å ¬´Equals¬ª —Å—É–ø–µ—Ä—Ñ—É–Ω–∫—Ü—ñ—î—é –¥–ª—è ¬´NotEquals¬ª."

#: src/traits/default-methods.md:38
msgid ""
"```rust,editable,compile_fail\n"
"trait NotEquals: Equals {\n"
"    fn not_equals(&self, other: &Self) -> bool {\n"
"        !self.equals(other)\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/traits/default-methods.md:46
msgid "Provide a blanket implementation of `NotEquals` for `Equals`."
msgstr "–ù–∞–¥–∞–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é `NotEquals` –¥–ª—è `Equals`."

#: src/traits/default-methods.md:47
msgid ""
"```rust,editable,compile_fail\n"
"trait NotEquals {\n"
"    fn not_equals(&self, other: &Self) -> bool;\n"
"}\n"
"\n"
"impl<T> NotEquals for T where T: Equals {\n"
"    fn not_equals(&self, other: &Self) -> bool {\n"
"        !self.equals(other)\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/traits/default-methods.md:58
msgid ""
"With the blanket implementation, you no longer need `Equals` as a super "
"trait for `NotEqual`."
msgstr ""
"–ó –∑–∞–≥–∞–ª—å–Ω–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –≤–∞–º –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω ¬´Equals¬ª —è–∫ —Å—É–ø–µ—Ä-—Ç—Ä–µ–π—Ç –¥–ª—è "
"¬´NotEqual¬ª."

#: src/traits/trait-bounds.md:3
msgid ""
"When working with generics, you often want to require the types to implement "
"some trait, so that you can call this trait's methods."
msgstr ""
"–ü—Ä–∞—Ü—é—é—á–∏ –∑ –≥–µ–Ω–µ—Ä–∏–∫–∞–º–∏, –≤–∏ —á–∞—Å—Ç–æ —Ö–æ—á–µ—Ç–µ –≤–∏–º–∞–≥–∞—Ç–∏, —â–æ–± —Ç–∏–ø–∏ —Ä–µ–∞–ª—ñ–∑—É–≤–∞–ª–∏ –ø–µ–≤–Ω—É "
"–æ–∑–Ω–∞–∫—É, —â–æ–± –≤–∏ –º–æ–≥–ª–∏ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ —Ü—ñ—î—ó –æ–∑–Ω–∞–∫–∏."

#: src/traits/trait-bounds.md:6
msgid "You can do this with `T: Trait` or `impl Trait`:"
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `T: Trait` –∞–±–æ `impl Trait`:"

#: src/traits/trait-bounds.md:8
msgid ""
"```rust,editable\n"
"fn duplicate<T: Clone>(a: T) -> (T, T) {\n"
"    (a.clone(), a.clone())\n"
"}\n"
"\n"
"// Syntactic sugar for:\n"
"//   fn add_42_millions<T: Into<i32>>(x: T) -> i32 {\n"
"fn add_42_millions(x: impl Into<i32>) -> i32 {\n"
"    x.into() + 42_000_000\n"
"}\n"
"\n"
"// struct NotClonable;\n"
"\n"
"fn main() {\n"
"    let foo = String::from(\"foo\");\n"
"    let pair = duplicate(foo);\n"
"    println!(\"{pair:?}\");\n"
"\n"
"    let many = add_42_millions(42_i8);\n"
"    println!(\"{many}\");\n"
"    let many_more = add_42_millions(10_000_000);\n"
"    println!(\"{many_more}\");\n"
"}\n"
"```"
msgstr ""

#: src/traits/trait-bounds.md:35
msgid "Show a `where` clause, students will encounter it when reading code."
msgstr ""
"–ü–æ–∫–∞–∂—ñ—Ç—å —Ä–µ—á–µ–Ω–Ω—è `where`, —Å—Ç—É–¥–µ–Ω—Ç–∏ –∑—É—Å—Ç—Ä—ñ–Ω—É—Ç—å –π–æ–≥–æ –ø—ñ–¥ —á–∞—Å —á–∏—Ç–∞–Ω–Ω—è –∫–æ–¥—É."

#: src/traits/trait-bounds.md:37
msgid ""
"```rust,ignore\n"
"fn duplicate<T>(a: T) -> (T, T)\n"
"where\n"
"    T: Clone,\n"
"{\n"
"    (a.clone(), a.clone())\n"
"}\n"
"```"
msgstr ""

#: src/traits/trait-bounds.md:46
msgid "It declutters the function signature if you have many parameters."
msgstr "–¶–µ —Ä–æ–∑—á–∏—â–∞—î —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—â–æ —É –≤–∞—Å –±–∞–≥–∞—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤."

#: src/traits/trait-bounds.md:47
msgid "It has additional features making it more powerful."
msgstr "–í—ñ–Ω –º–∞—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —â–æ —Ä–æ–±–∏—Ç—å –π–æ–≥–æ –±—ñ–ª—å—à –ø–æ—Ç—É–∂–Ω–∏–º."

#: src/traits/trait-bounds.md:48
msgid ""
"If someone asks, the extra feature is that the type on the left of \":\" can "
"be arbitrary, like `Option<T>`."
msgstr ""
"–Ø–∫—â–æ —Ö—Ç–æ—Å—å –∑–∞–ø–∏—Ç–∞—î, –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ —Ç–∏–ø –ª—ñ–≤–æ—Ä—É—á –≤—ñ–¥ \":"
"\" –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω–∏–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `Option<T>`."

#: src/traits/impl-trait.md:1
msgid "`impl Trait`"
msgstr "`impl Trait`"

#: src/traits/impl-trait.md:3
msgid ""
"Similar to trait bounds, an `impl Trait` syntax can be used in function "
"arguments and return values:"
msgstr ""
"–ü–æ–¥—ñ–±–Ω–æ –¥–æ –º–µ–∂ –æ–∑–Ω–∞–∫, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å `impl Trait` –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ "
"–∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è—Ö, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è:"

#: src/traits/impl-trait.md:6
msgid ""
"```rust,editable\n"
"use std::fmt::Display;\n"
"\n"
"fn get_x(name: impl Display) -> impl Display {\n"
"    format!(\"Hello {name}\")\n"
"}\n"
"\n"
"fn main() {\n"
"    let x = get_x(\"foo\");\n"
"    println!(\"{x}\");\n"
"}\n"
"```"
msgstr ""

#: src/traits/impl-trait.md:19
msgid "`impl Trait` allows you to work with types which you cannot name."
msgstr ""
"`impl Trait` –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ç–∏–ø–∞–º–∏, —è–∫—ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–≤–∞—Ç–∏."

#: src/traits/impl-trait.md:23
msgid ""
"The meaning of `impl Trait` is a bit different in the different positions."
msgstr "–ó–Ω–∞—á–µ–Ω–Ω—è \"impl Trait\" –¥–µ—â–æ –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤ —Ä—ñ–∑–Ω–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö."

#: src/traits/impl-trait.md:25
msgid ""
"For a parameter, `impl Trait` is like an anonymous generic parameter with a "
"trait bound."
msgstr ""
"–î–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `impl Trait` —Å—Ö–æ–∂–∏–π –Ω–∞ –∞–Ω–æ–Ω—ñ–º–Ω–∏–π –∑–∞–≥–∞–ª—å–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ñ–∑ "
"–ø—Ä–∏–≤‚Äô—è–∑–∫–æ—é –æ–∑–Ω–∞–∫–∏."

#: src/traits/impl-trait.md:27
msgid ""
"For a return type, it means that the return type is some concrete type that "
"implements the trait, without naming the type. This can be useful when you "
"don't want to expose the concrete type in a public API."
msgstr ""
"–î–ª—è —Ç–∏–ø—É, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è, —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ —Ç–∏–ø, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è, —î –¥–µ—è–∫–∏–º "
"–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∏–ø–æ–º, —è–∫–∏–π —Ä–µ–∞–ª—ñ–∑—É—î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å, –±–µ–∑ –Ω–∞–∑–≤–∏ —Ç–∏–ø—É. –¶–µ –º–æ–∂–µ –±—É—Ç–∏ "
"–∫–æ—Ä–∏—Å–Ω–æ, –∫–æ–ª–∏ –≤–∏ –Ω–µ —Ö–æ—á–µ—Ç–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–∏–ø —É –ø—É–±–ª—ñ—á–Ω–æ–º—É API."

#: src/traits/impl-trait.md:31
msgid ""
"Inference is hard in return position. A function returning `impl Foo` picks "
"the concrete type it returns, without writing it out in the source. A "
"function returning a generic type like `collect<B>() -> B` can return any "
"type satisfying `B`, and the caller may need to choose one, such as with "
"`let x: Vec<_> = foo.collect()` or with the turbofish, `foo.collect::"
"<Vec<_>>()`."
msgstr ""
"–£ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó –≤–∞–∂–∫–æ –∑—Ä–æ–±–∏—Ç–∏ –≤–∏—Å–Ω–æ–≤–æ–∫. –§—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î `impl Foo`, "
"–≤–∏–±–∏—Ä–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–∏–ø, —è–∫–∏–π –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—î, –Ω–µ –∑–∞–ø–∏—Å—É—é—á–∏ –π–æ–≥–æ –≤ –∫–æ–¥—ñ. "
"–§—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–∏–ø, —è–∫-–æ—Ç `collect<B>() -> B`, –º–æ–∂–µ "
"–ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ç–∏–ø, —è–∫–∏–π –∑–∞–¥–æ–≤–æ–ª—å–Ω—è—î `B`, —ñ –∞–±–æ–Ω–µ–Ω—Ç—É –º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è "
"–≤–∏–±—Ä–∞—Ç–∏ –æ–¥–∏–Ω, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `let x: Vec<_> = foo. collect()` –∞–±–æ –∑ turbofish, "
"`foo.collect::<Vec<_>>()`."

#: src/traits/impl-trait.md:37
msgid ""
"This example is great, because it uses `impl Display` twice. It helps to "
"explain that nothing here enforces that it is _the same_ `impl Display` "
"type. If we used a single  `T: Display`, it would enforce the constraint "
"that input `T` and return `T` type are the same type. It would not work for "
"this particular function, as the type we expect as input is likely not what "
"`format!` returns. If we wanted to do the same via `: Display` syntax, we'd "
"need two independent generic parameters."
msgstr ""
"–¶–µ–π –ø—Ä–∏–∫–ª–∞–¥ —á—É–¥–æ–≤–∏–π, —Ç–æ–º—É —â–æ –≤—ñ–Ω –¥–≤—ñ—á—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î `impl Display`. –¶–µ "
"–¥–æ–ø–æ–º–∞–≥–∞—î –ø–æ—è—Å–Ω–∏—Ç–∏, —â–æ —Ç—É—Ç –Ω—ñ—â–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ —Ü–µ _—Ç–æ–π —Å–∞–º–∏–π_ —Ç–∏–ø `impl "
"Display`. –Ø–∫–±–∏ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ —î–¥–∏–Ω–∏–π `T: Display`, —Ü–µ –± –∑–∞–±–µ–∑–ø–µ—á—É–≤–∞–ª–æ "
"–æ–±–º–µ–∂–µ–Ω–Ω—è —Ç–æ–≥–æ, —â–æ —Ç–∏–ø –≤–≤–µ–¥–µ–Ω–Ω—è `T` —ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è `T` —î –æ–¥–Ω–∏–º —Ç–∏–ø–æ–º. –¶–µ –Ω–µ "
"–ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –¥–ª—è —Ü—ñ—î—ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–∏–ø, —è–∫–∏–π –º–∏ –æ—á—ñ–∫—É—î–º–æ —è–∫ "
"–≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ, —à–≤–∏–¥—à–µ –∑–∞ –≤—Å–µ, –Ω–µ —Ç–æ–π, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î `format!`. –Ø–∫–±–∏ –º–∏ —Ö–æ—Ç—ñ–ª–∏ "
"–∑—Ä–æ–±–∏—Ç–∏ —Ç–µ —Å–∞–º–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É `: Display`, –Ω–∞–º –∑–Ω–∞–¥–æ–±–∏–ª–∏—Å—è –± –¥–≤–∞ "
"–Ω–µ–∑–∞–ª–µ–∂–Ω—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏."

#: src/traits/important-traits.md:3
msgid ""
"We will now look at some of the most common traits of the Rust standard "
"library:"
msgstr ""
"–ó–∞—Ä–∞–∑ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –¥–µ—è–∫—ñ –∑ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó "
"–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ Rust:"

#: src/traits/important-traits.md:5
msgid ""
"[`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) and "
"[`IntoIterator`](https://doc.rust-lang.org/std/iter/trait.IntoIterator.html) "
"used in `for` loops,"
msgstr ""
"[`–Ü—Ç–µ—Ä–∞—Ç–æ—Ä`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) —ñ "
"[`IntoIterator`](https://doc.rust-lang.org/std/iter /trait.IntoIterator."
"html), —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —Ü–∏–∫–ª–∞—Ö `for`,"

#: src/traits/important-traits.md:6
msgid ""
"[`From`](https://doc.rust-lang.org/std/convert/trait.From.html) and [`Into`]"
"(https://doc.rust-lang.org/std/convert/trait.Into.html) used to convert "
"values,"
msgstr ""
"[`–ó`](https://doc.rust-lang.org/std/convert/trait.From.html) —ñ [`–í`](https://"
"doc.rust-lang.org/std/convert /trait.Into.html), —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è "
"–ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å,"

#: src/traits/important-traits.md:7
msgid ""
"[`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and [`Write`]"
"(https://doc.rust-lang.org/std/io/trait.Write.html) used for IO,"
msgstr ""
"[`–ß–∏—Ç–∞—Ç–∏`](https://doc.rust-lang.org/std/io/trait.Read.html) —ñ [`–ù–∞–ø–∏—Å–∞—Ç–∏`]"
"(https://doc.rust-lang.org/std/io /trait.Write.html) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è IO,"

#: src/traits/important-traits.md:8
msgid ""
"[`Add`](https://doc.rust-lang.org/std/ops/trait.Add.html), [`Mul`](https://"
"doc.rust-lang.org/std/ops/trait.Mul.html), ... used for operator "
"overloading, and"
msgstr ""
"[`–î–æ–¥–∞—Ç–∏`](https://doc.rust-lang.org/std/ops/trait.Add.html), [`Mul`]"
"(https://doc.rust-lang.org/std/ops /trait.Mul.html), ... –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è "
"–¥–ª—è –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —ñ"

#: src/traits/important-traits.md:9
msgid ""
"[`Drop`](https://doc.rust-lang.org/std/ops/trait.Drop.html) used for "
"defining destructors."
msgstr ""
"[`Drop`](https://doc.rust-lang.org/std/ops/trait.Drop.html) –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è "
"–¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤."

#: src/traits/important-traits.md:10
msgid ""
"[`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) used "
"to construct a default instance of a type."
msgstr ""
"[`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ç–∏–ø—É."

#: src/traits/iterator.md:1
msgid "Iterators"
msgstr "–Ü—Ç–µ—Ä–∞—Ç–æ—Ä–∏"

#: src/traits/iterator.md:3
msgid ""
"You can implement the [`Iterator`](https://doc.rust-lang.org/std/iter/trait."
"Iterator.html) trait on your own types:"
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ç—Ä–µ–π—Ç [`Iterator`](https://doc.rust-lang.org/std/iter/"
"trait.Iterator.html) —É —Å–≤–æ—ó—Ö –≤–ª–∞—Å–Ω–∏—Ö —Ç–∏–ø–∞—Ö:"

#: src/traits/iterator.md:5
msgid ""
"```rust,editable\n"
"struct Fibonacci {\n"
"    curr: u32,\n"
"    next: u32,\n"
"}\n"
"\n"
"impl Iterator for Fibonacci {\n"
"    type Item = u32;\n"
"\n"
"    fn next(&mut self) -> Option<Self::Item> {\n"
"        let new_next = self.curr + self.next;\n"
"        self.curr = self.next;\n"
"        self.next = new_next;\n"
"        Some(self.curr)\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let fib = Fibonacci { curr: 0, next: 1 };\n"
"    for (i, n) in fib.enumerate().take(5) {\n"
"        println!(\"fib({i}): {n}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/traits/iterator.md:32
msgid ""
"The `Iterator` trait implements many common functional programming "
"operations over collections  (e.g. `map`, `filter`, `reduce`, etc). This is "
"the trait where you can find all the documentation about them. In Rust these "
"functions should produce the code as efficient as equivalent imperative "
"implementations."
msgstr ""
"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ `Iterator` —Ä–µ–∞–ª—ñ–∑—É—î –±–∞–≥–∞—Ç–æ –ø–æ—à–∏—Ä–µ–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ "
"–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–∞–¥ –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `map`, `filter`, `reduce` —Ç–æ—â–æ). –¶–µ "
"—Ñ—É–Ω–∫—Ü—ñ—è, –¥–µ –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –≤—Å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –ø—Ä–æ –Ω–∏—Ö. –£ Rust —Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó "
"–º–∞—é—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–æ–¥ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –∂ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º, —è–∫ —ñ –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω—ñ —ñ–º–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ "
"—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó."

#: src/traits/iterator.md:37
msgid ""
"`IntoIterator` is the trait that makes for loops work. It is implemented by "
"collection types such as `Vec<T>` and references to them such as `&Vec<T>` "
"and `&[T]`. Ranges also implement it. This is why you can iterate over a "
"vector with `for i in some_vec { .. }` but `some_vec.next()` doesn't exist."
msgstr ""
"`IntoIterator` ‚Äî —Ü–µ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å, —è–∫–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î —Ä–æ–±–æ—Ç—É —Ü–∏–∫–ª—ñ–≤ for. –í—ñ–Ω "
"—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–∞–∫–∏–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–ª–µ–∫—Ü—ñ–π, —è–∫ `Vec<T>`, —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –Ω–∞ –Ω–∏—Ö, "
"–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `&Vec<T>` —ñ `&[T]`. –î—ñ–∞–ø–∞–∑–æ–Ω–∏ —Ç–∞–∫–æ–∂ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å —Ü–µ. –û—Å—å —á–æ–º—É –≤–∏ "
"–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç–∏ –≤–µ–∫—Ç–æ—Ä —ñ–∑ `for i in some_vec { .. }`, –∞–ª–µ `some_vec."
"next()` –Ω–µ —ñ—Å–Ω—É—î."

#: src/traits/from-iterator.md:3
msgid ""
"[`FromIterator`](https://doc.rust-lang.org/std/iter/trait.FromIterator.html) "
"lets you build a collection from an [`Iterator`](https://doc.rust-lang.org/"
"std/iter/trait.Iterator.html)."
msgstr ""
"[`FromIterator`](https://doc.rust-lang.org/std/iter/trait.FromIterator.html) "
"–¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—é –∑ [`Iterator`](https://doc.rust-lang) .org/std/"
"iter/trait.Iterator.html)."

#: src/traits/from-iterator.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let primes = vec![2, 3, 5, 7];\n"
"    let prime_squares = primes\n"
"        .into_iter()\n"
"        .map(|prime| prime * prime)\n"
"        .collect::<Vec<_>>();\n"
"}\n"
"```"
msgstr ""

#: src/traits/from-iterator.md:17
msgid ""
"`Iterator` implements `fn collect<B>(self) -> B where B: FromIterator<Self::"
"Item>, Self: Sized`"
msgstr ""
"`–Ü—Ç–µ—Ä–∞—Ç–æ—Ä` —Ä–µ–∞–ª—ñ–∑—É—î `fn collect<B>(self) -> B –¥–µ B: FromIterator<Self::"
"Item>, Self: Sized`"

#: src/traits/from-iterator.md:23
msgid ""
"There are also implementations which let you do cool things like convert an "
"`Iterator<Item = Result<V, E>>` into a `Result<Vec<V>, E>`."
msgstr ""
"–Ü—Å–Ω—É—é—Ç—å —Ç–∞–∫–æ–∂ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó, —è–∫—ñ –¥–æ–∑–≤–æ–ª—è—é—Ç—å —Ä–æ–±–∏—Ç–∏ —Ü—ñ–∫–∞–≤—ñ —Ä–µ—á—ñ, —è–∫-–æ—Ç "
"–ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ `Iterator<Item = Result<V, E>>` –Ω–∞ `Result<Vec<V>, E>`."

#: src/traits/from-into.md:1
msgid "`From` and `Into`"
msgstr "`–í—ñ–¥` —ñ `–í`"

#: src/traits/from-into.md:3
msgid ""
"Types implement [`From`](https://doc.rust-lang.org/std/convert/trait.From."
"html) and [`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html) to "
"facilitate type conversions:"
msgstr ""
"–¢–∏–ø–∏ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å [`From`](https://doc.rust-lang.org/std/convert/trait.From."
"html) —ñ [`Into`](https://doc.rust-lang.org/std /convert/trait.Into.html), "
"—â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤:"

#: src/traits/from-into.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let s = String::from(\"hello\");\n"
"    let addr = std::net::Ipv4Addr::from([127, 0, 0, 1]);\n"
"    let one = i16::from(true);\n"
"    let bigger = i32::from(123i16);\n"
"    println!(\"{s}, {addr}, {one}, {bigger}\");\n"
"}\n"
"```"
msgstr ""

#: src/traits/from-into.md:15
msgid ""
"[`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html) is "
"automatically implemented when [`From`](https://doc.rust-lang.org/std/"
"convert/trait.From.html) is implemented:"
msgstr ""
"[`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html) —Ä–µ–∞–ª—ñ–∑—É—î—Ç—å—Å—è "
"–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, –∫–æ–ª–∏ [`From`](https://doc.rust-lang.org/ std/convert/trait.From."
"html) —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:"

#: src/traits/from-into.md:17
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let s: String = \"hello\".into();\n"
"    let addr: std::net::Ipv4Addr = [127, 0, 0, 1].into();\n"
"    let one: i16 = true.into();\n"
"    let bigger: i32 = 123i16.into();\n"
"    println!(\"{s}, {addr}, {one}, {bigger}\");\n"
"}\n"
"```"
msgstr ""

#: src/traits/from-into.md:29
msgid ""
"That's why it is common to only implement `From`, as your type will get "
"`Into` implementation too."
msgstr ""
"–û—Å—å —á–æ–º—É –ø—Ä–∏–π–Ω—è—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ `From`, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∞—à —Ç–∏–ø —Ç–∞–∫–æ–∂ "
"–æ—Ç—Ä–∏–º–∞—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é `Into`."

#: src/traits/from-into.md:30
msgid ""
"When declaring a function argument input type like \"anything that can be "
"converted into a `String`\", the rule is opposite, you should use `Into`. "
"Your function will accept types that implement `From` and those that _only_ "
"implement `Into`."
msgstr ""
"–ü—Ä–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—ñ –≤—Ö—ñ–¥–Ω–æ–≥–æ —Ç–∏–ø—É –∞—Ä–≥—É–º–µ–Ω—Ç—É —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫-–æ—Ç ¬´–≤—Å–µ, —â–æ –º–æ–∂–Ω–∞ "
"–ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞ `String`¬ª, –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–µ, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "
"`Into`. –í–∞—à–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–π–º–∞—Ç–∏–º–µ —Ç–∏–ø–∏, —è–∫—ñ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å `From`, —ñ —Ç—ñ, —è–∫—ñ "
"_–ª–∏—à–µ_ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å `Into`."

#: src/traits/read-write.md:1
msgid "`Read` and `Write`"
msgstr "`–ß–∏—Ç–∞—Ç–∏` —ñ `–ù–∞–ø–∏—Å–∞—Ç–∏`"

#: src/traits/read-write.md:3
msgid ""
"Using [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and "
"[`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html), you can "
"abstract over `u8` sources:"
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) —ñ "
"[`BufRead`](https://doc.rust-lang.org/std/ io/trait.BufRead.html), –≤–∏ –º–æ–∂–µ—Ç–µ "
"–∞–±—Å—Ç—Ä–∞–≥—É–≤–∞—Ç–∏—Å—è –Ω–∞–¥ –¥–∂–µ—Ä–µ–ª–∞–º–∏ `u8`:"

#: src/traits/read-write.md:5
msgid ""
"```rust,editable\n"
"use std::io::{BufRead, BufReader, Read, Result};\n"
"\n"
"fn count_lines<R: Read>(reader: R) -> usize {\n"
"    let buf_reader = BufReader::new(reader);\n"
"    buf_reader.lines().count()\n"
"}\n"
"\n"
"fn main() -> Result<()> {\n"
"    let slice: &[u8] = b\"foo\\nbar\\nbaz\\n\";\n"
"    println!(\"lines in slice: {}\", count_lines(slice));\n"
"\n"
"    let file = std::fs::File::open(std::env::current_exe()?)?;\n"
"    println!(\"lines in file: {}\", count_lines(file));\n"
"    Ok(())\n"
"}\n"
"```"
msgstr ""

#: src/traits/read-write.md:23
msgid ""
"Similarly, [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) lets "
"you abstract over `u8` sinks:"
msgstr ""
"–ü–æ–¥—ñ–±–Ω–∏–º —á–∏–Ω–æ–º, [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) "
"–¥–æ–∑–≤–æ–ª—è—î –≤–∞–º –∞–±—Å—Ç—Ä–∞–≥—É–≤–∞—Ç–∏—Å—è –Ω–∞–¥ `u8` –ø—Ä–∏–π–æ–º–Ω–∏–∫–∞–º–∏:"

#: src/traits/read-write.md:25
msgid ""
"```rust,editable\n"
"use std::io::{Result, Write};\n"
"\n"
"fn log<W: Write>(writer: &mut W, msg: &str) -> Result<()> {\n"
"    writer.write_all(msg.as_bytes())?;\n"
"    writer.write_all(\"\\n\".as_bytes())\n"
"}\n"
"\n"
"fn main() -> Result<()> {\n"
"    let mut buffer = Vec::new();\n"
"    log(&mut buffer, \"Hello\")?;\n"
"    log(&mut buffer, \"World\")?;\n"
"    println!(\"Logged: {:?}\", buffer);\n"
"    Ok(())\n"
"}\n"
"```"
msgstr ""

#: src/traits/drop.md:1
msgid "The `Drop` Trait"
msgstr "–†–∏—Å–∞ ¬´–ü–∞–¥–∞–Ω–Ω—è¬ª."

#: src/traits/drop.md:3
msgid ""
"Values which implement [`Drop`](https://doc.rust-lang.org/std/ops/trait.Drop."
"html) can specify code to run when they go out of scope:"
msgstr ""
"–ó–Ω–∞—á–µ–Ω–Ω—è, —è–∫—ñ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å [`Drop`](https://doc.rust-lang.org/std/ops/trait."
"Drop.html), –º–æ–∂—É—Ç—å –≤–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ–¥, —è–∫–∏–π –∑–∞–ø—É—Å–∫–∞—Ç–∏–º–µ—Ç—å—Å—è, –∫–æ–ª–∏ –≤–æ–Ω–∏ –≤–∏—Ö–æ–¥—è—Ç—å "
"–∑–∞ –º–µ–∂—ñ:"

#: src/traits/drop.md:5
msgid ""
"```rust,editable\n"
"struct Droppable {\n"
"    name: &'static str,\n"
"}\n"
"\n"
"impl Drop for Droppable {\n"
"    fn drop(&mut self) {\n"
"        println!(\"Dropping {}\", self.name);\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let a = Droppable { name: \"a\" };\n"
"    {\n"
"        let b = Droppable { name: \"b\" };\n"
"        {\n"
"            let c = Droppable { name: \"c\" };\n"
"            let d = Droppable { name: \"d\" };\n"
"            println!(\"Exiting block B\");\n"
"        }\n"
"        println!(\"Exiting block A\");\n"
"    }\n"
"    drop(a);\n"
"    println!(\"Exiting main\");\n"
"}\n"
"```"
msgstr ""

#: src/traits/drop.md:34 src/traits/operators.md:26
msgid "Discussion points:"
msgstr "–ü—É–Ω–∫—Ç–∏ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è:"

#: src/traits/drop.md:36
msgid "Why doesn't `Drop::drop` take `self`?"
msgstr "–ß–æ–º—É `Drop::drop` –Ω–µ –ø—Ä–∏–π–º–∞—î `self`?"

#: src/traits/drop.md:37
msgid ""
"Short-answer: If it did, `std::mem::drop` would be called at the end of the "
"block, resulting in another call to `Drop::drop`, and a stack overflow!"
msgstr ""
"–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: —è–∫–±–∏ —Ü–µ –±—É–ª–æ —Ç–∞–∫, `std::mem::drop` –≤–∏–∫–ª–∏–∫–∞–≤—Å—è –± —É –∫—ñ–Ω—Ü—ñ "
"–±–ª–æ–∫—É, —â–æ –ø—Ä–∏–∑–≤–µ–ª–æ –± –¥–æ —â–µ –æ–¥–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É `Drop::drop` —ñ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è —Å—Ç–µ–∫—É!"

#: src/traits/drop.md:40
msgid "Try replacing `drop(a)` with `a.drop()`."
msgstr "–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ `drop(a)` –Ω–∞ `a.drop()`."

#: src/traits/default.md:1
msgid "The `Default` Trait"
msgstr "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ \"–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º\"."

#: src/traits/default.md:3
msgid ""
"[`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) trait "
"produces a default value for a type."
msgstr ""
"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ [`Default`](https://doc.rust-lang.org/std/default/trait."
"Default.html) —Å—Ç–≤–æ—Ä—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ç–∏–ø—É."

#: src/traits/default.md:5
msgid ""
"```rust,editable\n"
"#[derive(Debug, Default)]\n"
"struct Derived {\n"
"    x: u32,\n"
"    y: String,\n"
"    z: Implemented,\n"
"}\n"
"\n"
"#[derive(Debug)]\n"
"struct Implemented(String);\n"
"\n"
"impl Default for Implemented {\n"
"    fn default() -> Self {\n"
"        Self(\"John Smith\".into())\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let default_struct = Derived::default();\n"
"    println!(\"{default_struct:#?}\");\n"
"\n"
"    let almost_default_struct = Derived {\n"
"        y: \"Y is set!\".into(),\n"
"        ..Derived::default()\n"
"    };\n"
"    println!(\"{almost_default_struct:#?}\");\n"
"\n"
"    let nothing: Option<Derived> = None;\n"
"    println!(\"{:#?}\", nothing.unwrap_or_default());\n"
"}\n"
"\n"
"```"
msgstr ""

#: src/traits/default.md:40
msgid ""
"It can be implemented directly or it can be derived via `#[derive(Default)]`."
msgstr ""
"–ô–æ–≥–æ –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
"`#[derive(Default)]`."

#: src/traits/default.md:41
msgid ""
"A derived implementation will produce a value where all fields are set to "
"their default values."
msgstr ""
"–ü–æ—Ö—ñ–¥–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è, —É —è–∫–æ–º—É –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ "
"–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."

#: src/traits/default.md:42
msgid "This means all types in the struct must implement `Default` too."
msgstr ""
"–¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤—Å—ñ —Ç–∏–ø–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ —Ç–∞–∫–æ–∂ –º–∞—é—Ç—å —Ä–µ–∞–ª—ñ–∑–æ–≤—É–≤–∞—Ç–∏ `Default`."

#: src/traits/default.md:43
msgid ""
"Standard Rust types often implement `Default` with reasonable values (e.g. "
"`0`, `\"\"`, etc)."
msgstr ""
"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ç–∏–ø–∏ Rust —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å `Default` —ñ–∑ –ø—Ä–∏–π–Ω—è—Ç–Ω–∏–º–∏ "
"–∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `0`, `\"\"` —Ç–æ—â–æ)."

#: src/traits/default.md:44
msgid "The partial struct copy works nicely with default."
msgstr "–ß–∞—Å—Ç–∫–æ–≤–∞ –∫–æ–ø—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —á—É–¥–æ–≤–æ –ø—Ä–∞—Ü—é—î —ñ–∑ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."

#: src/traits/default.md:45
msgid ""
"Rust standard library is aware that types can implement `Default` and "
"provides convenience methods that use it."
msgstr ""
"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Rust –∑–Ω–∞—î, —â–æ —Ç–∏–ø–∏ –º–æ–∂—É—Ç—å —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ `Default`, —ñ "
"–Ω–∞–¥–∞—î –∑—Ä—É—á–Ω—ñ –º–µ—Ç–æ–¥–∏, —è–∫—ñ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å."

#: src/traits/default.md:46
msgid ""
"the `..` syntax is called [struct update syntax](https://doc.rust-lang.org/"
"book/ch05-01-defining-structs.html#creating-instances-from-other-instances-"
"with-struct-update-syntax)"
msgstr ""
"—Å–∏–Ω—Ç–∞–∫—Å–∏—Å `..` –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è [—Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏](https://doc.rust-"
"lang.org/book/ch05-01-defining-structs.html#creating-instances-from-other-"
"instances-with- struct-update-syntax)"

#: src/traits/operators.md:1
msgid "`Add`, `Mul`, ..."
msgstr "`–î–æ–¥–∞—Ç–∏`, `Mul`, ..."

#: src/traits/operators.md:3
msgid ""
"Operator overloading is implemented via traits in [`std::ops`](https://doc."
"rust-lang.org/std/ops/index.html):"
msgstr ""
"–ü–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–∑–Ω–∞–∫ —É [`std::ops`]"
"(https://doc.rust-lang.org/std/ops/index.html):"

#: src/traits/operators.md:5
msgid ""
"```rust,editable\n"
"#[derive(Debug, Copy, Clone)]\n"
"struct Point { x: i32, y: i32 }\n"
"\n"
"impl std::ops::Add for Point {\n"
"    type Output = Self;\n"
"\n"
"    fn add(self, other: Self) -> Self {\n"
"        Self {x: self.x + other.x, y: self.y + other.y}\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let p1 = Point { x: 10, y: 20 };\n"
"    let p2 = Point { x: 100, y: 200 };\n"
"    println!(\"{:?} + {:?} = {:?}\", p1, p2, p1 + p2);\n"
"}\n"
"```"
msgstr ""

#: src/traits/operators.md:28
msgid ""
"You could implement `Add` for `&Point`. In which situations is that useful? "
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ `Add` –¥–ª—è `&Point`. –£ —è–∫–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö —Ü–µ –∫–æ—Ä–∏—Å–Ω–æ?"

#: src/traits/operators.md:29
msgid ""
"Answer: `Add:add` consumes `self`. If type `T` for which you are overloading "
"the operator is not `Copy`, you should consider overloading the operator for "
"`&T` as well. This avoids unnecessary cloning on the call site."
msgstr ""
"–í—ñ–¥–ø–æ–≤—ñ–¥—å: `Add:add` —Å–ø–æ–∂–∏–≤–∞—î `self`. –Ø–∫—â–æ —Ç–∏–ø `T`, –¥–ª—è —è–∫–æ–≥–æ –≤–∏ "
"–ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂—É—î—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä, –Ω–µ —î `Copy`, –≤–∏ —Ç–∞–∫–æ–∂ –ø–æ–≤–∏–Ω–Ω—ñ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å "
"–ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ `&T`. –¶–µ –¥–æ–∑–≤–æ–ª—è—î —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è "
"–Ω–∞ —Å–∞–π—Ç—ñ –≤–∏–∫–ª–∏–∫—É."

#: src/traits/operators.md:33
msgid ""
"Why is `Output` an associated type? Could it be made a type parameter of the "
"method?"
msgstr ""
"–ß–æ–º—É `–í–∏—Ö—ñ–¥` —î –∞—Å–æ—Ü—ñ–π–æ–≤–∞–Ω–∏–º —Ç–∏–ø–æ–º? –ß–∏ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Ç–∏–ø—É "
"–º–µ—Ç–æ–¥—É?"

#: src/traits/operators.md:34
msgid ""
"Short answer: Function type parameters are controlled by the caller, but "
"associated types (like `Output`) are controlled by the implementor of a "
"trait."
msgstr ""
"–ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–∏–ø—É —Ñ—É–Ω–∫—Ü—ñ—ó –∫–æ–Ω—Ç—Ä–æ–ª—é—é—Ç—å—Å—è –≤–∏–∫–ª–∏–∫–æ–º, –∞ "
"–ø–æ–≤‚Äô—è–∑–∞–Ω—ñ —Ç–∏–ø–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `Output`) –∫–æ–Ω—Ç—Ä–æ–ª—é—é—Ç—å—Å—è —Ä–µ–∞–ª—ñ–∑–∞—Ç–æ—Ä–æ–º –æ–∑–Ω–∞–∫–∏."

#: src/traits/operators.md:37
msgid ""
"You could implement `Add` for two different types, e.g. `impl Add<(i32, "
"i32)> for Point` would add a tuple to a `Point`."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ `Add` –¥–ª—è –¥–≤–æ—Ö —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤, –Ω–∞–ø—Ä. `impl Add<(i32, "
"i32)> for Point` –¥–æ–¥–∞—Å—Ç—å –∫–æ—Ä—Ç–µ–∂ –¥–æ `Point`."

#: src/traits/closures.md:1
msgid "Closures"
msgstr "–ó–∞–∫—Ä–∏—Ç—Ç—è"

#: src/traits/closures.md:3
msgid ""
"Closures or lambda expressions have types which cannot be named. However, "
"they implement special [`Fn`](https://doc.rust-lang.org/std/ops/trait.Fn."
"html), [`FnMut`](https://doc.rust-lang.org/std/ops/trait.FnMut.html), and "
"[`FnOnce`](https://doc.rust-lang.org/std/ops/trait.FnOnce.html) traits:"
msgstr ""
"–ó–∞–º–∏–∫–∞–Ω–Ω—è –∞–±–æ –ª—è–º–±–¥–∞-–≤–∏—Ä–∞–∑–∏ –º–∞—é—Ç—å —Ç–∏–ø–∏, —è–∫—ñ –Ω–µ –º–æ–∂–Ω–∞ –Ω–∞–∑–≤–∞—Ç–∏. –û–¥–Ω–∞–∫ –≤–æ–Ω–∏ "
"—Ä–µ–∞–ª—ñ–∑—É—é—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ [`Fn`](https://doc.rust-lang.org/std/ops/trait.Fn."
"html), [`FnMut`](https://doc.rust-lang. org/std/ops/trait.FnMut.html) —ñ "
"[`FnOnce`](https://doc.rust-lang.org/std/ops/trait.FnOnce.html) –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:"

#: src/traits/closures.md:8
msgid ""
"```rust,editable\n"
"fn apply_with_log(func: impl FnOnce(i32) -> i32, input: i32) -> i32 {\n"
"    println!(\"Calling function on {input}\");\n"
"    func(input)\n"
"}\n"
"\n"
"fn main() {\n"
"    let add_3 = |x| x + 3;\n"
"    println!(\"add_3: {}\", apply_with_log(add_3, 10));\n"
"    println!(\"add_3: {}\", apply_with_log(add_3, 20));\n"
"\n"
"    let mut v = Vec::new();\n"
"    let mut accumulate = |x: i32| {\n"
"        v.push(x);\n"
"        v.iter().sum::<i32>()\n"
"    };\n"
"    println!(\"accumulate: {}\", apply_with_log(&mut accumulate, 4));\n"
"    println!(\"accumulate: {}\", apply_with_log(&mut accumulate, 5));\n"
"\n"
"    let multiply_sum = |x| x * v.into_iter().sum::<i32>();\n"
"    println!(\"multiply_sum: {}\", apply_with_log(multiply_sum, 3));\n"
"}\n"
"```"
msgstr ""

#: src/traits/closures.md:34
msgid ""
"An `Fn` (e.g. `add_3`) neither consumes nor mutates captured values, or "
"perhaps captures nothing at all. It can be called multiple times "
"concurrently."
msgstr ""
"`Fn` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `add_3`) –Ω–µ —Å–ø–æ–∂–∏–≤–∞—î —ñ –Ω–µ –∑–º—ñ–Ω—é—î –∑–∞—Ö–æ–ø–ª–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, –∞–±–æ, "
"–º–æ–∂–ª–∏–≤–æ, –Ω–µ —Ñ—ñ–∫—Å—É—î –≤–∑–∞–≥–∞–ª—ñ –Ω—ñ—á–æ–≥–æ. –ô–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ "
"–æ–¥–Ω–æ—á–∞—Å–Ω–æ."

#: src/traits/closures.md:37
msgid ""
"An `FnMut` (e.g. `accumulate`) might mutate captured values. You can call it "
"multiple times, but not concurrently."
msgstr ""
"`FnMut` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `accumulate`) –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–∏ –º–æ–∂–µ—Ç–µ "
"–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –π–æ–≥–æ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤, –∞–ª–µ –Ω–µ –æ–¥–Ω–æ—á–∞—Å–Ω–æ."

#: src/traits/closures.md:40
msgid ""
"If you have an `FnOnce` (e.g. `multiply_sum`), you may only call it once. It "
"might consume captured values."
msgstr ""
"–Ø–∫—â–æ —É –≤–∞—Å —î `FnOnce` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `multiply_sum`), –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –π–æ–≥–æ "
"–ª–∏—à–µ –æ–¥–∏–Ω —Ä–∞–∑. –¶–µ –º–æ–∂–µ —Å–ø–æ–∂–∏–≤–∞—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è."

#: src/traits/closures.md:43
msgid ""
"`FnMut` is a subtype of `FnOnce`. `Fn` is a subtype of `FnMut` and `FnOnce`. "
"I.e. you can use an `FnMut` wherever an `FnOnce` is called for, and you can "
"use an `Fn` wherever an `FnMut` or `FnOnce` is called for."
msgstr ""
"`FnMut` —î –ø—ñ–¥—Ç–∏–ø–æ–º `FnOnce`. `Fn` —î –ø—ñ–¥—Ç–∏–ø–æ–º `FnMut` —ñ `FnOnce`. —Ç–æ–±—Ç–æ –≤–∏ "
"–º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `FnMut` —É—Å—é–¥–∏, –¥–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è `FnOnce`, —ñ –≤–∏ –º–æ–∂–µ—Ç–µ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `Fn` —É—Å—é–¥–∏, –¥–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è `FnMut` –∞–±–æ `FnOnce`."

#: src/traits/closures.md:47
msgid ""
"The compiler also infers `Copy` (e.g. for `add_3`) and `Clone` (e.g. "
"`multiply_sum`), depending on what the closure captures."
msgstr ""
"–ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä —Ç–∞–∫–æ–∂ –≤–∏–≤–æ–¥–∏—Ç—å `Copy` (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è `add_3`) —ñ `Clone` "
"(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `multiply_sum`), –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, —â–æ —Ñ—ñ–∫—Å—É—î –∑–∞–º–∏–∫–∞–Ω–Ω—è."

#: src/traits/closures.md:50
msgid ""
"By default, closures will capture by reference if they can. The `move` "
"keyword makes them capture by value."
msgstr ""
"–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–∞–∫—Ä–∏—Ç—Ç—è –∑–∞—Ö–æ–ø–ª—é—é—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ. –ö–ª—é—á–æ–≤–µ "
"—Å–ª–æ–≤–æ `move` —Ä–æ–±–∏—Ç—å —ó—Ö –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è–º."

#: src/traits/closures.md:52
msgid ""
"```rust,editable\n"
"fn make_greeter(prefix: String) -> impl Fn(&str) {\n"
"    return move |name| println!(\"{} {}\", prefix, name)\n"
"}\n"
"\n"
"fn main() {\n"
"    let hi = make_greeter(\"Hi\".to_string());\n"
"    hi(\"there\");\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-3/morning.md:1
msgid "Day 3: Morning Exercises"
msgstr "–î–µ–Ω—å 3: –†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞"

#: src/exercises/day-3/morning.md:3
msgid "We will design a classical GUI library using traits and trait objects."
msgstr ""
"–ú–∏ —Ä–æ–∑—Ä–æ–±–∏–º–æ –∫–ª–∞—Å–∏—á–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ "
"–æ–∑–Ω–∞–∫–∏ —Ç–∞ –æ–±‚Äô—î–∫—Ç–∏ –æ–∑–Ω–∞–∫."

#: src/exercises/day-3/morning.md:5
msgid ""
"We will also look at enum dispatch with an exercise involving points and "
"polygons."
msgstr ""
"–ú–∏ —Ç–∞–∫–æ–∂ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü—ñ—é enum —ñ–∑ –≤–ø—Ä–∞–≤–æ—é, —â–æ –≤–∫–ª—é—á–∞—î —Ç–æ—á–∫–∏ —Ç–∞ "
"–±–∞–≥–∞—Ç–æ–∫—É—Ç–Ω–∏–∫–∏."

#: src/exercises/day-3/simple-gui.md:3
msgid ""
"Let us design a classical GUI library using our new knowledge of traits and "
"trait objects."
msgstr ""
"–î–∞–≤–∞–π—Ç–µ —Ä–æ–∑—Ä–æ–±–∏–º–æ –∫–ª–∞—Å–∏—á–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É GUI, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞—à—ñ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è "
"–ø—Ä–æ –æ–∑–Ω–∞–∫–∏ —Ç–∞ –æ–±‚Äô—î–∫—Ç–∏ –æ–∑–Ω–∞–∫."

#: src/exercises/day-3/simple-gui.md:6
msgid "We will have a number of widgets in our library:"
msgstr "–£ –Ω–∞—à—ñ–π –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ –±—É–¥–µ –¥–µ–∫—ñ–ª—å–∫–∞ –≤—ñ–¥–∂–µ—Ç—ñ–≤:"

#: src/exercises/day-3/simple-gui.md:8
msgid "`Window`: has a `title` and contains other widgets."
msgstr "`–í—ñ–∫–Ω–æ`: –º–∞—î `–∑–∞–≥–æ–ª–æ–≤–æ–∫` —ñ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—à—ñ –≤—ñ–¥–∂–µ—Ç–∏."

#: src/exercises/day-3/simple-gui.md:9
msgid ""
"`Button`: has a `label` and a callback function which is invoked when the "
"button is pressed."
msgstr ""
"`–ö–Ω–æ–ø–∫–∞`: –º–∞—î `–º—ñ—Ç–∫—É` —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—é –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ–¥ "
"—á–∞—Å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏."

#: src/exercises/day-3/simple-gui.md:11
msgid "`Label`: has a `label`."
msgstr "`Label`: –º–∞—î `label`."

#: src/exercises/day-3/simple-gui.md:13
msgid "The widgets will implement a `Widget` trait, see below."
msgstr "–í—ñ–¥–∂–µ—Ç–∏ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å ¬´–í—ñ–¥–∂–µ—Ç¬ª, –¥–∏–≤. –Ω–∏–∂—á–µ."

#: src/exercises/day-3/simple-gui.md:15
msgid ""
"Copy the code below to <https://play.rust-lang.org/>, fill in the missing "
"`draw_into` methods so that you implement the `Widget` trait:"
msgstr ""
"–°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ –∫–æ–¥ –¥–æ <https://play.rust-lang.org/>, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å "
"–≤—ñ–¥—Å—É—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ `draw_into`, —â–æ–± —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `Widget`:"

#: src/exercises/day-3/simple-gui.md:18
msgid ""
"```rust,should_panic\n"
"// TODO: remove this when you're done with your implementation.\n"
"#![allow(unused_imports, unused_variables, dead_code)]\n"
"\n"
"pub trait Widget {\n"
"    /// Natural width of `self`.\n"
"    fn width(&self) -> usize;\n"
"\n"
"    /// Draw the widget into a buffer.\n"
"    fn draw_into(&self, buffer: &mut dyn std::fmt::Write);\n"
"\n"
"    /// Draw the widget on standard output.\n"
"    fn draw(&self) {\n"
"        let mut buffer = String::new();\n"
"        self.draw_into(&mut buffer);\n"
"        println!(\"{buffer}\");\n"
"    }\n"
"}\n"
"\n"
"pub struct Label {\n"
"    label: String,\n"
"}\n"
"\n"
"impl Label {\n"
"    fn new(label: &str) -> Label {\n"
"        Label {\n"
"            label: label.to_owned(),\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"pub struct Button {\n"
"    label: Label,\n"
"    callback: Box<dyn FnMut()>,\n"
"}\n"
"\n"
"impl Button {\n"
"    fn new(label: &str, callback: Box<dyn FnMut()>) -> Button {\n"
"        Button {\n"
"            label: Label::new(label),\n"
"            callback,\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"pub struct Window {\n"
"    title: String,\n"
"    widgets: Vec<Box<dyn Widget>>,\n"
"}\n"
"\n"
"impl Window {\n"
"    fn new(title: &str) -> Window {\n"
"        Window {\n"
"            title: title.to_owned(),\n"
"            widgets: Vec::new(),\n"
"        }\n"
"    }\n"
"\n"
"    fn add_widget(&mut self, widget: Box<dyn Widget>) {\n"
"        self.widgets.push(widget);\n"
"    }\n"
"\n"
"    fn inner_width(&self) -> usize {\n"
"        std::cmp::max(\n"
"            self.title.chars().count(),\n"
"            self.widgets.iter().map(|w| w.width()).max().unwrap_or(0),\n"
"        )\n"
"    }\n"
"}\n"
"\n"
"\n"
"impl Widget for Label {\n"
"    fn width(&self) -> usize {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    fn draw_into(&self, buffer: &mut dyn std::fmt::Write) {\n"
"        unimplemented!()\n"
"    }\n"
"}\n"
"\n"
"impl Widget for Button {\n"
"    fn width(&self) -> usize {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    fn draw_into(&self, buffer: &mut dyn std::fmt::Write) {\n"
"        unimplemented!()\n"
"    }\n"
"}\n"
"\n"
"impl Widget for Window {\n"
"    fn width(&self) -> usize {\n"
"        unimplemented!()\n"
"    }\n"
"\n"
"    fn draw_into(&self, buffer: &mut dyn std::fmt::Write) {\n"
"        unimplemented!()\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    let mut window = Window::new(\"Rust GUI Demo 1.23\");\n"
"    window.add_widget(Box::new(Label::new(\"This is a small text GUI demo."
"\")));\n"
"    window.add_widget(Box::new(Button::new(\n"
"        \"Click me!\",\n"
"        Box::new(|| println!(\"You clicked the button!\")),\n"
"    )));\n"
"    window.draw();\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-3/simple-gui.md:130
msgid "The output of the above program can be something simple like this:"
msgstr "–í–∏—Ö—ñ–¥ –≤–∏—â–µ–∑–∞–∑–Ω–∞—á–µ–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ –º–æ–∂–µ –±—É—Ç–∏ —Ç–∞–∫–∏–º –ø—Ä–æ—Å—Ç–∏–º:"

#: src/exercises/day-3/simple-gui.md:132
msgid ""
"```text\n"
"========\n"
"Rust GUI Demo 1.23\n"
"========\n"
"\n"
"This is a small text GUI demo.\n"
"\n"
"| Click me! |\n"
"```"
msgstr ""

#: src/exercises/day-3/simple-gui.md:142
msgid ""
"If you want to draw aligned text, you can use the [fill/alignment](https://"
"doc.rust-lang.org/std/fmt/index.html#fillalignment) formatting operators. In "
"particular, notice how you can pad with different characters (here a `'/'`) "
"and how you can control alignment:"
msgstr ""
"–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–º–∞–ª—é–≤–∞—Ç–∏ –≤–∏—Ä—ñ–≤–Ω—è–Ω–∏–π —Ç–µ–∫—Å—Ç, –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "
"–æ–ø–µ—Ä–∞—Ç–æ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è [fill/alignment](https://doc.rust-lang.org/std/fmt/"
"index.html#fillalignment). –ó–æ–∫—Ä–µ–º–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ —Ç–µ, —è–∫ –≤–∏ –º–æ–∂–µ—Ç–µ "
"–¥–æ–¥–∞–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (—Ç—É—Ç `'/'`) —ñ —è–∫ –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è–º:"

#: src/exercises/day-3/simple-gui.md:147
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let width = 10;\n"
"    println!(\"left aligned:  |{:/<width$}|\", \"foo\");\n"
"    println!(\"centered:      |{:/^width$}|\", \"foo\");\n"
"    println!(\"right aligned: |{:/>width$}|\", \"foo\");\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-3/simple-gui.md:156
msgid ""
"Using such alignment tricks, you can for example produce output like this:"
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ç–∞–∫—ñ —Ç—Ä—é–∫–∏ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è, –≤–∏ –º–æ–∂–µ—Ç–µ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–∫–∏–π "
"–≤–∏—Ö—ñ–¥:"

#: src/exercises/day-3/simple-gui.md:158
msgid ""
"```text\n"
"+--------------------------------+\n"
"|       Rust GUI Demo 1.23       |\n"
"+================================+\n"
"| This is a small text GUI demo. |\n"
"| +-----------+                  |\n"
"| | Click me! |                  |\n"
"| +-----------+                  |\n"
"+--------------------------------+\n"
"```"
msgstr ""

#: src/exercises/day-3/points-polygons.md:1
msgid "Polygon Struct"
msgstr "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–≥–∞—Ç–æ–∫—É—Ç–Ω–∏–∫–∞"

#: src/exercises/day-3/points-polygons.md:3
msgid ""
"We will create a `Polygon` struct which contain some points. Copy the code "
"below to <https://play.rust-lang.org/> and fill in the missing methods to "
"make the tests pass:"
msgstr ""
"–ú–∏ —Å—Ç–≤–æ—Ä–∏–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É `Polygon`, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç–∏–º–µ –∫—ñ–ª—å–∫–∞ —Ç–æ—á–æ–∫. –°–∫–æ–ø—ñ—é–π—Ç–µ "
"–Ω–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ –∫–æ–¥ –Ω–∞ <https://play.rust-lang.org/> —ñ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ "
"–º–µ—Ç–æ–¥–∏, —â–æ–± —Ç–µ—Å—Ç–∏ –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–∏–º–∏:"

#: src/exercises/day-3/points-polygons.md:7
msgid ""
"```rust\n"
"// TODO: remove this when you're done with your implementation.\n"
"#![allow(unused_variables, dead_code)]\n"
"\n"
"pub struct Point {\n"
"    // add fields\n"
"}\n"
"\n"
"impl Point {\n"
"    // add methods\n"
"}\n"
"\n"
"pub struct Polygon {\n"
"    // add fields\n"
"}\n"
"\n"
"impl Polygon {\n"
"    // add methods\n"
"}\n"
"\n"
"pub struct Circle {\n"
"    // add fields\n"
"}\n"
"\n"
"impl Circle {\n"
"    // add methods\n"
"}\n"
"\n"
"pub enum Shape {\n"
"    Polygon(Polygon),\n"
"    Circle(Circle),\n"
"}\n"
"\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use super::*;\n"
"\n"
"    fn round_two_digits(x: f64) -> f64 {\n"
"        (x * 100.0).round() / 100.0\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_point_magnitude() {\n"
"        let p1 = Point::new(12, 13);\n"
"        assert_eq!(round_two_digits(p1.magnitude()), 17.69);\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_point_dist() {\n"
"        let p1 = Point::new(10, 10);\n"
"        let p2 = Point::new(14, 13);\n"
"        assert_eq!(round_two_digits(p1.dist(p2)), 5.00);\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_point_add() {\n"
"        let p1 = Point::new(16, 16);\n"
"        let p2 = p1 + Point::new(-4, 3);\n"
"        assert_eq!(p2, Point::new(12, 19));\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_polygon_left_most_point() {\n"
"        let p1 = Point::new(12, 13);\n"
"        let p2 = Point::new(16, 16);\n"
"\n"
"        let mut poly = Polygon::new();\n"
"        poly.add_point(p1);\n"
"        poly.add_point(p2);\n"
"        assert_eq!(poly.left_most_point(), Some(p1));\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_polygon_iter() {\n"
"        let p1 = Point::new(12, 13);\n"
"        let p2 = Point::new(16, 16);\n"
"\n"
"        let mut poly = Polygon::new();\n"
"        poly.add_point(p1);\n"
"        poly.add_point(p2);\n"
"\n"
"        let points = poly.iter().cloned().collect::<Vec<_>>();\n"
"        assert_eq!(points, vec![Point::new(12, 13), Point::new(16, 16)]);\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_shape_perimeters() {\n"
"        let mut poly = Polygon::new();\n"
"        poly.add_point(Point::new(12, 13));\n"
"        poly.add_point(Point::new(17, 11));\n"
"        poly.add_point(Point::new(16, 16));\n"
"        let shapes = vec![\n"
"            Shape::from(poly),\n"
"            Shape::from(Circle::new(Point::new(10, 20), 5)),\n"
"        ];\n"
"        let perimeters = shapes\n"
"            .iter()\n"
"            .map(Shape::perimeter)\n"
"            .map(round_two_digits)\n"
"            .collect::<Vec<_>>();\n"
"        assert_eq!(perimeters, vec![15.48, 31.42]);\n"
"    }\n"
"}\n"
"\n"
"#[allow(dead_code)]\n"
"fn main() {}\n"
"```"
msgstr ""

#: src/exercises/day-3/points-polygons.md:117
msgid ""
"Since the method signatures are missing from the problem statements, the key "
"part of the exercise is to specify those correctly. You don't have to modify "
"the tests."
msgstr ""
"–û—Å–∫—ñ–ª—å–∫–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∏ –º–µ—Ç–æ–¥—ñ–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è—Ö –∑–∞–¥–∞—á, –∫–ª—é—á–æ–≤–æ—é —á–∞—Å—Ç–∏–Ω–æ—é "
"–≤–ø—Ä–∞–≤–∏ —î —ó—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è. –í–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ç–µ—Å—Ç–∏."

#: src/exercises/day-3/points-polygons.md:120
msgid "Other interesting parts of the exercise:"
msgstr "–Ü–Ω—à—ñ —Ü—ñ–∫–∞–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ –≤–ø—Ä–∞–≤–∏:"

#: src/exercises/day-3/points-polygons.md:122
msgid ""
"Derive a `Copy` trait for some structs, as in tests the methods sometimes "
"don't borrow their arguments."
msgstr ""
"–û—Ç—Ä–∏–º–∞–π—Ç–µ –æ–∑–Ω–∞–∫—É ¬´–ö–æ–ø—ñ—é–≤–∞—Ç–∏¬ª –¥–ª—è –¥–µ—è–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä, –æ—Å–∫—ñ–ª—å–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö –º–µ—Ç–æ–¥–∏ "
"—ñ–Ω–æ–¥—ñ –Ω–µ –∑–∞–ø–æ–∑–∏—á—É—é—Ç—å —Å–≤–æ—ó –∞—Ä–≥—É–º–µ–Ω—Ç–∏."

#: src/exercises/day-3/points-polygons.md:123
msgid ""
"Discover that `Add` trait must be implemented for two objects to be addable "
"via \"+\". Note that we do not discuss generics until Day 3."
msgstr ""
"–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `Add` –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞, —â–æ–± –¥–≤–∞ –æ–±‚Äô—î–∫—Ç–∏ –º–æ–∂–Ω–∞ "
"–±—É–ª–æ –¥–æ–¥–∞–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ ¬´+¬ª. –ó–∞—É–≤–∞–∂—Ç–µ, —â–æ –º–∏ –Ω–µ –æ–±–≥–æ–≤–æ—Ä—é—î–º–æ –≥–µ–Ω–µ—Ä–∏–∫–∏ –¥–æ 3-–≥–æ –¥–Ω—è."

#: src/error-handling.md:3
msgid "Error handling in Rust is done using explicit control flow:"
msgstr ""
"–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —É Rust –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —è–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É –∫–µ—Ä—É–≤–∞–Ω–Ω—è:"

#: src/error-handling.md:5
msgid "Functions that can have errors list this in their return type,"
msgstr ""
"–§—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –ø–æ–º–∏–ª–∫–∏, –≤–∫–∞–∑—É—é—Ç—å —Ü–µ —É —Å–≤–æ—î–º—É —Ç–∏–ø—ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è,"

#: src/error-handling.md:6
msgid "There are no exceptions."
msgstr "–ù–µ–º–∞—î –≤–∏–Ω—è—Ç–∫—ñ–≤."

#: src/error-handling/panics.md:3
msgid "Rust will trigger a panic if a fatal error happens at runtime:"
msgstr ""
"Rust –≤–∏–∫–ª–∏—á–µ –ø–∞–Ω—ñ–∫—É, —è–∫—â–æ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å—Ç–∞–Ω–µ—Ç—å—Å—è —Ñ–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:"

#: src/error-handling/panics.md:5
msgid ""
"```rust,editable,should_panic\n"
"fn main() {\n"
"    let v = vec![10, 20, 30];\n"
"    println!(\"v[100]: {}\", v[100]);\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/panics.md:12
msgid "Panics are for unrecoverable and unexpected errors."
msgstr "–ü–∞–Ω—ñ–∫–∞ ‚Äì —Ü–µ –Ω–µ–≤–∏–ø—Ä–∞–≤–Ω—ñ —Ç–∞ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω—ñ –ø–æ–º–∏–ª–∫–∏."

#: src/error-handling/panics.md:13
msgid "Panics are symptoms of bugs in the program."
msgstr "–ü–∞–Ω—ñ–∫–∞ —î –æ–∑–Ω–∞–∫–æ—é –ø–æ–º–∏–ª–æ–∫ —É –ø—Ä–æ–≥—Ä–∞–º—ñ."

#: src/error-handling/panics.md:14
msgid ""
"Use non-panicking APIs (such as `Vec::get`) if crashing is not acceptable."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ API, —â–æ –Ω–µ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –ø–∞–Ω—ñ–∫–∏ (—Ç–∞–∫—ñ —è–∫ `Vec::get`), —è–∫—â–æ –∑–±—ñ–π "
"–Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π."

#: src/error-handling/panic-unwind.md:1
msgid "Catching the Stack Unwinding"
msgstr "–°–ø—ñ–π–º–∞—Ç–∏ —Ä–æ–∑–º–æ—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ–ø–∫–∏"

#: src/error-handling/panic-unwind.md:3
msgid ""
"By default, a panic will cause the stack to unwind. The unwinding can be "
"caught:"
msgstr ""
"–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–∞–Ω—ñ–∫–∞ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ —Ä–æ–∑–º–æ—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–µ–∫–∞. –†–æ–∑–º–æ—Ç—É–≤–∞–Ω–Ω—è –º–æ–∂–Ω–∞ "
"–∑–ª–æ–≤–∏—Ç–∏:"

#: src/error-handling/panic-unwind.md:5
msgid ""
"```rust,editable\n"
"use std::panic;\n"
"\n"
"fn main() {\n"
"    let result = panic::catch_unwind(|| {\n"
"        println!(\"hello!\");\n"
"    });\n"
"    assert!(result.is_ok());\n"
"    \n"
"    let result = panic::catch_unwind(|| {\n"
"        panic!(\"oh no!\");\n"
"    });\n"
"    assert!(result.is_err());\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/panic-unwind.md:21
msgid ""
"This can be useful in servers which should keep running even if a single "
"request crashes."
msgstr ""
"–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö, —è–∫—ñ –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å "
"—É —Ä–∞–∑—ñ –∑–±–æ—é –æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É."

#: src/error-handling/panic-unwind.md:23
msgid "This does not work if `panic = 'abort'` is set in your `Cargo.toml`."
msgstr ""
"–¶–µ –Ω–µ –ø—Ä–∞—Ü—é—î, —è–∫—â–æ —É –≤–∞—à–æ–º—É `Cargo.toml` –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ `panic = 'abort'`."

#: src/error-handling/result.md:1
msgid "Structured Error Handling with `Result`"
msgstr "–°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —ñ–∑ ¬´—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º¬ª."

#: src/error-handling/result.md:3
msgid ""
"We have already seen the `Result` enum. This is used pervasively when errors "
"are expected as part of normal operation:"
msgstr ""
"–ú–∏ –≤–∂–µ –±–∞—á–∏–ª–∏ –ø–µ—Ä–µ–ª—ñ–∫ `Result`. –¶–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø–æ–≤—Å—é–¥–Ω–æ, –∫–æ–ª–∏ "
"–æ—á—ñ–∫—É—é—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∏ —è–∫ —á–∞—Å—Ç–∏–Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏:"

#: src/error-handling/result.md:6
msgid ""
"```rust,editable\n"
"use std::fs;\n"
"use std::io::Read;\n"
"\n"
"fn main() {\n"
"    let file = fs::File::open(\"diary.txt\");\n"
"    match file {\n"
"        Ok(mut file) => {\n"
"            let mut contents = String::new();\n"
"            file.read_to_string(&mut contents);\n"
"            println!(\"Dear diary: {contents}\");\n"
"        },\n"
"        Err(err) => {\n"
"            println!(\"The diary could not be opened: {err}\");\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/result.md:27
msgid ""
"As with `Option`, the successful value sits inside of `Result`, forcing the "
"developer to explicitly extract it. This encourages error checking. In the "
"case where an error should never happen, `unwrap()` or `expect()` can be "
"called, and this is a signal of the developer intent too."
msgstr ""
"–Ø–∫ —ñ —É –≤–∏–ø–∞–¥–∫—É –∑ `Option`, —É—Å–ø—ñ—à–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ `Result`, "
"–∑–º—É—à—É—é—á–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ —è–≤–Ω–æ –≤–∏—Ç—è–≥—Ç–∏ –π–æ–≥–æ. –¶–µ —Å—Ç–∏–º—É–ª—é—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–æ–º–∏–ª–æ–∫. –£ "
"–≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –ø–æ–º–∏–ª–∫–∞ –Ω—ñ–∫–æ–ª–∏ –Ω–µ —Å—Ç–∞–ª–∞—Å—è, –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ `unwrap()` –∞–±–æ "
"`expect()`, —ñ —Ü–µ —Ç–∞–∫–æ–∂ —î —Å–∏–≥–Ω–∞–ª–æ–º –ø—Ä–æ –Ω–∞–º—ñ—Ä–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞."

#: src/error-handling/result.md:30
msgid ""
"`Result` documentation is a recommended read. Not during the course, but it "
"is worth mentioning.  It contains a lot of convenience methods and functions "
"that help functional-style programming. "
msgstr ""
"–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é ¬´–†–µ–∑—É–ª—å—Ç–∞—Ç¬ª. –ù–µ –ø—ñ–¥ —á–∞—Å –∫—É—Ä—Å—É, –∞–ª–µ —Ü–µ "
"–≤–∞—Ä—Ç–æ –∑–≥–∞–¥–∞—Ç–∏. –í—ñ–Ω –º—ñ—Å—Ç–∏—Ç—å –±–∞–≥–∞—Ç–æ –∑—Ä—É—á–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ —ñ —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å "
"–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞—Ç–∏ —É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–º—É —Å—Ç–∏–ª—ñ."

#: src/error-handling/try-operator.md:1
msgid "Propagating Errors with `?`"
msgstr "–ü–æ—à–∏—Ä–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `?`"

#: src/error-handling/try-operator.md:3
msgid ""
"The try-operator `?` is used to return errors to the caller. It lets you "
"turn the common"
msgstr ""
"–û–ø–µ—Ä–∞—Ç–æ—Ä try `?` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∞–±–æ–Ω–µ–Ω—Ç—É. –¶–µ "
"–¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–µ"

#: src/error-handling/try-operator.md:6
msgid ""
"```rust,ignore\n"
"match some_expression {\n"
"    Ok(value) => value,\n"
"    Err(err) => return Err(err),\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/try-operator.md:13
msgid "into the much simpler"
msgstr "—É –Ω–∞–±–∞–≥–∞—Ç–æ –ø—Ä–æ—Å—Ç—ñ—à–µ"

#: src/error-handling/try-operator.md:15
msgid ""
"```rust,ignore\n"
"some_expression?\n"
"```"
msgstr ""

#: src/error-handling/try-operator.md:19
msgid "We can use this to simplify our error handling code:"
msgstr "–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü–µ, —â–æ–± —Å–ø—Ä–æ—Å—Ç–∏—Ç–∏ –Ω–∞—à –∫–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫:"

#: src/error-handling/try-operator.md:21
msgid ""
"```rust,editable\n"
"use std::{fs, io};\n"
"use std::io::Read;\n"
"\n"
"fn read_username(path: &str) -> Result<String, io::Error> {\n"
"    let username_file_result = fs::File::open(path);\n"
"    let mut username_file = match username_file_result {\n"
"        Ok(file) => file,\n"
"        Err(err) => return Err(err),\n"
"    };\n"
"\n"
"    let mut username = String::new();\n"
"    match username_file.read_to_string(&mut username) {\n"
"        Ok(_) => Ok(username),\n"
"        Err(err) => Err(err),\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    //fs::write(\"config.dat\", \"alice\").unwrap();\n"
"    let username = read_username(\"config.dat\");\n"
"    println!(\"username or error: {username:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/try-operator.md:50
#: src/error-handling/converting-error-types-example.md:52
msgid "The `username` variable can be either `Ok(string)` or `Err(error)`."
msgstr "–ó–º—ñ–Ω–Ω–∞ `username` –º–æ–∂–µ –º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è `Ok(string)` –∞–±–æ `Err(error)`."

#: src/error-handling/try-operator.md:51
#: src/error-handling/converting-error-types-example.md:53
msgid ""
"Use the `fs::write` call to test out the different scenarios: no file, empty "
"file, file with username."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∏–∫–ª–∏–∫ `fs::write`, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä—ñ–∑–Ω—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó: "
"–≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—É, –ø–æ—Ä–æ–∂–Ω—ñ–π —Ñ–∞–π–ª, —Ñ–∞–π–ª –∑ —ñ–º–µ–Ω–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."

#: src/error-handling/try-operator.md:52
msgid ""
"The return type of the function has to be compatible with the nested "
"functions it calls. For instance, a function returning a `Result<T, Err>` "
"can only apply the `?` operator on a function returning a  `Result<AnyT, "
"Err>`. It cannot apply the `?` operator on a function returning an "
"`Option<AnyT>` or `Result<T, OtherErr>` unless `OtherErr` implements "
"`From<Err>`. Reciprocally, a function returning an `Option<T>` can only "
"apply the `?` operator  on a function returning an `Option<AnyT>`."
msgstr ""
"–¢–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó –º–∞—î –±—É—Ç–∏ —Å—É–º—ñ—Å–Ω–∏–º —ñ–∑ –≤–∫–ª–∞–¥–µ–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏, —è–∫—ñ –≤–æ–Ω–∞ "
"–≤–∏–∫–ª–∏–∫–∞—î. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î `Result<T, Err>`, –º–æ–∂–µ "
"–∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä `?` –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î `Result<AnyT, "
"Err>`. –í—ñ–Ω –Ω–µ –º–æ–∂–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä `?` –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î "
"`Option<AnyT>` –∞–±–æ `Result<T, OtherErr>`, —è–∫—â–æ `OtherErr` –Ω–µ —Ä–µ–∞–ª—ñ–∑—É—î "
"`From<Err>`. –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ, —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î `Option<T>`, –º–æ–∂–µ "
"–∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä `?` –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î `Option<AnyT>`."

#: src/error-handling/try-operator.md:57
msgid ""
"You can convert incompatible types into one another with the different "
"`Option` and `Result` methods  such as `Option::ok_or`, `Result::ok`, "
"`Result::err`."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–µ—Å—É–º—ñ—Å–Ω—ñ —Ç–∏–ø–∏ –æ–¥–∏–Ω –≤ —ñ–Ω—à–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä—ñ–∑–Ω–∏—Ö "
"–º–µ—Ç–æ–¥—ñ–≤ `Option` —ñ `Result`, —Ç–∞–∫–∏—Ö —è–∫ `Option::ok_or`, `Result::ok`, "
"`Result::err`."

#: src/error-handling/converting-error-types.md:3
msgid ""
"The effective expansion of `?` is a little more complicated than previously "
"indicated:"
msgstr ""
"–ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è `?` —î —Ç—Ä–æ—Ö–∏ —Å–∫–ª–∞–¥–Ω—ñ—à–∏–º, –Ω—ñ–∂ –±—É–ª–æ –∑–∞–∑–Ω–∞—á–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ:"

#: src/error-handling/converting-error-types.md:5
msgid ""
"```rust,ignore\n"
"expression?\n"
"```"
msgstr ""

#: src/error-handling/converting-error-types.md:9
msgid "works the same as"
msgstr "–ø—Ä–∞—Ü—é—î —Ç–∞–∫ —Å–∞–º–æ, —è–∫"

#: src/error-handling/converting-error-types.md:11
msgid ""
"```rust,ignore\n"
"match expression {\n"
"    Ok(value) => value,\n"
"    Err(err)  => return Err(From::from(err)),\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/converting-error-types.md:18
msgid ""
"The `From::from` call here means we attempt to convert the error type to the "
"type returned by the function:"
msgstr ""
"–í–∏–∫–ª–∏–∫ `From::from` —Ç—É—Ç –æ–∑–Ω–∞—á–∞—î, —â–æ –º–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏ "
"–Ω–∞ —Ç–∏–ø, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î —Ñ—É–Ω–∫—Ü—ñ—è:"

#: src/error-handling/converting-error-types-example.md:3
msgid ""
"```rust,editable\n"
"use std::error::Error;\n"
"use std::fmt::{self, Display, Formatter};\n"
"use std::fs::{self, File};\n"
"use std::io::{self, Read};\n"
"\n"
"#[derive(Debug)]\n"
"enum ReadUsernameError {\n"
"    IoError(io::Error),\n"
"    EmptyUsername(String),\n"
"}\n"
"\n"
"impl Error for ReadUsernameError {}\n"
"\n"
"impl Display for ReadUsernameError {\n"
"    fn fmt(&self, f: &mut Formatter) -> fmt::Result {\n"
"        match self {\n"
"            Self::IoError(e) => write!(f, \"IO error: {e}\"),\n"
"            Self::EmptyUsername(filename) => write!(f, \"Found no username "
"in {filename}\"),\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"impl From<io::Error> for ReadUsernameError {\n"
"    fn from(err: io::Error) -> ReadUsernameError {\n"
"        ReadUsernameError::IoError(err)\n"
"    }\n"
"}\n"
"\n"
"fn read_username(path: &str) -> Result<String, ReadUsernameError> {\n"
"    let mut username = String::with_capacity(100);\n"
"    File::open(path)?.read_to_string(&mut username)?;\n"
"    if username.is_empty() {\n"
"        return Err(ReadUsernameError::EmptyUsername(String::from(path)));\n"
"    }\n"
"    Ok(username)\n"
"}\n"
"\n"
"fn main() {\n"
"    //fs::write(\"config.dat\", \"\").unwrap();\n"
"    let username = read_username(\"config.dat\");\n"
"    println!(\"username or error: {username:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/converting-error-types-example.md:55
msgid ""
"It is good practice for all error types that don't need to be `no_std` to "
"implement `std::error::Error`, which requires `Debug` and `Display`. The "
"`Error` crate for `core` is only available in [nightly](https://github.com/"
"rust-lang/rust/issues/103765), so not fully `no_std` compatible yet."
msgstr ""
"–¶–µ —Ö–æ—Ä–æ—à–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫, —è–∫—ñ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å `no_std`, —â–æ–± "
"—Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ `std::error::Error`, –¥–ª—è —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ `Debug` —ñ `Display`. "
"–Ø—â–∏–∫ `Error` –¥–ª—è `core` –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –≤ [nightly](https://github.com/rust-"
"lang/rust/issues/103765), —Ç–æ–º—É —â–µ –Ω–µ –ø–æ–≤–Ω—ñ—Å—Ç—é —Å—É–º—ñ—Å–Ω–∏–π –∑ `no_std`."

#: src/error-handling/converting-error-types-example.md:57
msgid ""
"It's generally helpful for them to implement `Clone` and `Eq` too where "
"possible, to make life easier for tests and consumers of your library. In "
"this case we can't easily do so, because `io::Error` doesn't implement them."
msgstr ""
"–á–º, —è–∫ –ø—Ä–∞–≤–∏–ª–æ, –∫–æ—Ä–∏—Å–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ `Clone` —ñ `Eq`, –¥–µ —Ü–µ –º–æ–∂–ª–∏–≤–æ, —â–æ–± "
"–ø–æ–ª–µ–≥—à–∏—Ç–∏ –∂–∏—Ç—Ç—è —Ç–µ—Å—Ç–∞–º —ñ —Å–ø–æ–∂–∏–≤–∞—á–∞–º –≤–∞—à–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏. –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –º–∏ –Ω–µ "
"–º–æ–∂–µ–º–æ –ª–µ–≥–∫–æ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ, –æ—Å–∫—ñ–ª—å–∫–∏ `io::Error` –Ω–µ —Ä–µ–∞–ª—ñ–∑—É—î —ó—Ö."

#: src/error-handling/deriving-error-enums.md:3
msgid ""
"The [thiserror](https://docs.rs/thiserror/) crate is a popular way to create "
"an error enum like we did on the previous page:"
msgstr ""
"–Ø—â–∏–∫ [thiserror](https://docs.rs/thiserror/) ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω–∏–π —Å–ø–æ—Å—ñ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ "
"–ø–µ—Ä–µ–ª—ñ–∫ –ø–æ–º–∏–ª–æ–∫, —è–∫ –º–∏ —Ä–æ–±–∏–ª–∏ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ:"

#: src/error-handling/deriving-error-enums.md:6
msgid ""
"```rust,editable,compile_fail\n"
"use std::{fs, io};\n"
"use std::io::Read;\n"
"use thiserror::Error;\n"
"\n"
"#[derive(Debug, Error)]\n"
"enum ReadUsernameError {\n"
"    #[error(\"Could not read: {0}\")]\n"
"    IoError(#[from] io::Error),\n"
"    #[error(\"Found no username in {0}\")]\n"
"    EmptyUsername(String),\n"
"}\n"
"\n"
"fn read_username(path: &str) -> Result<String, ReadUsernameError> {\n"
"    let mut username = String::new();\n"
"    fs::File::open(path)?.read_to_string(&mut username)?;\n"
"    if username.is_empty() {\n"
"        return Err(ReadUsernameError::EmptyUsername(String::from(path)));\n"
"    }\n"
"    Ok(username)\n"
"}\n"
"\n"
"fn main() {\n"
"    //fs::write(\"config.dat\", \"\").unwrap();\n"
"    match read_username(\"config.dat\") {\n"
"        Ok(username) => println!(\"Username: {username}\"),\n"
"        Err(err)     => println!(\"Error: {err}\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/deriving-error-enums.md:39
msgid ""
"`thiserror`'s derive macro automatically implements `std::error::Error`, and "
"optionally `Display` (if the `#[error(...)]` attributes are provided) and "
"`From` (if the `#[from]` attribute is added). It also works for structs."
msgstr ""
"–ü–æ—Ö—ñ–¥–Ω–∏–π –º–∞–∫—Ä–æ—Å `thiserror` –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–µ–∞–ª—ñ–∑—É—î `std::error::Error` —ñ "
"–¥–æ–¥–∞—Ç–∫–æ–≤–æ `Display` (—è–∫—â–æ –Ω–∞–¥–∞–Ω–æ –∞—Ç—Ä–∏–±—É—Ç–∏ `#[error(...)]` —ñ `From` (—è–∫—â–æ ` "
"–¥–æ–¥–∞–Ω–æ –∞—Ç—Ä–∏–±—É—Ç #[from]`). –¶–µ —Ç–∞–∫–æ–∂ –ø—Ä–∞—Ü—é—î –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä."

#: src/error-handling/deriving-error-enums.md:43
msgid "It doesn't affect your public API, which makes it good for libraries."
msgstr ""
"–¶–µ –Ω–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –≤–∞—à –ø—É–±–ª—ñ—á–Ω–∏–π API, —â–æ —Ä–æ–±–∏—Ç—å –π–æ–≥–æ –∫–æ—Ä–∏—Å–Ω–∏–º –¥–ª—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫."

#: src/error-handling/dynamic-errors.md:3
msgid ""
"Sometimes we want to allow any type of error to be returned without writing "
"our own enum covering all the different possibilities. `std::error::Error` "
"makes this easy."
msgstr ""
"–Ü–Ω–æ–¥—ñ –º–∏ —Ö–æ—á–µ–º–æ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏ –±–µ–∑ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è "
"–≤–ª–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ–ª—ñ–∫—É, —â–æ –æ—Ö–æ–ø–ª—é—î –≤—Å—ñ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ. `std::error::Error` "
"–ø–æ–ª–µ–≥—à—É—î —Ü–µ."

#: src/error-handling/dynamic-errors.md:6
msgid ""
"```rust,editable,compile_fail\n"
"use std::fs;\n"
"use std::io::Read;\n"
"use thiserror::Error;\n"
"use std::error::Error;\n"
"\n"
"#[derive(Clone, Debug, Eq, Error, PartialEq)]\n"
"#[error(\"Found no username in {0}\")]\n"
"struct EmptyUsernameError(String);\n"
"\n"
"fn read_username(path: &str) -> Result<String, Box<dyn Error>> {\n"
"    let mut username = String::new();\n"
"    fs::File::open(path)?.read_to_string(&mut username)?;\n"
"    if username.is_empty() {\n"
"        return Err(EmptyUsernameError(String::from(path)).into());\n"
"    }\n"
"    Ok(username)\n"
"}\n"
"\n"
"fn main() {\n"
"    //fs::write(\"config.dat\", \"\").unwrap();\n"
"    match read_username(\"config.dat\") {\n"
"        Ok(username) => println!(\"Username: {username}\"),\n"
"        Err(err)     => println!(\"Error: {err}\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/dynamic-errors.md:36
msgid ""
"This saves on code, but gives up the ability to cleanly handle different "
"error cases differently in the program. As such it's generally not a good "
"idea to use `Box<dyn Error>` in the public API of a library, but it can be a "
"good option in a program where you just want to display the error message "
"somewhere."
msgstr ""
"–¶–µ –µ–∫–æ–Ω–æ–º–∏—Ç—å –∫–æ–¥, –∞–ª–µ –ø–æ–∑–±–∞–≤–ª—è—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —á—ñ—Ç–∫–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ —Ä—ñ–∑–Ω—ñ –≤–∏–ø–∞–¥–∫–∏ "
"–ø–æ–º–∏–ª–æ–∫ –ø–æ-—Ä—ñ–∑–Ω–æ–º—É –≤ –ø—Ä–æ–≥—Ä–∞–º—ñ. –¢–∞–∫–∏–º —á–∏–Ω–æ–º, –∑–∞–∑–≤–∏—á–∞–π –Ω–µ –¥—É–∂–µ –≥–∞—Ä–Ω–∞ —ñ–¥–µ—è "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `Box<dyn Error>` —É –∑–∞–≥–∞–ª—å–Ω–æ–¥–æ—Å—Ç—É–ø–Ω–æ–º—É API –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏, –∞–ª–µ —Ü–µ "
"–º–æ–∂–µ –±—É—Ç–∏ —Ö–æ—Ä–æ—à–∏–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º —É –ø—Ä–æ–≥—Ä–∞–º—ñ, –¥–µ –≤–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç–µ –¥–µ—Å—å –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ "
"–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É."

#: src/error-handling/error-contexts.md:3
msgid ""
"The widely used [anyhow](https://docs.rs/anyhow/) crate can help you add "
"contextual information to your errors and allows you to have fewer custom "
"error types:"
msgstr ""
"–®–∏—Ä–æ–∫–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏–π —è—â–∏–∫ [anyhow](https://docs.rs/anyhow/) –º–æ–∂–µ "
"–¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –¥–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–æ –≤–∞—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ —ñ –¥–æ–∑–≤–æ–ª–∏—Ç—å –≤–∞–º "
"–º–∞—Ç–∏ –º–µ–Ω—à–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–º–∏–ª–æ–∫:"

#: src/error-handling/error-contexts.md:7
msgid ""
"```rust,editable,compile_fail\n"
"use std::{fs, io};\n"
"use std::io::Read;\n"
"use anyhow::{Context, Result, bail};\n"
"\n"
"fn read_username(path: &str) -> Result<String> {\n"
"    let mut username = String::with_capacity(100);\n"
"    fs::File::open(path)\n"
"        .with_context(|| format!(\"Failed to open {path}\"))?\n"
"        .read_to_string(&mut username)\n"
"        .context(\"Failed to read\")?;\n"
"    if username.is_empty() {\n"
"        bail!(\"Found no username in {path}\");\n"
"    }\n"
"    Ok(username)\n"
"}\n"
"\n"
"fn main() {\n"
"    //fs::write(\"config.dat\", \"\").unwrap();\n"
"    match read_username(\"config.dat\") {\n"
"        Ok(username) => println!(\"Username: {username}\"),\n"
"        Err(err)     => println!(\"Error: {err:?}\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/error-handling/error-contexts.md:35
msgid "`anyhow::Result<V>` is a type alias for `Result<V, anyhow::Error>`."
msgstr ""
"`anyhow::Result<V>` ‚Äî —Ü–µ –ø—Å–µ–≤–¥–æ–Ω—ñ–º —Ç–∏–ø—É –¥–ª—è `Result<V, anyhow::Error>`."

#: src/error-handling/error-contexts.md:36
msgid ""
"`anyhow::Error` is essentially a wrapper around `Box<dyn Error>`. As such "
"it's again generally not a good choice for the public API of a library, but "
"is widely used in applications."
msgstr ""
"`anyhow::Error` –ø–æ —Å—É—Ç—ñ —î –æ–±–≥–æ—Ä—Ç–∫–æ—é –Ω–∞–≤–∫–æ–ª–æ `Box<dyn Error>`. –¢–∞–∫–∏–º —á–∏–Ω–æ–º, "
"—Ü–µ –∑–Ω–æ–≤—É –∂ —Ç–∞–∫–∏, —è–∫ –ø—Ä–∞–≤–∏–ª–æ, –Ω–µ —î —Ö–æ—Ä–æ—à–∏–º –≤–∏–±–æ—Ä–æ–º –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ API "
"–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏, –∞–ª–µ —à–∏—Ä–æ–∫–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–∞—Ö."

#: src/error-handling/error-contexts.md:38
msgid ""
"Actual error type inside of it can be extracted for examination if necessary."
msgstr ""
"–§–∞–∫—Ç–∏—á–Ω–∏–π —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –Ω—å–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–ª—É—á–∏—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —è–∫—â–æ —Ü–µ "
"–Ω–µ–æ–±—Ö—ñ–¥–Ω–æ."

#: src/error-handling/error-contexts.md:39
msgid ""
"Functionality provided by `anyhow::Result<T>` may be familiar to Go "
"developers, as it provides similar usage patterns and ergonomics to `(T, "
"error)` from Go."
msgstr ""
"–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å, —è–∫—É –Ω–∞–¥–∞—î `anyhow::Result<T>`, –º–æ–∂–µ –±—É—Ç–∏ –∑–Ω–∞–π–æ–º–∞ "
"—Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º Go, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –ø–æ–¥—ñ–±–Ω—ñ –º–æ–¥–µ–ª—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–∞ "
"–µ—Ä–≥–æ–Ω–æ–º—ñ–∫—É –¥–æ `(T, error)` –≤—ñ–¥ Go."

#: src/testing.md:3
msgid "Rust and Cargo come with a simple unit test framework:"
msgstr "Rust —ñ Cargo –ø–æ—Å—Ç–∞—á–∞—é—Ç—å—Å—è –∑ –ø—Ä–æ—Å—Ç–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:"

#: src/testing.md:5
msgid "Unit tests are supported throughout your code."
msgstr "–ú–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —É –≤—Å—å–æ–º—É –∫–æ–¥—ñ."

#: src/testing.md:7
msgid "Integration tests are supported via the `tests/` directory."
msgstr "–¢–µ—Å—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥ `tests/`."

#: src/testing/unit-tests.md:3
msgid "Mark unit tests with `#[test]`:"
msgstr "–ü–æ–∑–Ω–∞—á–∞–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `#[test]`:"

#: src/testing/unit-tests.md:5
msgid ""
"```rust,editable,ignore\n"
"fn first_word(text: &str) -> &str {\n"
"    match text.find(' ') {\n"
"        Some(idx) => &text[..idx],\n"
"        None => &text,\n"
"    }\n"
"}\n"
"\n"
"#[test]\n"
"fn test_empty() {\n"
"    assert_eq!(first_word(\"\"), \"\");\n"
"}\n"
"\n"
"#[test]\n"
"fn test_single_word() {\n"
"    assert_eq!(first_word(\"Hello\"), \"Hello\");\n"
"}\n"
"\n"
"#[test]\n"
"fn test_multiple_words() {\n"
"    assert_eq!(first_word(\"Hello World\"), \"Hello\");\n"
"}\n"
"```"
msgstr ""

#: src/testing/unit-tests.md:29
msgid "Use `cargo test` to find and run the unit tests."
msgstr "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `cargo test`, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏."

#: src/testing/test-modules.md:3
msgid ""
"Unit tests are often put in a nested module (run tests on the [Playground]"
"(https://play.rust-lang.org/)):"
msgstr ""
"–ú–æ–¥—É–ª—å–Ω—ñ —Ç–µ—Å—Ç–∏ —á–∞—Å—Ç–æ —Ä–æ–∑–º—ñ—â—É—é—Ç—å —É –≤–∫–ª–∞–¥–µ–Ω–∏—Ö –º–æ–¥—É–ª—è—Ö (–≤–∏–∫–æ–Ω—É–π—Ç–µ —Ç–µ—Å—Ç–∏ –Ω–∞ "
"[Playground](https://play.rust-lang.org/)):"

#: src/testing/test-modules.md:6
msgid ""
"```rust,editable\n"
"fn helper(a: &str, b: &str) -> String {\n"
"    format!(\"{a} {b}\")\n"
"}\n"
"\n"
"pub fn main() {\n"
"    println!(\"{}\", helper(\"Hello\", \"World\"));\n"
"}\n"
"\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use super::*;\n"
"\n"
"    #[test]\n"
"    fn test_helper() {\n"
"        assert_eq!(helper(\"foo\", \"bar\"), \"foo bar\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/testing/test-modules.md:26
msgid "This lets you unit test private helpers."
msgstr "–¶–µ –¥–æ–∑–≤–æ–ª—è—î —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–º—ñ—á–Ω–∏–∫—ñ–≤."

#: src/testing/test-modules.md:27
msgid "The `#[cfg(test)]` attribute is only active when you run `cargo test`."
msgstr ""
"–ê—Ç—Ä–∏–±—É—Ç `#[cfg(test)]` –∞–∫—Ç–∏–≤–Ω–∏–π –ª–∏—à–µ —Ç–æ–¥—ñ, –∫–æ–ª–∏ –≤–∏ –∑–∞–ø—É—Å–∫–∞—î—Ç–µ `cargo test`."

#: src/testing/doc-tests.md:3
msgid "Rust has built-in support for documentation tests:"
msgstr "Rust –º–∞—î –≤–±—É–¥–æ–≤–∞–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó:"

#: src/testing/doc-tests.md:5
msgid ""
"```rust\n"
"/// Shortens a string to the given length.\n"
"///\n"
"/// ```\n"
"/// use playground::shorten_string;\n"
"/// assert_eq!(shorten_string(\"Hello World\", 5), \"Hello\");\n"
"/// assert_eq!(shorten_string(\"Hello World\", 20), \"Hello World\");\n"
"/// ```\n"
"pub fn shorten_string(s: &str, length: usize) -> &str {\n"
"    &s[..std::cmp::min(length, s.len())]\n"
"}\n"
"```"
msgstr ""

#: src/testing/doc-tests.md:18
msgid "Code blocks in `///` comments are automatically seen as Rust code."
msgstr "–ë–ª–æ–∫–∏ –∫–æ–¥—É –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö `///` –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–ø—Ä–∏–π–º–∞—é—Ç—å—Å—è —è–∫ –∫–æ–¥ Rust."

#: src/testing/doc-tests.md:19
msgid "The code will be compiled and executed as part of `cargo test`."
msgstr "–ö–æ–¥ –±—É–¥–µ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–æ —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–æ —è–∫ —á–∞—Å—Ç–∏–Ω—É `cargo test`."

#: src/testing/doc-tests.md:20
msgid ""
"Test the above code on the [Rust Playground](https://play.rust-lang.org/?"
"version=stable&mode=debug&edition=2021&gist=3ce2ad13ea1302f6572cb15cd96becf0)."
msgstr ""
"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω–∏–π –≤–∏—â–µ –∫–æ–¥ –Ω–∞ [Rust Playground](https://play.rust-lang."
"org/?"
"version=stable&mode=debug&edition=2021&gist=3ce2ad13ea1302f6572cb15cd96becf0)."

#: src/testing/integration-tests.md:3
msgid "If you want to test your library as a client, use an integration test."
msgstr ""
"–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—é –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É —è–∫ –∫–ª—ñ—î–Ω—Ç, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è "
"—ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω–∏–º —Ç–µ—Å—Ç–æ–º."

#: src/testing/integration-tests.md:5
msgid "Create a `.rs` file under `tests/`:"
msgstr "–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª `.rs` —É `tests/`:"

#: src/testing/integration-tests.md:7
msgid ""
"```rust,ignore\n"
"use my_library::init;\n"
"\n"
"#[test]\n"
"fn test_init() {\n"
"    assert!(init().is_ok());\n"
"}\n"
"```"
msgstr ""

#: src/testing/integration-tests.md:16
msgid "These tests only have access to the public API of your crate."
msgstr "–¶—ñ —Ç–µ—Å—Ç–∏ –º–∞—é—Ç—å –¥–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–æ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ API –≤–∞—à–æ–≥–æ —è—â–∏–∫–∞."

#: src/testing/useful-crates.md:1
msgid "Useful crates for writing tests"
msgstr "–ö–æ—Ä–∏—Å–Ω—ñ —è—â–∏–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤"

#: src/testing/useful-crates.md:3
msgid "Rust comes with only basic support for writing tests."
msgstr "Rust –ø–æ—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è –ª–∏—à–µ –∑ –±–∞–∑–æ–≤–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤."

#: src/testing/useful-crates.md:5
msgid "Here are some additional crates which we recommend for writing tests:"
msgstr ""
"–û—Å—å –∫—ñ–ª—å–∫–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —è—â–∏–∫—ñ–≤, —è–∫—ñ –º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤:"

#: src/testing/useful-crates.md:7
msgid ""
"[googletest](https://docs.rs/googletest): Comprehensive test assertion "
"library in the tradition of GoogleTest for C++."
msgstr ""
"[googletest](https://docs.rs/googletest): –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö "
"—Ç–≤–µ—Ä–¥–∂–µ–Ω—å —É —Ç—Ä–∞–¥–∏—Ü—ñ—è—Ö GoogleTest –¥–ª—è C++."

#: src/testing/useful-crates.md:8
msgid "[proptest](https://docs.rs/proptest): Property-based testing for Rust."
msgstr ""
"[proptest](https://docs.rs/proptest): —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –¥–ª—è "
"Rust."

#: src/testing/useful-crates.md:9
msgid ""
"[rstest](https://docs.rs/rstest): Support for fixtures and parameterised "
"tests."
msgstr ""
"[rstest](https://docs.rs/rstest): –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ñ—ñ–∫—Å—Ç—É—Ä —ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö "
"—Ç–µ—Å—Ç—ñ–≤."

#: src/unsafe.md:3
msgid "The Rust language has two parts:"
msgstr "–ú–æ–≤–∞ Rust —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –¥–≤–æ—Ö —á–∞—Å—Ç–∏–Ω:"

#: src/unsafe.md:5
msgid "**Safe Rust:** memory safe, no undefined behavior possible."
msgstr "**Safe Rust:** –±–µ–∑–ø–µ–∫–∞ –ø–∞–º‚Äô—è—Ç—ñ, –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –Ω–µ–º–æ–∂–ª–∏–≤–∞."

#: src/unsafe.md:6
msgid ""
"**Unsafe Rust:** can trigger undefined behavior if preconditions are "
"violated."
msgstr ""
"**–ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π Rust:** –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É, —è–∫—â–æ –ø–æ—Ä—É—à—É—é—Ç—å—Å—è "
"–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —É–º–æ–≤–∏."

#: src/unsafe.md:8
msgid ""
"We will be seeing mostly safe Rust in this course, but it's important to "
"know what Unsafe Rust is."
msgstr ""
"–£ —Ü—å–æ–º—É –∫—É—Ä—Å—ñ –º–∏ –ø–æ–±–∞—á–∏–º–æ –ø–µ—Ä–µ–≤–∞–∂–Ω–æ –±–µ–∑–ø–µ—á–Ω–∏–π Rust, –∞–ª–µ –≤–∞–∂–ª–∏–≤–æ –∑–Ω–∞—Ç–∏, —â–æ "
"—Ç–∞–∫–µ Unsafe Rust."

#: src/unsafe.md:11
msgid ""
"Unsafe code is usually small and isolated, and its correctness should be "
"carefully documented. It is usually wrapped in a safe abstraction layer."
msgstr ""
"–ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π –∫–æ–¥ –∑–∞–∑–≤–∏—á–∞–π –Ω–µ–≤–µ–ª–∏–∫–∏–π —ñ —ñ–∑–æ–ª—å–æ–≤–∞–Ω–∏–π, —ñ –π–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Å–ª—ñ–¥ "
"—Ä–µ—Ç–µ–ª—å–Ω–æ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç—É–≤–∞—Ç–∏. –ó–∞–∑–≤–∏—á–∞–π –≤—ñ–Ω –∑–∞–≥–æ—Ä–Ω—É—Ç–∏–π —É –±–µ–∑–ø–µ—á–Ω–∏–π —à–∞—Ä –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—ó."

#: src/unsafe.md:14
msgid "Unsafe Rust gives you access to five new capabilities:"
msgstr "Unsafe Rust –¥–∞—î –≤–∞–º –¥–æ—Å—Ç—É–ø –¥–æ –ø‚Äô—è—Ç–∏ –Ω–æ–≤–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π:"

#: src/unsafe.md:16
msgid "Dereference raw pointers."
msgstr "–†–æ–∑—ñ–º–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–∫–∞–∂—á–∏–∫—ñ–≤."

#: src/unsafe.md:17
msgid "Access or modify mutable static variables."
msgstr "–î–æ—Å—Ç—É–ø –∞–±–æ –∑–º—ñ–Ω–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö."

#: src/unsafe.md:18
msgid "Access `union` fields."
msgstr "–î–æ—Å—Ç—É–ø –¥–æ –ø–æ–ª—ñ–≤ `union`."

#: src/unsafe.md:19
msgid "Call `unsafe` functions, including `extern` functions."
msgstr "–í–∏–∫–ª–∏–∫–∞—Ç–∏ `–Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ` —Ñ—É–Ω–∫—Ü—ñ—ó, –≤–∫–ª—é—á–∞—é—á–∏ `–∑–æ–≤–Ω—ñ—à–Ω—ñ` —Ñ—É–Ω–∫—Ü—ñ—ó."

#: src/unsafe.md:20
msgid "Implement `unsafe` traits."
msgstr "–í–ø—Ä–æ–≤–∞–¥–∏—Ç–∏ ¬´–Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ¬ª —Ä–∏—Å–∏."

#: src/unsafe.md:22
msgid ""
"We will briefly cover unsafe capabilities next. For full details, please see "
"[Chapter 19.1 in the Rust Book](https://doc.rust-lang.org/book/ch19-01-"
"unsafe-rust.html) and the [Rustonomicon](https://doc.rust-lang.org/nomicon/)."
msgstr ""
"–î–∞–ª—ñ –º–∏ –∫–æ—Ä–æ—Ç–∫–æ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ. –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω—É "
"—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ [—Ä–æ–∑–¥—ñ–ª 19.1 —É –∫–Ω–∏–∑—ñ Rust](https://doc.rust-lang.org/"
"book/ch19-01-unsafe-rust.html) —ñ [Rustonomicon](https://doc .rust-lang.org/"
"nomicon/)."

#: src/unsafe.md:28
msgid ""
"Unsafe Rust does not mean the code is incorrect. It means that developers "
"have turned off the compiler safety features and have to write correct code "
"by themselves. It means the compiler no longer enforces Rust's memory-safety "
"rules."
msgstr ""
"–ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π Rust –Ω–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –∫–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ "
"–≤–∏–º–∫–Ω—É–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑–ø–µ–∫–∏ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞ —ñ –ø–æ–≤–∏–Ω–Ω—ñ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –ø–∏—Å–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π "
"–∫–æ–¥. –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –±—ñ–ª—å—à–µ –Ω–µ –≤–∏–∫–æ–Ω—É—î –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–ø–µ–∫–∏ –ø–∞–º‚Äô—è—Ç—ñ "
"Rust."

#: src/unsafe/raw-pointers.md:3
msgid "Creating pointers is safe, but dereferencing them requires `unsafe`:"
msgstr ""
"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–∫–∞–∂—á–∏–∫—ñ–≤ —î –±–µ–∑–ø–µ—á–Ω–∏–º, –∞–ª–µ –¥–ª—è —ó—Ö —Ä–æ–∑—ñ–º–µ–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ `unsafe`:"

#: src/unsafe/raw-pointers.md:5
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let mut num = 5;\n"
"\n"
"    let r1 = &mut num as *mut i32;\n"
"    let r2 = r1 as *const i32;\n"
"\n"
"    // Safe because r1 and r2 were obtained from references and so are\n"
"    // guaranteed to be non-null and properly aligned, the objects "
"underlying\n"
"    // the references from which they were obtained are live throughout the\n"
"    // whole unsafe block, and they are not accessed either through the\n"
"    // references or concurrently through any other pointers.\n"
"    unsafe {\n"
"        println!(\"r1 is: {}\", *r1);\n"
"        *r1 = 10;\n"
"        println!(\"r2 is: {}\", *r2);\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/unsafe/raw-pointers.md:27
msgid ""
"It is good practice (and required by the Android Rust style guide) to write "
"a comment for each `unsafe` block explaining how the code inside it "
"satisfies the safety requirements of the unsafe operations it is doing."
msgstr ""
"–•–æ—Ä–æ—à–æ—é –ø—Ä–∞–∫—Ç–∏–∫–æ—é —î (—ñ –≤–∏–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ—Å—ñ–±–Ω–∏–∫–æ–º –∑—ñ —Å—Ç–∏–ª—é Android Rust) –ø–∏—Å–∞—Ç–∏ "
"–∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∫–æ–∂–Ω–æ–≥–æ `–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ` –±–ª–æ–∫—É, –ø–æ—è—Å–Ω—é—é—á–∏, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –∫–æ–¥ —É –Ω—å–æ–º—É "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∏–º–æ–≥–∞–º –±–µ–∑–ø–µ–∫–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π, —è–∫—ñ –≤—ñ–Ω –≤–∏–∫–æ–Ω—É—î."

#: src/unsafe/raw-pointers.md:31
msgid ""
"In the case of pointer dereferences, this means that the pointers must be "
"[_valid_](https://doc.rust-lang.org/std/ptr/index.html#safety), i.e.:"
msgstr ""
"–£ –≤–∏–ø–∞–¥–∫—É —Ä–æ–∑—ñ–º–µ–Ω—É–≤–∞–Ω—å –ø–æ–∫–∞–∂—á–∏–∫—ñ–≤ —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –ø–æ–∫–∞–∂—á–∏–∫–∏ –º–∞—é—Ç—å –±—É—Ç–∏ "
"[_valid_](https://doc.rust-lang.org/std/ptr/index.html#safety), —Ç–æ–±—Ç–æ:"

#: src/unsafe/raw-pointers.md:34
msgid "The pointer must be non-null."
msgstr "–ü–æ–∫–∞–∂—á–∏–∫ –º–∞—î –±—É—Ç–∏ –Ω–µ–Ω—É–ª—å–æ–≤–∏–º."

#: src/unsafe/raw-pointers.md:35
msgid ""
"The pointer must be _dereferenceable_ (within the bounds of a single "
"allocated object)."
msgstr "–ü–æ–∫–∞–∂—á–∏–∫ –º–∞—î –±—É—Ç–∏ _—Ä–æ–∑—ñ–º–µ–Ω–æ–≤–∞–Ω–∏–º_ (—É –º–µ–∂–∞—Ö –æ–¥–Ω–æ–≥–æ –≤–∏–¥—ñ–ª–µ–Ω–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞)."

#: src/unsafe/raw-pointers.md:36
msgid "The object must not have been deallocated."
msgstr "–û–±‚Äô—î–∫—Ç –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω–∏–π."

#: src/unsafe/raw-pointers.md:37
msgid "There must not be concurrent accesses to the same location."
msgstr "–ù–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –¥–æ—Å—Ç—É–ø—ñ–≤ –¥–æ —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ –º—ñ—Å—Ü—è."

#: src/unsafe/raw-pointers.md:38
msgid ""
"If the pointer was obtained by casting a reference, the underlying object "
"must be live and no reference may be used to access the memory."
msgstr ""
"–Ø–∫—â–æ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —à–ª—è—Ö–æ–º –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –±–∞–∑–æ–≤–∏–π –æ–±‚Äô—î–∫—Ç –º–∞—î "
"–±—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º, —ñ –∂–æ–¥–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ "
"–ø–∞–º‚Äô—è—Ç—ñ."

#: src/unsafe/raw-pointers.md:41
msgid "In most cases the pointer must also be properly aligned."
msgstr "–£ –±—ñ–ª—å—à–æ—Å—Ç—ñ –≤–∏–ø–∞–¥–∫—ñ–≤ –≤–∫–∞–∑—ñ–≤–Ω–∏–∫ —Ç–∞–∫–æ–∂ –º–∞—î –±—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏—Ä—ñ–≤–Ω—è–Ω–∏–π."

#: src/unsafe/mutable-static-variables.md:3
msgid "It is safe to read an immutable static variable:"
msgstr "–ß–∏—Ç–∞—Ç–∏ –Ω–µ–∑–º—ñ–Ω–Ω—É —Å—Ç–∞—Ç–∏—á–Ω—É –∑–º—ñ–Ω–Ω—É –±–µ–∑–ø–µ—á–Ω–æ:"

#: src/unsafe/mutable-static-variables.md:5
msgid ""
"```rust,editable\n"
"static HELLO_WORLD: &str = \"Hello, world!\";\n"
"\n"
"fn main() {\n"
"    println!(\"HELLO_WORLD: {HELLO_WORLD}\");\n"
"}\n"
"```"
msgstr ""

#: src/unsafe/mutable-static-variables.md:13
msgid ""
"However, since data races can occur, it is unsafe to read and write mutable "
"static variables:"
msgstr ""
"–û–¥–Ω–∞–∫, –æ—Å–∫—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≥–æ–Ω–∏ –¥–∞–Ω–∏—Ö –º–æ–∂—É—Ç—å –≤—ñ–¥–±—É–≤–∞—Ç–∏—Å—è, –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ —á–∏—Ç–∞—Ç–∏ —Ç–∞ "
"–∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ:"

#: src/unsafe/mutable-static-variables.md:16
msgid ""
"```rust,editable\n"
"static mut COUNTER: u32 = 0;\n"
"\n"
"fn add_to_counter(inc: u32) {\n"
"    unsafe { COUNTER += inc; }  // Potential data race!\n"
"}\n"
"\n"
"fn main() {\n"
"    add_to_counter(42);\n"
"\n"
"    unsafe { println!(\"COUNTER: {COUNTER}\"); }  // Potential data race!\n"
"}\n"
"```"
msgstr ""

#: src/unsafe/mutable-static-variables.md:32
msgid ""
"Using a mutable static is generally a bad idea, but there are some cases "
"where it might make sense in low-level `no_std` code, such as implementing a "
"heap allocator or working with some C APIs."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏–∫–∏, —è–∫ –ø—Ä–∞–≤–∏–ª–æ, –ø–æ–≥–∞–Ω–∞ —ñ–¥–µ—è, –∞–ª–µ —î –¥–µ—è–∫—ñ –≤–∏–ø–∞–¥–∫–∏, "
"–∫–æ–ª–∏ —Ü–µ –º–æ–∂–µ –º–∞—Ç–∏ —Å–µ–Ω—Å —É –Ω–∏–∑—å–∫–æ—Ä—ñ–≤–Ω–µ–≤–æ–º—É –∫–æ–¥—ñ `no_std`, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è "
"—Ä–æ–∑–ø–æ–¥—ñ–ª—é–≤–∞—á–∞ –∫—É–ø–∏ –∞–±–æ —Ä–æ–±–æ—Ç–∞ –∑ –¥–µ—è–∫–∏–º–∏ API C."

#: src/unsafe/unions.md:3
msgid "Unions are like enums, but you need to track the active field yourself:"
msgstr ""
"–û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è —Å—Ö–æ–∂—ñ –Ω–∞ enum, –∞–ª–µ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–µ "
"–ø–æ–ª–µ:"

#: src/unsafe/unions.md:5
msgid ""
"```rust,editable\n"
"#[repr(C)]\n"
"union MyUnion {\n"
"    i: u8,\n"
"    b: bool,\n"
"}\n"
"\n"
"fn main() {\n"
"    let u = MyUnion { i: 42 };\n"
"    println!(\"int: {}\", unsafe { u.i });\n"
"    println!(\"bool: {}\", unsafe { u.b });  // Undefined behavior!\n"
"}\n"
"```"
msgstr ""

#: src/unsafe/unions.md:21
msgid ""
"Unions are very rarely needed in Rust as you can usually use an enum. They "
"are occasionally needed for interacting with C library APIs."
msgstr ""
"–û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è –¥—É–∂–µ —Ä—ñ–¥–∫–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤ Rust, –æ—Å–∫—ñ–ª—å–∫–∏ –∑–∞–∑–≤–∏—á–∞–π –º–æ–∂–Ω–∞ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫. –Ü–Ω–æ–¥—ñ –≤–æ–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ API –±—ñ–±–ª—ñ–æ—Ç–µ–∫ C."

#: src/unsafe/unions.md:24
msgid ""
"If you just want to reinterpret bytes as a different type, you probably want "
"[`std::mem::transmute`](https://doc.rust-lang.org/stable/std/mem/fn."
"transmute.html) or a safe wrapper such as the [`zerocopy`](https://crates.io/"
"crates/zerocopy) crate."
msgstr ""
"–Ø–∫—â–æ –≤–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–æ—Å–º–∏—Å–ª–∏—Ç–∏ –±–∞–π—Ç–∏ —è–∫ —ñ–Ω—à–∏–π —Ç–∏–ø, –≤–∞–º, –º–∞–±—É—Ç—å, "
"–∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è [`std::mem::transmute`](https://doc.rust-lang.org/stable/std/mem/"
"fn.transmute.html ) –∞–±–æ –±–µ–∑–ø–µ—á–Ω—É –æ–±–æ–ª–æ–Ω–∫—É, —è–∫-–æ—Ç —è—â–∏–∫ [`zerocopy`](https://"
"crates.io/crates/zerocopy)."

#: src/unsafe/calling-unsafe-functions.md:3
msgid ""
"A function or method can be marked `unsafe` if it has extra preconditions "
"you must uphold to avoid undefined behaviour:"
msgstr ""
"–§—É–Ω–∫—Ü—ñ—é –∞–±–æ –º–µ—Ç–æ–¥ –º–æ–∂–Ω–∞ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —è–∫ `–Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ`, —è–∫—â–æ –≤–æ–Ω–∏ –º–∞—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ "
"–ø–µ—Ä–µ–¥—É–º–æ–≤–∏, —è–∫—ñ –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏:"

#: src/unsafe/calling-unsafe-functions.md:6
msgid ""
"```rust,editable\n"
"fn main() {\n"
"    let emojis = \"üóª‚ààüåè\";\n"
"\n"
"    // Safe because the indices are in the correct order, within the bounds "
"of\n"
"    // the string slice, and lie on UTF-8 sequence boundaries.\n"
"    unsafe {\n"
"        println!(\"emoji: {}\", emojis.get_unchecked(0..4));\n"
"        println!(\"emoji: {}\", emojis.get_unchecked(4..7));\n"
"        println!(\"emoji: {}\", emojis.get_unchecked(7..11));\n"
"    }\n"
"\n"
"    println!(\"char count: {}\", count_chars(unsafe { emojis."
"get_unchecked(0..7) }));\n"
"\n"
"    // Not upholding the UTF-8 encoding requirement breaks memory safety!\n"
"    // println!(\"emoji: {}\", unsafe { emojis.get_unchecked(0..3) });\n"
"    // println!(\"char count: {}\", count_chars(unsafe { emojis."
"get_unchecked(0..3) }));\n"
"}\n"
"\n"
"fn count_chars(s: &str) -> usize {\n"
"    s.chars().map(|_| 1).sum()\n"
"}\n"
"```"
msgstr ""

#: src/unsafe/writing-unsafe-functions.md:3
msgid ""
"You can mark your own functions as `unsafe` if they require particular "
"conditions to avoid undefined behaviour."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –≤–ª–∞—Å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —è–∫ ¬´–Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ¬ª, —è–∫—â–æ –≤–æ–Ω–∏ –≤–∏–º–∞–≥–∞—é—Ç—å "
"–ø–µ–≤–Ω–∏—Ö —É–º–æ–≤, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏."

#: src/unsafe/writing-unsafe-functions.md:6
msgid ""
"```rust,editable\n"
"/// Swaps the values pointed to by the given pointers.\n"
"///\n"
"/// # Safety\n"
"///\n"
"/// The pointers must be valid and properly aligned.\n"
"unsafe fn swap(a: *mut u8, b: *mut u8) {\n"
"    let temp = *a;\n"
"    *a = *b;\n"
"    *b = temp;\n"
"}\n"
"\n"
"fn main() {\n"
"    let mut a = 42;\n"
"    let mut b = 66;\n"
"\n"
"    // Safe because ...\n"
"    unsafe {\n"
"        swap(&mut a, &mut b);\n"
"    }\n"
"\n"
"    println!(\"a = {}, b = {}\", a, b);\n"
"}\n"
"```"
msgstr ""

#: src/unsafe/writing-unsafe-functions.md:33
msgid ""
"We wouldn't actually use pointers for this because it can be done safely "
"with references."
msgstr ""
"–ù–∞—Å–ø—Ä–∞–≤–¥—ñ –º–∏ –± –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –ø–æ–∫–∞–∂—á–∏–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ, —Ç–æ–º—É —â–æ —Ü–µ –º–æ–∂–Ω–∞ "
"–±–µ–∑–ø–µ—á–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ—Å–∏–ª–∞–Ω—å."

#: src/unsafe/writing-unsafe-functions.md:35
msgid ""
"Note that unsafe code is allowed within an unsafe function without an "
"`unsafe` block. We can prohibit this with `#[deny(unsafe_op_in_unsafe_fn)]`. "
"Try adding it and see what happens."
msgstr ""
"–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π –∫–æ–¥ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —É –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ–π —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ –±–ª–æ–∫—É "
"`unsafe`. –ú–∏ –º–æ–∂–µ–º–æ –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ —Ü–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
"`#[deny(unsafe_op_in_unsafe_fn)]`. –°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –π–æ–≥–æ —Ç–∞ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è, —â–æ "
"–≤–∏–π–¥–µ."

#: src/unsafe/extern-functions.md:1
msgid "Calling External Code"
msgstr "–í–∏–∫–ª–∏–∫ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∫–æ–¥—É"

#: src/unsafe/extern-functions.md:3
msgid ""
"Functions from other languages might violate the guarantees of Rust. Calling "
"them is thus unsafe:"
msgstr ""
"–§—É–Ω–∫—Ü—ñ—ó –∑ —ñ–Ω—à–∏—Ö –º–æ–≤ –º–æ–∂—É—Ç—å –ø–æ—Ä—É—à—É–≤–∞—Ç–∏ –≥–∞—Ä–∞–Ω—Ç—ñ—ó Rust. –¢–æ–º—É –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —ó—Ö "
"–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ:"

#: src/unsafe/extern-functions.md:6
msgid ""
"```rust,editable\n"
"extern \"C\" {\n"
"    fn abs(input: i32) -> i32;\n"
"}\n"
"\n"
"fn main() {\n"
"    unsafe {\n"
"        // Undefined behavior if abs misbehaves.\n"
"        println!(\"Absolute value of -3 according to C: {}\", abs(-3));\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/unsafe/extern-functions.md:21
msgid ""
"This is usually only a problem for extern functions which do things with "
"pointers which might violate Rust's memory model, but in general any C "
"function might have undefined behaviour under any arbitrary circumstances."
msgstr ""
"–ó–∞–∑–≤–∏—á–∞–π —Ü–µ –ø—Ä–æ–±–ª–µ–º–∞ –ª–∏—à–µ –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å –¥—ñ—ó –∑ "
"–ø–æ–∫–∞–∂—á–∏–∫–∞–º–∏, —è–∫—ñ –º–æ–∂—É—Ç—å –ø–æ—Ä—É—à—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—å –ø–∞–º‚Äô—è—Ç—ñ Rust, –∞–ª–µ –∑–∞–≥–∞–ª–æ–º –±—É–¥—å-—è–∫–∞ "
"—Ñ—É–Ω–∫—Ü—ñ—è C –º–æ–∂–µ –º–∞—Ç–∏ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É –∑–∞ –±—É–¥—å-—è–∫–∏—Ö –¥–æ–≤—ñ–ª—å–Ω–∏—Ö –æ–±—Å—Ç–∞–≤–∏–Ω."

#: src/unsafe/extern-functions.md:25
msgid ""
"The `\"C\"` in this example is the ABI; [other ABIs are available too]"
"(https://doc.rust-lang.org/reference/items/external-blocks.html)."
msgstr ""

#: src/unsafe/unsafe-traits.md:3
msgid ""
"Like with functions, you can mark a trait as `unsafe` if the implementation "
"must guarantee particular conditions to avoid undefined behaviour."
msgstr ""

#: src/unsafe/unsafe-traits.md:6
msgid ""
"For example, the `zerocopy` crate has an unsafe trait that looks [something "
"like this](https://docs.rs/zerocopy/latest/zerocopy/trait.AsBytes.html):"
msgstr ""
"–ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è—â–∏–∫ `zerocopy` –º–∞—î –Ω–µ–±–µ–∑–ø–µ—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å, —è–∫–∞ –≤–∏–≥–ª—è–¥–∞—î "
"[–ø—Ä–∏–±–ª–∏–∑–Ω–æ —Ç–∞–∫](https://docs.rs/zerocopy/latest/zerocopy/trait.AsBytes.html):"

#: src/unsafe/unsafe-traits.md:9
msgid ""
"```rust,editable\n"
"use std::mem::size_of_val;\n"
"use std::slice;\n"
"\n"
"/// ...\n"
"/// # Safety\n"
"/// The type must have a defined representation and no padding.\n"
"pub unsafe trait AsBytes {\n"
"    fn as_bytes(&self) -> &[u8] {\n"
"        unsafe {\n"
"            slice::from_raw_parts(self as *const Self as *const u8, "
"size_of_val(self))\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// Safe because u32 has a defined representation and no padding.\n"
"unsafe impl AsBytes for u32 {}\n"
"```"
msgstr ""

#: src/unsafe/unsafe-traits.md:30
msgid ""
"There should be a `# Safety` section on the Rustdoc for the trait explaining "
"the requirements for the trait to be safely implemented."
msgstr ""
"–£ Rustdoc –º–∞—î –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª `# Safety` –¥–ª—è –æ–∑–Ω–∞–∫–∏, —â–æ –ø–æ—è—Å–Ω—é—î –≤–∏–º–æ–≥–∏ –¥–æ "
"–±–µ–∑–ø–µ—á–Ω–æ—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ñ—É–Ω–∫—Ü—ñ—ó."

#: src/unsafe/unsafe-traits.md:33
msgid ""
"The actual safety section for `AsBytes` is rather longer and more "
"complicated."
msgstr "–§–∞–∫—Ç–∏—á–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –±–µ–∑–ø–µ–∫–∏ –¥–ª—è `AsBytes` –¥–æ–≤—à–∏–π —ñ —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π."

#: src/unsafe/unsafe-traits.md:35
msgid "The built-in `Send` and `Sync` traits are unsafe."
msgstr "–í–±—É–¥–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ¬´–ù–∞–¥—ñ—Å–ª–∞—Ç–∏¬ª —Ç–∞ ¬´–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏¬ª —î –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º–∏."

#: src/exercises/day-3/afternoon.md:1
msgid "Day 3: Afternoon Exercises"
msgstr "–î–µ–Ω—å 3: –ø—ñ—Å–ª—è–æ–±—ñ–¥–Ω—ñ –≤–ø—Ä–∞–≤–∏"

#: src/exercises/day-3/afternoon.md:3
msgid "Let us build a safe wrapper for reading directory content!"
msgstr "–î–∞–≤–∞–π—Ç–µ —Å—Ç–≤–æ—Ä–∏–º–æ –±–µ–∑–ø–µ—á–Ω—É –æ–±–æ–ª–æ–Ω–∫—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è –≤–º—ñ—Å—Ç—É –∫–∞—Ç–∞–ª–æ–≥—É!"

#: src/exercises/day-3/afternoon.md:5
msgid ""
"For this exercise, we suggest using a local dev environment instead of the "
"Playground. This will allow you to run your binary on your own machine."
msgstr ""
"–î–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –º–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ "
"–∑–∞–º—ñ—Å—Ç—å Playground. –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –≤–∞–º –∑–∞–ø—É—Å–∫–∞—Ç–∏ –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª –Ω–∞ –≤–∞—à—ñ–π –º–∞—à–∏–Ω—ñ."

#: src/exercises/day-3/afternoon.md:8
msgid ""
"To get started, follow the [running locally](../../cargo/running-locally.md) "
"instructions."
msgstr ""
"–©–æ–± –ø–æ—á–∞—Ç–∏, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π [running locally](../../cargo/running-"
"locally.md)."

#: src/exercises/day-3/afternoon.md:14
msgid ""
"After looking at the exercise, you can look at the [solution](solutions-"
"afternoon.md) provided."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—É–≤—à–∏ –≤–ø—Ä–∞–≤—É, –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–¥–∞–Ω–µ [—Ä—ñ—à–µ–Ω–Ω—è](solutions-"
"afternoon.md)."

#: src/exercises/day-3/safe-ffi-wrapper.md:3
msgid ""
"Rust has great support for calling functions through a _foreign function "
"interface_ (FFI). We will use this to build a safe wrapper for the `libc` "
"functions you would use from C to read the filenames of a directory."
msgstr ""
"Rust —á—É–¥–æ–≤–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ–π —á–µ—Ä–µ–∑ _—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π_ "
"(FFI). –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —Ü–µ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ—ó –æ–±–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–π "
"`libc`, —è–∫—ñ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ –± —ñ–∑ C –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —ñ–º–µ–Ω —Ñ–∞–π–ª—ñ–≤ –∫–∞—Ç–∞–ª–æ–≥—É."

#: src/exercises/day-3/safe-ffi-wrapper.md:7
msgid "You will want to consult the manual pages:"
msgstr "–í–∏ –∑–∞—Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ—Å—ñ–±–Ω–∏–∫–∞:"

#: src/exercises/day-3/safe-ffi-wrapper.md:9
msgid "[`opendir(3)`](https://man7.org/linux/man-pages/man3/opendir.3.html)"
msgstr "[`opendir(3)`](https://man7.org/linux/man-pages/man3/opendir.3.html)"

#: src/exercises/day-3/safe-ffi-wrapper.md:10
msgid "[`readdir(3)`](https://man7.org/linux/man-pages/man3/readdir.3.html)"
msgstr "[`readdir(3)`](https://man7.org/linux/man-pages/man3/readdir.3.html)"

#: src/exercises/day-3/safe-ffi-wrapper.md:11
msgid "[`closedir(3)`](https://man7.org/linux/man-pages/man3/closedir.3.html)"
msgstr "[`closedir(3)`](https://man7.org/linux/man-pages/man3/closedir.3.html)"

#: src/exercises/day-3/safe-ffi-wrapper.md:13
msgid ""
"You will also want to browse the [`std::ffi`](https://doc.rust-lang.org/std/"
"ffi/) module. There you find a number of string types which you need for the "
"exercise:"
msgstr ""
"–í–∏ —Ç–∞–∫–æ–∂ –∑–∞—Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ–¥—É–ª—å [`std::ffi`](https://doc.rust-lang.org/"
"std/ffi/). –¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ —Ä—è–¥ —Ç–∏–ø—ñ–≤ —Ä—è–¥–∫—ñ–≤, —è–∫—ñ –≤–∞–º –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è –¥–ª—è –≤–ø—Ä–∞–≤–∏:"

#: src/exercises/day-3/safe-ffi-wrapper.md:16
msgid "Encoding"
msgstr "–ö–æ–¥—É–≤–∞–Ω–Ω—è"

#: src/exercises/day-3/safe-ffi-wrapper.md:16
msgid "Use"
msgstr "–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"

#: src/exercises/day-3/safe-ffi-wrapper.md:18
msgid ""
"[`str`](https://doc.rust-lang.org/std/primitive.str.html) and [`String`]"
"(https://doc.rust-lang.org/std/string/struct.String.html)"
msgstr ""
"[`str`](https://doc.rust-lang.org/std/primitive.str.html) —ñ [`String`]"
"(https://doc.rust-lang.org/std/string/struct .String.html)"

#: src/exercises/day-3/safe-ffi-wrapper.md:18
msgid "UTF-8"
msgstr "UTF-8"

#: src/exercises/day-3/safe-ffi-wrapper.md:18
msgid "Text processing in Rust"
msgstr "–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –≤ Rust"

#: src/exercises/day-3/safe-ffi-wrapper.md:19
msgid ""
"[`CStr`](https://doc.rust-lang.org/std/ffi/struct.CStr.html) and [`CString`]"
"(https://doc.rust-lang.org/std/ffi/struct.CString.html)"
msgstr ""
"[`CStr`](https://doc.rust-lang.org/std/ffi/struct.CStr.html) —ñ [`CString`]"
"(https://doc.rust-lang.org/std/ffi /struct.CString.html)"

#: src/exercises/day-3/safe-ffi-wrapper.md:19
msgid "NUL-terminated"
msgstr "NUL-–ø—Ä–∏–ø–∏–Ω–µ–Ω–æ"

#: src/exercises/day-3/safe-ffi-wrapper.md:19
msgid "Communicating with C functions"
msgstr "–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ C"

#: src/exercises/day-3/safe-ffi-wrapper.md:20
msgid ""
"[`OsStr`](https://doc.rust-lang.org/std/ffi/struct.OsStr.html) and "
"[`OsString`](https://doc.rust-lang.org/std/ffi/struct.OsString.html)"
msgstr ""
"[`OsStr`](https://doc.rust-lang.org/std/ffi/struct.OsStr.html) —ñ [`OsString`]"
"(https://doc.rust-lang.org/std/ffi /struct.OsString.html)"

#: src/exercises/day-3/safe-ffi-wrapper.md:20
msgid "OS-specific"
msgstr "—Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–ª—è –û–°"

#: src/exercises/day-3/safe-ffi-wrapper.md:20
msgid "Communicating with the OS"
msgstr "–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –û–°"

#: src/exercises/day-3/safe-ffi-wrapper.md:22
msgid "You will convert between all these types:"
msgstr "–í–∏ –±—É–¥–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –º—ñ–∂ —É—Å—ñ–º–∞ —Ü–∏–º–∏ —Ç–∏–ø–∞–º–∏:"

#: src/exercises/day-3/safe-ffi-wrapper.md:24
msgid ""
"`&str` to `CString`: you need to allocate space for a trailing `\\0` "
"character,"
msgstr ""
"`&str` –¥–æ `CString`: –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥—ñ–ª–∏—Ç–∏ –º—ñ—Å—Ü–µ –¥–ª—è –∫—ñ–Ω—Ü–µ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª—É `\\0`,"

#: src/exercises/day-3/safe-ffi-wrapper.md:25
msgid "`CString` to `*const i8`: you need a pointer to call C functions,"
msgstr "`CString` –¥–æ `*const i8`: –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–æ–∫–∞–∂—á–∏–∫ –¥–ª—è –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ–π C,"

#: src/exercises/day-3/safe-ffi-wrapper.md:26
msgid ""
"`*const i8` to `&CStr`: you need something which can find the trailing `\\0` "
"character,"
msgstr ""

#: src/exercises/day-3/safe-ffi-wrapper.md:27
msgid ""
"`&CStr` to `&[u8]`: a slice of bytes is the universal interface for \"some "
"unknow data\","
msgstr ""
"`&CStr` –¥–æ `&[u8]`: –∑—Ä—ñ–∑ –±–∞–π—Ç—ñ–≤ —î —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è ¬´–¥–µ—è–∫–∏—Ö "
"–Ω–µ–≤—ñ–¥–æ–º–∏—Ö –¥–∞–Ω–∏—Ö¬ª,"

#: src/exercises/day-3/safe-ffi-wrapper.md:28
msgid ""
"`&[u8]` to `&OsStr`: `&OsStr` is a step towards `OsString`, use [`OsStrExt`]"
"(https://doc.rust-lang.org/std/os/unix/ffi/trait.OsStrExt.html) to create it,"
msgstr ""
"`&[u8]` –¥–æ `&OsStr`: `&OsStr` —î –∫—Ä–æ–∫–æ–º –¥–æ `OsString`, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ "
"[`OsStrExt`](https://doc.rust-lang.org/std/os/unix/ffi/trait .OsStrExt."
"html), —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –π–æ–≥–æ,"

#: src/exercises/day-3/safe-ffi-wrapper.md:31
msgid ""
"`&OsStr` to `OsString`: you need to clone the data in `&OsStr` to be able to "
"return it and call `readdir` again."
msgstr ""
"`&OsStr` –¥–æ `OsString`: –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–ª–æ–Ω—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –≤ `&OsStr`, —â–æ–± –º–∞—Ç–∏ "
"–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —ó—Ö —ñ –∑–Ω–æ–≤—É –≤–∏–∫–ª–∏–∫–∞—Ç–∏ `readdir`."

#: src/exercises/day-3/safe-ffi-wrapper.md:34
msgid ""
"The [Nomicon](https://doc.rust-lang.org/nomicon/ffi.html) also has a very "
"useful chapter about FFI."
msgstr ""
"–£ [Nomicon](https://doc.rust-lang.org/nomicon/ffi.html) —Ç–∞–∫–æ–∂ —î –¥—É–∂–µ "
"–∫–æ—Ä–∏—Å–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –ø—Ä–æ FFI."

#: src/exercises/day-3/safe-ffi-wrapper.md:45
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and fill in the missing "
"functions and methods:"
msgstr ""
"–°–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥ –Ω–∏–∂—á–µ –Ω–∞ <https://play.rust-lang.org/> —ñ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ "
"—Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –º–µ—Ç–æ–¥–∏:"

#: src/exercises/day-3/safe-ffi-wrapper.md:48
msgid ""
"```rust,should_panic\n"
"// TODO: remove this when you're done with your implementation.\n"
"#![allow(unused_imports, unused_variables, dead_code)]\n"
"\n"
"mod ffi {\n"
"    use std::os::raw::{c_char, c_int};\n"
"    #[cfg(not(target_os = \"macos\"))]\n"
"    use std::os::raw::{c_long, c_ulong, c_ushort, c_uchar};\n"
"\n"
"    // Opaque type. See https://doc.rust-lang.org/nomicon/ffi.html.\n"
"    #[repr(C)]\n"
"    pub struct DIR {\n"
"        _data: [u8; 0],\n"
"        _marker: core::marker::PhantomData<(*mut u8, core::marker::"
"PhantomPinned)>,\n"
"    }\n"
"\n"
"    // Layout according to the Linux man page for readdir(3), where ino_t "
"and\n"
"    // off_t are resolved according to the definitions in\n"
"    // /usr/include/x86_64-linux-gnu/{sys/types.h, bits/typesizes.h}.\n"
"    #[cfg(not(target_os = \"macos\"))]\n"
"    #[repr(C)]\n"
"    pub struct dirent {\n"
"        pub d_ino: c_ulong,\n"
"        pub d_off: c_long,\n"
"        pub d_reclen: c_ushort,\n"
"        pub d_type: c_uchar,\n"
"        pub d_name: [c_char; 256],\n"
"    }\n"
"\n"
"    // Layout according to the macOS man page for dir(5).\n"
"    #[cfg(all(target_os = \"macos\"))]\n"
"    #[repr(C)]\n"
"    pub struct dirent {\n"
"        pub d_fileno: u64,\n"
"        pub d_seekoff: u64,\n"
"        pub d_reclen: u16,\n"
"        pub d_namlen: u16,\n"
"        pub d_type: u8,\n"
"        pub d_name: [c_char; 1024],\n"
"    }\n"
"\n"
"    extern \"C\" {\n"
"        pub fn opendir(s: *const c_char) -> *mut DIR;\n"
"\n"
"        #[cfg(not(all(target_os = \"macos\", target_arch = \"x86_64\")))]\n"
"        pub fn readdir(s: *mut DIR) -> *const dirent;\n"
"\n"
"        // See https://github.com/rust-lang/libc/issues/414 and the section "
"on\n"
"        // _DARWIN_FEATURE_64_BIT_INODE in the macOS man page for stat(2).\n"
"        //\n"
"        // \"Platforms that existed before these updates were available\" "
"refers\n"
"        // to macOS (as opposed to iOS / wearOS / etc.) on Intel and "
"PowerPC.\n"
"        #[cfg(all(target_os = \"macos\", target_arch = \"x86_64\"))]\n"
"        #[link_name = \"readdir$INODE64\"]\n"
"        pub fn readdir(s: *mut DIR) -> *const dirent;\n"
"\n"
"        pub fn closedir(s: *mut DIR) -> c_int;\n"
"    }\n"
"}\n"
"\n"
"use std::ffi::{CStr, CString, OsStr, OsString};\n"
"use std::os::unix::ffi::OsStrExt;\n"
"\n"
"#[derive(Debug)]\n"
"struct DirectoryIterator {\n"
"    path: CString,\n"
"    dir: *mut ffi::DIR,\n"
"}\n"
"\n"
"impl DirectoryIterator {\n"
"    fn new(path: &str) -> Result<DirectoryIterator, String> {\n"
"        // Call opendir and return a Ok value if that worked,\n"
"        // otherwise return Err with a message.\n"
"        unimplemented!()\n"
"    }\n"
"}\n"
"\n"
"impl Iterator for DirectoryIterator {\n"
"    type Item = OsString;\n"
"    fn next(&mut self) -> Option<OsString> {\n"
"        // Keep calling readdir until we get a NULL pointer back.\n"
"        unimplemented!()\n"
"    }\n"
"}\n"
"\n"
"impl Drop for DirectoryIterator {\n"
"    fn drop(&mut self) {\n"
"        // Call closedir as needed.\n"
"        unimplemented!()\n"
"    }\n"
"}\n"
"\n"
"fn main() -> Result<(), String> {\n"
"    let iter = DirectoryIterator::new(\".\")?;\n"
"    println!(\"files: {:#?}\", iter.collect::<Vec<_>>());\n"
"    Ok(())\n"
"}\n"
"```"
msgstr ""

#: src/android.md:1
msgid "Welcome to Rust in Android"
msgstr "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Rust –≤ Android"

#: src/android.md:3
msgid ""
"Rust is supported for native platform development on Android. This means "
"that you can write new operating system services in Rust, as well as "
"extending existing services."
msgstr ""
"Rust –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ —Ä—ñ–¥–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –Ω–∞ Android. –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ "
"–≤–∏ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ –Ω–æ–≤—ñ —Å–ª—É–∂–±–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –≤ Rust, –∞ —Ç–∞–∫–æ–∂ —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏ "
"—ñ—Å–Ω—É—é—á—ñ —Å–ª—É–∂–±–∏."

#: src/android.md:7
msgid ""
"We will attempt to call Rust from one of your own projects today. So try to "
"find a little corner of your code base where we can move some lines of code "
"to Rust. The fewer dependencies and \"exotic\" types the better. Something "
"that parses some raw bytes would be ideal."
msgstr ""
"–°—å–æ–≥–æ–¥–Ω—ñ –º–∏ —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ Rust –∑ –æ–¥–Ω–æ–≥–æ –∑ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤. –¢–æ–∂ "
"—Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–∞–π—Ç–∏ –º–∞–ª–µ–Ω—å–∫–∏–π –∫—É—Ç–æ—á–æ–∫ –≤–∞—à–æ—ó –∫–æ–¥–æ–≤–æ—ó –±–∞–∑–∏, –∫—É–¥–∏ –º–∏ –º–æ–∂–µ–º–æ "
"–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É –≤ Rust. –ß–∏–º –º–µ–Ω—à–µ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —ñ ¬´–µ–∫–∑–æ—Ç–∏—á–Ω–∏—Ö¬ª "
"—Ç–∏–ø—ñ–≤, —Ç–∏–º –∫—Ä–∞—â–µ. –©–æ—Å—å, —â–æ –∞–Ω–∞–ª—ñ–∑—É—î –¥–µ—è–∫—ñ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –±–∞–π—Ç–∏, –±—É–ª–æ –± "
"—ñ–¥–µ–∞–ª—å–Ω–∏–º."

#: src/android/setup.md:3
msgid ""
"We will be using an Android Virtual Device to test our code. Make sure you "
"have access to one or create a new one with:"
msgstr ""
"–ú–∏ –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π Android –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ "
"–∫–æ–¥—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É –≤–∞—Å —î –¥–æ—Å—Ç—É–ø –¥–æ –æ–¥–Ω–æ–≥–æ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –∑–∞ "
"–¥–æ–ø–æ–º–æ–≥–æ—é:"

#: src/android/setup.md:6
msgid ""
"```shell\n"
"source build/envsetup.sh\n"
"lunch aosp_cf_x86_64_phone-userdebug\n"
"acloud create\n"
"```"
msgstr ""

#: src/android/setup.md:12
msgid ""
"Please see the [Android Developer Codelab](https://source.android.com/docs/"
"setup/start) for details."
msgstr ""
"–î–æ–∫–ª–∞–¥–Ω—ñ—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –≤ [Android Developer Codelab](https://"
"source.android.com/docs/setup/start)."

#: src/android/build-rules.md:3
msgid "The Android build system (Soong) supports Rust via a number of modules:"
msgstr ""
"–°–∏—Å—Ç–µ–º–∞ –∑–±—ñ—Ä–∫–∏ Android (Soong) –ø—ñ–¥—Ç—Ä–∏–º—É—î Rust –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫—ñ–ª—å–∫–æ—Ö –º–æ–¥—É–ª—ñ–≤:"

#: src/android/build-rules.md:5
msgid "Module Type"
msgstr "–¢–∏–ø –º–æ–¥—É–ª—è"

#: src/android/build-rules.md:5
msgid "Description"
msgstr "–æ–ø–∏—Å"

#: src/android/build-rules.md:7
msgid "`rust_binary`"
msgstr "`rust_binary`"

#: src/android/build-rules.md:7
msgid "Produces a Rust binary."
msgstr "–°—Ç–≤–æ—Ä—é—î –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª Rust."

#: src/android/build-rules.md:8
msgid "`rust_library`"
msgstr "`rust_library`"

#: src/android/build-rules.md:8
msgid "Produces a Rust library, and provides both `rlib` and `dylib` variants."
msgstr "–°—Ç–≤–æ—Ä—é—î –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É Rust —ñ –Ω–∞–¥–∞—î –≤–∞—Ä—ñ–∞–Ω—Ç–∏ `rlib` —ñ `dylib`."

#: src/android/build-rules.md:9
msgid "`rust_ffi`"
msgstr "`rust_ffi`"

#: src/android/build-rules.md:9
msgid ""
"Produces a Rust C library usable by `cc` modules, and provides both static "
"and shared variants."
msgstr ""
"–°—Ç–≤–æ—Ä—é—î –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É Rust C, —è–∫—É –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–æ–¥—É–ª—è–º–∏ cc, —ñ –Ω–∞–¥–∞—î —è–∫ "
"—Å—Ç–∞—Ç–∏—á–Ω—ñ, —Ç–∞–∫ —ñ —Å–ø—ñ–ª—å–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏."

#: src/android/build-rules.md:10
msgid "`rust_proc_macro`"
msgstr "`rust_proc_macro`"

#: src/android/build-rules.md:10
msgid ""
"Produces a `proc-macro` Rust library. These are analogous to compiler "
"plugins."
msgstr ""
"–°—Ç–≤–æ—Ä—é—î –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É `proc-macro` Rust. –í–æ–Ω–∏ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω—ñ –ø–ª–∞–≥—ñ–Ω–∞–º –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞."

#: src/android/build-rules.md:11
msgid "`rust_test`"
msgstr "`rust_test`"

#: src/android/build-rules.md:11
msgid "Produces a Rust test binary that uses the standard Rust test harness."
msgstr ""
"–°—Ç–≤–æ—Ä—é—î –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª —Ç–µ—Å—Ç—É Rust, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —Å–∏—Å—Ç–µ–º—É "
"—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Rust."

#: src/android/build-rules.md:12
msgid "`rust_fuzz`"
msgstr "`rust_fuzz`"

#: src/android/build-rules.md:12
msgid "Produces a Rust fuzz binary leveraging `libfuzzer`."
msgstr "–°—Ç–≤–æ—Ä—é—î –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª Rust fuzz, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `libfuzzer`."

#: src/android/build-rules.md:13
msgid "`rust_protobuf`"
msgstr "`rust_protobuf`"

#: src/android/build-rules.md:13
msgid ""
"Generates source and produces a Rust library that provides an interface for "
"a particular protobuf."
msgstr ""
"–°—Ç–≤–æ—Ä—é—î –¥–∂–µ—Ä–µ–ª–æ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É Rust, —è–∫–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è "
"–ø–µ–≤–Ω–æ–≥–æ protobuf."

#: src/android/build-rules.md:14
msgid "`rust_bindgen`"
msgstr "`rust_bindgen`"

#: src/android/build-rules.md:14
msgid ""
"Generates source and produces a Rust library containing Rust bindings to C "
"libraries."
msgstr ""
"–°—Ç–≤–æ—Ä—é—î –¥–∂–µ—Ä–µ–ª–æ —Ç–∞ —Å—Ç–≤–æ—Ä—é—î –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É Rust, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ Rust –¥–æ "
"–±—ñ–±–ª—ñ–æ—Ç–µ–∫ C."

#: src/android/build-rules.md:16
msgid "We will look at `rust_binary` and `rust_library` next."
msgstr "–î–∞–ª—ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ `rust_binary` —ñ `rust_library`."

#: src/android/build-rules/binary.md:1
msgid "Rust Binaries"
msgstr "–ë—ñ–Ω–∞—Ä–Ω—ñ —Ñ–∞–π–ª–∏ Rust"

#: src/android/build-rules/binary.md:3
msgid ""
"Let us start with a simple application. At the root of an AOSP checkout, "
"create the following files:"
msgstr ""
"–ü–æ—á–Ω–µ–º–æ –∑ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–æ–¥–∞—Ç–∫–∞. –£ –∫–æ—Ä–µ–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ AOSP —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ç–∞–∫—ñ —Ñ–∞–π–ª–∏:"

#: src/android/build-rules/binary.md:6 src/android/build-rules/library.md:13
msgid "_hello_rust/Android.bp_:"
msgstr "_hello_rust/Android.bp_:"

#: src/android/build-rules/binary.md:8
msgid ""
"```javascript\n"
"rust_binary {\n"
"    name: \"hello_rust\",\n"
"    crate_name: \"hello_rust\",\n"
"    srcs: [\"src/main.rs\"],\n"
"}\n"
"```"
msgstr ""

#: src/android/build-rules/binary.md:16 src/android/build-rules/library.md:34
msgid "_hello_rust/src/main.rs_:"
msgstr "_hello_rust/src/main.rs_:"

#: src/android/build-rules/binary.md:18
msgid ""
"```rust\n"
"//! Rust demo.\n"
"\n"
"/// Prints a greeting to standard output.\n"
"fn main() {\n"
"    println!(\"Hello from Rust!\");\n"
"}\n"
"```"
msgstr ""

#: src/android/build-rules/binary.md:27
msgid "You can now build, push, and run the binary:"
msgstr "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏, –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª:"

#: src/android/build-rules/binary.md:29
msgid ""
"```shell\n"
"m hello_rust\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust /data/local/tmp\"\n"
"adb shell /data/local/tmp/hello_rust\n"
"```"
msgstr ""

#: src/android/build-rules/binary.md:35
msgid ""
"```text\n"
"Hello from Rust!\n"
"```"
msgstr ""

#: src/android/build-rules/library.md:1
msgid "Rust Libraries"
msgstr "–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ Rust"

#: src/android/build-rules/library.md:3
msgid "You use `rust_library` to create a new Rust library for Android."
msgstr ""
"–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ `rust_library`, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É Rust –¥–ª—è "
"Android."

#: src/android/build-rules/library.md:5
msgid "Here we declare a dependency on two libraries:"
msgstr "–¢—É—Ç –º–∏ –æ–≥–æ–ª–æ—à—É—î–º–æ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ –¥–≤–æ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫:"

#: src/android/build-rules/library.md:7
msgid "`libgreeting`, which we define below,"
msgstr "`libgreeting`, —è–∫–∏–π –º–∏ –≤–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∏–∂—á–µ,"

#: src/android/build-rules/library.md:8
msgid ""
"`libtextwrap`, which is a crate already vendored in [`external/rust/crates/`]"
"(https://cs.android.com/android/platform/superproject/+/master:external/rust/"
"crates/)."
msgstr ""
"`libtextwrap`, —è–∫–∏–π —î —è—â–∏–∫–æ–º, —è–∫–∏–π —É–∂–µ –ø—Ä–æ–¥–∞—î—Ç—å—Å—è –≤ [`external/rust/crates/`]"
"(https://cs.android.com/android/platform/superproject/+/master:external/rust/"
"crates/)."

#: src/android/build-rules/library.md:15
msgid ""
"```javascript\n"
"rust_binary {\n"
"    name: \"hello_rust_with_dep\",\n"
"    crate_name: \"hello_rust_with_dep\",\n"
"    srcs: [\"src/main.rs\"],\n"
"    rustlibs: [\n"
"        \"libgreetings\",\n"
"        \"libtextwrap\",\n"
"    ],\n"
"    prefer_rlib: true,\n"
"}\n"
"\n"
"rust_library {\n"
"    name: \"libgreetings\",\n"
"    crate_name: \"greetings\",\n"
"    srcs: [\"src/lib.rs\"],\n"
"}\n"
"```"
msgstr ""

#: src/android/build-rules/library.md:36
msgid ""
"```rust,ignore\n"
"//! Rust demo.\n"
"\n"
"use greetings::greeting;\n"
"use textwrap::fill;\n"
"\n"
"/// Prints a greeting to standard output.\n"
"fn main() {\n"
"    println!(\"{}\", fill(&greeting(\"Bob\"), 24));\n"
"}\n"
"```"
msgstr ""

#: src/android/build-rules/library.md:48
msgid "_hello_rust/src/lib.rs_:"
msgstr "_hello_rust/src/lib.rs_:"

#: src/android/build-rules/library.md:50
msgid ""
"```rust,ignore\n"
"//! Greeting library.\n"
"\n"
"/// Greet `name`.\n"
"pub fn greeting(name: &str) -> String {\n"
"    format!(\"Hello {name}, it is very nice to meet you!\")\n"
"}\n"
"```"
msgstr ""

#: src/android/build-rules/library.md:59
msgid "You build, push, and run the binary like before:"
msgstr "–í–∏ —Å—Ç–≤–æ—Ä—é—î—Ç–µ, –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î—Ç–µ –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª, —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ:"

#: src/android/build-rules/library.md:61
msgid ""
"```shell\n"
"m hello_rust_with_dep\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_with_dep /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/hello_rust_with_dep\n"
"```"
msgstr ""

#: src/android/build-rules/library.md:67
msgid ""
"```text\n"
"Hello Bob, it is very\n"
"nice to meet you!\n"
"```"
msgstr ""

#: src/android/aidl.md:3
msgid ""
"The [Android Interface Definition Language (AIDL)](https://developer.android."
"com/guide/components/aidl) is supported in Rust:"
msgstr ""
"[–ú–æ–≤–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Android (AIDL)](https://developer.android.com/"
"guide/components/aidl) –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ Rust:"

#: src/android/aidl.md:6
msgid "Rust code can call existing AIDL servers,"
msgstr "–ö–æ–¥ Rust –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ —Å–µ—Ä–≤–µ—Ä–∏ AIDL,"

#: src/android/aidl.md:7
msgid "You can create new AIDL servers in Rust."
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Å–µ—Ä–≤–µ—Ä–∏ AIDL —É Rust."

#: src/android/aidl/interface.md:1
msgid "AIDL Interfaces"
msgstr "–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ AIDL"

#: src/android/aidl/interface.md:3
msgid "You declare the API of your service using an AIDL interface:"
msgstr "–í–∏ –æ–≥–æ–ª–æ—à—É—î—Ç–µ API —Å–≤–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É AIDL:"

#: src/android/aidl/interface.md:5
msgid ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"
msgstr ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"

#: src/android/aidl/interface.md:7
msgid ""
"```java\n"
"package com.example.birthdayservice;\n"
"\n"
"/** Birthday service interface. */\n"
"interface IBirthdayService {\n"
"    /** Generate a Happy Birthday message. */\n"
"    String wishHappyBirthday(String name, int years);\n"
"}\n"
"```"
msgstr ""

#: src/android/aidl/interface.md:17
msgid "_birthday_service/aidl/Android.bp_:"
msgstr "_birthday_service/aidl/Android.bp_:"

#: src/android/aidl/interface.md:19
msgid ""
"```javascript\n"
"aidl_interface {\n"
"    name: \"com.example.birthdayservice\",\n"
"    srcs: [\"com/example/birthdayservice/*.aidl\"],\n"
"    unstable: true,\n"
"    backend: {\n"
"        rust: { // Rust is not enabled by default\n"
"            enabled: true,\n"
"        },\n"
"    },\n"
"}\n"
"```"
msgstr ""

#: src/android/aidl/interface.md:32
msgid ""
"Add `vendor_available: true` if your AIDL file is used by a binary in the "
"vendor partition."
msgstr ""
"–î–æ–¥–∞–π—Ç–µ `vendor_available: true`, —è–∫—â–æ –≤–∞—à —Ñ–∞–π–ª AIDL –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è "
"–±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª–æ–º —É —Ä–æ–∑–¥—ñ–ª—ñ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞."

#: src/android/aidl/implementation.md:1
msgid "Service Implementation"
msgstr "–í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è –ø–æ—Å–ª—É–≥–∏"

#: src/android/aidl/implementation.md:3
msgid "We can now implement the AIDL service:"
msgstr "–¢–µ–ø–µ—Ä –º–∏ –º–æ–∂–µ–º–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–ª—É–∂–±—É AIDL:"

#: src/android/aidl/implementation.md:5
msgid "_birthday_service/src/lib.rs_:"
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/aidl/implementation.md:7
msgid ""
"```rust,ignore\n"
"//! Implementation of the `IBirthdayService` AIDL interface.\n"
"use com_example_birthdayservice::aidl::com::example::birthdayservice::"
"IBirthdayService::IBirthdayService;\n"
"use com_example_birthdayservice::binder;\n"
"\n"
"/// The `IBirthdayService` implementation.\n"
"pub struct BirthdayService;\n"
"\n"
"impl binder::Interface for BirthdayService {}\n"
"\n"
"impl IBirthdayService for BirthdayService {\n"
"    fn wishHappyBirthday(&self, name: &str, years: i32) -> binder::"
"Result<String> {\n"
"        Ok(format!(\n"
"            \"Happy Birthday {name}, congratulations with the {years} years!"
"\"\n"
"        ))\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/android/aidl/implementation.md:26 src/android/aidl/server.md:28
#: src/android/aidl/client.md:37
msgid "_birthday_service/Android.bp_:"
msgstr "_birthday_service/Android.bp_:"

#: src/android/aidl/implementation.md:28
msgid ""
"```javascript\n"
"rust_library {\n"
"    name: \"libbirthdayservice\",\n"
"    srcs: [\"src/lib.rs\"],\n"
"    crate_name: \"birthdayservice\",\n"
"    rustlibs: [\n"
"        \"com.example.birthdayservice-rust\",\n"
"        \"libbinder_rs\",\n"
"    ],\n"
"}\n"
"```"
msgstr ""

#: src/android/aidl/server.md:1
msgid "AIDL Server"
msgstr "–°–µ—Ä–≤–µ—Ä AIDL"

#: src/android/aidl/server.md:3
msgid "Finally, we can create a server which exposes the service:"
msgstr "–ù–∞—Ä–µ—à—Ç—ñ, –º–∏ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä, —è–∫–∏–π –≤—ñ–¥–∫—Ä–∏–≤–∞—î —Å–µ—Ä–≤—ñ—Å:"

#: src/android/aidl/server.md:5
msgid "_birthday_service/src/server.rs_:"
msgstr "_birthday_service/src/server.rs_:"

#: src/android/aidl/server.md:7
msgid ""
"```rust,ignore\n"
"//! Birthday service.\n"
"use birthdayservice::BirthdayService;\n"
"use com_example_birthdayservice::aidl::com::example::birthdayservice::"
"IBirthdayService::BnBirthdayService;\n"
"use com_example_birthdayservice::binder;\n"
"\n"
"const SERVICE_IDENTIFIER: &str = \"birthdayservice\";\n"
"\n"
"/// Entry point for birthday service.\n"
"fn main() {\n"
"    let birthday_service = BirthdayService;\n"
"    let birthday_service_binder = BnBirthdayService::new_binder(\n"
"        birthday_service,\n"
"        binder::BinderFeatures::default(),\n"
"    );\n"
"    binder::add_service(SERVICE_IDENTIFIER, birthday_service_binder."
"as_binder())\n"
"        .expect(\"Failed to register service\");\n"
"    binder::ProcessState::join_thread_pool()\n"
"}\n"
"```"
msgstr ""

#: src/android/aidl/server.md:30
msgid ""
"```javascript\n"
"rust_binary {\n"
"    name: \"birthday_server\",\n"
"    crate_name: \"birthday_server\",\n"
"    srcs: [\"src/server.rs\"],\n"
"    rustlibs: [\n"
"        \"com.example.birthdayservice-rust\",\n"
"        \"libbinder_rs\",\n"
"        \"libbirthdayservice\",\n"
"    ],\n"
"    prefer_rlib: true,\n"
"}\n"
"```"
msgstr ""

#: src/android/aidl/deploy.md:3
msgid "We can now build, push, and start the service:"
msgstr "–¢–µ–ø–µ—Ä –º–∏ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏, –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Å–ª—É–∂–±—É:"

#: src/android/aidl/deploy.md:5
msgid ""
"```shell\n"
"m birthday_server\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_server /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/birthday_server\n"
"```"
msgstr ""

#: src/android/aidl/deploy.md:11
msgid "In another terminal, check that the service runs:"
msgstr "–í —ñ–Ω—à–æ–º—É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø—Ä–∞—Ü—é—î —Å–ª—É–∂–±–∞:"

#: src/android/aidl/deploy.md:13
msgid ""
"```shell\n"
"adb shell service check birthdayservice\n"
"```"
msgstr ""

#: src/android/aidl/deploy.md:17
msgid ""
"```text\n"
"Service birthdayservice: found\n"
"```"
msgstr ""

#: src/android/aidl/deploy.md:21
msgid "You can also call the service with `service call`:"
msgstr ""
"–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –≤ —Å–ª—É–∂–±—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `—Å–µ—Ä–≤—ñ—Å–Ω–∏–π –≤–∏–∫–ª–∏–∫`:"

#: src/android/aidl/deploy.md:23
msgid ""
"```shell\n"
"adb shell service call birthdayservice 1 s16 Bob i32 24\n"
"```"
msgstr ""

#: src/android/aidl/deploy.md:27
msgid ""
"```text\n"
"Result: Parcel(\n"
"  0x00000000: 00000000 00000036 00610048 00700070 '....6...H.a.p.p.'\n"
"  0x00000010: 00200079 00690042 00740072 00640068 'y. .B.i.r.t.h.d.'\n"
"  0x00000020: 00790061 00420020 0062006f 0020002c 'a.y. .B.o.b.,. .'\n"
"  0x00000030: 006f0063 0067006e 00610072 00750074 'c.o.n.g.r.a.t.u.'\n"
"  0x00000040: 0061006c 00690074 006e006f 00200073 'l.a.t.i.o.n.s. .'\n"
"  0x00000050: 00690077 00680074 00740020 00650068 'w.i.t.h. .t.h.e.'\n"
"  0x00000060: 00320020 00200034 00650079 00720061 ' .2.4. .y.e.a.r.'\n"
"  0x00000070: 00210073 00000000                   's.!.....        ')\n"
"```"
msgstr ""

#: src/android/aidl/client.md:1
msgid "AIDL Client"
msgstr "–ö–ª—ñ—î–Ω—Ç AIDL"

#: src/android/aidl/client.md:3
msgid "Finally, we can create a Rust client for our new service."
msgstr "–ù–∞—Ä–µ—à—Ç—ñ –º–∏ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç Rust –¥–ª—è –Ω–∞—à–æ—ó –Ω–æ–≤–æ—ó —Å–ª—É–∂–±–∏."

#: src/android/aidl/client.md:5
msgid "_birthday_service/src/client.rs_:"
msgstr "_birthday_service/src/client.rs_:"

#: src/android/aidl/client.md:7
msgid ""
"```rust,ignore\n"
"//! Birthday service.\n"
"use com_example_birthdayservice::aidl::com::example::birthdayservice::"
"IBirthdayService::IBirthdayService;\n"
"use com_example_birthdayservice::binder;\n"
"\n"
"const SERVICE_IDENTIFIER: &str = \"birthdayservice\";\n"
"\n"
"/// Connect to the BirthdayService.\n"
"pub fn connect() -> Result<binder::Strong<dyn IBirthdayService>, binder::"
"StatusCode> {\n"
"    binder::get_interface(SERVICE_IDENTIFIER)\n"
"}\n"
"\n"
"/// Call the birthday service.\n"
"fn main() -> Result<(), binder::Status> {\n"
"    let name = std::env::args()\n"
"        .nth(1)\n"
"        .unwrap_or_else(|| String::from(\"Bob\"));\n"
"    let years = std::env::args()\n"
"        .nth(2)\n"
"        .and_then(|arg| arg.parse::<i32>().ok())\n"
"        .unwrap_or(42);\n"
"\n"
"    binder::ProcessState::start_thread_pool();\n"
"    let service = connect().expect(\"Failed to connect to "
"BirthdayService\");\n"
"    let msg = service.wishHappyBirthday(&name, years)?;\n"
"    println!(\"{msg}\");\n"
"    Ok(())\n"
"}\n"
"```"
msgstr ""

#: src/android/aidl/client.md:39
msgid ""
"```javascript\n"
"rust_binary {\n"
"    name: \"birthday_client\",\n"
"    crate_name: \"birthday_client\",\n"
"    srcs: [\"src/client.rs\"],\n"
"    rustlibs: [\n"
"        \"com.example.birthdayservice-rust\",\n"
"        \"libbinder_rs\",\n"
"    ],\n"
"    prefer_rlib: true,\n"
"}\n"
"```"
msgstr ""

#: src/android/aidl/client.md:52
msgid "Notice that the client does not depend on `libbirthdayservice`."
msgstr "–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ –∫–ª—ñ—î–Ω—Ç –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ `libbirthdayservice`."

#: src/android/aidl/client.md:54
msgid "Build, push, and run the client on your device:"
msgstr "–°—Ç–≤–æ—Ä—ñ—Ç—å, –ø—Ä–æ—à—Ç–æ–≤—Ö–Ω—ñ—Ç—å —ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç –Ω–∞ —Å–≤–æ—î–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó:"

#: src/android/aidl/client.md:56
msgid ""
"```shell\n"
"m birthday_client\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_client /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/birthday_client Charlie 60\n"
"```"
msgstr ""

#: src/android/aidl/client.md:62
msgid ""
"```text\n"
"Happy Birthday Charlie, congratulations with the 60 years!\n"
"```"
msgstr ""

#: src/android/aidl/changing.md:3
msgid ""
"Let us extend the API with more functionality: we want to let clients "
"specify a list of lines for the birthday card:"
msgstr ""
"–î–∞–≤–∞–π—Ç–µ —Ä–æ–∑—à–∏—Ä–∏–º–æ API, –¥–æ–¥–∞–≤—à–∏ –±—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π: –º–∏ —Ö–æ—á–µ–º–æ "
"–¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞–º –≤–∫–∞–∑—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä—è–¥–∫—ñ–≤ –¥–ª—è –ª–∏—Å—Ç—ñ–≤–∫–∏ –∑ –¥–Ω–µ–º ‚Äã‚Äã–Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:"

#: src/android/aidl/changing.md:6
msgid ""
"```java\n"
"package com.example.birthdayservice;\n"
"\n"
"/** Birthday service interface. */\n"
"interface IBirthdayService {\n"
"    /** Generate a Happy Birthday message. */\n"
"    String wishHappyBirthday(String name, int years, in String[] text);\n"
"}\n"
"```"
msgstr ""

#: src/android/logging.md:3
msgid ""
"You should use the `log` crate to automatically log to `logcat` (on-device) "
"or `stdout` (on-host):"
msgstr ""
"–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è—â–∏–∫ `log` –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—Ö–æ–¥—É –≤ `logcat` (–Ω–∞ "
"–ø—Ä–∏—Å—Ç—Ä–æ—ó) –∞–±–æ `stdout` (–Ω–∞ —Ö–æ—Å—Ç—ñ):"

#: src/android/logging.md:6
msgid "_hello_rust_logs/Android.bp_:"
msgstr "_hello_rust_logs/Android.bp_:"

#: src/android/logging.md:8
msgid ""
"```javascript\n"
"rust_binary {\n"
"    name: \"hello_rust_logs\",\n"
"    crate_name: \"hello_rust_logs\",\n"
"    srcs: [\"src/main.rs\"],\n"
"    rustlibs: [\n"
"        \"liblog_rust\",\n"
"        \"liblogger\",\n"
"    ],\n"
"    prefer_rlib: true,\n"
"    host_supported: true,\n"
"}\n"
"```"
msgstr ""

#: src/android/logging.md:22
msgid "_hello_rust_logs/src/main.rs_:"
msgstr "_hello_rust_logs/src/main.rs_:"

#: src/android/logging.md:24
msgid ""
"```rust,ignore\n"
"//! Rust logging demo.\n"
"\n"
"use log::{debug, error, info};\n"
"\n"
"/// Logs a greeting.\n"
"fn main() {\n"
"    logger::init(\n"
"        logger::Config::default()\n"
"            .with_tag_on_device(\"rust\")\n"
"            .with_min_level(log::Level::Trace),\n"
"    );\n"
"    debug!(\"Starting program.\");\n"
"    info!(\"Things are going fine.\");\n"
"    error!(\"Something went wrong!\");\n"
"}\n"
"```"
msgstr ""

#: src/android/logging.md:42 src/android/interoperability/with-c/bindgen.md:98
#: src/android/interoperability/with-c/rust.md:73
msgid "Build, push, and run the binary on your device:"
msgstr "–°—Ç–≤–æ—Ä—ñ—Ç—å, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª –Ω–∞ —Å–≤–æ—î–º—É –ø—Ä–∏—Å—Ç—Ä–æ—ó:"

#: src/android/logging.md:44
msgid ""
"```shell\n"
"m hello_rust_logs\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_logs /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/hello_rust_logs\n"
"```"
msgstr ""

#: src/android/logging.md:50
msgid "The logs show up in `adb logcat`:"
msgstr "–ñ—É—Ä–Ω–∞–ª–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è –≤ `adb logcat`:"

#: src/android/logging.md:52
msgid ""
"```shell\n"
"adb logcat -s rust\n"
"```"
msgstr ""

#: src/android/logging.md:56
msgid ""
"```text\n"
"09-08 08:38:32.454  2420  2420 D rust: hello_rust_logs: Starting program.\n"
"09-08 08:38:32.454  2420  2420 I rust: hello_rust_logs: Things are going "
"fine.\n"
"09-08 08:38:32.454  2420  2420 E rust: hello_rust_logs: Something went "
"wrong!\n"
"```"
msgstr ""

#: src/android/interoperability.md:3
msgid ""
"Rust has excellent support for interoperability with other languages. This "
"means that you can:"
msgstr ""
"Rust —á—É–¥–æ–≤–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î –≤–∑–∞—î–º–æ–¥—ñ—é –∑ —ñ–Ω—à–∏–º–∏ –º–æ–≤–∞–º–∏. –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ:"

#: src/android/interoperability.md:6
msgid "Call Rust functions from other languages."
msgstr "–í–∏–∫–ª–∏–∫–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó Rust –∑ —ñ–Ω—à–∏—Ö –º–æ–≤."

#: src/android/interoperability.md:7
msgid "Call functions written in other languages from Rust."
msgstr "–§—É–Ω–∫—Ü—ñ—ó –≤–∏–∫–ª–∏–∫—É, –Ω–∞–ø–∏—Å–∞–Ω—ñ —ñ–Ω—à–∏–º–∏ –º–æ–≤–∞–º–∏ –∑ Rust."

#: src/android/interoperability.md:9
msgid ""
"When you call functions in a foreign language we say that you're using a "
"_foreign function interface_, also known as FFI."
msgstr ""
"–ö–æ–ª–∏ –≤–∏ –≤–∏–∫–ª–∏–∫–∞—î—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—ó —ñ–Ω–æ–∑–µ–º–Ω–æ—é –º–æ–≤–æ—é, –º–∏ –≥–æ–≤–æ—Ä–∏–º–æ, —â–æ –≤–∏ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ _—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —ñ–Ω–æ–∑–µ–º–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó_, —Ç–∞–∫–æ–∂ –≤—ñ–¥–æ–º–∏–π —è–∫ FFI."

#: src/android/interoperability/with-c.md:1
msgid "Interoperability with C"
msgstr "–í–∑–∞—î–º–æ–¥—ñ—è –∑ C"

#: src/android/interoperability/with-c.md:3
msgid ""
"Rust has full support for linking object files with a C calling convention. "
"Similarly, you can export Rust functions and call them from C."
msgstr ""
"Rust –º–∞—î –ø–æ–≤–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∑–≤‚Äô—è–∑—É–≤–∞–Ω–Ω—è –æ–±‚Äô—î–∫—Ç–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —É–≥–æ–¥–∏ –ø—Ä–æ "
"–≤–∏–∫–ª–∏–∫–∏ C. –¢–∞–∫ —Å–∞–º–æ –≤–∏ –º–æ–∂–µ—Ç–µ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó Rust —ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —ó—Ö —ñ–∑ C."

#: src/android/interoperability/with-c.md:6
msgid "You can do it by hand if you want:"
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –≤—Ä—É—á–Ω—É, —è–∫—â–æ —Ö–æ—á–µ—Ç–µ:"

#: src/android/interoperability/with-c.md:8
msgid ""
"```rust\n"
"extern \"C\" {\n"
"    fn abs(x: i32) -> i32;\n"
"}\n"
"\n"
"fn main() {\n"
"    let x = -42;\n"
"    let abs_x = unsafe { abs(x) };\n"
"    println!(\"{x}, {abs_x}\");\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c.md:20
msgid ""
"We already saw this in the [Safe FFI Wrapper exercise](../../exercises/day-3/"
"safe-ffi-wrapper.md)."
msgstr ""
"–ú–∏ –≤–∂–µ –±–∞—á–∏–ª–∏ —Ü–µ —É [–≤–ø—Ä–∞–≤—ñ Safe FFI Wrapper](../../exercises/day-3/safe-ffi-"
"wrapper.md)."

#: src/android/interoperability/with-c.md:23
msgid ""
"This assumes full knowledge of the target platform. Not recommended for "
"production."
msgstr ""
"–¶–µ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –ø–æ–≤–Ω–µ –∑–Ω–∞–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –¥–ª—è "
"–≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞."

#: src/android/interoperability/with-c.md:26
msgid "We will look at better options next."
msgstr "–î–∞–ª—ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∫—Ä–∞—â—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏."

#: src/android/interoperability/with-c/bindgen.md:1
msgid "Using Bindgen"
msgstr "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Bindgen"

#: src/android/interoperability/with-c/bindgen.md:3
msgid ""
"The [bindgen](https://rust-lang.github.io/rust-bindgen/introduction.html) "
"tool can auto-generate bindings from a C header file."
msgstr ""
"–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç [bindgen](https://rust-lang.github.io/rust-bindgen/introduction."
"html) –º–æ–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ –∑ —Ñ–∞–π–ª—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ C."

#: src/android/interoperability/with-c/bindgen.md:6
msgid "First create a small C library:"
msgstr "–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–µ–≤–µ–ª–∏–∫—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É C:"

#: src/android/interoperability/with-c/bindgen.md:8
msgid "_interoperability/bindgen/libbirthday.h_:"
msgstr "_interoperability/bindgen/libbirthday.h_:"

#: src/android/interoperability/with-c/bindgen.md:10
msgid ""
"```c\n"
"typedef struct card {\n"
"  const char* name;\n"
"  int years;\n"
"} card;\n"
"\n"
"void print_card(const card* card);\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:19
msgid "_interoperability/bindgen/libbirthday.c_:"
msgstr "_interoperability/bindgen/libbirthday.c_:"

#: src/android/interoperability/with-c/bindgen.md:21
msgid ""
"```c\n"
"#include <stdio.h>\n"
"#include \"libbirthday.h\"\n"
"\n"
"void print_card(const card* card) {\n"
"  printf(\"+--------------\\n\");\n"
"  printf(\"| Happy Birthday %s!\\n\", card->name);\n"
"  printf(\"| Congratulations with the %i years!\\n\", card->years);\n"
"  printf(\"+--------------\\n\");\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:33
msgid "Add this to your `Android.bp` file:"
msgstr "–î–æ–¥–∞–π—Ç–µ —Ü–µ –¥–æ —Å–≤–æ–≥–æ —Ñ–∞–π–ª—É `Android.bp`:"

#: src/android/interoperability/with-c/bindgen.md:35
#: src/android/interoperability/with-c/bindgen.md:55
#: src/android/interoperability/with-c/bindgen.md:69
#: src/android/interoperability/with-c/bindgen.md:108
msgid "_interoperability/bindgen/Android.bp_:"
msgstr "_interoperability/bindgen/Android.bp_:"

#: src/android/interoperability/with-c/bindgen.md:37
msgid ""
"```javascript\n"
"cc_library {\n"
"    name: \"libbirthday\",\n"
"    srcs: [\"libbirthday.c\"],\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:44
msgid ""
"Create a wrapper header file for the library (not strictly needed in this "
"example):"
msgstr ""
"–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–±–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ (—É —Ü—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ —Ü–µ –Ω–µ "
"–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ):"

#: src/android/interoperability/with-c/bindgen.md:47
msgid "_interoperability/bindgen/libbirthday_wrapper.h_:"
msgstr "_interoperability/bindgen/libbirthday_wrapper.h_:"

#: src/android/interoperability/with-c/bindgen.md:49
msgid ""
"```c\n"
"#include \"libbirthday.h\"\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:53
msgid "You can now auto-generate the bindings:"
msgstr "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–∏–≤‚Äô—è–∑–∫–∏:"

#: src/android/interoperability/with-c/bindgen.md:57
msgid ""
"```javascript\n"
"rust_bindgen {\n"
"    name: \"libbirthday_bindgen\",\n"
"    crate_name: \"birthday_bindgen\",\n"
"    wrapper_src: \"libbirthday_wrapper.h\",\n"
"    source_stem: \"bindings\",\n"
"    static_libs: [\"libbirthday\"],\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:67
msgid "Finally, we can use the bindings in our Rust program:"
msgstr "–ù–∞—Ä–µ—à—Ç—ñ, –º–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ –≤ –Ω–∞—à—ñ–π –ø—Ä–æ–≥—Ä–∞–º—ñ Rust:"

#: src/android/interoperability/with-c/bindgen.md:71
msgid ""
"```javascript\n"
"rust_binary {\n"
"    name: \"print_birthday_card\",\n"
"    srcs: [\"main.rs\"],\n"
"    rustlibs: [\"libbirthday_bindgen\"],\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:79
msgid "_interoperability/bindgen/main.rs_:"
msgstr "_interoperability/bindgen/main.rs_:"

#: src/android/interoperability/with-c/bindgen.md:81
msgid ""
"```rust,compile_fail\n"
"//! Bindgen demo.\n"
"\n"
"use birthday_bindgen::{card, print_card};\n"
"\n"
"fn main() {\n"
"    let name = std::ffi::CString::new(\"Peter\").unwrap();\n"
"    let card = card {\n"
"        name: name.as_ptr(),\n"
"        years: 42,\n"
"    };\n"
"    unsafe {\n"
"        print_card(&card as *const card);\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:100
msgid ""
"```shell\n"
"m print_birthday_card\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/print_birthday_card /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/print_birthday_card\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:106
msgid "Finally, we can run auto-generated tests to ensure the bindings work:"
msgstr ""
"–ù–∞—Ä–µ—à—Ç—ñ, –º–∏ –º–æ–∂–µ–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Ç–µ—Å—Ç–∏, —â–æ–± "
"–ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å:"

#: src/android/interoperability/with-c/bindgen.md:110
msgid ""
"```javascript\n"
"rust_test {\n"
"    name: \"libbirthday_bindgen_test\",\n"
"    srcs: [\":libbirthday_bindgen\"],\n"
"    crate_name: \"libbirthday_bindgen_test\",\n"
"    test_suites: [\"general-tests\"],\n"
"    auto_gen_config: true,\n"
"    clippy_lints: \"none\", // Generated file, skip linting\n"
"    lints: \"none\",\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:122
msgid ""
"```shell\n"
"atest libbirthday_bindgen_test\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/rust.md:1
msgid "Calling Rust"
msgstr "–í–∏–∫–ª–∏–∫ Rust"

#: src/android/interoperability/with-c/rust.md:3
msgid "Exporting Rust functions and types to C is easy:"
msgstr "–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ —Ç–∏–ø–∏ Rust –Ω–∞ C –ª–µ–≥–∫–æ:"

#: src/android/interoperability/with-c/rust.md:5
msgid "_interoperability/rust/libanalyze/analyze.rs_"
msgstr "_interoperability/rust/libanalyze/analyze.rs_"

#: src/android/interoperability/with-c/rust.md:7
msgid ""
"```rust,editable\n"
"//! Rust FFI demo.\n"
"#![deny(improper_ctypes_definitions)]\n"
"\n"
"use std::os::raw::c_int;\n"
"\n"
"/// Analyze the numbers.\n"
"#[no_mangle]\n"
"pub extern \"C\" fn analyze_numbers(x: c_int, y: c_int) {\n"
"    if x < y {\n"
"        println!(\"x ({x}) is smallest!\");\n"
"    } else {\n"
"        println!(\"y ({y}) is probably larger than x ({x})\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/rust.md:24
msgid "_interoperability/rust/libanalyze/analyze.h_"
msgstr "_interoperability/rust/libanalyze/analyze.h_"

#: src/android/interoperability/with-c/rust.md:26
msgid ""
"```c\n"
"#ifndef ANALYSE_H\n"
"#define ANALYSE_H\n"
"\n"
"extern \"C\" {\n"
"void analyze_numbers(int x, int y);\n"
"}\n"
"\n"
"#endif\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/rust.md:37
msgid "_interoperability/rust/libanalyze/Android.bp_"
msgstr "_interoperability/rust/libanalyze/Android.bp_"

#: src/android/interoperability/with-c/rust.md:39
msgid ""
"```javascript\n"
"rust_ffi {\n"
"    name: \"libanalyze_ffi\",\n"
"    crate_name: \"analyze_ffi\",\n"
"    srcs: [\"analyze.rs\"],\n"
"    include_dirs: [\".\"],\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/rust.md:48
msgid "We can now call this from a C binary:"
msgstr "–¢–µ–ø–µ—Ä –º–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü–µ –∑ –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª—É C:"

#: src/android/interoperability/with-c/rust.md:50
msgid "_interoperability/rust/analyze/main.c_"
msgstr "_interoperability/rust/analyze/main.c_"

#: src/android/interoperability/with-c/rust.md:52
msgid ""
"```c\n"
"#include \"analyze.h\"\n"
"\n"
"int main() {\n"
"  analyze_numbers(10, 20);\n"
"  analyze_numbers(123, 123);\n"
"  return 0;\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/rust.md:62
msgid "_interoperability/rust/analyze/Android.bp_"
msgstr "_interoperability/rust/analyze/Android.bp_"

#: src/android/interoperability/with-c/rust.md:64
msgid ""
"```javascript\n"
"cc_binary {\n"
"    name: \"analyze_numbers\",\n"
"    srcs: [\"main.c\"],\n"
"    static_libs: [\"libanalyze_ffi\"],\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/rust.md:75
msgid ""
"```shell\n"
"m analyze_numbers\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/analyze_numbers /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/analyze_numbers\n"
"```"
msgstr ""

#: src/android/interoperability/with-c/rust.md:83
msgid ""
"`#[no_mangle]` disables Rust's usual name mangling, so the exported symbol "
"will just be the name of the function. You can also use `#[export_name = "
"\"some_name\"]` to specify whatever name you want."
msgstr ""
"`#[no_mangle]` –≤–∏–º–∏–∫–∞—î –∑–≤–∏—á–∞–π–Ω–µ —Å–ø–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–º–µ–Ω Rust, —Ç–æ–º—É –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏–π "
"—Å–∏–º–≤–æ–ª –±—É–¥–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–æ—é —Ñ—É–Ω–∫—Ü—ñ—ó. –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "
"`#[export_name = \"some_name\"]`, —â–æ–± –≤–∫–∞–∑–∞—Ç–∏ –±—É–¥—å-—è–∫–µ —ñ–º‚Äô—è."

#: src/android/interoperability/cpp.md:3
msgid ""
"The [CXX crate](https://cxx.rs/) makes it possible to do safe "
"interoperability between Rust and C++."
msgstr ""
"[–ö—Ä–µ–π—Ç CXX](https://cxx.rs/) –¥–∞—î –∑–º–æ–≥—É –±–µ–∑–ø–µ—á–Ω–æ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –º—ñ–∂ Rust —ñ C++."

#: src/android/interoperability/cpp.md:6
msgid "The overall approach looks like this:"
msgstr "–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫:"

#: src/android/interoperability/cpp.md:10
msgid ""
"See the [CXX tutorial](https://cxx.rs/tutorial.html) for an full example of "
"using this."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ [–ø—ñ–¥—Ä—É—á–Ω–∏–∫ CXX](https://cxx.rs/tutorial.html), —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ "
"–ø–æ–≤–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—å–æ–≥–æ."

#: src/android/interoperability/cpp.md:14
msgid ""
"At this point, the instructor should switch to the [CXX tutorial](https://"
"cxx.rs/tutorial.html)."
msgstr ""
"–ù–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ –≤–∏–∫–ª–∞–¥–∞—á –º–∞—î –ø–µ—Ä–µ–π—Ç–∏ –¥–æ [–ø—ñ–¥—Ä—É—á–Ω–∏–∫–∞ CXX](https://cxx.rs/"
"tutorial.html)."

#: src/android/interoperability/cpp.md:16
msgid "Walk the students through the tutorial step by step."
msgstr "–ü—Ä–æ–≤–µ–¥—ñ—Ç—å —É—á–Ω—ñ–≤ –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º —á–µ—Ä–µ–∑ –ø—ñ–¥—Ä—É—á–Ω–∏–∫."

#: src/android/interoperability/cpp.md:18
msgid ""
"Highlight how CXX presents a clean interface without unsafe code in _both "
"languages_."
msgstr ""
"–ü—ñ–¥–∫—Ä–µ—Å–ª—ñ—Ç—å, —è–∫ CXX –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —á–∏—Å—Ç–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∫–æ–¥—É "
"_–æ–±–æ–º–∞ –º–æ–≤–∞–º–∏_."

#: src/android/interoperability/cpp.md:20
msgid ""
"Show the correspondence between [Rust and C++ types](https://cxx.rs/bindings."
"html):"
msgstr ""
"–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º—ñ–∂ [—Ç–∏–ø–∞–º–∏ Rust —ñ C++](https://cxx.rs/bindings.html):"

#: src/android/interoperability/cpp.md:22
msgid ""
"Explain how a Rust `String` cannot map to a C++ `std::string` (the latter "
"does not uphold the UTF-8 invariant). Show that despite being different "
"types, `rust::String` in C++ can be easily constructed from a C++ `std::"
"string`, making it very ergonomic to use."
msgstr ""
"–ü–æ—è—Å–Ω—ñ—Ç—å, —è–∫ Rust `String` –Ω–µ –º–æ–∂–µ –∑—ñ—Å—Ç–∞–≤–ª—è—Ç–∏—Å—è –∑ C++ `std::string` "
"(–æ—Å—Ç–∞–Ω–Ω—ñ–π –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —ñ–Ω–≤–∞—Ä—ñ–∞–Ω—Ç UTF-8). –ü–æ–∫–∞–∂—ñ—Ç—å, —â–æ –Ω–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ "
"—Ç–∏–ø–∏, `rust::String` —É C++ –º–æ–∂–Ω–∞ –ª–µ–≥–∫–æ —Å–∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞—Ç–∏ –∑ C++ `std::string`, —â–æ "
"—Ä–æ–±–∏—Ç—å –π–æ–≥–æ –¥—É–∂–µ –µ—Ä–≥–æ–Ω–æ–º—ñ—á–Ω–∏–º —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ."

#: src/android/interoperability/cpp.md:28
msgid ""
"Explain that a Rust function returning `Result<T, E>` becomes a function "
"which throws a `E` exception in C++ (and vice versa)."
msgstr ""
"–ü–æ—è—Å–Ω—ñ—Ç—å, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è Rust, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î `Result<T, E>`, —Å—Ç–∞—î —Ñ—É–Ω–∫—Ü—ñ—î—é, —è–∫–∞ "
"—Å—Ç–≤–æ—Ä—é—î –≤–∏–Ω—è—Ç–æ–∫ `E` —É C++ (—ñ –Ω–∞–≤–ø–∞–∫–∏)."

#: src/android/interoperability/java.md:1
msgid "Interoperability with Java"
msgstr "–í–∑–∞—î–º–æ–¥—ñ—è –∑ Java"

#: src/android/interoperability/java.md:3
msgid ""
"Java can load shared objects via [Java Native Interface (JNI)](https://en."
"wikipedia.org/wiki/Java_Native_Interface). The [`jni` crate](https://docs.rs/"
"jni/) allows you to create a compatible library."
msgstr ""
"Java –º–æ–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Å–ø—ñ–ª—å–Ω—ñ –æ–±‚Äô—î–∫—Ç–∏ —á–µ—Ä–µ–∑ [–≤–ª–∞—Å–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å Java (JNI)]"
"(https://en.wikipedia.org/wiki/Java_Native_Interface). –Ø—â–∏–∫ [`jni`](https://"
"docs.rs/jni/) –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–º—ñ—Å–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É."

#: src/android/interoperability/java.md:7
msgid "First, we create a Rust function to export to Java:"
msgstr "–°–ø–æ—á–∞—Ç–∫—É –º–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é Rust –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –≤ Java:"

#: src/android/interoperability/java.md:9
msgid "_interoperability/java/src/lib.rs_:"
msgstr "_interoperability/java/src/lib.rs_:"

#: src/android/interoperability/java.md:11
msgid ""
"```rust,compile_fail\n"
"//! Rust <-> Java FFI demo.\n"
"\n"
"use jni::objects::{JClass, JString};\n"
"use jni::sys::jstring;\n"
"use jni::JNIEnv;\n"
"\n"
"/// HelloWorld::hello method implementation.\n"
"#[no_mangle]\n"
"pub extern \"system\" fn Java_HelloWorld_hello(\n"
"    env: JNIEnv,\n"
"    _class: JClass,\n"
"    name: JString,\n"
") -> jstring {\n"
"    let input: String = env.get_string(name).unwrap().into();\n"
"    let greeting = format!(\"Hello, {input}!\");\n"
"    let output = env.new_string(greeting).unwrap();\n"
"    output.into_inner()\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/java.md:32
#: src/android/interoperability/java.md:62
msgid "_interoperability/java/Android.bp_:"
msgstr "_interoperability/java/Android.bp_:"

#: src/android/interoperability/java.md:34
msgid ""
"```javascript\n"
"rust_ffi_shared {\n"
"    name: \"libhello_jni\",\n"
"    crate_name: \"hello_jni\",\n"
"    srcs: [\"src/lib.rs\"],\n"
"    rustlibs: [\"libjni\"],\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/java.md:43
msgid "Finally, we can call this function from Java:"
msgstr "–ù–∞—Ä–µ—à—Ç—ñ, –º–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –∑ Java:"

#: src/android/interoperability/java.md:45
msgid "_interoperability/java/HelloWorld.java_:"
msgstr "_interoperability/java/HelloWorld.java_:"

#: src/android/interoperability/java.md:47
msgid ""
"```java\n"
"class HelloWorld {\n"
"    private static native String hello(String name);\n"
"\n"
"    static {\n"
"        System.loadLibrary(\"hello_jni\");\n"
"    }\n"
"\n"
"    public static void main(String[] args) {\n"
"        String output = HelloWorld.hello(\"Alice\");\n"
"        System.out.println(output);\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/java.md:64
msgid ""
"```javascript\n"
"java_binary {\n"
"    name: \"helloworld_jni\",\n"
"    srcs: [\"HelloWorld.java\"],\n"
"    main_class: \"HelloWorld\",\n"
"    required: [\"libhello_jni\"],\n"
"}\n"
"```"
msgstr ""

#: src/android/interoperability/java.md:73
msgid "Finally, you can build, sync, and run the binary:"
msgstr ""
"–ù–∞—Ä–µ—à—Ç—ñ, –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª:"

#: src/android/interoperability/java.md:75
msgid ""
"```shell\n"
"m helloworld_jni\n"
"adb sync  # requires adb root && adb remount\n"
"adb shell /system/bin/helloworld_jni\n"
"```"
msgstr ""

#: src/exercises/android/morning.md:3
msgid ""
"This is a group exercise: We will look at one of the projects you work with "
"and try to integrate some Rust into it. Some suggestions:"
msgstr ""
"–¶–µ –≥—Ä—É–ø–æ–≤–∞ –≤–ø—Ä–∞–≤–∞: –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –æ–¥–∏–Ω —ñ–∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤, –∑ —è–∫–∏–º –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ, —ñ "
"—Å–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ –≤ –Ω—å–æ–≥–æ —Ç—Ä–æ—Ö–∏ Rust. –î–µ—è–∫—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:"

#: src/exercises/android/morning.md:6
msgid "Call your AIDL service with a client written in Rust."
msgstr "–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –¥–æ —Å–ª—É–∂–±–∏ AIDL —ñ–∑ –∫–ª—ñ—î–Ω—Ç–æ–º, –Ω–∞–ø–∏—Å–∞–Ω–∏–º –º–æ–≤–æ—é Rust."

#: src/exercises/android/morning.md:8
msgid "Move a function from your project to Rust and call it."
msgstr "–ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑—ñ —Å–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É –≤ Rust —ñ –≤–∏–∫–ª–∏—á—Ç–µ —ó—ó."

#: src/exercises/android/morning.md:12
msgid ""
"No solution is provided here since this is open-ended: it relies on someone "
"in the class having a piece of code which you can turn in to Rust on the fly."
msgstr ""
"–¢—É—Ç –Ω–µ –Ω–∞–¥–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–æ —î –≤—ñ–¥–∫—Ä–∏—Ç–∏–º: –≤–æ–Ω–æ –ø–æ–∫–ª–∞–¥–∞—î—Ç—å—Å—è "
"–Ω–∞ —Ç–µ, —â–æ —Ö—Ç–æ—Å—å —É –∫–ª–∞—Å—ñ –º–∞—î —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥—É, —è–∫–∏–π –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç–∏ Rust –Ω–∞ "
"–ª—å–æ—Ç—É."

#: src/bare-metal.md:1
msgid "Welcome to Bare Metal Rust"
msgstr "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Bare Metal Rust"

#: src/bare-metal.md:3
msgid ""
"This is a standalone one-day course about bare-metal Rust, aimed at people "
"who are familiar with the basics of Rust (perhaps from completing the "
"Comprehensive Rust course), and ideally also have some experience with bare-"
"metal programming in some other language such as C."
msgstr ""
"–¶–µ –æ–∫—Ä–µ–º–∏–π –æ–¥–Ω–æ–¥–µ–Ω–Ω–∏–π –∫—É—Ä—Å –ø—Ä–æ Bare-metal Rust, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ª—é–¥–µ–π, —è–∫—ñ "
"–∑–Ω–∞–π–æ–º—ñ –∑ –æ—Å–Ω–æ–≤–∞–º–∏ Rust (–º–æ–∂–ª–∏–≤–æ, –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∫—É—Ä—Å—É Rust), "
"–∞ –≤ —ñ–¥–µ–∞–ª—ñ —Ç–∞–∫–æ–∂ –º–∞—é—Ç—å –ø–µ–≤–Ω–∏–π –¥–æ—Å–≤—ñ–¥ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–º—É –∑–∞–ª—ñ–∑—ñ —è–∫–æ—é—Å—å "
"—ñ–Ω—à–æ—é –º–æ–≤–æ—é —Ç–∞–∫—ñ —è–∫ C."

#: src/bare-metal.md:7
msgid ""
"Today we will talk about 'bare-metal' Rust: running Rust code without an OS "
"underneath us. This will be divided into several parts:"
msgstr ""
"–°—å–æ–≥–æ–¥–Ω—ñ –º–∏ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ –ø—Ä–æ Rust –Ω–∞ –≥–æ–ª–æ–º—É –∑–∞–ª—ñ–∑—ñ: –∑–∞–ø—É—Å–∫ –∫–æ–¥—É Rust –±–µ–∑ "
"–æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥ –Ω–∞–º–∏. –¶–µ –±—É–¥–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–æ –Ω–∞ –∫—ñ–ª—å–∫–∞ —á–∞—Å—Ç–∏–Ω:"

#: src/bare-metal.md:10
msgid "What is `no_std` Rust?"
msgstr "–©–æ —Ç–∞–∫–µ `no_std` Rust?"

#: src/bare-metal.md:11
msgid "Writing firmware for microcontrollers."
msgstr "–ù–∞–ø–∏—Å–∞–Ω–Ω—è –º—ñ–∫—Ä–æ–ø—Ä–æ–≥—Ä–∞–º –¥–ª—è –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤."

#: src/bare-metal.md:12
msgid "Writing bootloader / kernel code for application processors."
msgstr "–ù–∞–ø–∏—Å–∞–Ω–Ω—è –∫–æ–¥—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á–∞/—è–¥—Ä–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å–æ—Ä—ñ–≤ –ø—Ä–æ–≥—Ä–∞–º."

#: src/bare-metal.md:13
msgid "Some useful crates for bare-metal Rust development."
msgstr "–ö—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å–Ω–∏—Ö —è—â–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏ Rust –Ω–∞ –≥–æ–ª–æ–º—É –∑–∞–ª—ñ–∑—ñ."

#: src/bare-metal.md:15
msgid ""
"For the microcontroller part of the course we will use the [BBC micro:bit]"
"(https://microbit.org/) v2 as an example. It's a [development board](https://"
"tech.microbit.org/hardware/) based on the Nordic nRF51822 microcontroller "
"with some LEDs and buttons, an I2C-connected accelerometer and compass, and "
"an on-board SWD debugger."
msgstr ""
"–î–ª—è —á–∞—Å—Ç–∏–Ω–∏ –∫—É—Ä—Å—É, –ø—Ä–∏—Å–≤—è—á–µ–Ω–æ—ó –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—É, –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ [BBC micro:"
"bit](https://microbit.org/) v2 —è–∫ –ø—Ä–∏–∫–ª–∞–¥. –¶–µ [–ø–ª–∞—Ç–∞ —Ä–æ–∑—Ä–æ–±–∫–∏](https://tech."
"microbit.org/hardware/) –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ Nordic nRF51822 —ñ–∑ –¥–µ—è–∫–∏–º–∏ "
"—Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥–∞–º–∏ —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏, –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–æ–º —ñ –∫–æ–º–ø–∞—Å–æ–º, –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–º–∏ –¥–æ I2C, —ñ "
"–≤–±—É–¥–æ–≤–∞–Ω–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂—É–≤–∞—á–µ–º SWD."

#: src/bare-metal.md:20
msgid ""
"To get started, install some tools we'll need later. On gLinux or Debian:"
msgstr ""
"–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –¥–µ—è–∫—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏, —è–∫—ñ –Ω–∞–º –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ. –£ "
"gLinux –∞–±–æ Debian:"

#: src/bare-metal.md:22
msgid ""
"```bash\n"
"sudo apt install gcc-aarch64-linux-gnu gdb-multiarch libudev-dev picocom pkg-"
"config qemu-system-arm\n"
"rustup update\n"
"rustup target add aarch64-unknown-none thumbv7em-none-eabihf\n"
"rustup component add llvm-tools-preview\n"
"cargo install cargo-binutils cargo-embed\n"
"```"
msgstr ""

#: src/bare-metal.md:30
msgid ""
"And give users in the `plugdev` group access to the micro:bit programmer:"
msgstr ""
"–Ü –Ω–∞–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —É –≥—Ä—É–ø—ñ `plugdev` –¥–æ—Å—Ç—É–ø –¥–æ –ø—Ä–æ–≥—Ä–∞–º–∞—Ç–æ—Ä–∞ micro:bit:"

#: src/bare-metal.md:32
msgid ""
"```bash\n"
"echo 'SUBSYSTEM==\"usb\", ATTR{idVendor}==\"0d28\", MODE=\"0664\", "
"GROUP=\"plugdev\"' |\\\n"
"  sudo tee /etc/udev/rules.d/50-microbit.rules\n"
"sudo udevadm control --reload-rules\n"
"```"
msgstr ""

#: src/bare-metal.md:38
msgid "On MacOS:"
msgstr "–£ MacOS:"

#: src/bare-metal.md:40
msgid ""
"```bash\n"
"xcode-select --install\n"
"brew install gdb picocom qemu\n"
"brew install --cask gcc-aarch64-embedded\n"
"rustup update\n"
"rustup target add aarch64-unknown-none thumbv7em-none-eabihf\n"
"rustup component add llvm-tools-preview\n"
"cargo install cargo-binutils cargo-embed\n"
"```"
msgstr ""

#: src/bare-metal/no_std.md:1
msgid "`no_std`"
msgstr "`no_std`"

#: src/bare-metal/no_std.md:7
msgid "`core`"
msgstr "`—è–¥—Ä–æ`"

#: src/bare-metal/no_std.md:12 src/bare-metal/alloc.md:1
msgid "`alloc`"
msgstr "`alloc`"

#: src/bare-metal/no_std.md:17
msgid "`std`"
msgstr "`std`"

#: src/bare-metal/no_std.md:24
msgid "Slices, `&str`, `CStr`"
msgstr "–§—Ä–∞–≥–º–µ–Ω—Ç–∏, `&str`, `CStr`"

#: src/bare-metal/no_std.md:25
msgid "`NonZeroU8`..."
msgstr "`NonZeroU8`..."

#: src/bare-metal/no_std.md:26
msgid "`Option`, `Result`"
msgstr "`–í–∞—Ä—ñ–∞–Ω—Ç`, `–†–µ–∑—É–ª—å—Ç–∞—Ç`"

#: src/bare-metal/no_std.md:27
msgid "`Display`, `Debug`, `write!`..."
msgstr "`–ü–æ–∫–∞–∑–∞—Ç–∏`, `–ù–∞–ª–∞–≥–æ–¥–∏—Ç–∏`, `–∑–∞–ø–∏—Å–∞—Ç–∏!`..."

#: src/bare-metal/no_std.md:29
msgid "`panic!`, `assert_eq!`..."
msgstr "`panic!`, `assert_eq!`..."

#: src/bare-metal/no_std.md:30
msgid "`NonNull` and all the usual pointer-related functions"
msgstr "`NonNull` —ñ –≤—Å—ñ –∑–≤–∏—á–∞–π–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ –∑ –ø–æ–∫–∞–∂—á–∏–∫–∞–º–∏"

#: src/bare-metal/no_std.md:31
msgid "`Future` and `async`/`await`"
msgstr "`Future` —ñ `async`/`await`"

#: src/bare-metal/no_std.md:32
msgid "`fence`, `AtomicBool`, `AtomicPtr`, `AtomicU32`..."
msgstr "`–ø–∞—Ä–∫–∞–Ω`, `AtomicBool`, `AtomicPtr`, `AtomicU32`..."

#: src/bare-metal/no_std.md:33
msgid "`Duration`"
msgstr "`–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å`"

#: src/bare-metal/no_std.md:38
msgid "`Box`, `Cow`, `Arc`, `Rc`"
msgstr "`Box`, `Cow`, `Arc`, `Rc`"

#: src/bare-metal/no_std.md:39
msgid "`Vec`, `BinaryHeap`, `BtreeMap`, `LinkedList`, `VecDeque`"
msgstr "`Vec`, `BinaryHeap`, `BtreeMap`, `LinkedList`, `VecDeque`"

#: src/bare-metal/no_std.md:40
msgid "`String`, `CString`, `format!`"
msgstr "`–†—è–¥–æ–∫`, `CString`, `—Ñ–æ—Ä–º–∞—Ç!`"

#: src/bare-metal/no_std.md:45
msgid "`Error`"
msgstr "`–ü–æ–º–∏–ª–∫–∞`"

#: src/bare-metal/no_std.md:47
msgid "`Mutex`, `Condvar`, `Barrier`, `Once`, `RwLock`, `mpsc`"
msgstr "`Mutex`, `Condvar`, `Barrier`, `Once`, `RwLock`, `mpsc`"

#: src/bare-metal/no_std.md:48
msgid "`File` and the rest of `fs`"
msgstr "`–§–∞–π–ª` —Ç–∞ —Ä–µ—à—Ç–∞ `fs`"

#: src/bare-metal/no_std.md:49
msgid "`println!`, `Read`, `Write`, `Stdin`, `Stdout` and the rest of `io`"
msgstr "`println!`, `Read`, `Write`, `Stdin`, `Stdout` —Ç–∞ —Ä–µ—à—Ç–∞ `io`"

#: src/bare-metal/no_std.md:50
msgid "`Path`, `OsString`"
msgstr "`–®–ª—è—Ö`, `OsString`"

#: src/bare-metal/no_std.md:51
msgid "`net`"
msgstr "`net`"

#: src/bare-metal/no_std.md:52
msgid "`Command`, `Child`, `ExitCode`"
msgstr "`Command`, `Child`, `ExitCode`"

#: src/bare-metal/no_std.md:53
msgid "`spawn`, `sleep` and the rest of `thread`"
msgstr "`spawn`, `sleep` —Ç–∞ —Ä–µ—à—Ç–∞ `thread`"

#: src/bare-metal/no_std.md:54
msgid "`SystemTime`, `Instant`"
msgstr "`–°–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å`, `–ú–∏—Ç—Ç—î–≤–æ`"

#: src/bare-metal/no_std.md:62
msgid "`HashMap` depends on RNG."
msgstr "`HashMap` –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ RNG."

#: src/bare-metal/no_std.md:63
msgid "`std` re-exports the contents of both `core` and `alloc`."
msgstr "`std` –ø–æ–≤—Ç–æ—Ä–Ω–æ –µ–∫—Å–ø–æ—Ä—Ç—É—î –≤–º—ñ—Å—Ç —è–∫ `core`, —Ç–∞–∫ —ñ `alloc`."

#: src/bare-metal/minimal.md:1
msgid "A minimal `no_std` program"
msgstr "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ `no_std`"

#: src/bare-metal/minimal.md:3
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"use core::panic::PanicInfo;\n"
"\n"
"#[panic_handler]\n"
"fn panic(_panic: &PanicInfo) -> ! {\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/minimal.md:17
msgid "This will compile to an empty binary."
msgstr "–¶–µ –±—É–¥–µ —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–æ –≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª."

#: src/bare-metal/minimal.md:18
msgid "`std` provides a panic handler; without it we must provide our own."
msgstr ""

#: src/bare-metal/minimal.md:19
msgid "It can also be provided by another crate, such as `panic-halt`."
msgstr "–¶–µ —Ç–∞–∫–æ–∂ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–æ —ñ–Ω—à–∏–º —è—â–∏–∫–æ–º, —Ç–∞–∫–∏–º —è–∫ `panic-halt`."

#: src/bare-metal/minimal.md:20
msgid ""
"Depending on the target, you may need to compile with `panic = \"abort\"` to "
"avoid an error about `eh_personality`."
msgstr ""
"–ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–µ—Ç–∏, –≤–∞–º –º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è —Å–∫–æ–º–ø—ñ–ª—é–≤–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `panic = "
"\"abort\"`, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏ —â–æ–¥–æ `eh_personality`."

#: src/bare-metal/minimal.md:22
msgid ""
"Note that there is no `main` or any other entry point; it's up to you to "
"define your own entry point. This will typically involve a linker script and "
"some assembly code to set things up ready for Rust code to run."
msgstr ""

#: src/bare-metal/alloc.md:3
msgid ""
"To use `alloc` you must implement a [global (heap) allocator](https://doc."
"rust-lang.org/stable/std/alloc/trait.GlobalAlloc.html)."
msgstr ""
"–©–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `alloc`, –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ [–≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª—å–Ω–∏–∫ "
"(–∫—É—á—ñ)](https://doc.rust-lang.org/stable/std/alloc/trait.GlobalAlloc.html)."

#: src/bare-metal/alloc.md:6
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"extern crate alloc;\n"
"extern crate panic_halt as _;\n"
"\n"
"use alloc::string::ToString;\n"
"use alloc::vec::Vec;\n"
"use buddy_system_allocator::LockedHeap;\n"
"\n"
"#[global_allocator]\n"
"static HEAP_ALLOCATOR: LockedHeap<32> = LockedHeap::<32>::new();\n"
"\n"
"static mut HEAP: [u8; 65536] = [0; 65536];\n"
"\n"
"pub fn entry() {\n"
"    // Safe because `HEAP` is only used here and `entry` is only called "
"once.\n"
"    unsafe {\n"
"        // Give the allocator some memory to allocate.\n"
"        HEAP_ALLOCATOR\n"
"            .lock()\n"
"            .init(HEAP.as_mut_ptr() as usize, HEAP.len());\n"
"    }\n"
"\n"
"    // Now we can do things that require heap allocation.\n"
"    let mut v = Vec::new();\n"
"    v.push(\"A string\".to_string());\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/alloc.md:39
msgid ""
"`buddy_system_allocator` is a third-party crate implementing a basic buddy "
"system allocator. Other crates are available, or you can write your own or "
"hook into your existing allocator."
msgstr ""
"`buddy_system_allocator` ‚Äî —Ü–µ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π —è—â–∏–∫, —è–∫–∏–π —Ä–µ–∞–ª—ñ–∑—É—î –±–∞–∑–æ–≤–∏–π "
"—Å–∏—Å—Ç–µ–º–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª—å–Ω–∏–∫ –ø—Ä–∏—è—Ç–µ–ª—ñ–≤. –î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—à—ñ —è—â–∏–∫–∏, –∞–±–æ –≤–∏ –º–æ–∂–µ—Ç–µ "
"–Ω–∞–ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π –∞–±–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¥–æ –Ω–∞—è–≤–Ω–æ–≥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—å–Ω–∏–∫–∞."

#: src/bare-metal/alloc.md:41
msgid ""
"The const parameter of `LockedHeap` is the max order of the allocator; i.e. "
"in this case it can allocate regions of up to 2\\*\\*32 bytes."
msgstr ""

#: src/bare-metal/alloc.md:43
msgid ""
"If any crate in your dependency tree depends on `alloc` then you must have "
"exactly one global allocator defined in your binary. Usually this is done in "
"the top-level binary crate."
msgstr ""
"–Ø–∫—â–æ –±—É–¥—å-—è–∫–∏–π —è—â–∏–∫ —É –≤–∞—à–æ–º—É –¥–µ—Ä–µ–≤—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ `alloc`, —Ç–æ–¥—ñ "
"–≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ —Ç–æ—á–Ω–æ –æ–¥–∏–Ω –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª—å–Ω–∏–∫, –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —É –≤–∞—à–æ–º—É "
"–±—ñ–Ω–∞—Ä–Ω–æ–º—É —Ñ–∞–π–ª—ñ. –ó–∞–∑–≤–∏—á–∞–π —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è —É –±—ñ–Ω–∞—Ä–Ω–æ–º—É —è—â–∏–∫—É –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è."

#: src/bare-metal/alloc.md:45
msgid ""
"`extern crate panic_halt as _` is necessary to ensure that the `panic_halt` "
"crate is linked in so we get its panic handler."
msgstr ""
"`extern crate panic_halt as _` –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ "
"—è—â–∏–∫ `panic_halt` –ø–æ–≤‚Äô—è–∑–∞–Ω–∏–π, —â–æ–± –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –π–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–∞–Ω—ñ–∫–∏."

#: src/bare-metal/alloc.md:47
msgid "This example will build but not run, as it doesn't have an entry point."
msgstr ""
"–¶–µ–π –ø—Ä–∏–∫–ª–∞–¥ –∑–±–∏—Ä–∞—Ç–∏–º–µ—Ç—å—Å—è, –∞–ª–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏–º–µ—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –Ω–µ –º–∞—î —Ç–æ—á–∫–∏ "
"–≤—Ö–æ–¥—É."

#: src/bare-metal/microcontrollers.md:3
msgid ""
"The `cortex_m_rt` crate provides (among other things) a reset handler for "
"Cortex M microcontrollers."
msgstr ""
"–Ø—â–∏–∫ `cortex_m_rt` –º—ñ—Å—Ç–∏—Ç—å (—Å–µ—Ä–µ–¥ —ñ–Ω—à–æ–≥–æ) –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∏–¥–∞–Ω–Ω—è –¥–ª—è "
"–º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤ Cortex M."

#: src/bare-metal/microcontrollers.md:5
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"extern crate panic_halt as _;\n"
"\n"
"mod interrupts;\n"
"\n"
"use cortex_m_rt::entry;\n"
"\n"
"#[entry]\n"
"fn main() -> ! {\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers.md:21
msgid ""
"Next we'll look at how to access peripherals, with increasing levels of "
"abstraction."
msgstr ""
"–î–∞–ª—ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ, —è–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø–µ—Ä–∏—Ñ–µ—Ä—ñ–π–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —ñ–∑ "
"–ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è–º —Ä—ñ–≤–Ω—è –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—ó."

#: src/bare-metal/microcontrollers.md:25
msgid ""
"The `cortex_m_rt::entry` macro requires that the function have type `fn() -"
"> !`, because returning to the reset handler doesn't make sense."
msgstr ""
"–ú–∞–∫—Ä–æ—Å `cortex_m_rt::entry` –≤–∏–º–∞–≥–∞—î, —â–æ–± —Ñ—É–Ω–∫—Ü—ñ—è –º–∞–ª–∞ —Ç–∏–ø `fn() -> !`, "
"–æ—Å–∫—ñ–ª—å–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –Ω–µ –º–∞—î —Å–µ–Ω—Å—É."

#: src/bare-metal/microcontrollers.md:27
msgid "Run the example with `cargo embed --bin minimal`"
msgstr "–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ —ñ–∑ `cargo embed --bin minimal`"

#: src/bare-metal/microcontrollers/mmio.md:3
msgid ""
"Most microcontrollers access peripherals via memory-mapped IO. Let's try "
"turning on an LED on our micro:bit:"
msgstr ""
"–ë—ñ–ª—å—à—ñ—Å—Ç—å –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤ –æ—Ç—Ä–∏–º—É—é—Ç—å –¥–æ—Å—Ç—É–ø –¥–æ –ø–µ—Ä–∏—Ñ–µ—Ä—ñ–π–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —á–µ—Ä–µ–∑ "
"–≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–º‚Äô—è—Ç—å IO. –î–∞–≤–∞–π—Ç–µ —Å–ø—Ä–æ–±—É—î–º–æ –≤–∫–ª—é—á–∏—Ç–∏ —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥ –Ω–∞ –Ω–∞—à–æ–º—É "
"micro:bit:"

#: src/bare-metal/microcontrollers/mmio.md:6
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"extern crate panic_halt as _;\n"
"\n"
"mod interrupts;\n"
"\n"
"use core::mem::size_of;\n"
"use cortex_m_rt::entry;\n"
"\n"
"/// GPIO port 0 peripheral address\n"
"const GPIO_P0: usize = 0x5000_0000;\n"
"\n"
"// GPIO peripheral offsets\n"
"const PIN_CNF: usize = 0x700;\n"
"const OUTSET: usize = 0x508;\n"
"const OUTCLR: usize = 0x50c;\n"
"\n"
"// PIN_CNF fields\n"
"const DIR_OUTPUT: u32 = 0x1;\n"
"const INPUT_DISCONNECT: u32 = 0x1 << 1;\n"
"const PULL_DISABLED: u32 = 0x0 << 2;\n"
"const DRIVE_S0S1: u32 = 0x0 << 8;\n"
"const SENSE_DISABLED: u32 = 0x0 << 16;\n"
"\n"
"#[entry]\n"
"fn main() -> ! {\n"
"    // Configure GPIO 0 pins 21 and 28 as push-pull outputs.\n"
"    let pin_cnf_21 = (GPIO_P0 + PIN_CNF + 21 * size_of::<u32>()) as *mut "
"u32;\n"
"    let pin_cnf_28 = (GPIO_P0 + PIN_CNF + 28 * size_of::<u32>()) as *mut "
"u32;\n"
"    // Safe because the pointers are to valid peripheral control registers, "
"and\n"
"    // no aliases exist.\n"
"    unsafe {\n"
"        pin_cnf_21.write_volatile(\n"
"            DIR_OUTPUT | INPUT_DISCONNECT | PULL_DISABLED | DRIVE_S0S1 | "
"SENSE_DISABLED,\n"
"        );\n"
"        pin_cnf_28.write_volatile(\n"
"            DIR_OUTPUT | INPUT_DISCONNECT | PULL_DISABLED | DRIVE_S0S1 | "
"SENSE_DISABLED,\n"
"        );\n"
"    }\n"
"\n"
"    // Set pin 28 low and pin 21 high to turn the LED on.\n"
"    let gpio0_outset = (GPIO_P0 + OUTSET) as *mut u32;\n"
"    let gpio0_outclr = (GPIO_P0 + OUTCLR) as *mut u32;\n"
"    // Safe because the pointers are to valid peripheral control registers, "
"and\n"
"    // no aliases exist.\n"
"    unsafe {\n"
"        gpio0_outclr.write_volatile(1 << 28);\n"
"        gpio0_outset.write_volatile(1 << 21);\n"
"    }\n"
"\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:64
msgid ""
"GPIO 0 pin 21 is connected to the first column of the LED matrix, and pin 28 "
"to the first row."
msgstr ""
"–í–∏–≤—ñ–¥ 21 GPIO 0 –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ –ø–µ—Ä—à–æ–≥–æ —Å—Ç–æ–≤–ø—Ü—è —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥–Ω–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ, –∞ "
"–≤–∏—Å–Ω–æ–≤–æ–∫ 28 ‚Äì –¥–æ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥—É."

#: src/bare-metal/microcontrollers/mmio.md:66
#: src/bare-metal/microcontrollers/pacs.md:59
#: src/bare-metal/microcontrollers/hals.md:43
#: src/bare-metal/microcontrollers/board-support.md:34
msgid "Run the example with:"
msgstr "–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é:"

#: src/bare-metal/microcontrollers/mmio.md:68
msgid ""
"```sh\n"
"cargo embed --bin mmio\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md:1
msgid "Peripheral Access Crates"
msgstr "–Ø—â–∏–∫–∏ –ø–µ—Ä–∏—Ñ–µ—Ä—ñ–π–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É"

#: src/bare-metal/microcontrollers/pacs.md:3
msgid ""
"[`svd2rust`](https://crates.io/crates/svd2rust) generates mostly-safe Rust "
"wrappers for memory-mapped peripherals from [CMSIS-SVD](https://www.keil.com/"
"pack/doc/CMSIS/SVD/html/index.html) files."
msgstr ""
"[`svd2rust`](https://crates.io/crates/svd2rust) —Å—Ç–≤–æ—Ä—é—î –∑–¥–µ–±—ñ–ª—å—à–æ–≥–æ –±–µ–∑–ø–µ—á–Ω—ñ "
"–æ–±–æ–ª–æ–Ω–∫–∏ Rust –¥–ª—è –ø–µ—Ä–∏—Ñ–µ—Ä—ñ–π–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —ñ–∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –ø–∞–º‚Äô—è—Ç—ñ –∑ [CMSIS-"
"SVD](https://www.keil.com/pack/doc/ —Ñ–∞–π–ª–∏ CMSIS/SVD/html/index.html)."

#: src/bare-metal/microcontrollers/pacs.md:7
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"extern crate panic_halt as _;\n"
"\n"
"use cortex_m_rt::entry;\n"
"use nrf52833_pac::Peripherals;\n"
"\n"
"#[entry]\n"
"fn main() -> ! {\n"
"    let p = Peripherals::take().unwrap();\n"
"    let gpio0 = p.P0;\n"
"\n"
"    // Configure GPIO 0 pins 21 and 28 as push-pull outputs.\n"
"    gpio0.pin_cnf[21].write(|w| {\n"
"        w.dir().output();\n"
"        w.input().disconnect();\n"
"        w.pull().disabled();\n"
"        w.drive().s0s1();\n"
"        w.sense().disabled();\n"
"        w\n"
"    });\n"
"    gpio0.pin_cnf[28].write(|w| {\n"
"        w.dir().output();\n"
"        w.input().disconnect();\n"
"        w.pull().disabled();\n"
"        w.drive().s0s1();\n"
"        w.sense().disabled();\n"
"        w\n"
"    });\n"
"\n"
"    // Set pin 28 low and pin 21 high to turn the LED on.\n"
"    gpio0.outclr.write(|w| w.pin28().clear());\n"
"    gpio0.outset.write(|w| w.pin21().set());\n"
"\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md:49
msgid ""
"SVD (System View Description) files are XML files typically provided by "
"silicon vendors which describe the memory map of the device."
msgstr ""
"–§–∞–π–ª–∏ SVD (System View Description) ‚Äî —Ü–µ XML-—Ñ–∞–π–ª–∏, —è–∫—ñ –∑–∞–∑–≤–∏—á–∞–π –Ω–∞–¥–∞—é—Ç—å "
"–ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∏ –∫—Ä–µ–º–Ω—ñ—é, —è–∫—ñ –æ–ø–∏—Å—É—é—Ç—å –∫–∞—Ä—Ç—É –ø–∞–º‚Äô—è—Ç—ñ –ø—Ä–∏—Å—Ç—Ä–æ—é."

#: src/bare-metal/microcontrollers/pacs.md:51
msgid ""
"They are organised by peripheral, register, field and value, with names, "
"descriptions, addresses and so on."
msgstr ""
"–í–æ–Ω–∏ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤–∞–Ω—ñ –∑–∞ –ø–µ—Ä–∏—Ñ–µ—Ä—ñ—î—é, —Ä–µ—î—Å—Ç—Ä–æ–º, –ø–æ–ª–µ–º —ñ –∑–Ω–∞—á–µ–Ω–Ω—è–º, –∑ –Ω–∞–∑–≤–∞–º–∏, "
"–æ–ø–∏—Å–∞–º–∏, –∞–¥—Ä–µ—Å–∞–º–∏ —Ç–æ—â–æ."

#: src/bare-metal/microcontrollers/pacs.md:53
msgid ""
"SVD files are often buggy and incomplete, so there are various projects "
"which patch the mistakes, add missing details, and publish the generated "
"crates."
msgstr ""
"–§–∞–π–ª–∏ SVD —á–∞—Å—Ç–æ —î –ø–æ–º–∏–ª–∫–æ–≤–∏–º–∏ —Ç–∞ –Ω–µ–ø–æ–≤–Ω–∏–º–∏, —Ç–æ–º—É —ñ—Å–Ω—É—é—Ç—å —Ä—ñ–∑–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏, —è–∫—ñ "
"–≤–∏–ø—Ä–∞–≤–ª—è—é—Ç—å –ø–æ–º–∏–ª–∫–∏, –¥–æ–¥–∞—é—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–µ—Ç–∞–ª—ñ —Ç–∞ –ø—É–±–ª—ñ–∫—É—é—Ç—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —è—â–∏–∫–∏."

#: src/bare-metal/microcontrollers/pacs.md:55
msgid "`cortex-m-rt` provides the vector table, among other things."
msgstr "`cortex-m-rt` –Ω–∞–¥–∞—î –≤–µ–∫—Ç–æ—Ä–Ω—É —Ç–∞–±–ª–∏—Ü—é, —Å–µ—Ä–µ–¥ —ñ–Ω—à–æ–≥–æ."

#: src/bare-metal/microcontrollers/pacs.md:56
msgid ""
"If you `cargo install cargo-binutils` then you can run `cargo objdump --bin "
"pac -- -d --no-show-raw-insn` to see the resulting binary."
msgstr ""
"–Ø–∫—â–æ –≤–∏ `cargo install cargo-binutils`, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ `cargo objdump --"
"bin pac -- -d --no-show-raw-insn`, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª."

#: src/bare-metal/microcontrollers/pacs.md:61
msgid ""
"```sh\n"
"cargo embed --bin pac\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/hals.md:1
msgid "HAL crates"
msgstr "–Ø—â–∏–∫–∏ HAL"

#: src/bare-metal/microcontrollers/hals.md:3
msgid ""
"[HAL crates](https://github.com/rust-embedded/awesome-embedded-rust#hal-"
"implementation-crates) for many microcontrollers provide wrappers around "
"various peripherals. These generally implement traits from [`embedded-hal`]"
"(https://crates.io/crates/embedded-hal)."
msgstr ""
"[–Ø—â–∏–∫–∏ HAL](https://github.com/rust-embedded/awesome-embedded-rust#hal-"
"implementation-crates) –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –æ–±–æ–ª–æ–Ω–∫–∏ "
"–¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–µ—Ä–∏—Ñ–µ—Ä—ñ–π–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤. –ó–∞–∑–≤–∏—á–∞–π –≤–æ–Ω–∏ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å –æ–∑–Ω–∞–∫–∏ –∑ "
"[`embedded-hal`](https://crates.io/crates/embedded-hal)."

#: src/bare-metal/microcontrollers/hals.md:7
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"extern crate panic_halt as _;\n"
"\n"
"use cortex_m_rt::entry;\n"
"use nrf52833_hal::gpio::{p0, Level};\n"
"use nrf52833_hal::pac::Peripherals;\n"
"use nrf52833_hal::prelude::*;\n"
"\n"
"#[entry]\n"
"fn main() -> ! {\n"
"    let p = Peripherals::take().unwrap();\n"
"\n"
"    // Create HAL wrapper for GPIO port 0.\n"
"    let gpio0 = p0::Parts::new(p.P0);\n"
"\n"
"    // Configure GPIO 0 pins 21 and 28 as push-pull outputs.\n"
"    let mut col1 = gpio0.p0_28.into_push_pull_output(Level::High);\n"
"    let mut row1 = gpio0.p0_21.into_push_pull_output(Level::Low);\n"
"\n"
"    // Set pin 28 low and pin 21 high to turn the LED on.\n"
"    col1.set_low().unwrap();\n"
"    row1.set_high().unwrap();\n"
"\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/hals.md:39
msgid ""
"`set_low` and `set_high` are methods on the `embedded_hal` `OutputPin` trait."
msgstr ""
"`set_low` —ñ `set_high` ‚Äî —Ü–µ –º–µ—Ç–æ–¥–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ `embedded_hal` `OutputPin`."

#: src/bare-metal/microcontrollers/hals.md:40
msgid ""
"HAL crates exist for many Cortex-M and RISC-V devices, including various "
"STM32, GD32, nRF, NXP, MSP430, AVR and PIC microcontrollers."
msgstr ""
"–Ü—Å–Ω—É—é—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ HAL –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ Cortex-M —ñ RISC-V, –≤–∫–ª—é—á–∞—é—á–∏ "
"—Ä—ñ–∑–Ω—ñ –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ STM32, GD32, nRF, NXP, MSP430, AVR —ñ PIC."

#: src/bare-metal/microcontrollers/hals.md:45
msgid ""
"```sh\n"
"cargo embed --bin hal\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md:1
msgid "Board support crates"
msgstr "–ë–æ—Ä—Ç–æ–≤—ñ –æ–ø–æ—Ä–Ω—ñ —è—â–∏–∫–∏"

#: src/bare-metal/microcontrollers/board-support.md:3
msgid ""
"Board support crates provide a further level of wrapping for a specific "
"board for convenience."
msgstr ""
"–Ø—â–∏–∫–∏ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –¥–æ—â–æ–∫ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –æ–±–≥–æ—Ä—Ç–∞–Ω–Ω—è –¥–ª—è "
"–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–æ—à–∫–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ."

#: src/bare-metal/microcontrollers/board-support.md:5
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"extern crate panic_halt as _;\n"
"\n"
"use cortex_m_rt::entry;\n"
"use microbit::hal::prelude::*;\n"
"use microbit::Board;\n"
"\n"
"#[entry]\n"
"fn main() -> ! {\n"
"    let mut board = Board::take().unwrap();\n"
"\n"
"    board.display_pins.col1.set_low().unwrap();\n"
"    board.display_pins.row1.set_high().unwrap();\n"
"\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md:28
msgid ""
"In this case the board support crate is just providing more useful names, "
"and a bit of initialisation."
msgstr ""
"–£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –æ–ø–æ—Ä–Ω–∏–π —è—â–∏–∫ –ø–ª–∞—Ç–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥–∞—î –∫–æ—Ä–∏—Å–Ω—ñ—à—ñ –Ω–∞–∑–≤–∏ —Ç–∞ —Ç—Ä–æ—Ö–∏ "
"—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó."

#: src/bare-metal/microcontrollers/board-support.md:30
msgid ""
"The crate may also include drivers for some on-board devices outside of the "
"microcontroller itself."
msgstr ""
"–Ø—â–∏–∫ —Ç–∞–∫–æ–∂ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∏ –¥–ª—è –¥–µ—è–∫–∏—Ö –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –∑–∞ –º–µ–∂–∞–º–∏ "
"—Å–∞–º–æ–≥–æ –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞."

#: src/bare-metal/microcontrollers/board-support.md:32
msgid "`microbit-v2` includes a simple driver for the LED matrix."
msgstr "`microbit-v2` –º—ñ—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç–∏–π –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥–Ω–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ."

#: src/bare-metal/microcontrollers/board-support.md:36
msgid ""
"```sh\n"
"cargo embed --bin board_support\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:1
msgid "The type state pattern"
msgstr "–®–∞–±–ª–æ–Ω —Å—Ç–∞–Ω—É —Ç–∏–ø—É"

#: src/bare-metal/microcontrollers/type-state.md:3
msgid ""
"```rust,editable,compile_fail\n"
"#[entry]\n"
"fn main() -> ! {\n"
"    let p = Peripherals::take().unwrap();\n"
"    let gpio0 = p0::Parts::new(p.P0);\n"
"\n"
"    let pin: P0_01<Disconnected> = gpio0.p0_01;\n"
"\n"
"    // let gpio0_01_again = gpio0.p0_01; // Error, moved.\n"
"    let pin_input: P0_01<Input<Floating>> = pin.into_floating_input();\n"
"    if pin_input.is_high().unwrap() {\n"
"        // ...\n"
"    }\n"
"    let mut pin_output: P0_01<Output<OpenDrain>> = pin_input\n"
"        .into_open_drain_output(OpenDrainConfig::Disconnect0Standard1, "
"Level::Low);\n"
"    pin_output.set_high().unwrap();\n"
"    // pin_input.is_high(); // Error, moved.\n"
"\n"
"    let _pin2: P0_02<Output<OpenDrain>> = gpio0\n"
"        .p0_02\n"
"        .into_open_drain_output(OpenDrainConfig::Disconnect0Standard1, "
"Level::Low);\n"
"    let _pin3: P0_03<Output<PushPull>> = gpio0.p0_03."
"into_push_pull_output(Level::Low);\n"
"\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:32
msgid ""
"Pins don't implement `Copy` or `Clone`, so only one instance of each can "
"exist. Once a pin is moved out of the port struct nobody else can take it."
msgstr ""
"–ü—ñ–Ω–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å `–ö–æ–ø—ñ—é–≤–∞—Ç–∏` –∞–±–æ `–ö–ª–æ–Ω—É–≤–∞—Ç–∏`, —Ç–æ–º—É –º–æ–∂–µ —ñ—Å–Ω—É–≤–∞—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω "
"–µ–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–∂–Ω–æ–≥–æ –∑ –Ω–∏—Ö. –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ —à—Ç–∏—Ñ—Ç –±—É–¥–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ "
"–ø–æ—Ä—Ç—É, –Ω—ñ—Ö—Ç–æ —ñ–Ω—à–∏–π –Ω–µ –∑–º–æ–∂–µ –π–æ–≥–æ –≤–∑—è—Ç–∏."

#: src/bare-metal/microcontrollers/type-state.md:34
msgid ""
"Changing the configuration of a pin consumes the old pin instance, so you "
"can‚Äôt keep use the old instance afterwards."
msgstr ""
"–ó–º—ñ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó PIN-–∫–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å—Ç–∞—Ä–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä PIN-–∫–æ–¥—É, —Ç–æ–º—É –≤–∏ "
"–Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å—Ç–∞—Ä–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –ø—ñ–∑–Ω—ñ—à–µ."

#: src/bare-metal/microcontrollers/type-state.md:36
msgid ""
"The type of a value indicates the state that it is in: e.g. in this case, "
"the configuration state of a GPIO pin. This encodes the state machine into "
"the type system, and ensures that you don't try to use a pin in a certain "
"way without properly configuring it first. Illegal state transitions are "
"caught at compile time."
msgstr ""
"–¢–∏–ø –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∫–∞–∑—É—î –Ω–∞ —Å—Ç–∞–Ω, —É —è–∫–æ–º—É –≤–æ–Ω–æ –ø–µ—Ä–µ–±—É–≤–∞—î: –Ω–∞–ø—Ä. —É —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É "
"—Å—Ç–∞–Ω –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–∞–∫—Ç—É GPIO. –¶–µ –∫–æ–¥—É—î –∫—ñ–Ω—Ü–µ–≤–∏–π –∞–≤—Ç–æ–º–∞—Ç —É —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø—ñ–≤ —ñ "
"–≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –≤–∏ –Ω–µ –Ω–∞–º–∞–≥–∞—Ç–∏–º–µ—Ç–µ—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø—ñ–Ω –ø–µ–≤–Ω–∏–º —á–∏–Ω–æ–º, –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ "
"–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–≤—à–∏ –π–æ–≥–æ –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º. –ù–µ–∑–∞–∫–æ–Ω–Ω—ñ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É –≤–∏–ª–æ–≤–ª—é—é—Ç—å—Å—è –ø—ñ–¥ "
"—á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó."

#: src/bare-metal/microcontrollers/type-state.md:40
msgid ""
"You can call `is_high` on an input pin and `set_high` on an output pin, but "
"not vice-versa."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ `is_high` –Ω–∞ –≤—Ö—ñ–¥–Ω–æ–º—É –≤–∏–≤–æ–¥—ñ —Ç–∞ `set_high` –Ω–∞ –≤–∏—Ö—ñ–¥–Ω–æ–º—É "
"–≤–∏–≤–æ–¥—ñ, –∞–ª–µ –Ω–µ –Ω–∞–≤–ø–∞–∫–∏."

#: src/bare-metal/microcontrollers/type-state.md:41
msgid "Many HAL crates follow this pattern."
msgstr "–ë–∞–≥–∞—Ç–æ —è—â–∏–∫—ñ–≤ HAL –¥–æ—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ü—ñ—î—ó –º–æ–¥–µ–ª—ñ."

#: src/bare-metal/microcontrollers/embedded-hal.md:1
msgid "`embedded-hal`"
msgstr "`embedded-hal`"

#: src/bare-metal/microcontrollers/embedded-hal.md:3
msgid ""
"The [`embedded-hal`](https://crates.io/crates/embedded-hal) crate provides a "
"number of traits covering common microcontroller peripherals."
msgstr ""
"–Ø—â–∏–∫ [`embedded-hal`](https://crates.io/crates/embedded-hal) –Ω–∞–¥–∞—î –Ω–∏–∑–∫—É "
"—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, —â–æ –æ—Ö–æ–ø–ª—é—é—Ç—å –ø–æ—à–∏—Ä–µ–Ω—ñ –ø–µ—Ä–∏—Ñ–µ—Ä—ñ–π–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤."

#: src/bare-metal/microcontrollers/embedded-hal.md:6
msgid "GPIO"
msgstr "GPIO"

#: src/bare-metal/microcontrollers/embedded-hal.md:7
msgid "ADC"
msgstr "–ê–¶–ü"

#: src/bare-metal/microcontrollers/embedded-hal.md:8
msgid "I2C, SPI, UART, CAN"
msgstr "I2C, SPI, UART, CAN"

#: src/bare-metal/microcontrollers/embedded-hal.md:9
msgid "RNG"
msgstr "RNG"

#: src/bare-metal/microcontrollers/embedded-hal.md:10
msgid "Timers"
msgstr "–¢–∞–π–º–µ—Ä–∏"

#: src/bare-metal/microcontrollers/embedded-hal.md:11
msgid "Watchdogs"
msgstr "–°—Ç–æ—Ä–æ–∂–æ–≤—ñ —Å–æ–±–∞–∫–∏"

#: src/bare-metal/microcontrollers/embedded-hal.md:13
msgid ""
"Other crates then implement [drivers](https://github.com/rust-embedded/"
"awesome-embedded-rust#driver-crates) in terms of these traits, e.g. an "
"accelerometer driver might need an I2C or SPI bus implementation."
msgstr ""
"–Ü–Ω—à—ñ —è—â–∏–∫–∏ –ø–æ—Ç—ñ–º —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å [–¥—Ä–∞–π–≤–µ—Ä–∏](https://github.com/rust-embedded/"
"awesome-embedded-rust#driver-crates) —É —Ç–µ—Ä–º—ñ–Ω–∞—Ö —Ü–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, –Ω–∞–ø—Ä. "
"–¥—Ä–∞–π–≤–µ—Ä—É –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä–∞ –º–æ–∂–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —à–∏–Ω–∏ I2C –∞–±–æ SPI."

#: src/bare-metal/microcontrollers/embedded-hal.md:19
msgid ""
"There are implementations for many microcontrollers, as well as other "
"platforms such as Linux on Raspberry Pi."
msgstr ""
"–Ü—Å–Ω—É—é—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ–≤, –∞ —Ç–∞–∫–æ–∂ —ñ–Ω—à–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, "
"—Ç–∞–∫–∏—Ö —è–∫ Linux –Ω–∞ Raspberry Pi."

#: src/bare-metal/microcontrollers/embedded-hal.md:21
msgid ""
"There is work in progress on an `async` version of `embedded-hal`, but it "
"isn't stable yet."
msgstr ""
"–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ä–æ–±–æ—Ç–∞ –Ω–∞–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—é –≤–µ—Ä—Å—ñ—î—é `embedded-hal`, –∞–ª–µ –≤–æ–Ω–∞ —â–µ –Ω–µ —î "
"—Å—Ç–∞–±—ñ–ª—å–Ω–æ—é."

#: src/bare-metal/microcontrollers/probe-rs.md:1
msgid "`probe-rs`, `cargo-embed`"
msgstr "`probe-rs`, `cargo-embed`"

#: src/bare-metal/microcontrollers/probe-rs.md:3
msgid ""
"[probe-rs](https://probe.rs/) is a handy toolset for embedded debugging, "
"like OpenOCD but better integrated."
msgstr ""
"[probe-rs](https://probe.rs/) ‚Äî —Ü–µ –∑—Ä—É—á–Ω–∏–π –Ω–∞–±—ñ—Ä —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è "
"–≤–±—É–¥–æ–≤–∞–Ω–æ–≥–æ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è, —è–∫ OpenOCD, –∞–ª–µ –∫—Ä–∞—â–µ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω–∏–π."

#: src/bare-metal/microcontrollers/probe-rs.md:6
msgid "SWD"
msgstr "SWD"

#: src/bare-metal/microcontrollers/probe-rs.md:6
msgid " and JTAG via CMSIS-DAP, ST-Link and J-Link probes"
msgstr " —ñ JTAG —á–µ—Ä–µ–∑ –∑–æ–Ω–¥–∏ CMSIS-DAP, ST-Link —ñ J-Link"

#: src/bare-metal/microcontrollers/probe-rs.md:7
msgid "GDB stub and Microsoft "
msgstr "–ó–∞–≥–ª—É—à–∫–∞ GDB —ñ Microsoft"

#: src/bare-metal/microcontrollers/probe-rs.md:7
msgid "DAP"
msgstr "DAP"

#: src/bare-metal/microcontrollers/probe-rs.md:7
msgid " server"
msgstr " —Å–µ—Ä–≤–µ—Ä"

#: src/bare-metal/microcontrollers/probe-rs.md:8
msgid "Cargo integration"
msgstr "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –≤–∞–Ω—Ç–∞–∂—ñ–≤"

#: src/bare-metal/microcontrollers/probe-rs.md:10
msgid "`cargo-embed` is a cargo subcommand to build and flash binaries, log "
msgstr ""
"`cargo-embed` ‚Äî —Ü–µ –ø—ñ–¥–∫–æ–º–∞–Ω–¥–∞ cargo –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ñ–ª–µ—à –±—ñ–Ω–∞—Ä–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤, "
"–∂—É—Ä–Ω–∞–ª—É"

#: src/bare-metal/microcontrollers/probe-rs.md:11
msgid "RTT"
msgstr "RTT"

#: src/bare-metal/microcontrollers/probe-rs.md:11
msgid ""
" output and connect GDB. It's configured by an `Embed.toml` file in your "
"project directory."
msgstr ""
" –≤–∏–≤–µ—Å—Ç–∏ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ GDB. –í—ñ–Ω –Ω–∞–ª–∞—à—Ç–æ–≤—É—î—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ñ–∞–π–ª—É `Embed."
"toml` —É –∫–∞—Ç–∞–ª–æ–∑—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É."

#: src/bare-metal/microcontrollers/probe-rs.md:16
msgid ""
"[CMSIS-DAP](https://arm-software.github.io/CMSIS_5/DAP/html/index.html) is "
"an Arm standard protocol over USB for an in-circuit debugger to access the "
"CoreSight Debug Access Port of various Arm Cortex processors. It's what the "
"on-board debugger on the BBC micro:bit uses."
msgstr ""
"[CMSIS-DAP](https://arm-software.github.io/CMSIS_5/DAP/html/index.html) ‚Äî —Ü–µ "
"—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª Arm —á–µ—Ä–µ–∑ USB –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—Å—Ö–µ–º–Ω–æ–≥–æ –Ω–∞–ª–∞–≥–æ–¥–∂—É–≤–∞—á–∞ –¥–ª—è "
"–¥–æ—Å—Ç—É–ø—É –¥–æ –ø–æ—Ä—Ç—É –¥–æ—Å—Ç—É–ø—É CoreSight Debug —É —Ä—ñ–∑–Ω–∏—Ö –ü—Ä–æ—Ü–µ—Å–æ—Ä–∏ Arm Cortex. –¶–µ "
"—Ç–µ, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–±—É–¥–æ–≤–∞–Ω–∏–π –Ω–∞–ª–∞–≥–æ–¥–∂—É–≤–∞—á –Ω–∞ BBC micro:bit."

#: src/bare-metal/microcontrollers/probe-rs.md:19
msgid ""
"ST-Link is a range of in-circuit debuggers from ST Microelectronics, J-Link "
"is a range from SEGGER."
msgstr ""
"ST-Link ‚Äî —Ü–µ —Ä—è–¥ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—Å—Ö–µ–º–Ω–∏—Ö –Ω–∞–ª–∞–≥–æ–¥–∂—É–≤–∞—á—ñ–≤ –≤—ñ–¥ ST Microelectronics, J-"
"Link ‚Äî —Ü–µ —Ä—è–¥ –≤—ñ–¥ SEGGER."

#: src/bare-metal/microcontrollers/probe-rs.md:21
msgid ""
"The Debug Access Port is usually either a 5-pin JTAG interface or 2-pin "
"Serial Wire Debug."
msgstr ""
"–ü–æ—Ä—Ç –¥–æ—Å—Ç—É–ø—É –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –∑–∞–∑–≤–∏—á–∞–π —è–≤–ª—è—î —Å–æ–±–æ—é –∞–±–æ 5-–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π "
"—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å JTAG, –∞–±–æ 2-–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π Serial Wire Debug."

#: src/bare-metal/microcontrollers/probe-rs.md:22
msgid ""
"probe-rs is a library which you can integrate into your own tools if you "
"want to."
msgstr ""
"probe-rs ‚Äî —Ü–µ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞, —è–∫—É –≤–∏ –º–æ–∂–µ—Ç–µ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ —É –≤–ª–∞—Å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏, "
"—è–∫—â–æ —Ö–æ—á–µ—Ç–µ."

#: src/bare-metal/microcontrollers/probe-rs.md:23
msgid ""
"The [Microsoft Debug Adapter Protocol](https://microsoft.github.io/debug-"
"adapter-protocol/) lets VSCode and other IDEs debug code running on any "
"supported microcontroller."
msgstr ""
"[–ü—Ä–æ—Ç–æ–∫–æ–ª –∞–¥–∞–ø—Ç–µ—Ä–∞ –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è Microsoft](https://microsoft.github.io/debug-"
"adapter-protocol/) –¥–æ–∑–≤–æ–ª—è—î VSCode —Ç–∞ —ñ–Ω—à–∏–º IDE –Ω–∞–ª–∞–≥–æ–¥–∂—É–≤–∞—Ç–∏ –∫–æ–¥, –∑–∞–ø—É—â–µ–Ω–∏–π "
"–Ω–∞ –±—É–¥—å-—è–∫–æ–º—É –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ–º—É –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ."

#: src/bare-metal/microcontrollers/probe-rs.md:25
msgid "cargo-embed is a binary built using the probe-rs library."
msgstr ""
"cargo-embed ‚Äî –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ probe-rs."

#: src/bare-metal/microcontrollers/probe-rs.md:26
msgid ""
"RTT (Real Time Transfers) is a mechanism to transfer data between the debug "
"host and the target through a number of ringbuffers."
msgstr ""
"RTT (Real Time Transfers) ‚Äî —Ü–µ –º–µ—Ö–∞–Ω—ñ–∑–º –ø–µ—Ä–µ–¥–∞—á—ñ –¥–∞–Ω–∏—Ö –º—ñ–∂ —Ö–æ—Å—Ç–æ–º "
"–Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ —Ü—ñ–ª—å–æ–≤–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ –∫—ñ–ª—å—Ü–µ–≤–∏—Ö –±—É—Ñ–µ—Ä—ñ–≤."

#: src/bare-metal/microcontrollers/debugging.md:3
msgid "Embed.toml:"
msgstr "–í—Å—Ç–∞–≤–∏—Ç–∏.toml:"

#: src/bare-metal/microcontrollers/debugging.md:5
msgid ""
"```toml\n"
"[default.general]\n"
"chip = \"nrf52833_xxAA\"\n"
"\n"
"[debug.gdb]\n"
"enabled = true\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md:13
msgid "In one terminal under `src/bare-metal/microcontrollers/examples/`:"
msgstr "–í –æ–¥–Ω–æ–º—É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ –≤ `src/bare-metal/microcontrollers/examples/`:"

#: src/bare-metal/microcontrollers/debugging.md:15
msgid ""
"```sh\n"
"cargo embed --bin board_support debug\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md:19
msgid "In another terminal in the same directory:"
msgstr "–í —ñ–Ω—à–æ–º—É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ –≤ —Ç–æ–º—É –∂ –∫–∞—Ç–∞–ª–æ–∑—ñ:"

#: src/bare-metal/microcontrollers/debugging.md:21
msgid ""
"```sh\n"
"gdb-multiarch target/thumbv7em-none-eabihf/debug/board_support --eval-"
"command=\"target remote :1337\"\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md:27
msgid "In GDB, try running:"
msgstr "–£ GDB —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏:"

#: src/bare-metal/microcontrollers/debugging.md:29
msgid ""
"```gdb\n"
"b src/bin/board_support.rs:29\n"
"b src/bin/board_support.rs:30\n"
"b src/bin/board_support.rs:32\n"
"c\n"
"c\n"
"c\n"
"```"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:1
#: src/bare-metal/aps/other-projects.md:1
msgid "Other projects"
msgstr "–Ü–Ω—à—ñ –ø—Ä–æ–µ–∫—Ç–∏"

#: src/bare-metal/microcontrollers/other-projects.md:3
msgid "[RTIC](https://rtic.rs/)"
msgstr "[RTIC](https://rtic.rs/)"

#: src/bare-metal/microcontrollers/other-projects.md:4
msgid "\"Real-Time Interrupt-driven Concurrency\""
msgstr "\"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ñ—Å—Ç—å, –∫–µ—Ä–æ–≤–∞–Ω–∞ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ\""

#: src/bare-metal/microcontrollers/other-projects.md:5
msgid ""
"Shared resource management, message passing, task scheduling, timer queue"
msgstr ""
"–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø—ñ–ª—å–Ω–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏, –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å, "
"—á–µ—Ä–≥–∞ —Ç–∞–π–º–µ—Ä–∞"

#: src/bare-metal/microcontrollers/other-projects.md:6
msgid "[Embassy](https://embassy.dev/)"
msgstr "[–ü–æ—Å–æ–ª—å—Å—Ç–≤–æ](https://embassy.dev/)"

#: src/bare-metal/microcontrollers/other-projects.md:7
msgid "`async` executors with priorities, timers, networking, USB"
msgstr "`async` –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏, —Ç–∞–π–º–µ—Ä–∞–º–∏, –º–µ—Ä–µ–∂–µ—é, USB"

#: src/bare-metal/microcontrollers/other-projects.md:8
msgid "[TockOS](https://www.tockos.org/documentation/getting-started)"
msgstr "[TockOS](https://www.tockos.org/documentation/getting-started)"

#: src/bare-metal/microcontrollers/other-projects.md:9
msgid ""
"Security-focused RTOS with preemptive scheduling and Memory Protection Unit "
"support"
msgstr ""
"–û—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∞ –Ω–∞ –±–µ–∑–ø–µ–∫—É RTOS –∑ –≤–∏–ø–µ—Ä–µ–¥–∂–∞–ª—å–Ω–∏–º –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è–º —ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –º–æ–¥—É–ª—è "
"–∑–∞—Ö–∏—Å—Ç—É –ø–∞–º‚Äô—è—Ç—ñ"

#: src/bare-metal/microcontrollers/other-projects.md:10
msgid "[Hubris](https://hubris.oxide.computer/)"
msgstr "[Hubris](https://hubris.oxide.computer/)"

#: src/bare-metal/microcontrollers/other-projects.md:11
msgid ""
"Microkernel RTOS from Oxide Computer Company with memory protection, "
"unprivileged drivers, IPC"
msgstr ""
"–ú—ñ–∫—Ä–æ—è–¥–µ—Ä–Ω–∞ RTOS –≤—ñ–¥ Oxide Computer Company —ñ–∑ –∑–∞—Ö–∏—Å—Ç–æ–º –ø–∞–º'—è—Ç—ñ, "
"–Ω–µ–ø—Ä–∏–≤—ñ–ª–µ–π–æ–≤–∞–Ω–∏–º–∏ –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏, IPC"

#: src/bare-metal/microcontrollers/other-projects.md:12
msgid "[Bindings for FreeRTOS](https://github.com/lobaro/FreeRTOS-rust)"
msgstr "[–ü—Ä–∏–≤‚Äô—è–∑–∫–∏ –¥–ª—è FreeRTOS](https://github.com/lobaro/FreeRTOS-rust)"

#: src/bare-metal/microcontrollers/other-projects.md:13
msgid ""
"Some platforms have `std` implementations, e.g. [esp-idf](https://esp-rs."
"github.io/book/overview/using-the-standard-library.html)."
msgstr ""
"–î–µ—è–∫—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –º–∞—é—Ç—å —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é `std`, –Ω–∞–ø—Ä. [esp-idf](https://esp-rs."
"github.io/book/overview/using-the-standard-library.html)."

#: src/bare-metal/microcontrollers/other-projects.md:18
msgid "RTIC can be considered either an RTOS or a concurrency framework."
msgstr "RTIC –º–æ–∂–Ω–∞ –≤–≤–∞–∂–∞—Ç–∏ –∞–±–æ RTOS, –∞–±–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/bare-metal/microcontrollers/other-projects.md:19
msgid "It doesn't include any HALs."
msgstr "–í—ñ–Ω –Ω–µ –º—ñ—Å—Ç–∏—Ç—å HAL."

#: src/bare-metal/microcontrollers/other-projects.md:20
msgid ""
"It uses the Cortex-M NVIC (Nested Virtual Interrupt Controller) for "
"scheduling rather than a proper kernel."
msgstr ""
"–í—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Cortex-M NVIC (–≤–∫–ª–∞–¥–µ–Ω–∏–π –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω—å) "
"–¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è, –∞ –Ω–µ –Ω–∞–ª–µ–∂–Ω–µ —è–¥—Ä–æ."

#: src/bare-metal/microcontrollers/other-projects.md:22
msgid "Cortex-M only."
msgstr "–¢—ñ–ª—å–∫–∏ Cortex-M."

#: src/bare-metal/microcontrollers/other-projects.md:23
msgid ""
"Google uses TockOS on the Haven microcontroller for Titan security keys."
msgstr ""
"Google –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î TockOS –Ω–∞ –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ Haven –¥–ª—è –∫–ª—é—á—ñ–≤ –±–µ–∑–ø–µ–∫–∏ Titan."

#: src/bare-metal/microcontrollers/other-projects.md:24
msgid ""
"FreeRTOS is mostly written in C, but there are Rust bindings for writing "
"applications."
msgstr ""
"FreeRTOS –∑–¥–µ–±—ñ–ª—å—à–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏–π –Ω–∞ C, –∞–ª–µ —î –ø—Ä–∏–≤‚Äô—è–∑–∫–∏ Rust –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è "
"–ø—Ä–æ–≥—Ä–∞–º."

#: src/exercises/bare-metal/morning.md:3
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port."
msgstr ""
"–ú–∏ –ø—Ä–æ—á–∏—Ç–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ —ñ–∑ –∫–æ–º–ø–∞—Å–∞ I2C —ñ –∑–∞–ø–∏—à–µ–º–æ –ø–æ–∫–∞–∑–∞–Ω–Ω—è –¥–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ "
"–ø–æ—Ä—Ç—É."

#: src/exercises/bare-metal/compass.md:3
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port. If you have time, try displaying it on the LEDs somehow too, or "
"use the buttons somehow."
msgstr ""
"–ú–∏ –ø—Ä–æ—á–∏—Ç–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ —ñ–∑ –∫–æ–º–ø–∞—Å–∞ I2C —ñ –∑–∞–ø–∏—à–µ–º–æ –ø–æ–∫–∞–∑–∞–Ω–Ω—è –¥–æ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ "
"–ø–æ—Ä—Ç—É. –Ø–∫—â–æ —É –≤–∞—Å —î —á–∞—Å, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —è–∫–æ—Å—å –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –π–æ–≥–æ –Ω–∞ —Å–≤—ñ—Ç–ª–æ–¥—ñ–æ–¥–∞—Ö "
"–∞–±–æ —è–∫–æ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏."

#: src/exercises/bare-metal/compass.md:6
msgid "Hints:"
msgstr "–ü—ñ–¥–∫–∞–∑–∫–∏:"

#: src/exercises/bare-metal/compass.md:8
msgid ""
"Check the documentation for the [`lsm303agr`](https://docs.rs/lsm303agr/"
"latest/lsm303agr/) and [`microbit-v2`](https://docs.rs/microbit-v2/latest/"
"microbit/) crates, as well as the [micro:bit hardware](https://tech.microbit."
"org/hardware/)."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é –¥–ª—è [`lsm303agr`](https://docs.rs/lsm303agr/latest/"
"lsm303agr/) —ñ [`microbit-v2`](https://docs.rs/microbit-v2/latest/microbit /) "
"—è—â–∏–∫–∏, –∞ —Ç–∞–∫–æ–∂ [micro:bit hardware](https://tech.microbit.org/hardware/)."

#: src/exercises/bare-metal/compass.md:11
msgid ""
"The LSM303AGR Inertial Measurement Unit is connected to the internal I2C bus."
msgstr ""
"–Ü–Ω–µ—Ä—Ü—ñ–π–Ω–∏–π –≤–∏–º—ñ—Ä—é–≤–∞–ª—å–Ω–∏–π –±–ª–æ–∫ LSM303AGR –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—ó —à–∏–Ω–∏ I2C."

#: src/exercises/bare-metal/compass.md:12
msgid ""
"TWI is another name for I2C, so the I2C master peripheral is called TWIM."
msgstr ""
"TWI ‚Äî —Ü–µ —ñ–Ω—à–∞ –Ω–∞–∑–≤–∞ I2C, —Ç–æ–º—É –≥–æ–ª–æ–≤–Ω–∏–π –ø–µ—Ä–∏—Ñ–µ—Ä—ñ–π–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π I2C –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è "
"TWIM."

#: src/exercises/bare-metal/compass.md:13
msgid ""
"The LSM303AGR driver needs something implementing the `embedded_hal::"
"blocking::i2c::WriteRead` trait. The [`microbit::hal::Twim`](https://docs.rs/"
"microbit-v2/latest/microbit/hal/struct.Twim.html) struct implements this."
msgstr ""
"–î—Ä–∞–π–≤–µ—Ä—É LSM303AGR –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ—Å—å, —â–æ —Ä–µ–∞–ª—ñ–∑—É—î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `embedded_hal::"
"blocking::i2c::WriteRead`. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ [`microbit::hal::Twim`](https://docs.rs/"
"microbit-v2/latest/microbit/hal/struct.Twim.html) —Ä–µ–∞–ª—ñ–∑—É—î —Ü–µ."

#: src/exercises/bare-metal/compass.md:17
msgid ""
"You have a [`microbit::Board`](https://docs.rs/microbit-v2/latest/microbit/"
"struct.Board.html) struct with fields for the various pins and peripherals."
msgstr ""
"–£ –≤–∞—Å —î —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ [`microbit::Board`](https://docs.rs/microbit-v2/latest/"
"microbit/struct.Board.html) –∑ –ø–æ–ª—è–º–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —ñ –ø–µ—Ä–∏—Ñ–µ—Ä—ñ–π–Ω–∏—Ö "
"–ø—Ä–∏—Å—Ç—Ä–æ—ó–≤."

#: src/exercises/bare-metal/compass.md:19
msgid ""
"You can also look at the [nRF52833 datasheet](https://infocenter.nordicsemi."
"com/pdf/nRF52833_PS_v1.5.pdf) if you want, but it shouldn't be necessary for "
"this exercise."
msgstr ""
"–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ [—Ç–µ—Ö–Ω—ñ—á–Ω—É —Ç–∞–±–ª–∏—Ü—é nRF52833](https://infocenter."
"nordicsemi.com/pdf/nRF52833_PS_v1.5.pdf), —è–∫—â–æ —Ö–æ—á–µ—Ç–µ, –∞–ª–µ —Ü–µ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ "
"–¥–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏."

#: src/exercises/bare-metal/compass.md:23
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `compass` directory for the following files."
msgstr ""
"–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ [—à–∞–±–ª–æ–Ω –≤–ø—Ä–∞–≤–∏](../../comprehensive-rust-exercises.zip) —ñ "
"–∑–Ω–∞–π–¥—ñ—Ç—å —É –∫–∞—Ç–∞–ª–æ–∑—ñ `compass` –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ–∞–π–ª–∏."

#: src/exercises/bare-metal/compass.md:26 src/exercises/bare-metal/rtc.md:19
msgid "`src/main.rs`:"
msgstr "`src/main.rs`:"

#: src/exercises/bare-metal/compass.md:30
msgid ""
"```rust,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"extern crate panic_halt as _;\n"
"\n"
"use core::fmt::Write;\n"
"use cortex_m_rt::entry;\n"
"use microbit::{hal::uarte::{Baudrate, Parity, Uarte}, Board};\n"
"\n"
"#[entry]\n"
"fn main() -> ! {\n"
"    let board = Board::take().unwrap();\n"
"\n"
"    // Configure serial port.\n"
"    let mut serial = Uarte::new(\n"
"        board.UARTE0,\n"
"        board.uart.into(),\n"
"        Parity::EXCLUDED,\n"
"        Baudrate::BAUD115200,\n"
"    );\n"
"\n"
"    // Set up the I2C controller and Inertial Measurement Unit.\n"
"    // TODO\n"
"\n"
"    writeln!(serial, \"Ready.\").unwrap();\n"
"\n"
"    loop {\n"
"        // Read compass data and log it to the serial port.\n"
"        // TODO\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/compass.md:64 src/exercises/bare-metal/rtc.md:385
msgid "`Cargo.toml` (you shouldn't need to change this):"
msgstr "`Cargo.toml` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/compass.md:68
msgid ""
"```toml\n"
"[workspace]\n"
"\n"
"[package]\n"
"name = \"compass\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"cortex-m-rt = \"0.7.3\"\n"
"embedded-hal = \"0.2.6\"\n"
"lsm303agr = \"0.2.2\"\n"
"microbit-v2 = \"0.13.0\"\n"
"panic-halt = \"0.2.0\"\n"
"```"
msgstr ""

#: src/exercises/bare-metal/compass.md:85
msgid "`Embed.toml` (you shouldn't need to change this):"
msgstr "`Embed.toml` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/compass.md:89
msgid ""
"```toml\n"
"[default.general]\n"
"chip = \"nrf52833_xxAA\"\n"
"\n"
"[debug.gdb]\n"
"enabled = true\n"
"\n"
"[debug.reset]\n"
"halt_afterwards = true\n"
"```"
msgstr ""

#: src/exercises/bare-metal/compass.md:100 src/exercises/bare-metal/rtc.md:985
msgid "`.cargo/config.toml` (you shouldn't need to change this):"
msgstr "`.cargo/config.toml` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/compass.md:104
msgid ""
"```toml\n"
"[build]\n"
"target = \"thumbv7em-none-eabihf\" # Cortex-M4F\n"
"\n"
"[target.'cfg(all(target_arch = \"arm\", target_os = \"none\"))']\n"
"rustflags = [\"-C\", \"link-arg=-Tlink.x\"]\n"
"```"
msgstr ""

#: src/exercises/bare-metal/compass.md:112
msgid "See the serial output on Linux with:"
msgstr "–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –≤–∏—Ö—ñ–¥ —É Linux –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é:"

#: src/exercises/bare-metal/compass.md:114
msgid ""
"```sh\n"
"picocom --baud 115200 --imap lfcrlf /dev/ttyACM0\n"
"```"
msgstr ""

#: src/exercises/bare-metal/compass.md:118
msgid ""
"Or on Mac OS something like (the device name may be slightly different):"
msgstr "–ê–±–æ –≤ Mac OS —â–æ—Å—å –Ω–∞ –∑—Ä–∞–∑–æ–∫ (–Ω–∞–∑–≤–∞ –ø—Ä–∏—Å—Ç—Ä–æ—é –º–æ–∂–µ —Ç—Ä–æ—Ö–∏ –≤—ñ–¥—Ä—ñ–∑–Ω—è—Ç–∏—Å—è):"

#: src/exercises/bare-metal/compass.md:120
msgid ""
"```sh\n"
"picocom --baud 115200 --imap lfcrlf /dev/tty.usbmodem14502\n"
"```"
msgstr ""

#: src/exercises/bare-metal/compass.md:124
msgid "Use Ctrl+A Ctrl+Q to quit picocom."
msgstr "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Ctrl+A Ctrl+Q, —â–æ–± –≤–∏–π—Ç–∏ –∑ picocom."

#: src/bare-metal/aps.md:1
msgid "Application processors"
msgstr "–ü—Ä–æ—Ü–µ—Å–æ—Ä–∏ –¥–æ–¥–∞—Ç–∫—ñ–≤"

#: src/bare-metal/aps.md:3
msgid ""
"So far we've talked about microcontrollers, such as the Arm Cortex-M series. "
"Now let's try writing something for Cortex-A. For simplicity we'll just work "
"with QEMU's aarch64 ['virt'](https://qemu-project.gitlab.io/qemu/system/arm/"
"virt.html) board."
msgstr ""
"–î–æ—Å—ñ –º–∏ –≥–æ–≤–æ—Ä–∏–ª–∏ –ø—Ä–æ –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏, —Ç–∞–∫—ñ —è–∫ —Å–µ—Ä—ñ—è Arm Cortex-M. –¢–µ–ø–µ—Ä "
"–¥–∞–≤–∞–π—Ç–µ —Å–ø—Ä–æ–±—É—î–º–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —â–æ—Å—å –¥–ª—è Cortex-A. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –º–∏ –ø—Ä–æ—Å—Ç–æ "
"–ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ–º–æ –∑ –ø–ª–∞—Ç–æ—é QEMU aarch64 ['virt'](https://qemu-project.gitlab.io/"
"qemu/system/arm/virt.html)."

#: src/bare-metal/aps.md:9
msgid ""
"Broadly speaking, microcontrollers don't have an MMU or multiple levels of "
"privilege (exception levels on Arm CPUs, rings on x86), while application "
"processors do."
msgstr ""
"–ó–∞–≥–∞–ª–æ–º –∫–∞–∂—É—á–∏, –º—ñ–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∏ –Ω–µ –º–∞—é—Ç—å MMU –∞–±–æ –∫—ñ–ª—å–∫–æ—Ö —Ä—ñ–≤–Ω—ñ–≤ –ø—Ä–∏–≤—ñ–ª–µ—ó–≤ "
"(—Ä—ñ–≤–Ω—ñ –≤–∏–Ω—è—Ç–∫—ñ–≤ –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞—Ö Arm, –∫—ñ–ª—å—Ü—è –Ω–∞ x86), —Ç–æ–¥—ñ —è–∫ "
"–ø—Ä–æ—Ü–µ—Å–æ—Ä–∏ –¥–æ–¥–∞—Ç–∫—ñ–≤ –º–∞—é—Ç—å."

#: src/bare-metal/aps.md:11
msgid ""
"QEMU supports emulating various different machines or board models for each "
"architecture. The 'virt' board doesn't correspond to any particular real "
"hardware, but is designed purely for virtual machines."
msgstr ""
"QEMU –ø—ñ–¥—Ç—Ä–∏–º—É—î –µ–º—É–ª—è—Ü—ñ—é —Ä—ñ–∑–Ω–∏—Ö –º–∞—à–∏–Ω –∞–±–æ –º–æ–¥–µ–ª–µ–π –ø–ª–∞—Ç –¥–ª—è –∫–æ–∂–Ω–æ—ó "
"–∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏. –ü–ª–∞—Ç–∞ virt –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∂–æ–¥–Ω–æ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–µ–∞–ª—å–Ω–æ–º—É "
"–∞–ø–∞—Ä–∞—Ç–Ω–æ–º—É –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—é, –∞ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∞ –≤–∏–∫–ª—é—á–Ω–æ –¥–ª—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏—Ö –º–∞—à–∏–Ω."

#: src/bare-metal/aps/entry-point.md:3
msgid ""
"Before we can start running Rust code, we need to do some initialisation."
msgstr ""
"–ü–µ—Ä—à –Ω—ñ–∂ –º–∏ –∑–º–æ–∂–µ–º–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –∫–æ–¥ Rust, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–µ—è–∫—É "
"—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é."

#: src/bare-metal/aps/entry-point.md:5
msgid ""
"```armasm\n"
".section .init.entry, \"ax\"\n"
".global entry\n"
"entry:\n"
"    /*\n"
"     * Load and apply the memory management configuration, ready to enable "
"MMU and\n"
"     * caches.\n"
"     */\n"
"    adrp x30, idmap\n"
"    msr ttbr0_el1, x30\n"
"\n"
"    mov_i x30, .Lmairval\n"
"    msr mair_el1, x30\n"
"\n"
"    mov_i x30, .Ltcrval\n"
"    /* Copy the supported PA range into TCR_EL1.IPS. */\n"
"    mrs x29, id_aa64mmfr0_el1\n"
"    bfi x30, x29, #32, #4\n"
"\n"
"    msr tcr_el1, x30\n"
"\n"
"    mov_i x30, .Lsctlrval\n"
"\n"
"    /*\n"
"     * Ensure everything before this point has completed, then invalidate "
"any\n"
"     * potentially stale local TLB entries before they start being used.\n"
"     */\n"
"    isb\n"
"    tlbi vmalle1\n"
"    ic iallu\n"
"    dsb nsh\n"
"    isb\n"
"\n"
"    /*\n"
"     * Configure sctlr_el1 to enable MMU and cache and don't proceed until "
"this\n"
"     * has completed.\n"
"     */\n"
"    msr sctlr_el1, x30\n"
"    isb\n"
"\n"
"    /* Disable trapping floating point access in EL1. */\n"
"    mrs x30, cpacr_el1\n"
"    orr x30, x30, #(0x3 << 20)\n"
"    msr cpacr_el1, x30\n"
"    isb\n"
"\n"
"    /* Zero out the bss section. */\n"
"    adr_l x29, bss_begin\n"
"    adr_l x30, bss_end\n"
"0:  cmp x29, x30\n"
"    b.hs 1f\n"
"    stp xzr, xzr, [x29], #16\n"
"    b 0b\n"
"\n"
"1:  /* Prepare the stack. */\n"
"    adr_l x30, boot_stack_end\n"
"    mov sp, x30\n"
"\n"
"    /* Set up exception vector. */\n"
"    adr x30, vector_table_el1\n"
"    msr vbar_el1, x30\n"
"\n"
"    /* Call into Rust code. */\n"
"    bl main\n"
"\n"
"    /* Loop forever waiting for interrupts. */\n"
"2:  wfi\n"
"    b 2b\n"
"```"
msgstr ""

#: src/bare-metal/aps/entry-point.md:77
msgid ""
"This is the same as it would be for C: initialising the processor state, "
"zeroing the BSS, and setting up the stack pointer."
msgstr ""
"–¶–µ —Ç–µ —Å–∞–º–µ, —â–æ –±—É–ª–æ –± –¥–ª—è C: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞, –æ–±–Ω—É–ª–µ–Ω–Ω—è BSS —ñ "
"–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∂—á–∏–∫–∞ —Å—Ç–µ–∫–∞."

#: src/bare-metal/aps/entry-point.md:79
msgid ""
"The BSS (block starting symbol, for historical reasons) is the part of the "
"object file which containing statically allocated variables which are "
"initialised to zero. They are omitted from the image, to avoid wasting space "
"on zeroes. The compiler assumes that the loader will take care of zeroing "
"them."
msgstr ""
"BSS (—Å–∏–º–≤–æ–ª –ø–æ—á–∞—Ç–∫—É –±–ª–æ–∫—É, –∑ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –ø—Ä–∏—á–∏–Ω) ‚Äî —Ü–µ —á–∞—Å—Ç–∏–Ω–∞ –æ–±‚Äô—î–∫—Ç–Ω–æ–≥–æ "
"—Ñ–∞–π–ª—É, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—á–Ω–æ –≤–∏–¥—ñ–ª–µ–Ω—ñ –∑–º—ñ–Ω–Ω—ñ, —è–∫—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é—Ç—å—Å—è –Ω—É–ª–µ–º. –í–æ–Ω–∏ "
"–ø—Ä–æ–ø—É—â–µ–Ω—ñ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ, —â–æ–± –Ω–µ –≤–∏—Ç—Ä–∞—á–∞—Ç–∏ –º—ñ—Å—Ü–µ –Ω–∞ –Ω—É–ª—ñ. –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä "
"–ø—Ä–∏–ø—É—Å–∫–∞—î, —â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á –ø–æ–¥–±–∞—î –ø—Ä–æ —ó—Ö –æ–±–Ω—É–ª–µ–Ω–Ω—è."

#: src/bare-metal/aps/entry-point.md:83
msgid ""
"The BSS may already be zeroed, depending on how memory is initialised and "
"the image is loaded, but we zero it to be sure."
msgstr ""
"BSS –º–æ–∂–µ –±—É—Ç–∏ –≤–∂–µ –æ–±–Ω—É–ª–µ–Ω–æ, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, —è–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø–∞–º‚Äô—è—Ç—å —ñ "
"–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –∞–ª–µ –º–∏ –æ–±–Ω—É–ª—è—î–º–æ –π–æ–≥–æ, —â–æ–± –±—É—Ç–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–º–∏."

#: src/bare-metal/aps/entry-point.md:85
msgid ""
"We need to enable the MMU and cache before reading or writing any memory. If "
"we don't:"
msgstr ""
"–ù–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤—ñ–º–∫–Ω—É—Ç–∏ MMU —Ç–∞ –∫–µ—à –ø–µ—Ä–µ–¥ —á–∏—Ç–∞–Ω–Ω—è–º –∞–±–æ –∑–∞–ø–∏—Å–æ–º –ø–∞–º‚Äô—è—Ç—ñ. –Ø–∫—â–æ "
"–º–∏ —Ü—å–æ–≥–æ –Ω–µ –∑—Ä–æ–±–∏–º–æ:"

#: src/bare-metal/aps/entry-point.md:86
msgid ""
"Unaligned accesses will fault. We build the Rust code for the `aarch64-"
"unknown-none` target which sets `+strict-align` to prevent the compiler "
"generating unaligned accesses, so it should be fine in this case, but this "
"is not necessarily the case in general."
msgstr ""
"–ù–µ–≤–∏—Ä—ñ–≤–Ω—è–Ω—ñ –¥–æ—Å—Ç—É–ø–∏ –ø—Ä–∏–∑–≤–µ–¥—É—Ç—å –¥–æ –ø–æ–º–∏–ª–æ–∫. –ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–¥ Rust –¥–ª—è —Ü—ñ–ª—ñ "
"`aarch64-unknown-none`, —è–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î `+strict-align`, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ "
"—Å—Ç–≤–æ—Ä–µ–Ω–Ω—é –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–æ–º –Ω–µ–≤–∏—Ä—ñ–≤–Ω—è–Ω–∏—Ö –¥–æ—Å—Ç—É–ø—ñ–≤, —Ç–æ–º—É –≤ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ü–µ –º–∞—î "
"–±—É—Ç–∏ –¥–æ–±—Ä–µ, –∞–ª–µ —Ü–µ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ —Ç–∞–∫ –∑–∞–≥–∞–ª–æ–º."

#: src/bare-metal/aps/entry-point.md:89
msgid ""
"If it were running in a VM, this can lead to cache coherency issues. The "
"problem is that the VM is accessing memory directly with the cache disabled, "
"while the host has cacheable aliases to the same memory. Even if the host "
"doesn't explicitly access the memory, speculative accesses can lead to cache "
"fills, and then changes from one or the other will get lost when the cache "
"is cleaned or the VM enables the cache. (Cache is keyed by physical address, "
"not VA or IPA.)"
msgstr ""
"–Ø–∫—â–æ –≤—ñ–Ω –ø—Ä–∞—Ü—é–≤–∞–≤ —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ–π –º–∞—à–∏–Ω—ñ, —Ü–µ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –ø—Ä–æ–±–ª–µ–º "
"—É–∑–≥–æ–¥–∂–µ–Ω–æ—Å—Ç—ñ –∫–µ—à—É. –ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ –º–∞—à–∏–Ω–∞ –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è "
"–¥–æ –ø–∞–º‚Äô—è—Ç—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –≤–∏–º–∫–Ω–µ–Ω–∏–º –∫–µ—à-–ø–∞–º‚Äô—è—Ç—Ç—é, —Ç–æ–¥—ñ —è–∫ —Ö–æ—Å—Ç –º–∞—î –∫–µ—à–æ–≤–∞–Ω—ñ "
"–ø—Å–µ–≤–¥–æ–Ω—ñ–º–∏ –¥–ª—è —Ç—ñ—î—ó —Å–∞–º–æ—ó –ø–∞–º‚Äô—è—Ç—ñ. –ù–∞–≤—ñ—Ç—å —è–∫—â–æ —Ö–æ—Å—Ç –Ω–µ –º–∞—î —è–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ "
"–ø–∞–º‚Äô—è—Ç—ñ, —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ñ –¥–æ—Å—Ç—É–ø–∏ –º–æ–∂—É—Ç—å –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–µ—à—É, –∞ –ø–æ—Ç—ñ–º "
"–∑–º—ñ–Ω–∏ –∑ —Ç–æ–≥–æ —á–∏ —ñ–Ω—à–æ–≥–æ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ, –∫–æ–ª–∏ –∫–µ—à –±—É–¥–µ –æ—á–∏—â–µ–Ω–æ –∞–±–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ "
"–º–∞—à–∏–Ω–∞ –≤–≤—ñ–º–∫–Ω–µ –∫–µ—à. (–ö–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ—ñ–∑–∏—á–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é, –∞ –Ω–µ VA —á–∏ IPA.)"

#: src/bare-metal/aps/entry-point.md:94
msgid ""
"For simplicity, we just use a hardcoded pagetable (see `idmap.S`) which "
"identity maps the first 1 GiB of address space for devices, the next 1 GiB "
"for DRAM, and another 1 GiB higher up for more devices. This matches the "
"memory layout that QEMU uses."
msgstr ""
"–î–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è –º–∏ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é —Å—Ç–æ—Ä—ñ–Ω–æ–∫ "
"(–¥–∏–≤. `idmap.S`), —è–∫–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É—î –ø–µ—Ä—à–∏–π 1 –ì—ñ–ë –∞–¥—Ä–µ—Å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É –¥–ª—è "
"–ø—Ä–∏—Å—Ç—Ä–æ—ó–≤, –Ω–∞—Å—Ç—É–ø–Ω–∏–π 1 –ì—ñ–ë –¥–ª—è DRAM —ñ —â–µ 1 –ì—ñ–ë –≤–∏—â–µ –¥–ª—è —ñ–Ω—à–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤. –¶–µ "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –º–∞–∫–µ—Ç—É –ø–∞–º‚Äô—è—Ç—ñ, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î QEMU."

#: src/bare-metal/aps/entry-point.md:97
msgid ""
"We also set up the exception vector (`vbar_el1`), which we'll see more about "
"later."
msgstr ""
"–ú–∏ —Ç–∞–∫–æ–∂ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤–µ–∫—Ç–æ—Ä –≤–∏–Ω—è—Ç–∫—ñ–≤ (`vbar_el1`), –ø—Ä–æ —è–∫–∏–π –º–∏ —Ä–æ–∑–ø–æ–≤—ñ–º–æ "
"–±—ñ–ª—å—à–µ –ø—ñ–∑–Ω—ñ—à–µ."

#: src/bare-metal/aps/entry-point.md:98
msgid ""
"All examples this afternoon assume we will be running at exception level 1 "
"(EL1). If you need to run at a different exception level you'll need to "
"modify `entry.S` accordingly."
msgstr ""
"–£—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ü—å–æ–≥–æ –¥–Ω—è –ø—Ä–∏–ø—É—Å–∫–∞—é—Ç—å, —â–æ –º–∏ –±—É–¥–µ–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞ —Ä—ñ–≤–Ω—ñ –≤–∏–Ω—è—Ç–∫—É "
"1 (EL1). –Ø–∫—â–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞ —ñ–Ω—à–æ–º—É —Ä—ñ–≤–Ω—ñ –≤–∏–Ω—è—Ç–∫—É, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ "
"–±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ `entry.S`."

#: src/bare-metal/aps/inline-assembly.md:1
msgid "Inline assembly"
msgstr "–í–Ω—É—Ç—Ä—ñ—à–Ω—î —Å–∫–ª–∞–¥–∞–Ω–Ω—è"

#: src/bare-metal/aps/inline-assembly.md:3
msgid ""
"Sometimes we need to use assembly to do things that aren't possible with "
"Rust code. For example, to make an "
msgstr ""
"–Ü–Ω–æ–¥—ñ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–±—ñ—Ä–∫—É, —â–æ–± —Ä–æ–±–∏—Ç–∏ —Ç–µ, —â–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –∑ "
"–∫–æ–¥–æ–º Rust. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑—Ä–æ–±–∏—Ç–∏"

#: src/bare-metal/aps/inline-assembly.md:4
msgid "HVC"
msgstr "HVC"

#: src/bare-metal/aps/inline-assembly.md:4
msgid " to tell the firmware to power off the system:"
msgstr " —â–æ–± –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–Ω–æ–º—É –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—é –≤–∏–º–∫–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É:"

#: src/bare-metal/aps/inline-assembly.md:6
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"use core::arch::asm;\n"
"use core::panic::PanicInfo;\n"
"\n"
"mod exceptions;\n"
"\n"
"const PSCI_SYSTEM_OFF: u32 = 0x84000008;\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn main(_x0: u64, _x1: u64, _x2: u64, _x3: u64) {\n"
"    // Safe because this only uses the declared registers and doesn't do\n"
"    // anything with memory.\n"
"    unsafe {\n"
"        asm!(\"hvc #0\",\n"
"            inout(\"w0\") PSCI_SYSTEM_OFF => _,\n"
"            inout(\"w1\") 0 => _,\n"
"            inout(\"w2\") 0 => _,\n"
"            inout(\"w3\") 0 => _,\n"
"            inout(\"w4\") 0 => _,\n"
"            inout(\"w5\") 0 => _,\n"
"            inout(\"w6\") 0 => _,\n"
"            inout(\"w7\") 0 => _,\n"
"            options(nomem, nostack)\n"
"        );\n"
"    }\n"
"\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:39
msgid ""
"(If you actually want to do this, use the [`smccc`](https://crates.io/crates/"
"smccc) crate which has wrappers for all these functions.)"
msgstr ""
"(–Ø–∫—â–æ –≤–∏ —Å–ø—Ä–∞–≤–¥—ñ —Ö–æ—á–µ—Ç–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è —è—â–∏–∫–æ–º [`smccc`](https://"
"crates.io/crates/smccc), —É —è–∫–æ–º—É —î –æ–±–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—Å—ñ—Ö —Ü–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.)"

#: src/bare-metal/aps/inline-assembly.md:43
msgid ""
"PSCI is the Arm Power State Coordination Interface, a standard set of "
"functions to manage system and CPU power states, among other things. It is "
"implemented by EL3 firmware and hypervisors on many systems."
msgstr ""
"PSCI ‚Äî —Ü–µ Arm Power State Coordination Interface, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –Ω–∞–±—ñ—Ä —Ñ—É–Ω–∫—Ü—ñ–π "
"–¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–∞–º–∏ –∂–∏–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ç–∞ –¶–ü, —Å–µ—Ä–µ–¥ —ñ–Ω—à–æ–≥–æ. –í—ñ–Ω —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π "
"–ø—Ä–æ—à–∏–≤–∫–æ—é EL3 —ñ –≥—ñ–ø–µ—Ä–≤—ñ–∑–æ—Ä–∞–º–∏ –Ω–∞ –±–∞–≥–∞—Ç—å–æ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö."

#: src/bare-metal/aps/inline-assembly.md:46
msgid ""
"The `0 => _` syntax means initialise the register to 0 before running the "
"inline assembly code, and ignore its contents afterwards. We need to use "
"`inout` rather than `in` because the call could potentially clobber the "
"contents of the registers."
msgstr ""
"–°–∏–Ω—Ç–∞–∫—Å–∏—Å `0 => _` –æ–∑–Ω–∞—á–∞—î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é —Ä–µ—î—Å—Ç—Ä—É –¥–æ 0 –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º "
"–≤–±—É–¥–æ–≤–∞–Ω–æ–≥–æ –∫–æ–¥—É —Å–∫–ª–∞–¥–∞–Ω–Ω—è —Ç–∞ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –π–æ–≥–æ –≤–º—ñ—Å—Ç—É –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ. –ù–∞–º "
"–ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `inout`, –∞ –Ω–µ `in`, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏–∫–ª–∏–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –º–æ–∂–µ "
"–∑–Ω–∏—â–∏—Ç–∏ –≤–º—ñ—Å—Ç —Ä–µ—î—Å—Ç—Ä—ñ–≤."

#: src/bare-metal/aps/inline-assembly.md:49
msgid ""
"This `main` function needs to be `#[no_mangle]` and `extern \"C\"` because "
"it is called from our entry point in `entry.S`."
msgstr ""
"–¶—è `main` —Ñ—É–Ω–∫—Ü—ñ—è –º–∞—î –±—É—Ç–∏ `#[no_mangle]` —ñ `extern \"C\"`, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ "
"–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ –Ω–∞—à–æ—ó —Ç–æ—á–∫–∏ –≤—Ö–æ–¥—É –≤ `entry.S`."

#: src/bare-metal/aps/inline-assembly.md:51
msgid ""
"`_x0`‚Äì`_x3` are the values of registers `x0`‚Äì`x3`, which are conventionally "
"used by the bootloader to pass things like a pointer to the device tree. "
"According to the standard aarch64 calling convention (which is what `extern "
"\"C\"` specifies to use), registers `x0`‚Äì`x7` are used for the first 8 "
"arguments passed to a function, so `entry.S` doesn't need to do anything "
"special except make sure it doesn't change these registers."
msgstr ""
"`_x0`‚Äì`_x3` ‚Äì —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤ `x0`‚Äì`x3`, —è–∫—ñ —Ç—Ä–∞–¥–∏—Ü—ñ–π–Ω–æ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á–µ–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ —Ç–∞–∫–∏—Ö —Ä–µ—á–µ–π, —è–∫ –ø–æ–∫–∞–∂—á–∏–∫ –Ω–∞ "
"–¥–µ—Ä–µ–≤–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤. –í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó —É–≥–æ–¥–∏ –ø—Ä–æ –≤–∏–∫–ª–∏–∫–∏ aarch64 (—Ü–µ "
"—Ç–µ, —â–æ –≤–∫–∞–∑—É—î `extern \"C\"`), —Ä–µ–≥—ñ—Å—Ç—Ä–∏ `x0`‚Äì`x7` –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è "
"–ø–µ—Ä—à–∏—Ö 8 –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, —â–æ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó, —Ç–æ–º—É `entry.S` –Ω–µ –Ω–µ "
"–ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–±–∏—Ç–∏ –Ω—ñ—á–æ–≥–æ –æ—Å–æ–±–ª–∏–≤–æ–≥–æ, –∫—Ä—ñ–º —Ç–æ–≥–æ, —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –≤—ñ–Ω –Ω–µ "
"–∑–º—ñ–Ω—é—î —Ü—ñ —Ä–µ–≥—ñ—Å—Ç—Ä–∏."

#: src/bare-metal/aps/inline-assembly.md:56
msgid ""
"Run the example in QEMU with `make qemu_psci` under `src/bare-metal/aps/"
"examples`."
msgstr ""
"–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ —É QEMU –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `make qemu_psci` –≤ `src/bare-metal/aps/"
"examples`."

#: src/bare-metal/aps/mmio.md:1
msgid "Volatile memory access for MMIO"
msgstr "–î–æ—Å—Ç—É–ø –¥–æ –µ–Ω–µ—Ä–≥–æ–∑–∞–ª–µ–∂–Ω–æ—ó –ø–∞–º'—è—Ç—ñ –¥–ª—è MMIO"

#: src/bare-metal/aps/mmio.md:3
msgid "Use `pointer::read_volatile` and `pointer::write_volatile`."
msgstr "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `pointer::read_volatile` —ñ `pointer::write_volatile`."

#: src/bare-metal/aps/mmio.md:4
msgid "Never hold a reference."
msgstr "–ù—ñ–∫–æ–ª–∏ –Ω–µ —Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."

#: src/bare-metal/aps/mmio.md:5
msgid ""
"`addr_of!` lets you get fields of structs without creating an intermediate "
"reference."
msgstr ""
"`addr_of!` –¥–æ–∑–≤–æ–ª—è—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ "
"–ø–æ—Å–∏–ª–∞–Ω–Ω—è."

#: src/bare-metal/aps/mmio.md:9
msgid ""
"Volatile access: read or write operations may have side-effects, so prevent "
"the compiler or hardware from reordering, duplicating or eliding them."
msgstr ""
"–ù–µ–ø–æ—Å—Ç—ñ–π–Ω–∏–π –¥–æ—Å—Ç—É–ø: –æ–ø–µ—Ä–∞—Ü—ñ—ó —á–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–ø–∏—Å—É –º–æ–∂—É—Ç—å –º–∞—Ç–∏ –ø–æ–±—ñ—á–Ω—ñ –µ—Ñ–µ–∫—Ç–∏, "
"—Ç–æ–º—É –Ω–µ –¥–æ–∑–≤–æ–ª—è–π—Ç–µ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä—É —á–∏ –∞–ø–∞—Ä–∞—Ç–Ω–æ–º—É –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—é —ó—Ö "
"–ø–µ—Ä–µ–≤–ø–æ—Ä—è–¥–∫–æ–≤—É–≤–∞—Ç–∏, –¥—É–±–ª—é–≤–∞—Ç–∏ —á–∏ –≤–∏–¥–∞–ª—è—Ç–∏."

#: src/bare-metal/aps/mmio.md:11
msgid ""
"Usually if you write and then read, e.g. via a mutable reference, the "
"compiler may assume that the value read is the same as the value just "
"written, and not bother actually reading memory."
msgstr ""
"–ó–∞–∑–≤–∏—á–∞–π, —è–∫—â–æ –≤–∏ –ø–∏—à–µ—Ç–µ, –∞ –ø–æ—Ç—ñ–º —á–∏—Ç–∞—î—Ç–µ, –Ω–∞–ø—Ä. —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, "
"–∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –º–æ–∂–µ –ø—Ä–∏–ø—É—Å—Ç–∏—Ç–∏, —â–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —î —Ç–∞–∫–∏–º —Å–∞–º–∏–º, —è–∫ —â–æ–π–Ω–æ "
"–∑–∞–ø–∏—Å–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —ñ –Ω–µ —Ç—É—Ä–±—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ —Ñ–∞–∫—Ç–∏—á–Ω–µ —á–∏—Ç–∞–Ω–Ω—è –ø–∞–º‚Äô—è—Ç—ñ."

#: src/bare-metal/aps/mmio.md:13
msgid ""
"Some existing crates for volatile access to hardware do hold references, but "
"this is unsound. Whenever a reference exist, the compiler may choose to "
"dereference it."
msgstr ""
"–î–µ—è–∫—ñ —ñ—Å–Ω—É—é—á—ñ —è—â–∏–∫–∏ –¥–ª—è –Ω–µ–ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è "
"–º—ñ—Å—Ç—è—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –∞–ª–µ —Ü–µ –Ω–µ—Ä–æ–∑—É–º–Ω–æ. –ö–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É, –∫–æ–ª–∏ —ñ—Å–Ω—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è, "
"–∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –º–æ–∂–µ –≤–∏—Ä—ñ—à–∏—Ç–∏ —Ä–æ–∑—ñ–º–µ–Ω—É–≤–∞—Ç–∏ –π–æ–≥–æ."

#: src/bare-metal/aps/mmio.md:15
msgid ""
"Use the `addr_of!` macro to get struct field pointers from a pointer to the "
"struct."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–∞–∫—Ä–æ—Å `addr_of!`, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∫–∞–∂—á–∏–∫–∏ –ø–æ–ª—ñ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥ "
"–ø–æ–∫–∞–∂—á–∏–∫–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É."

#: src/bare-metal/aps/uart.md:1
msgid "Let's write a UART driver"
msgstr "–î–∞–≤–∞–π—Ç–µ –Ω–∞–ø–∏—à–µ–º–æ –¥—Ä–∞–π–≤–µ—Ä UART"

#: src/bare-metal/aps/uart.md:3
msgid ""
"The QEMU 'virt' machine has a [PL011](https://developer.arm.com/"
"documentation/ddi0183/g) UART, so let's write a driver for that."
msgstr ""
"–ú–∞—à–∏–Ω–∞ QEMU 'virt' –º–∞—î [PL011](https://developer.arm.com/documentation/"
"ddi0183/g) UART, —Ç–æ–∂ –¥–∞–≤–∞–π—Ç–µ –Ω–∞–ø–∏—à–µ–º–æ –¥–ª—è –Ω—å–æ–≥–æ –¥—Ä–∞–π–≤–µ—Ä."

#: src/bare-metal/aps/uart.md:5
msgid ""
"```rust,editable\n"
"const FLAG_REGISTER_OFFSET: usize = 0x18;\n"
"const FR_BUSY: u8 = 1 << 3;\n"
"const FR_TXFF: u8 = 1 << 5;\n"
"\n"
"/// Minimal driver for a PL011 UART.\n"
"#[derive(Debug)]\n"
"pub struct Uart {\n"
"    base_address: *mut u8,\n"
"}\n"
"\n"
"impl Uart {\n"
"    /// Constructs a new instance of the UART driver for a PL011 device at "
"the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the 8 MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
"    pub unsafe fn new(base_address: *mut u8) -> Self {\n"
"        Self { base_address }\n"
"    }\n"
"\n"
"    /// Writes a single byte to the UART.\n"
"    pub fn write_byte(&self, byte: u8) {\n"
"        // Wait until there is room in the TX buffer.\n"
"        while self.read_flag_register() & FR_TXFF != 0 {}\n"
"\n"
"        // Safe because we know that the base address points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
"        unsafe {\n"
"            // Write to the TX buffer.\n"
"            self.base_address.write_volatile(byte);\n"
"        }\n"
"\n"
"        // Wait until the UART is no longer busy.\n"
"        while self.read_flag_register() & FR_BUSY != 0 {}\n"
"    }\n"
"\n"
"    fn read_flag_register(&self) -> u8 {\n"
"        // Safe because we know that the base address points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
"        unsafe { self.base_address.add(FLAG_REGISTER_OFFSET)."
"read_volatile() }\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/aps/uart.md:55
msgid ""
"Note that `Uart::new` is unsafe while the other methods are safe. This is "
"because as long as the caller of `Uart::new` guarantees that its safety "
"requirements are met (i.e. that there is only ever one instance of the "
"driver for a given UART, and nothing else aliasing its address space), then "
"it is always safe to call `write_byte` later because we can assume the "
"necessary preconditions."
msgstr ""
"–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ `Uart::new` –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π, —Ç–æ–¥—ñ —è–∫ —ñ–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –±–µ–∑–ø–µ—á–Ω—ñ. –¶–µ "
"–ø–æ–≤‚Äô—è–∑–∞–Ω–æ –∑ —Ç–∏–º, —â–æ —è–∫—â–æ –≤–∏–∫–ª–∏–∫ `Uart::new` –≥–∞—Ä–∞–Ω—Ç—É—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–∏–º–æ–≥ –±–µ–∑–ø–µ–∫–∏ "
"(—Ç–æ–±—Ç–æ, —â–æ —ñ—Å–Ω—É—î –ª–∏—à–µ –æ–¥–∏–Ω –µ–∫–∑–µ–º–ø–ª—è—Ä –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è –¥–∞–Ω–æ–≥–æ UART, —ñ –Ω—ñ—á–æ–≥–æ "
"—ñ–Ω—à–æ–≥–æ –Ω–µ —Å—Ç–≤–æ—Ä—é—î –ø—Å–µ–≤–¥–æ–Ω—ñ–º—ñ–≤ –¥–ª—è –π–æ–≥–æ –∞–¥—Ä–µ—Å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É), –≤—ñ–Ω –∑–∞–≤–∂–¥–∏ "
"–±–µ–∑–ø–µ—á–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ `write_byte` –ø—ñ–∑–Ω—ñ—à–µ, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –º–æ–∂–µ–º–æ –ø—Ä–∏–ø—É—Å—Ç–∏—Ç–∏ "
"–Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —É–º–æ–≤–∏."

#: src/bare-metal/aps/uart.md:60
msgid ""
"We could have done it the other way around (making `new` safe but "
"`write_byte` unsafe), but that would be much less convenient to use as every "
"place that calls `write_byte` would need to reason about the safety"
msgstr ""
"–ú–∏ –º–æ–≥–ª–∏ –± –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –Ω–∞–≤–ø–∞–∫–∏ (–∑—Ä–æ–±–∏—Ç–∏ `new` –±–µ–∑–ø–µ—á–Ω–∏–º, –∞–ª–µ `write_byte` "
"–Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º), –∞–ª–µ —Ü–µ –±—É–ª–æ –± –Ω–∞–±–∞–≥–∞—Ç–æ –º–µ–Ω—à –∑—Ä—É—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏, –æ—Å–∫—ñ–ª—å–∫–∏ "
"–∫–æ–∂–Ω–µ –º—ñ—Å—Ü–µ, —è–∫–µ –≤–∏–∫–ª–∏–∫–∞—î `write_byte`, –º–∞–ª–æ –± –º—ñ—Ä–∫—É–≤–∞—Ç–∏ –ø—Ä–æ –±–µ–∑–ø–µ–∫—É"

#: src/bare-metal/aps/uart.md:63
msgid ""
"This is a common pattern for writing safe wrappers of unsafe code: moving "
"the burden of proof for soundness from a large number of places to a smaller "
"number of places."
msgstr ""
"–¶–µ –∑–∞–≥–∞–ª—å–Ω–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–∏—Ö –æ–±–æ–ª–æ–Ω–æ–∫ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ–≥–æ –∫–æ–¥—É: "
"–ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è —Ç—è–≥–∞—Ä—è –¥–æ–∫–∞–∑—É –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ –∑ –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –º—ñ—Å—Ü—å –Ω–∞ –º–µ–Ω—à—É "
"–∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å."

#: src/bare-metal/aps/uart/traits.md:1
msgid "More traits"
msgstr "–ë—ñ–ª—å—à–µ —Ä–∏—Å"

#: src/bare-metal/aps/uart/traits.md:3
msgid ""
"We derived the `Debug` trait. It would be useful to implement a few more "
"traits too."
msgstr ""
"–ú–∏ –≤–∏–≤–µ–ª–∏ –æ–∑–Ω–∞–∫—É `Debug`. –¢–∞–∫–æ–∂ –±—É–ª–æ –± –∫–æ—Ä–∏—Å–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —â–µ –∫—ñ–ª—å–∫–∞ –æ–∑–Ω–∞–∫."

#: src/bare-metal/aps/uart/traits.md:5
msgid ""
"```rust,editable,compile_fail\n"
"use core::fmt::{self, Write};\n"
"\n"
"impl Write for Uart {\n"
"    fn write_str(&mut self, s: &str) -> fmt::Result {\n"
"        for c in s.as_bytes() {\n"
"            self.write_byte(*c);\n"
"        }\n"
"        Ok(())\n"
"    }\n"
"}\n"
"\n"
"// Safe because it just contains a pointer to device memory, which can be\n"
"// accessed from any context.\n"
"unsafe impl Send for Uart {}\n"
"```"
msgstr ""

#: src/bare-metal/aps/uart/traits.md:24
msgid ""
"Implementing `Write` lets us use the `write!` and `writeln!` macros with our "
"`Uart` type."
msgstr ""
"–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è `Write` –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–∞–∫—Ä–æ—Å–∏ `write!` —ñ `writeln!` –∑ "
"–Ω–∞—à–∏–º —Ç–∏–ø–æ–º `Uart`."

#: src/bare-metal/aps/uart/traits.md:25
msgid ""
"Run the example in QEMU with `make qemu_minimal` under `src/bare-metal/aps/"
"examples`."
msgstr ""
"–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ —É QEMU –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `make qemu_minimal` —É `src/bare-metal/"
"aps/examples`."

#: src/bare-metal/aps/better-uart.md:1
msgid "A better UART driver"
msgstr "–ö—Ä–∞—â–∏–π –¥—Ä–∞–π–≤–µ—Ä UART"

#: src/bare-metal/aps/better-uart.md:3
msgid ""
"The PL011 actually has [a bunch more registers](https://developer.arm.com/"
"documentation/ddi0183/g/programmers-model/summary-of-registers), and adding "
"offsets to construct pointers to access them is error-prone and hard to "
"read. Plus, some of them are bit fields which would be nice to access in a "
"structured way."
msgstr ""
"PL011 –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –º–∞—î [–±–∞–≥–∞—Ç–æ –±—ñ–ª—å—à–µ —Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤](https://developer.arm.com/"
"documentation/ddi0183/g/programmers-model/summary-of-registers), —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è "
"–∑—Å—É–≤—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∫–∞–∑—ñ–≤–Ω–∏–∫—ñ–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –Ω–∏—Ö —î –ø–æ–º–∏–ª–∫–æ—é. —Å—Ö–∏–ª—å–Ω–∏–π —ñ "
"–≤–∞–∂–∫–æ —á–∏—Ç–∞—î—Ç—å—Å—è. –ö—Ä—ñ–º —Ç–æ–≥–æ, –¥–µ—è–∫—ñ –∑ –Ω–∏—Ö —î –±—ñ—Ç–æ–≤–∏–º–∏ –ø–æ–ª—è–º–∏, –¥–æ —è–∫–∏—Ö –±—É–ª–æ –± "
"–¥–æ–±—Ä–µ –º–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø."

#: src/bare-metal/aps/better-uart.md:7
msgid "Offset"
msgstr "–ó—Å—É–≤"

#: src/bare-metal/aps/better-uart.md:7
msgid "Register name"
msgstr "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —ñ–º'—è"

#: src/bare-metal/aps/better-uart.md:7
msgid "Width"
msgstr "–®–∏—Ä–∏–Ω–∞"

#: src/bare-metal/aps/better-uart.md:9
msgid "0x00"
msgstr "0x00"

#: src/bare-metal/aps/better-uart.md:9
msgid "DR"
msgstr "–î–û–ö–¢–û–†"

#: src/bare-metal/aps/better-uart.md:9
msgid "12"
msgstr "12"

#: src/bare-metal/aps/better-uart.md:10
msgid "0x04"
msgstr "0x04"

#: src/bare-metal/aps/better-uart.md:10
msgid "RSR"
msgstr "RSR"

#: src/bare-metal/aps/better-uart.md:10
msgid "4"
msgstr "4"

#: src/bare-metal/aps/better-uart.md:11
msgid "0x18"
msgstr "0x18"

#: src/bare-metal/aps/better-uart.md:11
msgid "FR"
msgstr "FR"

#: src/bare-metal/aps/better-uart.md:11
msgid "9"
msgstr "9"

#: src/bare-metal/aps/better-uart.md:12
msgid "0x20"
msgstr "0x20"

#: src/bare-metal/aps/better-uart.md:12
msgid "ILPR"
msgstr "–Ü–õ–ü–†"

#: src/bare-metal/aps/better-uart.md:12 src/bare-metal/aps/better-uart.md:15
msgid "8"
msgstr "8"

#: src/bare-metal/aps/better-uart.md:13
msgid "0x24"
msgstr "0x24"

#: src/bare-metal/aps/better-uart.md:13
msgid "IBRD"
msgstr "–ú–ë–†–†"

#: src/bare-metal/aps/better-uart.md:13 src/bare-metal/aps/better-uart.md:16
msgid "16"
msgstr "16"

#: src/bare-metal/aps/better-uart.md:14
msgid "0x28"
msgstr "0x28"

#: src/bare-metal/aps/better-uart.md:14
msgid "FBRD"
msgstr "FBRD"

#: src/bare-metal/aps/better-uart.md:14 src/bare-metal/aps/better-uart.md:17
msgid "6"
msgstr "6"

#: src/bare-metal/aps/better-uart.md:15
msgid "0x2c"
msgstr "0x2c"

#: src/bare-metal/aps/better-uart.md:15
msgid "LCR_H"
msgstr "LCR_H"

#: src/bare-metal/aps/better-uart.md:16
msgid "0x30"
msgstr "0x30"

#: src/bare-metal/aps/better-uart.md:16
msgid "CR"
msgstr "CR"

#: src/bare-metal/aps/better-uart.md:17
msgid "0x34"
msgstr "0x34"

#: src/bare-metal/aps/better-uart.md:17
msgid "IFLS"
msgstr "IFLS"

#: src/bare-metal/aps/better-uart.md:18
msgid "0x38"
msgstr "0x38"

#: src/bare-metal/aps/better-uart.md:18
msgid "IMSC"
msgstr "IMSC"

#: src/bare-metal/aps/better-uart.md:18 src/bare-metal/aps/better-uart.md:19
#: src/bare-metal/aps/better-uart.md:20 src/bare-metal/aps/better-uart.md:21
msgid "11"
msgstr "11"

#: src/bare-metal/aps/better-uart.md:19
msgid "0x3c"
msgstr "0x3c"

#: src/bare-metal/aps/better-uart.md:19
msgid "RIS"
msgstr "–†–Ü–°"

#: src/bare-metal/aps/better-uart.md:20
msgid "0x40"
msgstr "0x40"

#: src/bare-metal/aps/better-uart.md:20
msgid "MIS"
msgstr "MIS"

#: src/bare-metal/aps/better-uart.md:21
msgid "0x44"
msgstr "0x44"

#: src/bare-metal/aps/better-uart.md:21
msgid "ICR"
msgstr "ICR"

#: src/bare-metal/aps/better-uart.md:22
msgid "0x48"
msgstr "0x48"

#: src/bare-metal/aps/better-uart.md:22
msgid "DMACR"
msgstr "DMACR"

#: src/bare-metal/aps/better-uart.md:22
msgid "3"
msgstr "3"

#: src/bare-metal/aps/better-uart.md:26
msgid "There are also some ID registers which have been omitted for brevity."
msgstr "–Ñ —Ç–∞–∫–æ–∂ –¥–µ—è–∫—ñ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π–Ω—ñ —Ä–µ—î—Å—Ç—Ä–∏, —è–∫—ñ –±—É–ª–∏ –æ–ø—É—â–µ–Ω—ñ –¥–ª—è —Å—Ç–∏—Å–ª–æ—Å—Ç—ñ."

#: src/bare-metal/aps/better-uart/bitflags.md:3
msgid ""
"The [`bitflags`](https://crates.io/crates/bitflags) crate is useful for "
"working with bitflags."
msgstr ""
"–Ø—â–∏–∫ [`bitflags`](https://crates.io/crates/bitflags) –∫–æ—Ä–∏—Å–Ω–∏–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ "
"–±—ñ—Ç–æ–≤–∏–º–∏ —Ñ–ª–∞–≥–∞–º–∏."

#: src/bare-metal/aps/better-uart/bitflags.md:5
msgid ""
"```rust,editable,compile_fail\n"
"use bitflags::bitflags;\n"
"\n"
"bitflags! {\n"
"    /// Flags from the UART flag register.\n"
"    #[repr(transparent)]\n"
"    #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n"
"    struct Flags: u16 {\n"
"        /// Clear to send.\n"
"        const CTS = 1 << 0;\n"
"        /// Data set ready.\n"
"        const DSR = 1 << 1;\n"
"        /// Data carrier detect.\n"
"        const DCD = 1 << 2;\n"
"        /// UART busy transmitting data.\n"
"        const BUSY = 1 << 3;\n"
"        /// Receive FIFO is empty.\n"
"        const RXFE = 1 << 4;\n"
"        /// Transmit FIFO is full.\n"
"        const TXFF = 1 << 5;\n"
"        /// Receive FIFO is full.\n"
"        const RXFF = 1 << 6;\n"
"        /// Transmit FIFO is empty.\n"
"        const TXFE = 1 << 7;\n"
"        /// Ring indicator.\n"
"        const RI = 1 << 8;\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:37
msgid ""
"The `bitflags!` macro creates a newtype something like `Flags(u16)`, along "
"with a bunch of method implementations to get and set flags."
msgstr ""
"–ú–∞–∫—Ä–æ—Å `bitflags!` —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —Ç–∏–ø, —â–æ—Å—å –Ω–∞ –∫—à—Ç–∞–ª—Ç `Flags(u16)` —Ä–∞–∑–æ–º —ñ–∑ "
"–∫—É–ø–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ–π –º–µ—Ç–æ–¥—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—ñ–≤."

#: src/bare-metal/aps/better-uart/registers.md:1
msgid "Multiple registers"
msgstr "–ö—ñ–ª—å–∫–∞ —Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤"

#: src/bare-metal/aps/better-uart/registers.md:3
msgid ""
"We can use a struct to represent the memory layout of the UART's registers."
msgstr ""
"–ú–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –º–∞–∫–µ—Ç–∞ –ø–∞–º‚Äô—è—Ç—ñ "
"—Ä–µ–≥—ñ—Å—Ç—Ä—ñ–≤ UART."

#: src/bare-metal/aps/better-uart/registers.md:5
msgid ""
"```rust,editable,compile_fail\n"
"#[repr(C, align(4))]\n"
"struct Registers {\n"
"    dr: u16,\n"
"    _reserved0: [u8; 2],\n"
"    rsr: ReceiveStatus,\n"
"    _reserved1: [u8; 19],\n"
"    fr: Flags,\n"
"    _reserved2: [u8; 6],\n"
"    ilpr: u8,\n"
"    _reserved3: [u8; 3],\n"
"    ibrd: u16,\n"
"    _reserved4: [u8; 2],\n"
"    fbrd: u8,\n"
"    _reserved5: [u8; 3],\n"
"    lcr_h: u8,\n"
"    _reserved6: [u8; 3],\n"
"    cr: u16,\n"
"    _reserved7: [u8; 3],\n"
"    ifls: u8,\n"
"    _reserved8: [u8; 3],\n"
"    imsc: u16,\n"
"    _reserved9: [u8; 2],\n"
"    ris: u16,\n"
"    _reserved10: [u8; 2],\n"
"    mis: u16,\n"
"    _reserved11: [u8; 2],\n"
"    icr: u16,\n"
"    _reserved12: [u8; 2],\n"
"    dmacr: u8,\n"
"    _reserved13: [u8; 3],\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md:41
msgid ""
"[`#[repr(C)]`](https://doc.rust-lang.org/reference/type-layout.html#the-c-"
"representation) tells the compiler to lay the struct fields out in order, "
"following the same rules as C. This is necessary for our struct to have a "
"predictable layout, as default Rust representation allows the compiler to "
"(among other things) reorder fields however it sees fit."
msgstr ""
"[`#[repr(C)]`](https://doc.rust-lang.org/reference/type-layout.html#the-c-"
"representation) –ø–æ–≤—ñ–¥–æ–º–ª—è—î –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä—É —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –ø–æ–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤ –ø–æ—Ä—è–¥–∫—É, "
"–¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å —Ç–∏—Ö —Å–∞–º–∏—Ö –ø—Ä–∞–≤–∏–ª, —â–æ –π C. –¶–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –Ω–∞—à–∞ "
"—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞–ª–∞ –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏–π –º–∞–∫–µ—Ç, –æ—Å–∫—ñ–ª—å–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è Rust –∑–∞ "
"–∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–æ–∑–≤–æ–ª—è—î –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä—É (–º—ñ–∂ —ñ–Ω—à–∏–º) –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª—ñ–≤, —è–∫ "
"–≤—ñ–Ω –≤–≤–∞–∂–∞—î –∑–∞ –ø–æ—Ç—Ä—ñ–±–Ω–µ."

#: src/bare-metal/aps/better-uart/driver.md:3
msgid "Now let's use the new `Registers` struct in our driver."
msgstr ""
"–¢–µ–ø–µ—Ä –¥–∞–≤–∞–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –Ω–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É `Registers` —É –Ω–∞—à–æ–º—É –¥—Ä–∞–π–≤–µ—Ä—ñ."

#: src/bare-metal/aps/better-uart/driver.md:5
msgid ""
"```rust,editable,compile_fail\n"
"/// Driver for a PL011 UART.\n"
"#[derive(Debug)]\n"
"pub struct Uart {\n"
"    registers: *mut Registers,\n"
"}\n"
"\n"
"impl Uart {\n"
"    /// Constructs a new instance of the UART driver for a PL011 device at "
"the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the 8 MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
"    pub unsafe fn new(base_address: *mut u32) -> Self {\n"
"        Self {\n"
"            registers: base_address as *mut Registers,\n"
"        }\n"
"    }\n"
"\n"
"    /// Writes a single byte to the UART.\n"
"    pub fn write_byte(&self, byte: u8) {\n"
"        // Wait until there is room in the TX buffer.\n"
"        while self.read_flag_register().contains(Flags::TXFF) {}\n"
"\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
"        unsafe {\n"
"            // Write to the TX buffer.\n"
"            addr_of_mut!((*self.registers).dr).write_volatile(byte.into());\n"
"        }\n"
"\n"
"        // Wait until the UART is no longer busy.\n"
"        while self.read_flag_register().contains(Flags::BUSY) {}\n"
"    }\n"
"\n"
"    /// Reads and returns a pending byte, or `None` if nothing has been "
"received.\n"
"    pub fn read_byte(&self) -> Option<u8> {\n"
"        if self.read_flag_register().contains(Flags::RXFE) {\n"
"            None\n"
"        } else {\n"
"            let data = unsafe { addr_of!((*self.registers).dr)."
"read_volatile() };\n"
"            // TODO: Check for error conditions in bits 8-11.\n"
"            Some(data as u8)\n"
"        }\n"
"    }\n"
"\n"
"    fn read_flag_register(&self) -> Flags {\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
"        unsafe { addr_of!((*self.registers).fr).read_volatile() }\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:64
msgid ""
"Note the use of `addr_of!` / `addr_of_mut!` to get pointers to individual "
"fields without creating an intermediate reference, which would be unsound."
msgstr ""
"–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `addr_of!` / `addr_of_mut!` –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è "
"–≤–∫–∞–∑—ñ–≤–Ω–∏–∫—ñ–≤ –Ω–∞ –æ–∫—Ä–µ–º—ñ –ø–æ–ª—è –±–µ–∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º—ñ–∂–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —â–æ –±—É–ª–æ –± "
"–Ω–µ—Ä–æ–∑—É–º–Ω–∏–º."

#: src/bare-metal/aps/better-uart/using.md:1
#: src/bare-metal/aps/logging/using.md:1
msgid "Using it"
msgstr "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –π–æ–≥–æ"

#: src/bare-metal/aps/better-uart/using.md:3
msgid ""
"Let's write a small program using our driver to write to the serial console, "
"and echo incoming bytes."
msgstr ""
"–î–∞–≤–∞–π—Ç–µ –Ω–∞–ø–∏—à–µ–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –ø—Ä–æ–≥—Ä–∞–º—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –Ω–∞—à –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å—É –≤ "
"–ø–æ—Å–ª—ñ–¥–æ–≤–Ω—É –∫–æ–Ω—Å–æ–ª—å —ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Ö—ñ–¥–Ω–∏—Ö –±–∞–π—Ç—ñ–≤."

#: src/bare-metal/aps/better-uart/using.md:6
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"mod exceptions;\n"
"mod pl011;\n"
"\n"
"use crate::pl011::Uart;\n"
"use core::fmt::Write;\n"
"use core::panic::PanicInfo;\n"
"use log::error;\n"
"use smccc::psci::system_off;\n"
"use smccc::Hvc;\n"
"\n"
"/// Base address of the primary PL011 UART.\n"
"const PL011_BASE_ADDRESS: *mut u32 = 0x900_0000 as _;\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn main(x0: u64, x1: u64, x2: u64, x3: u64) {\n"
"    // Safe because `PL011_BASE_ADDRESS` is the base address of a PL011 "
"device,\n"
"    // and nothing else accesses that address range.\n"
"    let mut uart = unsafe { Uart::new(PL011_BASE_ADDRESS) };\n"
"\n"
"    writeln!(uart, \"main({x0:#x}, {x1:#x}, {x2:#x}, {x3:#x})\").unwrap();\n"
"\n"
"    loop {\n"
"        if let Some(byte) = uart.read_byte() {\n"
"            uart.write_byte(byte);\n"
"            match byte {\n"
"                b'\\r' => {\n"
"                    uart.write_byte(b'\\n');\n"
"                }\n"
"                b'q' => break,\n"
"                _ => {}\n"
"            }\n"
"        }\n"
"    }\n"
"\n"
"    writeln!(uart, \"Bye!\").unwrap();\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:51
msgid ""
"As in the [inline assembly](../inline-assembly.md) example, this `main` "
"function is called from our entry point code in `entry.S`. See the speaker "
"notes there for details."
msgstr ""
"–Ø–∫ —ñ —É –ø—Ä–∏–∫–ª–∞–¥—ñ [inline-assembly](../inline-assembly.md), —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è main "
"–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ –Ω–∞—à–æ–≥–æ –∫–æ–¥—É —Ç–æ—á–∫–∏ –≤—Ö–æ–¥—É –≤ `entry.S`. –î–æ–∫–ª–∞–¥–Ω—ñ—à–µ –¥–∏–≤. —É "
"–ø—Ä–∏–º—ñ—Ç–∫–∞—Ö –¥–æ–ø–æ–≤—ñ–¥–∞—á–∞."

#: src/bare-metal/aps/better-uart/using.md:53
msgid ""
"Run the example in QEMU with `make qemu` under `src/bare-metal/aps/examples`."
msgstr ""
"–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ —É QEMU –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `make qemu` —É `src/bare-metal/aps/"
"examples`."

#: src/bare-metal/aps/logging.md:3
msgid ""
"It would be nice to be able to use the logging macros from the [`log`]"
"(https://crates.io/crates/log) crate. We can do this by implementing the "
"`Log` trait."
msgstr ""
"–ë—É–ª–æ –± —á—É–¥–æ–≤–æ –º–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–∞–∫—Ä–æ—Å–∏ –∂—É—Ä–Ω–∞–ª—é–≤–∞–Ω–Ω—è –∑ —è—â–∏–∫–∞ "
"[`log`](https://crates.io/crates/log). –ú–∏ –º–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ, —Ä–µ–∞–ª—ñ–∑—É–≤–∞–≤—à–∏ "
"–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `Log`."

#: src/bare-metal/aps/logging.md:6
msgid ""
"```rust,editable,compile_fail\n"
"use crate::pl011::Uart;\n"
"use core::fmt::Write;\n"
"use log::{LevelFilter, Log, Metadata, Record, SetLoggerError};\n"
"use spin::mutex::SpinMutex;\n"
"\n"
"static LOGGER: Logger = Logger {\n"
"    uart: SpinMutex::new(None),\n"
"};\n"
"\n"
"struct Logger {\n"
"    uart: SpinMutex<Option<Uart>>,\n"
"}\n"
"\n"
"impl Log for Logger {\n"
"    fn enabled(&self, _metadata: &Metadata) -> bool {\n"
"        true\n"
"    }\n"
"\n"
"    fn log(&self, record: &Record) {\n"
"        writeln!(\n"
"            self.uart.lock().as_mut().unwrap(),\n"
"            \"[{}] {}\",\n"
"            record.level(),\n"
"            record.args()\n"
"        )\n"
"        .unwrap();\n"
"    }\n"
"\n"
"    fn flush(&self) {}\n"
"}\n"
"\n"
"/// Initialises UART logger.\n"
"pub fn init(uart: Uart, max_level: LevelFilter) -> Result<(), "
"SetLoggerError> {\n"
"    LOGGER.uart.lock().replace(uart);\n"
"\n"
"    log::set_logger(&LOGGER)?;\n"
"    log::set_max_level(max_level);\n"
"    Ok(())\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/aps/logging.md:50
msgid ""
"The unwrap in `log` is safe because we initialise `LOGGER` before calling "
"`set_logger`."
msgstr ""
"–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤ `log` —î –±–µ–∑–ø–µ—á–Ω–∏–º, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ `LOGGER` –ø–µ—Ä–µ–¥ "
"–≤–∏–∫–ª–∏–∫–æ–º `set_logger`."

#: src/bare-metal/aps/logging/using.md:3
msgid "We need to initialise the logger before we use it."
msgstr "–ù–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º."

#: src/bare-metal/aps/logging/using.md:5
msgid ""
"```rust,editable,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"mod exceptions;\n"
"mod logger;\n"
"mod pl011;\n"
"\n"
"use crate::pl011::Uart;\n"
"use core::panic::PanicInfo;\n"
"use log::{error, info, LevelFilter};\n"
"use smccc::psci::system_off;\n"
"use smccc::Hvc;\n"
"\n"
"/// Base address of the primary PL011 UART.\n"
"const PL011_BASE_ADDRESS: *mut u32 = 0x900_0000 as _;\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn main(x0: u64, x1: u64, x2: u64, x3: u64) {\n"
"    // Safe because `PL011_BASE_ADDRESS` is the base address of a PL011 "
"device,\n"
"    // and nothing else accesses that address range.\n"
"    let uart = unsafe { Uart::new(PL011_BASE_ADDRESS) };\n"
"    logger::init(uart, LevelFilter::Trace).unwrap();\n"
"\n"
"    info!(\"main({x0:#x}, {x1:#x}, {x2:#x}, {x3:#x})\");\n"
"\n"
"    assert_eq!(x1, 42);\n"
"\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[panic_handler]\n"
"fn panic(info: &PanicInfo) -> ! {\n"
"    error!(\"{info}\");\n"
"    system_off::<Hvc>().unwrap();\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/aps/logging/using.md:46
msgid "Note that our panic handler can now log details of panics."
msgstr ""
"–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ –Ω–∞—à –æ–±—Ä–æ–±–Ω–∏–∫ –ø–∞–Ω—ñ–∫–∏ —Ç–µ–ø–µ—Ä –º–æ–∂–µ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –ø–∞–Ω—ñ–∫–∏."

#: src/bare-metal/aps/logging/using.md:47
msgid ""
"Run the example in QEMU with `make qemu_logger` under `src/bare-metal/aps/"
"examples`."
msgstr ""
"–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ —É QEMU –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `make qemu_logger` —É `src/bare-metal/"
"aps/examples`."

#: src/bare-metal/aps/exceptions.md:3
msgid ""
"AArch64 defines an exception vector table with 16 entries, for 4 types of "
"exceptions (synchronous, IRQ, FIQ, SError) from 4 states (current EL with "
"SP0, current EL with SPx, lower EL using AArch64, lower EL using AArch32). "
"We implement this in assembly to save volatile registers to the stack before "
"calling into Rust code:"
msgstr ""
"AArch64 –≤–∏–∑–Ω–∞—á–∞—î –≤–µ–∫—Ç–æ—Ä–Ω—É —Ç–∞–±–ª–∏—Ü—é –≤–∏–Ω—è—Ç–∫—ñ–≤ —ñ–∑ 16 –∑–∞–ø–∏—Å–∞–º–∏ –¥–ª—è 4 —Ç–∏–ø—ñ–≤ "
"–≤–∏–Ω—è—Ç–∫—ñ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π, IRQ, FIQ, SError) —ñ–∑ 4 —Å—Ç–∞–Ω—ñ–≤ (–ø–æ—Ç–æ—á–Ω–∏–π EL —ñ–∑ SP0, "
"–ø–æ—Ç–æ—á–Ω–∏–π EL —ñ–∑ SPx, –Ω–∏–∂—á–∏–π EL —ñ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º AArch64, –Ω–∏–∂–Ω—ñ–π EL —ñ–∑ "
"–∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º AArch32). –ú–∏ —Ä–µ–∞–ª—ñ–∑—É—î–º–æ —Ü–µ –≤ –∞—Å–µ–º–±–ª–µ—Ä—ñ, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ "
"–Ω–µ–ø–æ—Å—Ç—ñ–π–Ω—ñ —Ä–µ–≥—ñ—Å—Ç—Ä–∏ –≤ —Å—Ç–µ–∫—É –ø–µ—Ä–µ–¥ –≤–∏–∫–ª–∏–∫–æ–º –∫–æ–¥—É Rust:"

#: src/bare-metal/aps/exceptions.md:8
msgid ""
"```rust,editable,compile_fail\n"
"use log::error;\n"
"use smccc::psci::system_off;\n"
"use smccc::Hvc;\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn sync_exception_current(_elr: u64, _spsr: u64) {\n"
"    error!(\"sync_exception_current\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn irq_current(_elr: u64, _spsr: u64) {\n"
"    error!(\"irq_current\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn fiq_current(_elr: u64, _spsr: u64) {\n"
"    error!(\"fiq_current\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn serr_current(_elr: u64, _spsr: u64) {\n"
"    error!(\"serr_current\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn sync_lower(_elr: u64, _spsr: u64) {\n"
"    error!(\"sync_lower\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn irq_lower(_elr: u64, _spsr: u64) {\n"
"    error!(\"irq_lower\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn fiq_lower(_elr: u64, _spsr: u64) {\n"
"    error!(\"fiq_lower\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn serr_lower(_elr: u64, _spsr: u64) {\n"
"    error!(\"serr_lower\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/aps/exceptions.md:64
msgid "EL is exception level; all our examples this afternoon run in EL1."
msgstr ""

#: src/bare-metal/aps/exceptions.md:65
msgid ""
"For simplicity we aren't distinguishing between SP0 and SPx for the current "
"EL exceptions, or between AArch32 and AArch64 for the lower EL exceptions."
msgstr ""
"–î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –º–∏ –Ω–µ —Ä–æ–∑—Ä—ñ–∑–Ω—è—î–º–æ SP0 —ñ SPx –¥–ª—è –ø–æ—Ç–æ—á–Ω–∏—Ö –≤–∏–Ω—è—Ç–∫—ñ–≤ EL –∞–±–æ –º—ñ–∂ "
"AArch32 —ñ AArch64 –¥–ª—è –Ω–∏–∂—á–∏—Ö –≤–∏–Ω—è—Ç–∫—ñ–≤ EL."

#: src/bare-metal/aps/exceptions.md:67
msgid ""
"For this example we just log the exception and power down, as we don't "
"expect any of them to actually happen."
msgstr ""
"–£ —Ü—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ –º–∏ –ø—Ä–æ—Å—Ç–æ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ –≤–∏–Ω—è—Ç–æ–∫ —ñ –≤–∏–º–∏–∫–∞—î–º–æ –∂–∏–≤–ª–µ–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ "
"–º–∏ –Ω–µ –æ—á—ñ–∫—É—î–º–æ, —â–æ –±—É–¥—å-—è–∫–µ –∑ –Ω–∏—Ö —Å—Ç–∞–Ω–µ—Ç—å—Å—è."

#: src/bare-metal/aps/exceptions.md:69
msgid ""
"We can think of exception handlers and our main execution context more or "
"less like different threads. [`Send` and `Sync`](../../concurrency/send-sync."
"md) will control what we can share between them, just like with threads. For "
"example, if we want to share some value between exception handlers and the "
"rest of the program, and it's `Send` but not `Sync`, then we'll need to wrap "
"it in something like a `Mutex` and put it in a static."
msgstr ""
"–ú–∏ –º–æ–∂–µ–º–æ —Ä–æ–∑–≥–ª—è–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –≤–∏–Ω—è—Ç–∫—ñ–≤ —ñ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è "
"–±—ñ–ª—å—à-–º–µ–Ω—à —è–∫ —Ä—ñ–∑–Ω—ñ –ø–æ—Ç–æ–∫–∏. [`–ù–∞–¥—ñ—Å–ª–∞—Ç–∏` —ñ `–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏`](../../"
"concurrency/send-sync.md) –∫–µ—Ä—É–≤–∞—Ç–∏–º—É—Ç—å —Ç–∏–º, —á–∏–º –º–∏ –º–æ–∂–µ–º–æ –æ–±–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –º—ñ–∂ "
"–Ω–∏–º–∏, —è–∫ —ñ –∑ –ø–æ—Ç–æ–∫–∞–º–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ –º–∏ —Ö–æ—á–µ–º–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –¥–µ—è–∫–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º "
"–º—ñ–∂ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏ –≤–∏–Ω—è—Ç–∫—ñ–≤ —Ç–∞ —Ä–µ—à—Ç–æ—é –ø—Ä–æ–≥—Ä–∞–º–∏, —ñ —Ü–µ `Send`, –∞–ª–µ –Ω–µ `Sync`, "
"—Ç–æ–¥—ñ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –∑–∞–≥–æ—Ä–Ω—É—Ç–∏ –π–æ–≥–æ –≤ —â–æ—Å—å –Ω–∞ –∑—Ä–∞–∑–æ–∫ `Mutex` —ñ –ø–æ–º—ñ—Å—Ç–∏—Ç–∏ –≤ "
"—Å—Ç–∞—Ç–∏–∫–∞."

#: src/bare-metal/aps/other-projects.md:3
msgid "[oreboot](https://github.com/oreboot/oreboot)"
msgstr "[oreboot](https://github.com/oreboot/oreboot)"

#: src/bare-metal/aps/other-projects.md:4
msgid "\"coreboot without the C\""
msgstr "\"coreboot –±–µ–∑ C\""

#: src/bare-metal/aps/other-projects.md:5
msgid "Supports x86, aarch64 and RISC-V."
msgstr "–ü—ñ–¥—Ç—Ä–∏–º—É—î x86, aarch64 —ñ RISC-V."

#: src/bare-metal/aps/other-projects.md:6
msgid "Relies on LinuxBoot rather than having many drivers itself."
msgstr "–ü–æ–∫–ª–∞–¥–∞—î—Ç—å—Å—è –Ω–∞ LinuxBoot, –∞ –Ω–µ –Ω–∞ –±–∞–≥–∞—Ç–æ –¥—Ä–∞–π–≤–µ—Ä—ñ–≤."

#: src/bare-metal/aps/other-projects.md:7
msgid ""
"[Rust RaspberryPi OS tutorial](https://github.com/rust-embedded/rust-"
"raspberrypi-OS-tutorials)"
msgstr ""
"[–ù–∞–≤—á–∞–ª—å–Ω–∏–π –ø–æ—Å—ñ–±–Ω–∏–∫ –∑ –û–° Rust RaspberryPi](https://github.com/rust-embedded/"
"rust-raspberrypi-OS-tutorials)"

#: src/bare-metal/aps/other-projects.md:8
msgid ""
"Initialisation, UART driver, simple bootloader, JTAG, exception levels, "
"exception handling, page tables"
msgstr ""
"–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è, –¥—Ä–∞–π–≤–µ—Ä UART, –ø—Ä–æ—Å—Ç–∏–π –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á, JTAG, —Ä—ñ–≤–Ω—ñ –≤–∏–Ω—è—Ç–∫—ñ–≤, "
"–æ–±—Ä–æ–±–∫–∞ –≤–∏–Ω—è—Ç–∫—ñ–≤, —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫"

#: src/bare-metal/aps/other-projects.md:10
msgid ""
"Some dodginess around cache maintenance and initialisation in Rust, not "
"necessarily a good example to copy for production code."
msgstr ""
"–î–µ—è–∫—ñ —Ö–∏—Ç—Ä–æ—â—ñ —â–æ–¥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∫–µ—à—É —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤ Rust, –Ω–µ "
"–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ —Ö–æ—Ä–æ—à–∏–π –ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–±–æ—á–æ–≥–æ –∫–æ–¥—É."

#: src/bare-metal/aps/other-projects.md:12
msgid "[`cargo-call-stack`](https://crates.io/crates/cargo-call-stack)"
msgstr "[`cargo-call-stack`](https://crates.io/crates/cargo-call-stack)"

#: src/bare-metal/aps/other-projects.md:13
msgid "Static analysis to determine maximum stack usage."
msgstr "–°—Ç–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–µ–∫–∞."

#: src/bare-metal/aps/other-projects.md:17
msgid ""
"The RaspberryPi OS tutorial runs Rust code before the MMU and caches are "
"enabled. This will read and write memory (e.g. the stack). However:"
msgstr ""
"–ü—ñ–¥—Ä—É—á–Ω–∏–∫ –∑ –û–° RaspberryPi –∑–∞–ø—É—Å–∫–∞—î –∫–æ–¥ Rust –¥–æ –≤–≤—ñ–º–∫–Ω–µ–Ω–Ω—è MMU —Ç–∞ –∫–µ—à—É. –¶–µ "
"–¥–æ–∑–≤–æ–ª–∏—Ç—å —á–∏—Ç–∞—Ç–∏ —Ç–∞ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –ø–∞–º‚Äô—è—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—Ç–µ–∫). –û–¥–Ω–∞–∫:"

#: src/bare-metal/aps/other-projects.md:19
msgid ""
"Without the MMU and cache, unaligned accesses will fault. It builds with "
"`aarch64-unknown-none` which sets `+strict-align` to prevent the compiler "
"generating unaligned accesses so it should be alright, but this is not "
"necessarily the case in general."
msgstr ""
"–ë–µ–∑ MMU —Ç–∞ –∫–µ—à—É –Ω–µ–≤–∏—Ä—ñ–≤–Ω—è–Ω–∏–π –¥–æ—Å—Ç—É–ø –±—É–¥–µ –Ω–µ—Å–ø—Ä–∞–≤–Ω–∏–º. –í—ñ–Ω —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∑–∞ "
"–¥–æ–ø–æ–º–æ–≥–æ—é `aarch64-unknown-none`, —è–∫–∏–π –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î `+strict-align`, —â–æ–± "
"–∑–∞–ø–æ–±—ñ–≥—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–æ–º –Ω–µ–≤–∏—Ä—ñ–≤–Ω—è–Ω–∏—Ö –¥–æ—Å—Ç—É–ø—ñ–≤, —Ç–æ–º—É —Ü–µ –º–∞—î –±—É—Ç–∏ "
"–¥–æ–±—Ä–µ, –∞–ª–µ —Ü–µ –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ —Ç–∞–∫ –∑–∞–≥–∞–ª–æ–º."

#: src/bare-metal/aps/other-projects.md:22
msgid ""
"If it were running in a VM, this can lead to cache coherency issues. The "
"problem is that the VM is accessing memory directly with the cache disabled, "
"while the host has cacheable aliases to the same memory. Even if the host "
"doesn't explicitly access the memory, speculative accesses can lead to cache "
"fills, and then changes from one or the other will get lost. Again this is "
"alright in this particular case (running directly on the hardware with no "
"hypervisor), but isn't a good pattern in general."
msgstr ""
"–Ø–∫—â–æ –≤—ñ–Ω –ø—Ä–∞—Ü—é–≤–∞–≤ —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—ñ–π –º–∞—à–∏–Ω—ñ, —Ü–µ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –ø—Ä–æ–±–ª–µ–º "
"—É–∑–≥–æ–¥–∂–µ–Ω–æ—Å—Ç—ñ –∫–µ—à—É. –ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ –º–∞—à–∏–Ω–∞ –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è "
"–¥–æ –ø–∞–º‚Äô—è—Ç—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –≤–∏–º–∫–Ω–µ–Ω–∏–º –∫–µ—à-–ø–∞–º‚Äô—è—Ç—Ç—é, —Ç–æ–¥—ñ —è–∫ —Ö–æ—Å—Ç –º–∞—î –∫–µ—à–æ–≤–∞–Ω—ñ "
"–ø—Å–µ–≤–¥–æ–Ω—ñ–º–∏ –¥–ª—è —Ç—ñ—î—ó —Å–∞–º–æ—ó –ø–∞–º‚Äô—è—Ç—ñ. –ù–∞–≤—ñ—Ç—å —è–∫—â–æ —Ö–æ—Å—Ç —è–≤–Ω–æ –Ω–µ –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ "
"–ø–∞–º‚Äô—è—Ç—ñ, —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ñ –¥–æ—Å—Ç—É–ø–∏ –º–æ–∂—É—Ç—å –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–µ—à—É, –∞ –ø–æ—Ç—ñ–º "
"–∑–º—ñ–Ω–∏, –≤–Ω–µ—Å–µ–Ω—ñ —Ç–∏–º —á–∏ —ñ–Ω—à–∏–º, –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ. –ó–Ω–æ–≤—É –∂ —Ç–∞–∫–∏, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ "
"—Ü—å–æ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É (–ø—Ä–∞—Ü—é—î –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ –∞–ø–∞—Ä–∞—Ç–Ω–æ–º—É –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—ñ "
"–±–µ–∑ –≥—ñ–ø–µ—Ä–≤—ñ–∑–æ—Ä–∞), –∞–ª–µ —Ü–µ –Ω–µ –¥—É–∂–µ —Ö–æ—Ä–æ—à–∏–π —à–∞–±–ª–æ–Ω –∑–∞–≥–∞–ª–æ–º."

#: src/bare-metal/useful-crates.md:3
msgid ""
"We'll go over a few crates which solve some common problems in bare-metal "
"programming."
msgstr ""
"–ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –∫—ñ–ª—å–∫–∞ —è—â–∏–∫—ñ–≤, —è–∫—ñ –≤–∏—Ä—ñ—à—É—é—Ç—å –¥–µ—è–∫—ñ –ø–æ—à–∏—Ä–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ "
"–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–º—É –∑–∞–ª—ñ–∑—ñ."

#: src/bare-metal/useful-crates/zerocopy.md:1
msgid "`zerocopy`"
msgstr "`–Ω—É–ª—å–æ–≤–∞ –∫–æ–ø—ñ—è`"

#: src/bare-metal/useful-crates/zerocopy.md:3
msgid ""
"The [`zerocopy`](https://docs.rs/zerocopy/) crate (from Fuchsia) provides "
"traits and macros for safely converting between byte sequences and other "
"types."
msgstr ""
"–Ø—â–∏–∫ [`zerocopy`](https://docs.rs/zerocopy/) (–≤—ñ–¥ Fuchsia) –Ω–∞–¥–∞—î –æ–∑–Ω–∞–∫–∏ —Ç–∞ "
"–º–∞–∫—Ä–æ—Å–∏ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–∂ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—è–º–∏ –±–∞–π—Ç—ñ–≤ —Ç–∞ —ñ–Ω—à–∏–º–∏ "
"—Ç–∏–ø–∞–º–∏."

#: src/bare-metal/useful-crates/zerocopy.md:6
msgid ""
"```rust,editable,compile_fail\n"
"use zerocopy::AsBytes;\n"
"\n"
"#[repr(u32)]\n"
"#[derive(AsBytes, Debug, Default)]\n"
"enum RequestType {\n"
"    #[default]\n"
"    In = 0,\n"
"    Out = 1,\n"
"    Flush = 4,\n"
"}\n"
"\n"
"#[repr(C)]\n"
"#[derive(AsBytes, Debug, Default)]\n"
"struct VirtioBlockRequest {\n"
"    request_type: RequestType,\n"
"    reserved: u32,\n"
"    sector: u64,\n"
"}\n"
"\n"
"fn main() {\n"
"    let request = VirtioBlockRequest {\n"
"        request_type: RequestType::Flush,\n"
"        sector: 42,\n"
"        ..Default::default()\n"
"    };\n"
"\n"
"    assert_eq!(\n"
"        request.as_bytes(),\n"
"        &[4, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0]\n"
"    );\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md:40
msgid ""
"This is not suitable for MMIO (as it doesn't use volatile reads and writes), "
"but can be useful for working with structures shared with hardware e.g. by "
"DMA, or sent over some external interface."
msgstr ""
"–¶–µ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è MMIO (–æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –Ω–µ–∑–∞–ª–µ–∂–Ω–µ —á–∏—Ç–∞–Ω–Ω—è —Ç–∞ "
"–∑–∞–ø–∏—Å), –∞–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏, —Å–ø—ñ–ª—å–Ω–∏–º–∏ –∑ "
"–æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è–º, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥. —á–µ—Ä–µ–∑ DMA –∞–±–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —á–µ—Ä–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å."

#: src/bare-metal/useful-crates/zerocopy.md:45
msgid ""
"`FromBytes` can be implemented for types for which any byte pattern is "
"valid, and so can safely be converted from an untrusted sequence of bytes."
msgstr ""
"`FromBytes` –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–ª—è —Ç–∏–ø—ñ–≤, –¥–ª—è —è–∫–∏—Ö –¥—ñ–π—Å–Ω–∏–π –±—É–¥—å-—è–∫–∏–π —à–∞–±–ª–æ–Ω "
"–±–∞–π—Ç—ñ–≤, —ñ —Ç–æ–º—É –π–æ–≥–æ –º–æ–∂–Ω–∞ –±–µ–∑–ø–µ—á–Ω–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∑ –Ω–µ–Ω–∞–¥—ñ–π–Ω–æ—ó –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ "
"–±–∞–π—Ç—ñ–≤."

#: src/bare-metal/useful-crates/zerocopy.md:47
msgid ""
"Attempting to derive `FromBytes` for these types would fail, because "
"`RequestType` doesn't use all possible u32 values as discriminants, so not "
"all byte patterns are valid."
msgstr ""
"–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ `FromBytes` –¥–ª—è —Ü–∏—Ö —Ç–∏–ø—ñ–≤ –Ω–µ –≤–¥–∞—Å—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ "
"`RequestType` –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è u32 —è–∫ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞–Ω—Ç–∏, "
"—Ç–æ–º—É –Ω–µ –≤—Å—ñ —à–∞–±–ª–æ–Ω–∏ –±–∞–π—Ç—ñ–≤ —î –¥—ñ–π—Å–Ω–∏–º–∏."

#: src/bare-metal/useful-crates/zerocopy.md:49
msgid ""
"`zerocopy::byteorder` has types for byte-order aware numeric primitives."
msgstr ""
"`zerocopy::byteorder` –º–∞—î —Ç–∏–ø–∏ –¥–ª—è —á–∏—Å–ª–æ–≤–∏—Ö –ø—Ä–∏–º—ñ—Ç–∏–≤—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Ä—è–¥–∫—É "
"–±–∞–π—Ç—ñ–≤."

#: src/bare-metal/useful-crates/zerocopy.md:50
msgid ""
"Run the example with `cargo run` under `src/bare-metal/useful-crates/"
"zerocopy-example/`. (It won't run in the Playground because of the crate "
"dependency.)"
msgstr ""
"–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ —ñ–∑ `cargo run` —É `src/bare-metal/useful-crates/zerocopy-"
"example/`. (–í—ñ–Ω –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –º–∞–π–¥–∞–Ω—á–∏–∫—É —á–µ—Ä–µ–∑ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å "
"—è—â–∏–∫–∞.)"

#: src/bare-metal/useful-crates/aarch64-paging.md:1
msgid "`aarch64-paging`"
msgstr "`aarch64-paging`"

#: src/bare-metal/useful-crates/aarch64-paging.md:3
msgid ""
"The [`aarch64-paging`](https://crates.io/crates/aarch64-paging) crate lets "
"you create page tables according to the AArch64 Virtual Memory System "
"Architecture."
msgstr ""
"–Ø—â–∏–∫ [`aarch64-paging`](https://crates.io/crates/aarch64-paging) –¥–æ–∑–≤–æ–ª—è—î "
"—Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏ —Å–∏—Å—Ç–µ–º–∏ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ—ó "
"–ø–∞–º‚Äô—è—Ç—ñ AArch64."

#: src/bare-metal/useful-crates/aarch64-paging.md:6
msgid ""
"```rust,editable,compile_fail\n"
"use aarch64_paging::{\n"
"    idmap::IdMap,\n"
"    paging::{Attributes, MemoryRegion},\n"
"};\n"
"\n"
"const ASID: usize = 1;\n"
"const ROOT_LEVEL: usize = 1;\n"
"\n"
"// Create a new page table with identity mapping.\n"
"let mut idmap = IdMap::new(ASID, ROOT_LEVEL);\n"
"// Map a 2 MiB region of memory as read-only.\n"
"idmap.map_range(\n"
"    &MemoryRegion::new(0x80200000, 0x80400000),\n"
"    Attributes::NORMAL | Attributes::NON_GLOBAL | Attributes::READ_ONLY,\n"
").unwrap();\n"
"// Set `TTBR0_EL1` to activate the page table.\n"
"idmap.activate();\n"
"```"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:28
msgid ""
"For now it only supports EL1, but support for other exception levels should "
"be straightforward to add."
msgstr ""
"–ù–∞—Ä–∞–∑—ñ –≤—ñ–Ω –ø—ñ–¥—Ç—Ä–∏–º—É—î –ª–∏—à–µ EL1, –∞–ª–µ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –¥–ª—è —ñ–Ω—à–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ –≤–∏–Ω—è—Ç–∫—ñ–≤ —Å–ª—ñ–¥ "
"–¥–æ–¥–∞—Ç–∏ –ø—Ä–æ—Å—Ç–æ."

#: src/bare-metal/useful-crates/aarch64-paging.md:30
msgid ""
"This is used in Android for the [Protected VM Firmware](https://cs.android."
"com/android/platform/superproject/+/master:packages/modules/Virtualization/"
"pvmfw/)."
msgstr ""
"–¶–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ Android –¥–ª—è [–ø—Ä–æ—à–∏–≤–∫–∏ –∑–∞—Ö–∏—â–µ–Ω–æ—ó –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ—ó –º–∞—à–∏–Ω–∏]"
"(https://cs.android.com/android/platform/superproject/+/master:packages/"
"modules/Virtualization/pvmfw/)."

#: src/bare-metal/useful-crates/aarch64-paging.md:31
msgid ""
"There's no easy way to run this example, as it needs to run on real hardware "
"or under QEMU."
msgstr ""
"–ù–µ–º–∞—î –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ "
"–Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—ñ –∞–±–æ –ø—ñ–¥ –∫–µ—Ä—É–≤–∞–Ω–Ω—è–º QEMU."

#: src/bare-metal/useful-crates/buddy_system_allocator.md:1
msgid "`buddy_system_allocator`"
msgstr "`buddy_system_allocator`"

#: src/bare-metal/useful-crates/buddy_system_allocator.md:3
msgid ""
"[`buddy_system_allocator`](https://crates.io/crates/buddy_system_allocator) "
"is a third-party crate implementing a basic buddy system allocator. It can "
"be used both for [`LockedHeap`](https://docs.rs/buddy_system_allocator/0.9.0/"
"buddy_system_allocator/struct.LockedHeap.html) implementing [`GlobalAlloc`]"
"(https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html) so you can use "
"the standard `alloc` crate (as we saw [before](../alloc.md)), or for "
"allocating other address space. For example, we might want to allocate MMIO "
"space for PCI BARs:"
msgstr ""
"[`buddy_system_allocator`](https://crates.io/crates/buddy_system_allocator) "
"‚Äî —Ü–µ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ–π —è—â–∏–∫, —è–∫–∏–π —Ä–µ–∞–ª—ñ–∑—É—î –±–∞–∑–æ–≤–∏–π —Å–∏—Å—Ç–µ–º–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª—å–Ω–∏–∫ –ø—Ä–∏—è—Ç–µ–ª—ñ–≤. "
"–ô–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è–∫ –¥–ª—è [`LockedHeap`](https://docs.rs/"
"buddy_system_allocator/0.9.0/buddy_system_allocator/struct.LockedHeap.html), "
"—Ç–∞–∫ —ñ –¥–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó [`GlobalAlloc`](https://doc.rust-lang .org/core/alloc/"
"trait.GlobalAlloc.html), —â–æ–± –≤–∏ –º–æ–≥–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —è—â–∏–∫ "
"`alloc` (—è–∫ –º–∏ –±–∞—á–∏–ª–∏ [—Ä–∞–Ω—ñ—à–µ](../alloc.md)), –∞–±–æ –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —ñ–Ω—à–æ–≥–æ "
"–∞–¥—Ä–µ—Å–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –º–∏ –º–æ–∂–µ–º–æ –∑–∞—Ö–æ—Ç—ñ—Ç–∏ –≤–∏–¥—ñ–ª–∏—Ç–∏ –ø—Ä–æ—Å—Ç—ñ—Ä MMIO –¥–ª—è "
"—à–∏–Ω PCI:"

#: src/bare-metal/useful-crates/buddy_system_allocator.md:8
msgid ""
"```rust,editable,compile_fail\n"
"use buddy_system_allocator::FrameAllocator;\n"
"use core::alloc::Layout;\n"
"\n"
"fn main() {\n"
"    let mut allocator = FrameAllocator::<32>::new();\n"
"    allocator.add_frame(0x200_0000, 0x400_0000);\n"
"\n"
"    let layout = Layout::from_size_align(0x100, 0x100).unwrap();\n"
"    let bar = allocator\n"
"        .alloc_aligned(layout)\n"
"        .expect(\"Failed to allocate 0x100 byte MMIO region\");\n"
"    println!(\"Allocated 0x100 byte MMIO region at {:#x}\", bar);\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md:26
msgid "PCI BARs always have alignment equal to their size."
msgstr "–®—Ç—É–∫–∏ PCI –∑–∞–≤–∂–¥–∏ –º–∞—é—Ç—å –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —ó—Ö —Ä–æ–∑–º—ñ—Ä—É."

#: src/bare-metal/useful-crates/buddy_system_allocator.md:27
msgid ""
"Run the example with `cargo run` under `src/bare-metal/useful-crates/"
"allocator-example/`. (It won't run in the Playground because of the crate "
"dependency.)"
msgstr ""
"–ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–∏–∫–ª–∞–¥ —ñ–∑ `cargo run` —É `src/bare-metal/useful-crates/allocator-"
"example/`. (–í—ñ–Ω –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –º–∞–π–¥–∞–Ω—á–∏–∫—É —á–µ—Ä–µ–∑ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å "
"—è—â–∏–∫–∞.)"

#: src/bare-metal/useful-crates/tinyvec.md:1
msgid "`tinyvec`"
msgstr "`tinyvec`"

#: src/bare-metal/useful-crates/tinyvec.md:3
msgid ""
"Sometimes you want something which can be resized like a `Vec`, but without "
"heap allocation. [`tinyvec`](https://crates.io/crates/tinyvec) provides "
"this: a vector backed by an array or slice, which could be statically "
"allocated or on the stack, which keeps track of how many elements are used "
"and panics if you try to use more than are allocated."
msgstr ""
"–Ü–Ω–æ–¥—ñ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–µ —â–æ—Å—å, —Ä–æ–∑–º—ñ—Ä —è–∫–æ–≥–æ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `Vec`, –∞–ª–µ "
"–±–µ–∑ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∫—É–ø–∏. [`tinyvec`](https://crates.io/crates/tinyvec) –Ω–∞–¥–∞—î —Ü–µ: "
"–≤–µ–∫—Ç–æ—Ä, –ø—ñ–¥–∫—Ä—ñ–ø–ª–µ–Ω–∏–π –º–∞—Å–∏–≤–æ–º –∞–±–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º, —è–∫–∏–π –º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–æ "
"—Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –∞–±–æ –≤ —Å—Ç–µ–∫—É, —è–∫–∏–π –≤—ñ–¥—Å—Ç–µ–∂—É—î, —Å–∫—ñ–ª—å–∫–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è "
"—Ç–∞ –≤–ø–∞–¥–∞—î –≤ –ø–∞–Ω—ñ–∫—É, —è–∫—â–æ –≤–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ, –Ω—ñ–∂ –≤–∏–¥—ñ–ª–µ–Ω–æ."

#: src/bare-metal/useful-crates/tinyvec.md:8
msgid ""
"```rust,editable,compile_fail\n"
"use tinyvec::{array_vec, ArrayVec};\n"
"\n"
"fn main() {\n"
"    let mut numbers: ArrayVec<[u32; 5]> = array_vec!(42, 66);\n"
"    println!(\"{numbers:?}\");\n"
"    numbers.push(7);\n"
"    println!(\"{numbers:?}\");\n"
"    numbers.remove(1);\n"
"    println!(\"{numbers:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md:23
msgid ""
"`tinyvec` requires that the element type implement `Default` for "
"initialisation."
msgstr ""
"`tinyvec` –≤–∏–º–∞–≥–∞—î, —â–æ–± —Ç–∏–ø –µ–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞–≤ `Default` –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó."

#: src/bare-metal/useful-crates/tinyvec.md:24
msgid ""
"The Rust Playground includes `tinyvec`, so this example will run fine inline."
msgstr ""
"Rust Playground –º—ñ—Å—Ç–∏—Ç—å `tinyvec`, —Ç–æ–∂ —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ –¥–æ–±—Ä–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ "
"–≤–±—É–¥–æ–≤–∞–Ω–æ."

#: src/bare-metal/useful-crates/spin.md:1
msgid "`spin`"
msgstr "`–∑–∞–∫—Ä—É—Ç–∫–∞`"

#: src/bare-metal/useful-crates/spin.md:3
msgid ""
"`std::sync::Mutex` and the other synchronisation primitives from `std::sync` "
"are not available in `core` or `alloc`. How can we manage synchronisation or "
"interior mutability, such as for sharing state between different CPUs?"
msgstr ""
"`std::sync::Mutex` —Ç–∞ —ñ–Ω—à—ñ –ø—Ä–∏–º—ñ—Ç–∏–≤–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ `std::sync` –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ "
"–≤ `core` –∞–±–æ `alloc`. –Ø–∫ –º–∏ –º–æ–∂–µ–º–æ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é –∞–±–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—é "
"–º—ñ–Ω–ª–∏–≤—ñ—Å—Ç—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –æ–±–º—ñ–Ω—É —Å—Ç–∞–Ω–æ–º –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –¶–ü?"

#: src/bare-metal/useful-crates/spin.md:7
msgid ""
"The [`spin`](https://crates.io/crates/spin) crate provides spinlock-based "
"equivalents of many of these primitives."
msgstr ""
"–Ø—â–∏–∫ [`spin`](https://crates.io/crates/spin) –Ω–∞–¥–∞—î –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–∏ –±–∞–≥–∞—Ç—å–æ—Ö —ñ–∑ "
"—Ü–∏—Ö –ø—Ä–∏–º—ñ—Ç–∏–≤—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–ø—ñ–Ω-–±–ª–æ–∫—É–≤–∞–Ω–Ω—è."

#: src/bare-metal/useful-crates/spin.md:9
msgid ""
"```rust,editable,compile_fail\n"
"use spin::mutex::SpinMutex;\n"
"\n"
"static counter: SpinMutex<u32> = SpinMutex::new(0);\n"
"\n"
"fn main() {\n"
"    println!(\"count: {}\", counter.lock());\n"
"    *counter.lock() += 2;\n"
"    println!(\"count: {}\", counter.lock());\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/useful-crates/spin.md:23
msgid "Be careful to avoid deadlock if you take locks in interrupt handlers."
msgstr ""
"–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –≤–∑–∞—î–º–æ–±–ª–æ–∫—É–≤–∞–Ω—å, —è–∫—â–æ –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ "
"–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤ –æ–±—Ä–æ–±–Ω–∏–∫–∞—Ö –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω—å."

#: src/bare-metal/useful-crates/spin.md:24
msgid ""
"`spin` also has a ticket lock mutex implementation; equivalents of `RwLock`, "
"`Barrier` and `Once` from `std::sync`;  and `Lazy` for lazy initialisation."
msgstr ""

#: src/bare-metal/useful-crates/spin.md:26
msgid ""
"The [`once_cell`](https://crates.io/crates/once_cell) crate also has some "
"useful types for late initialisation with a slightly different approach to "
"`spin::once::Once`."
msgstr ""
"–Ø—â–∏–∫ [`once_cell`](https://crates.io/crates/once_cell) —Ç–∞–∫–æ–∂ –º–∞—î –∫—ñ–ª—å–∫–∞ "
"–∫–æ—Ä–∏—Å–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–ª—è –ø—ñ–∑–Ω—å–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑ –¥–µ—â–æ —ñ–Ω—à–∏–º –ø—ñ–¥—Ö–æ–¥–æ–º –¥–æ `spin::"
"once::Once`."

#: src/bare-metal/useful-crates/spin.md:28
msgid ""
"The Rust Playground includes `spin`, so this example will run fine inline."
msgstr ""
"Rust Playground –º—ñ—Å—Ç–∏—Ç—å `spin`, —Ç–æ–∂ —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ –¥–æ–±—Ä–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –≤–±—É–¥–æ–≤–∞–Ω–æ."

#: src/bare-metal/android.md:3
msgid ""
"To build a bare-metal Rust binary in AOSP, you need to use a "
"`rust_ffi_static` Soong rule to build your Rust code, then a `cc_binary` "
"with a linker script to produce the binary itself, and then a `raw_binary` "
"to convert the ELF to a raw binary ready to be run."
msgstr ""
"–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–∏–π –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª Rust –≤ AOSP, –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ "
"–ø—Ä–∞–≤–∏–ª–æ `rust_ffi_static` Soong –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–¥—É Rust, –ø–æ—Ç—ñ–º `cc_binary` "
"–∑—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—î–º –∫–æ–º–ø–æ–Ω—É–≤–∞–Ω–Ω—è, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∞–º –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª, –∞ –ø–æ—Ç—ñ–º "
"`raw_binary` –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è ELF —É –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏–π –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª, –≥–æ—Ç–æ–≤–∏–π –¥–æ "
"–∑–∞–ø—É—Å–∫—É."

#: src/bare-metal/android.md:7
msgid ""
"```soong\n"
"rust_ffi_static {\n"
"    name: \"libvmbase_example\",\n"
"    defaults: [\"vmbase_ffi_defaults\"],\n"
"    crate_name: \"vmbase_example\",\n"
"    srcs: [\"src/main.rs\"],\n"
"    rustlibs: [\n"
"        \"libvmbase\",\n"
"    ],\n"
"}\n"
"\n"
"cc_binary {\n"
"    name: \"vmbase_example\",\n"
"    defaults: [\"vmbase_elf_defaults\"],\n"
"    srcs: [\n"
"        \"idmap.S\",\n"
"    ],\n"
"    static_libs: [\n"
"        \"libvmbase_example\",\n"
"    ],\n"
"    linker_scripts: [\n"
"        \"image.ld\",\n"
"        \":vmbase_sections\",\n"
"    ],\n"
"}\n"
"\n"
"raw_binary {\n"
"    name: \"vmbase_example_bin\",\n"
"    stem: \"vmbase_example.bin\",\n"
"    src: \":vmbase_example\",\n"
"    enabled: false,\n"
"    target: {\n"
"        android_arm64: {\n"
"            enabled: true,\n"
"        },\n"
"    },\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/android/vmbase.md:3
msgid ""
"For VMs running under crosvm on aarch64, the [vmbase](https://android."
"googlesource.com/platform/packages/modules/Virtualization/+/refs/heads/"
"master/vmbase/) library provides a linker script and useful defaults for the "
"build rules, along with an entry point, UART console logging and more."
msgstr ""
"–î–ª—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏—Ö –º–∞—à–∏–Ω, —â–æ –ø—Ä–∞—Ü—é—é—Ç—å –ø—ñ–¥ –∫–µ—Ä—É–≤–∞–Ω–Ω—è–º crosvm –Ω–∞ aarch64, "
"–±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ [vmbase](https://android.googlesource.com/platform/packages/"
"modules/Virtualization/+/refs/heads/master/vmbase/) –Ω–∞–¥–∞—î —Å—Ü–µ–Ω–∞—Ä—ñ–π "
"–∫–æ–º–ø–æ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ—Ä–∏—Å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è –ø—Ä–∞–≤–∏–ª –∑–±—ñ—Ä–∫–∏ —Ä–∞–∑–æ–º "
"—ñ–∑ —Ç–æ—á–∫–æ—é –≤—Ö–æ–¥—É, –∂—É—Ä–Ω–∞–ª—é–≤–∞–Ω–Ω—è –∫–æ–Ω—Å–æ–ª—ñ UART —Ç–æ—â–æ."

#: src/bare-metal/android/vmbase.md:6
msgid ""
"```rust,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"use vmbase::{main, println};\n"
"\n"
"main!(main);\n"
"\n"
"pub fn main(arg0: u64, arg1: u64, arg2: u64, arg3: u64) {\n"
"    println!(\"Hello world\");\n"
"}\n"
"```"
msgstr ""

#: src/bare-metal/android/vmbase.md:21
msgid ""
"The `main!` macro marks your main function, to be called from the `vmbase` "
"entry point."
msgstr ""
"–ú–∞–∫—Ä–æ—Å `main!` –ø–æ–∑–Ω–∞—á–∞—î –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ —Ç–æ—á–∫–∏ "
"–≤—Ö–æ–¥—É `vmbase`."

#: src/bare-metal/android/vmbase.md:22
msgid ""
"The `vmbase` entry point handles console initialisation, and issues a "
"PSCI_SYSTEM_OFF to shutdown the VM if your main function returns."
msgstr ""
"–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É `vmbase` –æ–±—Ä–æ–±–ª—è—î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∫–æ–Ω—Å–æ–ª—ñ —Ç–∞ –≤–∏–¥–∞—î PSCI_SYSTEM_OFF "
"–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ—ó –º–∞—à–∏–Ω–∏, —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è."

#: src/exercises/bare-metal/afternoon.md:3
msgid "We will write a driver for the PL031 real-time clock device."
msgstr "–ù–∞–ø–∏—à–µ–º–æ –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—é –≥–æ–¥–∏–Ω —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É PL031."

#: src/exercises/bare-metal/rtc.md:1
#: src/exercises/bare-metal/solutions-afternoon.md:3
msgid "RTC driver"
msgstr "RTC –¥—Ä–∞–π–≤–µ—Ä"

#: src/exercises/bare-metal/rtc.md:3
msgid ""
"The QEMU aarch64 virt machine has a [PL031](https://developer.arm.com/"
"documentation/ddi0224/c) real-time clock at 0x9010000. For this exercise, "
"you should write a driver for it."
msgstr ""
"–ú–∞—à–∏–Ω–∞ virt QEMU aarch64 –º–∞—î [PL031](https://developer.arm.com/documentation/"
"ddi0224/c) –≥–æ–¥–∏–Ω–Ω–∏–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á–∞—Å—É –Ω–∞ 0x9010000. –î–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ "
"–Ω–∞–ø–∏—Å–∞—Ç–∏ –¥–ª—è –Ω–µ—ó –¥—Ä–∞–π–≤–µ—Ä."

#: src/exercises/bare-metal/rtc.md:6
msgid ""
"Use it to print the current time to the serial console. You can use the "
"[`chrono`](https://crates.io/crates/chrono) crate for date/time formatting."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –π–æ–≥–æ –¥–ª—è –¥—Ä—É–∫—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É –Ω–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ–π –∫–æ–Ω—Å–æ–ª—ñ. –í–∏ "
"–º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —è—â–∏–∫ [`chrono`](https://crates.io/crates/chrono) –¥–ª—è "
"—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏/—á–∞—Å—É."

#: src/exercises/bare-metal/rtc.md:8
msgid ""
"Use the match register and raw interrupt status to busy-wait until a given "
"time, e.g. 3 seconds in the future. (Call [`core::hint::spin_loop`](https://"
"doc.rust-lang.org/core/hint/fn.spin_loop.html) inside the loop.)"
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä–µ—î—Å—Ç—Ä –∑–±—ñ–≥—ñ–≤ —ñ —Å—Ç–∞—Ç—É—Å –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è, —â–æ–± –∑–∞–π–Ω—è—Ç–∏ "
"–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–æ –∑–∞–¥–∞–Ω–æ–≥–æ —á–∞—Å—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥. 3 —Å–µ–∫—É–Ω–¥–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É. (–í–∏–∫–ª–∏—á—Ç–µ "
"[`core::hint::spin_loop`](https://doc.rust-lang.org/core/hint/fn.spin_loop."
"html) —É—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ü–∏–∫–ª—É.)"

#: src/exercises/bare-metal/rtc.md:10
msgid ""
"_Extension if you have time:_ Enable and handle the interrupt generated by "
"the RTC match. You can use the driver provided in the [`arm-gic`](https://"
"docs.rs/arm-gic/) crate to configure the Arm Generic Interrupt Controller."
msgstr ""
"_–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è, —è–∫—â–æ —É –≤–∞—Å —î —á–∞—Å:_ –£–≤—ñ–º–∫–Ω—ñ—Ç—å —ñ –æ–±—Ä–æ–±—ñ—Ç—å –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è, —Å—Ç–≤–æ—Ä–µ–Ω–µ "
"–∑–±—ñ–≥–æ–º RTC. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä, –Ω–∞–¥–∞–Ω–∏–π —É –ø–∞–∫–µ—Ç—ñ [`arm-gic`]"
"(https://docs.rs/arm-gic/), —â–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω—å "
"Arm."

#: src/exercises/bare-metal/rtc.md:12
msgid "Use the RTC interrupt, which is wired to the GIC as `IntId::spi(2)`."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è RTC, —è–∫–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ GIC —è–∫ `IntId::spi(2)`."

#: src/exercises/bare-metal/rtc.md:13
msgid ""
"Once the interrupt is enabled, you can put the core to sleep via `arm_gic::"
"wfi()`, which will cause the core to sleep until it receives an interrupt."
msgstr ""
"–ö–æ–ª–∏ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –≤–≤—ñ–º–∫–Ω–µ–Ω–æ, –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —è–¥—Ä–æ ‚Äã‚Äã–≤ —Ä–µ–∂–∏–º —Å–Ω—É –∑–∞ "
"–¥–æ–ø–æ–º–æ–≥–æ—é `arm_gic::wfi()`, —â–æ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ —Ç–æ–≥–æ, —â–æ —è–¥—Ä–æ ‚Äã‚Äã–±—É–¥–µ —Å–ø–∞—Ç–∏, –¥–æ–∫–∏ "
"–≤–æ–Ω–æ –Ω–µ –æ—Ç—Ä–∏–º–∞—î –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è."

#: src/exercises/bare-metal/rtc.md:16
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `rtc` directory for the following files."
msgstr ""
"–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ [—à–∞–±–ª–æ–Ω –≤–ø—Ä–∞–≤–∏](../../comprehensive-rust-exercises.zip) —ñ "
"–∑–Ω–∞–π–¥—ñ—Ç—å —É –∫–∞—Ç–∞–ª–æ–∑—ñ `rtc` –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ–∞–π–ª–∏."

#: src/exercises/bare-metal/rtc.md:23
msgid ""
"```rust,compile_fail\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"mod exceptions;\n"
"mod logger;\n"
"mod pl011;\n"
"\n"
"use crate::pl011::Uart;\n"
"use arm_gic::gicv3::GicV3;\n"
"use core::panic::PanicInfo;\n"
"use log::{error, info, trace, LevelFilter};\n"
"use smccc::psci::system_off;\n"
"use smccc::Hvc;\n"
"\n"
"/// Base addresses of the GICv3.\n"
"const GICD_BASE_ADDRESS: *mut u64 = 0x800_0000 as _;\n"
"const GICR_BASE_ADDRESS: *mut u64 = 0x80A_0000 as _;\n"
"\n"
"/// Base address of the primary PL011 UART.\n"
"const PL011_BASE_ADDRESS: *mut u32 = 0x900_0000 as _;\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn main(x0: u64, x1: u64, x2: u64, x3: u64) {\n"
"    // Safe because `PL011_BASE_ADDRESS` is the base address of a PL011 "
"device,\n"
"    // and nothing else accesses that address range.\n"
"    let uart = unsafe { Uart::new(PL011_BASE_ADDRESS) };\n"
"    logger::init(uart, LevelFilter::Trace).unwrap();\n"
"\n"
"    info!(\"main({:#x}, {:#x}, {:#x}, {:#x})\", x0, x1, x2, x3);\n"
"\n"
"    // Safe because `GICD_BASE_ADDRESS` and `GICR_BASE_ADDRESS` are the "
"base\n"
"    // addresses of a GICv3 distributor and redistributor respectively, and\n"
"    // nothing else accesses those address ranges.\n"
"    let mut gic = unsafe { GicV3::new(GICD_BASE_ADDRESS, "
"GICR_BASE_ADDRESS) };\n"
"    gic.setup();\n"
"\n"
"    // TODO: Create instance of RTC driver and print current time.\n"
"\n"
"    // TODO: Wait for 3 seconds.\n"
"\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[panic_handler]\n"
"fn panic(info: &PanicInfo) -> ! {\n"
"    error!(\"{info}\");\n"
"    system_off::<Hvc>().unwrap();\n"
"    loop {}\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:75
msgid ""
"`src/exceptions.rs` (you should only need to change this for the 3rd part of "
"the exercise):"
msgstr "`src/exceptions.rs` (—Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏ –ª–∏—à–µ –¥–ª—è 3-—ó —á–∞—Å—Ç–∏–Ω–∏ –≤–ø—Ä–∞–≤–∏):"

#: src/exercises/bare-metal/rtc.md:79
msgid ""
"```rust,compile_fail\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"use arm_gic::gicv3::GicV3;\n"
"use log::{error, info, trace};\n"
"use smccc::psci::system_off;\n"
"use smccc::Hvc;\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn sync_exception_current(_elr: u64, _spsr: u64) {\n"
"    error!(\"sync_exception_current\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn irq_current(_elr: u64, _spsr: u64) {\n"
"    trace!(\"irq_current\");\n"
"    let intid = GicV3::get_and_acknowledge_interrupt().expect(\"No pending "
"interrupt\");\n"
"    info!(\"IRQ {intid:?}\");\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn fiq_current(_elr: u64, _spsr: u64) {\n"
"    error!(\"fiq_current\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn serr_current(_elr: u64, _spsr: u64) {\n"
"    error!(\"serr_current\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn sync_lower(_elr: u64, _spsr: u64) {\n"
"    error!(\"sync_lower\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn irq_lower(_elr: u64, _spsr: u64) {\n"
"    error!(\"irq_lower\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn fiq_lower(_elr: u64, _spsr: u64) {\n"
"    error!(\"fiq_lower\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[no_mangle]\n"
"extern \"C\" fn serr_lower(_elr: u64, _spsr: u64) {\n"
"    error!(\"serr_lower\");\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:149
msgid "`src/logger.rs` (you shouldn't need to change this):"
msgstr "`src/logger.rs` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/rtc.md:153
msgid ""
"```rust,compile_fail\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: main\n"
"use crate::pl011::Uart;\n"
"use core::fmt::Write;\n"
"use log::{LevelFilter, Log, Metadata, Record, SetLoggerError};\n"
"use spin::mutex::SpinMutex;\n"
"\n"
"static LOGGER: Logger = Logger {\n"
"    uart: SpinMutex::new(None),\n"
"};\n"
"\n"
"struct Logger {\n"
"    uart: SpinMutex<Option<Uart>>,\n"
"}\n"
"\n"
"impl Log for Logger {\n"
"    fn enabled(&self, _metadata: &Metadata) -> bool {\n"
"        true\n"
"    }\n"
"\n"
"    fn log(&self, record: &Record) {\n"
"        writeln!(\n"
"            self.uart.lock().as_mut().unwrap(),\n"
"            \"[{}] {}\",\n"
"            record.level(),\n"
"            record.args()\n"
"        )\n"
"        .unwrap();\n"
"    }\n"
"\n"
"    fn flush(&self) {}\n"
"}\n"
"\n"
"/// Initialises UART logger.\n"
"pub fn init(uart: Uart, max_level: LevelFilter) -> Result<(), "
"SetLoggerError> {\n"
"    LOGGER.uart.lock().replace(uart);\n"
"\n"
"    log::set_logger(&LOGGER)?;\n"
"    log::set_max_level(max_level);\n"
"    Ok(())\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:210
msgid "`src/pl011.rs` (you shouldn't need to change this):"
msgstr "`src/pl011.rs` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/rtc.md:214
msgid ""
"```rust,compile_fail\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"#![allow(unused)]\n"
"\n"
"use core::fmt::{self, Write};\n"
"use core::ptr::{addr_of, addr_of_mut};\n"
"\n"
"// ANCHOR: Flags\n"
"use bitflags::bitflags;\n"
"\n"
"bitflags! {\n"
"    /// Flags from the UART flag register.\n"
"    #[repr(transparent)]\n"
"    #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n"
"    struct Flags: u16 {\n"
"        /// Clear to send.\n"
"        const CTS = 1 << 0;\n"
"        /// Data set ready.\n"
"        const DSR = 1 << 1;\n"
"        /// Data carrier detect.\n"
"        const DCD = 1 << 2;\n"
"        /// UART busy transmitting data.\n"
"        const BUSY = 1 << 3;\n"
"        /// Receive FIFO is empty.\n"
"        const RXFE = 1 << 4;\n"
"        /// Transmit FIFO is full.\n"
"        const TXFF = 1 << 5;\n"
"        /// Receive FIFO is full.\n"
"        const RXFF = 1 << 6;\n"
"        /// Transmit FIFO is empty.\n"
"        const TXFE = 1 << 7;\n"
"        /// Ring indicator.\n"
"        const RI = 1 << 8;\n"
"    }\n"
"}\n"
"// ANCHOR_END: Flags\n"
"\n"
"bitflags! {\n"
"    /// Flags from the UART Receive Status Register / Error Clear Register.\n"
"    #[repr(transparent)]\n"
"    #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n"
"    struct ReceiveStatus: u16 {\n"
"        /// Framing error.\n"
"        const FE = 1 << 0;\n"
"        /// Parity error.\n"
"        const PE = 1 << 1;\n"
"        /// Break error.\n"
"        const BE = 1 << 2;\n"
"        /// Overrun error.\n"
"        const OE = 1 << 3;\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: Registers\n"
"#[repr(C, align(4))]\n"
"struct Registers {\n"
"    dr: u16,\n"
"    _reserved0: [u8; 2],\n"
"    rsr: ReceiveStatus,\n"
"    _reserved1: [u8; 19],\n"
"    fr: Flags,\n"
"    _reserved2: [u8; 6],\n"
"    ilpr: u8,\n"
"    _reserved3: [u8; 3],\n"
"    ibrd: u16,\n"
"    _reserved4: [u8; 2],\n"
"    fbrd: u8,\n"
"    _reserved5: [u8; 3],\n"
"    lcr_h: u8,\n"
"    _reserved6: [u8; 3],\n"
"    cr: u16,\n"
"    _reserved7: [u8; 3],\n"
"    ifls: u8,\n"
"    _reserved8: [u8; 3],\n"
"    imsc: u16,\n"
"    _reserved9: [u8; 2],\n"
"    ris: u16,\n"
"    _reserved10: [u8; 2],\n"
"    mis: u16,\n"
"    _reserved11: [u8; 2],\n"
"    icr: u16,\n"
"    _reserved12: [u8; 2],\n"
"    dmacr: u8,\n"
"    _reserved13: [u8; 3],\n"
"}\n"
"// ANCHOR_END: Registers\n"
"\n"
"// ANCHOR: Uart\n"
"/// Driver for a PL011 UART.\n"
"#[derive(Debug)]\n"
"pub struct Uart {\n"
"    registers: *mut Registers,\n"
"}\n"
"\n"
"impl Uart {\n"
"    /// Constructs a new instance of the UART driver for a PL011 device at "
"the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
"    pub unsafe fn new(base_address: *mut u32) -> Self {\n"
"        Self {\n"
"            registers: base_address as *mut Registers,\n"
"        }\n"
"    }\n"
"\n"
"    /// Writes a single byte to the UART.\n"
"    pub fn write_byte(&self, byte: u8) {\n"
"        // Wait until there is room in the TX buffer.\n"
"        while self.read_flag_register().contains(Flags::TXFF) {}\n"
"\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
"        unsafe {\n"
"            // Write to the TX buffer.\n"
"            addr_of_mut!((*self.registers).dr).write_volatile(byte.into());\n"
"        }\n"
"\n"
"        // Wait until the UART is no longer busy.\n"
"        while self.read_flag_register().contains(Flags::BUSY) {}\n"
"    }\n"
"\n"
"    /// Reads and returns a pending byte, or `None` if nothing has been "
"received.\n"
"    pub fn read_byte(&self) -> Option<u8> {\n"
"        if self.read_flag_register().contains(Flags::RXFE) {\n"
"            None\n"
"        } else {\n"
"            let data = unsafe { addr_of!((*self.registers).dr)."
"read_volatile() };\n"
"            // TODO: Check for error conditions in bits 8-11.\n"
"            Some(data as u8)\n"
"        }\n"
"    }\n"
"\n"
"    fn read_flag_register(&self) -> Flags {\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
"        unsafe { addr_of!((*self.registers).fr).read_volatile() }\n"
"    }\n"
"}\n"
"// ANCHOR_END: Uart\n"
"\n"
"impl Write for Uart {\n"
"    fn write_str(&mut self, s: &str) -> fmt::Result {\n"
"        for c in s.as_bytes() {\n"
"            self.write_byte(*c);\n"
"        }\n"
"        Ok(())\n"
"    }\n"
"}\n"
"\n"
"// Safe because it just contains a pointer to device memory, which can be\n"
"// accessed from any context.\n"
"unsafe impl Send for Uart {}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:389
msgid ""
"```toml\n"
"[workspace]\n"
"\n"
"[package]\n"
"name = \"rtc\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"arm-gic = \"0.1.0\"\n"
"bitflags = \"2.0.0\"\n"
"chrono = { version = \"0.4.24\", default-features = false }\n"
"log = \"0.4.17\"\n"
"smccc = \"0.1.1\"\n"
"spin = \"0.9.8\"\n"
"\n"
"[build-dependencies]\n"
"cc = \"1.0.73\"\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:410
msgid "`build.rs` (you shouldn't need to change this):"
msgstr "`build.rs` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/rtc.md:414
msgid ""
"```rust,compile_fail\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"use cc::Build;\n"
"use std::env;\n"
"\n"
"fn main() {\n"
"    #[cfg(target_os = \"linux\")]\n"
"    env::set_var(\"CROSS_COMPILE\", \"aarch64-linux-gnu\");\n"
"    #[cfg(not(target_os = \"linux\"))]\n"
"    env::set_var(\"CROSS_COMPILE\", \"aarch64-none-elf\");\n"
"\n"
"    Build::new()\n"
"        .file(\"entry.S\")\n"
"        .file(\"exceptions.S\")\n"
"        .file(\"idmap.S\")\n"
"        .compile(\"empty\")\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:446
msgid "`entry.S` (you shouldn't need to change this):"
msgstr "`entry.S` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/rtc.md:450
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
".macro adr_l, reg:req, sym:req\n"
"\tadrp \\reg, \\sym\n"
"\tadd \\reg, \\reg, :lo12:\\sym\n"
".endm\n"
"\n"
".macro mov_i, reg:req, imm:req\n"
"\tmovz \\reg, :abs_g3:\\imm\n"
"\tmovk \\reg, :abs_g2_nc:\\imm\n"
"\tmovk \\reg, :abs_g1_nc:\\imm\n"
"\tmovk \\reg, :abs_g0_nc:\\imm\n"
".endm\n"
"\n"
".set .L_MAIR_DEV_nGnRE,\t0x04\n"
".set .L_MAIR_MEM_WBWA,\t0xff\n"
".set .Lmairval, .L_MAIR_DEV_nGnRE | (.L_MAIR_MEM_WBWA << 8)\n"
"\n"
"/* 4 KiB granule size for TTBR0_EL1. */\n"
".set .L_TCR_TG0_4KB, 0x0 << 14\n"
"/* 4 KiB granule size for TTBR1_EL1. */\n"
".set .L_TCR_TG1_4KB, 0x2 << 30\n"
"/* Disable translation table walk for TTBR1_EL1, generating a translation "
"fault instead. */\n"
".set .L_TCR_EPD1, 0x1 << 23\n"
"/* Translation table walks for TTBR0_EL1 are inner sharable. */\n"
".set .L_TCR_SH_INNER, 0x3 << 12\n"
"/*\n"
" * Translation table walks for TTBR0_EL1 are outer write-back read-allocate "
"write-allocate\n"
" * cacheable.\n"
" */\n"
".set .L_TCR_RGN_OWB, 0x1 << 10\n"
"/*\n"
" * Translation table walks for TTBR0_EL1 are inner write-back read-allocate "
"write-allocate\n"
" * cacheable.\n"
" */\n"
".set .L_TCR_RGN_IWB, 0x1 << 8\n"
"/* Size offset for TTBR0_EL1 is 2**39 bytes (512 GiB). */\n"
".set .L_TCR_T0SZ_512, 64 - 39\n"
".set .Ltcrval, .L_TCR_TG0_4KB | .L_TCR_TG1_4KB | .L_TCR_EPD1 | ."
"L_TCR_RGN_OWB\n"
".set .Ltcrval, .Ltcrval | .L_TCR_RGN_IWB | .L_TCR_SH_INNER | ."
"L_TCR_T0SZ_512\n"
"\n"
"/* Stage 1 instruction access cacheability is unaffected. */\n"
".set .L_SCTLR_ELx_I, 0x1 << 12\n"
"/* SP alignment fault if SP is not aligned to a 16 byte boundary. */\n"
".set .L_SCTLR_ELx_SA, 0x1 << 3\n"
"/* Stage 1 data access cacheability is unaffected. */\n"
".set .L_SCTLR_ELx_C, 0x1 << 2\n"
"/* EL0 and EL1 stage 1 MMU enabled. */\n"
".set .L_SCTLR_ELx_M, 0x1 << 0\n"
"/* Privileged Access Never is unchanged on taking an exception to EL1. */\n"
".set .L_SCTLR_EL1_SPAN, 0x1 << 23\n"
"/* SETEND instruction disabled at EL0 in aarch32 mode. */\n"
".set .L_SCTLR_EL1_SED, 0x1 << 8\n"
"/* Various IT instructions are disabled at EL0 in aarch32 mode. */\n"
".set .L_SCTLR_EL1_ITD, 0x1 << 7\n"
".set .L_SCTLR_EL1_RES1, (0x1 << 11) | (0x1 << 20) | (0x1 << 22) | (0x1 << "
"28) | (0x1 << 29)\n"
".set .Lsctlrval, .L_SCTLR_ELx_M | .L_SCTLR_ELx_C | .L_SCTLR_ELx_SA | ."
"L_SCTLR_EL1_ITD | .L_SCTLR_EL1_SED\n"
".set .Lsctlrval, .Lsctlrval | .L_SCTLR_ELx_I | .L_SCTLR_EL1_SPAN | ."
"L_SCTLR_EL1_RES1\n"
"\n"
"/**\n"
" * This is a generic entry point for an image. It carries out the operations "
"required to prepare the\n"
" * loaded image to be run. Specifically, it zeroes the bss section using "
"registers x25 and above,\n"
" * prepares the stack, enables floating point, and sets up the exception "
"vector. It preserves x0-x3\n"
" * for the Rust entry point, as these may contain boot parameters.\n"
" */\n"
".section .init.entry, \"ax\"\n"
".global entry\n"
"entry:\n"
"\t/* Load and apply the memory management configuration, ready to enable MMU "
"and caches. */\n"
"\tadrp x30, idmap\n"
"\tmsr ttbr0_el1, x30\n"
"\n"
"\tmov_i x30, .Lmairval\n"
"\tmsr mair_el1, x30\n"
"\n"
"\tmov_i x30, .Ltcrval\n"
"\t/* Copy the supported PA range into TCR_EL1.IPS. */\n"
"\tmrs x29, id_aa64mmfr0_el1\n"
"\tbfi x30, x29, #32, #4\n"
"\n"
"\tmsr tcr_el1, x30\n"
"\n"
"\tmov_i x30, .Lsctlrval\n"
"\n"
"\t/*\n"
"\t * Ensure everything before this point has completed, then invalidate any "
"potentially stale\n"
"\t * local TLB entries before they start being used.\n"
"\t */\n"
"\tisb\n"
"\ttlbi vmalle1\n"
"\tic iallu\n"
"\tdsb nsh\n"
"\tisb\n"
"\n"
"\t/*\n"
"\t * Configure sctlr_el1 to enable MMU and cache and don't proceed until "
"this has completed.\n"
"\t */\n"
"\tmsr sctlr_el1, x30\n"
"\tisb\n"
"\n"
"\t/* Disable trapping floating point access in EL1. */\n"
"\tmrs x30, cpacr_el1\n"
"\torr x30, x30, #(0x3 << 20)\n"
"\tmsr cpacr_el1, x30\n"
"\tisb\n"
"\n"
"\t/* Zero out the bss section. */\n"
"\tadr_l x29, bss_begin\n"
"\tadr_l x30, bss_end\n"
"0:\tcmp x29, x30\n"
"\tb.hs 1f\n"
"\tstp xzr, xzr, [x29], #16\n"
"\tb 0b\n"
"\n"
"1:\t/* Prepare the stack. */\n"
"\tadr_l x30, boot_stack_end\n"
"\tmov sp, x30\n"
"\n"
"\t/* Set up exception vector. */\n"
"\tadr x30, vector_table_el1\n"
"\tmsr vbar_el1, x30\n"
"\n"
"\t/* Call into Rust code. */\n"
"\tbl main\n"
"\n"
"\t/* Loop forever waiting for interrupts. */\n"
"2:\twfi\n"
"\tb 2b\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:595
msgid "`exceptions.S` (you shouldn't need to change this):"
msgstr "`exceptions.S` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/rtc.md:599
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"/**\n"
" * Saves the volatile registers onto the stack. This currently takes 14\n"
" * instructions, so it can be used in exception handlers with 18 "
"instructions\n"
" * left.\n"
" *\n"
" * On return, x0 and x1 are initialised to elr_el2 and spsr_el2 "
"respectively,\n"
" * which can be used as the first and second arguments of a subsequent "
"call.\n"
" */\n"
".macro save_volatile_to_stack\n"
"\t/* Reserve stack space and save registers x0-x18, x29 & x30. */\n"
"\tstp x0, x1, [sp, #-(8 * 24)]!\n"
"\tstp x2, x3, [sp, #8 * 2]\n"
"\tstp x4, x5, [sp, #8 * 4]\n"
"\tstp x6, x7, [sp, #8 * 6]\n"
"\tstp x8, x9, [sp, #8 * 8]\n"
"\tstp x10, x11, [sp, #8 * 10]\n"
"\tstp x12, x13, [sp, #8 * 12]\n"
"\tstp x14, x15, [sp, #8 * 14]\n"
"\tstp x16, x17, [sp, #8 * 16]\n"
"\tstr x18, [sp, #8 * 18]\n"
"\tstp x29, x30, [sp, #8 * 20]\n"
"\n"
"\t/*\n"
"\t * Save elr_el1 & spsr_el1. This such that we can take nested exception\n"
"\t * and still be able to unwind.\n"
"\t */\n"
"\tmrs x0, elr_el1\n"
"\tmrs x1, spsr_el1\n"
"\tstp x0, x1, [sp, #8 * 22]\n"
".endm\n"
"\n"
"/**\n"
" * Restores the volatile registers from the stack. This currently takes 14\n"
" * instructions, so it can be used in exception handlers while still leaving "
"18\n"
" * instructions left; if paired with save_volatile_to_stack, there are 4\n"
" * instructions to spare.\n"
" */\n"
".macro restore_volatile_from_stack\n"
"\t/* Restore registers x2-x18, x29 & x30. */\n"
"\tldp x2, x3, [sp, #8 * 2]\n"
"\tldp x4, x5, [sp, #8 * 4]\n"
"\tldp x6, x7, [sp, #8 * 6]\n"
"\tldp x8, x9, [sp, #8 * 8]\n"
"\tldp x10, x11, [sp, #8 * 10]\n"
"\tldp x12, x13, [sp, #8 * 12]\n"
"\tldp x14, x15, [sp, #8 * 14]\n"
"\tldp x16, x17, [sp, #8 * 16]\n"
"\tldr x18, [sp, #8 * 18]\n"
"\tldp x29, x30, [sp, #8 * 20]\n"
"\n"
"\t/* Restore registers elr_el1 & spsr_el1, using x0 & x1 as scratch. */\n"
"\tldp x0, x1, [sp, #8 * 22]\n"
"\tmsr elr_el1, x0\n"
"\tmsr spsr_el1, x1\n"
"\n"
"\t/* Restore x0 & x1, and release stack space. */\n"
"\tldp x0, x1, [sp], #8 * 24\n"
".endm\n"
"\n"
"/**\n"
" * This is a generic handler for exceptions taken at the current EL while "
"using\n"
" * SP0. It behaves similarly to the SPx case by first switching to SPx, "
"doing\n"
" * the work, then switching back to SP0 before returning.\n"
" *\n"
" * Switching to SPx and calling the Rust handler takes 16 instructions. To\n"
" * restore and return we need an additional 16 instructions, so we can "
"implement\n"
" * the whole handler within the allotted 32 instructions.\n"
" */\n"
".macro current_exception_sp0 handler:req\n"
"\tmsr spsel, #1\n"
"\tsave_volatile_to_stack\n"
"\tbl \\handler\n"
"\trestore_volatile_from_stack\n"
"\tmsr spsel, #0\n"
"\teret\n"
".endm\n"
"\n"
"/**\n"
" * This is a generic handler for exceptions taken at the current EL while "
"using\n"
" * SPx. It saves volatile registers, calls the Rust handler, restores "
"volatile\n"
" * registers, then returns.\n"
" *\n"
" * This also works for exceptions taken from EL0, if we don't care about\n"
" * non-volatile registers.\n"
" *\n"
" * Saving state and jumping to the Rust handler takes 15 instructions, and\n"
" * restoring and returning also takes 15 instructions, so we can fit the "
"whole\n"
" * handler in 30 instructions, under the limit of 32.\n"
" */\n"
".macro current_exception_spx handler:req\n"
"\tsave_volatile_to_stack\n"
"\tbl \\handler\n"
"\trestore_volatile_from_stack\n"
"\teret\n"
".endm\n"
"\n"
".section .text.vector_table_el1, \"ax\"\n"
".global vector_table_el1\n"
".balign 0x800\n"
"vector_table_el1:\n"
"sync_cur_sp0:\n"
"\tcurrent_exception_sp0 sync_exception_current\n"
"\n"
".balign 0x80\n"
"irq_cur_sp0:\n"
"\tcurrent_exception_sp0 irq_current\n"
"\n"
".balign 0x80\n"
"fiq_cur_sp0:\n"
"\tcurrent_exception_sp0 fiq_current\n"
"\n"
".balign 0x80\n"
"serr_cur_sp0:\n"
"\tcurrent_exception_sp0 serr_current\n"
"\n"
".balign 0x80\n"
"sync_cur_spx:\n"
"\tcurrent_exception_spx sync_exception_current\n"
"\n"
".balign 0x80\n"
"irq_cur_spx:\n"
"\tcurrent_exception_spx irq_current\n"
"\n"
".balign 0x80\n"
"fiq_cur_spx:\n"
"\tcurrent_exception_spx fiq_current\n"
"\n"
".balign 0x80\n"
"serr_cur_spx:\n"
"\tcurrent_exception_spx serr_current\n"
"\n"
".balign 0x80\n"
"sync_lower_64:\n"
"\tcurrent_exception_spx sync_lower\n"
"\n"
".balign 0x80\n"
"irq_lower_64:\n"
"\tcurrent_exception_spx irq_lower\n"
"\n"
".balign 0x80\n"
"fiq_lower_64:\n"
"\tcurrent_exception_spx fiq_lower\n"
"\n"
".balign 0x80\n"
"serr_lower_64:\n"
"\tcurrent_exception_spx serr_lower\n"
"\n"
".balign 0x80\n"
"sync_lower_32:\n"
"\tcurrent_exception_spx sync_lower\n"
"\n"
".balign 0x80\n"
"irq_lower_32:\n"
"\tcurrent_exception_spx irq_lower\n"
"\n"
".balign 0x80\n"
"fiq_lower_32:\n"
"\tcurrent_exception_spx fiq_lower\n"
"\n"
".balign 0x80\n"
"serr_lower_32:\n"
"\tcurrent_exception_spx serr_lower\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:780
msgid "`idmap.S` (you shouldn't need to change this):"
msgstr "`idmap.S` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/rtc.md:784
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
".set .L_TT_TYPE_BLOCK, 0x1\n"
".set .L_TT_TYPE_PAGE,  0x3\n"
".set .L_TT_TYPE_TABLE, 0x3\n"
"\n"
"/* Access flag. */\n"
".set .L_TT_AF, 0x1 << 10\n"
"/* Not global. */\n"
".set .L_TT_NG, 0x1 << 11\n"
".set .L_TT_XN, 0x3 << 53\n"
"\n"
".set .L_TT_MT_DEV, 0x0 << 2\t\t\t// MAIR #0 (DEV_nGnRE)\n"
".set .L_TT_MT_MEM, (0x1 << 2) | (0x3 << 8)\t// MAIR #1 (MEM_WBWA), inner "
"shareable\n"
"\n"
".set .L_BLOCK_DEV, .L_TT_TYPE_BLOCK | .L_TT_MT_DEV | .L_TT_AF | .L_TT_XN\n"
".set .L_BLOCK_MEM, .L_TT_TYPE_BLOCK | .L_TT_MT_MEM | .L_TT_AF | .L_TT_NG\n"
"\n"
".section \".rodata.idmap\", \"a\", %progbits\n"
".global idmap\n"
".align 12\n"
"idmap:\n"
"\t/* level 1 */\n"
"\t.quad\t\t.L_BLOCK_DEV | 0x0\t\t    // 1 GiB of device mappings\n"
"\t.quad\t\t.L_BLOCK_MEM | 0x40000000\t// 1 GiB of DRAM\n"
"\t.fill\t\t254, 8, 0x0\t\t\t// 254 GiB of unmapped VA space\n"
"\t.quad\t\t.L_BLOCK_DEV | 0x4000000000 // 1 GiB of device mappings\n"
"\t.fill\t\t255, 8, 0x0\t\t\t// 255 GiB of remaining VA space\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:829
msgid "`image.ld` (you shouldn't need to change this):"
msgstr "`image.ld` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/rtc.md:833
msgid ""
"```ld\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"/*\n"
" * Code will start running at this symbol which is placed at the start of "
"the\n"
" * image.\n"
" */\n"
"ENTRY(entry)\n"
"\n"
"MEMORY\n"
"{\n"
"\timage : ORIGIN = 0x40080000, LENGTH = 2M\n"
"}\n"
"\n"
"SECTIONS\n"
"{\n"
"\t/*\n"
"\t * Collect together the code.\n"
"\t */\n"
"\t.init : ALIGN(4096) {\n"
"\t\ttext_begin = .;\n"
"\t\t*(.init.entry)\n"
"\t\t*(.init.*)\n"
"\t} >image\n"
"\t.text : {\n"
"\t\t*(.text.*)\n"
"\t} >image\n"
"\ttext_end = .;\n"
"\n"
"\t/*\n"
"\t * Collect together read-only data.\n"
"\t */\n"
"\t.rodata : ALIGN(4096) {\n"
"\t\trodata_begin = .;\n"
"\t\t*(.rodata.*)\n"
"\t} >image\n"
"\t.got : {\n"
"\t\t*(.got)\n"
"\t} >image\n"
"\trodata_end = .;\n"
"\n"
"\t/*\n"
"\t * Collect together the read-write data including .bss at the end which\n"
"\t * will be zero'd by the entry code.\n"
"\t */\n"
"\t.data : ALIGN(4096) {\n"
"\t\tdata_begin = .;\n"
"\t\t*(.data.*)\n"
"\t\t/*\n"
"\t\t * The entry point code assumes that .data is a multiple of 32\n"
"\t\t * bytes long.\n"
"\t\t */\n"
"\t\t. = ALIGN(32);\n"
"\t\tdata_end = .;\n"
"\t} >image\n"
"\n"
"\t/* Everything beyond this point will not be included in the binary. */\n"
"\tbin_end = .;\n"
"\n"
"\t/* The entry point code assumes that .bss is 16-byte aligned. */\n"
"\t.bss : ALIGN(16)  {\n"
"\t\tbss_begin = .;\n"
"\t\t*(.bss.*)\n"
"\t\t*(COMMON)\n"
"\t\t. = ALIGN(16);\n"
"\t\tbss_end = .;\n"
"\t} >image\n"
"\n"
"\t.stack (NOLOAD) : ALIGN(4096) {\n"
"\t\tboot_stack_begin = .;\n"
"\t\t. += 40 * 4096;\n"
"\t\t. = ALIGN(4096);\n"
"\t\tboot_stack_end = .;\n"
"\t} >image\n"
"\n"
"\t. = ALIGN(4K);\n"
"\tPROVIDE(dma_region = .);\n"
"\n"
"\t/*\n"
"\t * Remove unused sections from the image.\n"
"\t */\n"
"\t/DISCARD/ : {\n"
"\t\t/* The image loads itself so doesn't need these sections. */\n"
"\t\t*(.gnu.hash)\n"
"\t\t*(.hash)\n"
"\t\t*(.interp)\n"
"\t\t*(.eh_frame_hdr)\n"
"\t\t*(.eh_frame)\n"
"\t\t*(.note.gnu.build-id)\n"
"\t}\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:940
msgid "`Makefile` (you shouldn't need to change this):"
msgstr "`Makefile` (—Ü–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏):"

#: src/exercises/bare-metal/rtc.md:944
msgid ""
"```makefile\n"
"# Copyright 2023 Google LLC\n"
"#\n"
"# Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"# you may not use this file except in compliance with the License.\n"
"# You may obtain a copy of the License at\n"
"#\n"
"#      http://www.apache.org/licenses/LICENSE-2.0\n"
"#\n"
"# Unless required by applicable law or agreed to in writing, software\n"
"# distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"# See the License for the specific language governing permissions and\n"
"# limitations under the License.\n"
"\n"
"UNAME := $(shell uname -s)\n"
"ifeq ($(UNAME),Linux)\n"
"\tTARGET = aarch64-linux-gnu\n"
"else\n"
"\tTARGET = aarch64-none-elf\n"
"endif\n"
"OBJCOPY = $(TARGET)-objcopy\n"
"\n"
".PHONY: build qemu_minimal qemu qemu_logger\n"
"\n"
"all: rtc.bin\n"
"\n"
"build:\n"
"\tcargo build\n"
"\n"
"rtc.bin: build\n"
"\t$(OBJCOPY) -O binary target/aarch64-unknown-none/debug/rtc $@\n"
"\n"
"qemu: rtc.bin\n"
"\tqemu-system-aarch64 -machine virt,gic-version=3 -cpu max -serial mon:stdio "
"-display none -kernel $< -s\n"
"\n"
"clean:\n"
"\tcargo clean\n"
"\trm -f *.bin\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:989
msgid ""
"```toml\n"
"[build]\n"
"target = \"aarch64-unknown-none\"\n"
"rustflags = [\"-C\", \"link-arg=-Timage.ld\"]\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:995
msgid "Run the code in QEMU with `make qemu`."
msgstr "–ó–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–¥ —É QEMU –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `make qemu`."

#: src/concurrency.md:1
msgid "Welcome to Concurrency in Rust"
msgstr "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Concurrency –≤ Rust"

#: src/concurrency.md:3
msgid ""
"Rust has full support for concurrency using OS threads with mutexes and "
"channels."
msgstr ""
"Rust –º–∞—î –ø–æ–≤–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –ø–∞—Ä–∞–ª–µ–ª—ñ–∑–º—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø–æ—Ç–æ–∫—ñ–≤ –û–° —ñ–∑ –º‚Äô—é—Ç–µ–∫—Å–∞–º–∏ "
"—Ç–∞ –∫–∞–Ω–∞–ª–∞–º–∏."

#: src/concurrency.md:6
msgid ""
"The Rust type system plays an important role in making many concurrency bugs "
"compile time bugs. This is often referred to as _fearless concurrency_ since "
"you can rely on the compiler to ensure correctness at runtime."
msgstr ""
"–°–∏—Å—Ç–µ–º–∞ —Ç–∏–ø—ñ–≤ Rust –≤—ñ–¥—ñ–≥—Ä–∞—î –≤–∞–∂–ª–∏–≤—É —Ä–æ–ª—å —É –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—ñ –±–∞–≥–∞—Ç—å–æ—Ö –ø–æ–º–∏–ª–æ–∫ "
"–ø–∞—Ä–∞–ª–µ–ª—ñ–∑–º—É –ø—ñ–¥ —á–∞—Å –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó. –¶–µ —á–∞—Å—Ç–æ –Ω–∞–∑–∏–≤–∞—é—Ç—å _–±–µ–∑—Å—Ç—Ä–∞—à–Ω–∏–º "
"–ø–∞—Ä–∞–ª–µ–ª—ñ–∑–º–æ–º_, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –ø–æ–∫–ª–∞—Å—Ç–∏—Å—è –Ω–∞ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è "
"–ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/concurrency/threads.md:3
msgid "Rust threads work similarly to threads in other languages:"
msgstr "–ü–æ—Ç–æ–∫–∏ Rust –ø—Ä–∞—Ü—é—é—Ç—å —Ç–∞–∫ —Å–∞–º–æ, —è–∫ —ñ –Ω–∞ —ñ–Ω—à–∏—Ö –º–æ–≤–∞—Ö:"

#: src/concurrency/threads.md:5
msgid ""
"```rust,editable\n"
"use std::thread;\n"
"use std::time::Duration;\n"
"\n"
"fn main() {\n"
"    thread::spawn(|| {\n"
"        for i in 1..10 {\n"
"            println!(\"Count in thread: {i}!\");\n"
"            thread::sleep(Duration::from_millis(5));\n"
"        }\n"
"    });\n"
"\n"
"    for i in 1..5 {\n"
"        println!(\"Main thread: {i}\");\n"
"        thread::sleep(Duration::from_millis(5));\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/threads.md:24
msgid "Threads are all daemon threads, the main thread does not wait for them."
msgstr "–£—Å—ñ –ø–æ—Ç–æ–∫–∏ —î –ø–æ—Ç–æ–∫–∞–º–∏-–¥–µ–º–æ–Ω–∞–º–∏, –≥–æ–ª–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ –Ω–µ —á–µ–∫–∞—î –Ω–∞ –Ω–∏—Ö."

#: src/concurrency/threads.md:25
msgid "Thread panics are independent of each other."
msgstr "–ü–∞–Ω—ñ–∫–∞ –ø–æ—Ç–æ–∫—ñ–≤ –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –æ–¥–Ω–∞ –≤—ñ–¥ –æ–¥–Ω–æ—ó."

#: src/concurrency/threads.md:26
msgid "Panics can carry a payload, which can be unpacked with `downcast_ref`."
msgstr ""
"Panics –º–æ–∂–µ –Ω–µ—Å—Ç–∏ –∫–æ—Ä–∏—Å–Ω–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫–µ –º–æ–∂–Ω–∞ —Ä–æ–∑–ø–∞–∫—É–≤–∞—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é "
"`downcast_ref`."

#: src/concurrency/threads.md:32
msgid ""
"Notice that the thread is stopped before it reaches 10 ‚Äî the main thread is "
"not waiting."
msgstr ""
"–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ –ø–æ—Ç—ñ–∫ –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è, –Ω–µ –¥–æ—Å—è–≥–Ω—É–≤—à–∏ 10 ‚Äî –≥–æ–ª–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ –Ω–µ "
"—á–µ–∫–∞—î."

#: src/concurrency/threads.md:35
msgid ""
"Use `let handle = thread::spawn(...)` and later `handle.join()` to wait for "
"the thread to finish."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `let handle = thread::spawn(...)`, –∞ –ø–æ—Ç—ñ–º `handle.join()`, "
"—â–æ–± –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É."

#: src/concurrency/threads.md:38
msgid "Trigger a panic in the thread, notice how this doesn't affect `main`."
msgstr "–í–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–∞–Ω—ñ–∫—É –≤ –ª–∞–Ω—Ü—é–∂–∫—É, –∑–∞—É–≤–∞–∂—Ç–µ, —â–æ —Ü–µ –Ω–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ `main`."

#: src/concurrency/threads.md:40
msgid ""
"Use the `Result` return value from `handle.join()` to get access to the "
"panic payload. This is a good time to talk about [`Any`](https://doc.rust-"
"lang.org/std/any/index.html)."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫–µ –ø–æ–≤–µ—Ä—Ç–∞—î `Result` –∑ `handle.join()`, —â–æ–± "
"–æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∫–æ—Ä–∏—Å–Ω–æ–≥–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞–Ω—ñ–∫–∏. –¶–µ –≥–∞—Ä–Ω–∏–π —á–∞—Å, —â–æ–± "
"–ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ [`Any`](https://doc.rust-lang.org/std/any/index.html)."

#: src/concurrency/scoped-threads.md:3
msgid "Normal threads cannot borrow from their environment:"
msgstr "–ó–≤–∏—á–∞–π–Ω—ñ –ø–æ—Ç–æ–∫–∏ –Ω–µ –º–æ–∂—É—Ç—å –∑–∞–ø–æ–∑–∏—á—É–≤–∞—Ç–∏ –∑—ñ —Å–≤–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:"

#: src/concurrency/scoped-threads.md:5
msgid ""
"```rust,editable,compile_fail\n"
"use std::thread;\n"
"\n"
"fn foo() {\n"
"    let s = String::from(\"Hello\");\n"
"    thread::spawn(|| {\n"
"        println!(\"Length: {}\", s.len());\n"
"    });\n"
"}\n"
"\n"
"fn main() {\n"
"    foo();\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/scoped-threads.md:20
msgid ""
"However, you can use a [scoped thread](https://doc.rust-lang.org/std/thread/"
"fn.scope.html) for this:"
msgstr ""
"–û–¥–Ω–∞–∫ –¥–ª—è —Ü—å–æ–≥–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ [–æ–±–ª–∞—Å—Ç—å](https://doc.rust-lang.org/"
"std/thread/fn.scope.html):"

#: src/concurrency/scoped-threads.md:22
msgid ""
"```rust,editable\n"
"use std::thread;\n"
"\n"
"fn main() {\n"
"    let s = String::from(\"Hello\");\n"
"\n"
"    thread::scope(|scope| {\n"
"        scope.spawn(|| {\n"
"            println!(\"Length: {}\", s.len());\n"
"        });\n"
"    });\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/scoped-threads.md:40
msgid ""
"The reason for that is that when the `thread::scope` function completes, all "
"the threads are guaranteed to be joined, so they can return borrowed data."
msgstr ""
"–ü—Ä–∏—á–∏–Ω–∞ —Ü—å–æ–≥–æ –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ –∫–æ–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—è `thread::scope` –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è, "
"—É—Å—ñ –ø–æ—Ç–æ–∫–∏ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–±‚Äô—î–¥–Ω—É—é—Ç—å—Å—è, —Ç–æ–º—É –≤–æ–Ω–∏ –º–æ–∂—É—Ç—å –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –∑–∞–ø–æ–∑–∏—á–µ–Ω—ñ "
"–¥–∞–Ω—ñ."

#: src/concurrency/scoped-threads.md:41
msgid ""
"Normal Rust borrowing rules apply: you can either borrow mutably by one "
"thread, or immutably by any number of threads."
msgstr ""
"–ó–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è –∑–≤–∏—á–∞–π–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–∑–∏—á–µ–Ω–Ω—è Rust: –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–∑–∏—á—É–≤–∞—Ç–∏ "
"–∑–º—ñ–Ω–Ω–æ –æ–¥–Ω–∏–º –ø–æ—Ç–æ–∫–æ–º –∞–±–æ –Ω–µ–∑–º—ñ–Ω–Ω–æ –±—É–¥—å-—è–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ—Ç–æ–∫—ñ–≤."

#: src/concurrency/channels.md:3
msgid ""
"Rust channels have two parts: a `Sender<T>` and a `Receiver<T>`. The two "
"parts are connected via the channel, but you only see the end-points."
msgstr ""
"–ö–∞–Ω–∞–ª–∏ Rust –º–∞—é—Ç—å –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏: `–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫<T>` —ñ `–û–¥–µ—Ä–∂—É–≤–∞—á<T>`. –î–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ "
"–∑‚Äô—î–¥–Ω–∞–Ω—ñ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª, –∞–ª–µ –≤–∏ –±–∞—á–∏—Ç–µ –ª–∏—à–µ –∫—ñ–Ω—Ü–µ–≤—ñ —Ç–æ—á–∫–∏."

#: src/concurrency/channels.md:6
msgid ""
"```rust,editable\n"
"use std::sync::mpsc;\n"
"use std::thread;\n"
"\n"
"fn main() {\n"
"    let (tx, rx) = mpsc::channel();\n"
"\n"
"    tx.send(10).unwrap();\n"
"    tx.send(20).unwrap();\n"
"\n"
"    println!(\"Received: {:?}\", rx.recv());\n"
"    println!(\"Received: {:?}\", rx.recv());\n"
"\n"
"    let tx2 = tx.clone();\n"
"    tx2.send(30).unwrap();\n"
"    println!(\"Received: {:?}\", rx.recv());\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/channels.md:27
msgid ""
"`mpsc` stands for Multi-Producer, Single-Consumer. `Sender` and `SyncSender` "
"implement `Clone` (so you can make multiple producers) but `Receiver` does "
"not."
msgstr ""
"`mpsc` –æ–∑–Ω–∞—á–∞—î Multi-Producer, Single-Consumer. `Sender` —ñ `SyncSender` "
"—Ä–µ–∞–ª—ñ–∑—É—é—Ç—å `Clone` (—Ç–æ–±—Ç–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤), –∞ "
"`Receiver` ‚Äî –Ω—ñ."

#: src/concurrency/channels.md:29
msgid ""
"`send()` and `recv()` return `Result`. If they return `Err`, it means the "
"counterpart `Sender` or `Receiver` is dropped and the channel is closed."
msgstr ""
"`send()` —ñ `recv()` –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å `–†–µ–∑—É–ª—å—Ç–∞—Ç`. –Ø–∫—â–æ –≤–æ–Ω–∏ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å `Err`, —Ü–µ "
"–æ–∑–Ω–∞—á–∞—î, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–∫ `Sender` –∞–±–æ `Receiver` –≤–∏–¥–∞–ª–µ–Ω–æ, –∞ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä–∏—Ç–æ."

#: src/concurrency/channels/unbounded.md:3
msgid "You get an unbounded and asynchronous channel with `mpsc::channel()`:"
msgstr ""
"–í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –Ω–µ–æ–±–º–µ–∂–µ–Ω–∏–π —ñ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–∞–Ω–∞–ª –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é `mpsc::channel()`:"

#: src/concurrency/channels/unbounded.md:5
msgid ""
"```rust,editable\n"
"use std::sync::mpsc;\n"
"use std::thread;\n"
"use std::time::Duration;\n"
"\n"
"fn main() {\n"
"    let (tx, rx) = mpsc::channel();\n"
"\n"
"    thread::spawn(move || {\n"
"        let thread_id = thread::current().id();\n"
"        for i in 1..10 {\n"
"            tx.send(format!(\"Message {i}\")).unwrap();\n"
"            println!(\"{thread_id:?}: sent Message {i}\");\n"
"        }\n"
"        println!(\"{thread_id:?}: done\");\n"
"    });\n"
"    thread::sleep(Duration::from_millis(100));\n"
"\n"
"    for msg in rx.iter() {\n"
"        println!(\"Main: got {msg}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/channels/bounded.md:3
msgid ""
"With bounded (synchronous) channels, `send` can block the current thread:"
msgstr ""
"–ó –æ–±–º–µ–∂–µ–Ω–∏–º–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º–∏) –∫–∞–Ω–∞–ª–∞–º–∏ `send` –º–æ–∂–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ç—ñ–∫:"

#: src/concurrency/channels/bounded.md:5
msgid ""
"```rust,editable\n"
"use std::sync::mpsc;\n"
"use std::thread;\n"
"use std::time::Duration;\n"
"\n"
"fn main() {\n"
"    let (tx, rx) = mpsc::sync_channel(3);\n"
"\n"
"    thread::spawn(move || {\n"
"        let thread_id = thread::current().id();\n"
"        for i in 1..10 {\n"
"            tx.send(format!(\"Message {i}\")).unwrap();\n"
"            println!(\"{thread_id:?}: sent Message {i}\");\n"
"        }\n"
"        println!(\"{thread_id:?}: done\");\n"
"    });\n"
"    thread::sleep(Duration::from_millis(100));\n"
"\n"
"    for msg in rx.iter() {\n"
"        println!(\"Main: got {msg}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/channels/bounded.md:31
msgid ""
"Calling `send` will block the current thread until there is space in the "
"channel for the new message. The thread can be blocked indefinitely if there "
"is nobody who reads from the channel."
msgstr ""
"–í–∏–∫–ª–∏–∫ `send` –∑–∞–±–ª–æ–∫—É—î –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ç—ñ–∫, –¥–æ–∫–∏ –≤ –∫–∞–Ω–∞–ª—ñ –Ω–µ –∑–∞–ª–∏—à–∏—Ç—å—Å—è –º—ñ—Å—Ü—è –¥–ª—è "
"–Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–æ—Ç—ñ–∫ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –Ω–∞ –Ω–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω, "
"—è–∫—â–æ –Ω—ñ—Ö—Ç–æ –Ω–µ —á–∏—Ç–∞—î –∑ –∫–∞–Ω–∞–ª—É."

#: src/concurrency/channels/bounded.md:32
msgid ""
"A call to `send` will abort with an error (that is why it returns `Result`) "
"if the channel is closed. A channel is closed when the receiver is dropped."
msgstr ""
"–í–∏–∫–ª–∏–∫ `send` –±—É–¥–µ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∑ –ø–æ–º–∏–ª–∫–æ—é (–æ—Å—å —á–æ–º—É –≤—ñ–Ω –ø–æ–≤–µ—Ä—Ç–∞—î `Result`), "
"—è–∫—â–æ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä–∏—Ç–æ. –ö–∞–Ω–∞–ª –∑–∞–∫—Ä–∏–≤–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ –ø—Ä–∏–π–º–∞—á –∫–∏–¥–∞—î—Ç—å—Å—è."

#: src/concurrency/channels/bounded.md:33
msgid ""
"A bounded channel with a size of zero is called a \"rendezvous channel\". "
"Every send will block the current thread until another thread calls `read`."
msgstr ""
"–û–±–º–µ–∂–µ–Ω–∏–π –∫–∞–Ω–∞–ª —Ä–æ–∑–º—ñ—Ä–æ–º –Ω—É–ª—å –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è \"–∫–∞–Ω–∞–ª–æ–º –∑—É—Å—Ç—Ä—ñ—á—ñ\". –ö–æ–∂–Ω–µ "
"–Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –±–ª–æ–∫—É–≤–∞—Ç–∏–º–µ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ç—ñ–∫, –¥–æ–∫–∏ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫ –Ω–µ –≤–∏–∫–ª–∏—á–µ `read`."

#: src/concurrency/send-sync.md:1
msgid "`Send` and `Sync`"
msgstr "`–ù–∞–¥—ñ—Å–ª–∞—Ç–∏` —ñ `–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏`"

#: src/concurrency/send-sync.md:3
msgid ""
"How does Rust know to forbid shared access across thread? The answer is in "
"two traits:"
msgstr ""
"–Ø–∫ Rust –∑–Ω–∞—î, —â–æ –∑–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ —Å–ø—ñ–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –º—ñ–∂ –ø–æ—Ç–æ–∫–∞–º–∏? –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–ª—è–≥–∞—î "
"–≤ –¥–≤–æ—Ö —Ä–∏—Å–∞—Ö:"

#: src/concurrency/send-sync.md:5
msgid ""
"[`Send`](https://doc.rust-lang.org/std/marker/trait.Send.html): a type `T` "
"is `Send` if it is safe to move a `T` across a thread boundary."
msgstr ""
"[`–ù–∞–¥—ñ—Å–ª–∞—Ç–∏`](https://doc.rust-lang.org/std/marker/trait.Send.html): —Ç–∏–ø `T` "
"—î `–ù–∞–¥—ñ—Å–ª–∞—Ç–∏`, —è–∫—â–æ –±–µ–∑–ø–µ—á–Ω–æ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ `T` —á–µ—Ä–µ–∑ –º–µ–∂–∞ –Ω–∏—Ç–∫–∏."

#: src/concurrency/send-sync.md:7
msgid ""
"[`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html): a type `T` "
"is `Sync` if it is safe to move a `&T` across a thread boundary."
msgstr ""
"[`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html): —Ç–∏–ø `T` —î "
"`Sync`, —è–∫—â–æ –±–µ–∑–ø–µ—á–Ω–æ –ø–µ—Ä–µ–º—ñ—â–∞—Ç–∏ `&T` —á–µ—Ä–µ–∑ –º–µ–∂–∞ –Ω–∏—Ç–∫–∏."

#: src/concurrency/send-sync.md:10
msgid ""
"`Send` and `Sync` are [unsafe traits](../unsafe/unsafe-traits.md). The "
"compiler will automatically derive them for your types as long as they only "
"contain `Send` and `Sync` types. You can also implement them manually when "
"you know it is valid."
msgstr ""
"`–ù–∞–¥—ñ—Å–ª–∞—Ç–∏` —Ç–∞ `–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏` —î [–Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º–∏ –æ–∑–Ω–∞–∫–∞–º–∏](../unsafe/unsafe-"
"traits.md). –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–≤–µ–¥–µ —ó—Ö –¥–ª—è –≤–∞—à–∏—Ö —Ç–∏–ø—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ "
"–º—ñ—Å—Ç—è—Ç—å –ª–∏—à–µ —Ç–∏–ø–∏ `Send` —ñ `Sync`. –í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —ó—Ö –≤—Ä—É—á–Ω—É, "
"—è–∫—â–æ –∑–Ω–∞—î—Ç–µ, —â–æ —Ü–µ –¥—ñ–π—Å–Ω–æ."

#: src/concurrency/send-sync.md:20
msgid ""
"One can think of these traits as markers that the type has certain thread-"
"safety properties."
msgstr ""
"–¶—ñ —Ä–∏—Å–∏ –º–æ–∂–Ω–∞ —Ä–æ–∑–≥–ª—è–¥–∞—Ç–∏ —è–∫ –º–∞—Ä–∫–µ—Ä–∏ —Ç–æ–≥–æ, —â–æ —Ç–∏–ø –º–∞—î –ø–µ–≤–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ "
"–±–µ–∑–ø–µ–∫–∏ –ø–æ—Ç–æ–∫—ñ–≤."

#: src/concurrency/send-sync.md:21
msgid "They can be used in the generic constraints as normal traits."
msgstr "–á—Ö –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –æ–±–º–µ–∂–µ–Ω–Ω—è—Ö —è–∫ –∑–≤–∏—á–∞–π–Ω—ñ –æ–∑–Ω–∞–∫–∏."

#: src/concurrency/send-sync/send.md:1
msgid "`Send`"
msgstr "`–ù–∞–¥—ñ—Å–ª–∞—Ç–∏`"

#: src/concurrency/send-sync/send.md:3
msgid ""
"A type `T` is [`Send`](https://doc.rust-lang.org/std/marker/trait.Send.html) "
"if it is safe to move a `T` value to another thread."
msgstr ""
"–¢–∏–ø `T` ‚Äî —Ü–µ [`Send`](https://doc.rust-lang.org/std/marker/trait.Send.html), "
"—è–∫—â–æ –±–µ–∑–ø–µ—á–Ω–æ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è `T` –≤ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫."

#: src/concurrency/send-sync/send.md:5
msgid ""
"The effect of moving ownership to another thread is that _destructors_ will "
"run in that thread. So the question is when you can allocate a value in one "
"thread and deallocate it in another."
msgstr ""
"–ù–∞—Å–ª—ñ–¥–∫–æ–º –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –ø—Ä–∞–≤–∞ –≤–ª–∞—Å–Ω–æ—Å—Ç—ñ –Ω–∞ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫ —î —Ç–µ, —â–æ _–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏_ "
"–±—É–¥—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ —Ü—å–æ–º—É –ø–æ—Ç–æ—Ü—ñ. –û—Ç–∂–µ, –ø–∏—Ç–∞–Ω–Ω—è –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, –∫–æ–ª–∏ –≤–∏ "
"–º–æ–∂–µ—Ç–µ –≤–∏–¥—ñ–ª–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –æ–¥–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ —Ç–∞ –∑–≤—ñ–ª—å–Ω–∏—Ç–∏ –π–æ–≥–æ –≤ —ñ–Ω—à–æ–º—É."

#: src/concurrency/send-sync/send.md:13
msgid ""
"As an example, a connection to the SQLite library must only be accessed from "
"a single thread."
msgstr ""
"–Ø–∫ –ø—Ä–∏–∫–ª–∞–¥, –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ SQLite –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–µ –ª–∏—à–µ –∑ –æ–¥–Ω–æ–≥–æ "
"–ø–æ—Ç–æ–∫—É."

#: src/concurrency/send-sync/sync.md:1
msgid "`Sync`"
msgstr "`–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏`"

#: src/concurrency/send-sync/sync.md:3
msgid ""
"A type `T` is [`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html) "
"if it is safe to access a `T` value from multiple threads at the same time."
msgstr ""
"–¢–∏–ø `T` ‚Äî [`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html), "
"—è–∫—â–æ –±–µ–∑–ø–µ—á–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∑–Ω–∞—á–µ–Ω–Ω—è `T` –∑ –∫—ñ–ª—å–∫–æ—Ö –ø–æ—Ç–æ–∫—ñ–≤ –Ω–∞ –í–æ–¥–Ω–æ—á–∞—Å."

#: src/concurrency/send-sync/sync.md:6
msgid "More precisely, the definition is:"
msgstr "–¢–æ—á–Ω—ñ—à–µ, –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞–∫–µ:"

#: src/concurrency/send-sync/sync.md:8
msgid "`T` is `Sync` if and only if `&T` is `Send`"
msgstr "`T` —î `Sync` —Ç–æ–¥—ñ —ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ `&T` —î `Send`"

#: src/concurrency/send-sync/sync.md:14
msgid ""
"This statement is essentially a shorthand way of saying that if a type is "
"thread-safe for shared use, it is also thread-safe to pass references of it "
"across threads."
msgstr ""
"–¶–µ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –ø–æ —Å—É—Ç—ñ, —î —Å–∫–æ—Ä–æ—á–µ–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º —Å–∫–∞–∑–∞—Ç–∏, —â–æ —è–∫—â–æ —Ç–∏–ø —î "
"–ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∏–º –¥–ª—è —Å–ø—ñ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è, —Ç–∞–∫–æ–∂ –ø–æ—Ç–æ–∫–æ–≤–æ –±–µ–∑–ø–µ—á–Ω–æ "
"–ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω—å–æ–≥–æ –º—ñ–∂ –ø–æ—Ç–æ–∫–∞–º–∏."

#: src/concurrency/send-sync/sync.md:16
msgid ""
"This is because if a type is Sync it means that it can be shared across "
"multiple threads without the risk of data races or other synchronization "
"issues, so it is safe to move it to another thread. A reference to the type "
"is also safe to move to another thread, because the data it references can "
"be accessed from any thread safely."
msgstr ""
"–¶–µ –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è —Ç–∏–º, —â–æ —è–∫—â–æ —Ç–∏–ø Sync, —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤—ñ–Ω –º–æ–∂–µ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –∫—ñ–ª—å–∫–æ–º–∞ –ø–æ—Ç–æ–∫–∞–º–∏ –±–µ–∑ —Ä–∏–∑–∏–∫—É –ø–µ—Ä–µ–≥–æ–Ω—ñ–≤ –¥–∞–Ω–∏—Ö –∞–±–æ —ñ–Ω—à–∏—Ö "
"–ø—Ä–æ–±–ª–µ–º —ñ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é, —Ç–æ–º—É –π–æ–≥–æ –±–µ–∑–ø–µ—á–Ω–æ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –≤ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫. "
"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–∏–ø —Ç–∞–∫–æ–∂ –±–µ–∑–ø–µ—á–Ω–æ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –≤ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫, –æ—Å–∫—ñ–ª—å–∫–∏ –¥–∞–Ω—ñ, –Ω–∞ "
"—è–∫—ñ –≤–æ–Ω–æ –ø–æ—Å–∏–ª–∞—î—Ç—å—Å—è, –º–æ–∂—É—Ç—å –±—É—Ç–∏ –±–µ–∑–ø–µ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –ø–æ—Ç–æ–∫—É."

#: src/concurrency/send-sync/examples.md:3
msgid "`Send + Sync`"
msgstr "`–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ + —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏`"

#: src/concurrency/send-sync/examples.md:5
msgid "Most types you come across are `Send + Sync`:"
msgstr "–ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–∏–ø—ñ–≤, —è–∫—ñ –≤–∏ –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç–µ, —Ü–µ `Send + Sync`:"

#: src/concurrency/send-sync/examples.md:7
msgid "`i8`, `f32`, `bool`, `char`, `&str`, ..."
msgstr "`i8`, `f32`, `bool`, `char`, `&str`, ..."

#: src/concurrency/send-sync/examples.md:8
msgid "`(T1, T2)`, `[T; N]`, `&[T]`, `struct { x: T }`, ..."
msgstr ""

#: src/concurrency/send-sync/examples.md:9
msgid "`String`, `Option<T>`, `Vec<T>`, `Box<T>`, ..."
msgstr "`String`, `Option<T>`, `Vec<T>`, `Box<T>`, ..."

#: src/concurrency/send-sync/examples.md:10
msgid "`Arc<T>`: Explicitly thread-safe via atomic reference count."
msgstr "`Arc<T>`: —è–≤–Ω–æ –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∏–π —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ç–æ–º–∞—Ä–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å."

#: src/concurrency/send-sync/examples.md:11
msgid "`Mutex<T>`: Explicitly thread-safe via internal locking."
msgstr "`Mutex<T>`: —è–≤–Ω–æ –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∏–π —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—î –±–ª–æ–∫—É–≤–∞–Ω–Ω—è."

#: src/concurrency/send-sync/examples.md:12
msgid "`AtomicBool`, `AtomicU8`, ...: Uses special atomic instructions."
msgstr ""
"`AtomicBool`, `AtomicU8`, ...: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∞—Ç–æ–º–∞—Ä–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó."

#: src/concurrency/send-sync/examples.md:14
msgid ""
"The generic types are typically `Send + Sync` when the type parameters are "
"`Send + Sync`."
msgstr ""
"–ó–∞–≥–∞–ª—å–Ω—ñ —Ç–∏–ø–∏, —è–∫ –ø—Ä–∞–≤–∏–ª–æ, \"–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ + —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è\", –∫–æ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ "
"—Ç–∏–ø—É –º–∞—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è \"–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ + —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è\"."

#: src/concurrency/send-sync/examples.md:17
msgid "`Send + !Sync`"
msgstr "`–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ + !Sync`"

#: src/concurrency/send-sync/examples.md:19
msgid ""
"These types can be moved to other threads, but they're not thread-safe. "
"Typically because of interior mutability:"
msgstr ""
"–¶—ñ —Ç–∏–ø–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –≤ —ñ–Ω—à—ñ –ø–æ—Ç–æ–∫–∏, –∞–ª–µ –≤–æ–Ω–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –¥–ª—è –ø–æ—Ç–æ–∫—ñ–≤. –Ø–∫ "
"–ø—Ä–∞–≤–∏–ª–æ, —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—é –º—ñ–Ω–ª–∏–≤—ñ—Å—Ç—å:"

#: src/concurrency/send-sync/examples.md:22
msgid "`mpsc::Sender<T>`"
msgstr "`mpsc::Sender<T>`"

#: src/concurrency/send-sync/examples.md:23
msgid "`mpsc::Receiver<T>`"
msgstr "`mpsc::Receiver<T>`"

#: src/concurrency/send-sync/examples.md:24
msgid "`Cell<T>`"
msgstr "`–ö–ª—ñ—Ç–∏–Ω–∫–∞<T>`"

#: src/concurrency/send-sync/examples.md:25
msgid "`RefCell<T>`"
msgstr "`RefCell<T>`"

#: src/concurrency/send-sync/examples.md:27
msgid "`!Send + Sync`"
msgstr "`!–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ + —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏`"

#: src/concurrency/send-sync/examples.md:29
msgid ""
"These types are thread-safe, but they cannot be moved to another thread:"
msgstr "–¶—ñ —Ç–∏–ø–∏ —î –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–∏–º–∏, –∞–ª–µ —ó—Ö –Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –≤ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫:"

#: src/concurrency/send-sync/examples.md:31
msgid ""
"`MutexGuard<T>`: Uses OS level primitives which must be deallocated on the "
"thread which created them."
msgstr ""
"`MutexGuard<T>`: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–∏–º—ñ—Ç–∏–≤–∏ —Ä—ñ–≤–Ω—è –û–°, —è–∫—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω—ñ –≤ "
"–ø–æ—Ç–æ—Ü—ñ, —è–∫–∏–π —ó—Ö —Å—Ç–≤–æ—Ä–∏–≤."

#: src/concurrency/send-sync/examples.md:34
msgid "`!Send + !Sync`"
msgstr "`!–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ + !–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏`"

#: src/concurrency/send-sync/examples.md:36
msgid "These types are not thread-safe and cannot be moved to other threads:"
msgstr ""
"–¶—ñ —Ç–∏–ø–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –¥–ª—è –ø–æ—Ç–æ–∫—ñ–≤ —ñ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—ñ –≤ —ñ–Ω—à—ñ –ø–æ—Ç–æ–∫–∏:"

#: src/concurrency/send-sync/examples.md:38
msgid ""
"`Rc<T>`: each `Rc<T>` has a reference to an `RcBox<T>`, which contains a non-"
"atomic reference count."
msgstr ""
"`Rc<T>`: –∫–æ–∂–µ–Ω `Rc<T>` –º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ `RcBox<T>`, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å "
"–Ω–µ–∞—Ç–æ–º–∞—Ä–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å."

#: src/concurrency/send-sync/examples.md:40
msgid ""
"`*const T`, `*mut T`: Rust assumes raw pointers may have special concurrency "
"considerations."
msgstr ""
"`*const T`, `*mut T`: Rust –ø—Ä–∏–ø—É—Å–∫–∞—î, —â–æ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ –ø–æ–∫–∞–∂—á–∏–∫–∏ –º–æ–∂—É—Ç—å –º–∞—Ç–∏ "
"–æ—Å–æ–±–ª–∏–≤—ñ –º—ñ—Ä–∫—É–≤–∞–Ω–Ω—è —â–æ–¥–æ –ø–∞—Ä–∞–ª–µ–ª—ñ–∑–º—É."

#: src/concurrency/shared_state.md:3
msgid ""
"Rust uses the type system to enforce synchronization of shared data. This is "
"primarily done via two types:"
msgstr ""
"Rust –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Å–∏—Å—Ç–µ–º—É —Ç–∏–ø—ñ–≤ –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Å–ø—ñ–ª—å–Ω–∏—Ö "
"–¥–∞–Ω–∏—Ö. –í –ø–µ—Ä—à—É —á–µ—Ä–≥—É —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–≤–æ—Ö —Ç–∏–ø—ñ–≤:"

#: src/concurrency/shared_state.md:6
msgid ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html), atomic "
"reference counted `T`: handles sharing between threads and takes care to "
"deallocate `T` when the last reference is dropped,"
msgstr ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html), –∞—Ç–æ–º–∞—Ä–Ω–µ "
"–ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º `T`: –æ–±—Ä–æ–±–ª—è—î —Å–ø—ñ–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –º—ñ–∂ –ø–æ—Ç–æ–∫–∞–º–∏ —Ç–∞ "
"–ø—ñ–∫–ª—É—î—Ç—å—Å—è –ø—Ä–æ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è `T` ` –∫–æ–ª–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ,"

#: src/concurrency/shared_state.md:8
msgid ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html): ensures "
"mutually exclusive access to the `T` value."
msgstr ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html): "
"–∑–∞–±–µ–∑–ø–µ—á—É—î –≤–∑–∞—î–º–æ–≤–∏–∫–ª—é—á–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∑–Ω–∞—á–µ–Ω–Ω—è `T`."

#: src/concurrency/shared_state/arc.md:1
msgid "`Arc`"
msgstr "`–î—É–≥–∞`"

#: src/concurrency/shared_state/arc.md:3
msgid ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html) allows shared "
"read-only access via `Arc::clone`:"
msgstr ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html) –¥–æ–∑–≤–æ–ª—è—î "
"—Å–ø—ñ–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —á–µ—Ä–µ–∑ `Arc::clone`:"

#: src/concurrency/shared_state/arc.md:5
msgid ""
"```rust,editable\n"
"use std::thread;\n"
"use std::sync::Arc;\n"
"\n"
"fn main() {\n"
"    let v = Arc::new(vec![10, 20, 30]);\n"
"    let mut handles = Vec::new();\n"
"    for _ in 1..5 {\n"
"        let v = Arc::clone(&v);\n"
"        handles.push(thread::spawn(move || {\n"
"            let thread_id = thread::current().id();\n"
"            println!(\"{thread_id:?}: {v:?}\");\n"
"        }));\n"
"    }\n"
"\n"
"    handles.into_iter().for_each(|h| h.join().unwrap());\n"
"    println!(\"v: {v:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/shared_state/arc.md:29
msgid ""
"`Arc` stands for \"Atomic Reference Counted\", a thread safe version of `Rc` "
"that uses atomic operations."
msgstr ""
"`Arc` –æ–∑–Ω–∞—á–∞—î \"Atomic Reference Counted\", –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω—É –≤–µ—Ä—Å—ñ—é `Rc`, —è–∫–∞ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∞—Ç–æ–º–∞—Ä–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó."

#: src/concurrency/shared_state/arc.md:31
msgid ""
"`Arc<T>` implements `Clone` whether or not `T` does. It implements `Send` "
"and `Sync` if and only if `T` implements them both."
msgstr ""
"`Arc<T>` —Ä–µ–∞–ª—ñ–∑—É—î `Clone` –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, `T` —Ä–µ–∞–ª—ñ–∑—É—î —Ü–µ. –í—ñ–Ω —Ä–µ–∞–ª—ñ–∑—É—î "
"`Send` —ñ `Sync` —Ç–æ–¥—ñ —ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ `T` —Ä–µ–∞–ª—ñ–∑—É—î —ó—Ö –æ–±–∏–¥–≤–∞."

#: src/concurrency/shared_state/arc.md:33
msgid ""
"`Arc::clone()` has the cost of atomic operations that get executed, but "
"after that the use of the `T` is free."
msgstr ""
"`Arc::clone()` –º–∞—î –≤–∞—Ä—Ç—ñ—Å—Ç—å –∞—Ç–æ–º–∞—Ä–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π, —è–∫—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è, –∞–ª–µ –ø—ñ—Å–ª—è "
"—Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è `T` —î –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º."

#: src/concurrency/shared_state/arc.md:35
msgid ""
"Beware of reference cycles, `Arc` does not use a garbage collector to detect "
"them."
msgstr ""
"–û—Å—Ç–µ—Ä—ñ–≥–∞–π—Ç–µ—Å—è –µ—Ç–∞–ª–æ–Ω–Ω–∏—Ö —Ü–∏–∫–ª—ñ–≤, `Arc` –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∑–±–∏—Ä–∞—á —Å–º—ñ—Ç—Ç—è –¥–ª—è —ó—Ö "
"–≤–∏—è–≤–ª–µ–Ω–Ω—è."

#: src/concurrency/shared_state/arc.md:36
msgid "`std::sync::Weak` can help."
msgstr "`std::sync::Weak` –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏."

#: src/concurrency/shared_state/mutex.md:1
msgid "`Mutex`"
msgstr "`–ú—É—Ç–µ–∫—Å`"

#: src/concurrency/shared_state/mutex.md:3
msgid ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html) ensures "
"mutual exclusion _and_ allows mutable access to `T` behind a read-only "
"interface:"
msgstr ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html) "
"–∑–∞–±–µ–∑–ø–µ—á—É—î –≤–∑–∞—î–º–Ω–µ –≤–∏–∫–ª—é—á–µ–Ω–Ω—è _—ñ_ –¥–æ–∑–≤–æ–ª—è—î –∑–º—ñ–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ `T` –∑–∞ "
"—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –ª–∏—à–µ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è:"

#: src/concurrency/shared_state/mutex.md:6
msgid ""
"```rust,editable\n"
"use std::sync::Mutex;\n"
"\n"
"fn main() {\n"
"    let v = Mutex::new(vec![10, 20, 30]);\n"
"    println!(\"v: {:?}\", v.lock().unwrap());\n"
"\n"
"    {\n"
"        let mut guard = v.lock().unwrap();\n"
"        guard.push(40);\n"
"    }\n"
"\n"
"    println!(\"v: {:?}\", v.lock().unwrap());\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/shared_state/mutex.md:22
msgid ""
"Notice how we have a [`impl<T: Send> Sync for Mutex<T>`](https://doc.rust-"
"lang.org/std/sync/struct.Mutex.html#impl-Sync-for-Mutex%3CT%3E) blanket "
"implementation."
msgstr ""
"–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ –º–∏ –º–∞—î–º–æ [`impl<T: Send> Sync for Mutex<T>`](https://doc."
"rust-lang.org/std/sync/struct.Mutex.html#impl-Sync-for- Mutex%3CT%3E) "
"–∑–∞–≥–∞–ª—å–Ω–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è."

#: src/concurrency/shared_state/mutex.md:31
msgid ""
"`Mutex` in Rust looks like a collection with just one element - the "
"protected data."
msgstr ""
"`Mutex` —É Rust –≤–∏–≥–ª—è–¥–∞—î —è–∫ –∫–æ–ª–µ–∫—Ü—ñ—è –ª–∏—à–µ –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º ‚Äì –∑–∞—Ö–∏—â–µ–Ω–∏–º–∏ "
"–¥–∞–Ω–∏–º–∏."

#: src/concurrency/shared_state/mutex.md:32
msgid ""
"It is not possible to forget to acquire the mutex before accessing the "
"protected data."
msgstr "–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–±—É—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º'—é—Ç–µ–∫—Å –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –∑–∞—Ö–∏—â–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö."

#: src/concurrency/shared_state/mutex.md:33
msgid ""
"You can get an `&mut T` from an `&Mutex<T>` by taking the lock. The "
"`MutexGuard` ensures that the `&mut T` doesn't outlive the lock being held."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ `&mut T` –≤—ñ–¥ `&Mutex<T>`, –≤–∑—è–≤—à–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è. `MutexGuard` "
"–≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ `&mut T` –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–µ —É—Ç—Ä–∏–º—É–≤–∞–Ω–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è."

#: src/concurrency/shared_state/mutex.md:35
msgid ""
"`Mutex<T>` implements both `Send` and `Sync` iff (if and only if) `T` "
"implements `Send`."
msgstr ""
"`Mutex<T>` —Ä–µ–∞–ª—ñ–∑—É—î —è–∫ `–ù–∞–¥—ñ—Å–ª–∞—Ç–∏`, —Ç–∞–∫ —ñ `–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏` —Ç–æ–¥—ñ (—è–∫—â–æ —ñ "
"—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ) `T` —Ä–µ–∞–ª—ñ–∑—É—î `–ù–∞–¥—ñ—Å–ª–∞—Ç–∏`."

#: src/concurrency/shared_state/mutex.md:36
msgid "A read-write lock counterpart - `RwLock`."
msgstr "–ê–Ω–∞–ª–æ–≥ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —á–∏—Ç–∞–Ω–Ω—è-–∑–∞–ø–∏—Å—É - `RwLock`."

#: src/concurrency/shared_state/mutex.md:37
msgid "Why does `lock()` return a `Result`? "
msgstr "–ß–æ–º—É `lock()` –ø–æ–≤–µ—Ä—Ç–∞—î `–†–µ–∑—É–ª—å—Ç–∞—Ç`?"

#: src/concurrency/shared_state/mutex.md:38
msgid ""
"If the thread that held the `Mutex` panicked, the `Mutex` becomes "
"\"poisoned\" to signal that the data it protected might be in an "
"inconsistent state. Calling `lock()` on a poisoned mutex fails with a "
"[`PoisonError`](https://doc.rust-lang.org/std/sync/struct.PoisonError.html). "
"You can call `into_inner()` on the error to recover the data regardless."
msgstr ""
"–Ø–∫—â–æ –ø–æ—Ç—ñ–∫, —è–∫–∏–π —É—Ç—Ä–∏–º—É–≤–∞–≤ `Mutex`, –ø–∞–Ω—ñ–∫—É–≤–∞–≤, `Mutex` —Å—Ç–∞—î \"–æ—Ç—Ä—É—î–Ω–∏–º\", "
"—Å–∏–≥–Ω–∞–ª—ñ–∑—É—é—á–∏ –ø—Ä–æ —Ç–µ, —â–æ –¥–∞–Ω—ñ, —è–∫—ñ –≤—ñ–Ω –∑–∞—Ö–∏—â–∞—î, –º–æ–∂—É—Ç—å –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –≤ "
"–Ω–µ—É–∑–≥–æ–¥–∂–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ. –í–∏–∫–ª–∏–∫ `lock()` –¥–ª—è —à–∫—ñ–¥–ª–∏–≤–æ–≥–æ –º‚Äô—é—Ç–µ–∫—Å—É –Ω–µ –≤–¥–∞—î—Ç—å—Å—è "
"—á–µ—Ä–µ–∑ [`PoisonError`](https://doc.rust-lang.org/std/sync/struct.PoisonError."
"html). –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ `into_inner()` –¥–ª—è –ø–æ–º–∏–ª–∫–∏, —â–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ "
"–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ü—å–æ–≥–æ."

#: src/concurrency/shared_state/example.md:3
msgid "Let us see `Arc` and `Mutex` in action:"
msgstr "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–∏–≤–∏–º–æ—Å—è –Ω–∞ `Arc` —ñ `Mutex` –≤ –¥—ñ—ó:"

#: src/concurrency/shared_state/example.md:5
msgid ""
"```rust,editable,compile_fail\n"
"use std::thread;\n"
"// use std::sync::{Arc, Mutex};\n"
"\n"
"fn main() {\n"
"    let v = vec![10, 20, 30];\n"
"    let handle = thread::spawn(|| {\n"
"        v.push(10);\n"
"    });\n"
"    v.push(1000);\n"
"\n"
"    handle.join().unwrap();\n"
"    println!(\"v: {v:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/shared_state/example.md:23
msgid "Possible solution:"
msgstr "–ú–æ–∂–ª–∏–≤–µ —Ä—ñ—à–µ–Ω–Ω—è:"

#: src/concurrency/shared_state/example.md:25
msgid ""
"```rust,editable\n"
"use std::sync::{Arc, Mutex};\n"
"use std::thread;\n"
"\n"
"fn main() {\n"
"    let v = Arc::new(Mutex::new(vec![10, 20, 30]));\n"
"\n"
"    let v2 = Arc::clone(&v);\n"
"    let handle = thread::spawn(move || {\n"
"        let mut v2 = v2.lock().unwrap();\n"
"        v2.push(10);\n"
"    });\n"
"\n"
"    {\n"
"        let mut v = v.lock().unwrap();\n"
"        v.push(1000);\n"
"    }\n"
"\n"
"    handle.join().unwrap();\n"
"\n"
"    println!(\"v: {v:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/concurrency/shared_state/example.md:49
msgid "Notable parts:"
msgstr "–í–∏–∑–Ω–∞—á–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏:"

#: src/concurrency/shared_state/example.md:51
msgid ""
"`v` is wrapped in both `Arc` and `Mutex`, because their concerns are "
"orthogonal."
msgstr "`v` –∑–∞–≥–æ—Ä–Ω—É—Ç–æ –≤ `Arc` —ñ `Mutex`, —Ç–æ–º—É —â–æ —ó—Ö –∑–∞–≤–¥–∞–Ω–Ω—è –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ñ."

#: src/concurrency/shared_state/example.md:52
msgid ""
"Wrapping a `Mutex` in an `Arc` is a common pattern to share mutable state "
"between threads."
msgstr ""
"–û–±–≥–æ—Ä—Ç–∞–Ω–Ω—è `Mutex` –≤ `Arc` —î –∑–∞–≥–∞–ª—å–Ω–∏–º —à–∞–±–ª–æ–Ω–æ–º –¥–ª—è –æ–±–º—ñ–Ω—É –∑–º—ñ–Ω–Ω–∏–º —Å—Ç–∞–Ω–æ–º "
"–º—ñ–∂ –ø–æ—Ç–æ–∫–∞–º–∏."

#: src/concurrency/shared_state/example.md:53
msgid ""
"`v: Arc<_>` needs to be cloned as `v2` before it can be moved into another "
"thread. Note `move` was added to the lambda signature."
msgstr ""
"`v: Arc<_>` –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–ª–æ–Ω—É–≤–∞—Ç–∏ —è–∫ `v2`, –ø–µ—Ä—à –Ω—ñ–∂ –π–æ–≥–æ –º–æ–∂–Ω–∞ –±—É–¥–µ –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ "
"–≤ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫. –î–æ –ª—è–º–±–¥–∞-—Å–∏–≥–Ω–∞—Ç—É—Ä–∏ –¥–æ–¥–∞–Ω–æ –ø—Ä–∏–º—ñ—Ç–∫—É `move`."

#: src/concurrency/shared_state/example.md:54
msgid ""
"Blocks are introduced to narrow the scope of the `LockGuard` as much as "
"possible."
msgstr "–ë–ª–æ–∫–∏ –≤–≤–æ–¥—è—Ç—å—Å—è, —â–æ–± –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–≤—É–∑–∏—Ç–∏ —Å—Ñ–µ—Ä—É –¥—ñ—ó `LockGuard`."

#: src/exercises/concurrency/morning.md:3
msgid "Let us practice our new concurrency skills with"
msgstr "–î–∞–≤–∞–π—Ç–µ –ø–æ—Ç—Ä–µ–Ω—É—î–º–æ –Ω–∞—à—ñ –Ω–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏ –ø–∞—Ä–∞–ª–µ–ª—ñ–∑–º—É –∑"

#: src/exercises/concurrency/morning.md:5
msgid "Dining philosophers: a classic problem in concurrency."
msgstr "–û–±—ñ–¥–Ω—ñ —Ñ—ñ–ª–æ—Å–æ—Ñ–∏: –∫–ª–∞—Å–∏—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—Å—Ç—ñ."

#: src/exercises/concurrency/morning.md:7
msgid ""
"Multi-threaded link checker: a larger project where you'll use Cargo to "
"download dependencies and then check links in parallel."
msgstr ""
"–ë–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Å–∏–ª–∞–Ω—å: –±—ñ–ª—å—à–∏–π –ø—Ä–æ–µ–∫—Ç, —É —è–∫–æ–º—É –≤–∏ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ—Ç–µ Cargo –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π, –∞ –ø–æ—Ç—ñ–º –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ "
"–ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏–º–µ—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."

#: src/exercises/concurrency/dining-philosophers.md:3
msgid "The dining philosophers problem is a classic problem in concurrency:"
msgstr "–ü—Ä–æ–±–ª–µ–º–∞ –æ–±—ñ–¥–Ω—ñ—Ö —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ–≤ —î –∫–ª–∞—Å–∏—á–Ω–æ—é –ø—Ä–æ–±–ª–µ–º–æ—é –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—Å—Ç—ñ:"

#: src/exercises/concurrency/dining-philosophers.md:5
msgid ""
"Five philosophers dine together at the same table. Each philosopher has "
"their own place at the table. There is a fork between each plate. The dish "
"served is a kind of spaghetti which has to be eaten with two forks. Each "
"philosopher can only alternately think and eat. Moreover, a philosopher can "
"only eat their spaghetti when they have both a left and right fork. Thus two "
"forks will only be available when their two nearest neighbors are thinking, "
"not eating. After an individual philosopher finishes eating, they will put "
"down both forks."
msgstr ""
"–ü'—è—Ç–µ—Ä–æ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ–≤ –æ–±—ñ–¥–∞—é—Ç—å —Ä–∞–∑–æ–º –∑–∞ –æ–¥–Ω–∏–º —Å—Ç–æ–ª–æ–º. –£ –∫–æ–∂–Ω–æ–≥–æ —Ñ—ñ–ª–æ—Å–æ—Ñ–∞ —Å–≤–æ—î "
"–º—ñ—Å—Ü–µ –∑–∞ —Å—Ç–æ–ª–æ–º. –ú—ñ–∂ –∫–æ–∂–Ω–æ—é —Ç–∞—Ä—ñ–ª–∫–æ—é —î –≤–∏–¥–µ–ª–∫–∞. –°—Ç—Ä–∞–≤–∞, —â–æ –ø–æ–¥–∞—î—Ç—å—Å—è, —è–≤–ª—è—î "
"—Å–æ–±–æ—é —Ä—ñ–∑–Ω–æ–≤–∏–¥ —Å–ø–∞–≥–µ—Ç—Ç—ñ, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ó—Å—Ç–∏ –¥–≤–æ–º–∞ –≤–∏–¥–µ–ª–∫–∞–º–∏. –ö–æ–∂–µ–Ω —Ñ—ñ–ª–æ—Å–æ—Ñ "
"–º–æ–∂–µ –ª–∏—à–µ –ø–æ–ø–µ—Ä–µ–º—ñ–Ω–Ω–æ –º–∏—Å–ª–∏—Ç–∏ —ñ —ó—Å—Ç–∏. –ö—Ä—ñ–º —Ç–æ–≥–æ, —Ñ—ñ–ª–æ—Å–æ—Ñ –º–æ–∂–µ —ó—Å—Ç–∏ —Å–≤–æ—ó "
"—Å–ø–∞–≥–µ—Ç—Ç—ñ –ª–∏—à–µ —Ç–æ–¥—ñ, –∫–æ–ª–∏ —É –Ω–∏—Ö —î —ñ –ª—ñ–≤–∞, —ñ –ø—Ä–∞–≤–∞ –≤–∏–¥–µ–ª–∫–∞. –¢–∞–∫–∏–º —á–∏–Ω–æ–º, –¥–≤—ñ "
"–≤–∏–¥–µ–ª–∫–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –ª–∏—à–µ —Ç–æ–¥—ñ, –∫–æ–ª–∏ —ó—Ö–Ω—ñ –Ω–∞–π–±–ª–∏–∂—á—ñ —Å—É—Å—ñ–¥–∏ –¥—É–º–∞—é—Ç—å, –∞ –Ω–µ "
"—ó–¥—è—Ç—å. –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –æ–∫—Ä–µ–º–∏–π —Ñ—ñ–ª–æ—Å–æ—Ñ –∑–∞–∫—ñ–Ω—á—É—î —ó—Å—Ç–∏, –≤—ñ–Ω –∫–ª–∞–¥–µ –æ–±–∏–¥–≤—ñ "
"–≤–∏–¥–µ–ª–∫–∏."

#: src/exercises/concurrency/dining-philosophers.md:13
msgid ""
"You will need a local [Cargo installation](../../cargo/running-locally.md) "
"for this exercise. Copy the code below to a file called `src/main.rs`, fill "
"out the blanks, and test that `cargo run` does not deadlock:"
msgstr ""
"–î–ª—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –≤–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–∞ [–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Cargo](../../cargo/"
"running-locally.md). –°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω–∏–π –Ω–∏–∂—á–µ –∫–æ–¥ —É —Ñ–∞–π–ª –ø—ñ–¥ –Ω–∞–∑–≤–æ—é `src/"
"main.rs`, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ `cargo run` –Ω–µ –±–ª–æ–∫—É—î:"

#: src/exercises/concurrency/dining-philosophers.md:19
msgid ""
"```rust,compile_fail\n"
"use std::sync::{mpsc, Arc, Mutex};\n"
"use std::thread;\n"
"use std::time::Duration;\n"
"\n"
"struct Fork;\n"
"\n"
"struct Philosopher {\n"
"    name: String,\n"
"    // left_fork: ...\n"
"    // right_fork: ...\n"
"    // thoughts: ...\n"
"}\n"
"\n"
"impl Philosopher {\n"
"    fn think(&self) {\n"
"        self.thoughts\n"
"            .send(format!(\"Eureka! {} has a new idea!\", &self.name))\n"
"            .unwrap();\n"
"    }\n"
"\n"
"    fn eat(&self) {\n"
"        // Pick up forks...\n"
"        println!(\"{} is eating...\", &self.name);\n"
"        thread::sleep(Duration::from_millis(10));\n"
"    }\n"
"}\n"
"\n"
"static PHILOSOPHERS: &[&str] =\n"
"    &[\"Socrates\", \"Plato\", \"Aristotle\", \"Thales\", \"Pythagoras\"];\n"
"\n"
"fn main() {\n"
"    // Create forks\n"
"\n"
"    // Create philosophers\n"
"\n"
"    // Make each of them think and eat 100 times\n"
"\n"
"    // Output their thoughts\n"
"}\n"
"```"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:61
msgid "You can use the following `Cargo.toml`:"
msgstr "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π `Cargo.toml`:"

#: src/exercises/concurrency/dining-philosophers.md:65
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md:3
msgid ""
"Let us use our new knowledge to create a multi-threaded link checker. It "
"should start at a webpage and check that links on the page are valid. It "
"should recursively check other pages on the same domain and keep doing this "
"until all pages have been validated."
msgstr ""
"–î–∞–≤–∞–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ –Ω–∞—à—ñ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–∏–π –∑–∞—Å—ñ–± "
"–ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Å–∏–ª–∞–Ω—å. –í—ñ–Ω –º–∞—î –ø–æ—á–∞—Ç–∏—Å—è –Ω–∞ –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω—Ü—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ "
"–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –¥—ñ–π—Å–Ω—ñ. –í—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —ñ–Ω—à—ñ "
"—Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤ —Ç–æ–º—É —Å–∞–º–æ–º—É –¥–æ–º–µ–Ω—ñ —Ç–∞ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —Ä–æ–±–∏—Ç–∏ —Ü–µ, –¥–æ–∫–∏ –≤—Å—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ "
"–Ω–µ –±—É–¥—É—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ."

#: src/exercises/concurrency/link-checker.md:8
msgid ""
"For this, you will need an HTTP client such as [`reqwest`](https://docs.rs/"
"reqwest/). Create a new Cargo project and `reqwest` it as a dependency with:"
msgstr ""
"–î–ª—è —Ü—å–æ–≥–æ –≤–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è HTTP-–∫–ª—ñ—î–Ω—Ç, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ [`reqwest`](https://docs.rs/"
"reqwest/). –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç Cargo —Ç–∞ `reqwest` –π–æ–≥–æ —è–∫ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∑–∞ "
"–¥–æ–ø–æ–º–æ–≥–æ—é:"

#: src/exercises/concurrency/link-checker.md:11
msgid ""
"```shell\n"
"cargo new link-checker\n"
"cd link-checker\n"
"cargo add --features blocking,rustls-tls reqwest\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md:17
msgid ""
"If `cargo add` fails with `error: no such subcommand`, then please edit the "
"`Cargo.toml` file by hand. Add the dependencies listed below."
msgstr ""
"–Ø–∫—â–æ `cargo add` –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–æ—é `error: no such subcommand`, –±—É–¥—å "
"–ª–∞—Å–∫–∞, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ñ–∞–π–ª `Cargo.toml` –≤—Ä—É—á–Ω—É. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä–µ–ª—ñ—á–µ–Ω—ñ –Ω–∏–∂—á–µ "
"–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ."

#: src/exercises/concurrency/link-checker.md:20
msgid ""
"You will also need a way to find links. We can use [`scraper`](https://docs."
"rs/scraper/) for that:"
msgstr ""
"–í–∞–º —Ç–∞–∫–æ–∂ –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Å–ø–æ—Å—ñ–± –ø–æ—à—É–∫—É –ø–æ—Å–∏–ª–∞–Ω—å. –î–ª—è —Ü—å–æ–≥–æ –º–∏ –º–æ–∂–µ–º–æ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ [`scraper`](https://docs.rs/scraper/):"

#: src/exercises/concurrency/link-checker.md:22
msgid ""
"```shell\n"
"cargo add scraper\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md:26
msgid ""
"Finally, we'll need some way of handling errors. We use [`thiserror`]"
"(https://docs.rs/thiserror/) for that:"
msgstr ""
"–ù–∞—Ä–µ—à—Ç—ñ, –Ω–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —è–∫–∏–π—Å—å —Å–ø–æ—Å—ñ–± –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫. –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "
"[`thiserror`](https://docs.rs/thiserror/) –¥–ª—è —Ü—å–æ–≥–æ:"

#: src/exercises/concurrency/link-checker.md:29
msgid ""
"```shell\n"
"cargo add thiserror\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md:33
msgid ""
"The `cargo add` calls will update the `Cargo.toml` file to look like this:"
msgstr "–í–∏–∫–ª–∏–∫–∏ `cargo add` –æ–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª `Cargo.toml` —Ç–∞–∫–∏–º —á–∏–Ω–æ–º:"

#: src/exercises/concurrency/link-checker.md:37
msgid ""
"```toml\n"
"[package]\n"
"name = \"link-checker\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"reqwest = { version = \"0.11.12\", features = [\"blocking\", \"rustls-"
"tls\"] }\n"
"scraper = \"0.13.0\"\n"
"thiserror = \"1.0.37\"\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md:50
msgid ""
"You can now download the start page. Try with a small site such as `https://"
"www.google.org/`."
msgstr ""
"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º —Å–∞–π—Ç–æ–º, "
"–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ `https://www.google.org/`."

#: src/exercises/concurrency/link-checker.md:53
msgid "Your `src/main.rs` file should look something like this:"
msgstr "–í–∞—à —Ñ–∞–π–ª `src/main.rs` –º–∞—î –≤–∏–≥–ª—è–¥–∞—Ç–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ —Ç–∞–∫:"

#: src/exercises/concurrency/link-checker.md:57
msgid ""
"```rust,compile_fail\n"
"use reqwest::{blocking::Client, Url};\n"
"use scraper::{Html, Selector};\n"
"use thiserror::Error;\n"
"\n"
"#[derive(Error, Debug)]\n"
"enum Error {\n"
"    #[error(\"request error: {0}\")]\n"
"    ReqwestError(#[from] reqwest::Error),\n"
"    #[error(\"bad http response: {0}\")]\n"
"    BadResponse(String),\n"
"}\n"
"\n"
"#[derive(Debug)]\n"
"struct CrawlCommand {\n"
"    url: Url,\n"
"    extract_links: bool,\n"
"}\n"
"\n"
"fn visit_page(client: &Client, command: &CrawlCommand) -> Result<Vec<Url>, "
"Error> {\n"
"    println!(\"Checking {:#}\", command.url);\n"
"    let response = client.get(command.url.clone()).send()?;\n"
"    if !response.status().is_success() {\n"
"        return Err(Error::BadResponse(response.status().to_string()));\n"
"    }\n"
"\n"
"    let mut link_urls = Vec::new();\n"
"    if !command.extract_links {\n"
"        return Ok(link_urls);\n"
"    }\n"
"\n"
"    let base_url = response.url().to_owned();\n"
"    let body_text = response.text()?;\n"
"    let document = Html::parse_document(&body_text);\n"
"\n"
"    let selector = Selector::parse(\"a\").unwrap();\n"
"    let href_values = document\n"
"        .select(&selector)\n"
"        .filter_map(|element| element.value().attr(\"href\"));\n"
"    for href in href_values {\n"
"        match base_url.join(href) {\n"
"            Ok(link_url) => {\n"
"                link_urls.push(link_url);\n"
"            }\n"
"            Err(err) => {\n"
"                println!(\"On {base_url:#}: ignored unparsable {href:?}: "
"{err}\");\n"
"            }\n"
"        }\n"
"    }\n"
"    Ok(link_urls)\n"
"}\n"
"\n"
"fn main() {\n"
"    let client = Client::new();\n"
"    let start_url = Url::parse(\"https://www.google.org\").unwrap();\n"
"    let crawl_command = CrawlCommand{ url: start_url, extract_links: "
"true };\n"
"    match visit_page(&client, &crawl_command) {\n"
"        Ok(links) => println!(\"Links: {links:#?}\"),\n"
"        Err(err) => println!(\"Could not extract links: {err:#}\"),\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md:120
msgid "Run the code in `src/main.rs` with"
msgstr "–ó–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–¥ —É `src/main.rs` –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é"

#: src/exercises/concurrency/link-checker.md:122
msgid ""
"```shell\n"
"cargo run\n"
"```"
msgstr ""

#: src/exercises/concurrency/link-checker.md:128
msgid ""
"Use threads to check the links in parallel: send the URLs to be checked to a "
"channel and let a few threads check the URLs in parallel."
msgstr ""
"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ—Å–∏–ª–∞–Ω—å: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å URL-"
"–∞–¥—Ä–µ—Å–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª —ñ –¥–æ–∑–≤–æ–ª—å—Ç–µ –∫—ñ–ª—å–∫–æ–º –ø–æ—Ç–æ–∫–∞–º –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ URL-"
"–∞–¥—Ä–µ—Å–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ."

#: src/exercises/concurrency/link-checker.md:130
msgid ""
"Extend this to recursively extract links from all pages on the `www.google."
"org` domain. Put an upper limit of 100 pages or so so that you don't end up "
"being blocked by the site."
msgstr ""
"–†–æ–∑—à–∏—Ä—Ç–µ —Ü–µ, —â–æ–± —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ —É—Å—ñ—Ö —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–æ–º–µ–Ω—É `www."
"google.org`. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤–µ—Ä—Ö–Ω—é –º–µ–∂—É –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≤ 100 —Å—Ç–æ—Ä—ñ–Ω–æ–∫, —â–æ–± –≤–∞—Å –Ω–µ "
"–∑–∞–±–ª–æ–∫—É–≤–∞–≤ —Å–∞–π—Ç."

#: src/async.md:1
msgid "Async Rust"
msgstr "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π Rust"

#: src/async.md:3
msgid ""
"\"Async\" is a concurrency model where multiple tasks are executed "
"concurrently by executing each task until it would block, then switching to "
"another task that is ready to make progress. The model allows running a "
"larger number of tasks on a limited number of threads. This is because the "
"per-task overhead is typically very low and operating systems provide "
"primitives for efficiently identifying I/O that is able to proceed."
msgstr ""
"¬´–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞¬ª ‚Äî —Ü–µ –º–æ–¥–µ–ª—å –ø–∞—Ä–∞–ª–µ–ª—ñ–∑–º—É, —É —è–∫—ñ–π –∫—ñ–ª—å–∫–∞ –∑–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è "
"–æ–¥–Ω–æ—á–∞—Å–Ω–æ, –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è, –¥–æ–∫–∏ –≤–æ–Ω–æ –Ω–µ –∑–∞–±–ª–æ–∫—É—î—Ç—å—Å—è, –∞ –ø–æ—Ç—ñ–º "
"–ø–µ—Ä–µ–º–∏–∫–∞—î—Ç—å—Å—è –Ω–∞ —ñ–Ω—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. –ú–æ–¥–µ–ª—å –¥–æ–∑–≤–æ–ª—è—î "
"–≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –±—ñ–ª—å—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–¥–∞–Ω—å –Ω–∞ –æ–±–º–µ–∂–µ–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ—Ç–æ–∫—ñ–≤. –¶–µ "
"–ø–æ—è—Å–Ω—é—î—Ç—å—Å—è —Ç–∏–º, —â–æ –Ω–∞–∫–ª–∞–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∫–æ–∂–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–∑–≤–∏—á–∞–π –¥—É–∂–µ –Ω–∏–∑—å–∫—ñ, "
"–∞ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –ø—Ä–∏–º—ñ—Ç–∏–≤–∏ –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—ó —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó "
"–≤–≤–æ–¥—É-–≤–∏–≤–æ–¥—É, —è–∫–∏–π –º–æ–∂–µ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏—Å—è."

#: src/async.md:10
msgid ""
"Rust's asynchronous operation is based on \"futures\", which represent work "
"that may be completed in the future. Futures are \"polled\" until they "
"signal that they are complete."
msgstr ""
"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ä–æ–±–æ—Ç–∞ Rust –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ ¬´—Ñ‚Äô—é—á–µ—Ä—Å–∞—Ö¬ª, —è–∫—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å —Ä–æ–±–æ—Ç—É, "
"—è–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É. –§'—é—á–µ—Ä—Å–∏ \"–æ–ø–∏—Ç—É—é—Ç—å—Å—è\", –¥–æ–∫–∏ –≤–æ–Ω–∏ –Ω–µ "
"—Å–∏–≥–Ω–∞–ª—ñ–∑—É—é—Ç—å, —â–æ –≤–æ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ."

#: src/async.md:14
msgid ""
"Futures are polled by an async runtime, and several different runtimes are "
"available."
msgstr ""
"–§‚Äô—é—á–µ—Ä—Å–∏ –æ–ø–∏—Ç—É—é—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ–º –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —ñ –¥–æ—Å—Ç—É–ø–Ω–æ –∫—ñ–ª—å–∫–∞ "
"—Ä—ñ–∑–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/async.md:17
msgid "Comparisons"
msgstr "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"

#: src/async.md:19
msgid ""
"Python has a similar model in its `asyncio`. However, its `Future` type is "
"callback-based, and not polled. Async Python programs require a \"loop\", "
"similar to a runtime in Rust."
msgstr ""
"Python –º–∞—î –ø–æ–¥—ñ–±–Ω—É –º–æ–¥–µ–ª—å —É —Å–≤–æ—î–º—É `asyncio`. –û–¥–Ω–∞–∫ –π–æ–≥–æ —Ç–∏–ø `Future` "
"–±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –≤–∏–∫–ª–∏–∫—É, –∞ –Ω–µ –æ–ø–∏—Ç—É—î—Ç—å—Å—è. –ü—Ä–æ–≥—Ä–∞–º–∏ –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É "
"Python –≤–∏–º–∞–≥–∞—é—Ç—å ¬´—Ü–∏–∫–ª—É¬ª, –ø–æ–¥—ñ–±–Ω–æ–≥–æ –¥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤ Rust."

#: src/async.md:23
msgid ""
"JavaScript's `Promise` is similar, but again callback-based. The language "
"runtime implements the event loop, so many of the details of Promise "
"resolution are hidden."
msgstr ""
"`Promise` JavaScript –ø–æ–¥—ñ–±–Ω–∏–π, –∞–ª–µ –∑–Ω–æ–≤—É –∂ —Ç–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ "
"–≤–∏–∫–ª–∏–∫—É. –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–æ–≤–∏ —Ä–µ–∞–ª—ñ–∑—É—î —Ü–∏–∫–ª –ø–æ–¥—ñ–π, —Ç–æ–º—É –±–∞–≥–∞—Ç–æ –¥–µ—Ç–∞–ª–µ–π "
"–≤–∏—Ä—ñ—à–µ–Ω–Ω—è Promise –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ."

#: src/async/async-await.md:1
msgid "`async`/`await`"
msgstr "`async`/`wait`"

#: src/async/async-await.md:3
msgid ""
"At a high level, async Rust code looks very much like \"normal\" sequential "
"code:"
msgstr ""
"–ù–∞ –≤–∏—Å–æ–∫–æ–º—É —Ä—ñ–≤–Ω—ñ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–¥ Rust –¥—É–∂–µ —Å—Ö–æ–∂–∏–π –Ω–∞ ¬´–∑–≤–∏—á–∞–π–Ω–∏–π¬ª "
"–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –∫–æ–¥:"

#: src/async/async-await.md:5
msgid ""
"```rust,editable,compile_fail\n"
"use futures::executor::block_on;\n"
"\n"
"async fn count_to(count: i32) {\n"
"    for i in 1..=count {\n"
"        println!(\"Count is: {i}!\");\n"
"    }\n"
"}\n"
"\n"
"async fn async_main(count: i32) {\n"
"    count_to(count).await;\n"
"}\n"
"\n"
"fn main() {\n"
"    block_on(async_main(10));\n"
"}\n"
"```"
msgstr ""

#: src/async/async-await.md:27
msgid ""
"Note that this is a simplified example to show the syntax. There is no long "
"running operation or any real concurrency in it!"
msgstr ""
"–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ —Ü–µ —Å–ø—Ä–æ—â–µ–Ω–∏–π –ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É. –£ –Ω—å–æ–º—É –Ω–µ–º–∞—î "
"—Ç—Ä–∏–≤–∞–ª–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó —á–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–ª–µ–ª—ñ–∑–º—É!"

#: src/async/async-await.md:30
msgid "What is the return type of an async call?"
msgstr "–Ø–∫–∏–π —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É?"

#: src/async/async-await.md:31
msgid "Use `let future: () = async_main(10);` in `main` to see the type."
msgstr ""

#: src/async/async-await.md:33
msgid ""
"The \"async\" keyword is syntactic sugar. The compiler replaces the return "
"type with a future. "
msgstr ""
"–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ \"async\" - —Ü–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–Ω–∏–π —Ü—É–∫–æ—Ä. –ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä –∑–∞–º—ñ–Ω—é—î —Ç–∏–ø "
"–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –º–∞–π–±—É—Ç–Ω—ñ–º."

#: src/async/async-await.md:36
msgid ""
"You cannot make `main` async, without additional instructions to the "
"compiler on how to use the returned future."
msgstr ""
"–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ `main` –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –¥–ª—è "
"–∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞ —â–æ–¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ."

#: src/async/async-await.md:39
msgid ""
"You need an executor to run async code. `block_on` blocks the current thread "
"until the provided future has run to completion. "
msgstr ""
"–í–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥—É. `block_on` –±–ª–æ–∫—É—î "
"–ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ç—ñ–∫, –¥–æ–∫–∏ –Ω–∞–¥–∞–Ω–∏–π –º–∞–π–±—É—Ç–Ω—ñ–π –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è."

#: src/async/async-await.md:42
msgid ""
"`.await` asynchronously waits for the completion of another operation. "
"Unlike `block_on`, `.await` doesn't block the current thread."
msgstr ""
"`.await` –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—á—ñ–∫—É—î –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —ñ–Ω—à–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó. –ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ "
"`block_on`, `.await` –Ω–µ –±–ª–æ–∫—É—î –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—Ç—ñ–∫."

#: src/async/async-await.md:45
msgid ""
"`.await` can only be used inside an `async` function (or block; these are "
"introduced later). "
msgstr ""

#: src/async/futures.md:3
msgid ""
"[`Future`](https://doc.rust-lang.org/std/future/trait.Future.html) is a "
"trait, implemented by objects that represent an operation that may not be "
"complete yet. A future can be polled, and `poll` returns a [`Poll`](https://"
"doc.rust-lang.org/std/task/enum.Poll.html)."
msgstr ""
"[`–ú–∞–π–±—É—Ç–Ω—î`](https://doc.rust-lang.org/std/future/trait.Future.html) ‚Äî —Ü–µ "
"–æ–∑–Ω–∞–∫–∞, —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –æ–±‚Äô—î–∫—Ç–∞–º–∏, —è–∫—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—é, —è–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ —â–µ "
"–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ—é. –ú–∞–π–±—É—Ç–Ω—î –º–æ–∂–Ω–∞ –æ–ø–∏—Ç—É–≤–∞—Ç–∏, —ñ `poll` –ø–æ–≤–µ—Ä—Ç–∞—î [`Poll`](https://"
"doc.rust-lang.org/std/task/enum.Poll.html)."

#: src/async/futures.md:8
msgid ""
"```rust\n"
"use std::pin::Pin;\n"
"use std::task::Context;\n"
"\n"
"pub trait Future {\n"
"    type Output;\n"
"    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::"
"Output>;\n"
"}\n"
"\n"
"pub enum Poll<T> {\n"
"    Ready(T),\n"
"    Pending,\n"
"}\n"
"```"
msgstr ""

#: src/async/futures.md:23
msgid ""
"An async function returns an `impl Future`. It's also possible (but "
"uncommon) to implement `Future` for your own types. For example, the "
"`JoinHandle` returned from `tokio::spawn` implements `Future` to allow "
"joining to it."
msgstr ""
"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î `impl Future`. –¢–∞–∫–æ–∂ –º–æ–∂–ª–∏–≤–æ (–∞–ª–µ —Ä—ñ–¥–∫–æ) "
"—Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ `Future` –¥–ª—è –≤–∞—à–∏—Ö –≤–ª–∞—Å–Ω–∏—Ö —Ç–∏–ø—ñ–≤. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, `JoinHandle`, "
"–æ—Ç—Ä–∏–º–∞–Ω–∏–π –≤—ñ–¥ `tokio::spawn`, —Ä–µ–∞–ª—ñ–∑—É—î `Future`, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ "
"–Ω—å–æ–≥–æ."

#: src/async/futures.md:27
msgid ""
"The `.await` keyword, applied to a Future, causes the current async function "
"to pause until that Future is ready, and then evaluates to its output."
msgstr ""
"–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ `.await`, –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–µ –¥–æ Future, –∑–º—É—à—É—î –ø–æ—Ç–æ—á–Ω—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É "
"—Ñ—É–Ω–∫—Ü—ñ—é –ø—Ä–∏–∑—É–ø–∏–Ω—è—Ç–∏, –¥–æ–∫–∏ —Ü–µ Future –Ω–µ –±—É–¥–µ –≥–æ—Ç–æ–≤–µ, –∞ –ø–æ—Ç—ñ–º –æ–±—á–∏—Å–ª—é—î —ó—ó "
"–≤–∏—Ö—ñ–¥."

#: src/async/futures.md:32
msgid ""
"The `Future` and `Poll` types are implemented exactly as shown; click the "
"links to show the implementations in the docs."
msgstr ""

#: src/async/futures.md:35
msgid ""
"We will not get to `Pin` and `Context`, as we will focus on writing async "
"code, rather than building new async primitives. Briefly:"
msgstr ""
"–ú–∏ –Ω–µ –±—É–¥–µ–º–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –¥–æ `Pin` —ñ `Context`, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –∑–æ—Å–µ—Ä–µ–¥–∏–º–æ—Å—è –Ω–∞ "
"–Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥—É, –∞ –Ω–µ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –ø—Ä–∏–º—ñ—Ç–∏–≤—ñ–≤. "
"–ö–æ—Ä–æ—Ç–∫–æ:"

#: src/async/futures.md:38
msgid ""
"`Context` allows a Future to schedule itself to be polled again when an "
"event occurs."
msgstr ""
"`–ö–æ–Ω—Ç–µ–∫—Å—Ç` –¥–æ–∑–≤–æ–ª—è—î Future –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–µ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è, –∫–æ–ª–∏ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è "
"–ø–æ–¥—ñ—è."

#: src/async/futures.md:41
msgid ""
"`Pin` ensures that the Future isn't moved in memory, so that pointers into "
"that future remain valid. This is required to allow references to remain "
"valid after an `.await`."
msgstr ""
"`Pin` –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –º–∞–π–±—É—Ç–Ω—î –Ω–µ –±—É–¥–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ –ø–∞–º'—è—Ç—ñ, —Ç–æ–º—É –ø–æ–∫–∞–∂—á–∏–∫–∏ –Ω–∞ "
"—Ü–µ –º–∞–π–±—É—Ç–Ω—î –∑–∞–ª–∏—à–∞—Ç–∏–º—É—Ç—å—Å—è –¥—ñ–π—Å–Ω–∏–º–∏. –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º "
"–∑–∞–ª–∏—à–∞—Ç–∏—Å—è –¥—ñ–π—Å–Ω–∏–º–∏ –ø—ñ—Å–ª—è `.await`."

#: src/async/runtimes.md:3
msgid ""
"A _runtime_ provides support for performing operations asynchronously (a "
"_reactor_) and is responsible for executing futures (an _executor_). Rust "
"does not have a \"built-in\" runtime, but several options are available:"
msgstr ""
"_Runtime_ –∑–∞–±–µ–∑–ø–µ—á—É—î –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π (_reactor_) —ñ "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ‚Äô—é—á–µ—Ä—Å—ñ–≤ (_executor_). Rust –Ω–µ –º–∞—î ¬´–≤–±—É–¥–æ–≤–∞–Ω–æ–≥–æ¬ª "
"—Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –∞–ª–µ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫—ñ–ª—å–∫–∞ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:"

#: src/async/runtimes.md:7
msgid ""
"[Tokio](https://tokio.rs/): performant, with a well-developed ecosystem of "
"functionality like [Hyper](https://hyper.rs/) for HTTP or [Tonic](https://"
"github.com/hyperium/tonic) for gRPC."
msgstr ""
"[Tokio](https://tokio.rs/): –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π, —ñ–∑ –¥–æ–±—Ä–µ —Ä–æ–∑–≤–∏–Ω–µ–Ω–æ—é –µ–∫–æ—Å–∏—Å—Ç–µ–º–æ—é "
"—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ [Hyper](https://hyper.rs/) –¥–ª—è HTTP –∞–±–æ [Tonic]"
"(https://github) .com/hyperium/tonic) –¥–ª—è gRPC."

#: src/async/runtimes.md:10
msgid ""
"[async-std](https://async.rs/): aims to be a \"std for async\", and includes "
"a basic runtime in `async::task`."
msgstr ""
"[async-std](https://async.rs/): –ø—Ä–∞–≥–Ω–µ –±—É—Ç–∏ \"—Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ\" "
"—Ç–∞ –≤–∫–ª—é—á–∞—î –±–∞–∑–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤ `async::task`."

#: src/async/runtimes.md:12
msgid "[smol](https://docs.rs/smol/latest/smol/): simple and lightweight"
msgstr "[smol](https://docs.rs/smol/latest/smol/): –ø—Ä–æ—Å—Ç–∏–π —ñ –ª–µ–≥–∫–∏–π"

#: src/async/runtimes.md:14
msgid ""
"Several larger applications have their own runtimes. For example, [Fuchsia]"
"(https://fuchsia.googlesource.com/fuchsia/+/refs/heads/main/src/lib/fuchsia-"
"async/src/lib.rs) already has one."
msgstr ""
"–ö—ñ–ª—å–∫–∞ –≤–µ–ª–∏–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º –º–∞—é—Ç—å –≤–ª–∞—Å–Ω–∏–π —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, [Fuchsia]"
"(https://fuchsia.googlesource.com/fuchsia/+/refs/heads/main/src/lib/fuchsia-"
"async/src/lib.rs) —É–∂–µ –º–∞—î –æ–¥–∏–Ω."

#: src/async/runtimes.md:20
msgid ""
"Note that of the listed runtimes, only Tokio is supported in the Rust "
"playground. The playground also does not permit any I/O, so most interesting "
"async things can't run in the playground."
msgstr ""
"–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É, —â–æ –∑ –ø–µ—Ä–µ–ª—ñ—á–µ–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ª–∏—à–µ Tokio "
"–ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –º–∞–π–¥–∞–Ω—á–∏–∫—É Rust. –Ü–≥—Ä–æ–≤–∏–π –º–∞–π–¥–∞–Ω—á–∏–∫ —Ç–∞–∫–æ–∂ –Ω–µ "
"–¥–æ–∑–≤–æ–ª—è—î –±—É–¥—å-—è–∫–∏–π –≤–≤—ñ–¥-–≤–∏–≤—ñ–¥, —Ç–æ–º—É –±—ñ–ª—å—à—ñ—Å—Ç—å —Ü—ñ–∫–∞–≤–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö —Ä–µ—á–µ–π –Ω–µ "
"–º–æ–∂—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –º–∞–π–¥–∞–Ω—á–∏–∫—É."

#: src/async/runtimes.md:24
msgid ""
"Futures are \"inert\" in that they do not do anything (not even start an I/O "
"operation) unless there is an executor polling them. This differs from JS "
"Promises, for example, which will run to completion even if they are never "
"used."
msgstr ""
"–§'—é—á–µ—Ä—Å–∏ ¬´—ñ–Ω–µ—Ä—Ç–Ω—ñ¬ª –≤ —Ç–æ–º—É, —â–æ –≤–æ–Ω–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–ª—è—Ç—å (–Ω–∞–≤—ñ—Ç—å –Ω–µ –ø–æ—á–∏–Ω–∞—é—Ç—å "
"–æ–ø–µ—Ä–∞—Ü—ñ—é –≤–≤–æ–¥—É-–≤–∏–≤–æ–¥—É), —è–∫—â–æ –Ω–µ–º–∞—î –≤–∏–∫–æ–Ω–∞–≤—Ü—è, —è–∫–∏–π —ó—Ö –æ–ø–∏—Ç—É—î. –¶–µ "
"–≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, JS Promises, —è–∫—ñ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏–º—É—Ç—å—Å—è –¥–æ –∫—ñ–Ω—Ü—è, "
"–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —ó—Ö –Ω—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏."

#: src/async/runtimes/tokio.md:4
msgid "Tokio provides: "
msgstr "Tokio –Ω–∞–¥–∞—î:"

#: src/async/runtimes/tokio.md:6
msgid "A multi-threaded runtime for executing asynchronous code."
msgstr "–ë–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥—É."

#: src/async/runtimes/tokio.md:7
msgid "An asynchronous version of the standard library."
msgstr "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏."

#: src/async/runtimes/tokio.md:8
msgid "A large ecosystem of libraries."
msgstr "–í–µ–ª–∏–∫–∞ –µ–∫–æ—Å–∏—Å—Ç–µ–º–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫."

#: src/async/runtimes/tokio.md:10
msgid ""
"```rust,editable,compile_fail\n"
"use tokio::time;\n"
"\n"
"async fn count_to(count: i32) {\n"
"    for i in 1..=count {\n"
"        println!(\"Count in task: {i}!\");\n"
"        time::sleep(time::Duration::from_millis(5)).await;\n"
"    }\n"
"}\n"
"\n"
"#[tokio::main]\n"
"async fn main() {\n"
"    tokio::spawn(count_to(10));\n"
"\n"
"    for i in 1..5 {\n"
"        println!(\"Main task: {i}\");\n"
"        time::sleep(time::Duration::from_millis(5)).await;\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/async/runtimes/tokio.md:33
msgid "With the `tokio::main` macro we can now make `main` async."
msgstr ""
"–ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–∞–∫—Ä–æ—Å—É `tokio::main` –º–∏ —Ç–µ–ø–µ—Ä –º–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏ `main` "
"–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º."

#: src/async/runtimes/tokio.md:35
msgid "The `spawn` function creates a new, concurrent \"task\"."
msgstr "–§—É–Ω–∫—Ü—ñ—è `spawn` —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –æ–¥–Ω–æ—á–∞—Å–Ω–µ \"–∑–∞–≤–¥–∞–Ω–Ω—è\"."

#: src/async/runtimes/tokio.md:37
msgid "Note: `spawn` takes a `Future`, you don't call `.await` on `count_to`."
msgstr ""
"–ü—Ä–∏–º—ñ—Ç–∫–∞: `spawn` –ø—Ä–∏–π–º–∞—î `Future`, –≤–∏ –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç–µ `.await` –Ω–∞ `count_to`."

#: src/async/runtimes/tokio.md:39
msgid "**Further exploration:**"
msgstr "**–ü–æ–¥–∞–ª—å—à–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è:**"

#: src/async/runtimes/tokio.md:41
msgid ""
"Why does `count_to` not (usually) get to 10? This is an example of async "
"cancellation. `tokio::spawn` returns a handle which can be awaited to wait "
"until it finishes."
msgstr ""
"–ß–æ–º—É `count_to` (–∑–∞–∑–≤–∏—á–∞–π) –Ω–µ –¥–æ—Å—è–≥–∞—î 10? –¶–µ –ø—Ä–∏–∫–ª–∞–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ "
"—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è. `tokio::spawn` –ø–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä, —è–∫–∏–π –º–æ–∂–Ω–∞ —á–µ–∫–∞—Ç–∏, –ø–æ–∫–∏ –≤—ñ–Ω "
"–∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è."

#: src/async/runtimes/tokio.md:45
msgid "Try `count_to(10).await` instead of spawning."
msgstr "–°–ø—Ä–æ–±—É–π—Ç–µ `count_to(10).await` –∑–∞–º—ñ—Å—Ç—å –ø–æ—Ä–æ–¥–∂–µ–Ω–Ω—è."

#: src/async/runtimes/tokio.md:47
msgid "Try awaiting the task returned from `tokio::spawn`."
msgstr "–°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –∑–∞–≤–¥–∞–Ω–Ω—è, –ø–æ–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∑ `tokio::spawn`."

#: src/async/tasks.md:3
msgid "Rust has a task system, which is a form of lightweight threading."
msgstr "–£ Rust —î —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–¥–∞–Ω—å, —è–∫–∞ —î —Ñ–æ—Ä–º–æ—é –ª–µ–≥–∫–æ–≥–æ –ø–æ—Ç–æ–∫—É."

#: src/async/tasks.md:5
msgid ""
"A task has a single top-level future which the executor polls to make "
"progress. That future may have one or more nested futures that its `poll` "
"method polls, corresponding loosely to a call stack. Concurrency within a "
"task is possible by polling multiple child futures, such as racing a timer "
"and an I/O operation."
msgstr ""
"–ó–∞–≤–¥–∞–Ω–Ω—è –º–∞—î —î–¥–∏–Ω–µ –º–∞–π–±—É—Ç–Ω—î –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è, —è–∫–µ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –æ–ø–∏—Ç—É—î –¥–ª—è "
"–ø—Ä–æ–≥—Ä–µ—Å—É. –¶–µ –º–∞–π–±—É—Ç–Ω—î –º–æ–∂–µ –º–∞—Ç–∏ –æ–¥–∏–Ω –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Ñ‚Äô—é—á–µ—Ä—Å—ñ–≤, —è–∫—ñ "
"–æ–ø–∏—Ç—É—î –π–æ–≥–æ –º–µ—Ç–æ–¥ `poll`, —â–æ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ç–µ–∫—É –≤–∏–∫–ª–∏–∫—ñ–≤. "
"–ü–∞—Ä–∞–ª–µ–ª—å–Ω—ñ—Å—Ç—å —É –º–µ–∂–∞—Ö –∑–∞–≤–¥–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Ö "
"–¥–æ—á—ñ—Ä–Ω—ñ—Ö —Ñ‚Äô—é—á–µ—Ä—Å—ñ–≤, —Ç–∞–∫–∏—Ö —è–∫ –∑–º–∞–≥–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–≤–µ–¥–µ–Ω–Ω—è/–≤–∏–≤–µ–¥–µ–Ω–Ω—è."

#: src/async/tasks.md:10
msgid ""
"```rust,compile_fail\n"
"use tokio::io::{self, AsyncReadExt, AsyncWriteExt};\n"
"use tokio::net::TcpListener;\n"
"\n"
"#[tokio::main]\n"
"async fn main() -> io::Result<()> {\n"
"    let listener = TcpListener::bind(\"127.0.0.1:6142\").await?;\n"
"\tprintln!(\"listening on port 6142\");\n"
"\n"
"    loop {\n"
"        let (mut socket, addr) = listener.accept().await?;\n"
"\n"
"        println!(\"connection from {addr:?}\");\n"
"\n"
"        tokio::spawn(async move {\n"
"            if let Err(e) = socket.write_all(b\"Who are you?\\n\").await {\n"
"                println!(\"socket error: {e:?}\");\n"
"                return;\n"
"            }\n"
"\n"
"            let mut buf = vec![0; 1024];\n"
"            let reply = match socket.read(&mut buf).await {\n"
"                Ok(n) => {\n"
"                    let name = std::str::from_utf8(&buf[..n]).unwrap()."
"trim();\n"
"                    format!(\"Thanks for dialing in, {name}!\\n\")\n"
"                }\n"
"                Err(e) => {\n"
"                    println!(\"socket error: {e:?}\");\n"
"                    return;\n"
"                }\n"
"            };\n"
"\n"
"            if let Err(e) = socket.write_all(reply.as_bytes()).await {\n"
"                println!(\"socket error: {e:?}\");\n"
"            }\n"
"        });\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/async/tasks.md:52 src/async/control-flow/join.md:36
msgid ""
"Copy this example into your prepared `src/main.rs` and run it from there."
msgstr ""
"–°–∫–æ–ø—ñ—é–π—Ç–µ —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ —É –≤–∞—à –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π `src/main.rs` —ñ –∑–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ "
"–∑–≤—ñ–¥—Ç–∏."

#: src/async/tasks.md:54
msgid ""
"Ask students to visualize what the state of the example server would be with "
"a few connected clients. What tasks exist? What are their Futures?"
msgstr ""
"–ü–æ–ø—Ä–æ—Å—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≤—ñ–∑—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–∞–Ω —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏–∫–ª–∞–¥—É –∑ –∫—ñ–ª—å–∫–æ–º–∞ "
"–ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–º–∏ –∫–ª—ñ—î–Ω—Ç–∞–º–∏. –Ø–∫—ñ —ñ—Å–Ω—É—é—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è? –Ø–∫–µ —ó—Ö–Ω—î –º–∞–π–±—É—Ç–Ω—î?"

#: src/async/tasks.md:57
msgid ""
"This is the first time we've seen an `async` block. This is similar to a "
"closure, but does not take any arguments. Its return value is a Future, "
"similar to an `async fn`. "
msgstr ""
"–¶–µ –ø–µ—Ä—à–∏–π —Ä–∞–∑, –∫–æ–ª–∏ –º–∏ –±–∞—á–∏–º–æ –±–ª–æ–∫ `async`. –¶–µ —Å—Ö–æ–∂–µ –Ω–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è, –∞–ª–µ –Ω–µ "
"–ø—Ä–∏–π–º–∞—î –∂–æ–¥–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤. –ô–æ–≥–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–Ω—è Future, –ø–æ–¥—ñ–±–Ω–µ –¥–æ "
"`async fn`."

#: src/async/tasks.md:61
msgid ""
"Refactor the async block into a function, and improve the error handling "
"using `?`."
msgstr ""
"–ü–µ—Ä–µ—Ç–≤–æ—Ä—ñ—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –±–ª–æ–∫ —É —Ñ—É–Ω–∫—Ü—ñ—é —Ç–∞ –ø–æ–∫—Ä–∞—â—Ç–µ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫ –∑–∞ "
"–¥–æ–ø–æ–º–æ–≥–æ—é `?`."

#: src/async/channels.md:3
msgid ""
"Several crates have support for asynchronous channels. For instance `tokio`:"
msgstr "–ö—ñ–ª—å–∫–∞ —è—â–∏–∫—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –∫–∞–Ω–∞–ª–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥ `tokio`:"

#: src/async/channels.md:5
msgid ""
"```rust,editable,compile_fail\n"
"use tokio::sync::mpsc::{self, Receiver};\n"
"\n"
"async fn ping_handler(mut input: Receiver<()>) {\n"
"    let mut count: usize = 0;\n"
"\n"
"    while let Some(_) = input.recv().await {\n"
"        count += 1;\n"
"        println!(\"Received {count} pings so far.\");\n"
"    }\n"
"\n"
"    println!(\"ping_handler complete\");\n"
"}\n"
"\n"
"#[tokio::main]\n"
"async fn main() {\n"
"    let (sender, receiver) = mpsc::channel(32);\n"
"    let ping_handler_task = tokio::spawn(ping_handler(receiver));\n"
"    for i in 0..10 {\n"
"        sender.send(()).await.expect(\"Failed to send ping.\");\n"
"        println!(\"Sent {} pings so far.\", i + 1);\n"
"    }\n"
"\n"
"    drop(sender);\n"
"    ping_handler_task.await.expect(\"Something went wrong in ping handler "
"task.\");\n"
"}\n"
"```"
msgstr ""

#: src/async/channels.md:35
msgid "Change the channel size to `3` and see how it affects the execution."
msgstr ""
"–ó–º—ñ–Ω—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä –∫–∞–Ω–∞–ª—É –Ω–∞ \"3\" —ñ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è, —è–∫ —Ü–µ –≤–ø–ª–∏–Ω–µ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/async/channels.md:37
msgid ""
"Overall, the interface is similar to the `sync` channels as seen in the "
"[morning class](concurrency/channels.md)."
msgstr ""
"–ó–∞–≥–∞–ª–æ–º, —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥—ñ–±–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—ñ–≤ `sync`, —è–∫—ñ –º–∏ –±–∞—á–∏–ª–∏ –≤ [—Ä–∞–Ω–∫–æ–≤–æ–º—É "
"–∫–ª–∞—Å—ñ](concurrency/channels.md)."

#: src/async/channels.md:40
msgid "Try removing the `std::mem::drop` call. What happens? Why?"
msgstr "–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–∫–ª–∏–∫ `std::mem::drop`. –©–æ —Å—Ç–∞–ª–æ—Å—è? —á–æ–º—É"

#: src/async/channels.md:42
msgid ""
"The [Flume](https://docs.rs/flume/latest/flume/) crate has channels that "
"implement both `sync` and `async` `send` and `recv`. This can be convenient "
"for complex applications with both IO and heavy CPU processing tasks."
msgstr ""
"–Ø—â–∏–∫ [Flume](https://docs.rs/flume/latest/flume/) –º–∞—î –∫–∞–Ω–∞–ª–∏, —è–∫—ñ —Ä–µ–∞–ª—ñ–∑—É—é—Ç—å "
"—è–∫ `sync`, —Ç–∞–∫ —ñ `async` `send` —ñ `recv`. –¶–µ –º–æ–∂–µ –±—É—Ç–∏ –∑—Ä—É—á–Ω–æ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö "
"–¥–æ–¥–∞—Ç–∫—ñ–≤ —ñ–∑ —è–∫ –≤–≤–µ–¥–µ–Ω–Ω—è–º –≤–≤–æ–¥—É-–≤–∏–≤–æ–¥—É, —Ç–∞–∫ —ñ –∑ –≤–∞–∂–∫–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –æ–±—Ä–æ–±–∫–∏ –¶–ü."

#: src/async/channels.md:46
msgid ""
"What makes working with `async` channels preferable is the ability to "
"combine them with other `future`s to combine them and create complex control "
"flow."
msgstr ""
"–¢–µ, —â–æ —Ä–æ–±–∏—Ç—å —Ä–æ–±–æ—Ç—É –∑ ¬´–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º–∏¬ª –∫–∞–Ω–∞–ª–∞–º–∏ –∫—Ä–∞—â–æ—é, —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å "
"–∫–æ–º–±—ñ–Ω—É–≤–∞—Ç–∏ —ó—Ö –∑ —ñ–Ω—à–∏–º–∏ ¬´–º–∞–π–±—É—Ç–Ω—ñ–º–∏¬ª, —â–æ–± –ø–æ—î–¥–Ω–∞—Ç–∏ —ó—Ö —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–∫–ª–∞–¥–Ω–∏–π "
"–ø–æ—Ç—ñ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è."

#: src/async/control-flow.md:1
msgid "Futures Control Flow"
msgstr "–ü–æ—Ç—ñ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ'—é—á–µ—Ä—Å–∞–º–∏"

#: src/async/control-flow.md:3
msgid ""
"Futures can be combined together to produce concurrent compute flow graphs. "
"We have already seen tasks, that function as independent threads of "
"execution."
msgstr ""
"–§‚Äô—é—á–µ—Ä—Å–∏ –º–æ–∂–Ω–∞ –æ–±‚Äô—î–¥–Ω—É–≤–∞—Ç–∏, —â–æ–± —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –ø–æ—Ç–æ–∫—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö "
"–æ–±—á–∏—Å–ª–µ–Ω—å. –ú–∏ –≤–∂–µ –±–∞—á–∏–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—é—Ç—å —è–∫ –Ω–µ–∑–∞–ª–µ–∂–Ω—ñ –ø–æ—Ç–æ–∫–∏ "
"–≤–∏–∫–æ–Ω–∞–Ω–Ω—è."

#: src/async/control-flow.md:6
msgid "[Join](control-flow/join.md)"
msgstr "[–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è](control-flow/join.md)"

#: src/async/control-flow.md:7
msgid "[Select](control-flow/select.md)"
msgstr "[–í–∏–±—Ä–∞—Ç–∏](control-flow/select.md)"

#: src/async/control-flow/join.md:3
msgid ""
"A join operation waits until all of a set of futures are ready, and returns "
"a collection of their results. This is similar to `Promise.all` in "
"JavaScript or `asyncio.gather` in Python."
msgstr ""
"–û–ø–µ—Ä–∞—Ü—ñ—è –æ–±‚Äô—î–¥–Ω–∞–Ω–Ω—è –æ—á—ñ–∫—É—î, –ø–æ–∫–∏ –≤–µ—Å—å –Ω–∞–±—ñ—Ä —Ñ‚Äô—é—á–µ—Ä—Å—ñ–≤ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π, —ñ "
"–ø–æ–≤–µ—Ä—Ç–∞—î –∫–æ–ª–µ–∫—Ü—ñ—é —ó—Ö–Ω—ñ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –¶–µ —Å—Ö–æ–∂–µ –Ω–∞ `Promise.all` —É JavaScript "
"–∞–±–æ `asyncio.gather` —É Python."

#: src/async/control-flow/join.md:7
msgid ""
"```rust,editable,compile_fail\n"
"use anyhow::Result;\n"
"use futures::future;\n"
"use reqwest;\n"
"use std::collections::HashMap;\n"
"\n"
"async fn size_of_page(url: &str) -> Result<usize> {\n"
"    let resp = reqwest::get(url).await?;\n"
"    Ok(resp.text().await?.len())\n"
"}\n"
"\n"
"#[tokio::main]\n"
"async fn main() {\n"
"    let urls: [&str; 4] = [\n"
"        \"https://google.com\",\n"
"        \"https://httpbin.org/ip\",\n"
"        \"https://play.rust-lang.org/\",\n"
"        \"BAD_URL\",\n"
"    ];\n"
"    let futures_iter = urls.into_iter().map(size_of_page);\n"
"    let results = future::join_all(futures_iter).await;\n"
"    let page_sizes_dict: HashMap<&str, Result<usize>> =\n"
"        urls.into_iter().zip(results.into_iter()).collect();\n"
"    println!(\"{:?}\", page_sizes_dict);\n"
"}\n"
"```"
msgstr ""

#: src/async/control-flow/join.md:38
msgid ""
"For multiple futures of disjoint types, you can use `std::future::join!` but "
"you must know how many futures you will have at compile time. This is "
"currently in the `futures` crate, soon to be stabilised in `std::future`."
msgstr ""
"–î–ª—è –∫—ñ–ª—å–∫–æ—Ö —Ñ‚Äô—é—á–µ—Ä—Å—ñ–≤ –Ω–µ–ø–µ—Ä–µ—Å—ñ—á–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `std::"
"future::join!`, –∞–ª–µ –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–Ω–∞—Ç–∏, —Å–∫—ñ–ª—å–∫–∏ —Ñ‚Äô—é—á–µ—Ä—Å—ñ–≤ —É –≤–∞—Å –±—É–¥–µ –ø—ñ–¥ —á–∞—Å "
"–∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó. –ù–∞—Ä–∞–∑—ñ —Ü–µ –≤ —è—â–∏–∫—É `futures`, –Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ —Å—Ç–∞–±—ñ–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ "
"`std::future`."

#: src/async/control-flow/join.md:42
msgid ""
"The risk of `join` is that one of the futures may never resolve, this would "
"cause your program to stall. "
msgstr ""
"–†–∏–∑–∏–∫ `join` –ø–æ–ª—è–≥–∞—î –≤ —Ç–æ–º—É, —â–æ –æ–¥–∏–Ω —ñ–∑ —Ñ'—é—á–µ—Ä—Å—ñ–≤ –º–æ–∂–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –≤–∏—Ä—ñ—à–∏—Ç–∏—Å—è, "
"—Ü–µ –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –∑—É–ø–∏–Ω–∫–∏ –≤–∞—à–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏."

#: src/async/control-flow/join.md:45
msgid ""
"You can also combine `join_all` with `join!` for instance to join all "
"requests to an http service as well as a database query. Try adding a "
"`tokio::time::sleep` to the future, using `futures::join!`. This is not a "
"timeout (that requires `select!`, explained in the next chapter), but "
"demonstrates `join!`."
msgstr ""
"–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –ø–æ—î–¥–Ω–∞—Ç–∏ `join_all` –∑ `join!`, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —â–æ–± –æ–±‚Äô—î–¥–Ω–∞—Ç–∏ –≤—Å—ñ "
"–∑–∞–ø–∏—Ç–∏ –¥–æ —Å–ª—É–∂–±–∏ http, –∞ —Ç–∞–∫–æ–∂ –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ `tokio::"
"time::sleep` –¥–æ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ `futures::join!`. –¶–µ –Ω–µ —Ç–∞–π–º-–∞—É—Ç "
"(—è–∫–∏–π –≤–∏–º–∞–≥–∞—î `select!`, –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ), –∞ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î "
"`join!`."

#: src/async/control-flow/select.md:3
msgid ""
"A select operation waits until any of a set of futures is ready, and "
"responds to that future's result. In JavaScript, this is similar to `Promise."
"race`. In Python, it compares to `asyncio.wait(task_set, return_when=asyncio."
"FIRST_COMPLETED)`."
msgstr ""
"–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–±–æ—Ä—É –æ—á—ñ–∫—É—î, –ø–æ–∫–∏ –±—É–¥—å-—è–∫–∏–π —ñ–∑ –Ω–∞–±–æ—Ä—É —Ñ‚Äô—é—á–µ—Ä—Å—ñ–≤ –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π, —ñ "
"–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü—å–æ–≥–æ —Ñ‚Äô—é—á–µ—Ä—Å—É. –£ JavaScript —Ü–µ —Å—Ö–æ–∂–µ –Ω–∞ `Promise."
"race`. –£ Python —Ü–µ –ø–æ—Ä—ñ–≤–Ω—é—î—Ç—å—Å—è –∑ `asyncio.wait(task_set, "
"return_when=asyncio.FIRST_COMPLETED)`."

#: src/async/control-flow/select.md:8
msgid ""
"Similar to a match statement, the body of `select!` has a number of arms, "
"each of the form `pattern = future => statement`. When the `future` is "
"ready, the `statement` is executed with the variables in `pattern` bound to "
"the `future`'s result."
msgstr ""
"–ü–æ–¥—ñ–±–Ω–æ –¥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–±—ñ–≥—É, —Ç—ñ–ª–æ `select!` –º–∞—î –∫—ñ–ª—å–∫–∞ –≥—ñ–ª–æ–∫, –∫–æ–∂–Ω–∞ –∑ —è–∫–∏—Ö "
"–º–∞—î —Ñ–æ—Ä–º—É `pattern = future => statement`. –ö–æ–ª–∏ ¬´–º–∞–π–±—É—Ç–Ω—î¬ª –≥–æ—Ç–æ–≤–µ, ¬´–∑–∞—è–≤–∞¬ª "
"–≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑—ñ –∑–º—ñ–Ω–Ω–∏–º–∏ –≤ ¬´—à–∞–±–ª–æ–Ω—ñ¬ª, –ø–æ–≤‚Äô—è–∑–∞–Ω–∏–º–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º ¬´–º–∞–π–±—É—Ç–Ω—å–æ–≥–æ¬ª."

#: src/async/control-flow/select.md:13
msgid ""
"```rust,editable,compile_fail\n"
"use tokio::sync::mpsc::{self, Receiver};\n"
"use tokio::time::{sleep, Duration};\n"
"\n"
"#[derive(Debug, PartialEq)]\n"
"enum Animal {\n"
"    Cat { name: String },\n"
"    Dog { name: String },\n"
"}\n"
"\n"
"async fn first_animal_to_finish_race(\n"
"    mut cat_rcv: Receiver<String>,\n"
"    mut dog_rcv: Receiver<String>,\n"
") -> Option<Animal> {\n"
"    tokio::select! {\n"
"        cat_name = cat_rcv.recv() => Some(Animal::Cat { name: cat_name? }),\n"
"        dog_name = dog_rcv.recv() => Some(Animal::Dog { name: dog_name? })\n"
"    }\n"
"}\n"
"\n"
"#[tokio::main]\n"
"async fn main() {\n"
"    let (cat_sender, cat_receiver) = mpsc::channel(32);\n"
"    let (dog_sender, dog_receiver) = mpsc::channel(32);\n"
"    tokio::spawn(async move {\n"
"        sleep(Duration::from_millis(500)).await;\n"
"        cat_sender\n"
"            .send(String::from(\"Felix\"))\n"
"            .await\n"
"            .expect(\"Failed to send cat.\");\n"
"    });\n"
"    tokio::spawn(async move {\n"
"        sleep(Duration::from_millis(50)).await;\n"
"        dog_sender\n"
"            .send(String::from(\"Rex\"))\n"
"            .await\n"
"            .expect(\"Failed to send dog.\");\n"
"    });\n"
"\n"
"    let winner = first_animal_to_finish_race(cat_receiver, dog_receiver)\n"
"        .await\n"
"        .expect(\"Failed to receive winner\");\n"
"\n"
"    println!(\"Winner is {winner:?}\");\n"
"}\n"
"```"
msgstr ""

#: src/async/control-flow/select.md:62
msgid ""
"In this example, we have a race between a cat and a dog. "
"`first_animal_to_finish_race` listens to both channels and will pick "
"whichever arrives first. Since the dog takes 50ms, it wins against the cat "
"that take 500ms."
msgstr ""
"–£ —Ü—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ –º–∏ –º–∞—î–º–æ –ø–µ—Ä–µ–≥–æ–Ω–∏ –º—ñ–∂ –∫–æ—Ç–æ–º —ñ —Å–æ–±–∞–∫–æ—é. "
"`first_animal_to_finish_race` —Å–ª—É—Ö–∞—î –æ–±–∏–¥–≤–∞ –∫–∞–Ω–∞–ª–∏ —Ç–∞ –≤–∏–±–µ—Ä–µ —Ç–æ–π, —è–∫–∏–π "
"–ø—Ä–∏–±—É–¥–µ –ø–µ—Ä—à–∏–º. –û—Å–∫—ñ–ª—å–∫–∏ —Å–æ–±–∞—Ü—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ 50 –º—Å, –≤–æ–Ω–∞ –≤–∏–≥—Ä–∞—î –∫—ñ—à–∫—É, —è–∫—ñ–π "
"–ø–æ—Ç—Ä—ñ–±–Ω–æ 500 –º—Å."

#: src/async/control-flow/select.md:67
msgid ""
"You can use `oneshot` channels in this example as the channels are supposed "
"to receive only one `send`."
msgstr ""
"–£ —Ü—å–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª–∏ `oneshot`, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–∞–Ω–∞–ª–∏ "
"–º–∞—é—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–µ `–ø–æ—Å–∏–ª–∞–Ω–Ω—è`."

#: src/async/control-flow/select.md:70
msgid ""
"Try adding a deadline to the race, demonstrating selecting different sorts "
"of futures."
msgstr ""
"–°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –¥–µ–¥–ª–∞–π–Ω –¥–æ –ø–µ—Ä–µ–≥–æ–Ω—ñ–≤, –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä—É–≤–∞–≤—à–∏ –≤–∏–±—ñ—Ä —Ä—ñ–∑–Ω–∏—Ö –≤–∏–¥—ñ–≤ "
"—Ñ‚Äô—é—á–µ—Ä—Å—ñ–≤."

#: src/async/control-flow/select.md:73
msgid ""
"Note that `select!` drops unmatched branches, which cancels their futures. "
"It is easiest to use when every execution of `select!` creates new futures."
msgstr ""
"–ó–∞—É–≤–∞–∂—Ç–µ, —â–æ `select!` —Å–∫–∏–¥–∞—î –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –≥—ñ–ª–∫–∏, —â–æ —Å–∫–∞—Å–æ–≤—É—î —ó—Ö–Ω—ñ —Ñ‚Äô—é—á–µ—Ä—Å–∏. "
"–ô–æ–≥–æ –Ω–∞–π–ª–µ–≥—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏, –∫–æ–ª–∏ –∫–æ–∂–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ `select!` "
"—Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—ñ —Ñ‚Äô—é—á–µ—Ä—Å–∏."

#: src/async/control-flow/select.md:76
msgid ""
"An alternative is to pass `&mut future` instead of the future itself, but "
"this can lead to issues, further discussed in the pinning slide."
msgstr ""
"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ—é —î –ø–µ—Ä–µ–¥–∞—á–∞ `&mut future` –∑–∞–º—ñ—Å—Ç—å —Å–∞–º–æ–≥–æ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ, –∞–ª–µ —Ü–µ "
"–º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –ø—Ä–æ–±–ª–µ–º, —è–∫—ñ –¥–∞–ª—ñ –æ–±–≥–æ–≤–æ—Ä—é—é—Ç—å—Å—è –Ω–∞ —Å–ª–∞–π–¥—ñ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è."

#: src/async/pitfalls.md:1
msgid "Pitfalls of async/await"
msgstr "–ü—ñ–¥–≤–æ–¥–Ω—ñ –∫–∞–º–µ–Ω—ñ async/await"

#: src/async/pitfalls.md:3
msgid ""
"Async / await provides convenient and efficient abstraction for concurrent "
"asynchronous programming. However, the async/await model in Rust also comes "
"with its share of pitfalls and footguns. We illustrate some of them in this "
"chapter:"
msgstr ""
"Async / await –∑–∞–±–µ–∑–ø–µ—á—É—î –∑—Ä—É—á–Ω—É —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—É –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—é –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ "
"–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è. –û–¥–Ω–∞–∫ –º–æ–¥–µ–ª—å async/await —É Rust —Ç–∞–∫–æ–∂ –º–∞—î –ø–µ–≤–Ω—É "
"—á–∞—Å—Ç–∫—É –ø–∞—Å—Ç–æ–∫ —ñ –ø—ñ—Å—Ç–æ–ª–µ—Ç—ñ–≤. –ú–∏ –ø—Ä–æ—ñ–ª—é—Å—Ç—Ä—É—î–º–æ –¥–µ—è–∫—ñ –∑ –Ω–∏—Ö —É —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ:"

#: src/async/pitfalls.md:5
msgid "[Blocking the Executor](pitfalls/blocking-executor.md)"
msgstr "[–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è](pitfalls/blocking-executor.md)"

#: src/async/pitfalls.md:6
msgid "[Pin](pitfalls/pin.md)"
msgstr "[Pin](pitfalls/pin.md)"

#: src/async/pitfalls.md:7
msgid "[Async Traits](pitfalls/async-traits.md)"
msgstr "[–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ](pitfalls/async-traits.md)"

#: src/async/pitfalls.md:8
msgid "[Cancellation](pitfalls/cancellation.md)"
msgstr "[–°–∫–∞—Å—É–≤–∞–Ω–Ω—è](pitfalls/cancellation.md)"

#: src/async/pitfalls/blocking-executor.md:1
msgid "Blocking the executor"
msgstr "–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è"

#: src/async/pitfalls/blocking-executor.md:3
msgid ""
"Most async runtimes only allow IO tasks to run concurrently. This means that "
"CPU blocking tasks will block the executor and prevent other tasks from "
"being executed. An easy workaround is to use async equivalent methods where "
"possible."
msgstr ""
"–ë—ñ–ª—å—à—ñ—Å—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–æ–∑–≤–æ–ª—è—é—Ç—å –ª–∏—à–µ –æ–¥–Ω–æ—á–∞—Å–Ω–∏–π –∑–∞–ø—É—Å–∫ "
"–∑–∞–≤–¥–∞–Ω—å –≤–≤–æ–¥—É/–≤–∏–≤–æ–¥—É. –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –∑–∞–≤–¥–∞–Ω–Ω—è, —â–æ –±–ª–æ–∫—É—é—Ç—å –¶–ü, –±–ª–æ–∫—É–≤–∞—Ç–∏–º—É—Ç—å "
"–≤–∏–∫–æ–Ω–∞–≤—Ü—è —Ç–∞ –∑–∞–ø–æ–±—ñ–≥–∞—Ç–∏–º—É—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—é —ñ–Ω—à–∏—Ö –∑–∞–≤–¥–∞–Ω—å. –ü—Ä–æ—Å—Ç–∏–º –æ–±—Ö—ñ–¥–Ω–∏–º —à–ª—è—Ö–æ–º "
"—î –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤, –¥–µ —Ü–µ –º–æ–∂–ª–∏–≤–æ."

#: src/async/pitfalls/blocking-executor.md:7
msgid ""
"```rust,editable,compile_fail\n"
"use futures::future::join_all;\n"
"use std::time::Instant;\n"
"\n"
"async fn sleep_ms(start: &Instant, id: u64, duration_ms: u64) {\n"
"    std::thread::sleep(std::time::Duration::from_millis(duration_ms));\n"
"    println!(\n"
"        \"future {id} slept for {duration_ms}ms, finished after {}ms\",\n"
"        start.elapsed().as_millis()\n"
"    );\n"
"}\n"
"\n"
"#[tokio::main(flavor = \"current_thread\")]\n"
"async fn main() {\n"
"    let start = Instant::now();\n"
"    let sleep_futures = (1..=10).map(|t| sleep_ms(&start, t, t * 10));\n"
"    join_all(sleep_futures).await;\n"
"}\n"
"```"
msgstr ""

#: src/async/pitfalls/blocking-executor.md:29
msgid ""
"Run the code and see that the sleeps happen consecutively rather than "
"concurrently."
msgstr ""
"–ó–∞–ø—É—Å—Ç—ñ—Ç—å –∫–æ–¥ —ñ –ø–æ–¥–∏–≤—ñ—Ç—å—Å—è, —â–æ —Å–Ω–∏ –≤—ñ–¥–±—É–≤–∞—é—Ç—å—Å—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ, –∞ –Ω–µ –æ–¥–Ω–æ—á–∞—Å–Ω–æ."

#: src/async/pitfalls/blocking-executor.md:32
msgid ""
"The `\"current_thread\"` flavor puts all tasks on a single thread. This "
"makes the effect more obvious, but the bug is still present in the multi-"
"threaded flavor."
msgstr ""
"–í–∞—Ä—ñ–∞–Ω—Ç `\"current_thread\"` –ø–æ–º—ñ—â–∞—î –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –æ–¥–∏–Ω –ø–æ—Ç—ñ–∫. –¶–µ —Ä–æ–±–∏—Ç—å "
"–µ—Ñ–µ–∫—Ç –±—ñ–ª—å—à –æ—á–µ–≤–∏–¥–Ω–∏–º, –∞–ª–µ –ø–æ–º–∏–ª–∫–∞ –≤—Å–µ —â–µ –ø—Ä–∏—Å—É—Ç–Ω—è –≤ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ—á–Ω–æ–º—É –∞—Ä–æ–º–∞—Ç—ñ."

#: src/async/pitfalls/blocking-executor.md:36
msgid ""
"Switch the `std::thread::sleep` to `tokio::time::sleep` and await its result."
msgstr ""
"–ü–µ—Ä–µ–º–∫–Ω—ñ—Ç—å `std::thread::sleep` –Ω–∞ `tokio::time::sleep` —ñ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è "
"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—É."

#: src/async/pitfalls/blocking-executor.md:38
msgid ""
"Another fix would be to `tokio::task::spawn_blocking` which spawns an actual "
"thread and transforms its handle into a future without blocking the executor."
msgstr ""
"–Ü–Ω—à–∏–º –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º –±—É–ª–æ –± `tokio::task::spawn_blocking`, —è–∫–∏–π –ø–æ—Ä–æ–¥–∂—É—î "
"—Ñ–∞–∫—Ç–∏—á–Ω–∏–π –ø–æ—Ç—ñ–∫ —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —É –º–∞–π–±—É—Ç–Ω—î, –Ω–µ –±–ª–æ–∫—É—é—á–∏ "
"–≤–∏–∫–æ–Ω–∞–≤—Ü—è."

#: src/async/pitfalls/blocking-executor.md:41
msgid ""
"You should not think of tasks as OS threads. They do not map 1 to 1 and most "
"executors will allow many tasks to run on a single OS thread. This is "
"particularly problematic when interacting with other libraries via FFI, "
"where that library might depend on thread-local storage or map to specific "
"OS threads (e.g., CUDA). Prefer `tokio::task::spawn_blocking` in such "
"situations."
msgstr ""
"–í–∏ –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –¥—É–º–∞—Ç–∏ –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –ø—Ä–æ –ø–æ—Ç–æ–∫–∏ –û–°. –í–æ–Ω–∏ –Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å 1 "
"–¥–æ 1, —ñ –±—ñ–ª—å—à—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ –¥–æ–∑–≤–æ–ª—è—Ç—å –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –±–∞–≥–∞—Ç–æ –∑–∞–≤–¥–∞–Ω—å –≤ –æ–¥–Ω–æ–º—É "
"–ø–æ—Ç–æ—Ü—ñ –û–°. –¶–µ –æ—Å–æ–±–ª–∏–≤–æ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥ —á–∞—Å –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ —ñ–Ω—à–∏–º–∏ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞–º–∏ "
"—á–µ—Ä–µ–∑ FFI, –¥–µ —Ü—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –º–æ–∂–µ –∑–∞–ª–µ–∂–∞—Ç–∏ –≤—ñ–¥ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞ –ø–æ—Ç–æ–∫—É –∞–±–æ "
"–∑—ñ—Å—Ç–∞–≤–ª—è—Ç–∏—Å—è –∑ –ø–µ–≤–Ω–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ –û–° (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, CUDA). –£ —Ç–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö "
"–≤—ñ–¥–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–∞–≥—É `tokio::task::spawn_blocking`."

#: src/async/pitfalls/blocking-executor.md:47
msgid ""
"Use sync mutexes with care. Holding a mutex over an `.await` may cause "
"another task to block, and that task may be running on the same thread."
msgstr ""
"–û–±–µ—Ä–µ–∂–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º‚Äô—é—Ç–µ–∫—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó. –£—Ç—Ä–∏–º—É–≤–∞–Ω–Ω—è –º'—é—Ç–µ–∫—Å—É –Ω–∞–¥ `."
"await` –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—à–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –º–æ–∂–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—è –≤ "
"—Ç–æ–º—É —Å–∞–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ."

#: src/async/pitfalls/pin.md:3
msgid ""
"When you await a future, all local variables (that would ordinarily be "
"stored on a stack frame) are instead stored in the Future for the current "
"async block. If your future has pointers to data on the stack, those "
"pointers might get invalidated. This is unsafe."
msgstr ""
"–ö–æ–ª–∏ –≤–∏ –æ—á—ñ–∫—É—î—Ç–µ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ, —É—Å—ñ –ª–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ (—è–∫—ñ –∑–∞–∑–≤–∏—á–∞–π –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è "
"—É —Ñ—Ä–µ–π–º—ñ —Å—Ç–µ–∫—É) –Ω–∞—Ç–æ–º—ñ—Å—Ç—å –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ "
"–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –±–ª–æ–∫—É. –Ø–∫—â–æ –≤–∞—à–µ –º–∞–π–±—É—Ç–Ω—î –º–∞—î –≤–∫–∞–∑—ñ–≤–Ω–∏–∫–∏ –Ω–∞ –¥–∞–Ω—ñ –≤ —Å—Ç–µ–∫—É, —Ü—ñ "
"–≤–∫–∞–∑—ñ–≤–Ω–∏–∫–∏ –º–æ–∂—É—Ç—å —Å—Ç–∞—Ç–∏ –Ω–µ–¥—ñ–π—Å–Ω–∏–º–∏. –¶–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ."

#: src/async/pitfalls/pin.md:8
msgid ""
"Therefore, you must guarantee that the addresses your future points to don't "
"change. That is why we need to `pin` futures. Using the same future "
"repeatedly in a `select!` often leads to issues with pinned values."
msgstr ""
"–¢–æ–º—É –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏, —â–æ –∞–¥—Ä–µ—Å–∏, –Ω–∞ —è–∫—ñ –≤–∏ –≤–∫–∞–∑—É—î—Ç–µ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É, –Ω–µ "
"–∑–º—ñ–Ω—è—Ç—å—Å—è. –¢–æ–º—É –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ ¬´–∑–∞–∫—Ä—ñ–ø–∏—Ç–∏¬ª —Ñ'—é—á–µ—Ä—Å–∏. –ü–æ–≤—Ç–æ—Ä–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è "
"–æ–¥–Ω–æ–≥–æ —ñ —Ç–æ–≥–æ –∂ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –≤ `select!` —á–∞—Å—Ç–æ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç—å –¥–æ –ø—Ä–æ–±–ª–µ–º —ñ–∑ "
"–∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏."

#: src/async/pitfalls/pin.md:12
msgid ""
"```rust,editable,compile_fail\n"
"use tokio::sync::{mpsc, oneshot};\n"
"use tokio::task::spawn;\n"
"use tokio::time::{sleep, Duration};\n"
"\n"
"// A work item. In this case, just sleep for the given time and respond\n"
"// with a message on the `respond_on` channel.\n"
"#[derive(Debug)]\n"
"struct Work {\n"
"    input: u32,\n"
"    respond_on: oneshot::Sender<u32>,\n"
"}\n"
"\n"
"// A worker which listens for work on a queue and performs it.\n"
"async fn worker(mut work_queue: mpsc::Receiver<Work>) {\n"
"    let mut iterations = 0;\n"
"    loop {\n"
"        tokio::select! {\n"
"            Some(work) = work_queue.recv() => {\n"
"                sleep(Duration::from_millis(10)).await; // Pretend to work.\n"
"                work.respond_on\n"
"                    .send(work.input * 1000)\n"
"                    .expect(\"failed to send response\");\n"
"                iterations += 1;\n"
"            }\n"
"            // TODO: report number of iterations every 100ms\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// A requester which requests work and waits for it to complete.\n"
"async fn do_work(work_queue: &mpsc::Sender<Work>, input: u32) -> u32 {\n"
"    let (tx, rx) = oneshot::channel();\n"
"    work_queue\n"
"        .send(Work {\n"
"            input,\n"
"            respond_on: tx,\n"
"        })\n"
"        .await\n"
"        .expect(\"failed to send on work queue\");\n"
"    rx.await.expect(\"failed waiting for response\")\n"
"}\n"
"\n"
"#[tokio::main]\n"
"async fn main() {\n"
"    let (tx, rx) = mpsc::channel(10);\n"
"    spawn(worker(rx));\n"
"    for i in 0..100 {\n"
"        let resp = do_work(&tx, i).await;\n"
"        println!(\"work result for iteration {i}: {resp}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/async/pitfalls/pin.md:68
msgid ""
"You may recognize this as an example of the actor pattern. Actors typically "
"call `select!` in a loop."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ü–µ —è–∫ –ø—Ä–∏–∫–ª–∞–¥ —à–∞–±–ª–æ–Ω—É –∞–∫—Ç–æ—Ä–∞. –ê–∫—Ç–æ—Ä–∏ –∑–∞–∑–≤–∏—á–∞–π "
"–≤–∏–∫–ª–∏–∫–∞—é—Ç—å `select!` —É —Ü–∏–∫–ª—ñ."

#: src/async/pitfalls/pin.md:71
msgid ""
"This serves as a summation of a few of the previous lessons, so take your "
"time with it."
msgstr "–¶–µ —î –ø—ñ–¥—Å—É–º–∫–æ–º –∫—ñ–ª—å–∫–æ—Ö –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —É—Ä–æ–∫—ñ–≤, —Ç–æ–∂ –Ω–µ –ø–æ—Å–ø—ñ—à–∞–π—Ç–µ –∑ —Ü–∏–º."

#: src/async/pitfalls/pin.md:74
msgid ""
"Naively add a `_ = sleep(Duration::from_millis(100)) => { println!(..) }` to "
"the `select!`. This will never execute. Why?"
msgstr ""
"–ù–∞—ó–≤–Ω–æ –¥–æ–¥–∞–π—Ç–µ `_ = sleep(Duration::from_millis(100)) => { println!(..) }` "
"–¥–æ `select!`. –¶–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–æ. —á–æ–º—É"

#: src/async/pitfalls/pin.md:77
msgid ""
"Instead, add a `timeout_fut` containing that future outside of the `loop`:"
msgstr ""
"–ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –¥–æ–¥–∞–π—Ç–µ `timeout_fut`, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Ü–µ –º–∞–π–±—É—Ç–Ω—î –∑–∞ –º–µ–∂–∞–º–∏ `loop`:"

#: src/async/pitfalls/pin.md:79
msgid ""
"```rust,compile_fail\n"
"let mut timeout_fut = sleep(Duration::from_millis(100));\n"
"loop {\n"
"    select! {\n"
"        ..,\n"
"        _ = timeout_fut => { println!(..); },\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/async/pitfalls/pin.md:88
msgid ""
"This still doesn't work. Follow the compiler errors, adding `&mut` to the "
"`timeout_fut` in the `select!` to work around the move, then using `Box::"
"pin`:"
msgstr ""
"–¶–µ –≤—Å–µ —â–µ –Ω–µ –ø—Ä–∞—Ü—é—î. –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—è –ø–æ–º–∏–ª–æ–∫ –∫–æ–º–ø—ñ–ª—è—Ç–æ—Ä–∞, –¥–æ–¥–∞–≤—à–∏ `&mut` –¥–æ "
"`timeout_fut` —É `select!`, —â–æ–± –æ–±—ñ–π—Ç–∏ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è, –∞ –ø–æ—Ç—ñ–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ "
"`Box::pin`:"

#: src/async/pitfalls/pin.md:92
msgid ""
"```rust,compile_fail\n"
"let mut timeout_fut = Box::pin(sleep(Duration::from_millis(100)));\n"
"loop {\n"
"    select! {\n"
"        ..,\n"
"        _ = &mut timeout_fut => { println!(..); },\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/async/pitfalls/pin.md:102
msgid ""
"This compiles, but once the timeout expires it is `Poll::Ready` on every "
"iteration (a fused future would help with this). Update to reset "
"`timeout_fut` every time it expires."
msgstr ""
"–¶–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è, –∞–ª–µ –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —á–∞—Å—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó "
"–≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è `Poll::Ready` (—É —Ü—å–æ–º—É –¥–æ–ø–æ–º–æ–∂–µ –æ–±‚Äô—î–¥–Ω–∞–Ω–µ –º–∞–π–±—É—Ç–Ω—î). –û–Ω–æ–≤—ñ—Ç—å, "
"—â–æ–± —Å–∫–∏–¥–∞—Ç–∏ `timeout_fut` –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É, –∫–æ–ª–∏ –≤—ñ–Ω –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è."

#: src/async/pitfalls/pin.md:106
msgid ""
"Box allocates on the heap. In some cases, `std::pin::pin!` (only recently "
"stabilized, with older code often using `tokio::pin!`) is also an option, "
"but that is difficult to use for a future that is reassigned."
msgstr ""
"–ö–æ—Ä–æ–±–∫–∞ –≤–∏–¥—ñ–ª—è—î—Ç—å—Å—è –Ω–∞ –∫—É–ø—É. –£ –¥–µ—è–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö `std::pin::pin!` (–ª–∏—à–µ "
"–Ω–µ—â–æ–¥–∞–≤–Ω–æ —Å—Ç–∞–±—ñ–ª—ñ–∑–æ–≤–∞–Ω–∏–π, —É —Å—Ç–∞—Ä–æ–º—É –∫–æ–¥—ñ —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è `tokio::pin!"
"`) —Ç–∞–∫–æ–∂ —î –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º, –∞–ª–µ —Ü–µ –≤–∞–∂–∫–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ, —è–∫–µ –±—É–¥–µ "
"–ø–µ—Ä–µ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ."

#: src/async/pitfalls/pin.md:110
msgid ""
"Another alternative is to not use `pin` at all but spawn another task that "
"will send to a `oneshot` channel every 100ms."
msgstr ""
"–Ü–Ω—à–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ ‚Äî –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `pin`, –∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —ñ–Ω—à–µ "
"–∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º–µ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª `oneshot` –∫–æ–∂–Ω—ñ 100 –º—Å."

#: src/async/pitfalls/async-traits.md:3
msgid ""
"Async methods in traits are not yet supported in the stable channel ([An "
"experimental feature exists in nightly and should be stabilized in the mid "
"term.](https://blog.rust-lang.org/inside-rust/2022/11/17/async-fn-in-trait-"
"nightly.html))"
msgstr ""
"–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –º–µ—Ç–æ–¥–∏ –≤ –æ–∑–Ω–∞–∫–∞—Ö —â–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –≤ —Å—Ç–∞–±—ñ–ª—å–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ "
"([–ï–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ—Å–Ω—É—î –≤ nightly —ñ –º–∞—î –±—É—Ç–∏ —Å—Ç–∞–±—ñ–ª—ñ–∑–æ–≤–∞–Ω–∞ –≤ "
"—Å–µ—Ä–µ–¥–Ω—å–æ–º—É.](https://blog.rust-lang.org/inside-rust/2022/11) /17/async-fn-in-"
"trait-nightly.html))"

#: src/async/pitfalls/async-traits.md:5
msgid ""
"The crate [async_trait](https://docs.rs/async-trait/latest/async_trait/) "
"provides a workaround through a macro:"
msgstr ""
"–Ø—â–∏–∫ [async_trait](https://docs.rs/async-trait/latest/async_trait/) –Ω–∞–¥–∞—î "
"–æ–±—Ö—ñ–¥–Ω–∏–π —à–ª—è—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–∞–∫—Ä–æ—Å—É:"

#: src/async/pitfalls/async-traits.md:7
msgid ""
"```rust,editable,compile_fail\n"
"use async_trait::async_trait;\n"
"use std::time::Instant;\n"
"use tokio::time::{sleep, Duration};\n"
"\n"
"#[async_trait]\n"
"trait Sleeper {\n"
"    async fn sleep(&self);\n"
"}\n"
"\n"
"struct FixedSleeper {\n"
"    sleep_ms: u64,\n"
"}\n"
"\n"
"#[async_trait]\n"
"impl Sleeper for FixedSleeper {\n"
"    async fn sleep(&self) {\n"
"        sleep(Duration::from_millis(self.sleep_ms)).await;\n"
"    }\n"
"}\n"
"\n"
"async fn run_all_sleepers_multiple_times(sleepers: Vec<Box<dyn Sleeper>>, "
"n_times: usize) {\n"
"    for _ in 0..n_times {\n"
"        println!(\"running all sleepers..\");\n"
"        for sleeper in &sleepers {\n"
"            let start = Instant::now();\n"
"            sleeper.sleep().await;\n"
"            println!(\"slept for {}ms\", start.elapsed().as_millis());\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"#[tokio::main]\n"
"async fn main() {\n"
"    let sleepers: Vec<Box<dyn Sleeper>> = vec![\n"
"        Box::new(FixedSleeper { sleep_ms: 50 }),\n"
"        Box::new(FixedSleeper { sleep_ms: 100 }),\n"
"    ];\n"
"    run_all_sleepers_multiple_times(sleepers, 5).await;\n"
"}\n"
"```"
msgstr ""

#: src/async/pitfalls/async-traits.md:51
msgid ""
"`async_trait` is easy to use, but note that it's using heap allocations to "
"achieve this. This heap allocation has performance overhead."
msgstr ""
"`async_trait` –ø—Ä–æ—Å—Ç–∏–π —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ, –∞–ª–µ –∑–∞—É–≤–∞–∂—Ç–µ, —â–æ –¥–ª—è —Ü—å–æ–≥–æ –≤—ñ–Ω "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–æ–∑–ø–æ–¥—ñ–ª –ø–∞–º‚Äô—è—Ç—ñ. –¶–µ–π —Ä–æ–∑–ø–æ–¥—ñ–ª –∫—É–ø–∏ –º–∞—î –Ω–∞–∫–ª–∞–¥–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ "
"–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å."

#: src/async/pitfalls/async-traits.md:54
msgid ""
"The challenges in language support for `async trait` are deep Rust and "
"probably not worth describing in-depth. Niko Matsakis did a good job of "
"explaining them in [this post](https://smallcultfollowing.com/babysteps/"
"blog/2019/10/26/async-fn-in-traits-are-hard/) if you are interested in "
"digging deeper."
msgstr ""
"–ü—Ä–æ–±–ª–µ–º–∏ –∑ –º–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–ª—è `async trait` –≥–ª–∏–±–æ–∫—ñ Rust —ñ, –º–∞–±—É—Ç—å, –Ω–µ "
"–≤–∞—Ä—Ç—ñ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å—É. –ù—ñ–∫–æ –ú–∞—Ü–∞–∫—ñ—Å –¥–æ–±—Ä–µ –ø–æ—è—Å–Ω–∏–≤ —ó—Ö —É [—Ü—ñ–π –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó]"
"(https://smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-"
"are-hard/), —è–∫—â–æ –≤–∞–º —Ü—ñ–∫–∞–≤–æ –∫–æ–ø–∞—Ç–∏ –≥–ª–∏–±—à–µ."

#: src/async/pitfalls/async-traits.md:60
msgid ""
"Try creating a new sleeper struct that will sleep for a random amount of "
"time and adding it to the Vec."
msgstr ""
"–°–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–ø–ª—è—á—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —è–∫–∞ –±—É–¥–µ —Å–ø–∞—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º "
"–≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —á–∞—Å—É, —ñ –¥–æ–¥–∞–π—Ç–µ —ó—ó –¥–æ Vec."

#: src/async/pitfalls/cancellation.md:3
msgid ""
"Dropping a future implies it can never be polled again. This is called "
"_cancellation_ and it can occur at any `await` point. Care is needed to "
"ensure the system works correctly even when futures are cancelled. For "
"example, it shouldn't deadlock or lose data."
msgstr ""
"–í—ñ–¥–º–æ–≤–∞ –≤—ñ–¥ –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –æ–∑–Ω–∞—á–∞—î, —â–æ –π–æ–≥–æ –±—ñ–ª—å—à–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ "
"–æ–ø–∏—Ç—É–≤–∞—Ç–∏. –¶–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è _—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è–º_ —ñ –º–æ–∂–µ —Å—Ç–∞—Ç–∏—Å—è –≤ –±—É–¥—å-—è–∫–∏–π –º–æ–º–µ–Ω—Ç "
"–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è. –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –æ–±–µ—Ä–µ–∂–Ω–∏–º, —â–æ–± –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î "
"–Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ñ‚Äô—é—á–µ—Ä—Å–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–Ω –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω "
"–±–ª–æ–∫—É–≤–∞—Ç–∏—Å—è –∞–±–æ –≤—Ç—Ä–∞—á–∞—Ç–∏ –¥–∞–Ω—ñ."

#: src/async/pitfalls/cancellation.md:8
msgid ""
"```rust,editable,compile_fail\n"
"use std::io::{self, ErrorKind};\n"
"use std::time::Duration;\n"
"use tokio::io::{AsyncReadExt, AsyncWriteExt, DuplexStream};\n"
"\n"
"struct LinesReader {\n"
"    stream: DuplexStream,\n"
"}\n"
"\n"
"impl LinesReader {\n"
"    fn new(stream: DuplexStream) -> Self {\n"
"        Self { stream }\n"
"    }\n"
"\n"
"    async fn next(&mut self) -> io::Result<Option<String>> {\n"
"        let mut bytes = Vec::new();\n"
"        let mut buf = [0];\n"
"        while self.stream.read(&mut buf[..]).await? != 0 {\n"
"            bytes.push(buf[0]);\n"
"            if buf[0] == b'\\n' {\n"
"                break;\n"
"            }\n"
"        }\n"
"        if bytes.is_empty() {\n"
"            return Ok(None)\n"
"        }\n"
"        let s = String::from_utf8(bytes)\n"
"            .map_err(|_| io::Error::new(ErrorKind::InvalidData, \"not "
"UTF-8\"))?;\n"
"        Ok(Some(s))\n"
"    }\n"
"}\n"
"\n"
"async fn slow_copy(source: String, mut dest: DuplexStream) -> std::io::"
"Result<()> {\n"
"    for b in source.bytes() {\n"
"        dest.write_u8(b).await?;\n"
"        tokio::time::sleep(Duration::from_millis(10)).await\n"
"    }\n"
"    Ok(())\n"
"}\n"
"\n"
"#[tokio::main]\n"
"async fn main() -> std::io::Result<()> {\n"
"    let (client, server) = tokio::io::duplex(5);\n"
"    let handle = tokio::spawn(slow_copy(\"hi\\nthere\\n\".to_owned(), "
"client));\n"
"\n"
"    let mut lines = LinesReader::new(server);\n"
"    let mut interval = tokio::time::interval(Duration::from_millis(60));\n"
"    loop {\n"
"        tokio::select! {\n"
"            _ = interval.tick() => println!(\"tick!\"),\n"
"            line = lines.next() => if let Some(l) = line? {\n"
"                print!(\"{}\", l)\n"
"            } else {\n"
"                break\n"
"            },\n"
"        }\n"
"    }\n"
"    handle.await.unwrap()?;\n"
"    Ok(())\n"
"}\n"
"```"
msgstr ""

#: src/async/pitfalls/cancellation.md:72
msgid ""
"The compiler doesn't help with cancellation-safety. You need to read API "
"documentation and consider what state your `async fn` holds."
msgstr ""
"–ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä –Ω–µ –¥–æ–ø–æ–º–∞–≥–∞—î –∑ –±–µ–∑–ø–µ–∫–æ—é —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è. –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ "
"–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é API —Ç–∞ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏, —è–∫–∏–π —Å—Ç–∞–Ω –º–∞—î –≤–∞—à `async fn`."

#: src/async/pitfalls/cancellation.md:75
msgid ""
"Unlike `panic` and `?`, cancellation is part of normal control flow (vs "
"error-handling)."
msgstr ""
"–ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ `panic` —ñ `?`, —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —î —á–∞—Å—Ç–∏–Ω–æ—é –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É "
"–∫–µ—Ä—É–≤–∞–Ω–Ω—è (–Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫)."

#: src/async/pitfalls/cancellation.md:78
msgid "The example loses parts of the string."
msgstr "–ü—Ä–∏–∫–ª–∞–¥ –≤—Ç—Ä–∞—á–∞—î —á–∞—Å—Ç–∏–Ω–∏ —Ä—è–¥–∫–∞."

#: src/async/pitfalls/cancellation.md:80
msgid ""
"Whenever the `tick()` branch finishes first, `next()` and its `buf` are "
"dropped."
msgstr ""
"–©–æ—Ä–∞–∑—É, –∫–æ–ª–∏ –≥—ñ–ª–∫–∞ `tick()` –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –ø–µ—Ä—à–æ—é, `next()` —ñ –π–æ–≥–æ `buf` "
"–≤—ñ–¥–∫–∏–¥–∞—é—Ç—å—Å—è."

#: src/async/pitfalls/cancellation.md:82
msgid ""
"`LinesReader` can be made cancellation-safe by making `buf` part of the "
"struct:"
msgstr ""
"`LinesReader` –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –±–µ–∑–ø–µ—á–Ω–∏–º –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, –∑—Ä–æ–±–∏–≤—à–∏ `buf` "
"—á–∞—Å—Ç–∏–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:"

#: src/async/pitfalls/cancellation.md:83
msgid ""
"```rust,compile_fail\n"
"struct LinesReader {\n"
"    stream: DuplexStream,\n"
"    bytes: Vec<u8>,\n"
"    buf: [u8; 1],\n"
"}\n"
"\n"
"impl LinesReader {\n"
"    fn new(stream: DuplexStream) -> Self {\n"
"        Self { stream, bytes: Vec::new(), buf: [0] }\n"
"    }\n"
"    async fn next(&mut self) -> io::Result<Option<String>> {\n"
"        // prefix buf and bytes with self.\n"
"        // ...\n"
"        let raw = std::mem::take(&mut self.bytes);\n"
"        let s = String::from_utf8(raw)\n"
"        // ...\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/async/pitfalls/cancellation.md:104
msgid ""
"[`Interval::tick`](https://docs.rs/tokio/latest/tokio/time/struct.Interval."
"html#method.tick) is cancellation-safe because it keeps track of whether a "
"tick has been 'delivered'."
msgstr ""
"[`Interval::tick`](https://docs.rs/tokio/latest/tokio/time/struct.Interval."
"html#method.tick) —î –±–µ–∑–ø–µ—á–Ω–∏–º –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –≤—ñ–¥—Å—Ç–µ–∂—É—î, —á–∏ "
"–±—É–ª–∞ –ø–æ–∑–Ω–∞—á–∫–∞ ' –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'."

#: src/async/pitfalls/cancellation.md:107
msgid ""
"[`AsyncReadExt::read`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncReadExt.html#method.read) is cancellation-safe because it either "
"returns or doesn't read data."
msgstr ""
"[`AsyncReadExt::read`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncReadExt.html#method.read) —î –±–µ–∑–ø–µ—á–Ω–∏–º –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω "
"–ø–æ–≤–µ—Ä—Ç–∞—î –∞–±–æ –Ω–µ —á–∏—Ç–∞—î –¥–∞–Ω—ñ."

#: src/async/pitfalls/cancellation.md:110
msgid ""
"[`AsyncBufReadExt::read_line`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncBufReadExt.html#method.read_line) is similar to the example and _isn't_ "
"cancellation-safe. See its documentation for details and alternatives."
msgstr ""
"[`AsyncBufReadExt::read_line`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncBufReadExt.html#method.read_line) —Å—Ö–æ–∂–∏–π –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥ —ñ _–Ω–µ_ –±–µ–∑–ø–µ—á–Ω–∏–π "
"–¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è. –ü–æ–¥—Ä–æ–±–∏—Ü—ñ —Ç–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∏ –¥–∏–≤. —É –π–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó."

#: src/exercises/concurrency/afternoon.md:3
msgid ""
"To practice your Async Rust skills, we have again two exercises for you:"
msgstr ""
"–©–æ–± –≤—ñ–¥–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏ Async Rust, –º–∏ –∑–Ω–æ–≤—É –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∞–º –¥–≤—ñ –≤–ø—Ä–∞–≤–∏:"

#: src/exercises/concurrency/afternoon.md:5
msgid ""
"Dining philosophers: we already saw this problem in the morning. This time "
"you are going to implement it with Async Rust."
msgstr ""
"–û–±—ñ–¥–Ω—ñ —Ñ—ñ–ª–æ—Å–æ—Ñ–∏: –º–∏ –≤–∂–µ –±–∞—á–∏–ª–∏ —Ü—é –ø—Ä–æ–±–ª–µ–º—É –≤—Ä–∞–Ω—Ü—ñ. –¶—å–æ–≥–æ —Ä–∞–∑—É –≤–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è "
"—Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ü–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Async Rust."

#: src/exercises/concurrency/afternoon.md:8
msgid ""
"A Broadcast Chat Application: this is a larger project that allows you "
"experiment with more advanced Async Rust features."
msgstr ""
"–ü—Ä–æ–≥—Ä–∞–º–∞ —à–∏—Ä–æ–∫–æ–º–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É: —Ü–µ –±—ñ–ª—å—à–∏–π –ø—Ä–æ–µ–∫—Ç, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î "
"–µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ—à–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ Async Rust."

#: src/exercises/concurrency/dining-philosophers-async.md:1
#: src/exercises/concurrency/solutions-afternoon.md:3
msgid "Dining Philosophers - Async"
msgstr "Dining Philosophers - Async"

#: src/exercises/concurrency/dining-philosophers-async.md:3
msgid ""
"See [dining philosophers](dining-philosophers.md) for a description of the "
"problem."
msgstr ""
"–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ [dining philosophers](dining-philosophers.md) –¥–ª—è –æ–ø–∏—Å—É –ø—Ä–æ–±–ª–µ–º–∏."

#: src/exercises/concurrency/dining-philosophers-async.md:6
msgid ""
"As before, you will need a local [Cargo installation](../../cargo/running-"
"locally.md) for this exercise. Copy the code below to a file called `src/"
"main.rs`, fill out the blanks, and test that `cargo run` does not deadlock:"
msgstr ""
"–Ø–∫ —ñ —Ä–∞–Ω—ñ—à–µ, –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –≤–ø—Ä–∞–≤–∏ –≤–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–∞ "
"[–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Cargo](../../cargo/running-locally.md). –°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–∞–≤–µ–¥–µ–Ω–∏–π "
"–Ω–∏–∂—á–µ –∫–æ–¥ —É —Ñ–∞–π–ª –ø—ñ–¥ –Ω–∞–∑–≤–æ—é `src/main.rs`, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è —Ç–∞ "
"–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ `cargo run` –Ω–µ –±–ª–æ–∫—É—î:"

#: src/exercises/concurrency/dining-philosophers-async.md:13
msgid ""
"```rust,compile_fail\n"
"use std::sync::Arc;\n"
"use tokio::time;\n"
"use tokio::sync::mpsc::{self, Sender};\n"
"use tokio::sync::Mutex;\n"
"\n"
"struct Fork;\n"
"\n"
"struct Philosopher {\n"
"    name: String,\n"
"    // left_fork: ...\n"
"    // right_fork: ...\n"
"    // thoughts: ...\n"
"}\n"
"\n"
"impl Philosopher {\n"
"    async fn think(&self) {\n"
"        self.thoughts\n"
"            .send(format!(\"Eureka! {} has a new idea!\", &self.name))."
"await\n"
"            .unwrap();\n"
"    }\n"
"\n"
"    async fn eat(&self) {\n"
"        // Pick up forks...\n"
"        println!(\"{} is eating...\", &self.name);\n"
"        time::sleep(time::Duration::from_millis(5)).await;\n"
"    }\n"
"}\n"
"\n"
"static PHILOSOPHERS: &[&str] =\n"
"    &[\"Socrates\", \"Plato\", \"Aristotle\", \"Thales\", \"Pythagoras\"];\n"
"\n"
"#[tokio::main]\n"
"async fn main() {\n"
"    // Create forks\n"
"\n"
"    // Create philosophers\n"
"\n"
"    // Make them think and eat\n"
"\n"
"    // Output their thoughts\n"
"}\n"
"```"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:57
msgid ""
"Since this time you are using Async Rust, you'll need a `tokio` dependency. "
"You can use the following `Cargo.toml`:"
msgstr ""
"–û—Å–∫—ñ–ª—å–∫–∏ —Ü—å–æ–≥–æ —Ä–∞–∑—É –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ Async Rust, –≤–∞–º –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å "
"`tokio`. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π `Cargo.toml`:"

#: src/exercises/concurrency/dining-philosophers-async.md:62
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers-async-dine\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"\n"
"[dependencies]\n"
"tokio = {version = \"1.26.0\", features = [\"sync\", \"time\", \"macros\", "
"\"rt-multi-thread\"]}\n"
"```"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:72
msgid ""
"Also note that this time you have to use the `Mutex` and the `mpsc` module "
"from the `tokio` crate."
msgstr ""
"–¢–∞–∫–æ–∂ –∑–∞—É–≤–∞–∂—Ç–µ, —â–æ —Ü—å–æ–≥–æ —Ä–∞–∑—É –≤–∞–º –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `Mutex` —ñ "
"–º–æ–¥—É–ª—å `mpsc` –∑ —è—â–∏–∫–∞ `tokio`."

#: src/exercises/concurrency/dining-philosophers-async.md:77
msgid "Can you make your implementation single-threaded? "
msgstr "–ß–∏ –º–æ–∂–µ—Ç–µ –≤–∏ –∑—Ä–æ–±–∏—Ç–∏ —Å–≤–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–æ—é?"

#: src/exercises/concurrency/chat-app.md:3
msgid ""
"In this exercise, we want to use our new knowledge to implement a broadcast "
"chat application. We have a chat server that the clients connect to and "
"publish their messages. The client reads user messages from the standard "
"input, and sends them to the server. The chat server broadcasts each message "
"that it receives to all the clients."
msgstr ""
"–£ —Ü—ñ–π –≤–ø—Ä–∞–≤—ñ –º–∏ —Ö–æ—á–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–∞—à—ñ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è –¥–ª—è –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è "
"–ø—Ä–æ–≥—Ä–∞–º–∏ —à–∏—Ä–æ–∫–æ–º–æ–≤–Ω–æ–≥–æ —á–∞—Ç—É. –£ –Ω–∞—Å —î —á–∞—Ç-—Å–µ—Ä–≤–µ—Ä, –¥–æ —è–∫–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–∞—é—Ç—å—Å—è "
"–∫–ª—ñ—î–Ω—Ç–∏ —Ç–∞ –ø—É–±–ª—ñ–∫—É—é—Ç—å —Å–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ö–ª—ñ—î–Ω—Ç —á–∏—Ç–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "
"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–≤–æ–¥—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —ó—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –°–µ—Ä–≤–µ—Ä —á–∞—Ç—É "
"—Ç—Ä–∞–Ω—Å–ª—é—î –∫–æ–∂–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º."

#: src/exercises/concurrency/chat-app.md:9
msgid ""
"For this, we use [a broadcast channel](https://docs.rs/tokio/latest/tokio/"
"sync/broadcast/fn.channel.html) on the server, and [`tokio_websockets`]"
"(https://docs.rs/tokio-websockets/0.4.0/tokio_websockets/) for the "
"communication between the client and the server."
msgstr ""
"–î–ª—è —Ü—å–æ–≥–æ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ [—Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ–π–Ω–∏–π –∫–∞–Ω–∞–ª](https://docs.rs/tokio/"
"latest/tokio/sync/broadcast/fn.channel.html) –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ —Ç–∞ "
"[`tokio_websockets`](https:// docs.rs/tokio-websockets/0.4.0/"
"tokio_websockets/) –¥–ª—è –∑–≤‚Äô—è–∑–∫—É –º—ñ–∂ –∫–ª—ñ—î–Ω—Ç–æ–º —ñ —Å–µ—Ä–≤–µ—Ä–æ–º."

#: src/exercises/concurrency/chat-app.md:13
msgid "Create a new Cargo project and add the following dependencies:"
msgstr "–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç Cargo —Ç–∞ –¥–æ–¥–∞–π—Ç–µ —Ç–∞–∫—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:"

#: src/exercises/concurrency/chat-app.md:15
msgid "`Cargo.toml`:"
msgstr "`Cargo.toml`:"

#: src/exercises/concurrency/chat-app.md:19
msgid ""
"```toml\n"
"[package]\n"
"name = \"chat-async\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"\n"
"[dependencies]\n"
"futures-util = { version = \"0.3.28\", features = [\"sink\"] }\n"
"http = \"0.2.9\"\n"
"tokio = { version = \"1.28.1\", features = [\"full\"] }\n"
"tokio-websockets = { version = \"0.4.0\", features = [\"client\", "
"\"fastrand\", \"server\", \"sha1_smol\"] }\n"
"```"
msgstr ""

#: src/exercises/concurrency/chat-app.md:32
msgid "The required APIs"
msgstr "–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ API"

#: src/exercises/concurrency/chat-app.md:33
msgid ""
"You are going to need the following functions from `tokio` and "
"[`tokio_websockets`](https://docs.rs/tokio-websockets/0.4.0/"
"tokio_websockets/). Spend a few minutes to familiarize yourself with the "
"API. "
msgstr ""
"–í–∞–º –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è —Ç–∞–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ `tokio` —ñ [`tokio_websockets`](https://docs."
"rs/tokio-websockets/0.4.0/tokio_websockets/). –í–∏—Ç—Ä–∞—Ç—å—Ç–µ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –Ω–∞ "
"–æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è –∑ API."

#: src/exercises/concurrency/chat-app.md:37
msgid ""
"[StreamExt::next()](https://docs.rs/futures-util/0.3.28/futures_util/stream/"
"trait.StreamExt.html#method.next) implemented by `WebsocketStream`: for "
"asynchronously reading messages from a Websocket Stream."
msgstr ""
"[StreamExt::next()](https://docs.rs/futures-util/0.3.28/futures_util/stream/"
"trait.StreamExt.html#method.next), —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π `WebsocketStream`: –¥–ª—è "
"–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —ñ–∑ –ø–æ—Ç—ñ–∫ Websocket."

#: src/exercises/concurrency/chat-app.md:39
msgid ""
"[SinkExt::send()](https://docs.rs/futures-util/0.3.28/futures_util/sink/"
"trait.SinkExt.html#method.send) implemented by `WebsocketStream`: for "
"asynchronously sending messages on a Websocket Stream."
msgstr ""
"[SinkExt::send()](https://docs.rs/futures-util/0.3.28/futures_util/sink/"
"trait.SinkExt.html#method.send), —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π `WebsocketStream`: –¥–ª—è "
"–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ –ø–æ—Ç—ñ–∫ Websocket."

#: src/exercises/concurrency/chat-app.md:41
msgid ""
"[Lines::next_line()](https://docs.rs/tokio/latest/tokio/io/struct.Lines."
"html#method.next_line): for asynchronously reading user messages from the "
"standard input."
msgstr ""
"[Lines::next_line()](https://docs.rs/tokio/latest/tokio/io/struct.Lines."
"html#method.next_line): –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ "
"—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è."

#: src/exercises/concurrency/chat-app.md:43
msgid ""
"[Sender::subscribe()](https://docs.rs/tokio/latest/tokio/sync/broadcast/"
"struct.Sender.html#method.subscribe): for subscribing to a broadcast channel."
msgstr ""
"[Sender::subscribe()](https://docs.rs/tokio/latest/tokio/sync/broadcast/"
"struct.Sender.html#method.subscribe): –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó."

#: src/exercises/concurrency/chat-app.md:46
msgid "Two binaries"
msgstr "–î–≤–∞ –±—ñ–Ω–∞—Ä–Ω—ñ —Ñ–∞–π–ª–∏"

#: src/exercises/concurrency/chat-app.md:48
msgid ""
"Normally in a Cargo project, you can have only one binary, and one `src/main."
"rs` file. In this project, we need two binaries. One for the client, and one "
"for the server. You could potentially make them two separate Cargo projects, "
"but we are going to put them in a single Cargo project with two binaries. "
"For this to work, the client and the server code should go under `src/bin` "
"(see the [documentation](https://doc.rust-lang.org/cargo/reference/cargo-"
"targets.html#binaries)). "
msgstr ""
"–ó–∞–∑–≤–∏—á–∞–π —É –ø—Ä–æ–µ–∫—Ç—ñ Cargo –≤–∏ –º–æ–∂–µ—Ç–µ –º–∞—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω –±—ñ–Ω–∞—Ä–Ω–∏–π —Ñ–∞–π–ª —ñ –æ–¥–∏–Ω —Ñ–∞–π–ª "
"`src/main.rs`. –£ —Ü—å–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–≤–∞ –±—ñ–Ω–∞—Ä–Ω—ñ —Ñ–∞–π–ª–∏. –û–¥–∏–Ω –¥–ª—è "
"–∫–ª—ñ—î–Ω—Ç–∞, –∞ —ñ–Ω—à–∏–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞. –í–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —ó—Ö –¥–≤–æ–º–∞ –æ–∫—Ä–µ–º–∏–º–∏ "
"–ø—Ä–æ–µ–∫—Ç–∞–º–∏ Cargo, –∞–ª–µ –º–∏ –∑–±–∏—Ä–∞—î–º–æ—Å—è –ø–æ–º—ñ—Å—Ç–∏—Ç–∏ —ó—Ö –≤ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç Cargo –∑ –¥–≤–æ–º–∞ "
"–±—ñ–Ω–∞—Ä–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏. –©–æ–± —Ü–µ –ø—Ä–∞—Ü—é–≤–∞–ª–æ, –∫–æ–¥ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–∞—î –±—É—Ç–∏ "
"—Ä–æ–∑–º—ñ—â–µ–Ω–æ –≤ `src/bin` (–¥–∏–≤. [–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—é](https://doc.rust-lang.org/cargo/"
"reference/cargo-targets.html#binaries) )."

#: src/exercises/concurrency/chat-app.md:55
msgid ""
"Copy the following server and client code into `src/bin/server.rs` and `src/"
"bin/client.rs`, respectively. Your task is to complete these files as "
"described below. "
msgstr ""
"–°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –∫–ª—ñ—î–Ω—Ç–∞ –≤ `src/bin/server.rs` —Ç–∞ `src/bin/"
"client.rs` –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ. –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ü—ñ —Ñ–∞–π–ª–∏, —è–∫ –æ–ø–∏—Å–∞–Ω–æ –Ω–∏–∂—á–µ."

#: src/exercises/concurrency/chat-app.md:59
#: src/exercises/concurrency/solutions-afternoon.md:123
msgid "`src/bin/server.rs`:"
msgstr "`src/bin/server.rs`:"

#: src/exercises/concurrency/chat-app.md:63
msgid ""
"```rust,compile_fail\n"
"use futures_util::sink::SinkExt;\n"
"use futures_util::stream::StreamExt;\n"
"use std::error::Error;\n"
"use std::net::SocketAddr;\n"
"use tokio::net::{TcpListener, TcpStream};\n"
"use tokio::sync::broadcast::{channel, Sender};\n"
"use tokio_websockets::{Message, ServerBuilder, WebsocketStream};\n"
"\n"
"async fn handle_connection(\n"
"    addr: SocketAddr,\n"
"    mut ws_stream: WebsocketStream<TcpStream>,\n"
"    bcast_tx: Sender<String>,\n"
") -> Result<(), Box<dyn Error + Send + Sync>> {\n"
"\n"
"    // TODO: For a hint, see the description of the task below.\n"
"\n"
"}\n"
"\n"
"#[tokio::main]\n"
"async fn main() -> Result<(), Box<dyn Error + Send + Sync>> {\n"
"    let (bcast_tx, _) = channel(16);\n"
"\n"
"    let listener = TcpListener::bind(\"127.0.0.1:2000\").await?;\n"
"    println!(\"listening on port 2000\");\n"
"\n"
"    loop {\n"
"        let (socket, addr) = listener.accept().await?;\n"
"        println!(\"New connection from {addr:?}\");\n"
"        let bcast_tx = bcast_tx.clone();\n"
"        tokio::spawn(async move {\n"
"            // Wrap the raw TCP stream into a websocket.\n"
"            let ws_stream = ServerBuilder::new().accept(socket).await?;\n"
"\n"
"            handle_connection(addr, ws_stream, bcast_tx).await\n"
"        });\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/exercises/concurrency/chat-app.md:103
#: src/exercises/concurrency/solutions-afternoon.md:210
msgid "`src/bin/client.rs`:"
msgstr "`src/bin/client.rs`:"

#: src/exercises/concurrency/chat-app.md:107
msgid ""
"```rust,compile_fail\n"
"use futures_util::stream::StreamExt;\n"
"use futures_util::SinkExt;\n"
"use http::Uri;\n"
"use tokio::io::{AsyncBufReadExt, BufReader};\n"
"use tokio_websockets::{ClientBuilder, Message};\n"
"\n"
"#[tokio::main]\n"
"async fn main() -> Result<(), tokio_websockets::Error> {\n"
"    let (mut ws_stream, _) =\n"
"        ClientBuilder::from_uri(Uri::from_static(\"ws://127.0.0.1:2000\"))\n"
"            .connect()\n"
"            .await?;\n"
"\n"
"    let stdin = tokio::io::stdin();\n"
"    let mut stdin = BufReader::new(stdin).lines();\n"
"\n"
"\n"
"    // TODO: For a hint, see the description of the task below.\n"
"\n"
"}\n"
"```"
msgstr ""

#: src/exercises/concurrency/chat-app.md:130
msgid "Running the binaries"
msgstr "–ó–∞–ø—É—Å–∫ –±—ñ–Ω–∞—Ä–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"

#: src/exercises/concurrency/chat-app.md:131
msgid "Run the server with:"
msgstr "–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é:"

#: src/exercises/concurrency/chat-app.md:133
msgid ""
"```shell\n"
"cargo run --bin server\n"
"```"
msgstr ""

#: src/exercises/concurrency/chat-app.md:137
msgid "and the client with:"
msgstr "—ñ –∫–ª—ñ—î–Ω—Ç –∑:"

#: src/exercises/concurrency/chat-app.md:139
msgid ""
"```shell\n"
"cargo run --bin client\n"
"```"
msgstr ""

#: src/exercises/concurrency/chat-app.md:145
msgid "Implement the `handle_connection` function in `src/bin/server.rs`."
msgstr "–†–µ–∞–ª—ñ–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é `handle_connection` —É `src/bin/server.rs`."

#: src/exercises/concurrency/chat-app.md:146
msgid ""
"Hint: Use `tokio::select!` for concurrently performing two tasks in a "
"continuous loop. One task receives messages from the client and broadcasts "
"them. The other sends messages received by the server to the client."
msgstr ""
"–ü—ñ–¥–∫–∞–∑–∫–∞: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `tokio::select!` –¥–ª—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö "
"–∑–∞–≤–¥–∞–Ω—å —É –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ. –û–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –æ—Ç—Ä–∏–º—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ "
"–∫–ª—ñ—î–Ω—Ç–∞ —ñ —Ç—Ä–∞–Ω—Å–ª—é—î —ó—Ö. –Ü–Ω—à–∏–π –Ω–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ—Ç—Ä–∏–º–∞–Ω—ñ —Å–µ—Ä–≤–µ—Ä–æ–º, "
"–∫–ª—ñ—î–Ω—Ç—É."

#: src/exercises/concurrency/chat-app.md:149
msgid "Complete the main function in `src/bin/client.rs`."
msgstr "–í–∏–∫–æ–Ω–∞–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –≤ `src/bin/client.rs`."

#: src/exercises/concurrency/chat-app.md:150
msgid ""
"Hint: As before, use `tokio::select!` in a continuous loop for concurrently "
"performing two tasks: (1) reading user messages from standard input and "
"sending them to the server, and (2) receiving messages from the server, and "
"displaying them for the user."
msgstr ""
"–ü—ñ–¥–∫–∞–∑–∫–∞: —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `tokio::select!` —É –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–º—É —Ü–∏–∫–ª—ñ "
"–¥–ª—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö –∑–∞–≤–¥–∞–Ω—å: (1) —á–∏—Ç–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "
"–∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —ó—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä, —ñ (2) –æ—Ç—Ä–∏–º–∞–Ω–Ω—è "
"–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞, —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ó—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."

#: src/exercises/concurrency/chat-app.md:154
msgid ""
"Optional: Once you are done, change the code to broadcast messages to all "
"clients, but the sender of the message."
msgstr ""
"–ù–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ: –∫–æ–ª–∏ –≤–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –∑–º—ñ–Ω—ñ—Ç—å –∫–æ–¥, —â–æ–± —Ç—Ä–∞–Ω—Å–ª—é–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "
"–≤—Å—ñ–º –∫–ª—ñ—î–Ω—Ç–∞–º, –∫—Ä—ñ–º –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."

#: src/thanks.md:3
msgid ""
"_Thank you for taking Comprehensive Rust ü¶Ä!_ We hope you enjoyed it and "
"that it was useful."
msgstr ""
"_–î—è–∫—É—î–º–æ, —â–æ –≤–∑—è–ª–∏ Comprehensive Rust ü¶Ä!_ –°–ø–æ–¥—ñ–≤–∞—î–º–æ—Å—è, –≤–∞–º —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å —ñ "
"–±—É–ª–æ –∫–æ—Ä–∏—Å–Ω–æ."

#: src/thanks.md:6
msgid ""
"We've had a lot of fun putting the course together. The course is not "
"perfect, so if you spotted any mistakes or have ideas for improvements, "
"please get in [contact with us on GitHub](https://github.com/google/"
"comprehensive-rust/discussions). We would love to hear from you."
msgstr ""
"–ù–∞–º –±—É–ª–æ –¥—É–∂–µ –≤–µ—Å–µ–ª–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫—É—Ä—Å. –ö—É—Ä—Å –Ω–µ —ñ–¥–µ–∞–ª—å–Ω–∏–π, —Ç–æ–∂ —è–∫—â–æ –≤–∏ "
"–ø–æ–º—ñ—Ç–∏–ª–∏ –±—É–¥—å-—è–∫—ñ –ø–æ–º–∏–ª–∫–∏ –∞–±–æ –º–∞—î—Ç–µ —ñ–¥–µ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è, [–∑–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ "
"–Ω–∞ GitHub](https://github.com/google/comprehensive-rust/discussions). –ú–∏ "
"–±—É–¥–µ–º–æ —Ä–∞–¥—ñ –ø–æ—á—É—Ç–∏ –≤—ñ–¥ –≤–∞—Å."

#: src/other-resources.md:1
msgid "Other Rust Resources"
msgstr "–Ü–Ω—à—ñ —Ä–µ—Å—É—Ä—Å–∏ Rust"

#: src/other-resources.md:3
msgid ""
"The Rust community has created a wealth of high-quality and free resources "
"online."
msgstr ""
"–°–ø—ñ–ª—å–Ω–æ—Ç–∞ Rust —Å—Ç–≤–æ—Ä–∏–ª–∞ –±–µ–∑–ª—ñ—á –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏—Ö —ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤ –æ–Ω–ª–∞–π–Ω."

#: src/other-resources.md:6
msgid "Official Documentation"
msgstr "–û—Ñ—ñ—Ü—ñ–π–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è"

#: src/other-resources.md:8
msgid "The Rust project hosts many resources. These cover Rust in general:"
msgstr "–ü—Ä–æ–µ–∫—Ç Rust –º—ñ—Å—Ç–∏—Ç—å –±–∞–≥–∞—Ç–æ —Ä–µ—Å—É—Ä—Å—ñ–≤. –í–æ–Ω–∏ –æ—Ö–æ–ø–ª—é—é—Ç—å Rust –∑–∞–≥–∞–ª–æ–º:"

#: src/other-resources.md:10
msgid ""
"[The Rust Programming Language](https://doc.rust-lang.org/book/): the "
"canonical free book about Rust. Covers the language in detail and includes a "
"few projects for people to build."
msgstr ""
"[–ú–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è Rust] (https://doc.rust-lang.org/book/): –∫–∞–Ω–æ–Ω—ñ—á–Ω–∞ "
"–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –∫–Ω–∏–≥–∞ –ø—Ä–æ Rust. –î–µ—Ç–∞–ª—å–Ω–æ –æ—Ö–æ–ø–ª—é—î –º–æ–≤—É —Ç–∞ –º—ñ—Å—Ç–∏—Ç—å –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–µ–∫—Ç—ñ–≤ "
"–¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—é–¥—å–º–∏."

#: src/other-resources.md:13
msgid ""
"[Rust By Example](https://doc.rust-lang.org/rust-by-example/): covers the "
"Rust syntax via a series of examples which showcase different constructs. "
"Sometimes includes small exercises where you are asked to expand on the code "
"in the examples."
msgstr ""
"[Rust –∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º](https://doc.rust-lang.org/rust-by-example/): –æ–ø–∏—Å—É—î "
"—Å–∏–Ω—Ç–∞–∫—Å–∏—Å Rust –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å–µ—Ä—ñ—ó –ø—Ä–∏–∫–ª–∞–¥—ñ–≤, —è–∫—ñ –¥–µ–º–æ–Ω—Å—Ç—Ä—É—é—Ç—å —Ä—ñ–∑–Ω—ñ "
"–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó. –Ü–Ω–æ–¥—ñ –≤–∫–ª—é—á–∞—î –Ω–µ–≤–µ–ª–∏–∫—ñ –≤–ø—Ä–∞–≤–∏, –¥–µ –≤–∞—Å –ø—Ä–æ—Å—è—Ç—å —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –∫–æ–¥ —É "
"–ø—Ä–∏–∫–ª–∞–¥–∞—Ö."

#: src/other-resources.md:17
msgid ""
"[Rust Standard Library](https://doc.rust-lang.org/std/): full documentation "
"of the standard library for Rust."
msgstr ""
"[–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Rust](https://doc.rust-lang.org/std/): –ø–æ–≤–Ω–∞ "
"–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –¥–ª—è Rust."

#: src/other-resources.md:19
msgid ""
"[The Rust Reference](https://doc.rust-lang.org/reference/): an incomplete "
"book which describes the Rust grammar and memory model."
msgstr ""
"[–î–æ–≤—ñ–¥–Ω–∏–∫ Rust](https://doc.rust-lang.org/reference/): –Ω–µ–ø–æ–≤–Ω–∞ –∫–Ω–∏–≥–∞, —è–∫–∞ "
"–æ–ø–∏—Å—É—î –≥—Ä–∞–º–∞—Ç–∏–∫—É —Ç–∞ –º–æ–¥–µ–ª—å –ø–∞–º‚Äô—è—Ç—ñ Rust."

#: src/other-resources.md:22
msgid "More specialized guides hosted on the official Rust site:"
msgstr "–ë—ñ–ª—å—à–µ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ—Å—ñ–±–Ω–∏–∫—ñ–≤ —Ä–æ–∑–º—ñ—â–µ–Ω–æ –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É —Å–∞–π—Ç—ñ Rust:"

#: src/other-resources.md:24
msgid ""
"[The Rustonomicon](https://doc.rust-lang.org/nomicon/): covers unsafe Rust, "
"including working with raw pointers and interfacing with other languages "
"(FFI)."
msgstr ""
"[Rustonomicon](https://doc.rust-lang.org/nomicon/): –æ—Ö–æ–ø–ª—é—î –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π "
"Rust, –∑–æ–∫—Ä–µ–º–∞ —Ä–æ–±–æ—Ç—É –∑ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏–º–∏ –ø–æ–∫–∞–∂—á–∏–∫–∞–º–∏ —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ —ñ–Ω—à–∏–º–∏ "
"–º–æ–≤–∞–º–∏ (FFI)."

#: src/other-resources.md:27
msgid ""
"[Asynchronous Programming in Rust](https://rust-lang.github.io/async-book/): "
"covers the new asynchronous programming model which was introduced after the "
"Rust Book was written."
msgstr ""
"[–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –≤ Rust](https://rust-lang.github.io/async-book/): "
"–æ—Ö–æ–ø–ª—é—î –Ω–æ–≤—É –º–æ–¥–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —è–∫–∞ –±—É–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚Äã‚Äã–ø—ñ—Å–ª—è "
"–Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ Rust."

#: src/other-resources.md:30
msgid ""
"[The Embedded Rust Book](https://doc.rust-lang.org/stable/embedded-book/): "
"an introduction to using Rust on embedded devices without an operating "
"system."
msgstr ""
"[The Embedded Rust Book](https://doc.rust-lang.org/stable/embedded-book/): "
"–æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Rust –Ω–∞ –≤–±—É–¥–æ–≤–∞–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö –±–µ–∑ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó "
"—Å–∏—Å—Ç–µ–º–∏."

#: src/other-resources.md:33
msgid "Unofficial Learning Material"
msgstr "–ù–µ–æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª"

#: src/other-resources.md:35
msgid "A small selection of other guides and tutorial for Rust:"
msgstr "–ù–µ–≤–µ–ª–∏–∫–∞ –¥–æ–±—ñ—Ä–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ—Å—ñ–±–Ω–∏–∫—ñ–≤ —ñ –ø—ñ–¥—Ä—É—á–Ω–∏–∫—ñ–≤ –¥–ª—è Rust:"

#: src/other-resources.md:37
msgid ""
"[Learn Rust the Dangerous Way](http://cliffle.com/p/dangerust/): covers Rust "
"from the perspective of low-level C programmers."
msgstr ""
"[–í–∏–≤—á—ñ—Ç—å Rust –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º] (http://cliffle.com/p/dangerust/): "
"—Ä–æ–∑–ø–æ–≤—ñ–¥–∞—î—Ç—å—Å—è –ø—Ä–æ Rust –∑ —Ç–æ—á–∫–∏ –∑–æ—Ä—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –Ω–∞ C –Ω–∏–∑—å–∫–æ–≥–æ —Ä—ñ–≤–Ω—è."

#: src/other-resources.md:39
msgid ""
"[Rust for Embedded C Programmers](https://docs.opentitan.org/doc/ug/"
"rust_for_c/): covers Rust from the perspective of developers who write "
"firmware in C."
msgstr ""
"[Rust –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ Embedded C](https://docs.opentitan.org/doc/ug/"
"rust_for_c/): —Ä–æ–∑–ø–æ–≤—ñ–¥–∞—î—Ç—å—Å—è –ø—Ä–æ Rust –∑ —Ç–æ—á–∫–∏ –∑–æ—Ä—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤, —è–∫—ñ –ø–∏—à—É—Ç—å "
"–≤–±—É–¥–æ–≤–∞–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –Ω–∞ C."

#: src/other-resources.md:42
msgid ""
"[Rust for professionals](https://overexact.com/rust-for-professionals/): "
"covers the syntax of Rust using side-by-side comparisons with other "
"languages such as C, C++, Java, JavaScript, and Python."
msgstr ""

#: src/other-resources.md:45
msgid ""
"[Rust on Exercism](https://exercism.org/tracks/rust): 100+ exercises to help "
"you learn Rust."
msgstr ""
"[Rust on Exercism](https://exercism.org/tracks/rust): –ø–æ–Ω–∞–¥ 100 –≤–ø—Ä–∞–≤, —è–∫—ñ "
"–¥–æ–ø–æ–º–æ–∂—É—Ç—å –≤–∞–º –≤–∏–≤—á–∏—Ç–∏ Rust."

#: src/other-resources.md:47
msgid ""
"[Ferrous Teaching Material](https://ferrous-systems.github.io/teaching-"
"material/index.html): a series of small presentations covering both basic "
"and advanced part of the Rust language. Other topics such as WebAssembly, "
"and async/await are also covered."
msgstr ""
"[–ù–∞–≤—á–∞–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª Ferrous](https://ferrous-systems.github.io/teaching-"
"material/index.html): —Å–µ—Ä—ñ—è –Ω–µ–≤–µ–ª–∏–∫–∏—Ö –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ–π, —â–æ –æ—Ö–æ–ø–ª—é—é—Ç—å –±–∞–∑–æ–≤—É —Ç–∞ "
"—Ä–æ–∑—à–∏—Ä–µ–Ω—É —á–∞—Å—Ç–∏–Ω—É –º–æ–≤–∏ Rust. –¢–∞–∫–æ–∂ —Ä–æ–∑–≥–ª—è–¥–∞—é—Ç—å—Å—è —ñ–Ω—à—ñ —Ç–µ–º–∏, —Ç–∞–∫—ñ —è–∫ "
"WebAssembly —Ç–∞ async/await."

#: src/other-resources.md:52
msgid ""
"[Beginner's Series to Rust](https://docs.microsoft.com/en-us/shows/beginners-"
"series-to-rust/) and [Take your first steps with Rust](https://docs."
"microsoft.com/en-us/learn/paths/rust-first-steps/): two Rust guides aimed at "
"new developers. The first is a set of 35 videos and the second is a set of "
"11 modules which covers Rust syntax and basic constructs."
msgstr ""
"[–°–µ—Ä—ñ—è –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤ –¥–æ Rust](https://docs.microsoft.com/en-us/shows/"
"beginners-series-to-rust/) —ñ [–ó—Ä–æ–±—ñ—Ç—å –ø–µ—Ä—à—ñ –∫—Ä–æ–∫–∏ –∑ Rust](https://docs."
"microsoft. com/en-us/learn/paths/rust-first-steps/): –¥–≤–∞ –ø–æ—Å—ñ–±–Ω–∏–∫–∏ –∑ Rust, "
"–ø—Ä–∏–∑–Ω–∞—á–µ–Ω—ñ –¥–ª—è –Ω–æ–≤–∏—Ö —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤. –ü–µ—Ä—à–∏–π ‚Äî —Ü–µ –Ω–∞–±—ñ—Ä —ñ–∑ 35 –≤—ñ–¥–µ–æ, –∞ –¥—Ä—É–≥–∏–π ‚Äî "
"–Ω–∞–±—ñ—Ä —ñ–∑ 11 –º–æ–¥—É–ª—ñ–≤, —è–∫—ñ –æ—Ö–æ–ø–ª—é—é—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —ñ –±–∞–∑–æ–≤—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó Rust."

#: src/other-resources.md:58
msgid ""
"[Learn Rust With Entirely Too Many Linked Lists](https://rust-unofficial."
"github.io/too-many-lists/): in-depth exploration of Rust's memory management "
"rules, through implementing a few different types of list structures."
msgstr ""
"[–í–∏–≤—á—ñ—Ç—å Rust —ñ–∑ –Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ–≤‚Äô—è–∑–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤](https://rust-"
"unofficial.github.io/too-many-lists/): –ø–æ–≥–ª–∏–±–ª–µ–Ω–µ –≤–∏–≤—á–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –∫–µ—Ä—É–≤–∞–Ω–Ω—è "
"–ø–∞–º‚Äô—è—Ç—Ç—é Rust –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫—ñ–ª—å–∫–æ—Ö —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å–ø–∏—Å–∫—ñ–≤ ."

#: src/other-resources.md:63
msgid ""
"Please see the [Little Book of Rust Books](https://lborb.github.io/book/) "
"for even more Rust books."
msgstr ""
"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ [–ú–∞–ª–µ–Ω—å–∫—É –∫–Ω–∏–≥—É Rust Books](https://lborb.github.io/"
"book/), —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —â–µ –±—ñ–ª—å—à–µ –∫–Ω–∏–≥ Rust."

#: src/credits.md:3
msgid ""
"The material here builds on top of the many great sources of Rust "
"documentation. See the page on [other resources](other-resources.md) for a "
"full list of useful resources."
msgstr ""
"–¶–µ–π –º–∞—Ç–µ—Ä—ñ–∞–ª –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –±–∞–≥–∞—Ç—å–æ—Ö —á—É–¥–æ–≤–∏—Ö –¥–∂–µ—Ä–µ–ª–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó Rust. "
"–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É [—ñ–Ω—à—ñ —Ä–µ—Å—É—Ä—Å–∏](other-resources.md), —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–∏–π "
"—Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤."

#: src/credits.md:7
msgid ""
"The material of Comprehensive Rust is licensed under the terms of the Apache "
"2.0 license, please see [`LICENSE`](https://github.com/google/comprehensive-"
"rust/blob/main/LICENSE) for details."
msgstr ""
"–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ Comprehensive Rust –Ω–∞–¥–∞—é—Ç—å—Å—è –∑–≥—ñ–¥–Ω–æ –∑ —É–º–æ–≤–∞–º–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—ó Apache 2.0, "
"–ø–æ–¥—Ä–æ–±–∏—Ü—ñ –¥–∏–≤."

#: src/credits.md:12
msgid "Rust by Example"
msgstr "–Ü—Ä–∂–∞ –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ"

#: src/credits.md:14
msgid ""
"Some examples and exercises have been copied and adapted from [Rust by "
"Example](https://doc.rust-lang.org/rust-by-example/). Please see the "
"`third_party/rust-by-example/` directory for details, including the license "
"terms."
msgstr ""
"–î–µ—è–∫—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ —Ç–∞ –≤–ø—Ä–∞–≤–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —Ç–∞ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –∑ [Rust by Example]"
"(https://doc.rust-lang.org/rust-by-example/). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ "
"–∫–∞—Ç–∞–ª–æ–≥ `third_party/rust-by-example/`, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∫–ª–∞–¥–Ω—ñ—à—ñ –≤—ñ–¥–æ–º–æ—Å—Ç—ñ, "
"–≤–∫–ª—é—á–Ω–æ –∑ —É–º–æ–≤–∞–º–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—ó."

#: src/credits.md:19
msgid "Rust on Exercism"
msgstr "–†—É—Å—Ç –Ω–∞ –≤–ø—Ä–∞–≤–∞—Ö"

#: src/credits.md:21
msgid ""
"Some exercises have been copied and adapted from [Rust on Exercism](https://"
"exercism.org/tracks/rust). Please see the `third_party/rust-on-exercism/` "
"directory for details, including the license terms."
msgstr ""
"–î–µ—è–∫—ñ –≤–ø—Ä–∞–≤–∏ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ —Ç–∞ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –∑ [Rust on Exercism](https://exercism."
"org/tracks/rust). –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ `third_party/rust-on-"
"exercism/`, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–∫–ª–∞–¥–Ω—ñ—à—ñ –≤—ñ–¥–æ–º–æ—Å—Ç—ñ, –≤–∫–ª—é—á–Ω–æ –∑ —É–º–æ–≤–∞–º–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—ó."

#: src/credits.md:26
msgid "CXX"
msgstr "CXX"

#: src/credits.md:28
msgid ""
"The [Interoperability with C++](android/interoperability/cpp.md) section "
"uses an image from [CXX](https://cxx.rs/). Please see the `third_party/cxx/` "
"directory for details, including the license terms."
msgstr ""
"–£ —Ä–æ–∑–¥—ñ–ª—ñ [–í–∑–∞—î–º–æ–¥—ñ—è –∑ C++](android/interoperability/cpp.md) "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ [CXX](https://cxx.rs/). –ë—É–¥—å –ª–∞—Å–∫–∞, –¥–∏–≤—ñ—Ç—å—Å—è "
"–∫–∞—Ç–∞–ª–æ–≥ `third_party/cxx/` –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –≤–∫–ª—é—á–Ω–æ –∑ "
"—É–º–æ–≤–∞–º–∏ –ª—ñ—Ü–µ–Ω–∑—ñ—ó."

#: src/exercises/solutions.md:3
msgid "You will find solutions to the exercises on the following pages."
msgstr "–†–æ–∑–≤‚Äô—è–∑–∫–∏ –≤–ø—Ä–∞–≤ –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö."

#: src/exercises/solutions.md:5
msgid ""
"Feel free to ask questions about the solutions [on GitHub](https://github."
"com/google/comprehensive-rust/discussions). Let us know if you have a "
"different or better solution than what is presented here."
msgstr ""
"–ù–µ —Å–æ—Ä–æ–º—Ç–µ—Å—è —Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ä—ñ—à–µ–Ω—å [–Ω–∞ GitHub](https://github.com/"
"google/comprehensive-rust/discussions). –ü–æ–≤—ñ–¥–æ–º—Ç–µ –Ω–∞—Å, —è–∫—â–æ —É –≤–∞—Å —î —ñ–Ω—à–µ –∞–±–æ "
"–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è, –Ω—ñ–∂ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–µ —Ç—É—Ç."

#: src/exercises/solutions.md:10
msgid ""
"**Note:** Please ignore the `// ANCHOR: label` and `// ANCHOR_END: label` "
"comments you see in the solutions. They are there to make it possible to re-"
"use parts of the solutions as the exercises."
msgstr ""
"**–ü—Ä–∏–º—ñ—Ç–∫–∞.** –ù–µ –∑–≤–µ—Ä—Ç–∞–π—Ç–µ —É–≤–∞–≥–∏ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ `// ANCHOR: label` —ñ `// "
"ANCHOR_END: ‚Äã‚Äãlabel`, —è–∫—ñ –≤–∏ –±–∞—á–∏—Ç–µ –≤ —Ä—ñ—à–µ–Ω–Ω—è—Ö. –í–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å –¥–ª—è —Ç–æ–≥–æ, —â–æ–± "
"–∑—Ä–æ–±–∏—Ç–∏ –º–æ–∂–ª–∏–≤–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω —Ä—ñ—à–µ–Ω—å —è–∫ –≤–ø—Ä–∞–≤."

#: src/exercises/day-1/solutions-morning.md:1
msgid "Day 1 Morning Exercises"
msgstr "–î–µ–Ω—å 1 –†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞"

#: src/exercises/day-1/solutions-morning.md:5
msgid "([back to exercise](for-loops.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](for-loops.md))"

#: src/exercises/day-1/solutions-morning.md:7
msgid ""
"```rust\n"
"// Copyright 2022 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: transpose\n"
"fn transpose(matrix: [[i32; 3]; 3]) -> [[i32; 3]; 3] {\n"
"    // ANCHOR_END: transpose\n"
"    let mut result = [[0; 3]; 3];\n"
"    for i in 0..3 {\n"
"        for j in 0..3 {\n"
"            result[j][i] = matrix[i][j];\n"
"        }\n"
"    }\n"
"    return result;\n"
"}\n"
"\n"
"// ANCHOR: pretty_print\n"
"fn pretty_print(matrix: &[[i32; 3]; 3]) {\n"
"    // ANCHOR_END: pretty_print\n"
"    for row in matrix {\n"
"        println!(\"{row:?}\");\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: tests\n"
"#[test]\n"
"fn test_transpose() {\n"
"    let matrix = [\n"
"        [101, 102, 103], //\n"
"        [201, 202, 203],\n"
"        [301, 302, 303],\n"
"    ];\n"
"    let transposed = transpose(matrix);\n"
"    assert_eq!(\n"
"        transposed,\n"
"        [\n"
"            [101, 201, 301], //\n"
"            [102, 202, 302],\n"
"            [103, 203, 303],\n"
"        ]\n"
"    );\n"
"}\n"
"// ANCHOR_END: tests\n"
"\n"
"// ANCHOR: main\n"
"fn main() {\n"
"    let matrix = [\n"
"        [101, 102, 103], // <-- the comment makes rustfmt add a newline\n"
"        [201, 202, 203],\n"
"        [301, 302, 303],\n"
"    ];\n"
"\n"
"    println!(\"matrix:\");\n"
"    pretty_print(&matrix);\n"
"\n"
"    let transposed = transpose(matrix);\n"
"    println!(\"transposed:\");\n"
"    pretty_print(&transposed);\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-1/solutions-morning.md:78
msgid "Bonus question"
msgstr "–ë–æ–Ω—É—Å–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è"

#: src/exercises/day-1/solutions-morning.md:80
msgid ""
"It requires more advanced concepts. It might seem that we could use a slice-"
"of-slices (`&[&[i32]]`) as the input type to transpose and thus make our "
"function handle any size of matrix. However, this quickly breaks down: the "
"return type cannot be `&[&[i32]]` since it needs to own the data you return."
msgstr ""
"–¶–µ –≤–∏–º–∞–≥–∞—î –±—ñ–ª—å—à –ø—Ä–æ—Å—É–Ω—É—Ç–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü—ñ–π. –ú–æ–∂–µ –∑–¥–∞—Ç–∏—Å—è, —â–æ –º–∏ –º–æ–∂–µ–º–æ "
"–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ñ–≤ (`&[&[i32]]`) —è–∫ —Ç–∏–ø –≤–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è "
"—Ç—Ä–∞–Ω—Å–ø–æ–Ω—É–≤–∞–Ω–Ω—è —ñ —Ç–∞–∫–∏–º —á–∏–Ω–æ–º –∑–º—É—Å–∏—Ç–∏ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–ª—è—Ç–∏ –±—É–¥—å-—è–∫–∏–π —Ä–æ–∑–º—ñ—Ä "
"–º–∞—Ç—Ä–∏—Ü—ñ. –û–¥–Ω–∞–∫ —Ü–µ —à–≤–∏–¥–∫–æ –≤–∏—Ö–æ–¥–∏—Ç—å –∑ –ª–∞–¥—É: —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ "
"`&[&[i32]]`, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –≤–æ–ª–æ–¥—ñ—Ç–∏ –¥–∞–Ω–∏–º–∏, —è–∫—ñ –≤–∏ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç–µ."

#: src/exercises/day-1/solutions-morning.md:82
msgid ""
"You can attempt to use something like `Vec<Vec<i32>>`, but this doesn't work "
"out-of-the-box either: it's hard to convert from `Vec<Vec<i32>>` to "
"`&[&[i32]]` so now you cannot easily use `pretty_print` either."
msgstr ""
"–í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —â–æ—Å—å –Ω–∞ –∫—à—Ç–∞–ª—Ç `Vec<Vec<i32>>`, –∞–ª–µ —Ü–µ —Ç–µ–∂ "
"–Ω–µ –ø—Ä–∞—Ü—é—î –∑ –∫–æ—Ä–æ–±–∫–∏: –≤–∞–∂–∫–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∑ `Vec<Vec<i32>>` –Ω–∞ `&[ &[i32]]`, "
"—Ç–æ–∂ —Ç–µ–ø–µ—Ä –≤–∏ —Ç–∞–∫–æ–∂ –Ω–µ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ `pretty_print`."

#: src/exercises/day-1/solutions-morning.md:84
msgid ""
"Once we get to traits and generics, we'll be able to use the [`std::convert::"
"AsRef`](https://doc.rust-lang.org/std/convert/trait.AsRef.html) trait to "
"abstract over anything that can be referenced as a slice."
msgstr ""
"–ö–æ–ª–∏ –º–∏ –ø–µ—Ä–µ–π–¥–µ–º–æ –¥–æ —Ç—Ä–µ–π—Ç—ñ–≤ —ñ –≥–µ–Ω–µ—Ä–∏–∫—ñ–≤, –º–∏ –∑–º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ [`std::"
"convert::AsRef`](https://doc.rust-lang.org/std/convert/trait.AsRef.html) "
"–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –∞–±—Å—Ç—Ä–∞–≥—É–≤–∞—Ç–∏—Å—è –Ω–∞–¥ —É—Å—ñ–º, –Ω–∞ —â–æ –º–æ–∂–Ω–∞ –ø–æ—Å–∏–ª–∞—Ç–∏—Å—è —è–∫ –Ω–∞ –∑—Ä—ñ–∑."

#: src/exercises/day-1/solutions-morning.md:86
msgid ""
"```rust\n"
"use std::convert::AsRef;\n"
"use std::fmt::Debug;\n"
"\n"
"fn pretty_print<T, Line, Matrix>(matrix: Matrix)\n"
"where\n"
"    T: Debug,\n"
"    // A line references a slice of items\n"
"    Line: AsRef<[T]>,\n"
"    // A matrix references a slice of lines\n"
"    Matrix: AsRef<[Line]>\n"
"{\n"
"    for row in matrix.as_ref() {\n"
"        println!(\"{:?}\", row.as_ref());\n"
"    }\n"
"}\n"
"\n"
"fn main() {\n"
"    // &[&[i32]]\n"
"    pretty_print(&[&[1, 2, 3], &[4, 5, 6], &[7, 8, 9]]);\n"
"    // [[&str; 2]; 2]\n"
"    pretty_print([[\"a\", \"b\"], [\"c\", \"d\"]]);\n"
"    // Vec<Vec<i32>>\n"
"    pretty_print(vec![vec![1, 2], vec![3, 4]]);\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-1/solutions-morning.md:113
msgid ""
"In addition, the type itself would not enforce that the child slices are of "
"the same length, so such variable could contain an invalid matrix."
msgstr ""
"–ö—Ä—ñ–º —Ç–æ–≥–æ, —Å–∞–º —Ç–∏–ø –Ω–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –¥–æ—á—ñ—Ä–Ω—ñ —Å–µ–≥–º–µ–Ω—Ç–∏ –º–∞—é—Ç—å –æ–¥–Ω–∞–∫–æ–≤—É –¥–æ–≤–∂–∏–Ω—É, "
"—Ç–æ–º—É —Ç–∞–∫–∞ –∑–º—ñ–Ω–Ω–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ–¥—ñ–π—Å–Ω—É –º–∞—Ç—Ä–∏—Ü—é."

#: src/exercises/day-1/solutions-afternoon.md:1
msgid "Day 1 Afternoon Exercises"
msgstr "–î–µ–Ω—å 1 –ü—ñ—Å–ª—è–æ–±—ñ–¥–Ω—ñ –≤–ø—Ä–∞–≤–∏"

#: src/exercises/day-1/solutions-afternoon.md:5
msgid "([back to exercise](luhn.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](luhn.md))"

#: src/exercises/day-1/solutions-afternoon.md:7
msgid ""
"```rust\n"
"// Copyright 2022 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: luhn\n"
"pub fn luhn(cc_number: &str) -> bool {\n"
"    // ANCHOR_END: luhn\n"
"    let mut digits_seen = 0;\n"
"    let mut sum = 0;\n"
"    for (i, ch) in cc_number.chars().rev().filter(|&ch| ch != ' ')."
"enumerate() {\n"
"        match ch.to_digit(10) {\n"
"            Some(d) => {\n"
"                sum += if i % 2 == 1 {\n"
"                    let dd = d * 2;\n"
"                    dd / 10 + dd % 10\n"
"                } else {\n"
"                    d\n"
"                };\n"
"                digits_seen += 1;\n"
"            }\n"
"            None => return false,\n"
"        }\n"
"    }\n"
"\n"
"    if digits_seen < 2 {\n"
"        return false;\n"
"    }\n"
"\n"
"    sum % 10 == 0\n"
"}\n"
"\n"
"fn main() {\n"
"    let cc_number = \"1234 5678 1234 5670\";\n"
"    println!(\n"
"        \"Is {cc_number} a valid credit card number? {}\",\n"
"        if luhn(cc_number) { \"yes\" } else { \"no\" }\n"
"    );\n"
"}\n"
"\n"
"// ANCHOR: unit-tests\n"
"#[test]\n"
"fn test_non_digit_cc_number() {\n"
"    assert!(!luhn(\"foo\"));\n"
"    assert!(!luhn(\"foo 0 0\"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_empty_cc_number() {\n"
"    assert!(!luhn(\"\"));\n"
"    assert!(!luhn(\" \"));\n"
"    assert!(!luhn(\"  \"));\n"
"    assert!(!luhn(\"    \"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_single_digit_cc_number() {\n"
"    assert!(!luhn(\"0\"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_two_digit_cc_number() {\n"
"    assert!(luhn(\" 0 0 \"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_valid_cc_number() {\n"
"    assert!(luhn(\"4263 9826 4026 9299\"));\n"
"    assert!(luhn(\"4539 3195 0343 6467\"));\n"
"    assert!(luhn(\"7992 7398 713\"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_invalid_cc_number() {\n"
"    assert!(!luhn(\"4223 9826 4026 9299\"));\n"
"    assert!(!luhn(\"4539 3195 0343 6476\"));\n"
"    assert!(!luhn(\"8273 1232 7352 0569\"));\n"
"}\n"
"// ANCHOR_END: unit-tests\n"
"```"
msgstr ""

#: src/exercises/day-1/solutions-afternoon.md:98
msgid "Pattern matching"
msgstr "–ó—ñ—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É"

#: src/exercises/day-1/solutions-afternoon.md:100
msgid "TBD."
msgstr "–£—Ç–æ—á–Ω—é—î—Ç—å—Å—è"

#: src/exercises/day-2/solutions-morning.md:1
msgid "Day 2 Morning Exercises"
msgstr "2 –¥–µ–Ω—å –†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞"

#: src/exercises/day-2/solutions-morning.md:3
msgid "Designing a Library"
msgstr "–ü—Ä–æ–µ–∫—Ç—É–≤–∞–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏"

#: src/exercises/day-2/solutions-morning.md:5
msgid "([back to exercise](book-library.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](book-library.md))"

#: src/exercises/day-2/solutions-morning.md:7
msgid ""
"```rust\n"
"// Copyright 2022 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: setup\n"
"struct Library {\n"
"    books: Vec<Book>,\n"
"}\n"
"\n"
"struct Book {\n"
"    title: String,\n"
"    year: u16,\n"
"}\n"
"\n"
"impl Book {\n"
"    // This is a constructor, used below.\n"
"    fn new(title: &str, year: u16) -> Book {\n"
"        Book {\n"
"            title: String::from(title),\n"
"            year,\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// Implement the methods below. Update the `self` parameter to\n"
"// indicate the method's required level of ownership over the object:\n"
"//\n"
"// - `&self` for shared read-only access,\n"
"// - `&mut self` for unique and mutable access,\n"
"// - `self` for unique access by value.\n"
"impl Library {\n"
"    // ANCHOR_END: setup\n"
"\n"
"    // ANCHOR: Library_new\n"
"    fn new() -> Library {\n"
"        // ANCHOR_END: Library_new\n"
"        Library { books: Vec::new() }\n"
"    }\n"
"\n"
"    // ANCHOR: Library_len\n"
"    //fn len(self) -> usize {\n"
"    //    todo!(\"Return the length of `self.books`\")\n"
"    //}\n"
"    // ANCHOR_END: Library_len\n"
"    fn len(&self) -> usize {\n"
"        self.books.len()\n"
"    }\n"
"\n"
"    // ANCHOR: Library_is_empty\n"
"    //fn is_empty(self) -> bool {\n"
"    //    todo!(\"Return `true` if `self.books` is empty\")\n"
"    //}\n"
"    // ANCHOR_END: Library_is_empty\n"
"    fn is_empty(&self) -> bool {\n"
"        self.books.is_empty()\n"
"    }\n"
"\n"
"    // ANCHOR: Library_add_book\n"
"    //fn add_book(self, book: Book) {\n"
"    //    todo!(\"Add a new book to `self.books`\")\n"
"    //}\n"
"    // ANCHOR_END: Library_add_book\n"
"    fn add_book(&mut self, book: Book) {\n"
"        self.books.push(book)\n"
"    }\n"
"\n"
"    // ANCHOR: Library_print_books\n"
"    //fn print_books(self) {\n"
"    //    todo!(\"Iterate over `self.books` and print each book's title and "
"year\")\n"
"    //}\n"
"    // ANCHOR_END: Library_print_books\n"
"    fn print_books(&self) {\n"
"        for book in &self.books {\n"
"            println!(\"{}, published in {}\", book.title, book.year);\n"
"        }\n"
"    }\n"
"\n"
"    // ANCHOR: Library_oldest_book\n"
"    //fn oldest_book(self) -> Option<&Book> {\n"
"    //    todo!(\"Return a reference to the oldest book (if any)\")\n"
"    //}\n"
"    // ANCHOR_END: Library_oldest_book\n"
"    fn oldest_book(&self) -> Option<&Book> {\n"
"        // Using a closure and a built-in method:\n"
"        // self.books.iter().min_by_key(|book| book.year)\n"
"\n"
"        // Longer hand-written solution:\n"
"        let mut oldest: Option<&Book> = None;\n"
"        for book in self.books.iter() {\n"
"            if oldest.is_none() || book.year < oldest.unwrap().year {\n"
"                oldest = Some(book);\n"
"            }\n"
"        }\n"
"\n"
"        oldest\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: main\n"
"// This shows the desired behavior. Uncomment the code below and\n"
"// implement the missing methods. You will need to update the\n"
"// method signatures, including the \"self\" parameter! You may\n"
"// also need to update the variable bindings within main.\n"
"fn main() {\n"
"    let library = Library::new();\n"
"\n"
"    //println!(\"The library is empty: library.is_empty() -> {}\", library."
"is_empty());\n"
"    //\n"
"    //library.add_book(Book::new(\"Lord of the Rings\", 1954));\n"
"    //library.add_book(Book::new(\"Alice's Adventures in Wonderland\", "
"1865));\n"
"    //\n"
"    //println!(\"The library is no longer empty: library.is_empty() -> {}\", "
"library.is_empty());\n"
"    //\n"
"    //\n"
"    //library.print_books();\n"
"    //\n"
"    //match library.oldest_book() {\n"
"    //    Some(book) => println!(\"The oldest book is {}\", book.title),\n"
"    //    None => println!(\"The library is empty!\"),\n"
"    //}\n"
"    //\n"
"    //println!(\"The library has {} books\", library.len());\n"
"    //library.print_books();\n"
"}\n"
"// ANCHOR_END: main\n"
"\n"
"#[test]\n"
"fn test_library_len() {\n"
"    let mut library = Library::new();\n"
"    assert_eq!(library.len(), 0);\n"
"    assert!(library.is_empty());\n"
"\n"
"    library.add_book(Book::new(\"Lord of the Rings\", 1954));\n"
"    library.add_book(Book::new(\"Alice's Adventures in Wonderland\", "
"1865));\n"
"    assert_eq!(library.len(), 2);\n"
"    assert!(!library.is_empty());\n"
"}\n"
"\n"
"#[test]\n"
"fn test_library_is_empty() {\n"
"    let mut library = Library::new();\n"
"    assert!(library.is_empty());\n"
"\n"
"    library.add_book(Book::new(\"Lord of the Rings\", 1954));\n"
"    assert!(!library.is_empty());\n"
"}\n"
"\n"
"#[test]\n"
"fn test_library_print_books() {\n"
"    let mut library = Library::new();\n"
"    library.add_book(Book::new(\"Lord of the Rings\", 1954));\n"
"    library.add_book(Book::new(\"Alice's Adventures in Wonderland\", "
"1865));\n"
"    // We could try and capture stdout, but let us just call the\n"
"    // method to start with.\n"
"    library.print_books();\n"
"}\n"
"\n"
"#[test]\n"
"fn test_library_oldest_book() {\n"
"    let mut library = Library::new();\n"
"    assert!(library.oldest_book().is_none());\n"
"\n"
"    library.add_book(Book::new(\"Lord of the Rings\", 1954));\n"
"    assert_eq!(\n"
"        library.oldest_book().map(|b| b.title.as_str()),\n"
"        Some(\"Lord of the Rings\")\n"
"    );\n"
"\n"
"    library.add_book(Book::new(\"Alice's Adventures in Wonderland\", "
"1865));\n"
"    assert_eq!(\n"
"        library.oldest_book().map(|b| b.title.as_str()),\n"
"        Some(\"Alice's Adventures in Wonderland\")\n"
"    );\n"
"}\n"
"```"
msgstr ""

#: src/exercises/day-2/solutions-afternoon.md:1
msgid "Day 2 Afternoon Exercises"
msgstr "–î–µ–Ω—å 2 –ü—ñ—Å–ª—è –æ–±—ñ–¥—É"

#: src/exercises/day-2/solutions-afternoon.md:5
msgid "([back to exercise](strings-iterators.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](strings-iterators.md))"

#: src/exercises/day-2/solutions-afternoon.md:7
msgid ""
"```rust\n"
"// Copyright 2022 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: prefix_matches\n"
"pub fn prefix_matches(prefix: &str, request_path: &str) -> bool {\n"
"    // ANCHOR_END: prefix_matches\n"
"\n"
"    let mut request_segments = request_path.split('/');\n"
"\n"
"    for prefix_segment in prefix.split('/') {\n"
"        let Some(request_segment) = request_segments.next() else {\n"
"            return false;\n"
"        };\n"
"        if request_segment != prefix_segment && prefix_segment != \"*\" {\n"
"            return false;\n"
"        }\n"
"    }\n"
"    true\n"
"\n"
"    // Alternatively, Iterator::zip() lets us iterate simultaneously over "
"prefix\n"
"    // and request segments. The zip() iterator is finished as soon as one "
"of\n"
"    // the source iterators is finished, but we need to iterate over all "
"request\n"
"    // segments. A neat trick that makes zip() work is to use map() and "
"chain()\n"
"    // to produce an iterator that returns Some(str) for each pattern "
"segments,\n"
"    // and then returns None indefinitely.\n"
"}\n"
"\n"
"// ANCHOR: unit-tests\n"
"#[test]\n"
"fn test_matches_without_wildcard() {\n"
"    assert!(prefix_matches(\"/v1/publishers\", \"/v1/publishers\"));\n"
"    assert!(prefix_matches(\"/v1/publishers\", \"/v1/publishers/"
"abc-123\"));\n"
"    assert!(prefix_matches(\"/v1/publishers\", \"/v1/publishers/abc/"
"books\"));\n"
"\n"
"    assert!(!prefix_matches(\"/v1/publishers\", \"/v1\"));\n"
"    assert!(!prefix_matches(\"/v1/publishers\", \"/v1/publishersBooks\"));\n"
"    assert!(!prefix_matches(\"/v1/publishers\", \"/v1/parent/"
"publishers\"));\n"
"}\n"
"\n"
"#[test]\n"
"fn test_matches_with_wildcard() {\n"
"    assert!(prefix_matches(\n"
"        \"/v1/publishers/*/books\",\n"
"        \"/v1/publishers/foo/books\"\n"
"    ));\n"
"    assert!(prefix_matches(\n"
"        \"/v1/publishers/*/books\",\n"
"        \"/v1/publishers/bar/books\"\n"
"    ));\n"
"    assert!(prefix_matches(\n"
"        \"/v1/publishers/*/books\",\n"
"        \"/v1/publishers/foo/books/book1\"\n"
"    ));\n"
"\n"
"    assert!(!prefix_matches(\"/v1/publishers/*/books\", \"/v1/"
"publishers\"));\n"
"    assert!(!prefix_matches(\n"
"        \"/v1/publishers/*/books\",\n"
"        \"/v1/publishers/foo/booksByAuthor\"\n"
"    ));\n"
"}\n"
"// ANCHOR_END: unit-tests\n"
"\n"
"fn main() {}\n"
"```"
msgstr ""

#: src/exercises/day-3/solutions-morning.md:1
msgid "Day 3 Morning Exercise"
msgstr "–î–µ–Ω—å 3 –†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞"

#: src/exercises/day-3/solutions-morning.md:5
msgid "([back to exercise](simple-gui.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](simple-gui.md))"

#: src/exercises/day-3/solutions-morning.md:7
msgid ""
"```rust\n"
"// Copyright 2022 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: setup\n"
"pub trait Widget {\n"
"    /// Natural width of `self`.\n"
"    fn width(&self) -> usize;\n"
"\n"
"    /// Draw the widget into a buffer.\n"
"    fn draw_into(&self, buffer: &mut dyn std::fmt::Write);\n"
"\n"
"    /// Draw the widget on standard output.\n"
"    fn draw(&self) {\n"
"        let mut buffer = String::new();\n"
"        self.draw_into(&mut buffer);\n"
"        println!(\"{buffer}\");\n"
"    }\n"
"}\n"
"\n"
"pub struct Label {\n"
"    label: String,\n"
"}\n"
"\n"
"impl Label {\n"
"    fn new(label: &str) -> Label {\n"
"        Label {\n"
"            label: label.to_owned(),\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"pub struct Button {\n"
"    label: Label,\n"
"    callback: Box<dyn FnMut()>,\n"
"}\n"
"\n"
"impl Button {\n"
"    fn new(label: &str, callback: Box<dyn FnMut()>) -> Button {\n"
"        Button {\n"
"            label: Label::new(label),\n"
"            callback,\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"pub struct Window {\n"
"    title: String,\n"
"    widgets: Vec<Box<dyn Widget>>,\n"
"}\n"
"\n"
"impl Window {\n"
"    fn new(title: &str) -> Window {\n"
"        Window {\n"
"            title: title.to_owned(),\n"
"            widgets: Vec::new(),\n"
"        }\n"
"    }\n"
"\n"
"    fn add_widget(&mut self, widget: Box<dyn Widget>) {\n"
"        self.widgets.push(widget);\n"
"    }\n"
"\n"
"    fn inner_width(&self) -> usize {\n"
"        std::cmp::max(\n"
"            self.title.chars().count(),\n"
"            self.widgets.iter().map(|w| w.width()).max().unwrap_or(0),\n"
"        )\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR_END: setup\n"
"\n"
"// ANCHOR: Window-width\n"
"impl Widget for Window {\n"
"    fn width(&self) -> usize {\n"
"        // ANCHOR_END: Window-width\n"
"        // Add 4 paddings for borders\n"
"        self.inner_width() + 4\n"
"    }\n"
"\n"
"    // ANCHOR: Window-draw_into\n"
"    fn draw_into(&self, buffer: &mut dyn std::fmt::Write) {\n"
"        // ANCHOR_END: Window-draw_into\n"
"        let mut inner = String::new();\n"
"        for widget in &self.widgets {\n"
"            widget.draw_into(&mut inner);\n"
"        }\n"
"\n"
"        let inner_width = self.inner_width();\n"
"\n"
"        // TODO: after learning about error handling, you can change\n"
"        // draw_into to return Result<(), std::fmt::Error>. Then use\n"
"        // the ?-operator here instead of .unwrap().\n"
"        writeln!(buffer, \"+-{:-<inner_width$}-+\", \"\").unwrap();\n"
"        writeln!(buffer, \"| {:^inner_width$} |\", &self.title).unwrap();\n"
"        writeln!(buffer, \"+={:=<inner_width$}=+\", \"\").unwrap();\n"
"        for line in inner.lines() {\n"
"            writeln!(buffer, \"| {:inner_width$} |\", line).unwrap();\n"
"        }\n"
"        writeln!(buffer, \"+-{:-<inner_width$}-+\", \"\").unwrap();\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: Button-width\n"
"impl Widget for Button {\n"
"    fn width(&self) -> usize {\n"
"        // ANCHOR_END: Button-width\n"
"        self.label.width() + 8 // add a bit of padding\n"
"    }\n"
"\n"
"    // ANCHOR: Button-draw_into\n"
"    fn draw_into(&self, buffer: &mut dyn std::fmt::Write) {\n"
"        // ANCHOR_END: Button-draw_into\n"
"        let width = self.width();\n"
"        let mut label = String::new();\n"
"        self.label.draw_into(&mut label);\n"
"\n"
"        writeln!(buffer, \"+{:-<width$}+\", \"\").unwrap();\n"
"        for line in label.lines() {\n"
"            writeln!(buffer, \"|{:^width$}|\", &line).unwrap();\n"
"        }\n"
"        writeln!(buffer, \"+{:-<width$}+\", \"\").unwrap();\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: Label-width\n"
"impl Widget for Label {\n"
"    fn width(&self) -> usize {\n"
"        // ANCHOR_END: Label-width\n"
"        self.label\n"
"            .lines()\n"
"            .map(|line| line.chars().count())\n"
"            .max()\n"
"            .unwrap_or(0)\n"
"    }\n"
"\n"
"    // ANCHOR: Label-draw_into\n"
"    fn draw_into(&self, buffer: &mut dyn std::fmt::Write) {\n"
"        // ANCHOR_END: Label-draw_into\n"
"        writeln!(buffer, \"{}\", &self.label).unwrap();\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: main\n"
"fn main() {\n"
"    let mut window = Window::new(\"Rust GUI Demo 1.23\");\n"
"    window.add_widget(Box::new(Label::new(\"This is a small text GUI demo."
"\")));\n"
"    window.add_widget(Box::new(Button::new(\n"
"        \"Click me!\",\n"
"        Box::new(|| println!(\"You clicked the button!\")),\n"
"    )));\n"
"    window.draw();\n"
"}\n"
"// ANCHOR_END: main\n"
"```"
msgstr ""

#: src/exercises/day-3/solutions-morning.md:177
msgid "([back to exercise](points-polygons.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](points-polygon.md))"

#: src/exercises/day-3/solutions-morning.md:179
msgid ""
"```rust\n"
"// Copyright 2022 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"#[derive(Debug, Copy, Clone, PartialEq, Eq)]\n"
"// ANCHOR: Point\n"
"pub struct Point {\n"
"    // ANCHOR_END: Point\n"
"    x: i32,\n"
"    y: i32,\n"
"}\n"
"\n"
"// ANCHOR: Point-impl\n"
"impl Point {\n"
"    // ANCHOR_END: Point-impl\n"
"    pub fn new(x: i32, y: i32) -> Point {\n"
"        Point { x, y }\n"
"    }\n"
"\n"
"    pub fn magnitude(self) -> f64 {\n"
"        f64::from(self.x.pow(2) + self.y.pow(2)).sqrt()\n"
"    }\n"
"\n"
"    pub fn dist(self, other: Point) -> f64 {\n"
"        (self - other).magnitude()\n"
"    }\n"
"}\n"
"\n"
"impl std::ops::Add for Point {\n"
"    type Output = Self;\n"
"\n"
"    fn add(self, other: Self) -> Self::Output {\n"
"        Self {\n"
"            x: self.x + other.x,\n"
"            y: self.y + other.y,\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"impl std::ops::Sub for Point {\n"
"    type Output = Self;\n"
"\n"
"    fn sub(self, other: Self) -> Self::Output {\n"
"        Self {\n"
"            x: self.x - other.x,\n"
"            y: self.y - other.y,\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: Polygon\n"
"pub struct Polygon {\n"
"    // ANCHOR_END: Polygon\n"
"    points: Vec<Point>,\n"
"}\n"
"\n"
"// ANCHOR: Polygon-impl\n"
"impl Polygon {\n"
"    // ANCHOR_END: Polygon-impl\n"
"    pub fn new() -> Polygon {\n"
"        Polygon { points: Vec::new() }\n"
"    }\n"
"\n"
"    pub fn add_point(&mut self, point: Point) {\n"
"        self.points.push(point);\n"
"    }\n"
"\n"
"    pub fn left_most_point(&self) -> Option<Point> {\n"
"        self.points.iter().min_by_key(|p| p.x).copied()\n"
"    }\n"
"\n"
"    pub fn iter(&self) -> impl Iterator<Item = &Point> {\n"
"        self.points.iter()\n"
"    }\n"
"\n"
"    pub fn length(&self) -> f64 {\n"
"        if self.points.is_empty() {\n"
"            return 0.0;\n"
"        }\n"
"\n"
"        let mut result = 0.0;\n"
"        let mut last_point = self.points[0];\n"
"        for point in &self.points[1..] {\n"
"            result += last_point.dist(*point);\n"
"            last_point = *point;\n"
"        }\n"
"        result += last_point.dist(self.points[0]);\n"
"        result\n"
"        // Alternatively, Iterator::zip() lets us iterate over the points as "
"pairs\n"
"        // but we need to pair each point with the next one, and the last "
"point\n"
"        // with the first point. The zip() iterator is finished as soon as "
"one of \n"
"        // the source iterators is finished, a neat trick is to combine "
"Iterator::cycle\n"
"        // with Iterator::skip to create the second iterator for the zip and "
"using map \n"
"        // and sum to calculate the total length.\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: Circle\n"
"pub struct Circle {\n"
"    // ANCHOR_END: Circle\n"
"    center: Point,\n"
"    radius: i32,\n"
"}\n"
"\n"
"// ANCHOR: Circle-impl\n"
"impl Circle {\n"
"    // ANCHOR_END: Circle-impl\n"
"    pub fn new(center: Point, radius: i32) -> Circle {\n"
"        Circle { center, radius }\n"
"    }\n"
"\n"
"    pub fn circumference(&self) -> f64 {\n"
"        2.0 * std::f64::consts::PI * f64::from(self.radius)\n"
"    }\n"
"\n"
"    pub fn dist(&self, other: &Self) -> f64 {\n"
"        self.center.dist(other.center)\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: Shape\n"
"pub enum Shape {\n"
"    Polygon(Polygon),\n"
"    Circle(Circle),\n"
"}\n"
"// ANCHOR_END: Shape\n"
"\n"
"impl From<Polygon> for Shape {\n"
"    fn from(poly: Polygon) -> Self {\n"
"        Shape::Polygon(poly)\n"
"    }\n"
"}\n"
"\n"
"impl From<Circle> for Shape {\n"
"    fn from(circle: Circle) -> Self {\n"
"        Shape::Circle(circle)\n"
"    }\n"
"}\n"
"\n"
"impl Shape {\n"
"    pub fn perimeter(&self) -> f64 {\n"
"        match self {\n"
"            Shape::Polygon(poly) => poly.length(),\n"
"            Shape::Circle(circle) => circle.circumference(),\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: unit-tests\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use super::*;\n"
"\n"
"    fn round_two_digits(x: f64) -> f64 {\n"
"        (x * 100.0).round() / 100.0\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_point_magnitude() {\n"
"        let p1 = Point::new(12, 13);\n"
"        assert_eq!(round_two_digits(p1.magnitude()), 17.69);\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_point_dist() {\n"
"        let p1 = Point::new(10, 10);\n"
"        let p2 = Point::new(14, 13);\n"
"        assert_eq!(round_two_digits(p1.dist(p2)), 5.00);\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_point_add() {\n"
"        let p1 = Point::new(16, 16);\n"
"        let p2 = p1 + Point::new(-4, 3);\n"
"        assert_eq!(p2, Point::new(12, 19));\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_polygon_left_most_point() {\n"
"        let p1 = Point::new(12, 13);\n"
"        let p2 = Point::new(16, 16);\n"
"\n"
"        let mut poly = Polygon::new();\n"
"        poly.add_point(p1);\n"
"        poly.add_point(p2);\n"
"        assert_eq!(poly.left_most_point(), Some(p1));\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_polygon_iter() {\n"
"        let p1 = Point::new(12, 13);\n"
"        let p2 = Point::new(16, 16);\n"
"\n"
"        let mut poly = Polygon::new();\n"
"        poly.add_point(p1);\n"
"        poly.add_point(p2);\n"
"\n"
"        let points = poly.iter().cloned().collect::<Vec<_>>();\n"
"        assert_eq!(points, vec![Point::new(12, 13), Point::new(16, 16)]);\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_shape_perimeters() {\n"
"        let mut poly = Polygon::new();\n"
"        poly.add_point(Point::new(12, 13));\n"
"        poly.add_point(Point::new(17, 11));\n"
"        poly.add_point(Point::new(16, 16));\n"
"        let shapes = vec![\n"
"            Shape::from(poly),\n"
"            Shape::from(Circle::new(Point::new(10, 20), 5)),\n"
"        ];\n"
"        let perimeters = shapes\n"
"            .iter()\n"
"            .map(Shape::perimeter)\n"
"            .map(round_two_digits)\n"
"            .collect::<Vec<_>>();\n"
"        assert_eq!(perimeters, vec![15.48, 31.42]);\n"
"    }\n"
"}\n"
"// ANCHOR_END: unit-tests\n"
"\n"
"fn main() {}\n"
"```"
msgstr ""

#: src/exercises/day-3/solutions-afternoon.md:1
msgid "Day 3 Afternoon Exercises"
msgstr "–î–µ–Ω—å 3 –ü—ñ—Å–ª—è –æ–±—ñ–¥—É"

#: src/exercises/day-3/solutions-afternoon.md:5
msgid "([back to exercise](safe-ffi-wrapper.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](safe-ffi-wrapper.md))"

#: src/exercises/day-3/solutions-afternoon.md:7
msgid ""
"```rust\n"
"// Copyright 2022 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: ffi\n"
"mod ffi {\n"
"    use std::os::raw::{c_char, c_int};\n"
"    #[cfg(not(target_os = \"macos\"))]\n"
"    use std::os::raw::{c_long, c_ulong, c_ushort, c_uchar};\n"
"\n"
"    // Opaque type. See https://doc.rust-lang.org/nomicon/ffi.html.\n"
"    #[repr(C)]\n"
"    pub struct DIR {\n"
"        _data: [u8; 0],\n"
"        _marker: core::marker::PhantomData<(*mut u8, core::marker::"
"PhantomPinned)>,\n"
"    }\n"
"\n"
"    // Layout according to the Linux man page for readdir(3), where ino_t "
"and\n"
"    // off_t are resolved according to the definitions in\n"
"    // /usr/include/x86_64-linux-gnu/{sys/types.h, bits/typesizes.h}.\n"
"    #[cfg(not(target_os = \"macos\"))]\n"
"    #[repr(C)]\n"
"    pub struct dirent {\n"
"        pub d_ino: c_ulong,\n"
"        pub d_off: c_long,\n"
"        pub d_reclen: c_ushort,\n"
"        pub d_type: c_uchar,\n"
"        pub d_name: [c_char; 256],\n"
"    }\n"
"\n"
"    // Layout according to the macOS man page for dir(5).\n"
"    #[cfg(all(target_os = \"macos\"))]\n"
"    #[repr(C)]\n"
"    pub struct dirent {\n"
"        pub d_fileno: u64,\n"
"        pub d_seekoff: u64,\n"
"        pub d_reclen: u16,\n"
"        pub d_namlen: u16,\n"
"        pub d_type: u8,\n"
"        pub d_name: [c_char; 1024],\n"
"    }\n"
"\n"
"    extern \"C\" {\n"
"        pub fn opendir(s: *const c_char) -> *mut DIR;\n"
"\n"
"        #[cfg(not(all(target_os = \"macos\", target_arch = \"x86_64\")))]\n"
"        pub fn readdir(s: *mut DIR) -> *const dirent;\n"
"\n"
"        // See https://github.com/rust-lang/libc/issues/414 and the section "
"on\n"
"        // _DARWIN_FEATURE_64_BIT_INODE in the macOS man page for stat(2).\n"
"        //\n"
"        // \"Platforms that existed before these updates were available\" "
"refers\n"
"        // to macOS (as opposed to iOS / wearOS / etc.) on Intel and "
"PowerPC.\n"
"        #[cfg(all(target_os = \"macos\", target_arch = \"x86_64\"))]\n"
"        #[link_name = \"readdir$INODE64\"]\n"
"        pub fn readdir(s: *mut DIR) -> *const dirent;\n"
"\n"
"        pub fn closedir(s: *mut DIR) -> c_int;\n"
"    }\n"
"}\n"
"\n"
"use std::ffi::{CStr, CString, OsStr, OsString};\n"
"use std::os::unix::ffi::OsStrExt;\n"
"\n"
"#[derive(Debug)]\n"
"struct DirectoryIterator {\n"
"    path: CString,\n"
"    dir: *mut ffi::DIR,\n"
"}\n"
"// ANCHOR_END: ffi\n"
"\n"
"// ANCHOR: DirectoryIterator\n"
"impl DirectoryIterator {\n"
"    fn new(path: &str) -> Result<DirectoryIterator, String> {\n"
"        // Call opendir and return a Ok value if that worked,\n"
"        // otherwise return Err with a message.\n"
"        // ANCHOR_END: DirectoryIterator\n"
"        let path = CString::new(path).map_err(|err| format!(\"Invalid path: "
"{err}\"))?;\n"
"        // SAFETY: path.as_ptr() cannot be NULL.\n"
"        let dir = unsafe { ffi::opendir(path.as_ptr()) };\n"
"        if dir.is_null() {\n"
"            Err(format!(\"Could not open {:?}\", path))\n"
"        } else {\n"
"            Ok(DirectoryIterator { path, dir })\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: Iterator\n"
"impl Iterator for DirectoryIterator {\n"
"    type Item = OsString;\n"
"    fn next(&mut self) -> Option<OsString> {\n"
"        // Keep calling readdir until we get a NULL pointer back.\n"
"        // ANCHOR_END: Iterator\n"
"        // SAFETY: self.dir is never NULL.\n"
"        let dirent = unsafe { ffi::readdir(self.dir) };\n"
"        if dirent.is_null() {\n"
"            // We have reached the end of the directory.\n"
"            return None;\n"
"        }\n"
"        // SAFETY: dirent is not NULL and dirent.d_name is NUL\n"
"        // terminated.\n"
"        let d_name = unsafe { CStr::from_ptr((*dirent).d_name.as_ptr()) };\n"
"        let os_str = OsStr::from_bytes(d_name.to_bytes());\n"
"        Some(os_str.to_owned())\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: Drop\n"
"impl Drop for DirectoryIterator {\n"
"    fn drop(&mut self) {\n"
"        // Call closedir as needed.\n"
"        // ANCHOR_END: Drop\n"
"        if !self.dir.is_null() {\n"
"            // SAFETY: self.dir is not NULL.\n"
"            if unsafe { ffi::closedir(self.dir) } != 0 {\n"
"                panic!(\"Could not close {:?}\", self.path);\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"// ANCHOR: main\n"
"fn main() -> Result<(), String> {\n"
"    let iter = DirectoryIterator::new(\".\")?;\n"
"    println!(\"files: {:#?}\", iter.collect::<Vec<_>>());\n"
"    Ok(())\n"
"}\n"
"// ANCHOR_END: main\n"
"\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use super::*;\n"
"    use std::error::Error;\n"
"\n"
"    #[test]\n"
"    fn test_nonexisting_directory() {\n"
"        let iter = DirectoryIterator::new(\"no-such-directory\");\n"
"        assert!(iter.is_err());\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_empty_directory() -> Result<(), Box<dyn Error>> {\n"
"        let tmp = tempfile::TempDir::new()?;\n"
"        let iter = DirectoryIterator::new(\n"
"            tmp.path().to_str().ok_or(\"Non UTF-8 character in path\")?,\n"
"        )?;\n"
"        let mut entries = iter.collect::<Vec<_>>();\n"
"        entries.sort();\n"
"        assert_eq!(entries, &[\".\", \"..\"]);\n"
"        Ok(())\n"
"    }\n"
"\n"
"    #[test]\n"
"    fn test_nonempty_directory() -> Result<(), Box<dyn Error>> {\n"
"        let tmp = tempfile::TempDir::new()?;\n"
"        std::fs::write(tmp.path().join(\"foo.txt\"), \"The Foo "
"Diaries\\n\")?;\n"
"        std::fs::write(tmp.path().join(\"bar.png\"), \"<PNG>\\n\")?;\n"
"        std::fs::write(tmp.path().join(\"crab.rs\"), \"//! Crab\\n\")?;\n"
"        let iter = DirectoryIterator::new(\n"
"            tmp.path().to_str().ok_or(\"Non UTF-8 character in path\")?,\n"
"        )?;\n"
"        let mut entries = iter.collect::<Vec<_>>();\n"
"        entries.sort();\n"
"        assert_eq!(entries, &[\".\", \"..\", \"bar.png\", \"crab.rs\", \"foo."
"txt\"]);\n"
"        Ok(())\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:1
msgid "Bare Metal Rust Morning Exercise"
msgstr "–†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞ Bare Metal Rust"

#: src/exercises/bare-metal/solutions-morning.md:5
msgid "([back to exercise](compass.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](compass.md))"

#: src/exercises/bare-metal/solutions-morning.md:7
msgid ""
"```rust,compile_fail\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: top\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"extern crate panic_halt as _;\n"
"\n"
"use core::fmt::Write;\n"
"use cortex_m_rt::entry;\n"
"// ANCHOR_END: top\n"
"use core::cmp::{max, min};\n"
"use lsm303agr::{AccelOutputDataRate, Lsm303agr, MagOutputDataRate};\n"
"use microbit::display::blocking::Display;\n"
"use microbit::hal::prelude::*;\n"
"use microbit::hal::twim::Twim;\n"
"use microbit::hal::uarte::{Baudrate, Parity, Uarte};\n"
"use microbit::hal::Timer;\n"
"use microbit::pac::twim0::frequency::FREQUENCY_A;\n"
"use microbit::Board;\n"
"\n"
"const COMPASS_SCALE: i32 = 30000;\n"
"const ACCELEROMETER_SCALE: i32 = 700;\n"
"\n"
"// ANCHOR: main\n"
"#[entry]\n"
"fn main() -> ! {\n"
"    let board = Board::take().unwrap();\n"
"\n"
"    // Configure serial port.\n"
"    let mut serial = Uarte::new(\n"
"        board.UARTE0,\n"
"        board.uart.into(),\n"
"        Parity::EXCLUDED,\n"
"        Baudrate::BAUD115200,\n"
"    );\n"
"\n"
"    // Set up the I2C controller and Inertial Measurement Unit.\n"
"    // ANCHOR_END: main\n"
"    writeln!(serial, \"Setting up IMU...\").unwrap();\n"
"    let i2c = Twim::new(board.TWIM0, board.i2c_internal.into(), FREQUENCY_A::"
"K100);\n"
"    let mut imu = Lsm303agr::new_with_i2c(i2c);\n"
"    imu.init().unwrap();\n"
"    imu.set_mag_odr(MagOutputDataRate::Hz50).unwrap();\n"
"    imu.set_accel_odr(AccelOutputDataRate::Hz50).unwrap();\n"
"    let mut imu = imu.into_mag_continuous().ok().unwrap();\n"
"\n"
"    // Set up display and timer.\n"
"    let mut timer = Timer::new(board.TIMER0);\n"
"    let mut display = Display::new(board.display_pins);\n"
"\n"
"    let mut mode = Mode::Compass;\n"
"    let mut button_pressed = false;\n"
"\n"
"    // ANCHOR: loop\n"
"    writeln!(serial, \"Ready.\").unwrap();\n"
"\n"
"    loop {\n"
"        // Read compass data and log it to the serial port.\n"
"        // ANCHOR_END: loop\n"
"        while !(imu.mag_status().unwrap().xyz_new_data\n"
"            && imu.accel_status().unwrap().xyz_new_data)\n"
"        {}\n"
"        let compass_reading = imu.mag_data().unwrap();\n"
"        let accelerometer_reading = imu.accel_data().unwrap();\n"
"        writeln!(\n"
"            serial,\n"
"            \"{},{},{}\\t{},{},{}\",\n"
"            compass_reading.x,\n"
"            compass_reading.y,\n"
"            compass_reading.z,\n"
"            accelerometer_reading.x,\n"
"            accelerometer_reading.y,\n"
"            accelerometer_reading.z,\n"
"        )\n"
"        .unwrap();\n"
"\n"
"        let mut image = [[0; 5]; 5];\n"
"        let (x, y) = match mode {\n"
"            Mode::Compass => (\n"
"                scale(-compass_reading.x, -COMPASS_SCALE, COMPASS_SCALE, 0, "
"4) as usize,\n"
"                scale(compass_reading.y, -COMPASS_SCALE, COMPASS_SCALE, 0, "
"4) as usize,\n"
"            ),\n"
"            Mode::Accelerometer => (\n"
"                scale(\n"
"                    accelerometer_reading.x,\n"
"                    -ACCELEROMETER_SCALE,\n"
"                    ACCELEROMETER_SCALE,\n"
"                    0,\n"
"                    4,\n"
"                ) as usize,\n"
"                scale(\n"
"                    -accelerometer_reading.y,\n"
"                    -ACCELEROMETER_SCALE,\n"
"                    ACCELEROMETER_SCALE,\n"
"                    0,\n"
"                    4,\n"
"                ) as usize,\n"
"            ),\n"
"        };\n"
"        image[y][x] = 255;\n"
"        display.show(&mut timer, image, 100);\n"
"\n"
"        // If button A is pressed, switch to the next mode and briefly blink "
"all LEDs on.\n"
"        if board.buttons.button_a.is_low().unwrap() {\n"
"            if !button_pressed {\n"
"                mode = mode.next();\n"
"                display.show(&mut timer, [[255; 5]; 5], 200);\n"
"            }\n"
"            button_pressed = true;\n"
"        } else {\n"
"            button_pressed = false;\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n"
"enum Mode {\n"
"    Compass,\n"
"    Accelerometer,\n"
"}\n"
"\n"
"impl Mode {\n"
"    fn next(self) -> Self {\n"
"        match self {\n"
"            Self::Compass => Self::Accelerometer,\n"
"            Self::Accelerometer => Self::Compass,\n"
"        }\n"
"    }\n"
"}\n"
"\n"
"fn scale(value: i32, min_in: i32, max_in: i32, min_out: i32, max_out: i32) -"
"> i32 {\n"
"    let range_in = max_in - min_in;\n"
"    let range_out = max_out - min_out;\n"
"    cap(\n"
"        min_out + range_out * (value - min_in) / range_in,\n"
"        min_out,\n"
"        max_out,\n"
"    )\n"
"}\n"
"\n"
"fn cap(value: i32, min_value: i32, max_value: i32) -> i32 {\n"
"    max(min_value, min(value, max_value))\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:5
msgid "([back to exercise](rtc.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](rtc.md))"

#: src/exercises/bare-metal/solutions-afternoon.md:7
msgid "`main.rs`:"
msgstr "`main.rs`:"

#: src/exercises/bare-metal/solutions-afternoon.md:9
msgid ""
"```rust,compile_fail\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: top\n"
"#![no_main]\n"
"#![no_std]\n"
"\n"
"mod exceptions;\n"
"mod logger;\n"
"mod pl011;\n"
"// ANCHOR_END: top\n"
"mod pl031;\n"
"\n"
"use crate::pl031::Rtc;\n"
"use arm_gic::gicv3::{IntId, Trigger};\n"
"use arm_gic::{irq_enable, wfi};\n"
"use chrono::{TimeZone, Utc};\n"
"use core::hint::spin_loop;\n"
"// ANCHOR: imports\n"
"use crate::pl011::Uart;\n"
"use arm_gic::gicv3::GicV3;\n"
"use core::panic::PanicInfo;\n"
"use log::{error, info, trace, LevelFilter};\n"
"use smccc::psci::system_off;\n"
"use smccc::Hvc;\n"
"\n"
"/// Base addresses of the GICv3.\n"
"const GICD_BASE_ADDRESS: *mut u64 = 0x800_0000 as _;\n"
"const GICR_BASE_ADDRESS: *mut u64 = 0x80A_0000 as _;\n"
"\n"
"/// Base address of the primary PL011 UART.\n"
"const PL011_BASE_ADDRESS: *mut u32 = 0x900_0000 as _;\n"
"// ANCHOR_END: imports\n"
"\n"
"/// Base address of the PL031 RTC.\n"
"const PL031_BASE_ADDRESS: *mut u32 = 0x901_0000 as _;\n"
"/// The IRQ used by the PL031 RTC.\n"
"const PL031_IRQ: IntId = IntId::spi(2);\n"
"\n"
"// ANCHOR: main\n"
"#[no_mangle]\n"
"extern \"C\" fn main(x0: u64, x1: u64, x2: u64, x3: u64) {\n"
"    // Safe because `PL011_BASE_ADDRESS` is the base address of a PL011 "
"device,\n"
"    // and nothing else accesses that address range.\n"
"    let uart = unsafe { Uart::new(PL011_BASE_ADDRESS) };\n"
"    logger::init(uart, LevelFilter::Trace).unwrap();\n"
"\n"
"    info!(\"main({:#x}, {:#x}, {:#x}, {:#x})\", x0, x1, x2, x3);\n"
"\n"
"    // Safe because `GICD_BASE_ADDRESS` and `GICR_BASE_ADDRESS` are the "
"base\n"
"    // addresses of a GICv3 distributor and redistributor respectively, and\n"
"    // nothing else accesses those address ranges.\n"
"    let mut gic = unsafe { GicV3::new(GICD_BASE_ADDRESS, "
"GICR_BASE_ADDRESS) };\n"
"    gic.setup();\n"
"    // ANCHOR_END: main\n"
"\n"
"    // Safe because `PL031_BASE_ADDRESS` is the base address of a PL031 "
"device,\n"
"    // and nothing else accesses that address range.\n"
"    let mut rtc = unsafe { Rtc::new(PL031_BASE_ADDRESS) };\n"
"    let timestamp = rtc.read();\n"
"    let time = Utc.timestamp_opt(timestamp.into(), 0).unwrap();\n"
"    info!(\"RTC: {time}\");\n"
"\n"
"    GicV3::set_priority_mask(0xff);\n"
"    gic.set_interrupt_priority(PL031_IRQ, 0x80);\n"
"    gic.set_trigger(PL031_IRQ, Trigger::Level);\n"
"    irq_enable();\n"
"    gic.enable_interrupt(PL031_IRQ, true);\n"
"\n"
"    // Wait for 3 seconds, without interrupts.\n"
"    let target = timestamp + 3;\n"
"    rtc.set_match(target);\n"
"    info!(\n"
"        \"Waiting for {}\",\n"
"        Utc.timestamp_opt(target.into(), 0).unwrap()\n"
"    );\n"
"    trace!(\n"
"        \"matched={}, interrupt_pending={}\",\n"
"        rtc.matched(),\n"
"        rtc.interrupt_pending()\n"
"    );\n"
"    while !rtc.matched() {\n"
"        spin_loop();\n"
"    }\n"
"    trace!(\n"
"        \"matched={}, interrupt_pending={}\",\n"
"        rtc.matched(),\n"
"        rtc.interrupt_pending()\n"
"    );\n"
"    info!(\"Finished waiting\");\n"
"\n"
"    // Wait another 3 seconds for an interrupt.\n"
"    let target = timestamp + 6;\n"
"    info!(\n"
"        \"Waiting for {}\",\n"
"        Utc.timestamp_opt(target.into(), 0).unwrap()\n"
"    );\n"
"    rtc.set_match(target);\n"
"    rtc.clear_interrupt();\n"
"    rtc.enable_interrupt(true);\n"
"    trace!(\n"
"        \"matched={}, interrupt_pending={}\",\n"
"        rtc.matched(),\n"
"        rtc.interrupt_pending()\n"
"    );\n"
"    while !rtc.interrupt_pending() {\n"
"        wfi();\n"
"    }\n"
"    trace!(\n"
"        \"matched={}, interrupt_pending={}\",\n"
"        rtc.matched(),\n"
"        rtc.interrupt_pending()\n"
"    );\n"
"    info!(\"Finished waiting\");\n"
"\n"
"    // ANCHOR: main_end\n"
"    system_off::<Hvc>().unwrap();\n"
"}\n"
"\n"
"#[panic_handler]\n"
"fn panic(info: &PanicInfo) -> ! {\n"
"    error!(\"{info}\");\n"
"    system_off::<Hvc>().unwrap();\n"
"    loop {}\n"
"}\n"
"// ANCHOR_END: main_end\n"
"```"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:149
msgid "`pl031.rs`:"
msgstr "`pl031.rs`:"

#: src/exercises/bare-metal/solutions-afternoon.md:151
msgid ""
"```rust\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"use core::ptr::{addr_of, addr_of_mut};\n"
"\n"
"#[repr(C, align(4))]\n"
"struct Registers {\n"
"    /// Data register\n"
"    dr: u32,\n"
"    /// Match register\n"
"    mr: u32,\n"
"    /// Load register\n"
"    lr: u32,\n"
"    /// Control register\n"
"    cr: u8,\n"
"    _reserved0: [u8; 3],\n"
"    /// Interrupt Mask Set or Clear register\n"
"    imsc: u8,\n"
"    _reserved1: [u8; 3],\n"
"    /// Raw Interrupt Status\n"
"    ris: u8,\n"
"    _reserved2: [u8; 3],\n"
"    /// Masked Interrupt Status\n"
"    mis: u8,\n"
"    _reserved3: [u8; 3],\n"
"    /// Interrupt Clear Register\n"
"    icr: u8,\n"
"    _reserved4: [u8; 3],\n"
"}\n"
"\n"
"/// Driver for a PL031 real-time clock.\n"
"#[derive(Debug)]\n"
"pub struct Rtc {\n"
"    registers: *mut Registers,\n"
"}\n"
"\n"
"impl Rtc {\n"
"    /// Constructs a new instance of the RTC driver for a PL031 device at "
"the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL031 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
"    pub unsafe fn new(base_address: *mut u32) -> Self {\n"
"        Self {\n"
"            registers: base_address as *mut Registers,\n"
"        }\n"
"    }\n"
"\n"
"    /// Reads the current RTC value.\n"
"    pub fn read(&self) -> u32 {\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL031 device which is appropriately mapped.\n"
"        unsafe { addr_of!((*self.registers).dr).read_volatile() }\n"
"    }\n"
"\n"
"    /// Writes a match value. When the RTC value matches this then an "
"interrupt\n"
"    /// will be generated (if it is enabled).\n"
"    pub fn set_match(&mut self, value: u32) {\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL031 device which is appropriately mapped.\n"
"        unsafe { addr_of_mut!((*self.registers).mr).write_volatile(value) }\n"
"    }\n"
"\n"
"    /// Returns whether the match register matches the RTC value, whether or "
"not\n"
"    /// the interrupt is enabled.\n"
"    pub fn matched(&self) -> bool {\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL031 device which is appropriately mapped.\n"
"        let ris = unsafe { addr_of!((*self.registers).ris)."
"read_volatile() };\n"
"        (ris & 0x01) != 0\n"
"    }\n"
"\n"
"    /// Returns whether there is currently an interrupt pending.\n"
"    ///\n"
"    /// This should be true if and only if `matched` returns true and the\n"
"    /// interrupt is masked.\n"
"    pub fn interrupt_pending(&self) -> bool {\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL031 device which is appropriately mapped.\n"
"        let ris = unsafe { addr_of!((*self.registers).mis)."
"read_volatile() };\n"
"        (ris & 0x01) != 0\n"
"    }\n"
"\n"
"    /// Sets or clears the interrupt mask.\n"
"    ///\n"
"    /// When the mask is true the interrupt is enabled; when it is false "
"the\n"
"    /// interrupt is disabled.\n"
"    pub fn enable_interrupt(&mut self, mask: bool) {\n"
"        let imsc = if mask { 0x01 } else { 0x00 };\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL031 device which is appropriately mapped.\n"
"        unsafe { addr_of_mut!((*self.registers).imsc)."
"write_volatile(imsc) }\n"
"    }\n"
"\n"
"    /// Clears a pending interrupt, if any.\n"
"    pub fn clear_interrupt(&mut self) {\n"
"        // Safe because we know that self.registers points to the control\n"
"        // registers of a PL031 device which is appropriately mapped.\n"
"        unsafe { addr_of_mut!((*self.registers).icr).write_volatile(0x01) }\n"
"    }\n"
"}\n"
"\n"
"// Safe because it just contains a pointer to device memory, which can be\n"
"// accessed from any context.\n"
"unsafe impl Send for Rtc {}\n"
"```"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:1
msgid "Concurrency Morning Exercise"
msgstr "–ü–∞—Ä–∞–ª–µ–ª—å–Ω—ñ—Å—Ç—å –†–∞–Ω–∫–æ–≤–∞ –∑–∞—Ä—è–¥–∫–∞"

#: src/exercises/concurrency/solutions-morning.md:5
msgid "([back to exercise](dining-philosophers.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](dining-philosophers.md))"

#: src/exercises/concurrency/solutions-morning.md:7
msgid ""
"```rust\n"
"// Copyright 2022 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: Philosopher\n"
"use std::sync::{mpsc, Arc, Mutex};\n"
"use std::thread;\n"
"use std::time::Duration;\n"
"\n"
"struct Fork;\n"
"\n"
"struct Philosopher {\n"
"    name: String,\n"
"    // ANCHOR_END: Philosopher\n"
"    left_fork: Arc<Mutex<Fork>>,\n"
"    right_fork: Arc<Mutex<Fork>>,\n"
"    thoughts: mpsc::SyncSender<String>,\n"
"}\n"
"\n"
"// ANCHOR: Philosopher-think\n"
"impl Philosopher {\n"
"    fn think(&self) {\n"
"        self.thoughts\n"
"            .send(format!(\"Eureka! {} has a new idea!\", &self.name))\n"
"            .unwrap();\n"
"    }\n"
"    // ANCHOR_END: Philosopher-think\n"
"\n"
"    // ANCHOR: Philosopher-eat\n"
"    fn eat(&self) {\n"
"        // ANCHOR_END: Philosopher-eat\n"
"        println!(\"{} is trying to eat\", &self.name);\n"
"        let left = self.left_fork.lock().unwrap();\n"
"        let right = self.right_fork.lock().unwrap();\n"
"\n"
"        // ANCHOR: Philosopher-eat-end\n"
"        println!(\"{} is eating...\", &self.name);\n"
"        thread::sleep(Duration::from_millis(10));\n"
"    }\n"
"}\n"
"\n"
"static PHILOSOPHERS: &[&str] =\n"
"    &[\"Socrates\", \"Plato\", \"Aristotle\", \"Thales\", \"Pythagoras\"];\n"
"\n"
"fn main() {\n"
"    // ANCHOR_END: Philosopher-eat-end\n"
"    let (tx, rx) = mpsc::sync_channel(10);\n"
"\n"
"    let forks = (0..PHILOSOPHERS.len())\n"
"        .map(|_| Arc::new(Mutex::new(Fork)))\n"
"        .collect::<Vec<_>>();\n"
"\n"
"    for i in 0..forks.len() {\n"
"        let tx = tx.clone();\n"
"        let mut left_fork = Arc::clone(&forks[i]);\n"
"        let mut right_fork = Arc::clone(&forks[(i + 1) % forks.len()]);\n"
"\n"
"        // To avoid a deadlock, we have to break the symmetry\n"
"        // somewhere. This will swap the forks without deinitializing\n"
"        // either of them.\n"
"        if i == forks.len() - 1 {\n"
"            std::mem::swap(&mut left_fork, &mut right_fork);\n"
"        }\n"
"\n"
"        let philosopher = Philosopher {\n"
"            name: PHILOSOPHERS[i].to_string(),\n"
"            thoughts: tx,\n"
"            left_fork,\n"
"            right_fork,\n"
"        };\n"
"\n"
"        thread::spawn(move || {\n"
"            for _ in 0..100 {\n"
"                philosopher.eat();\n"
"                philosopher.think();\n"
"            }\n"
"        });\n"
"    }\n"
"\n"
"    drop(tx);\n"
"    for thought in rx {\n"
"        println!(\"{thought}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:104
msgid "Link Checker"
msgstr "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Å–∏–ª–∞–Ω—å"

#: src/exercises/concurrency/solutions-morning.md:106
msgid "([back to exercise](link-checker.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](link-checker.md))"

#: src/exercises/concurrency/solutions-morning.md:108
msgid ""
"```rust,compile_fail\n"
"// Copyright 2022 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"use std::{sync::Arc, sync::Mutex, sync::mpsc, thread};\n"
"\n"
"// ANCHOR: setup\n"
"use reqwest::{blocking::Client, Url};\n"
"use scraper::{Html, Selector};\n"
"use thiserror::Error;\n"
"\n"
"#[derive(Error, Debug)]\n"
"enum Error {\n"
"    #[error(\"request error: {0}\")]\n"
"    ReqwestError(#[from] reqwest::Error),\n"
"    #[error(\"bad http response: {0}\")]\n"
"    BadResponse(String),\n"
"}\n"
"// ANCHOR_END: setup\n"
"\n"
"// ANCHOR: visit_page\n"
"#[derive(Debug)]\n"
"struct CrawlCommand {\n"
"    url: Url,\n"
"    extract_links: bool,\n"
"}\n"
"\n"
"fn visit_page(client: &Client, command: &CrawlCommand) -> Result<Vec<Url>, "
"Error> {\n"
"    println!(\"Checking {:#}\", command.url);\n"
"    let response = client.get(command.url.clone()).send()?;\n"
"    if !response.status().is_success() {\n"
"        return Err(Error::BadResponse(response.status().to_string()));\n"
"    }\n"
"\n"
"    let mut link_urls = Vec::new();\n"
"    if !command.extract_links {\n"
"        return Ok(link_urls);\n"
"    }\n"
"\n"
"    let base_url = response.url().to_owned();\n"
"    let body_text = response.text()?;\n"
"    let document = Html::parse_document(&body_text);\n"
"\n"
"    let selector = Selector::parse(\"a\").unwrap();\n"
"    let href_values = document\n"
"        .select(&selector)\n"
"        .filter_map(|element| element.value().attr(\"href\"));\n"
"    for href in href_values {\n"
"        match base_url.join(href) {\n"
"            Ok(link_url) => {\n"
"                link_urls.push(link_url);\n"
"            }\n"
"            Err(err) => {\n"
"                println!(\"On {base_url:#}: ignored unparsable {href:?}: "
"{err}\");\n"
"            }\n"
"        }\n"
"    }\n"
"    Ok(link_urls)\n"
"}\n"
"// ANCHOR_END: visit_page\n"
"\n"
"struct CrawlState {\n"
"    domain: String,\n"
"    visited_pages: std::collections::HashSet<String>,\n"
"}\n"
"\n"
"impl CrawlState {\n"
"    fn new(start_url: &Url) -> CrawlState {\n"
"        let mut visited_pages = std::collections::HashSet::new();\n"
"        visited_pages.insert(start_url.as_str().to_string());\n"
"        CrawlState {\n"
"            domain: start_url.domain().unwrap().to_string(),\n"
"            visited_pages,\n"
"        }\n"
"    }\n"
"\n"
"    /// Determine whether links within the given page should be extracted.\n"
"    fn should_extract_links(&self, url: &Url) -> bool {\n"
"        let Some(url_domain) = url.domain() else {\n"
"            return false;\n"
"        };\n"
"        url_domain == self.domain\n"
"    }\n"
"\n"
"    /// Mark the given page as visited, returning true if it had already\n"
"    /// been visited.\n"
"    fn mark_visited(&mut self, url: &Url) -> bool {\n"
"        self.visited_pages.insert(url.as_str().to_string())\n"
"    }\n"
"}\n"
"\n"
"type CrawlResult = Result<Vec<Url>, (Url, Error)>;\n"
"fn spawn_crawler_threads(\n"
"    command_receiver: mpsc::Receiver<CrawlCommand>,\n"
"    result_sender: mpsc::Sender<CrawlResult>,\n"
"    thread_count: u32,\n"
") {\n"
"    let command_receiver = Arc::new(Mutex::new(command_receiver));\n"
"\n"
"    for _ in 0..thread_count {\n"
"        let result_sender = result_sender.clone();\n"
"        let command_receiver = command_receiver.clone();\n"
"        thread::spawn(move || {\n"
"            let client = Client::new();\n"
"            loop {\n"
"                let command_result = {\n"
"                    let receiver_guard = command_receiver.lock().unwrap();\n"
"                    receiver_guard.recv()\n"
"                };\n"
"                let Ok(crawl_command) = command_result else {\n"
"                    // The sender got dropped. No more commands coming in.\n"
"                    break;\n"
"                };\n"
"                let crawl_result = match visit_page(&client, &crawl_command) "
"{\n"
"                    Ok(link_urls) => Ok(link_urls),\n"
"                    Err(error) => Err((crawl_command.url, error)),\n"
"                };\n"
"                result_sender.send(crawl_result).unwrap();\n"
"            }\n"
"        });\n"
"    }\n"
"}\n"
"\n"
"fn control_crawl(\n"
"    start_url: Url,\n"
"    command_sender: mpsc::Sender<CrawlCommand>,\n"
"    result_receiver: mpsc::Receiver<CrawlResult>,\n"
") -> Vec<Url> {\n"
"    let mut crawl_state = CrawlState::new(&start_url);\n"
"    let start_command = CrawlCommand { url: start_url, extract_links: "
"true };\n"
"    command_sender.send(start_command).unwrap();\n"
"    let mut pending_urls = 1;\n"
"\n"
"    let mut bad_urls = Vec::new();\n"
"    while pending_urls > 0 {\n"
"        let crawl_result = result_receiver.recv().unwrap();\n"
"        pending_urls -= 1;\n"
"\n"
"        match crawl_result {\n"
"            Ok(link_urls) => {\n"
"                for url in link_urls {\n"
"                    if crawl_state.mark_visited(&url) {\n"
"                        let extract_links = crawl_state."
"should_extract_links(&url);\n"
"                        let crawl_command = CrawlCommand { url, "
"extract_links };\n"
"                        command_sender.send(crawl_command).unwrap();\n"
"                        pending_urls += 1;\n"
"                    }\n"
"                }\n"
"            }\n"
"            Err((url, error)) => {\n"
"                bad_urls.push(url);\n"
"                println!(\"Got crawling error: {:#}\", error);\n"
"                continue;\n"
"            }\n"
"        }\n"
"    }\n"
"    bad_urls\n"
"}\n"
"\n"
"fn check_links(start_url: Url) -> Vec<Url> {\n"
"    let (result_sender, result_receiver) = mpsc::channel::<CrawlResult>();\n"
"    let (command_sender, command_receiver) = mpsc::channel::"
"<CrawlCommand>();\n"
"    spawn_crawler_threads(command_receiver, result_sender, 16);\n"
"    control_crawl(start_url, command_sender, result_receiver)\n"
"}\n"
"\n"
"fn main() {\n"
"    let start_url = reqwest::Url::parse(\"https://www.google.org\")."
"unwrap();\n"
"    let bad_urls = check_links(start_url);\n"
"    println!(\"Bad URLs: {:#?}\", bad_urls);\n"
"}\n"
"```"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:1
msgid "Concurrency Afternoon Exercise"
msgstr "–û–¥–Ω–æ—á–∞—Å–Ω–∞ –ø—ñ—Å–ª—è–æ–±—ñ–¥–Ω—è –≤–ø—Ä–∞–≤–∞"

#: src/exercises/concurrency/solutions-afternoon.md:5
msgid "([back to exercise](dining-philosophers-async.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](dining-philosophers-async.md))"

#: src/exercises/concurrency/solutions-afternoon.md:7
msgid ""
"```rust,compile_fail\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: Philosopher\n"
"use std::sync::Arc;\n"
"use tokio::time;\n"
"use tokio::sync::mpsc::{self, Sender};\n"
"use tokio::sync::Mutex;\n"
"\n"
"struct Fork;\n"
"\n"
"struct Philosopher {\n"
"    name: String,\n"
"    // ANCHOR_END: Philosopher\n"
"    left_fork: Arc<Mutex<Fork>>,\n"
"    right_fork: Arc<Mutex<Fork>>,\n"
"    thoughts: Sender<String>,\n"
"}\n"
"\n"
"// ANCHOR: Philosopher-think\n"
"impl Philosopher {\n"
"    async fn think(&self) {\n"
"        self.thoughts\n"
"            .send(format!(\"Eureka! {} has a new idea!\", &self.name))."
"await\n"
"            .unwrap();\n"
"    }\n"
"    // ANCHOR_END: Philosopher-think\n"
"\n"
"    // ANCHOR: Philosopher-eat\n"
"    async fn eat(&self) {\n"
"        // Pick up forks...\n"
"        // ANCHOR_END: Philosopher-eat\n"
"        let _first_lock = self.left_fork.lock().await;\n"
"        // Add a delay before picking the second fork to allow the "
"execution\n"
"        // to transfer to another task\n"
"        time::sleep(time::Duration::from_millis(1)).await;\n"
"        let _second_lock = self.right_fork.lock().await;\n"
"\n"
"        // ANCHOR: Philosopher-eat-body\n"
"        println!(\"{} is eating...\", &self.name);\n"
"        time::sleep(time::Duration::from_millis(5)).await;\n"
"        // ANCHOR_END: Philosopher-eat-body\n"
"\n"
"        // The locks are dropped here\n"
"        // ANCHOR: Philosopher-eat-end\n"
"    }\n"
"}\n"
"\n"
"static PHILOSOPHERS: &[&str] =\n"
"    &[\"Socrates\", \"Plato\", \"Aristotle\", \"Thales\", \"Pythagoras\"];\n"
"\n"
"#[tokio::main]\n"
"async fn main() {\n"
"    // ANCHOR_END: Philosopher-eat-end\n"
"    // Create forks\n"
"    let mut forks = vec![];\n"
"    (0..PHILOSOPHERS.len()).for_each(|_| forks.push(Arc::new(Mutex::"
"new(Fork))));\n"
"\n"
"    // Create philosophers\n"
"    let (philosophers, mut rx) = {\n"
"        let mut philosophers = vec![];\n"
"        let (tx, rx) = mpsc::channel(10);\n"
"        for (i, name) in PHILOSOPHERS.iter().enumerate() {\n"
"            let left_fork = Arc::clone(&forks[i]);\n"
"            let right_fork = Arc::clone(&forks[(i + 1) % PHILOSOPHERS."
"len()]);\n"
"            // To avoid a deadlock, we have to break the symmetry\n"
"            // somewhere. This will swap the forks without deinitializing\n"
"            // either of them.\n"
"            if i  == 0 {\n"
"                std::mem::swap(&mut left_fork, &mut right_fork);\n"
"            }\n"
"            philosophers.push(Philosopher {\n"
"                name: name.to_string(),\n"
"                left_fork,\n"
"                right_fork,\n"
"                thoughts: tx.clone(),\n"
"            });\n"
"        }\n"
"        (philosophers, rx)\n"
"        // tx is dropped here, so we don't need to explicitly drop it later\n"
"    };\n"
"\n"
"    // Make them think and eat\n"
"    for phil in philosophers {\n"
"        tokio::spawn(async move {\n"
"            for _ in 0..100 {\n"
"                phil.think().await;\n"
"                phil.eat().await;\n"
"            }\n"
"        });\n"
"\n"
"    }\n"
"\n"
"    // Output their thoughts\n"
"    while let Some(thought) = rx.recv().await {\n"
"        println!(\"Here is a thought: {thought}\");\n"
"    }\n"
"}\n"
"```"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:121
msgid "([back to exercise](chat-app.md))"
msgstr "([–Ω–∞–∑–∞–¥ –¥–æ –≤–ø—Ä–∞–≤–∏](chat-app.md))"

#: src/exercises/concurrency/solutions-afternoon.md:125
msgid ""
"```rust,compile_fail\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: setup\n"
"use futures_util::sink::SinkExt;\n"
"use futures_util::stream::StreamExt;\n"
"use std::error::Error;\n"
"use std::net::SocketAddr;\n"
"use tokio::net::{TcpListener, TcpStream};\n"
"use tokio::sync::broadcast::{channel, Sender};\n"
"use tokio_websockets::{Message, ServerBuilder, WebsocketStream};\n"
"// ANCHOR_END: setup\n"
"\n"
"// ANCHOR: handle_connection\n"
"async fn handle_connection(\n"
"    addr: SocketAddr,\n"
"    mut ws_stream: WebsocketStream<TcpStream>,\n"
"    bcast_tx: Sender<String>,\n"
") -> Result<(), Box<dyn Error + Send + Sync>> {\n"
"    // ANCHOR_END: handle_connection\n"
"\n"
"    ws_stream\n"
"        .send(Message::text(\"Welcome to chat! Type a message\".into()))\n"
"        .await?;\n"
"    let mut bcast_rx = bcast_tx.subscribe();\n"
"\n"
"    // A continuous loop for concurrently performing two tasks: (1) "
"receiving\n"
"    // messages from `ws_stream` and broadcasting them, and (2) receiving\n"
"    // messages on `bcast_rx` and sending them to the client.\n"
"    loop {\n"
"        tokio::select! {\n"
"            incoming = ws_stream.next() => {\n"
"                match incoming {\n"
"                    Some(Ok(msg)) => {\n"
"                        if let Some(text) = msg.as_text() {\n"
"                            println!(\"From client {addr:?} {text:?}\");\n"
"                            bcast_tx.send(text.into())?;\n"
"                        }\n"
"                    }\n"
"                    Some(Err(err)) => return Err(err.into()),\n"
"                    None => return Ok(()),\n"
"                }\n"
"            }\n"
"            msg = bcast_rx.recv() => {\n"
"                ws_stream.send(Message::text(msg?)).await?;\n"
"            }\n"
"        }\n"
"    }\n"
"    // ANCHOR: main\n"
"}\n"
"\n"
"#[tokio::main]\n"
"async fn main() -> Result<(), Box<dyn Error + Send + Sync>> {\n"
"    let (bcast_tx, _) = channel(16);\n"
"\n"
"    let listener = TcpListener::bind(\"127.0.0.1:2000\").await?;\n"
"    println!(\"listening on port 2000\");\n"
"\n"
"    loop {\n"
"        let (socket, addr) = listener.accept().await?;\n"
"        println!(\"New connection from {addr:?}\");\n"
"        let bcast_tx = bcast_tx.clone();\n"
"        tokio::spawn(async move {\n"
"            // Wrap the raw TCP stream into a websocket.\n"
"            let ws_stream = ServerBuilder::new().accept(socket).await?;\n"
"\n"
"            handle_connection(addr, ws_stream, bcast_tx).await\n"
"        });\n"
"    }\n"
"}\n"
"// ANCHOR_END: main\n"
"```"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:212
msgid ""
"```rust,compile_fail\n"
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
"\n"
"// ANCHOR: setup\n"
"use futures_util::stream::StreamExt;\n"
"use futures_util::SinkExt;\n"
"use http::Uri;\n"
"use tokio::io::{AsyncBufReadExt, BufReader};\n"
"use tokio_websockets::{ClientBuilder, Message};\n"
"\n"
"#[tokio::main]\n"
"async fn main() -> Result<(), tokio_websockets::Error> {\n"
"    let (mut ws_stream, _) =\n"
"        ClientBuilder::from_uri(Uri::from_static(\"ws://127.0.0.1:2000\"))\n"
"            .connect()\n"
"            .await?;\n"
"\n"
"    let stdin = tokio::io::stdin();\n"
"    let mut stdin = BufReader::new(stdin).lines();\n"
"\n"
"    // ANCHOR_END: setup\n"
"    // Continuous loop for concurrently sending and receiving messages.\n"
"    loop {\n"
"        tokio::select! {\n"
"            incoming = ws_stream.next() => {\n"
"                match incoming {\n"
"                    Some(Ok(msg)) => {\n"
"                        if let Some(text) = msg.as_text() {\n"
"                            println!(\"From server: {}\", text);\n"
"                        }\n"
"                    },\n"
"                    Some(Err(err)) => return Err(err.into()),\n"
"                    None => return Ok(()),\n"
"                }\n"
"            }\n"
"            res = stdin.next_line() => {\n"
"                match res {\n"
"                    Ok(None) => return Ok(()),\n"
"                    Ok(Some(line)) => ws_stream.send(Message::text(line."
"to_string())).await?,\n"
"                    Err(err) => return Err(err.into()),\n"
"                }\n"
"            }\n"
"\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""
