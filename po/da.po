msgid ""
msgstr ""
"Project-Id-Version: Comprehensive Rust ü¶Ä\n"
"POT-Creation-Date: 2025-09-06T21:23:01+02:00\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: da\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: src/SUMMARY.md src/index.md
msgid "Welcome to Comprehensive Rust ü¶Ä"
msgstr "Velkommen til Comprehensive Rust ü¶Ä"

#: src/SUMMARY.md src/running-the-course.md
msgid "Running the Course"
msgstr "Afvikling af kurset"

#: src/SUMMARY.md src/running-the-course/course-structure.md
msgid "Course Structure"
msgstr "Kursets struktur"

#: src/SUMMARY.md src/running-the-course/keyboard-shortcuts.md
msgid "Keyboard Shortcuts"
msgstr "Genvejstaster"

#: src/SUMMARY.md src/running-the-course/translations.md
msgid "Translations"
msgstr "Overs√¶ttelser"

#: src/SUMMARY.md src/cargo.md
msgid "Using Cargo"
msgstr "Brug af Cargo"

#: src/SUMMARY.md
msgid "Rust Ecosystem"
msgstr "Rust's √∏kosystem"

#: src/SUMMARY.md
msgid "Code Samples"
msgstr "Kodeeksempler"

#: src/SUMMARY.md
msgid "Running Cargo Locally"
msgstr "K√∏r Cargo lokalt"

#: src/SUMMARY.md
msgid "Day 1: Morning"
msgstr "Dag 1: Formiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-1.md src/welcome-day-2.md src/welcome-day-3.md
#: src/welcome-day-4.md src/concurrency/welcome-async.md
msgid "Welcome"
msgstr "Velkommen"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-1.md src/hello-world.md src/types-and-values.md
#: src/types-and-values/hello-world.md
msgid "Hello, World"
msgstr "Hej verden"

#: src/SUMMARY.md src/hello-world.md src/hello-world/what-is-rust.md
msgid "What is Rust?"
msgstr "Hvad er Rust?"

#: src/SUMMARY.md src/hello-world.md src/hello-world/benefits.md
msgid "Benefits of Rust"
msgstr "Fordele ved Rust"

#: src/SUMMARY.md src/hello-world.md src/hello-world/playground.md
msgid "Playground"
msgstr "Legeplads"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-1.md src/types-and-values.md
msgid "Types and Values"
msgstr "Typer og v√¶rdier"

#: src/SUMMARY.md src/types-and-values.md src/types-and-values/variables.md
msgid "Variables"
msgstr "Variabler"

#: src/SUMMARY.md src/types-and-values.md src/types-and-values/values.md
msgid "Values"
msgstr "V√¶rdier"

#: src/SUMMARY.md src/types-and-values.md src/types-and-values/arithmetic.md
msgid "Arithmetic"
msgstr "Aritmetik"

#: src/SUMMARY.md src/types-and-values.md src/types-and-values/inference.md
msgid "Type Inference"
msgstr "Typeudledning"

#: src/SUMMARY.md src/types-and-values.md src/types-and-values/exercise.md
msgid "Exercise: Fibonacci"
msgstr "√òvelse: Fibonacci"

#: src/SUMMARY.md src/types-and-values/solution.md
#: src/control-flow-basics/solution.md src/tuples-and-arrays/solution.md
#: src/references/solution.md src/user-defined-types/solution.md
#: src/pattern-matching/solution.md src/methods-and-traits/solution.md
#: src/generics/solution.md src/closures/solution.md src/std-types/solution.md
#: src/std-traits/solution.md src/memory-management/solution.md
#: src/smart-pointers/solution.md src/borrowing/solution.md
#: src/lifetimes/solution.md src/iterators/solution.md src/modules/solution.md
#: src/testing/solution.md src/error-handling/solution.md
#: src/unsafe-rust/solution.md
msgid "Solution"
msgstr "L√∏sning"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-1.md src/control-flow-basics.md
msgid "Control Flow Basics"
msgstr "Kontrolflow"

#: src/SUMMARY.md src/control-flow-basics.md
#: src/control-flow-basics/blocks-and-scopes.md
msgid "Blocks and Scopes"
msgstr "Blokke og virkefelter"

#: src/SUMMARY.md
msgid "`if` Expressions"
msgstr "`if`-udtryk"

#: src/SUMMARY.md src/control-flow-basics/match.md
msgid "`match` Expressions"
msgstr "`match`-udtryk"

#: src/SUMMARY.md src/control-flow-basics.md src/control-flow-basics/loops.md
msgid "Loops"
msgstr "L√∏kker"

#: src/SUMMARY.md src/control-flow-basics/loops/for.md
msgid "`for`"
msgstr "`for`"

#: src/SUMMARY.md src/control-flow-basics/loops/loop.md
msgid "`loop`"
msgstr "`loop`"

#: src/SUMMARY.md src/control-flow-basics/break-continue.md
msgid "`break` and `continue`"
msgstr "`break` og `continue`"

#: src/SUMMARY.md src/control-flow-basics/break-continue/labels.md
msgid "Labels"
msgstr "Etiketter"

#: src/SUMMARY.md src/control-flow-basics.md
#: src/control-flow-basics/functions.md
msgid "Functions"
msgstr "Funktioner"

#: src/SUMMARY.md src/control-flow-basics.md src/control-flow-basics/macros.md
msgid "Macros"
msgstr "Makroer"

#: src/SUMMARY.md src/control-flow-basics.md
#: src/control-flow-basics/exercise.md
msgid "Exercise: Collatz Sequence"
msgstr "√òvelse: Collatz-sekvens"

#: src/SUMMARY.md
msgid "Day 1: Afternoon"
msgstr "Dag 1: Eftermiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-1-afternoon.md src/tuples-and-arrays.md
msgid "Tuples and Arrays"
msgstr "Tupler og arrays"

#: src/SUMMARY.md src/tuples-and-arrays.md src/tuples-and-arrays/arrays.md
msgid "Arrays"
msgstr "Arrays"

#: src/SUMMARY.md src/tuples-and-arrays.md src/tuples-and-arrays/tuples.md
msgid "Tuples"
msgstr "Tupler"

#: src/SUMMARY.md src/tuples-and-arrays.md src/tuples-and-arrays/iteration.md
msgid "Array Iteration"
msgstr "Array-iteration"

#: src/SUMMARY.md src/tuples-and-arrays.md
#: src/tuples-and-arrays/destructuring.md
msgid "Patterns and Destructuring"
msgstr "M√∏nstre og dekonstruktion"

#: src/SUMMARY.md src/tuples-and-arrays.md src/tuples-and-arrays/exercise.md
msgid "Exercise: Nested Arrays"
msgstr "√òvelse: Indlejrede arrays"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-1-afternoon.md src/references.md
msgid "References"
msgstr "Referencer"

#: src/SUMMARY.md src/references.md src/references/shared.md
msgid "Shared References"
msgstr "Delte referencer"

#: src/SUMMARY.md src/references.md src/references/exclusive.md
msgid "Exclusive References"
msgstr "Eksklusive referencer"

#: src/SUMMARY.md src/references.md src/references/slices.md
msgid "Slices"
msgstr "Slices"

#: src/SUMMARY.md src/references.md src/references/strings.md
msgid "Strings"
msgstr "Strenge"

#: src/SUMMARY.md src/references.md src/references/dangling.md
msgid "Reference Validity"
msgstr "Referencegyldighed"

#: src/SUMMARY.md src/references.md src/references/exercise.md
msgid "Exercise: Geometry"
msgstr "√òvelse: Geometri"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-1-afternoon.md src/user-defined-types.md
msgid "User-Defined Types"
msgstr "Brugerdefinerede typer"

#: src/SUMMARY.md src/user-defined-types.md
#: src/user-defined-types/named-structs.md
msgid "Named Structs"
msgstr "Navngivne structs"

#: src/SUMMARY.md src/user-defined-types.md
#: src/user-defined-types/tuple-structs.md
msgid "Tuple Structs"
msgstr "Tuple-structs"

#: src/SUMMARY.md src/user-defined-types.md src/user-defined-types/enums.md
#: src/pattern-matching/destructuring-enums.md
msgid "Enums"
msgstr "Enums"

#: src/SUMMARY.md src/user-defined-types.md src/user-defined-types/aliases.md
msgid "Type Aliases"
msgstr "Typealiasser"

#: src/SUMMARY.md src/user-defined-types.md
msgid "Const"
msgstr "Konstant"

#: src/SUMMARY.md src/user-defined-types.md
msgid "Static"
msgstr "Statisk"

#: src/SUMMARY.md src/user-defined-types.md src/user-defined-types/exercise.md
msgid "Exercise: Elevator Events"
msgstr "√òvelse: Elevator-h√¶ndelser"

#: src/SUMMARY.md
msgid "Day 2: Morning"
msgstr "Dag 2: Formiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-2.md src/pattern-matching.md
msgid "Pattern Matching"
msgstr "M√∏nstergenkendelse"

#: src/SUMMARY.md src/pattern-matching.md src/pattern-matching/infallible.md
msgid "Irrefutable Patterns"
msgstr "Uigendrivelige m√∏nstre"

#: src/SUMMARY.md src/pattern-matching.md src/pattern-matching/match.md
msgid "Matching Values"
msgstr "Matching af v√¶rdier"

#: src/SUMMARY.md src/pattern-matching.md
msgid "Destructuring Structs"
msgstr "Dekonstruktion af structs"

#: src/SUMMARY.md src/pattern-matching.md
msgid "Destructuring Enums"
msgstr "Dekonstruktion af enums"

#: src/SUMMARY.md src/pattern-matching.md
#: src/pattern-matching/let-control-flow.md
msgid "Let Control Flow"
msgstr "Let-kontrolflow"

#: src/SUMMARY.md src/pattern-matching/let-control-flow/if-let.md
msgid "`if let` Expressions"
msgstr "`if let`-udtryk"

#: src/SUMMARY.md src/pattern-matching/let-control-flow/while-let.md
msgid "`while let` Statements"
msgstr "`while let`-s√¶tninger"

#: src/SUMMARY.md
msgid "`let else`"
msgstr "`let else`"

#: src/SUMMARY.md src/pattern-matching.md src/pattern-matching/exercise.md
msgid "Exercise: Expression Evaluation"
msgstr "√òvelse: Udtryksevaluering"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-2.md src/methods-and-traits.md
msgid "Methods and Traits"
msgstr "Metoder og traits"

#: src/SUMMARY.md src/methods-and-traits.md src/methods-and-traits/methods.md
msgid "Methods"
msgstr "Metoder"

#: src/SUMMARY.md src/methods-and-traits.md src/methods-and-traits/traits.md
msgid "Traits"
msgstr "Traits"

#: src/SUMMARY.md src/methods-and-traits/traits/implementing.md
msgid "Implementing Traits"
msgstr "Implementering af traits"

#: src/SUMMARY.md src/methods-and-traits/traits/supertraits.md
msgid "Supertraits"
msgstr "Supertraits"

#: src/SUMMARY.md src/methods-and-traits/traits/associated-types.md
msgid "Associated Types"
msgstr "Associerede typer"

#: src/SUMMARY.md src/methods-and-traits.md src/methods-and-traits/deriving.md
msgid "Deriving"
msgstr "Afledning"

#: src/SUMMARY.md src/methods-and-traits.md
msgid "Exercise: Generic Logger"
msgstr "√òvelse: Generisk logger"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-2.md src/generics.md
msgid "Generics"
msgstr "Generics"

#: src/SUMMARY.md src/generics.md src/generics/generic-functions.md
msgid "Generic Functions"
msgstr "Generiske funktioner"

#: src/SUMMARY.md src/generics.md src/generics/trait-bounds.md
msgid "Trait Bounds"
msgstr "Trait-gr√¶nser"

#: src/SUMMARY.md src/generics.md src/generics/generic-data.md
msgid "Generic Data Types"
msgstr "Generiske datatyper"

#: src/SUMMARY.md src/generics/generic-traits.md
msgid "Generic Traits"
msgstr "Generiske traits"

#: src/SUMMARY.md src/generics/impl-trait.md
msgid "`impl Trait`"
msgstr "`impl Trait`"

#: src/SUMMARY.md src/generics/dyn-trait.md
msgid "`dyn Trait`"
msgstr "`dyn Trait`"

#: src/SUMMARY.md src/generics/exercise.md
msgid "Exercise: Generic `min`"
msgstr "√òvelse: Generisk `min`"

#: src/SUMMARY.md
msgid "Day 2: Afternoon"
msgstr "Dag 2: Eftermiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-2-afternoon.md src/closures.md
msgid "Closures"
msgstr "Closures"

#: src/SUMMARY.md src/closures.md src/closures/syntax.md
msgid "Closure Syntax"
msgstr "Closure-syntaks"

#: src/SUMMARY.md src/closures.md src/closures/capturing.md
msgid "Capturing"
msgstr "Indfangning"

#: src/SUMMARY.md src/closures.md
msgid "Closure Traits"
msgstr "Closure-traits"

#: src/SUMMARY.md src/closures.md src/closures/exercise.md
msgid "Exercise: Log Filter"
msgstr "√òvelse: Logfilter"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-2-afternoon.md src/std-types.md
msgid "Standard Library Types"
msgstr "Standardbibliotekstyper"

#: src/SUMMARY.md src/std-types.md src/std-types/std.md
msgid "Standard Library"
msgstr "Standardbibliotek"

#: src/SUMMARY.md src/std-types.md src/std-types/docs.md
msgid "Documentation"
msgstr "Dokumentation"

#: src/SUMMARY.md
msgid "`Option`"
msgstr "`Option`"

#: src/SUMMARY.md src/error-handling/result.md
msgid "`Result`"
msgstr "`Result`"

#: src/SUMMARY.md src/android/aidl/types/primitives.md
#: src/android/interoperability/cpp/type-mapping.md
msgid "`String`"
msgstr "`String`"

#: src/SUMMARY.md src/std-types/vec.md
msgid "`Vec`"
msgstr "`Vec`"

#: src/SUMMARY.md src/std-types/hashmap.md src/bare-metal/no_std.md
msgid "`HashMap`"
msgstr "`HashMap`"

#: src/SUMMARY.md src/std-types.md src/std-types/exercise.md
msgid "Exercise: Counter"
msgstr "√òvelse: T√¶ller"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-2-afternoon.md src/std-traits.md
msgid "Standard Library Traits"
msgstr "Standardbiblioteks-traits"

#: src/SUMMARY.md src/std-traits.md src/std-traits/comparisons.md
#: src/concurrency/welcome-async.md
msgid "Comparisons"
msgstr "Sammenligninger"

#: src/SUMMARY.md src/std-traits.md src/std-traits/operators.md
msgid "Operators"
msgstr "Operatorer"

#: src/SUMMARY.md src/std-traits/from-and-into.md
msgid "`From` and `Into`"
msgstr "`From` og `Into`"

#: src/SUMMARY.md src/std-traits.md src/std-traits/casting.md
msgid "Casting"
msgstr "Casting"

#: src/SUMMARY.md src/std-traits/read-and-write.md
msgid "`Read` and `Write`"
msgstr "`Read` og `Write`"

#: src/SUMMARY.md
msgid "`Default`, struct update syntax"
msgstr "`Default`, struct-opdateringssyntaks"

#: src/SUMMARY.md src/std-traits.md src/std-traits/exercise.md
msgid "Exercise: ROT13"
msgstr "√òvelse: ROT13"

#: src/SUMMARY.md
msgid "Day 3: Morning"
msgstr "Dag 3: Formiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-3.md src/memory-management.md
msgid "Memory Management"
msgstr "Hukommelsesh√•ndtering"

#: src/SUMMARY.md src/memory-management.md src/memory-management/review.md
msgid "Review of Program Memory"
msgstr "Gennemgang af programhukommelse"

#: src/SUMMARY.md src/memory-management.md src/memory-management/approaches.md
msgid "Approaches to Memory Management"
msgstr "Tilgange til hukommelsesh√•ndtering"

#: src/SUMMARY.md src/memory-management.md src/memory-management/ownership.md
msgid "Ownership"
msgstr "Ejerskab"

#: src/SUMMARY.md src/memory-management.md src/memory-management/move.md
msgid "Move Semantics"
msgstr "Flyttesemantik"

#: src/SUMMARY.md
msgid "`Clone`"
msgstr "`Clone`"

#: src/SUMMARY.md src/memory-management.md src/memory-management/copy-types.md
msgid "Copy Types"
msgstr "Kopityper"

#: src/SUMMARY.md
msgid "`Drop`"
msgstr "`Drop`"

#: src/SUMMARY.md src/memory-management.md src/memory-management/exercise.md
msgid "Exercise: Builder Type"
msgstr "√òvelse: Builder-type"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-3.md src/smart-pointers.md
msgid "Smart Pointers"
msgstr "Smarte Pointers"

#: src/SUMMARY.md src/smart-pointers/box.md
#: src/android/interoperability/cpp/type-mapping.md
msgid "`Box<T>`"
msgstr "`Box<T>`"

#: src/SUMMARY.md src/smart-pointers/rc.md
msgid "`Rc`"
msgstr "`Rc`"

#: src/SUMMARY.md src/smart-pointers.md src/smart-pointers/trait-objects.md
msgid "Owned Trait Objects"
msgstr "Ejede Trait-objekter"

#: src/SUMMARY.md src/smart-pointers.md src/smart-pointers/exercise.md
msgid "Exercise: Binary Tree"
msgstr "√òvelse: Bin√¶rt tr√¶"

#: src/SUMMARY.md
msgid "Day 3: Afternoon"
msgstr "Dag 3: Eftermiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-3-afternoon.md src/borrowing.md
msgid "Borrowing"
msgstr "L√•n"

#: src/SUMMARY.md src/borrowing.md src/borrowing/shared.md
msgid "Borrowing a Value"
msgstr "L√•n af en v√¶rdi"

#: src/SUMMARY.md src/borrowing.md src/borrowing/borrowck.md
msgid "Borrow Checking"
msgstr "L√•nekontrol"

#: src/SUMMARY.md src/borrowing.md src/borrowing/examples.md
msgid "Borrow Errors"
msgstr "L√•nefejl"

#: src/SUMMARY.md src/borrowing.md src/borrowing/interior-mutability.md
msgid "Interior Mutability"
msgstr "Indre mutabilitet"

#: src/SUMMARY.md src/borrowing/interior-mutability/cell.md
msgid "`Cell`"
msgstr "`Cell`"

#: src/SUMMARY.md src/borrowing/interior-mutability/refcell.md
msgid "`RefCell`"
msgstr "`RefCell`"

#: src/SUMMARY.md src/borrowing.md src/borrowing/exercise.md
msgid "Exercise: Health Statistics"
msgstr "√òvelse: Sundhedsstatistik"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-3-afternoon.md src/lifetimes.md
msgid "Lifetimes"
msgstr "Livstider"

#: src/SUMMARY.md src/lifetimes.md src/lifetimes/lifetime-annotations.md
msgid "Lifetime Annotations"
msgstr "Livstidsannotationer"

#: src/SUMMARY.md src/lifetimes.md
msgid "Lifetime Elision"
msgstr "Livstidsudeladelse"

#: src/SUMMARY.md src/lifetimes.md src/lifetimes/struct-lifetimes.md
msgid "Lifetimes in Data Structures"
msgstr "Livstider i datastrukturer"

#: src/SUMMARY.md src/lifetimes.md src/lifetimes/exercise.md
msgid "Exercise: Protobuf Parsing"
msgstr "√òvelse: Protobuf-parsing"

#: src/SUMMARY.md
msgid "Day 4: Morning"
msgstr "Dag 4: Formiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-4.md src/iterators.md
msgid "Iterators"
msgstr "Iteratorer"

#: src/SUMMARY.md src/iterators.md
msgid "Motivation"
msgstr "Motivation"

#: src/SUMMARY.md src/iterators/iterator.md
msgid "`Iterator` Trait"
msgstr "`Iterator`-trait"

#: src/SUMMARY.md src/iterators/helpers.md
msgid "`Iterator` Helper Methods"
msgstr "`Iterator`-hj√¶lpemetoder"

#: src/SUMMARY.md src/iterators/collect.md
msgid "`collect`"
msgstr "`collect`"

#: src/SUMMARY.md src/iterators/intoiterator.md
msgid "`IntoIterator`"
msgstr "`IntoIterator`"

#: src/SUMMARY.md src/iterators.md src/iterators/exercise.md
msgid "Exercise: Iterator Method Chaining"
msgstr "√òvelse: Iterator-metodek√¶dning"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-4.md src/modules.md src/modules/modules.md
msgid "Modules"
msgstr "Moduler"

#: src/SUMMARY.md src/modules.md src/modules/filesystem.md
msgid "Filesystem Hierarchy"
msgstr "Filsystemhierarki"

#: src/SUMMARY.md src/modules.md src/modules/visibility.md
msgid "Visibility"
msgstr "Synlighed"

#: src/SUMMARY.md src/modules.md
msgid "Encapsulation"
msgstr "Indkapsling"

#: src/SUMMARY.md
msgid "`use`, `super`, `self`"
msgstr "`use`, `super`, `self`"

#: src/SUMMARY.md src/modules.md src/modules/exercise.md
msgid "Exercise: Modules for a GUI Library"
msgstr "√òvelse: Moduler til et GUI-bibliotek"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-4.md src/testing.md src/chromium/testing.md
msgid "Testing"
msgstr "Test"

#: src/SUMMARY.md src/testing.md src/testing/unit-tests.md
msgid "Unit Tests"
msgstr "Unittests"

#: src/SUMMARY.md src/testing.md src/testing/other.md
msgid "Other Types of Tests"
msgstr "Andre typer tests"

#: src/SUMMARY.md src/testing.md src/testing/lints.md
msgid "Compiler Lints and Clippy"
msgstr "Compiler-lints og Clippy"

#: src/SUMMARY.md src/testing.md src/testing/exercise.md
msgid "Exercise: Luhn Algorithm"
msgstr "√òvelse: Luhn-algoritmen"

#: src/SUMMARY.md
msgid "Day 4: Afternoon"
msgstr "Dag 4: Eftermiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-4-afternoon.md src/error-handling.md
#: src/idiomatic/welcome.md
msgid "Error Handling"
msgstr "Fejlh√•ndtering"

#: src/SUMMARY.md src/error-handling.md src/error-handling/panics.md
msgid "Panics"
msgstr "Panics"

#: src/SUMMARY.md src/error-handling.md src/error-handling/try.md
msgid "Try Operator"
msgstr "Try-operator"

#: src/SUMMARY.md src/error-handling.md src/error-handling/try-conversions.md
msgid "Try Conversions"
msgstr "Try-konverteringer"

#: src/SUMMARY.md
msgid "`Error` Trait"
msgstr "`Error`-trait"

#: src/SUMMARY.md src/error-handling/thiserror.md
msgid "`thiserror`"
msgstr "`thiserror`"

#: src/SUMMARY.md src/error-handling/anyhow.md src/idiomatic/welcome.md
msgid "`anyhow`"
msgstr "`anyhow`"

#: src/SUMMARY.md
msgid "Exercise: Rewriting with `Result`"
msgstr "√òvelse: Omskrivning med `Result`"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/welcome-day-4-afternoon.md src/unsafe-rust.md src/unsafe-rust/unsafe.md
msgid "Unsafe Rust"
msgstr "Unsafe Rust"

#: src/SUMMARY.md src/unsafe-rust.md
msgid "Unsafe"
msgstr "Unsafe"

#: src/SUMMARY.md src/unsafe-rust.md src/unsafe-rust/dereferencing.md
msgid "Dereferencing Raw Pointers"
msgstr "Dereferencing af r√• pointers"

#: src/SUMMARY.md src/unsafe-rust.md src/unsafe-rust/mutable-static.md
msgid "Mutable Static Variables"
msgstr "Mutable statiske variabler"

#: src/SUMMARY.md src/unsafe-rust.md src/unsafe-rust/unions.md
msgid "Unions"
msgstr "Unions"

#: src/SUMMARY.md src/unsafe-rust.md src/unsafe-rust/unsafe-functions.md
msgid "Unsafe Functions"
msgstr "Unsafe funktioner"

#: src/SUMMARY.md src/unsafe-rust/unsafe-functions/rust.md
msgid "Unsafe Rust Functions"
msgstr "Unsafe Rust-funktioner"

#: src/SUMMARY.md src/unsafe-rust/unsafe-functions/extern-c.md
msgid "Unsafe External Functions"
msgstr "Unsafe eksterne funktioner"

#: src/SUMMARY.md src/unsafe-rust/unsafe-functions/calling.md
msgid "Calling Unsafe Functions"
msgstr "Kald af unsafe funktioner"

#: src/SUMMARY.md src/unsafe-rust.md
msgid "Unsafe Traits"
msgstr "Unsafe traits"

#: src/SUMMARY.md src/unsafe-rust.md
msgid "Exercise: FFI Wrapper"
msgstr "√òvelse: FFI-wrapper"

#: src/SUMMARY.md
msgid "Android"
msgstr "Android"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/android/setup.md src/chromium/setup.md
msgid "Setup"
msgstr "Ops√¶tning"

#: src/SUMMARY.md src/android/build-rules.md
msgid "Build Rules"
msgstr "Byggeregler"

#: src/SUMMARY.md
msgid "Binary"
msgstr "Bin√¶r"

#: src/SUMMARY.md
msgid "Library"
msgstr "Bibliotek"

#: src/SUMMARY.md src/android/aidl.md
msgid "AIDL"
msgstr "AIDL"

#: src/SUMMARY.md src/android/aidl/birthday-service.md
msgid "Birthday Service Tutorial"
msgstr "F√∏dselsdagsservice-tutorial"

#: src/SUMMARY.md
msgid "Interface"
msgstr "Interface"

#: src/SUMMARY.md
msgid "Service API"
msgstr "Service-API"

#: src/SUMMARY.md
msgid "Service"
msgstr "Service"

#: src/SUMMARY.md
msgid "Server"
msgstr "Server"

#: src/SUMMARY.md src/android/aidl/example-service/deploy.md
msgid "Deploy"
msgstr "Deploy"

#: src/SUMMARY.md
msgid "Client"
msgstr "Klient"

#: src/SUMMARY.md src/android/aidl/example-service/changing-definition.md
msgid "Changing API"
msgstr "√Ündring af API"

#: src/SUMMARY.md
msgid "Updating Implementations"
msgstr "Opdatering af implementeringer"

#: src/SUMMARY.md
msgid "AIDL Types"
msgstr "AIDL-typer"

#: src/SUMMARY.md src/android/aidl/types/primitives.md
msgid "Primitive Types"
msgstr "Primitive typer"

#: src/SUMMARY.md src/android/aidl/types/arrays.md
msgid "Array Types"
msgstr "Array-typer"

#: src/SUMMARY.md src/android/aidl/types/objects.md
msgid "Sending Objects"
msgstr "Afsendelse af objekter"

#: src/SUMMARY.md src/android/aidl/types/parcelables.md
msgid "Parcelables"
msgstr "Parcelables"

#: src/SUMMARY.md src/android/aidl/types/file-descriptor.md
msgid "Sending Files"
msgstr "Afsendelse af filer"

#: src/SUMMARY.md src/android/testing/googletest.md
msgid "GoogleTest"
msgstr "GoogleTest"

#: src/SUMMARY.md src/android/testing/mocking.md
msgid "Mocking"
msgstr "Mocking"

#: src/SUMMARY.md src/android/logging.md src/bare-metal/aps/logging.md
msgid "Logging"
msgstr "Logging"

#: src/SUMMARY.md src/android/interoperability.md
#: src/unsafe-deep-dive/motivations.md
#: src/unsafe-deep-dive/motivations/interop.md
msgid "Interoperability"
msgstr "Interoperabilitet"

#: src/SUMMARY.md
msgid "With C"
msgstr "Med C"

#: src/SUMMARY.md src/android/interoperability/with-c/c-library.md
msgid "A Simple C Library"
msgstr "Et simpelt C-bibliotek"

#: src/SUMMARY.md
msgid "Bindgen"
msgstr "Bindgen"

#: src/SUMMARY.md src/android/interoperability/with-c/run-our-binary.md
msgid "Running Our Binary"
msgstr "K√∏rsel af vores bin√¶re fil"

#: src/SUMMARY.md src/android/interoperability/with-c/rust-library.md
msgid "A Simple Rust Library"
msgstr "Et simpelt Rust-bibliotek"

#: src/SUMMARY.md
msgid "Calling Rust from C"
msgstr "Kald af Rust fra C"

#: src/SUMMARY.md src/android/interoperability/cpp.md
msgid "With C++"
msgstr "Med C++"

#: src/SUMMARY.md src/android/interoperability/cpp/bridge.md
msgid "The Bridge Module"
msgstr "Bro-modulet"

#: src/SUMMARY.md
msgid "Rust Bridge"
msgstr "Rust-bro"

#: src/SUMMARY.md src/android/interoperability/cpp/generated-cpp.md
msgid "Generated C++"
msgstr "Genereret C++"

#: src/SUMMARY.md
msgid "C++ Bridge"
msgstr "C++-bro"

#: src/SUMMARY.md src/android/interoperability/cpp/shared-types.md
msgid "Shared Types"
msgstr "Delte typer"

#: src/SUMMARY.md src/android/interoperability/cpp/shared-enums.md
msgid "Shared Enums"
msgstr "Delte enums"

#: src/SUMMARY.md src/android/interoperability/cpp/rust-result.md
msgid "Rust Error Handling"
msgstr "Rust-fejlh√•ndtering"

#: src/SUMMARY.md src/android/interoperability/cpp/cpp-exception.md
msgid "C++ Error Handling"
msgstr "C++-fejlh√•ndtering"

#: src/SUMMARY.md src/android/interoperability/cpp/type-mapping.md
msgid "Additional Types"
msgstr "Yderligere typer"

#: src/SUMMARY.md
msgid "Building for Android: Genrules"
msgstr "Bygning til Android: Genrules"

#: src/SUMMARY.md
msgid "Building for Android: C++"
msgstr "Bygning til Android: C++"

#: src/SUMMARY.md
msgid "Building for Android: Rust"
msgstr "Bygning til Android: Rust"

#: src/SUMMARY.md
msgid "With Java"
msgstr "Med Java"

#: src/SUMMARY.md
msgid "Chromium"
msgstr "Chromium"

#: src/SUMMARY.md src/chromium/cargo.md
msgid "Comparing Chromium and Cargo Ecosystems"
msgstr "Sammenligning af Chromium- og Cargo-√∏kosystemer"

#: src/SUMMARY.md
msgid "Policy"
msgstr "Politik"

#: src/SUMMARY.md
msgid "Unsafe Code"
msgstr "Unsafe kode"

#: src/SUMMARY.md src/chromium/build-rules/depending.md
msgid "Depending on Rust Code from Chromium C++"
msgstr "Afh√¶ngighed af Rust-kode fra Chromium C++"

#: src/SUMMARY.md src/chromium/build-rules/vscode.md
msgid "Visual Studio Code"
msgstr "Visual Studio Code"

#: src/SUMMARY.md src/lifetimes/exercise.md
#: src/exercises/chromium/third-party.md
msgid "Exercise"
msgstr "√òvelse"

#: src/SUMMARY.md src/chromium/testing/rust-gtest-interop.md
msgid "`rust_gtest_interop` Library"
msgstr "`rust_gtest_interop`-bibliotek"

#: src/SUMMARY.md src/chromium/testing/build-gn.md
msgid "GN Rules for Rust Tests"
msgstr "GN-regler for Rust-tests"

#: src/SUMMARY.md src/chromium/testing/chromium-import-macro.md
msgid "`chromium::import!` Macro"
msgstr "`chromium::import!`-makro"

#: src/SUMMARY.md src/chromium/interoperability-with-cpp.md
msgid "Interoperability with C++"
msgstr "Interoperabilitet med C++"

#: src/SUMMARY.md src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Example Bindings"
msgstr "Eksempel-bindinger"

#: src/SUMMARY.md src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid "Limitations of CXX"
msgstr "Begr√¶nsninger i CXX"

#: src/SUMMARY.md src/chromium/interoperability-with-cpp/error-handling.md
msgid "CXX Error Handling"
msgstr "CXX-fejlh√•ndtering"

#: src/SUMMARY.md
msgid "Error Handling: QR Example"
msgstr "Fejlh√•ndtering: QR-eksempel"

#: src/SUMMARY.md
msgid "Error Handling: PNG Example"
msgstr "Fejlh√•ndtering: PNG-eksempel"

#: src/SUMMARY.md
msgid "Using CXX in Chromium"
msgstr "Brug af CXX i Chromium"

#: src/SUMMARY.md src/chromium/adding-third-party-crates.md
msgid "Adding Third Party Crates"
msgstr "Tilf√∏jelse af tredjeparts-crates"

#: src/SUMMARY.md
msgid "Configuring Cargo.toml"
msgstr "Konfiguration af Cargo.toml"

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid "Configuring `gnrt_config.toml`"
msgstr "Konfiguration af `gnrt_config.toml`"

#: src/SUMMARY.md src/chromium/adding-third-party-crates/downloading-crates.md
msgid "Downloading Crates"
msgstr "Download af crates"

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid "Generating `gn` Build Rules"
msgstr "Generering af `gn`-byggeregler"

#: src/SUMMARY.md src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Resolving Problems"
msgstr "L√∏sning af problemer"

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid "Build Scripts Which Generate Code"
msgstr "Byggescripts, der genererer kode"

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid "Build Scripts Which Build C++ or Take Arbitrary Actions"
msgstr "Byggescripts, der bygger C++ eller udf√∏rer vilk√•rlige handlinger"

#: src/SUMMARY.md
#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid "Depending on a Crate"
msgstr "Afh√¶ngighed af et crate"

#: src/SUMMARY.md
msgid "Reviews and Audits"
msgstr "Gennemgange og revisioner"

#: src/SUMMARY.md
msgid "Checking into Chromium Source Code"
msgstr "Check-in til Chromium-kildekode"

#: src/SUMMARY.md src/chromium/adding-third-party-crates/keeping-up-to-date.md
msgid "Keeping Crates Up to Date"
msgstr "Hold crates opdaterede"

#: src/SUMMARY.md
msgid "Bringing It Together - Exercise"
msgstr "Samling af det hele - √òvelse"

#: src/SUMMARY.md src/exercises/chromium/solutions.md
msgid "Exercise Solutions"
msgstr "√òvelsesl√∏sninger"

#: src/SUMMARY.md
msgid "Bare Metal: Morning"
msgstr "Bare Metal: Formiddag"

#: src/SUMMARY.md src/bare-metal/no_std.md
msgid "`no_std`"
msgstr "`no_std`"

#: src/SUMMARY.md
msgid "A Minimal Example"
msgstr "Et minimalt eksempel"

#: src/SUMMARY.md src/bare-metal/no_std.md src/bare-metal/alloc.md
msgid "`alloc`"
msgstr "`alloc`"

#: src/SUMMARY.md src/bare-metal/microcontrollers.md
msgid "Microcontrollers"
msgstr "Mikrocontrollere"

#: src/SUMMARY.md src/bare-metal/microcontrollers/mmio.md
msgid "Raw MMIO"
msgstr "R√• MMIO"

#: src/SUMMARY.md
msgid "PACs"
msgstr "PAC'er"

#: src/SUMMARY.md
msgid "HAL Crates"
msgstr "HAL-crates"

#: src/SUMMARY.md
msgid "Board Support Crates"
msgstr "Board-support-crates"

#: src/SUMMARY.md
msgid "The Type State Pattern"
msgstr "Typestatusm√∏nsteret"

#: src/SUMMARY.md src/bare-metal/microcontrollers/embedded-hal.md
msgid "`embedded-hal`"
msgstr "`embedded-hal`"

#: src/SUMMARY.md src/bare-metal/microcontrollers/probe-rs.md
msgid "`probe-rs` and `cargo-embed`"
msgstr "`probe-rs` og `cargo-embed`"

#: src/SUMMARY.md src/bare-metal/microcontrollers/debugging.md
msgid "Debugging"
msgstr "Fejlfinding"

#: src/SUMMARY.md
msgid "Other Projects"
msgstr "Andre projekter"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/exercises/bare-metal/morning.md src/exercises/bare-metal/afternoon.md
#: src/concurrency/welcome.md src/concurrency/sync-exercises.md
#: src/concurrency/welcome-async.md src/concurrency/async-exercises.md
msgid "Exercises"
msgstr "√òvelser"

#: src/SUMMARY.md src/exercises/bare-metal/compass.md
#: src/exercises/bare-metal/solutions-morning.md
msgid "Compass"
msgstr "Kompas"

#: src/SUMMARY.md src/concurrency/sync-exercises.md
#: src/concurrency/sync-exercises/solutions.md
#: src/concurrency/async-exercises.md
#: src/concurrency/async-exercises/solutions.md
msgid "Solutions"
msgstr "L√∏sninger"

#: src/SUMMARY.md
msgid "Bare Metal: Afternoon"
msgstr "Bare Metal: Eftermiddag"

#: src/SUMMARY.md
msgid "Application Processors"
msgstr "Applikationsprocessorer"

#: src/SUMMARY.md src/bare-metal/aps/entry-point.md
msgid "Getting Ready to Rust"
msgstr "Klarg√∏ring til Rust"

#: src/SUMMARY.md
msgid "Inline Assembly"
msgstr "Inline-assembly"

#: src/SUMMARY.md
msgid "MMIO"
msgstr "MMIO"

#: src/SUMMARY.md
msgid "Let's Write a UART Driver"
msgstr "Lad os skrive en UART-driver"

#: src/SUMMARY.md
msgid "More Traits"
msgstr "Flere traits"

#: src/SUMMARY.md src/bare-metal/aps/safemmio/using.md
msgid "Using It"
msgstr "Brug af den"

#: src/SUMMARY.md
msgid "A Better UART Driver"
msgstr "En bedre UART-driver"

#: src/SUMMARY.md src/bare-metal/aps/better-uart/bitflags.md
msgid "Bitflags"
msgstr "Bitflag"

#: src/SUMMARY.md
msgid "Multiple Registers"
msgstr "Flere registre"

#: src/SUMMARY.md src/bare-metal/aps/better-uart/driver.md
#: src/bare-metal/aps/safemmio/driver.md
msgid "Driver"
msgstr "Driver"

#: src/SUMMARY.md src/bare-metal/aps/safemmio/registers.md
msgid "safe-mmio"
msgstr "safe-mmio"

#: src/SUMMARY.md src/error-handling/result.md src/bare-metal/aps/exceptions.md
msgid "Exceptions"
msgstr "Undtagelser"

#: src/SUMMARY.md src/bare-metal/aps/aarch64-rt.md
msgid "aarch64-rt"
msgstr "aarch64-rt"

#: src/SUMMARY.md
msgid "Useful Crates"
msgstr "Nyttige crates"

#: src/SUMMARY.md src/bare-metal/useful-crates/zerocopy.md
msgid "`zerocopy`"
msgstr "`zerocopy`"

#: src/SUMMARY.md src/bare-metal/useful-crates/aarch64-paging.md
msgid "`aarch64-paging`"
msgstr "`aarch64-paging`"

#: src/SUMMARY.md src/bare-metal/useful-crates/buddy_system_allocator.md
msgid "`buddy_system_allocator`"
msgstr "`buddy_system_allocator`"

#: src/SUMMARY.md src/bare-metal/useful-crates/tinyvec.md
msgid "`tinyvec`"
msgstr "`tinyvec`"

#: src/SUMMARY.md src/bare-metal/useful-crates/spin.md
msgid "`spin`"
msgstr "`spin`"

#: src/SUMMARY.md src/bare-metal/android.md
msgid "Bare-Metal on Android"
msgstr "Bare-metal p√• Android"

#: src/SUMMARY.md
msgid "`vmbase`"
msgstr "`vmbase`"

#: src/SUMMARY.md
msgid "RTC Driver"
msgstr "RTC-driver"

#: src/SUMMARY.md
msgid "Concurrency: Morning"
msgstr "Samtidighed: Formiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/concurrency/welcome.md src/concurrency/threads.md
msgid "Threads"
msgstr "Tr√•de"

#: src/SUMMARY.md src/concurrency/threads.md src/concurrency/threads/plain.md
msgid "Plain Threads"
msgstr "Almindelige tr√•de"

#: src/SUMMARY.md src/concurrency/threads.md src/concurrency/threads/scoped.md
msgid "Scoped Threads"
msgstr "Tr√•de med virkefelt"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/concurrency/welcome.md src/concurrency/channels.md
msgid "Channels"
msgstr "Kanaler"

#: src/SUMMARY.md src/concurrency/channels.md
#: src/concurrency/channels/senders-receivers.md
msgid "Senders and Receivers"
msgstr "Afsendere og modtagere"

#: src/SUMMARY.md src/concurrency/channels.md
#: src/concurrency/channels/unbounded.md
msgid "Unbounded Channels"
msgstr "Ubegr√¶nsede kanaler"

#: src/SUMMARY.md src/concurrency/channels.md
#: src/concurrency/channels/bounded.md
msgid "Bounded Channels"
msgstr "Begr√¶nsede kanaler"

#: src/SUMMARY.md src/concurrency/send-sync.md
msgid "`Send` and `Sync`"
msgstr "`Send` og `Sync`"

#: src/SUMMARY.md src/concurrency/send-sync.md
#: src/concurrency/send-sync/marker-traits.md
msgid "Marker Traits"
msgstr "Marker-traits"

#: src/SUMMARY.md src/concurrency/send-sync/send.md
msgid "`Send`"
msgstr "`Send`"

#: src/SUMMARY.md src/concurrency/send-sync/sync.md
msgid "`Sync`"
msgstr "`Sync`"

#: src/SUMMARY.md src/concurrency/send-sync.md
#: src/concurrency/send-sync/examples.md
msgid "Examples"
msgstr "Eksempler"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/concurrency/welcome.md src/concurrency/shared-state.md
msgid "Shared State"
msgstr "Delt tilstand"

#: src/SUMMARY.md src/concurrency/shared-state/arc.md
msgid "`Arc`"
msgstr "`Arc`"

#: src/SUMMARY.md src/concurrency/shared-state/mutex.md
msgid "`Mutex`"
msgstr "`Mutex`"

#: src/SUMMARY.md src/memory-management/review.md
#: src/error-handling/try-conversions.md src/concurrency/shared-state.md
#: src/concurrency/shared-state/example.md
msgid "Example"
msgstr "Eksempel"

#: src/SUMMARY.md src/concurrency/sync-exercises.md
#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/sync-exercises/solutions.md
#: src/concurrency/async-exercises.md
msgid "Dining Philosophers"
msgstr "Spisende filosoffer"

#: src/SUMMARY.md src/concurrency/sync-exercises.md
#: src/concurrency/sync-exercises/link-checker.md
msgid "Multi-threaded Link Checker"
msgstr "Flertr√•det link-checker"

#: src/SUMMARY.md
msgid "Concurrency: Afternoon"
msgstr "Samtidighed: Eftermiddag"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/concurrency/welcome-async.md src/concurrency/async.md
msgid "Async Basics"
msgstr "Grundl√¶ggende async"

#: src/SUMMARY.md src/concurrency/async/async-await.md
msgid "`async`/`await`"
msgstr "`async`/`await`"

#: src/SUMMARY.md src/concurrency/async.md src/concurrency/async/futures.md
msgid "Futures"
msgstr "Futures"

#: src/SUMMARY.md src/concurrency/async.md
#: src/concurrency/async/state-machine.md
msgid "State Machine"
msgstr "Tilstandsmaskine"

#: src/SUMMARY.md src/concurrency/async.md src/concurrency/async/runtimes.md
msgid "Runtimes"
msgstr "K√∏rselstider"

#: src/SUMMARY.md src/concurrency/async/runtimes/tokio.md
msgid "Tokio"
msgstr "Tokio"

#: src/SUMMARY.md src/concurrency/sync-exercises/link-checker.md
#: src/concurrency/async.md src/concurrency/async/tasks.md
#: src/concurrency/async-exercises/chat-app.md
msgid "Tasks"
msgstr "Opgaver"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/concurrency/welcome-async.md src/concurrency/async-control-flow.md
msgid "Channels and Control Flow"
msgstr "Kanaler og kontrolflow"

#: src/SUMMARY.md src/concurrency/async-control-flow.md
#: src/concurrency/async-control-flow/channels.md
msgid "Async Channels"
msgstr "Asynkrone kanaler"

#: src/SUMMARY.md src/concurrency/async-control-flow.md
#: src/concurrency/async-control-flow/join.md
msgid "Join"
msgstr "Join"

#: src/SUMMARY.md src/concurrency/async-control-flow.md
#: src/concurrency/async-control-flow/select.md
msgid "Select"
msgstr "Select"

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/concurrency/welcome-async.md src/concurrency/async-pitfalls.md
msgid "Pitfalls"
msgstr "Faldgruber"

#: src/SUMMARY.md src/concurrency/async-pitfalls.md
msgid "Blocking the Executor"
msgstr ""

#: src/SUMMARY.md src/concurrency/async-pitfalls/pin.md
msgid "`Pin`"
msgstr ""

#: src/SUMMARY.md src/concurrency/async-pitfalls.md
#: src/concurrency/async-pitfalls/async-traits.md
msgid "Async Traits"
msgstr "Asynkrone egenskaber (eng. Traits)"

#: src/SUMMARY.md src/concurrency/async-pitfalls.md
#: src/concurrency/async-pitfalls/cancellation.md
msgid "Cancellation"
msgstr "Annulering"

#: src/SUMMARY.md src/concurrency/async-exercises.md
#: src/concurrency/async-exercises/chat-app.md
#: src/concurrency/async-exercises/solutions.md
msgid "Broadcast Chat Application"
msgstr "Broadcast chat-applikation"

#: src/SUMMARY.md src/running-the-course/course-structure.md
msgid "Idiomatic Rust"
msgstr ""

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/idiomatic/welcome.md src/idiomatic/leveraging-the-type-system.md
msgid "Leveraging the Type System"
msgstr ""

#: src/SUMMARY.md src/idiomatic/leveraging-the-type-system.md
#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
msgid "Newtype Pattern"
msgstr ""

#: src/SUMMARY.md
#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid "Semantic Confusion"
msgstr ""

#: src/SUMMARY.md
#: src/idiomatic/leveraging-the-type-system/newtype-pattern/parse-don-t-validate.md
msgid "Parse, Don't Validate"
msgstr ""

#: src/SUMMARY.md
msgid "Is It Encapsulated?"
msgstr ""

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/unsafe-deep-dive/motivations.md
msgid "Motivations"
msgstr "Motivation"

#: src/SUMMARY.md src/unsafe-deep-dive/motivations.md
#: src/unsafe-deep-dive/motivations/data-structures.md
msgid "Data Structures"
msgstr "Datastrukturer"

#: src/SUMMARY.md src/unsafe-deep-dive/motivations.md
#: src/unsafe-deep-dive/motivations/performance.md
msgid "Performance"
msgstr ""

#: src/SUMMARY.md src/running-the-course/course-structure.md
#: src/unsafe-deep-dive/foundations.md
msgid "Foundations"
msgstr "Grundlag"

#: src/SUMMARY.md src/unsafe-deep-dive/foundations.md
msgid "What is unsafe?"
msgstr "Hvad er unsafe?"

#: src/SUMMARY.md src/unsafe-deep-dive/foundations.md
#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid "When is unsafe used?"
msgstr ""

#: src/SUMMARY.md src/unsafe-deep-dive/foundations.md
msgid "Data structures are safe"
msgstr ""

#: src/SUMMARY.md src/unsafe-deep-dive/foundations.md
msgid "Actions might not be"
msgstr ""

#: src/SUMMARY.md src/unsafe-deep-dive/foundations.md
#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "Less powerful than it seems"
msgstr ""

#: src/SUMMARY.md
msgid "Final Words"
msgstr "Afsluttende bem√¶rkninger"

#: src/SUMMARY.md src/thanks.md
msgid "Thanks!"
msgstr "Tak!"

#. Please keep { #glossary } untranslated.
#: src/SUMMARY.md src/glossary.md
msgid "Glossary"
msgstr ""

#: src/SUMMARY.md
msgid "Other Resources"
msgstr "Andre resourcer"

#: src/SUMMARY.md src/credits.md
msgid "Credits"
msgstr "Anerkendelser"

#: src/index.md
msgid ""
"[![Build workflow](https://img.shields.io/github/actions/workflow/status/"
"google/comprehensive-rust/build.yml?style=flat-square)](https://github.com/"
"google/comprehensive-rust/actions/workflows/build.yml?query=branch%3Amain) [!"
"[GitHub contributors](https://img.shields.io/github/contributors/google/"
"comprehensive-rust?style=flat-square)](https://github.com/google/"
"comprehensive-rust/graphs/contributors) [![GitHub stars](https://"
"img.shields.io/github/stars/google/comprehensive-rust?style=flat-square)]"
"(https://github.com/google/comprehensive-rust/stargazers)"
msgstr ""
"[![Bygge-arbejdsgang](https://img.shields.io/github/actions/workflow/status/"
"google/comprehensive-rust/build.yml?style=flat-square)](https://github.com/"
"google/comprehensive-rust/actions/workflows/build.yml?query=branch%3Amain) [!"
"[GitHub-bidragsydere](https://img.shields.io/github/contributors/google/"
"comprehensive-rust?style=flat-square)](https://github.com/google/"
"comprehensive-rust/graphs/contributors) [![GitHub-stjerner](https://"
"img.shields.io/github/stars/google/comprehensive-rust?style=flat-square)]"
"(https://github.com/google/comprehensive-rust/stargazers)"

#: src/index.md
msgid ""
"This is a free Rust course developed by the Android team at Google. The "
"course covers the full spectrum of Rust, from basic syntax to advanced "
"topics like generics and error handling."
msgstr ""
"Dette er et gratis Rust-kursus udviklet af Android-teamet. Kurset d√¶kker "
"hele spektret af Rust, fra grundl√¶ggende syntaks til avancerede emner som "
"generiske typer og fejlh√•ndtering."

#: src/index.md
msgid ""
"The latest version of the course can be found at <https://google.github.io/"
"comprehensive-rust/>. If you are reading somewhere else, please check there "
"for updates."
msgstr ""

#: src/index.md
msgid ""
"The course is available in other languages. Select your preferred language "
"in the top right corner of the page or check the [Translations](running-the-"
"course/translations.md) page for a list of all available translations."
msgstr ""

#: src/index.md
msgid "The course is also available [as a PDF](comprehensive-rust.pdf)."
msgstr ""

#: src/index.md
msgid ""
"The goal of the course is to teach you Rust. We assume you don't know "
"anything about Rust and hope to:"
msgstr ""
"M√•let med kurset er at l√¶re dig Rust. Vi antager, at du ikke ved noget om "
"Rust og h√•ber at:"

#: src/index.md
msgid "Give you a comprehensive understanding of the Rust syntax and language."
msgstr "Give dig en omfattende forst√•else af Rust-syntaksen og sproget."

#: src/index.md
msgid "Enable you to modify existing programs and write new programs in Rust."
msgstr ""
"G√∏re det muligt for dig at √¶ndre eksisterende programmer og skrive nye "
"programmer i Rust."

#: src/index.md
msgid "Show you common Rust idioms."
msgstr "Vise dig idiomatisk Rust."

#: src/index.md
msgid "We call the first four course days Rust Fundamentals."
msgstr ""
"Vi kalder de f√∏rste fire kursusdage Grundl√¶ggende Rust (_Rust Fundamentals_)."

#: src/index.md
msgid ""
"Building on this, you're invited to dive into one or more specialized topics:"
msgstr ""
"Efterf√∏lgende er du inviteret til at dykke ned i et eller flere "
"specialiserede emner:"

#: src/index.md
msgid ""
"[Android](android.md): a half-day course on using Rust for Android platform "
"development (AOSP). This includes interoperability with C, C++, and Java."
msgstr ""
"[Android](android.md): en halv kursusdag om at bruge Rust til "
"platformudvikling i Android (AOSP). Dette inkluderer interoperabilitet med "
"C, C++ og Java."

#: src/index.md
msgid ""
"[Chromium](chromium.md): a half-day course on using Rust in Chromium-based "
"browsers. This includes interoperability with C++ and how to include third-"
"party crates in Chromium."
msgstr ""
"[Chromium](chromium.md): et halvdagskursus om brugen af Rust i Chromium-"
"baserede browsere. Dette inkluderer interoperabilitet med C++ og hvordan man "
"inkluderer tredjeparts-crates i Chromium."

#: src/index.md
msgid ""
"[Bare-metal](bare-metal.md): a whole-day class on using Rust for bare-metal "
"(embedded) development. Both microcontrollers and application processors are "
"covered."
msgstr ""
"[R√• jern](bare-metal.md): en fuld kursusdag om at bruge Rust til udvikling "
"p√• det r√• jern og indlejrede (_bare metal and embedded_) systemer. D√¶kker "
"b√•de mikroprocessorer og applikationsprocessorer."

#: src/index.md
msgid ""
"[Concurrency](concurrency/welcome.md): a whole-day class on concurrency in "
"Rust. We cover both classical concurrency (preemptively scheduling using "
"threads and mutexes) and async/await concurrency (cooperative multitasking "
"using futures)."
msgstr ""
"[Samtidighed](concurrency/welcome.md): en hel kursusdag om samtidighed "
"(_concurrency_) i Rust. Vi d√¶kker b√•de klassisk samtidighed (tidsdelt "
"multitasking ved hj√¶lp af tr√•de og mutexes) og async/await samtidighed "
"(kooperativ multitasking ved hj√¶lp af _futures_)."

#: src/index.md
msgid "Non-Goals"
msgstr "Ting som ikke d√¶kkes"

#: src/index.md
msgid ""
"Rust is a large language and we won't be able to cover all of it in a few "
"days. Some non-goals of this course are:"
msgstr ""
"Rust er et stort sprog og vi vil ikke v√¶re i stand til at d√¶kke det hele p√• "
"et par dage. Nogle ting som vi ikke d√¶kker er:"

#: src/index.md
msgid ""
"Learning how to develop macros: please see [the Rust Book](https://doc.rust-"
"lang.org/book/) and [Rust by Example](https://doc.rust-lang.org/rust-by-"
"example/macros.html) instead."
msgstr ""
"At l√¶re hvordan man udvikler makroer: se venligst [Rust-bogen](https://"
"doc.rust-lang.org/book/) og [Rust by Example](https://doc.rust-lang.org/rust-"
"by-example/macros.html) i stedet."

#: src/index.md
msgid "Assumptions"
msgstr "Antagelser"

#: src/index.md
msgid ""
"The course assumes that you already know how to program. Rust is a "
"statically-typed language and we will sometimes make comparisons with C and "
"C++ to better explain or contrast the Rust approach."
msgstr ""
"Kurset antager at du allerede ved hvordan man programerer. Rust er et "
"statisk typet sprog og vi vil nogle gange sammenligne med C og C++ for bedre "
"at kunne forklare Rust's tilgangsvinkel."

#: src/index.md
msgid ""
"If you know how to program in a dynamically-typed language such as Python or "
"JavaScript, then you will be able to follow along just fine too."
msgstr ""
"Hvis du ved hvordan man programmerer i et dynamisk typet sprog s√•som Python "
"eller JavaScript, s√• vil du ogs√• fint kunne f√∏lge med."

#: src/index.md
msgid ""
"This is an example of a _speaker note_. We will use these to add additional "
"information to the slides. This could be key points which the instructor "
"should cover as well as answers to typical questions which come up in class."
msgstr ""
"Dette er et eksempel p√• en _note_. Vi vil bruge disse til at tilf√∏je "
"yderligere information til siderne. Dette kan v√¶re n√∏glepunkter som "
"instrukt√∏ren skal d√¶kke s√•vel som svar p√• typiske sp√∏rgsm√•l som bliver "
"stillet i klassen."

#: src/running-the-course.md src/running-the-course/course-structure.md
msgid "This page is for the course instructor."
msgstr "Denne side er for kursuslederen."

#: src/running-the-course.md
msgid ""
"Here is a bit of background information about how we've been running the "
"course internally at Google."
msgstr ""

#: src/running-the-course.md
msgid ""
"We typically run classes from 9:00 am to 4:00 pm, with a 1 hour lunch break "
"in the middle. This leaves 3 hours for the morning class and 3 hours for the "
"afternoon class. Both sessions contain multiple breaks and time for students "
"to work on exercises."
msgstr ""

#: src/running-the-course.md
msgid "Before you run the course, you will want to:"
msgstr ""

#: src/running-the-course.md
msgid ""
"Make yourself familiar with the course material. We've included speaker "
"notes to help highlight the key points (please help us by contributing more "
"speaker notes!). When presenting, you should make sure to open the speaker "
"notes in a popup (click the link with a little arrow next to \"Speaker "
"Notes\"). This way you have a clean screen to present to the class."
msgstr ""

#: src/running-the-course.md
msgid ""
"Decide on the dates. Since the course takes four days, we recommend that you "
"schedule the days over two weeks. Course participants have said that they "
"find it helpful to have a gap in the course since it helps them process all "
"the information we give them."
msgstr ""

#: src/running-the-course.md
msgid ""
"Find a room large enough for your in-person participants. We recommend a "
"class size of 15-25 people. That's small enough that people are comfortable "
"asking questions --- it's also small enough that one instructor will have "
"time to answer the questions. Make sure the room has _desks_ for yourself "
"and for the students: you will all need to be able to sit and work with your "
"laptops. In particular, you will be doing a lot of live-coding as an "
"instructor, so a lectern won't be very helpful for you."
msgstr ""

#: src/running-the-course.md
msgid ""
"On the day of your course, show up to the room a little early to set things "
"up. We recommend presenting directly using `mdbook serve` running on your "
"laptop (see the [installation instructions](https://github.com/google/"
"comprehensive-rust#building)). This ensures optimal performance with no lag "
"as you change pages. Using your laptop will also allow you to fix typos as "
"you or the course participants spot them."
msgstr ""

#: src/running-the-course.md
msgid ""
"Let people solve the exercises by themselves or in small groups. We "
"typically spend 30-45 minutes on exercises in the morning and in the "
"afternoon (including time to review the solutions). Make sure to ask people "
"if they're stuck or if there is anything you can help with. When you see "
"that several people have the same problem, call it out to the class and "
"offer a solution, e.g., by showing people where to find the relevant "
"information in the standard library."
msgstr ""

#: src/running-the-course.md
msgid ""
"That is all, good luck running the course! We hope it will be as much fun "
"for you as it has been for us!"
msgstr ""

#: src/running-the-course.md
msgid ""
"Please [provide feedback](https://github.com/google/comprehensive-rust/"
"discussions/86) afterwards so that we can keep improving the course. We "
"would love to hear what worked well for you and what can be made better. "
"Your students are also very welcome to [send us feedback](https://github.com/"
"google/comprehensive-rust/discussions/100)!"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Rust Fundamentals"
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"The first four days make up [Rust Fundamentals](../welcome-day-1.md). The "
"days are fast-paced and we cover a lot of ground!"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Course schedule:"
msgstr "Kursusplan:"

#: src/running-the-course/course-structure.md
msgid "Day 1 Morning (2 hours and 10 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-1.md
#: src/welcome-day-1-afternoon.md src/welcome-day-2.md
#: src/welcome-day-2-afternoon.md src/welcome-day-3.md
#: src/welcome-day-3-afternoon.md src/welcome-day-4.md
#: src/welcome-day-4-afternoon.md src/concurrency/welcome.md
#: src/concurrency/welcome-async.md src/idiomatic/welcome.md
msgid "Segment"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-1.md
#: src/hello-world.md src/types-and-values.md src/control-flow-basics.md
#: src/welcome-day-1-afternoon.md src/tuples-and-arrays.md src/references.md
#: src/user-defined-types.md src/welcome-day-2.md src/pattern-matching.md
#: src/methods-and-traits.md src/generics.md src/welcome-day-2-afternoon.md
#: src/closures.md src/std-types.md src/std-traits.md src/welcome-day-3.md
#: src/memory-management.md src/smart-pointers.md
#: src/welcome-day-3-afternoon.md src/borrowing.md src/lifetimes.md
#: src/welcome-day-4.md src/iterators.md src/modules.md src/testing.md
#: src/welcome-day-4-afternoon.md src/error-handling.md src/unsafe-rust.md
#: src/concurrency/welcome.md src/concurrency/threads.md
#: src/concurrency/channels.md src/concurrency/send-sync.md
#: src/concurrency/shared-state.md src/concurrency/sync-exercises.md
#: src/concurrency/welcome-async.md src/concurrency/async.md
#: src/concurrency/async-control-flow.md src/concurrency/async-pitfalls.md
#: src/concurrency/async-exercises.md src/idiomatic/welcome.md
#: src/idiomatic/leveraging-the-type-system.md
#: src/unsafe-deep-dive/motivations.md src/unsafe-deep-dive/foundations.md
msgid "Duration"
msgstr "Varighed"

#: src/running-the-course/course-structure.md src/welcome-day-1.md
#: src/types-and-values.md src/control-flow-basics.md src/tuples-and-arrays.md
#: src/references.md src/user-defined-types.md src/pattern-matching.md
#: src/generics.md src/closures.md src/std-types.md src/std-traits.md
#: src/memory-management.md src/smart-pointers.md src/lifetimes.md
#: src/iterators.md src/modules.md src/testing.md src/error-handling.md
#: src/unsafe-rust.md src/concurrency/shared-state.md
#: src/concurrency/async-control-flow.md src/concurrency/async-pitfalls.md
#: src/idiomatic/leveraging-the-type-system.md
#: src/unsafe-deep-dive/motivations.md
msgid "5 minutes"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-1.md
#: src/types-and-values.md src/control-flow-basics.md src/tuples-and-arrays.md
#: src/user-defined-types.md src/pattern-matching.md src/methods-and-traits.md
#: src/modules.md src/unsafe-rust.md src/concurrency/welcome.md
#: src/concurrency/threads.md src/concurrency/shared-state.md
msgid "15 minutes"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-1.md
#: src/concurrency/welcome-async.md
msgid "40 minutes"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-1.md
#: src/welcome-day-2.md src/welcome-day-4.md
msgid "45 minutes"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 1 Afternoon (2 hours and 45 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-1-afternoon.md
msgid "35 minutes"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-1-afternoon.md
#: src/welcome-day-3.md src/welcome-day-3-afternoon.md src/welcome-day-4.md
#: src/welcome-day-4-afternoon.md src/concurrency/welcome-async.md
msgid "55 minutes"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-1-afternoon.md
#: src/welcome-day-2-afternoon.md src/welcome-day-3.md
msgid "1 hour"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 2 Morning (2 hours and 45 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md src/hello-world.md
#: src/types-and-values.md src/control-flow-basics.md src/tuples-and-arrays.md
#: src/references.md src/welcome-day-2.md src/methods-and-traits.md
#: src/closures.md src/std-types.md src/welcome-day-3.md src/borrowing.md
#: src/welcome-day-4.md src/iterators.md src/modules.md src/testing.md
#: src/error-handling.md
msgid "3 minutes"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-2.md
#: src/welcome-day-3-afternoon.md
msgid "50 minutes"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 2 Afternoon (2 hours and 50 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-2-afternoon.md
#: src/std-traits.md src/smart-pointers.md src/lifetimes.md src/iterators.md
#: src/testing.md src/unsafe-rust.md src/concurrency/welcome.md
#: src/concurrency/sync-exercises.md src/concurrency/async-exercises.md
msgid "30 minutes"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 3 Morning (2 hours and 20 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 3 Afternoon (1 hour and 55 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 4 Morning (2 hours and 50 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 4 Afternoon (2 hours and 20 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md src/welcome-day-4-afternoon.md
msgid "1 hour and 15 minutes"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Deep Dives"
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"In addition to the 4-day class on Rust Fundamentals, we cover some more "
"specialized topics:"
msgstr ""
"Ud over kurset p√• fire dage om Grundl√¶ggende Rust, d√¶kker vi mere "
"specialiserede emner:"

#: src/running-the-course/course-structure.md
msgid "Rust in Android"
msgstr "Rust i Android"

#: src/running-the-course/course-structure.md
msgid ""
"The [Rust in Android](../android.md) deep dive is a half-day course on using "
"Rust for Android platform development. This includes interoperability with "
"C, C++, and Java."
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"You will need an [AOSP checkout](https://source.android.com/docs/setup/"
"download/downloading). Make a checkout of the [course repository](https://"
"github.com/google/comprehensive-rust) on the same machine and move the `src/"
"android/` directory into the root of your AOSP checkout. This will ensure "
"that the Android build system sees the `Android.bp` files in `src/android/`."
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"Ensure that `adb sync` works with your emulator or real device and pre-build "
"all Android examples using `src/android/build_all.sh`. Read the script to "
"see the commands it runs and make sure they work when you run them by hand."
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Rust in Chromium"
msgstr "Rust i Chromium"

#: src/running-the-course/course-structure.md
msgid ""
"The [Rust in Chromium](../chromium.md) deep dive is a half-day course on "
"using Rust as part of the Chromium browser. It includes using Rust in "
"Chromium's `gn` build system, bringing in third-party libraries (\"crates\") "
"and C++ interoperability."
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"You will need to be able to build Chromium --- a debug, component build is "
"[recommended](../chromium/setup.md) for speed but any build will work. "
"Ensure that you can run the Chromium browser that you've built."
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Bare-Metal Rust"
msgstr "Bare-Metal Rust"

#: src/running-the-course/course-structure.md
msgid ""
"The [Bare-Metal Rust](../bare-metal.md) deep dive is a full day class on "
"using Rust for bare-metal (embedded) development. Both microcontrollers and "
"application processors are covered."
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"For the microcontroller part, you will need to buy the [BBC micro:bit]"
"(https://microbit.org/) v2 development board ahead of time. Everybody will "
"need to install a number of packages as described on the [welcome page](../"
"bare-metal.md)."
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Concurrency in Rust"
msgstr "Samtidighed i Rust"

#: src/running-the-course/course-structure.md
msgid ""
"The [Concurrency in Rust](../concurrency/welcome.md) deep dive is a full day "
"class on classical as well as `async`/`await` concurrency."
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"You will need a fresh crate set up and the dependencies downloaded and ready "
"to go. You can then copy/paste the examples into `src/main.rs` to experiment "
"with them:"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Morning (3 hours and 20 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md src/references.md
#: src/std-types.md src/memory-management.md src/borrowing.md
#: src/error-handling.md src/concurrency/welcome.md
#: src/concurrency/sync-exercises.md src/concurrency/welcome-async.md
#: src/concurrency/async-pitfalls.md src/concurrency/async-exercises.md
#: src/idiomatic/leveraging-the-type-system.md
msgid "20 minutes"
msgstr ""

#: src/running-the-course/course-structure.md src/concurrency/welcome.md
msgid "Send and Sync"
msgstr "Send og Sync"

#: src/running-the-course/course-structure.md src/concurrency/welcome.md
#: src/concurrency/welcome-async.md
msgid "1 hour and 10 minutes"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Afternoon (3 hours and 30 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"The [Idiomatic Rust](../idiomatic/welcome.md) deep dive is a 2-day class on "
"Rust idioms and patterns."
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"You should be familiar with the material in [Rust Fundamentals](../welcome-"
"day-1.md) before starting this course."
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Morning (25 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md src/idiomatic/welcome.md
msgid "25 minutes"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Unsafe (Work in Progress)"
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"The [Unsafe](../unsafe-deep-dive/welcome.md) deep dive is a two-day class on "
"the _unsafe_ Rust language. It covers the fundamentals of Rust's safety "
"guarantees, the motivation for `unsafe`, review process for `unsafe` code, "
"FFI basics, and building data structures that the borrow checker would "
"normally reject."
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Day 1 Morning (1 hour, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md src/hello-world.md
#: src/control-flow-basics.md src/user-defined-types.md
#: src/memory-management.md src/concurrency/channels.md
#: src/concurrency/send-sync.md src/unsafe-deep-dive/foundations.md
msgid "2 minutes"
msgstr ""

#: src/running-the-course/course-structure.md
msgid "Format"
msgstr ""

#: src/running-the-course/course-structure.md
msgid ""
"The course is meant to be very interactive and we recommend letting the "
"questions drive the exploration of Rust!"
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md
msgid "There are several useful keyboard shortcuts in mdBook:"
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md
msgid "<kbd>Arrow-Left</kbd>: Navigate to the previous page."
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md
msgid "<kbd>Arrow-Right</kbd>: Navigate to the next page."
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md
msgid "<kbd>Ctrl + Enter</kbd>: Execute the code sample that has focus."
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md
msgid "<kbd>s</kbd>: Activate the search bar."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"The course has been translated into other languages by a set of wonderful "
"volunteers:"
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Brazilian Portuguese](https://google.github.io/comprehensive-rust/pt-BR/) "
"by [@rastringer](https://github.com/rastringer), [@hugojacob](https://"
"github.com/hugojacob), [@joaovicmendes](https://github.com/joaovicmendes), "
"and [@henrif75](https://github.com/henrif75)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Chinese (Simplified)](https://google.github.io/comprehensive-rust/zh-CN/) "
"by [@suetfei](https://github.com/suetfei), [@wnghl](https://github.com/"
"wnghl), [@anlunx](https://github.com/anlunx), [@kongy](https://github.com/"
"kongy), [@noahdragon](https://github.com/noahdragon), [@superwhd](https://"
"github.com/superwhd), @SketchK, and [@nodmp](https://github.com/nodmp)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Chinese (Traditional)](https://google.github.io/comprehensive-rust/zh-TW/) "
"by [@hueich](https://github.com/hueich), [@victorhsieh](https://github.com/"
"victorhsieh), [@mingyc](https://github.com/mingyc), [@kuanhungchen](https://"
"github.com/kuanhungchen), and [@johnathan79717](https://github.com/"
"johnathan79717)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Farsi](https://google.github.io/comprehensive-rust/fa/) by [@DannyRavi]"
"(https://github.com/DannyRavi), [@javad-jafari](https://github.com/javad-"
"jafari), [@Alix1383](https://github.com/alix1383), [@moaminsharifi](https://"
"github.com/moaminsharifi) , [@hamidrezakp](https://github.com/hamidrezakp) "
"and [@mehrad77](https://github.com/mehrad77)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Japanese](https://google.github.io/comprehensive-rust/ja/) by [@CoinEZ-JPN]"
"(https://github.com/CoinEZ), [@momotaro1105](https://github.com/"
"momotaro1105), [@HidenoriKobayashi](https://github.com/HidenoriKobayashi) "
"and [@kantasv](https://github.com/kantasv)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Korean](https://google.github.io/comprehensive-rust/ko/) by [@keispace]"
"(https://github.com/keispace), [@jiyongp](https://github.com/jiyongp), "
"[@jooyunghan](https://github.com/jooyunghan), and [@namhyung](https://"
"github.com/namhyung)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Spanish](https://google.github.io/comprehensive-rust/es/) by [@deavid]"
"(https://github.com/deavid)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Ukrainian](https://google.github.io/comprehensive-rust/uk/) by [@git-user-"
"cpp](https://github.com/git-user-cpp), [@yaremam](https://github.com/"
"yaremam) and [@reta](https://github.com/reta)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"Use the language picker in the top-right corner to switch between languages."
msgstr ""

#: src/running-the-course/translations.md
msgid "Incomplete Translations"
msgstr "Ufuldst√¶ndige overs√¶ttelser"

#: src/running-the-course/translations.md
msgid ""
"There is a large number of in-progress translations. We link to the most "
"recently updated translations:"
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Arabic](https://google.github.io/comprehensive-rust/ar/) by [@younies]"
"(https://github.com/younies)"
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Bengali](https://google.github.io/comprehensive-rust/bn/) by [@raselmandol]"
"(https://github.com/raselmandol)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[French](https://google.github.io/comprehensive-rust/fr/) by [@KookaS]"
"(https://github.com/KookaS), [@vcaen](https://github.com/vcaen) and "
"[@AdrienBaudemont](https://github.com/AdrienBaudemont)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[German](https://google.github.io/comprehensive-rust/de/) by [@Throvn]"
"(https://github.com/Throvn) and [@ronaldfw](https://github.com/ronaldfw)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"[Italian](https://google.github.io/comprehensive-rust/it/) by "
"[@henrythebuilder](https://github.com/henrythebuilder) and [@detro](https://"
"github.com/detro)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"The full list of translations with their current status is also available "
"either [as of their last update](https://google.github.io/comprehensive-rust/"
"translation-report.html) or [synced to the latest version of the course]"
"(https://google.github.io/comprehensive-rust/synced-translation-report.html)."
msgstr ""

#: src/running-the-course/translations.md
msgid ""
"If you want to help with this effort, please see [our instructions](https://"
"github.com/google/comprehensive-rust/blob/main/TRANSLATIONS.md) for how to "
"get going. Translations are coordinated on the [issue tracker](https://"
"github.com/google/comprehensive-rust/issues/282)."
msgstr ""

#: src/cargo.md
msgid ""
"When you start reading about Rust, you will soon meet [Cargo](https://"
"doc.rust-lang.org/cargo/), the standard tool used in the Rust ecosystem to "
"build and run Rust applications. Here we want to give a brief overview of "
"what Cargo is and how it fits into the wider ecosystem and how it fits into "
"this training."
msgstr ""

#: src/cargo.md
msgid "Installation"
msgstr "Installation"

#: src/cargo.md
msgid "**Please follow the instructions on <https://rustup.rs/>.**"
msgstr ""

#: src/cargo.md
msgid ""
"This will give you the Cargo build tool (`cargo`) and the Rust compiler "
"(`rustc`). You will also get `rustup`, a command line utility that you can "
"use to install different compiler versions."
msgstr ""

#: src/cargo.md
msgid ""
"After installing Rust, you should configure your editor or IDE to work with "
"Rust. Most editors do this by talking to [rust-analyzer](https://rust-"
"analyzer.github.io/), which provides auto-completion and jump-to-definition "
"functionality for [VS Code](https://code.visualstudio.com/), [Emacs](https://"
"rust-analyzer.github.io/manual.html#emacs), [Vim/Neovim](https://rust-"
"analyzer.github.io/manual.html#vimneovim), and many others. There is also a "
"different IDE available called [RustRover](https://www.jetbrains.com/rust/)."
msgstr ""

#: src/cargo.md
msgid "On Debian/Ubuntu, you can install `rustup` via `apt`:"
msgstr ""

#: src/cargo.md
msgid ""
"On macOS, you can use [Homebrew](https://brew.sh/) to install Rust, but this "
"may provide an outdated version. Therefore, it is recommended to install "
"Rust from the official site."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid "The Rust Ecosystem"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"The Rust ecosystem consists of a number of tools, of which the main ones are:"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"`rustc`: the Rust compiler that turns `.rs` files into binaries and other "
"intermediate formats."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"`cargo`: the Rust dependency manager and build tool. Cargo knows how to "
"download dependencies, usually hosted on <https://crates.io>, and it will "
"pass them to `rustc` when building your project. Cargo also comes with a "
"built-in test runner which is used to execute unit tests."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"`rustup`: the Rust toolchain installer and updater. This tool is used to "
"install and update `rustc` and `cargo` when new versions of Rust are "
"released. In addition, `rustup` can also download documentation for the "
"standard library. You can have multiple versions of Rust installed at once "
"and `rustup` will let you switch between them as needed."
msgstr ""

#: src/cargo/rust-ecosystem.md src/types-and-values/hello-world.md
#: src/references/exclusive.md src/memory-management/move.md
#: src/error-handling/try.md src/unsafe-rust/unsafe-functions/calling.md
#: src/android/setup.md src/concurrency/async/async-await.md
msgid "Key points:"
msgstr "N√∏glepunkter:"

#: src/cargo/rust-ecosystem.md
msgid ""
"Rust has a rapid release schedule with a new release coming out every six "
"weeks. New releases maintain backwards compatibility with old releases --- "
"plus they enable new functionality."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"There are three release channels: \"stable\", \"beta\", and \"nightly\"."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"New features are being tested on \"nightly\", \"beta\" is what becomes "
"\"stable\" every six weeks."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"Dependencies can also be resolved from alternative [registries](https://"
"doc.rust-lang.org/cargo/reference/registries.html), git, folders, and more."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"Rust also has [editions](https://doc.rust-lang.org/edition-guide/): the "
"current edition is Rust 2024. Previous editions were Rust 2015, Rust 2018 "
"and Rust 2021."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"The editions are allowed to make backwards incompatible changes to the "
"language."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"To prevent breaking code, editions are opt-in: you select the edition for "
"your crate via the `Cargo.toml` file."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"To avoid splitting the ecosystem, Rust compilers can mix code written for "
"different editions."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"Mention that it is quite rare to ever use the compiler directly not through "
"`cargo` (most users never do)."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"It might be worth alluding that Cargo itself is an extremely powerful and "
"comprehensive tool. It is capable of many advanced features including but "
"not limited to:"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid "Project/package structure"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid "[workspaces](https://doc.rust-lang.org/cargo/reference/workspaces.html)"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid "Dev Dependencies and Runtime Dependency management/caching"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"[build scripting](https://doc.rust-lang.org/cargo/reference/build-"
"scripts.html)"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"[global installation](https://doc.rust-lang.org/cargo/commands/cargo-"
"install.html)"
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"It is also extensible with sub command plugins as well (such as [cargo "
"clippy](https://github.com/rust-lang/rust-clippy))."
msgstr ""

#: src/cargo/rust-ecosystem.md
msgid ""
"Read more from the [official Cargo Book](https://doc.rust-lang.org/cargo/)"
msgstr ""

#: src/cargo/code-samples.md
msgid "Code Samples in This Training"
msgstr ""

#: src/cargo/code-samples.md
msgid ""
"For this training, we will mostly explore the Rust language through examples "
"which can be executed through your browser. This makes the setup much easier "
"and ensures a consistent experience for everyone."
msgstr ""

#: src/cargo/code-samples.md
msgid ""
"Installing Cargo is still encouraged: it will make it easier for you to do "
"the exercises. On the last day, we will do a larger exercise that shows you "
"how to work with dependencies and for that you need Cargo."
msgstr ""

#: src/cargo/code-samples.md
msgid "The code blocks in this course are fully interactive:"
msgstr ""

#: src/cargo/code-samples.md src/cargo/running-locally.md
msgid "\"Edit me!\""
msgstr "\"Rediger mig!\""

#: src/cargo/code-samples.md
#, fuzzy
msgid ""
"You can use <kbd>Ctrl + Enter</kbd> to execute the code when focus is in the "
"text box."
msgstr "for at afvikle koden n√•r tekstboksen er i fokus."

#: src/cargo/code-samples.md
msgid ""
"Most code samples are editable like shown above. A few code samples are not "
"editable for various reasons:"
msgstr ""

#: src/cargo/code-samples.md
msgid ""
"The embedded playgrounds cannot execute unit tests. Copy-paste the code and "
"open it in the real Playground to demonstrate unit tests."
msgstr ""

#: src/cargo/code-samples.md
msgid ""
"The embedded playgrounds lose their state the moment you navigate away from "
"the page! This is the reason that the students should solve the exercises "
"using a local Rust installation or via the Playground."
msgstr ""

#: src/cargo/running-locally.md
msgid "Running Code Locally with Cargo"
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"If you want to experiment with the code on your own system, then you will "
"need to first install Rust. Do this by following the [instructions in the "
"Rust Book](https://doc.rust-lang.org/book/ch01-01-installation.html). This "
"should give you a working `rustc` and `cargo`. At the time of writing, the "
"latest stable Rust release has these version numbers:"
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"You can use any later version too since Rust maintains backwards "
"compatibility."
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"With this in place, follow these steps to build a Rust binary from one of "
"the examples in this training:"
msgstr ""

#: src/cargo/running-locally.md
msgid "Click the \"Copy to clipboard\" button on the example you want to copy."
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"Use `cargo new exercise` to create a new `exercise/` directory for your code:"
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"Navigate into `exercise/` and use `cargo run` to build and run your binary:"
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"Replace the boilerplate code in `src/main.rs` with your own code. For "
"example, using the example on the previous page, make `src/main.rs` look like"
msgstr ""

#: src/cargo/running-locally.md
msgid "Use `cargo run` to build and run your updated binary:"
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"Use `cargo check` to quickly check your project for errors, use `cargo "
"build` to compile it without running it. You will find the output in `target/"
"debug/` for a normal debug build. Use `cargo build --release` to produce an "
"optimized release build in `target/release/`."
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"You can add dependencies for your project by editing `Cargo.toml`. When you "
"run `cargo` commands, it will automatically download and compile missing "
"dependencies for you."
msgstr ""

#: src/cargo/running-locally.md
msgid ""
"Try to encourage the class participants to install Cargo and use a local "
"editor. It will make their life easier since they will have a normal "
"development environment."
msgstr ""

#: src/welcome-day-1.md
msgid "Welcome to Day 1"
msgstr "Velkommen til Dag 1"

#: src/welcome-day-1.md
msgid ""
"This is the first day of Rust Fundamentals. We will cover a lot of ground "
"today:"
msgstr ""
"Dette er den f√∏rste dag af Rust Fundamentals. Vi kommer til at d√¶kke en "
"masse terr√¶n i dag:"

#: src/welcome-day-1.md
msgid ""
"Basic Rust syntax: variables, scalar and compound types, enums, structs, "
"references, functions, and methods."
msgstr ""

#: src/welcome-day-1.md
#, fuzzy
msgid "Types and type inference."
msgstr "Typeudledning"

#: src/welcome-day-1.md
msgid "Control flow constructs: loops, conditionals, and so on."
msgstr ""

#: src/welcome-day-1.md
msgid "User-defined types: structs and enums."
msgstr ""

#: src/welcome-day-1.md src/welcome-day-2.md src/welcome-day-3.md
#: src/welcome-day-4.md src/concurrency/welcome.md
#: src/concurrency/welcome-async.md src/idiomatic/welcome.md
msgid "Schedule"
msgstr ""

#: src/welcome-day-1.md
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 10 "
"minutes. It contains:"
msgstr ""

#: src/welcome-day-1.md
msgid "Please remind the students that:"
msgstr ""

#: src/welcome-day-1.md
msgid ""
"They should ask questions when they get them, don't save them to the end."
msgstr ""

#: src/welcome-day-1.md
msgid ""
"The class is meant to be interactive and discussions are very much "
"encouraged!"
msgstr ""

#: src/welcome-day-1.md
msgid ""
"As an instructor, you should try to keep the discussions relevant, i.e., "
"keep the discussions related to how Rust does things vs. some other "
"language. It can be hard to find the right balance, but err on the side of "
"allowing discussions since they engage people much more than one-way "
"communication."
msgstr ""

#: src/welcome-day-1.md
msgid ""
"The questions will likely mean that we talk about things ahead of the slides."
msgstr ""

#: src/welcome-day-1.md
msgid ""
"This is perfectly okay! Repetition is an important part of learning. "
"Remember that the slides are just a support and you are free to skip them as "
"you like."
msgstr ""

#: src/welcome-day-1.md
msgid ""
"The idea for the first day is to show the \"basic\" things in Rust that "
"should have immediate parallels in other languages. The more advanced parts "
"of Rust come on the subsequent days."
msgstr ""

#: src/welcome-day-1.md
msgid ""
"If you're teaching this in a classroom, this is a good place to go over the "
"schedule. Note that there is an exercise at the end of each segment, "
"followed by a break. Plan to cover the exercise solution after the break. "
"The times listed here are a suggestion in order to keep the course on "
"schedule. Feel free to be flexible and adjust as necessary!"
msgstr ""

#: src/hello-world.md src/concurrency/send-sync.md
msgid "This segment should take about 15 minutes. It contains:"
msgstr ""

#: src/hello-world.md src/types-and-values.md src/control-flow-basics.md
#: src/tuples-and-arrays.md src/references.md src/user-defined-types.md
#: src/pattern-matching.md src/methods-and-traits.md src/generics.md
#: src/closures.md src/std-types.md src/std-traits.md src/memory-management.md
#: src/smart-pointers.md src/borrowing.md src/lifetimes.md src/iterators.md
#: src/modules.md src/testing.md src/error-handling.md src/unsafe-rust.md
#: src/concurrency/threads.md src/concurrency/channels.md
#: src/concurrency/send-sync.md src/concurrency/shared-state.md
#: src/concurrency/sync-exercises.md src/concurrency/async.md
#: src/concurrency/async-control-flow.md src/concurrency/async-pitfalls.md
#: src/concurrency/async-exercises.md
#: src/idiomatic/leveraging-the-type-system.md
#: src/unsafe-deep-dive/motivations.md src/unsafe-deep-dive/foundations.md
msgid "Slide"
msgstr ""

#: src/hello-world.md src/references.md src/user-defined-types.md
#: src/pattern-matching.md src/methods-and-traits.md src/generics.md
#: src/closures.md src/std-types.md src/memory-management.md
#: src/smart-pointers.md src/borrowing.md src/lifetimes.md src/modules.md
#: src/unsafe-rust.md src/concurrency/channels.md src/concurrency/send-sync.md
#: src/concurrency/shared-state.md src/concurrency/async.md
#: src/concurrency/async-control-flow.md src/concurrency/async-pitfalls.md
#: src/unsafe-deep-dive/foundations.md
msgid "10 minutes"
msgstr ""

#: src/hello-world/what-is-rust.md
msgid ""
"Rust is a new programming language that had its [1.0 release in 2015]"
"(https://blog.rust-lang.org/2015/05/15/Rust-1.0.html):"
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "Rust is a statically compiled language in a similar role as C++"
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "`rustc` uses LLVM as its backend."
msgstr ""

#: src/hello-world/what-is-rust.md
msgid ""
"Rust supports many [platforms and architectures](https://doc.rust-lang.org/"
"nightly/rustc/platform-support.html):"
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "x86, ARM, WebAssembly, ..."
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "Linux, Mac, Windows, ..."
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "Rust is used for a wide range of devices:"
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "firmware and boot loaders,"
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "smart displays,"
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "mobile phones,"
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "desktops,"
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "servers."
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "Rust fits in the same area as C++:"
msgstr "Rust har det samme anvendelsesomr√•de som C++:"

#: src/hello-world/what-is-rust.md
msgid "High flexibility."
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "High level of control."
msgstr ""

#: src/hello-world/what-is-rust.md
msgid ""
"Can be scaled down to very constrained devices such as microcontrollers."
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "Has no runtime or garbage collection."
msgstr ""

#: src/hello-world/what-is-rust.md
msgid "Focuses on reliability and safety without sacrificing performance."
msgstr ""

#: src/hello-world/benefits.md
msgid "Some unique selling points of Rust:"
msgstr ""

#: src/hello-world/benefits.md
msgid ""
"_Compile time memory safety_ - whole classes of memory bugs are prevented at "
"compile time"
msgstr ""

#: src/hello-world/benefits.md
msgid "No uninitialized variables."
msgstr ""

#: src/hello-world/benefits.md
msgid "No double-frees."
msgstr ""

#: src/hello-world/benefits.md
msgid "No use-after-free."
msgstr ""

#: src/hello-world/benefits.md
msgid "No `NULL` pointers."
msgstr ""

#: src/hello-world/benefits.md
msgid "No forgotten locked mutexes."
msgstr ""

#: src/hello-world/benefits.md
msgid "No data races between threads."
msgstr ""

#: src/hello-world/benefits.md
msgid "No iterator invalidation."
msgstr ""

#: src/hello-world/benefits.md
msgid ""
"_No undefined runtime behavior_ - what a Rust statement does is never left "
"unspecified"
msgstr ""

#: src/hello-world/benefits.md
msgid "Array access is bounds checked."
msgstr ""

#: src/hello-world/benefits.md
msgid "Integer overflow is defined (panic or wrap-around)."
msgstr ""

#: src/hello-world/benefits.md
msgid ""
"_Modern language features_ - as expressive and ergonomic as higher-level "
"languages"
msgstr ""

#: src/hello-world/benefits.md
msgid "Enums and pattern matching."
msgstr ""

#: src/hello-world/benefits.md
msgid "Generics."
msgstr ""

#: src/hello-world/benefits.md
msgid "No overhead FFI."
msgstr ""

#: src/hello-world/benefits.md
msgid "Zero-cost abstractions."
msgstr ""

#: src/hello-world/benefits.md
msgid "Great compiler errors."
msgstr ""

#: src/hello-world/benefits.md
msgid "Built-in dependency manager."
msgstr ""

#: src/hello-world/benefits.md
msgid "Built-in support for testing."
msgstr ""

#: src/hello-world/benefits.md
msgid "Excellent Language Server Protocol support."
msgstr ""

#: src/hello-world/benefits.md
msgid ""
"Do not spend much time here. All of these points will be covered in more "
"depth later."
msgstr ""

#: src/hello-world/benefits.md
msgid ""
"Make sure to ask the class which languages they have experience with. "
"Depending on the answer you can highlight different features of Rust:"
msgstr ""

#: src/hello-world/benefits.md
msgid ""
"Experience with C or C++: Rust eliminates a whole class of _runtime errors_ "
"via the borrow checker. You get performance like in C and C++, but you don't "
"have the memory unsafety issues. In addition, you get a modern language with "
"constructs like pattern matching and built-in dependency management."
msgstr ""

#: src/hello-world/benefits.md
msgid ""
"Experience with Java, Go, Python, JavaScript...: You get the same memory "
"safety as in those languages, plus a similar high-level language feeling. In "
"addition you get fast and predictable performance like C and C++ (no garbage "
"collector) as well as access to low-level hardware (should you need it)."
msgstr ""

#: src/hello-world/playground.md
msgid ""
"The [Rust Playground](https://play.rust-lang.org/) provides an easy way to "
"run short Rust programs, and is the basis for the examples and exercises in "
"this course. Try running the \"hello-world\" program it starts with. It "
"comes with a few handy features:"
msgstr ""

#: src/hello-world/playground.md
msgid ""
"Under \"Tools\", use the `rustfmt` option to format your code in the "
"\"standard\" way."
msgstr ""

#: src/hello-world/playground.md
msgid ""
"Rust has two main \"profiles\" for generating code: Debug (extra runtime "
"checks, less optimization) and Release (fewer runtime checks, lots of "
"optimization). These are accessible under \"Debug\" at the top."
msgstr ""

#: src/hello-world/playground.md
msgid ""
"If you're interested, use \"ASM\" under \"...\" to see the generated "
"assembly code."
msgstr ""

#: src/hello-world/playground.md
msgid ""
"As students head into the break, encourage them to open up the playground "
"and experiment a little. Encourage them to keep the tab open and try things "
"out during the rest of the course. This is particularly helpful for advanced "
"students who want to know more about Rust's optimizations or generated "
"assembly."
msgstr ""

#: src/types-and-values.md src/concurrency/async.md
msgid "This segment should take about 40 minutes. It contains:"
msgstr ""

#: src/types-and-values/hello-world.md
msgid ""
"Let us jump into the simplest possible Rust program, a classic Hello World "
"program:"
msgstr ""

#: src/types-and-values/hello-world.md
msgid "\"Hello üåç!\""
msgstr "\"Hallo üåç!\""

#: src/types-and-values/hello-world.md
msgid "What you see:"
msgstr "Hvad du ser:"

#: src/types-and-values/hello-world.md
msgid "Functions are introduced with `fn`."
msgstr ""

#: src/types-and-values/hello-world.md
msgid "The `main` function is the entry point of the program."
msgstr ""

#: src/types-and-values/hello-world.md
msgid "Blocks are delimited by curly braces like in C and C++."
msgstr ""

#: src/types-and-values/hello-world.md
msgid "Statements end with `;`."
msgstr ""

#: src/types-and-values/hello-world.md
msgid "Rust has hygienic macros, `println!` is an example of this."
msgstr ""

#: src/types-and-values/hello-world.md
msgid "Rust strings are UTF-8 encoded and can contain any Unicode character."
msgstr ""

#: src/types-and-values/hello-world.md
msgid ""
"This slide tries to make the students comfortable with Rust code. They will "
"see a ton of it over the next four days so we start small with something "
"familiar."
msgstr ""

#: src/types-and-values/hello-world.md
msgid ""
"Rust is very much like other languages in the C/C++/Java tradition. It is "
"imperative and it doesn't try to reinvent things unless absolutely necessary."
msgstr ""

#: src/types-and-values/hello-world.md
msgid "Rust is modern with full support for Unicode."
msgstr ""

#: src/types-and-values/hello-world.md
msgid ""
"Rust uses macros for situations where you want to have a variable number of "
"arguments (no function [overloading](../control-flow-basics/functions.md))."
msgstr ""

#: src/types-and-values/hello-world.md
msgid ""
"Macros being 'hygienic' means they don't accidentally capture identifiers "
"from the scope they are used in. Rust macros are actually only [partially "
"hygienic](https://veykril.github.io/tlborm/decl-macros/minutiae/"
"hygiene.html)."
msgstr ""

#: src/types-and-values/hello-world.md
msgid ""
"Rust is multi-paradigm. For example, it has powerful [object-oriented "
"programming features](https://doc.rust-lang.org/book/ch17-00-oop.html), and, "
"while it is not a functional language, it includes a range of [functional "
"concepts](https://doc.rust-lang.org/book/ch13-00-functional-features.html)."
msgstr ""

#: src/types-and-values/variables.md
msgid ""
"Rust provides type safety via static typing. Variable bindings are made with "
"`let`:"
msgstr ""

#: src/types-and-values/variables.md
#, fuzzy
msgid "\"x: {x}\""
msgstr "\"{x}\""

#: src/types-and-values/variables.md
msgid ""
"// x = 20;\n"
"    // println!(\"x: {x}\");\n"
msgstr ""

#: src/types-and-values/variables.md
msgid ""
"Uncomment the `x = 20` to demonstrate that variables are immutable by "
"default. Add the `mut` keyword to allow changes."
msgstr ""

#: src/types-and-values/variables.md
msgid ""
"Warnings are enabled for this slide, such as for unused variables or "
"unnecessary `mut`. These are omitted in most slides to avoid distracting "
"warnings. Try removing the mutation but leaving the `mut` keyword in place."
msgstr ""

#: src/types-and-values/variables.md
msgid ""
"The `i32` here is the type of the variable. This must be known at compile "
"time, but type inference (covered later) allows the programmer to omit it in "
"many cases."
msgstr ""

#: src/types-and-values/values.md
msgid ""
"Here are some basic built-in types, and the syntax for literal values of "
"each type."
msgstr ""

#: src/types-and-values/values.md src/unsafe-rust/exercise.md
msgid "Types"
msgstr ""

#: src/types-and-values/values.md
msgid "Literals"
msgstr ""

#: src/types-and-values/values.md
msgid "Signed integers"
msgstr ""

#: src/types-and-values/values.md
msgid "`i8`, `i16`, `i32`, `i64`, `i128`, `isize`"
msgstr ""

#: src/types-and-values/values.md
msgid "`-10`, `0`, `1_000`, `123_i64`"
msgstr ""

#: src/types-and-values/values.md
msgid "Unsigned integers"
msgstr ""

#: src/types-and-values/values.md
msgid "`u8`, `u16`, `u32`, `u64`, `u128`, `usize`"
msgstr ""

#: src/types-and-values/values.md
msgid "`0`, `123`, `10_u16`"
msgstr ""

#: src/types-and-values/values.md
msgid "Floating point numbers"
msgstr ""

#: src/types-and-values/values.md
msgid "`f32`, `f64`"
msgstr ""

#: src/types-and-values/values.md
msgid "`3.14`, `-10.0e20`, `2_f32`"
msgstr ""

#: src/types-and-values/values.md
msgid "Unicode scalar values"
msgstr ""

#: src/types-and-values/values.md src/android/aidl/types/primitives.md
msgid "`char`"
msgstr ""

#: src/types-and-values/values.md
msgid "`'a'`, `'Œ±'`, `'‚àû'`"
msgstr ""

#: src/types-and-values/values.md
msgid "Booleans"
msgstr ""

#: src/types-and-values/values.md src/android/aidl/types/primitives.md
msgid "`bool`"
msgstr ""

#: src/types-and-values/values.md
msgid "`true`, `false`"
msgstr ""

#: src/types-and-values/values.md
msgid "The types have widths as follows:"
msgstr ""

#: src/types-and-values/values.md
msgid "`iN`, `uN`, and `fN` are _N_ bits wide,"
msgstr ""

#: src/types-and-values/values.md
msgid "`isize` and `usize` are the width of a pointer,"
msgstr ""

#: src/types-and-values/values.md
msgid "`char` is 32 bits wide,"
msgstr ""

#: src/types-and-values/values.md
msgid "`bool` is 8 bits wide."
msgstr ""

#: src/types-and-values/values.md
msgid "There are a few syntaxes that are not shown above:"
msgstr ""

#: src/types-and-values/values.md
msgid ""
"All underscores in numbers can be left out, they are for legibility only. So "
"`1_000` can be written as `1000` (or `10_00`), and `123_i64` can be written "
"as `123i64`."
msgstr ""

#: src/types-and-values/arithmetic.md
#, fuzzy
msgid "\"result: {}\""
msgstr "\"result: {:?}\""

#: src/types-and-values/arithmetic.md
msgid ""
"This is the first time we've seen a function other than `main`, but the "
"meaning should be clear: it takes three integers, and returns an integer. "
"Functions will be covered in more detail later."
msgstr ""

#: src/types-and-values/arithmetic.md
msgid "Arithmetic is very similar to other languages, with similar precedence."
msgstr ""

#: src/types-and-values/arithmetic.md
msgid ""
"What about integer overflow? In C and C++ overflow of _signed_ integers is "
"actually undefined, and might do unknown things at runtime. In Rust, it's "
"defined."
msgstr ""

#: src/types-and-values/arithmetic.md
msgid ""
"Change the `i32`'s to `i16` to see an integer overflow, which panics "
"(checked) in a debug build and wraps in a release build. There are other "
"options, such as overflowing, saturating, and carrying. These are accessed "
"with method syntax, e.g., `(a * b).saturating_add(b * c).saturating_add(c * "
"a)`."
msgstr ""

#: src/types-and-values/arithmetic.md
msgid ""
"In fact, the compiler will detect overflow of constant expressions, which is "
"why the example requires a separate function."
msgstr ""

#: src/types-and-values/inference.md
msgid "Rust will look at how the variable is _used_ to determine the type:"
msgstr ""

#: src/types-and-values/inference.md
msgid ""
"This slide demonstrates how the Rust compiler infers types based on "
"constraints given by variable declarations and usages."
msgstr ""

#: src/types-and-values/inference.md
msgid ""
"It is very important to emphasize that variables declared like this are not "
"of some sort of dynamic \"any type\" that can hold any data. The machine "
"code generated by such declaration is identical to the explicit declaration "
"of a type. The compiler does the job for us and helps us write more concise "
"code."
msgstr ""

#: src/types-and-values/inference.md
msgid ""
"When nothing constrains the type of an integer literal, Rust defaults to "
"`i32`. This sometimes appears as `{integer}` in error messages. Similarly, "
"floating-point literals default to `f64`."
msgstr ""

#: src/types-and-values/inference.md
msgid "// ERROR: no implementation for `{float} == {integer}`\n"
msgstr ""

#: src/types-and-values/exercise.md
msgid ""
"The Fibonacci sequence begins with `[0, 1]`. For `n > 1`, the next number is "
"the sum of the previous two."
msgstr ""

#: src/types-and-values/exercise.md
msgid ""
"Write a function `fib(n)` that calculates the nth Fibonacci number. When "
"will this function panic?"
msgstr ""

#: src/types-and-values/exercise.md
msgid "// The base case.\n"
msgstr ""

#: src/types-and-values/exercise.md src/control-flow-basics/exercise.md
msgid "\"Implement this\""
msgstr ""

#: src/types-and-values/exercise.md
msgid "// The recursive case.\n"
msgstr ""

#: src/types-and-values/exercise.md src/types-and-values/solution.md
#, fuzzy
msgid "\"fib({n}) = {}\""
msgstr "\"fib({i}): {n}\""

#: src/control-flow-basics.md src/methods-and-traits.md src/generics.md
#: src/modules.md src/testing.md
msgid "This segment should take about 45 minutes. It contains:"
msgstr ""

#: src/control-flow-basics.md
#, fuzzy
msgid "if Expressions"
msgstr "`if let`-udtryk"

#: src/control-flow-basics.md src/pattern-matching.md src/concurrency/async.md
#: src/concurrency/async-control-flow.md
msgid "4 minutes"
msgstr ""

#: src/control-flow-basics.md
#, fuzzy
msgid "match Expressions"
msgstr "`match`-udtryk"

#: src/control-flow-basics.md
msgid "break and continue"
msgstr ""

#: src/control-flow-basics.md
msgid "We will now cover the many kinds of flow control found in Rust."
msgstr ""

#: src/control-flow-basics.md
msgid ""
"Most of this will be very familiar to what you have seen in other "
"programming languages."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid ""
"A block in Rust contains a sequence of expressions, enclosed by braces {}. "
"The final expression of a block determines the value and type of the whole "
"block:"
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid "// dbg!(y);\n"
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid ""
"If the last expression ends with `;`, then the resulting value and type is "
"`()`."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid "A variable's scope is limited to the enclosing block."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid ""
"You can explain that dbg! is a Rust macro that prints and returns the value "
"of a given expression for quick and dirty debugging."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid ""
"You can show how the value of the block changes by changing the last line in "
"the block. For instance, adding/removing a semicolon or using a `return`."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid ""
"Demonstrate that attempting to access `y` outside of its scope won't compile."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md
msgid ""
"Values are effectively \"deallocated\" when they go out of their scope, even "
"if their data on the stack is still there."
msgstr ""

#: src/control-flow-basics/if.md
msgid "`if` expressions"
msgstr ""

#: src/control-flow-basics/if.md
msgid ""
"You use [`if` expressions](https://doc.rust-lang.org/reference/expressions/"
"if-expr.html#if-expressions) exactly like `if` statements in other languages:"
msgstr ""

#: src/control-flow-basics/if.md
msgid "\"zero!\""
msgstr ""

#: src/control-flow-basics/if.md
msgid "\"biggish\""
msgstr ""

#: src/control-flow-basics/if.md
msgid "\"huge\""
msgstr ""

#: src/control-flow-basics/if.md
msgid ""
"In addition, you can use `if` as an expression. The last expression of each "
"block becomes the value of the `if` expression:"
msgstr ""

#: src/control-flow-basics/if.md
msgid "\"small\""
msgstr ""

#: src/control-flow-basics/if.md
msgid "\"large\""
msgstr ""

#: src/control-flow-basics/if.md
#, fuzzy
msgid "\"number size: {}\""
msgstr "\"{numbers:?}\""

#: src/control-flow-basics/if.md
msgid ""
"Because `if` is an expression and must have a particular type, both of its "
"branch blocks must have the same type. Show what happens if you add `;` "
"after `\"small\"` in the second example."
msgstr ""

#: src/control-flow-basics/if.md
msgid ""
"An `if` expression should be used in the same way as the other expressions. "
"For example, when it is used in a `let` statement, the statement must be "
"terminated with a `;` as well. Remove the `;` before `println!` to see the "
"compiler error."
msgstr ""

#: src/control-flow-basics/match.md
msgid "`match` can be used to check a value against one or more options:"
msgstr ""

#: src/control-flow-basics/match.md
#, fuzzy
msgid "\"one\""
msgstr "\"none\""

#: src/control-flow-basics/match.md
msgid "\"ten\""
msgstr ""

#: src/control-flow-basics/match.md
msgid "\"one hundred\""
msgstr ""

#: src/control-flow-basics/match.md
msgid "\"something else\""
msgstr ""

#: src/control-flow-basics/match.md
msgid "Like `if` expressions, `match` can also return a value;"
msgstr ""

#: src/control-flow-basics/match.md
msgid "\"The value of {flag} is {val}\""
msgstr ""

#: src/control-flow-basics/match.md
msgid ""
"`match` arms are evaluated from top to bottom, and the first one that "
"matches has its corresponding body executed."
msgstr ""

#: src/control-flow-basics/match.md
msgid ""
"There is no fall-through between cases the way that `switch` works in other "
"languages."
msgstr ""

#: src/control-flow-basics/match.md
msgid ""
"The body of a `match` arm can be a single expression or a block. Technically "
"this is the same thing, since blocks are also expressions, but students may "
"not fully understand that symmetry at this point."
msgstr ""

#: src/control-flow-basics/match.md
msgid ""
"`match` expressions need to be exhaustive, meaning they either need to cover "
"all possible values or they need to have a default case such as `_`. "
"Exhaustiveness is easiest to demonstrate with enums, but enums haven't been "
"introduced yet. Instead we demonstrate matching on a `bool`, which is the "
"simplest primitive type."
msgstr ""

#: src/control-flow-basics/match.md
msgid ""
"This slide introduces `match` without talking about pattern matching, giving "
"students a chance to get familiar with the syntax without front-loading too "
"much information. We'll be talking about pattern matching in more detail "
"tomorrow, so try not to go into too much detail here."
msgstr ""

#: src/control-flow-basics/match.md src/references/dangling.md
#: src/user-defined-types/named-structs.md src/user-defined-types/enums.md
#: src/user-defined-types/static.md src/pattern-matching/infallible.md
#: src/pattern-matching/destructuring-structs.md
#: src/pattern-matching/let-control-flow/let-else.md src/closures/syntax.md
#: src/memory-management/review.md src/memory-management/move.md
#: src/memory-management/copy-types.md src/borrowing/shared.md
#: src/borrowing/borrowck.md src/borrowing/interior-mutability/refcell.md
#: src/iterators/motivation.md src/iterators/iterator.md
#: src/iterators/helpers.md src/iterators/collect.md
#: src/modules/encapsulation.md src/error-handling/result.md
#: src/error-handling/anyhow.md src/concurrency/async/state-machine.md
msgid "More to Explore"
msgstr ""

#: src/control-flow-basics/match.md
msgid ""
"To further motivate the usage of `match`, you can compare the examples to "
"their equivalents written with `if`. In the second case, matching on a "
"`bool`, an `if {} else {}` block is pretty similar. But in the first example "
"that checks multiple cases, a `match` expression can be more concise than "
"`if {} else if {} else if {} else`."
msgstr ""

#: src/control-flow-basics/match.md
msgid ""
"`match` also supports match guards, which allow you to add an arbitrary "
"logical condition that will get evaluated to determine if the match arm "
"should be taken. However talking about match guards requires explaining "
"about pattern matching, which we're trying to avoid on this slide."
msgstr ""

#: src/control-flow-basics/loops.md
msgid "There are three looping keywords in Rust: `while`, `loop`, and `for`:"
msgstr ""

#: src/control-flow-basics/loops.md
msgid "`while`"
msgstr ""

#: src/control-flow-basics/loops.md
msgid ""
"The [`while` keyword](https://doc.rust-lang.org/reference/expressions/loop-"
"expr.html#predicate-loops) works much like in other languages, executing the "
"loop body as long as the condition is true."
msgstr ""

#: src/control-flow-basics/loops/for.md
msgid ""
"The [`for` loop](https://doc.rust-lang.org/std/keyword.for.html) iterates "
"over ranges of values or the items in a collection:"
msgstr ""

#: src/control-flow-basics/loops/for.md
msgid ""
"Under the hood `for` loops use a concept called \"iterators\" to handle "
"iterating over different kinds of ranges/collections. Iterators will be "
"discussed in more detail later."
msgstr ""

#: src/control-flow-basics/loops/for.md
msgid ""
"Note that the first `for` loop only iterates to `4`. Show the `1..=5` syntax "
"for an inclusive range."
msgstr ""

#: src/control-flow-basics/loops/loop.md
msgid ""
"The [`loop` statement](https://doc.rust-lang.org/std/keyword.loop.html) just "
"loops forever, until a `break`."
msgstr ""

#: src/control-flow-basics/loops/loop.md
msgid ""
"The `loop` statement works like a `while true` loop. Use it for things like "
"servers that will serve connections forever."
msgstr ""

#: src/control-flow-basics/break-continue.md
msgid ""
"If you want to immediately start the next iteration use [`continue`](https://"
"doc.rust-lang.org/reference/expressions/loop-expr.html#continue-expressions)."
msgstr ""

#: src/control-flow-basics/break-continue.md
msgid ""
"If you want to exit any kind of loop early, use [`break`](https://doc.rust-"
"lang.org/reference/expressions/loop-expr.html#break-expressions). With "
"`loop`, this can take an optional expression that becomes the value of the "
"`loop` expression."
msgstr ""

#: src/control-flow-basics/break-continue.md
msgid ""
"Note that `loop` is the only looping construct that can return a non-trivial "
"value. This is because it's guaranteed to only return at a `break` statement "
"(unlike `while` and `for` loops, which can also return when the condition "
"fails)."
msgstr ""

#: src/control-flow-basics/break-continue/labels.md
msgid ""
"Both `continue` and `break` can optionally take a label argument that is "
"used to break out of nested loops:"
msgstr ""

#: src/control-flow-basics/break-continue/labels.md
msgid "Labeled break also works on arbitrary blocks, e.g."
msgstr ""

#: src/control-flow-basics/break-continue/labels.md
msgid "\"This line gets skipped\""
msgstr ""

#: src/control-flow-basics/functions.md
msgid ""
"Declaration parameters are followed by a type (the reverse of some "
"programming languages), then a return type."
msgstr ""

#: src/control-flow-basics/functions.md
msgid ""
"The last expression in a function body (or any block) becomes the return "
"value. Simply omit the `;` at the end of the expression. The `return` "
"keyword can be used for early return, but the \"bare value\" form is "
"idiomatic at the end of a function (refactor `gcd` to use a `return`)."
msgstr ""

#: src/control-flow-basics/functions.md
msgid ""
"Some functions have no return value, and return the 'unit type', `()`. The "
"compiler will infer this if the return type is omitted."
msgstr ""

#: src/control-flow-basics/functions.md
msgid ""
"Overloading is not supported -- each function has a single implementation."
msgstr ""

#: src/control-flow-basics/functions.md
msgid ""
"Always takes a fixed number of parameters. Default arguments are not "
"supported. Macros can be used to support variadic functions."
msgstr ""

#: src/control-flow-basics/functions.md
msgid ""
"Always takes a single set of parameter types. These types can be generic, "
"which will be covered later."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"Macros are expanded into Rust code during compilation, and can take a "
"variable number of arguments. They are distinguished by a `!` at the end. "
"The Rust standard library includes an assortment of useful macros."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"`println!(format, ..)` prints a line to standard output, applying formatting "
"described in [`std::fmt`](https://doc.rust-lang.org/std/fmt/index.html)."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"`format!(format, ..)` works just like `println!` but returns the result as a "
"string."
msgstr ""

#: src/control-flow-basics/macros.md
msgid "`dbg!(expression)` logs the value of the expression and returns it."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"`todo!()` marks a bit of code as not-yet-implemented. If executed, it will "
"panic."
msgstr ""

#: src/control-flow-basics/macros.md
#, fuzzy
msgid "\"{n}! = {}\""
msgstr "\"{} {}\""

#: src/control-flow-basics/macros.md
msgid ""
"The takeaway from this section is that these common conveniences exist, and "
"how to use them. Why they are defined as macros, and what they expand to, is "
"not especially critical."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"The course does not cover defining macros, but a later section will describe "
"use of derive macros."
msgstr ""

#: src/control-flow-basics/macros.md src/pattern-matching/match.md
msgid "More To Explore"
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"There are a number of other useful macros provided by the standard library. "
"Some other examples you can share with students if they want to know more:"
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"[`assert!`](https://doc.rust-lang.org/stable/std/macro.assert.html) and "
"related macros can be used to add assertions to your code. These are used "
"heavily in writing tests."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"[`unreachable!`](https://doc.rust-lang.org/stable/std/"
"macro.unreachable.html) is used to mark a branch of control flow that should "
"never be hit."
msgstr ""

#: src/control-flow-basics/macros.md
msgid ""
"[`eprintln!`](https://doc.rust-lang.org/stable/std/macro.eprintln.html) "
"allows you to print to stderr."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid ""
"The [Collatz Sequence](https://en.wikipedia.org/wiki/Collatz_conjecture) is "
"defined as follows, for an arbitrary n<sub>1</sub> greater than zero:"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid ""
"If _n<sub>i</sub>_ is 1, then the sequence terminates at _n<sub>i</sub>_."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "If _n<sub>i</sub>_ is even, then _n<sub>i+1</sub> = n<sub>i</sub> / 2_."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid ""
"If _n<sub>i</sub>_ is odd, then _n<sub>i+1</sub> = 3 * n<sub>i</sub> + 1_."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "For example, beginning with _n<sub>1</sub>_ = 3:"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "3 is odd, so _n<sub>2</sub>_ = 3 * 3 + 1 = 10;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "10 is even, so _n<sub>3</sub>_ = 10 / 2 = 5;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "5 is odd, so _n<sub>4</sub>_ = 3 * 5 + 1 = 16;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "16 is even, so _n<sub>5</sub>_ = 16 / 2 = 8;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "8 is even, so _n<sub>6</sub>_ = 8 / 2 = 4;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "4 is even, so _n<sub>7</sub>_ = 4 / 2 = 2;"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "2 is even, so _n<sub>8</sub>_ = 1; and"
msgstr ""

#: src/control-flow-basics/exercise.md
msgid "the sequence terminates."
msgstr ""

#: src/control-flow-basics/exercise.md
msgid ""
"Write a function to calculate the length of the Collatz sequence for a given "
"initial `n`."
msgstr ""

#: src/control-flow-basics/exercise.md src/control-flow-basics/solution.md
msgid "/// Determine the length of the collatz sequence beginning at `n`.\n"
msgstr ""

#: src/control-flow-basics/exercise.md src/control-flow-basics/solution.md
msgid "\"Length: {}\""
msgstr "\"L√¶ngde: {}\""

#: src/control-flow-basics/exercise.md src/control-flow-basics/solution.md
msgid "// should be 15\n"
msgstr ""

#: src/welcome-day-1-afternoon.md src/welcome-day-2-afternoon.md
#: src/welcome-day-3-afternoon.md src/welcome-day-4-afternoon.md
#, fuzzy
msgid "Welcome Back"
msgstr "Velkommen"

#: src/welcome-day-1-afternoon.md src/welcome-day-2.md
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 45 "
"minutes. It contains:"
msgstr ""

#: src/tuples-and-arrays.md
msgid "This segment should take about 35 minutes. It contains:"
msgstr ""

#: src/tuples-and-arrays.md
msgid ""
"We have seen how primitive types work in Rust. Now it's time for you to "
"start building new composite types."
msgstr ""

#: src/tuples-and-arrays/arrays.md
msgid ""
"Arrays can also be initialized using the shorthand syntax, e.g. `[0; 1024]`. "
"This can be useful when you want to initialize all elements to the same "
"value, or if you have a large array that would be hard to initialize "
"manually."
msgstr ""

#: src/tuples-and-arrays/arrays.md
msgid ""
"A value of the array type `[T; N]` holds `N` (a compile-time constant) "
"elements of the same type `T`. Note that the length of the array is _part of "
"its type_, which means that `[u8; 3]` and `[u8; 4]` are considered two "
"different types. Slices, which have a size determined at runtime, are "
"covered later."
msgstr ""

#: src/tuples-and-arrays/arrays.md
msgid ""
"Try accessing an out-of-bounds array element. The compiler is able to "
"determine that the index is unsafe, and will not compile the code:"
msgstr ""

#: src/tuples-and-arrays/arrays.md
#, fuzzy
msgid "\"a: {a:?}\""
msgstr "\"a: {a}\""

#: src/tuples-and-arrays/arrays.md
msgid ""
"Array accesses are checked at runtime. Rust can usually optimize these "
"checks away; meaning if the compiler can prove the access is safe, it "
"removes the runtime check for better performance. They can be avoided using "
"unsafe Rust. The optimization is so good that it's hard to give an example "
"of runtime checks failing. The following code will compile but panic at "
"runtime:"
msgstr ""

#: src/tuples-and-arrays/arrays.md
msgid "We can use literals to assign values to arrays."
msgstr ""

#: src/tuples-and-arrays/arrays.md
msgid ""
"The `println!` macro asks for the debug implementation with the `?` format "
"parameter: `{}` gives the default output, `{:?}` gives the debug output. "
"Types such as integers and strings implement the default output, but arrays "
"only implement the debug output. This means that we must use debug output "
"here."
msgstr ""

#: src/tuples-and-arrays/arrays.md
msgid ""
"Adding `#`, eg `{a:#?}`, invokes a \"pretty printing\" format, which can be "
"easier to read."
msgstr ""

#: src/tuples-and-arrays/arrays.md
msgid ""
"Arrays are not heap-allocated. They are regular values with a fixed size "
"known at compile time, meaning they go on the stack. This can be different "
"from what students expect if they come from a garbage-collected language, "
"where arrays may be heap allocated by default."
msgstr ""

#: src/tuples-and-arrays/tuples.md
msgid "Like arrays, tuples have a fixed length."
msgstr ""

#: src/tuples-and-arrays/tuples.md
msgid "Tuples group together values of different types into a compound type."
msgstr ""

#: src/tuples-and-arrays/tuples.md
msgid ""
"Fields of a tuple can be accessed by the period and the index of the value, "
"e.g. `t.0`, `t.1`."
msgstr ""

#: src/tuples-and-arrays/tuples.md
msgid ""
"The empty tuple `()` is referred to as the \"unit type\" and signifies "
"absence of a return value, akin to `void` in other languages."
msgstr ""

#: src/tuples-and-arrays/iteration.md
msgid "The `for` statement supports iterating over arrays (but not tuples)."
msgstr ""

#: src/tuples-and-arrays/iteration.md
msgid ""
"This functionality uses the `IntoIterator` trait, but we haven't covered "
"that yet."
msgstr ""

#: src/tuples-and-arrays/iteration.md
msgid ""
"The `assert_ne!` macro is new here. There are also `assert_eq!` and `assert!"
"` macros. These are always checked, while debug-only variants like "
"`debug_assert!` compile to nothing in release builds."
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid ""
"Rust supports using pattern matching to destructure a larger value like a "
"tuple into its constituent parts:"
msgstr ""

#: src/tuples-and-arrays/destructuring.md
#, fuzzy
msgid "\"{tuple:?}: {}\""
msgstr "\"int: {}\""

#: src/tuples-and-arrays/destructuring.md
msgid "\"ordered\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid "\"unordered\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid ""
"The patterns used here are \"irrefutable\", meaning that the compiler can "
"statically verify that the value on the right of `=` has the same structure "
"as the pattern."
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid ""
"A variable name is an irrefutable pattern that always matches any value, "
"hence why we can also use `let` to declare a single variable."
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid ""
"Rust also supports using patterns in conditionals, allowing for equality "
"comparison and destructuring to happen at the same time. This form of "
"pattern matching will be discussed in more detail later."
msgstr ""

#: src/tuples-and-arrays/destructuring.md
msgid ""
"Edit the examples above to show the compiler error when the pattern doesn't "
"match the value being matched on."
msgstr ""

#: src/tuples-and-arrays/exercise.md
msgid "Arrays can contain other arrays:"
msgstr ""

#: src/tuples-and-arrays/exercise.md
msgid "What is the type of this variable?"
msgstr ""

#: src/tuples-and-arrays/exercise.md
msgid ""
"Use an array such as the above to write a function `transpose` that "
"transposes a matrix (turns rows into columns):"
msgstr ""

#: src/tuples-and-arrays/exercise.md
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and implement the "
"function. This function only operates on 3x3 matrices."
msgstr ""

#: src/tuples-and-arrays/exercise.md src/tuples-and-arrays/solution.md
msgid "// <-- the comment makes rustfmt add a newline\n"
msgstr ""

#: src/references.md src/smart-pointers.md src/borrowing.md src/iterators.md
#: src/error-handling.md src/concurrency/async-pitfalls.md
msgid "This segment should take about 55 minutes. It contains:"
msgstr ""

#: src/references/shared.md
msgid ""
"A reference provides a way to access another value without taking ownership "
"of the value, and is also called \"borrowing\". Shared references are read-"
"only, and the referenced data cannot change."
msgstr ""

#: src/references/shared.md src/std-traits/solution.md
#, fuzzy
msgid "'A'"
msgstr "'x'"

#: src/references/shared.md
#, fuzzy
msgid "'B'"
msgstr "'x'"

#: src/references/shared.md
msgid ""
"A shared reference to a type `T` has type `&T`. A reference value is made "
"with the `&` operator. The `*` operator \"dereferences\" a reference, "
"yielding its value."
msgstr ""

#: src/references/shared.md
msgid ""
"References can never be null in Rust, so null checking is not necessary."
msgstr ""

#: src/references/shared.md
msgid ""
"A reference is said to \"borrow\" the value it refers to, and this is a good "
"model for students not familiar with pointers: code can use the reference to "
"access the value, but is still \"owned\" by the original variable. The "
"course will get into more detail on ownership in day 3."
msgstr ""

#: src/references/shared.md
msgid ""
"References are implemented as pointers, and a key advantage is that they can "
"be much smaller than the thing they point to. Students familiar with C or C+"
"+ will recognize references as pointers. Later parts of the course will "
"cover how Rust prevents the memory-safety bugs that come from using raw "
"pointers."
msgstr ""

#: src/references/shared.md
msgid ""
"Explicit referencing with `&` is usually required. However, Rust performs "
"automatic referencing and dereferencing when invoking methods."
msgstr ""

#: src/references/shared.md
msgid ""
"Rust will auto-dereference in some cases, in particular when invoking "
"methods (try `r.is_ascii()`). There is no need for an `->` operator like in "
"C++."
msgstr ""

#: src/references/shared.md
msgid ""
"In this example, `r` is mutable so that it can be reassigned (`r = &b`). "
"Note that this re-binds `r`, so that it refers to something else. This is "
"different from C++, where assignment to a reference changes the referenced "
"value."
msgstr ""

#: src/references/shared.md
msgid ""
"A shared reference does not allow modifying the value it refers to, even if "
"that value was mutable. Try `*r = 'X'`."
msgstr ""

#: src/references/shared.md
msgid ""
"Rust is tracking the lifetimes of all references to ensure they live long "
"enough. Dangling references cannot occur in safe Rust."
msgstr ""

#: src/references/shared.md
msgid ""
"We will talk more about borrowing and preventing dangling references when we "
"get to ownership."
msgstr ""

#: src/references/exclusive.md
msgid ""
"Exclusive references, also known as mutable references, allow changing the "
"value they refer to. They have type `&mut T`."
msgstr ""

#: src/references/exclusive.md
msgid ""
"\"Exclusive\" means that only this reference can be used to access the "
"value. No other references (shared or exclusive) can exist at the same time, "
"and the referenced value cannot be accessed while the exclusive reference "
"exists. Try making an `&point.0` or changing `point.0` while `x_coord` is "
"alive."
msgstr ""

#: src/references/exclusive.md
msgid ""
"Be sure to note the difference between `let mut x_coord: &i32` and `let "
"x_coord: &mut i32`. The first one is a shared reference that can be bound to "
"different values, while the second is an exclusive reference to a mutable "
"value."
msgstr ""

#: src/references/slices.md
msgid "A slice gives you a view into a larger collection:"
msgstr ""

#: src/references/slices.md
msgid "Slices borrow data from the sliced type."
msgstr ""

#: src/references/slices.md
msgid ""
"We create a slice by borrowing `a` and specifying the starting and ending "
"indexes in brackets."
msgstr ""

#: src/references/slices.md
msgid ""
"If the slice starts at index 0, Rust‚Äôs range syntax allows us to drop the "
"starting index, meaning that `&a[0..a.len()]` and `&a[..a.len()]` are "
"identical."
msgstr ""

#: src/references/slices.md
msgid ""
"The same is true for the last index, so `&a[2..a.len()]` and `&a[2..]` are "
"identical."
msgstr ""

#: src/references/slices.md
msgid ""
"To easily create a slice of the full array, we can therefore use `&a[..]`."
msgstr ""

#: src/references/slices.md
msgid ""
"`s` is a reference to a slice of `i32`s. Notice that the type of `s` "
"(`&[i32]`) no longer mentions the array length. This allows us to perform "
"computation on slices of different sizes."
msgstr ""

#: src/references/slices.md
msgid ""
"Slices always borrow from another object. In this example, `a` has to remain "
"'alive' (in scope) for at least as long as our slice."
msgstr ""

#: src/references/slices.md
msgid "You can't \"grow\" a slice once it's created:"
msgstr ""

#: src/references/slices.md
msgid ""
"You can't append elements of the slice, since it doesn't own the backing "
"buffer."
msgstr ""

#: src/references/slices.md
msgid ""
"You can't grow a slice to point to a larger section of the backing buffer. A "
"slice does not have information about the length of the underlying buffer "
"and so you can't know how large the slice can be grown."
msgstr ""

#: src/references/slices.md
msgid ""
"To get a larger slice you have to back to the original buffer and create a "
"larger slice from there."
msgstr ""

#: src/references/strings.md
msgid "We can now understand the two string types in Rust:"
msgstr ""

#: src/references/strings.md
msgid "`&str` is a slice of UTF-8 encoded bytes, similar to `&[u8]`."
msgstr ""

#: src/references/strings.md
msgid ""
"`String` is an owned buffer of UTF-8 encoded bytes, similar to `Vec<T>`."
msgstr ""

#: src/references/strings.md src/std-traits/read-and-write.md
msgid "\"World\""
msgstr "\"Verden\""

#: src/references/strings.md
msgid "\"s1: {s1}\""
msgstr "\"s1: {s1}\""

#: src/references/strings.md
msgid "\"Hello \""
msgstr "\"Hallo \""

#: src/references/strings.md
msgid "\"s2: {s2}\""
msgstr "\"s2: {s2}\""

#: src/references/strings.md
msgid "\"s3: {s3}\""
msgstr "\"s3: {s3}\""

#: src/references/strings.md
msgid ""
"`&str` introduces a string slice, which is an immutable reference to UTF-8 "
"encoded string data stored in a block of memory. String literals "
"(`\"Hello\"`), are stored in the program‚Äôs binary."
msgstr ""

#: src/references/strings.md
msgid ""
"Rust's `String` type is a wrapper around a vector of bytes. As with a "
"`Vec<T>`, it is owned."
msgstr ""

#: src/references/strings.md
msgid ""
"As with many other types `String::from()` creates a string from a string "
"literal; `String::new()` creates a new empty string, to which string data "
"can be added using the `push()` and `push_str()` methods."
msgstr ""

#: src/references/strings.md
msgid ""
"The `format!()` macro is a convenient way to generate an owned string from "
"dynamic values. It accepts the same format specification as `println!()`."
msgstr ""

#: src/references/strings.md
msgid ""
"You can borrow `&str` slices from `String` via `&` and optionally range "
"selection. If you select a byte range that is not aligned to character "
"boundaries, the expression will panic. The `chars` iterator iterates over "
"characters and is preferred over trying to get character boundaries right."
msgstr ""

#: src/references/strings.md
msgid ""
"For C++ programmers: think of `&str` as `std::string_view` from C++, but the "
"one that always points to a valid string in memory. Rust `String` is a rough "
"equivalent of `std::string` from C++ (main difference: it can only contain "
"UTF-8 encoded bytes and will never use a small-string optimization)."
msgstr ""

#: src/references/strings.md
msgid "Byte strings literals allow you to create a `&[u8]` value directly:"
msgstr ""

#: src/references/strings.md
msgid ""
"Raw strings allow you to create a `&str` value with escapes disabled: "
"`r\"\\n\" == \"\\\\n\"`. You can embed double-quotes by using an equal "
"amount of `#` on either side of the quotes:"
msgstr ""

#: src/references/dangling.md
msgid ""
"Rust enforces a number of rules for references that make them always safe to "
"use. One rule is that references can never be `null`, making them safe to "
"use without `null` checks. The other rule we'll look at for now is that "
"references can't _outlive_ the data they point to."
msgstr ""

#: src/references/dangling.md
msgid ""
"This slide gets students thinking about references as not simply being "
"pointers, since Rust has different rules for references than other languages."
msgstr ""

#: src/references/dangling.md
msgid ""
"We'll look at the rest of Rust's borrowing rules on day 3 when we talk about "
"Rust's ownership system."
msgstr ""

#: src/references/dangling.md
msgid ""
"Rust's equivalent of nullability is the `Option` type, which can be used to "
"make any type \"nullable\" (not just references/pointers). We haven't yet "
"introduced enums or pattern matching, though, so try not to go into too much "
"detail about this here."
msgstr ""

#: src/references/exercise.md
msgid ""
"We will create a few utility functions for 3-dimensional geometry, "
"representing a point as `[f64;3]`. It is up to you to determine the function "
"signatures."
msgstr ""

#: src/references/exercise.md
msgid ""
"// Calculate the magnitude of a vector by summing the squares of its "
"coordinates\n"
"// and taking the square root. Use the `sqrt()` method to calculate the "
"square\n"
"// root, like `v.sqrt()`.\n"
msgstr ""

#: src/references/exercise.md
msgid ""
"// Normalize a vector by calculating its magnitude and dividing all of its\n"
"// coordinates by that magnitude.\n"
msgstr ""

#: src/references/exercise.md
msgid "// Use the following `main` to test your work.\n"
msgstr ""

#: src/references/exercise.md src/references/solution.md
msgid "\"Magnitude of a unit vector: {}\""
msgstr ""

#: src/references/exercise.md src/references/solution.md
msgid "\"Magnitude of {v:?}: {}\""
msgstr ""

#: src/references/exercise.md src/references/solution.md
msgid "\"Magnitude of {v:?} after normalization: {}\""
msgstr ""

#: src/references/solution.md
msgid "/// Calculate the magnitude of the given vector.\n"
msgstr ""

#: src/references/solution.md
msgid ""
"/// Change the magnitude of the vector to 1.0 without changing its "
"direction.\n"
msgstr ""

#: src/references/solution.md
msgid ""
"Note that in `normalize` we were able to do `*item /= mag` to modify each "
"element. This is because we're iterating using a mutable reference to an "
"array, which causes the `for` loop to give mutable references to each "
"element."
msgstr ""

#: src/references/solution.md
msgid ""
"It is also possible to take slice references here, e.g., `fn "
"magnitude(vector: &[f64]) -> f64`. This makes the function more general, at "
"the cost of a runtime length check."
msgstr ""

#: src/user-defined-types.md src/std-types.md src/std-traits.md
#: src/memory-management.md
msgid "This segment should take about 1 hour. It contains:"
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "Like C and C++, Rust has support for custom structs:"
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "\"{} is {} years old\""
msgstr ""

#: src/user-defined-types/named-structs.md
#: src/android/interoperability/with-c/bindgen.md
msgid "\"Peter\""
msgstr "\"Peter\""

#: src/user-defined-types/named-structs.md
msgid "\"Avery\""
msgstr ""

#: src/user-defined-types/named-structs.md src/user-defined-types/enums.md
#: src/pattern-matching/match.md src/methods-and-traits/methods.md
msgid "Key Points:"
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "Structs work like in C or C++."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "Like in C++, and unlike in C, no typedef is needed to define a type."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "Unlike in C++, there is no inheritance between structs."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid ""
"This may be a good time to let people know there are different types of "
"structs."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid ""
"Zero-sized structs (e.g. `struct Foo;`) might be used when implementing a "
"trait on some type but don‚Äôt have any data that you want to store in the "
"value itself."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid ""
"The next slide will introduce Tuple structs, used when the field names are "
"not important."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid ""
"If you already have variables with the right names, then you can create the "
"struct using a shorthand."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid ""
"Struct fields do not support default values. Default values are specified by "
"implementing the `Default` trait which we will cover later."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "You can also demonstrate the struct update syntax here:"
msgstr ""

#: src/user-defined-types/named-structs.md
msgid "\"Jackie\""
msgstr "\"Jackie\""

#: src/user-defined-types/named-structs.md
msgid ""
"It allows us to copy the majority of the fields from the old struct without "
"having to explicitly type it all out. It must always be the last element."
msgstr ""

#: src/user-defined-types/named-structs.md
msgid ""
"It is mainly used in combination with the `Default` trait. We will talk "
"about struct update syntax in more detail on the slide on the `Default` "
"trait, so we don't need to talk about it here unless students ask about it."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid "If the field names are unimportant, you can use a tuple struct:"
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid "\"({}, {})\""
msgstr "\"({}, {})\""

#: src/user-defined-types/tuple-structs.md
msgid "This is often used for single-field wrappers (called newtypes):"
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid "\"Ask a rocket scientist at NASA\""
msgstr ""

#: src/user-defined-types/tuple-structs.md
#: src/android/interoperability/cpp/cpp-bridge.md
#: src/bare-metal/microcontrollers/type-state.md
#: src/concurrency/async-pitfalls/cancellation.md
msgid "// ...\n"
msgstr "// ...\n"

#: src/user-defined-types/tuple-structs.md
msgid ""
"Newtypes are a great way to encode additional information about the value in "
"a primitive type, for example:"
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid "The number is measured in some units: `Newtons` in the example above."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"The value passed some validation when it was created, so you no longer have "
"to validate it again at every use: `PhoneNumber(String)` or `OddNumber(u32)`."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"The newtype pattern is covered extensively in the [\"Idiomatic Rust\" module]"
"(../idiomatic/leveraging-the-type-system/newtype-pattern.md)."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"Demonstrate how to add a `f64` value to a `Newtons` type by accessing the "
"single field in the newtype."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"Rust generally avoids implicit conversions, like automatic unwrapping or "
"using booleans as integers."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"Operator overloading is discussed on Day 2 ([Standard Library Traits](../std-"
"traits.md))."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"When a tuple struct has zero fields, the `()` can be omitted. The result is "
"a zero-sized type (ZST), of which there is only one value (the name of the "
"type)."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"This is common for types that implement some behavior but have no data "
"(imagine a `NullReader` that implements some reader behavior by always "
"returning EOF)."
msgstr ""

#: src/user-defined-types/tuple-structs.md
msgid ""
"The example is a subtle reference to the [Mars Climate Orbiter](https://"
"en.wikipedia.org/wiki/Mars_Climate_Orbiter) failure."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"The `enum` keyword allows the creation of a type which has a few different "
"variants:"
msgstr ""

#: src/user-defined-types/enums.md
msgid "// Simple variant\n"
msgstr ""

#: src/user-defined-types/enums.md
msgid "// Tuple variant\n"
msgstr ""

#: src/user-defined-types/enums.md
msgid "// Struct variant\n"
msgstr ""

#: src/user-defined-types/enums.md
msgid "\"On this turn: {player_move:?}\""
msgstr ""

#: src/user-defined-types/enums.md
msgid "Enumerations allow you to collect a set of values under one type."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"`Direction` is a type with variants. There are two values of `Direction`: "
"`Direction::Left` and `Direction::Right`."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"`PlayerMove` is a type with three variants. In addition to the payloads, "
"Rust will store a discriminant so that it knows at runtime which variant is "
"in a `PlayerMove` value."
msgstr ""

#: src/user-defined-types/enums.md
msgid "This might be a good time to compare structs and enums:"
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"In both, you can have a simple version without fields (unit struct) or one "
"with different types of fields (variant payloads)."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"You could even implement the different variants of an enum with separate "
"structs but then they wouldn‚Äôt be the same type as they would if they were "
"all defined in an enum."
msgstr ""

#: src/user-defined-types/enums.md
msgid "Rust uses minimal space to store the discriminant."
msgstr ""

#: src/user-defined-types/enums.md
msgid "If necessary, it stores an integer of the smallest required size"
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"If the allowed variant values do not cover all bit patterns, it will use "
"invalid bit patterns to encode the discriminant (the \"niche "
"optimization\"). For example, `Option<&u8>` stores either a pointer to an "
"integer or `NULL` for the `None` variant."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"You can control the discriminant if needed (e.g., for compatibility with C):"
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"Without `repr`, the discriminant type takes 2 bytes, because 10001 fits 2 "
"bytes."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"Rust has several optimizations it can employ to make enums take up less "
"space."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"Null pointer optimization: For [some types](https://doc.rust-lang.org/std/"
"option/#representation), Rust guarantees that `size_of::<T>()` equals "
"`size_of::<Option<T>>()`."
msgstr ""

#: src/user-defined-types/enums.md
msgid ""
"Example code if you want to show how the bitwise representation _may_ look "
"like in practice. It's important to note that the compiler provides no "
"guarantees regarding this representation, therefore this is totally unsafe."
msgstr ""

#: src/user-defined-types/aliases.md
msgid ""
"A type alias creates a name for another type. The two types can be used "
"interchangeably."
msgstr ""

#: src/user-defined-types/aliases.md
msgid "// Aliases are more useful with long, complex types:\n"
msgstr ""

#: src/user-defined-types/aliases.md
msgid ""
"A [newtype](tuple-structs.html) is often a better alternative since it "
"creates a distinct type. Prefer `struct InventoryCount(usize)` to `type "
"InventoryCount = usize`."
msgstr ""

#: src/user-defined-types/aliases.md
msgid "C programmers will recognize this as similar to a `typedef`."
msgstr ""

#: src/user-defined-types/const.md
msgid "`const`"
msgstr ""

#: src/user-defined-types/const.md
msgid ""
"Constants are evaluated at compile time and their values are inlined "
"wherever they are used:"
msgstr ""

#: src/user-defined-types/const.md
msgid ""
"According to the [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html) these are inlined upon use."
msgstr ""

#: src/user-defined-types/const.md
msgid ""
"Only functions marked `const` can be called at compile time to generate "
"`const` values. `const` functions can however be called at runtime."
msgstr ""

#: src/user-defined-types/const.md
msgid "Mention that `const` behaves semantically similar to C++'s `constexpr`"
msgstr ""

#: src/user-defined-types/static.md
msgid "`static`"
msgstr ""

#: src/user-defined-types/static.md
msgid ""
"Static variables will live during the whole execution of the program, and "
"therefore will not move:"
msgstr ""

#: src/user-defined-types/static.md
msgid "\"Welcome to RustOS 3.14\""
msgstr "\"Velkommen til RustOS 3.14\""

#: src/user-defined-types/static.md
msgid "\"{BANNER}\""
msgstr "\"{BANNER}\""

#: src/user-defined-types/static.md
msgid ""
"As noted in the [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html), these are not inlined upon use and have an actual "
"associated memory location. This is useful for unsafe and embedded code, and "
"the variable lives through the entirety of the program execution. When a "
"globally-scoped value does not have a reason to need object identity, "
"`const` is generally preferred."
msgstr ""

#: src/user-defined-types/static.md
msgid "`static` is similar to mutable global variables in C++."
msgstr ""

#: src/user-defined-types/static.md
msgid ""
"`static` provides object identity: an address in memory and state as "
"required by types with interior mutability such as `Mutex<T>`."
msgstr ""

#: src/user-defined-types/static.md
msgid ""
"Because `static` variables are accessible from any thread, they must be "
"`Sync`. Interior mutability is possible through a [`Mutex`](https://doc.rust-"
"lang.org/std/sync/struct.Mutex.html), atomic or similar."
msgstr ""

#: src/user-defined-types/static.md
msgid ""
"It is common to use `OnceLock` in a static as a way to support "
"initialization on first use. `OnceCell` is not `Sync` and thus cannot be "
"used in this context."
msgstr ""

#: src/user-defined-types/static.md
msgid "Thread-local data can be created with the macro `std::thread_local`."
msgstr ""

#: src/user-defined-types/exercise.md
msgid ""
"We will create a data structure to represent an event in an elevator control "
"system. It is up to you to define the types and functions to construct "
"various events. Use `#[derive(Debug)]` to allow the types to be formatted "
"with `{:?}`."
msgstr ""

#: src/user-defined-types/exercise.md
msgid ""
"This exercise only requires creating and populating data structures so that "
"`main` runs without errors. The next part of the course will cover getting "
"data out of these structures."
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid ""
"/// An event in the elevator system that the controller must react to.\n"
msgstr ""

#: src/user-defined-types/exercise.md
msgid "// TODO: add required variants\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "/// A direction of travel.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "/// The car has arrived on the given floor.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
#, fuzzy
msgid "/// The car doors have opened.\n"
msgstr "/// Clear to send.\n"

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
#, fuzzy
msgid "/// The car doors have closed.\n"
msgstr "/// Clear to send.\n"

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid ""
"/// A directional button was pressed in an elevator lobby on the given "
"floor.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "/// A floor button was pressed in the elevator car.\n"
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"A ground floor passenger has pressed the up button: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"The car has arrived on the ground floor: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
#, fuzzy
msgid "\"The car door opened: {:?}\""
msgstr "\"Modtaget: {:?}\""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"A passenger has pressed the 3rd floor button: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"The car door closed: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md src/user-defined-types/solution.md
msgid "\"The car has arrived on the 3rd floor: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md
msgid ""
"If students ask about `#![allow(dead_code)]` at the top of the exercise, "
"it's necessary because the only thing we do with the `Event` type is print "
"it out. Due to a nuance of how the compiler checks for dead code this causes "
"it to think the code is unused. They can ignore it for the purpose of this "
"exercise."
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A button was pressed.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// The car has arrived at the given floor.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// The car's doors have opened.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// The car's doors have closed.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A floor is represented as an integer.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A user-accessible button.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A button in the elevator lobby on the given floor.\n"
msgstr ""

#: src/user-defined-types/solution.md
msgid "/// A floor button within the car.\n"
msgstr ""

#: src/welcome-day-2.md
msgid "Welcome to Day 2"
msgstr "Velkommen til Dag 2"

#: src/welcome-day-2.md
msgid ""
"Now that we have seen a fair amount of Rust, today will focus on Rust's type "
"system:"
msgstr ""

#: src/welcome-day-2.md
msgid "Pattern matching: extracting data from structures."
msgstr ""

#: src/welcome-day-2.md
msgid "Methods: associating functions with types."
msgstr ""

#: src/welcome-day-2.md
msgid "Traits: behaviors shared by multiple types."
msgstr ""

#: src/welcome-day-2.md
msgid "Generics: parameterizing types on other types."
msgstr ""

#: src/welcome-day-2.md
msgid ""
"Standard library types and traits: a tour of Rust's rich standard library."
msgstr ""

#: src/welcome-day-2.md
msgid "Closures: function pointers with data."
msgstr ""

#: src/pattern-matching.md src/lifetimes.md
msgid "This segment should take about 50 minutes. It contains:"
msgstr ""

#: src/pattern-matching/infallible.md
msgid ""
"In day 1 we briefly saw how patterns can be used to _destructure_ compound "
"values. Let's review that and talk about a few other things patterns can "
"express:"
msgstr ""

#: src/pattern-matching/infallible.md
msgid "// This does the same thing as above.\n"
msgstr ""

#: src/pattern-matching/infallible.md
msgid "// Ignore the first element, only bind the second and third.\n"
msgstr ""

#: src/pattern-matching/infallible.md
msgid "// Ignore everything but the last element.\n"
msgstr ""

#: src/pattern-matching/infallible.md src/pattern-matching/match.md
#: src/generics/exercise.md src/generics/solution.md src/std-traits/solution.md
msgid "'a'"
msgstr "'a'"

#: src/pattern-matching/infallible.md
msgid ""
"All of the demonstrated patterns are _irrefutable_, meaning that they will "
"always match the value on the right hand side."
msgstr ""

#: src/pattern-matching/infallible.md
msgid ""
"Patterns are type-specific, including irrefutable patterns. Try adding or "
"removing an element to the tuple and look at the resulting compiler errors."
msgstr ""

#: src/pattern-matching/infallible.md
msgid ""
"Variable names are patterns that always match and bind the matched value "
"into a new variable with that name."
msgstr ""

#: src/pattern-matching/infallible.md
msgid ""
"`_` is a pattern that always matches any value, discarding the matched value."
msgstr ""

#: src/pattern-matching/infallible.md
msgid "`..` allows you to ignore multiple values at once."
msgstr ""

#: src/pattern-matching/infallible.md
msgid ""
"You can also demonstrate more advanced usages of `..`, such as ignoring the "
"middle elements of a tuple."
msgstr ""

#: src/pattern-matching/infallible.md
msgid "All of these patterns work with arrays as well:"
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"The `match` keyword lets you match a value against one or more _patterns_. "
"The patterns can be simple values, similarly to `switch` in C and C++, but "
"they can also be used to express more complex conditions:"
msgstr ""

#: src/pattern-matching/match.md
msgid "'x'"
msgstr "'x'"

#: src/pattern-matching/match.md
msgid "'q'"
msgstr "'q'"

#: src/pattern-matching/match.md
msgid "\"Quitting\""
msgstr ""

#: src/pattern-matching/match.md
msgid "'s'"
msgstr "'s'"

#: src/pattern-matching/match.md
msgid "'w'"
msgstr "'w'"

#: src/pattern-matching/match.md
msgid "'d'"
msgstr "'d'"

#: src/pattern-matching/match.md
msgid "\"Moving around\""
msgstr ""

#: src/pattern-matching/match.md
msgid "'0'"
msgstr "'0'"

#: src/pattern-matching/match.md
msgid "'9'"
msgstr "'9'"

#: src/pattern-matching/match.md
msgid "\"Number input\""
msgstr ""

#: src/pattern-matching/match.md
msgid "\"Lowercase: {key}\""
msgstr ""

#: src/pattern-matching/match.md
msgid "\"Something else\""
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"A variable in the pattern (`key` in this example) will create a binding that "
"can be used within the match arm. We will learn more about this on the next "
"slide."
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"A match guard causes the arm to match only if the condition is true. If the "
"condition is false the match will continue checking later cases."
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"You might point out how some specific characters are being used when in a "
"pattern"
msgstr ""

#: src/pattern-matching/match.md
msgid "`|` as an `or`"
msgstr ""

#: src/pattern-matching/match.md
msgid "`..` matches any number of items"
msgstr ""

#: src/pattern-matching/match.md
msgid "`1..=5` represents an inclusive range"
msgstr ""

#: src/pattern-matching/match.md
msgid "`_` is a wild card"
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"Match guards as a separate syntax feature are important and necessary when "
"we wish to concisely express more complex ideas than patterns alone would "
"allow."
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"Match guards are different from `if` expressions after the `=>`. An `if` "
"expression is evaluated after the match arm is selected. Failing the `if` "
"condition inside of that block won't result in other arms of the original "
"`match` expression being considered. In the following example, the wildcard "
"pattern `_ =>` is never even attempted."
msgstr ""

#: src/pattern-matching/match.md
msgid "\"Uppercase\""
msgstr ""

#: src/pattern-matching/match.md
msgid "\"Bug: this is never printed\""
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"The condition defined in the guard applies to every expression in a pattern "
"with an `|`."
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"Note that you can't use an existing variable as the condition in a match "
"arm, as it will instead be interpreted as a variable name pattern, which "
"creates a new variable that will shadow the existing one. For example:"
msgstr ""

#: src/pattern-matching/match.md
msgid "\"Expected value is 5, actual is {expected}\""
msgstr ""

#: src/pattern-matching/match.md
msgid "\"Value was something else\""
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"Here we're trying to match on the number 123, where we want the first case "
"to check if the value is 5. The naive expectation is that the first case "
"won't match because the value isn't 5, but instead this is interpreted as a "
"variable pattern which always matches, meaning the first branch will always "
"be taken. If a constant is used instead this will then work as expected."
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"Another piece of pattern syntax you can show students is the `@` syntax "
"which binds a part of a pattern to a variable. For example:"
msgstr ""

#: src/pattern-matching/match.md
msgid "\"outer: {outer:?}, inner: {inner}\""
msgstr ""

#: src/pattern-matching/match.md
msgid ""
"In this example `inner` has the value 123 which it pulled from the `Option` "
"via destructuring, `outer` captures the entire `Some(inner)` expression, so "
"it contains the full `Option::Some(123)`. This is rarely used but can be "
"useful in more complex patterns."
msgstr ""

#: src/pattern-matching/destructuring-structs.md
msgid "Structs"
msgstr "Strukturer"

#: src/pattern-matching/destructuring-structs.md
msgid "Like tuples, structs can also be destructured by matching:"
msgstr ""

#: src/pattern-matching/destructuring-structs.md
msgid "\"y = 2, x = {i:?}\""
msgstr "\"y = 2, x = {i:?}\""

#: src/pattern-matching/destructuring-structs.md
msgid "\"x.0 = 1, b = {b}, y = {y}\""
msgstr "\"x.0 = 1, b = {b}, y = {y}\""

#: src/pattern-matching/destructuring-structs.md
msgid "\"y = {y}, other fields were ignored\""
msgstr "\"y = {y}, andre felter blev ignoreret\""

#: src/pattern-matching/destructuring-structs.md
msgid "Change the literal values in `foo` to match with the other patterns."
msgstr ""

#: src/pattern-matching/destructuring-structs.md
msgid "Add a new field to `Foo` and make changes to the pattern as needed."
msgstr ""

#: src/pattern-matching/destructuring-structs.md
msgid ""
"Try `match &foo` and check the type of captures. The pattern syntax remains "
"the same, but the captures become shared references. This is [match "
"ergonomics](https://rust-lang.github.io/rfcs/2005-match-ergonomics.html) and "
"is often useful with `match self` when implementing methods on an enum."
msgstr ""

#: src/pattern-matching/destructuring-structs.md
msgid ""
"The same effect occurs with `match &mut foo`: the captures become exclusive "
"references."
msgstr ""

#: src/pattern-matching/destructuring-structs.md
msgid ""
"The distinction between a capture and a constant expression can be hard to "
"spot. Try changing the `2` in the first arm to a variable, and see that it "
"subtly doesn't work. Change it to a `const` and see it working again."
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid "Like tuples, enums can also be destructured by matching:"
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid ""
"Patterns can also be used to bind variables to parts of your values. This is "
"how you inspect the structure of your types. Let us start with a simple "
"`enum` type:"
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid "\"cannot divide {n} into two equal parts\""
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid "\"{n} divided in two is {half}\""
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid "\"sorry, an error happened: {msg}\""
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid ""
"Here we have used the arms to _destructure_ the `Result` value. In the first "
"arm, `half` is bound to the value inside the `Ok` variant. In the second "
"arm, `msg` is bound to the error message."
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid ""
"The `if`/`else` expression is returning an enum that is later unpacked with "
"a `match`."
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid ""
"You can try adding a third variant to the enum definition and displaying the "
"errors when running the code. Point out the places where your code is now "
"inexhaustive and how the compiler tries to give you hints."
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid ""
"The values in the enum variants can only be accessed after being pattern "
"matched."
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid ""
"Demonstrate what happens when the search is inexhaustive. Note the advantage "
"the Rust compiler provides by confirming when all cases are handled."
msgstr ""

#: src/pattern-matching/destructuring-enums.md
msgid ""
"Demonstrate the syntax for a struct-style variant by adding one to the enum "
"definition and the `match`. Point out how this is syntactically similar to "
"matching on a struct."
msgstr ""

#: src/pattern-matching/let-control-flow.md
msgid ""
"Rust has a few control flow constructs that differ from other languages. "
"They are used for pattern matching:"
msgstr ""

#: src/pattern-matching/let-control-flow.md
msgid "`if let` expressions"
msgstr "`if let`-udtryk"

#: src/pattern-matching/let-control-flow.md
msgid "`while let` expressions"
msgstr "`while let`-udtryk"

#: src/pattern-matching/let-control-flow.md
#, fuzzy
msgid "`let else` expressions"
msgstr "`while let`-udtryk"

#: src/pattern-matching/let-control-flow/if-let.md
msgid ""
"The [`if let` expression](https://doc.rust-lang.org/reference/expressions/if-"
"expr.html#if-let-expressions) lets you execute different code depending on "
"whether a value matches a pattern:"
msgstr ""

#: src/pattern-matching/let-control-flow/if-let.md
#, fuzzy
msgid "\"slept for {duration:?}\""
msgstr "\"expr: {:?}\""

#: src/pattern-matching/let-control-flow/if-let.md
msgid ""
"Unlike `match`, `if let` does not have to cover all branches. This can make "
"it more concise than `match`."
msgstr ""

#: src/pattern-matching/let-control-flow/if-let.md
msgid "A common usage is handling `Some` values when working with `Option`."
msgstr ""

#: src/pattern-matching/let-control-flow/if-let.md
msgid ""
"Unlike `match`, `if let` does not support guard clauses for pattern matching."
msgstr ""

#: src/pattern-matching/let-control-flow/if-let.md
msgid "With an `else` clause, this can be used as an expression."
msgstr ""

#: src/pattern-matching/let-control-flow/while-let.md
msgid ""
"Like with `if let`, there is a [`while let`](https://doc.rust-lang.org/"
"reference/expressions/loop-expr.html#predicate-pattern-loops) variant that "
"repeatedly tests a value against a pattern:"
msgstr ""

#: src/pattern-matching/let-control-flow/while-let.md
#, fuzzy
msgid "\"Comprehensive Rust ü¶Ä\""
msgstr "Velkommen til Comprehensive Rust ü¶Ä"

#: src/pattern-matching/let-control-flow/while-let.md
msgid "// (There are more efficient ways to reverse a string!)\n"
msgstr ""

#: src/pattern-matching/let-control-flow/while-let.md
msgid ""
"Here [`String::pop`](https://doc.rust-lang.org/stable/std/string/"
"struct.String.html#method.pop) returns `Some(c)` until the string is empty, "
"after which it will return `None`. The `while let` lets us keep iterating "
"through all items."
msgstr ""

#: src/pattern-matching/let-control-flow/while-let.md
msgid ""
"Point out that the `while let` loop will keep going as long as the value "
"matches the pattern."
msgstr ""

#: src/pattern-matching/let-control-flow/while-let.md
msgid ""
"You could rewrite the `while let` loop as an infinite loop with an if "
"statement that breaks when there is no value to unwrap for `name.pop()`. The "
"`while let` provides syntactic sugar for the above scenario."
msgstr ""

#: src/pattern-matching/let-control-flow/while-let.md
msgid ""
"This form cannot be used as an expression, because it may have no value if "
"the condition is false."
msgstr ""

#: src/pattern-matching/let-control-flow/let-else.md
#, fuzzy
msgid "`let else` Statements"
msgstr "`while let`-udtryk"

#: src/pattern-matching/let-control-flow/let-else.md
msgid ""
"For the common case of matching a pattern and returning from the function, "
"use [`let else`](https://doc.rust-lang.org/rust-by-example/flow_control/"
"let_else.html). The \"else\" case must diverge (`return`, `break`, or panic "
"- anything but falling off the end of the block)."
msgstr ""

#: src/pattern-matching/let-control-flow/let-else.md
#, fuzzy
msgid "\"got None\""
msgstr "\"none\""

#: src/pattern-matching/let-control-flow/let-else.md
#, fuzzy
msgid "\"got empty string\""
msgstr "\"En streng\""

#: src/pattern-matching/let-control-flow/let-else.md
msgid "\"not a hex digit\""
msgstr ""

#: src/pattern-matching/let-control-flow/let-else.md
msgid "\"result: {:?}\""
msgstr "\"result: {:?}\""

#: src/pattern-matching/let-control-flow/let-else.md
#: src/generics/trait-bounds.md src/testing/solution.md src/android/testing.md
#: src/android/testing/googletest.md
msgid "\"foo\""
msgstr "\"foo\""

#: src/pattern-matching/let-control-flow/let-else.md
msgid ""
"This early return-based control flow is common in Rust error handling code, "
"where you try to get a value out of a `Result`, returning an error if the "
"`Result` was `Err`."
msgstr ""

#: src/pattern-matching/let-control-flow/let-else.md
msgid ""
"If students ask, you can also demonstrate how real error handling code would "
"be written with `?`."
msgstr ""

#: src/pattern-matching/exercise.md
msgid "Let's write a simple recursive evaluator for arithmetic expressions."
msgstr ""

#: src/pattern-matching/exercise.md
msgid ""
"An example of a small arithmetic expression could be `10 + 20`, which "
"evaluates to `30`. We can represent the expression as a tree:"
msgstr ""

#: src/pattern-matching/exercise.md
msgid ""
"A bigger and more complex expression would be `(10 * 9) + ((3 - 4) * 5)`, "
"which evaluates to `85`. We represent this as a much bigger tree:"
msgstr ""

#: src/pattern-matching/exercise.md
msgid "In code, we will represent the tree with two types:"
msgstr ""

#: src/pattern-matching/exercise.md src/pattern-matching/solution.md
#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// An operation to perform on two subexpressions.\n"
msgstr ""

#: src/pattern-matching/exercise.md src/pattern-matching/solution.md
#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// An expression, in tree form.\n"
msgstr ""

#: src/pattern-matching/exercise.md src/pattern-matching/solution.md
#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// An operation on two subexpressions.\n"
msgstr ""

#: src/pattern-matching/exercise.md src/pattern-matching/solution.md
#: src/error-handling/exercise.md src/error-handling/solution.md
msgid "/// A literal value\n"
msgstr ""

#: src/pattern-matching/exercise.md
msgid ""
"The `Box` type here is a smart pointer, and will be covered in detail later "
"in the course. An expression can be \"boxed\" with `Box::new` as seen in the "
"tests. To evaluate a boxed expression, use the deref operator (`*`) to "
"\"unbox\" it: `eval(*boxed_expr)`."
msgstr ""

#: src/pattern-matching/exercise.md
msgid ""
"Copy and paste the code into the Rust playground, and begin implementing "
"`eval`. The final product should pass the tests. It may be helpful to use "
"`todo!()` and get the tests to pass one-by-one. You can also skip a test "
"temporarily with `#[ignore]`:"
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"Rust allows you to associate functions with your new types. You do this with "
"an `impl` block:"
msgstr ""

#: src/methods-and-traits/methods.md
msgid "// No receiver, a static method\n"
msgstr ""

#: src/methods-and-traits/methods.md
msgid "// Exclusive borrowed read-write access to self\n"
msgstr ""

#: src/methods-and-traits/methods.md
msgid "// Shared and read-only borrowed access to self\n"
msgstr ""

#: src/methods-and-traits/methods.md
msgid "\"Recorded {} laps for {}:\""
msgstr ""

#: src/methods-and-traits/methods.md
msgid "\"Lap {idx}: {lap} sec\""
msgstr ""

#: src/methods-and-traits/methods.md
msgid "// Exclusive ownership of self (covered later)\n"
msgstr ""

#: src/methods-and-traits/methods.md
msgid "\"Race {} is finished, total lap time: {}\""
msgstr ""

#: src/methods-and-traits/methods.md
msgid "\"Monaco Grand Prix\""
msgstr "\"Monacos Grand Prix\""

#: src/methods-and-traits/methods.md
msgid "// race.add_lap(42);\n"
msgstr "// race.add_lap(42);\n"

#: src/methods-and-traits/methods.md
msgid ""
"The `self` arguments specify the \"receiver\" - the object the method acts "
"on. There are several common receivers for a method:"
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"`&self`: borrows the object from the caller using a shared and immutable "
"reference. The object can be used again afterwards."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"`&mut self`: borrows the object from the caller using a unique and mutable "
"reference. The object can be used again afterwards."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"`self`: takes ownership of the object and moves it away from the caller. The "
"method becomes the owner of the object. The object will be dropped "
"(deallocated) when the method returns, unless its ownership is explicitly "
"transmitted. Complete ownership does not automatically mean mutability."
msgstr ""

#: src/methods-and-traits/methods.md
msgid "`mut self`: same as above, but the method can mutate the object."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"No receiver: this becomes a static method on the struct. Typically used to "
"create constructors that are called `new` by convention."
msgstr ""

#: src/methods-and-traits/methods.md
msgid "It can be helpful to introduce methods by comparing them to functions."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"Methods are called on an instance of a type (such as a struct or enum), the "
"first parameter represents the instance as `self`."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"Developers may choose to use methods to take advantage of method receiver "
"syntax and to help keep them more organized. By using methods we can keep "
"all the implementation code in one predictable place."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"Note that methods can also be called like associated functions by explicitly "
"passing the receiver in, e.g. `CarRace::add_lap(&mut race, 20)`."
msgstr ""

#: src/methods-and-traits/methods.md
msgid "Point out the use of the keyword `self`, a method receiver."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"Show that it is an abbreviated term for `self: Self` and perhaps show how "
"the struct name could also be used."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"Explain that `Self` is a type alias for the type the `impl` block is in and "
"can be used elsewhere in the block."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"Note how `self` is used like other structs and dot notation can be used to "
"refer to individual fields."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"This might be a good time to demonstrate how the `&self` differs from `self` "
"by trying to run `finish` twice."
msgstr ""

#: src/methods-and-traits/methods.md
msgid ""
"Beyond variants on `self`, there are also [special wrapper types](https://"
"doc.rust-lang.org/reference/special-types-and-traits.html) allowed to be "
"receiver types, such as `Box<Self>`."
msgstr ""

#: src/methods-and-traits/traits.md
msgid ""
"Rust lets you abstract over types with traits. They're similar to interfaces:"
msgstr ""

#: src/methods-and-traits/traits.md
msgid "/// Return a sentence from this pet.\n"
msgstr ""

#: src/methods-and-traits/traits.md
msgid "/// Print a string to the terminal greeting this pet.\n"
msgstr ""

#: src/methods-and-traits/traits.md
msgid ""
"A trait defines a number of methods that types must have in order to "
"implement the trait."
msgstr ""

#: src/methods-and-traits/traits.md
msgid ""
"In the \"Generics\" segment, next, we will see how to build functionality "
"that is generic over all types implementing a trait."
msgstr ""

#: src/methods-and-traits/traits/implementing.md
msgid "\"Oh you're a cutie! What's your name? {}\""
msgstr ""

#: src/methods-and-traits/traits/implementing.md src/generics/dyn-trait.md
#: src/smart-pointers/trait-objects.md
#, fuzzy
msgid "\"Woof, my name is {}!\""
msgstr "\"Hej, mit navn er {}\""

#: src/methods-and-traits/traits/implementing.md src/generics/dyn-trait.md
#: src/smart-pointers/trait-objects.md
msgid "\"Fido\""
msgstr "\"Fido\""

#: src/methods-and-traits/traits/implementing.md
msgid ""
"To implement `Trait` for `Type`, you use an `impl Trait for Type { .. }` "
"block."
msgstr ""

#: src/methods-and-traits/traits/implementing.md
msgid ""
"Unlike Go interfaces, just having matching methods is not enough: a `Cat` "
"type with a `talk()` method would not automatically satisfy `Pet` unless it "
"is in an `impl Pet` block."
msgstr ""

#: src/methods-and-traits/traits/implementing.md
msgid ""
"Traits may provide default implementations of some methods. Default "
"implementations can rely on all the methods of the trait. In this case, "
"`greet` is provided, and relies on `talk`."
msgstr ""

#: src/methods-and-traits/traits/implementing.md
msgid ""
"Multiple `impl` blocks are allowed for a given type. This includes both "
"inherent `impl` blocks and trait `impl` blocks. Likewise multiple traits can "
"be implemented for a given type (and often types implement many traits!). "
"`impl` blocks can even be spread across multiple modules/files."
msgstr ""

#: src/methods-and-traits/traits/supertraits.md
msgid ""
"A trait can require that types implementing it also implement other traits, "
"called _supertraits_. Here, any type implementing `Pet` must implement "
"`Animal`."
msgstr ""

#: src/methods-and-traits/traits/supertraits.md
msgid "\"Rex\""
msgstr "\"Rex\""

#: src/methods-and-traits/traits/supertraits.md
#, fuzzy
msgid "\"{} has {} legs\""
msgstr "\"{} {}\""

#: src/methods-and-traits/traits/supertraits.md
msgid ""
"This is sometimes called \"trait inheritance\" but students should not "
"expect this to behave like OO inheritance. It just specifies an additional "
"requirement on implementations of a trait."
msgstr ""

#: src/methods-and-traits/traits/associated-types.md
msgid ""
"Associated types are placeholder types that are supplied by the trait "
"implementation."
msgstr ""

#: src/methods-and-traits/traits/associated-types.md
#: src/lifetimes/lifetime-elision.md
msgid "\"{:?}\""
msgstr "\"{:?}\""

#: src/methods-and-traits/traits/associated-types.md
msgid ""
"Associated types are sometimes also called \"output types\". The key "
"observation is that the implementer, not the caller, chooses this type."
msgstr ""

#: src/methods-and-traits/traits/associated-types.md
msgid ""
"Many standard library traits have associated types, including arithmetic "
"operators and `Iterator`."
msgstr ""

#: src/methods-and-traits/deriving.md
msgid ""
"Supported traits can be automatically implemented for your custom types, as "
"follows:"
msgstr ""

#: src/methods-and-traits/deriving.md
msgid "// Default trait adds `default` constructor.\n"
msgstr ""

#: src/methods-and-traits/deriving.md
msgid "// Clone trait adds `clone` method.\n"
msgstr ""

#: src/methods-and-traits/deriving.md
msgid "\"EldurScrollz\""
msgstr ""

#: src/methods-and-traits/deriving.md
msgid "// Debug trait adds support for printing with `{:?}`.\n"
msgstr ""

#: src/methods-and-traits/deriving.md
#, fuzzy
msgid "\"{p1:?} vs. {p2:?}\""
msgstr "\"{:?} + {:?} = {:?}\""

#: src/methods-and-traits/deriving.md
msgid ""
"Derivation is implemented with macros, and many crates provide useful derive "
"macros to add useful functionality. For example, `serde` can derive "
"serialization support for a struct using `#[derive(Serialize)]`."
msgstr ""

#: src/methods-and-traits/deriving.md
msgid ""
"Derivation is usually provided for traits that have a common boilerplate "
"implementation that is correct for most cases. For example, demonstrate how "
"a manual `Clone` impl can be repetitive compared to deriving the trait:"
msgstr ""

#: src/methods-and-traits/deriving.md
msgid ""
"Not all of the `.clone()`s in the above are necessary in this case, but this "
"demonstrates the generally boilerplate-y pattern that manual impls would "
"follow, which should help make the use of `derive` clear to students."
msgstr ""

#: src/methods-and-traits/exercise.md
#, fuzzy
msgid "Exercise: Logger Trait"
msgstr "√òvelser"

#: src/methods-and-traits/exercise.md
msgid ""
"Let's design a simple logging utility, using a trait `Logger` with a `log` "
"method. Code that might log its progress can then take an `&impl Logger`. In "
"testing, this might put messages in the test logfile, while in a production "
"build it would send messages to a log server."
msgstr ""

#: src/methods-and-traits/exercise.md
msgid ""
"However, the `StderrLogger` given below logs all messages, regardless of "
"verbosity. Your task is to write a `VerbosityFilter` type that will ignore "
"messages above a maximum verbosity."
msgstr ""

#: src/methods-and-traits/exercise.md
msgid ""
"This is a common pattern: a struct wrapping a trait implementation and "
"implementing that same trait, adding behavior in the process. In the "
"\"Generics\" segment, we will see how to make the wrapper generic over the "
"wrapped type."
msgstr ""

#: src/methods-and-traits/exercise.md src/methods-and-traits/solution.md
#: src/generics/generic-data.md src/closures/exercise.md
#: src/closures/solution.md
msgid "/// Log a message at the given verbosity level.\n"
msgstr ""

#: src/methods-and-traits/exercise.md src/methods-and-traits/solution.md
#: src/generics/generic-data.md src/closures/exercise.md
#: src/closures/solution.md
msgid "\"verbosity={verbosity}: {message}\""
msgstr ""

#: src/methods-and-traits/exercise.md src/methods-and-traits/solution.md
#: src/generics/generic-data.md
msgid "/// Only log messages up to the given verbosity level.\n"
msgstr ""

#: src/methods-and-traits/exercise.md
msgid "// TODO: Implement the `Logger` trait for `VerbosityFilter`.\n"
msgstr ""

#: src/methods-and-traits/exercise.md src/methods-and-traits/solution.md
#: src/generics/generic-data.md src/closures/exercise.md
#: src/closures/solution.md
msgid "\"FYI\""
msgstr ""

#: src/methods-and-traits/exercise.md src/methods-and-traits/solution.md
#: src/generics/generic-data.md
msgid "\"Uhoh\""
msgstr ""

#: src/generics.md
#, fuzzy
msgid "impl Trait"
msgstr "`impl Trait`"

#: src/generics.md
#, fuzzy
msgid "dyn Trait"
msgstr "Asynkrone egenskaber (eng. Traits)"

#: src/generics.md
#, fuzzy
msgid "Exercise: Generic min"
msgstr "√òvelser"

#: src/generics/generic-functions.md
msgid ""
"Rust supports generics, which lets you abstract algorithms or data "
"structures (such as sorting or a binary tree) over the types used or stored."
msgstr ""

#: src/generics/generic-functions.md
#, fuzzy
msgid "\"picked a number: {:?}\""
msgstr "\"{numbers:?}\""

#: src/generics/generic-functions.md
#, fuzzy
msgid "\"picked a string: {:?}\""
msgstr "\"result: {:?}\""

#: src/generics/generic-functions.md
#, fuzzy
msgid "'L'"
msgstr "'x'"

#: src/generics/generic-functions.md
#, fuzzy
msgid "'R'"
msgstr "'x'"

#: src/generics/generic-functions.md
msgid ""
"It can be helpful to show the monomorphized versions of `pick`, either "
"before talking about the generic `pick` in order to show how generics can "
"reduce code duplication, or after talking about generics to show how "
"monomorphization works."
msgstr ""

#: src/generics/generic-functions.md
msgid ""
"Rust infers a type for T based on the types of the arguments and return "
"value."
msgstr ""

#: src/generics/generic-functions.md
msgid ""
"In this example we only use the primitive types `i32` and `char` for `T`, "
"but we can use any type here, including user-defined types:"
msgstr ""

#: src/generics/generic-functions.md
msgid ""
"This is similar to C++ templates, but Rust partially compiles the generic "
"function immediately, so that function must be valid for all types matching "
"the constraints. For example, try modifying `pick` to return `left + right` "
"if `cond` is false. Even if only the `pick` instantiation with integers is "
"used, Rust still considers it invalid. C++ would let you do this."
msgstr ""

#: src/generics/generic-functions.md
msgid ""
"Generic code is turned into non-generic code based on the call sites. This "
"is a zero-cost abstraction: you get exactly the same result as if you had "
"hand-coded the data structures without the abstraction."
msgstr ""

#: src/generics/trait-bounds.md
msgid ""
"When working with generics, you often want to require the types to implement "
"some trait, so that you can call this trait's methods."
msgstr ""

#: src/generics/trait-bounds.md
msgid "You can do this with `T: Trait`:"
msgstr ""

#: src/generics/trait-bounds.md
msgid "\"{pair:?}\""
msgstr "\"{pair:?}\""

#: src/generics/trait-bounds.md
msgid "Try making a `NotCloneable` and passing it to `duplicate`."
msgstr ""

#: src/generics/trait-bounds.md
msgid "When multiple traits are necessary, use `+` to join them."
msgstr ""

#: src/generics/trait-bounds.md
msgid "Show a `where` clause, students will encounter it when reading code."
msgstr ""

#: src/generics/trait-bounds.md
msgid "It declutters the function signature if you have many parameters."
msgstr ""

#: src/generics/trait-bounds.md
msgid "It has additional features making it more powerful."
msgstr ""

#: src/generics/trait-bounds.md
msgid ""
"If someone asks, the extra feature is that the type on the left of \":\" can "
"be arbitrary, like `Option<T>`."
msgstr ""

#: src/generics/trait-bounds.md
msgid ""
"Note that Rust does not (yet) support specialization. For example, given the "
"original `duplicate`, it is invalid to add a specialized `duplicate(a: u32)`."
msgstr ""

#: src/generics/generic-data.md
msgid ""
"You can use generics to abstract over the concrete field type. Returning to "
"the exercise for the previous segment:"
msgstr ""

#: src/generics/generic-data.md
msgid ""
"_Q:_ Why is `L` specified twice in `impl<L: Logger> .. VerbosityFilter<L>`? "
"Isn't that redundant?"
msgstr ""

#: src/generics/generic-data.md
msgid ""
"This is because it is a generic implementation section for generic type. "
"They are independently generic."
msgstr ""

#: src/generics/generic-data.md
msgid "It means these methods are defined for any `L`."
msgstr ""

#: src/generics/generic-data.md
msgid "It is possible to write `impl VerbosityFilter<StderrLogger> { .. }`."
msgstr ""

#: src/generics/generic-data.md
msgid ""
"`VerbosityFilter` is still generic and you can use `VerbosityFilter<f64>`, "
"but methods in this block will only be available for "
"`VerbosityFilter<StderrLogger>`."
msgstr ""

#: src/generics/generic-data.md
msgid ""
"Note that we don't put a trait bound on the `VerbosityFilter` type itself. "
"You can put bounds there as well, but generally in Rust we only put the "
"trait bounds on the impl blocks."
msgstr ""

#: src/generics/generic-traits.md
msgid ""
"Traits can also be generic, just like types and functions. A trait's "
"parameters get concrete types when it is used. For example the [`From<T>`]"
"(https://doc.rust-lang.org/std/convert/trait.From.html) trait is used to "
"define type conversions:"
msgstr ""

#: src/generics/generic-traits.md
msgid "\"Converted from integer: {from}\""
msgstr ""

#: src/generics/generic-traits.md
msgid "\"Converted from bool: {from}\""
msgstr ""

#: src/generics/generic-traits.md
msgid ""
"The `From` trait will be covered later in the course, but its [definition in "
"the `std` docs](https://doc.rust-lang.org/std/convert/trait.From.html) is "
"simple, and copied here for reference."
msgstr ""

#: src/generics/generic-traits.md
msgid ""
"Implementations of the trait do not need to cover all possible type "
"parameters. Here, `Foo::from(\"hello\")` would not compile because there is "
"no `From<&str>` implementation for `Foo`."
msgstr ""

#: src/generics/generic-traits.md
msgid ""
"Generic traits take types as \"input\", while associated types are a kind of "
"\"output\" type. A trait can have multiple implementations for different "
"input types."
msgstr ""

#: src/generics/generic-traits.md
msgid ""
"In fact, Rust requires that at most one implementation of a trait match for "
"any type T. Unlike some other languages, Rust has no heuristic for choosing "
"the \"most specific\" match. There is work on adding this support, called "
"[specialization](https://rust-lang.github.io/rfcs/1210-impl-"
"specialization.html)."
msgstr ""

#: src/generics/impl-trait.md
msgid ""
"Similar to trait bounds, an `impl Trait` syntax can be used in function "
"arguments and return values:"
msgstr ""

#: src/generics/impl-trait.md
msgid ""
"// Syntactic sugar for:\n"
"//   fn add_42_millions<T: Into<i32>>(x: T) -> i32 {\n"
msgstr ""

#: src/generics/impl-trait.md
msgid ""
"`impl Trait` allows you to work with types that you cannot name. The meaning "
"of `impl Trait` is a bit different in the different positions."
msgstr ""

#: src/generics/impl-trait.md
msgid ""
"For a parameter, `impl Trait` is like an anonymous generic parameter with a "
"trait bound."
msgstr ""

#: src/generics/impl-trait.md
msgid ""
"For a return type, it means that the return type is some concrete type that "
"implements the trait, without naming the type. This can be useful when you "
"don't want to expose the concrete type in a public API."
msgstr ""

#: src/generics/impl-trait.md
msgid ""
"Inference is hard in return position. A function returning `impl Foo` picks "
"the concrete type it returns, without writing it out in the source. A "
"function returning a generic type like `collect<B>() -> B` can return any "
"type satisfying `B`, and the caller may need to choose one, such as with "
"`let x: Vec<_> = foo.collect()` or with the turbofish, `foo.collect::"
"<Vec<_>>()`."
msgstr ""

#: src/generics/impl-trait.md
msgid ""
"What is the type of `debuggable`? Try `let debuggable: () = ..` to see what "
"the error message shows."
msgstr ""

#: src/generics/dyn-trait.md
msgid ""
"In addition to using traits for static dispatch via generics, Rust also "
"supports using them for type-erased, dynamic dispatch via trait objects:"
msgstr ""

#: src/generics/dyn-trait.md src/smart-pointers/trait-objects.md
msgid "\"Miau!\""
msgstr ""

#: src/generics/dyn-trait.md
msgid "// Uses generics and static dispatch.\n"
msgstr ""

#: src/generics/dyn-trait.md src/smart-pointers/trait-objects.md
#, fuzzy
msgid "\"Hello, who are you? {}\""
msgstr "\"Hej, mit navn er {}\""

#: src/generics/dyn-trait.md
msgid "// Uses type-erasure and dynamic dispatch.\n"
msgstr ""

#: src/generics/dyn-trait.md
msgid ""
"Generics, including `impl Trait`, use monomorphization to create a "
"specialized instance of the function for each different type that the "
"generic is instantiated with. This means that calling a trait method from "
"within a generic function still uses static dispatch, as the compiler has "
"full type information and can resolve that type's trait implementation to "
"use."
msgstr ""

#: src/generics/dyn-trait.md
msgid ""
"When using `dyn Trait`, it instead uses dynamic dispatch through a [virtual "
"method table](https://en.wikipedia.org/wiki/Virtual_method_table) (vtable). "
"This means that there's a single version of `fn dynamic` that is used "
"regardless of what type of `Pet` is passed in."
msgstr ""

#: src/generics/dyn-trait.md
msgid ""
"When using `dyn Trait`, the trait object needs to be behind some kind of "
"indirection. In this case it's a reference, though smart pointer types like "
"`Box` can also be used (this will be demonstrated on day 3)."
msgstr ""

#: src/generics/dyn-trait.md
msgid ""
"At runtime, a `&dyn Pet` is represented as a \"fat pointer\", i.e. a pair of "
"two pointers: One pointer points to the concrete object that implements "
"`Pet`, and the other points to the vtable for the trait implementation for "
"that type. When calling the `talk` method on `&dyn Pet` the compiler looks "
"up the function pointer for `talk` in the vtable and then invokes the "
"function, passing the pointer to the `Dog` or `Cat` into that function. The "
"compiler doesn't need to know the concrete type of the `Pet` in order to do "
"this."
msgstr ""

#: src/generics/dyn-trait.md
msgid ""
"A `dyn Trait` is considered to be \"type-erased\", because we no longer have "
"compile-time knowledge of what the concrete type is."
msgstr ""

#: src/generics/exercise.md
msgid ""
"In this short exercise, you will implement a generic `min` function that "
"determines the minimum of two values, using the [`Ord`](https://doc.rust-"
"lang.org/stable/std/cmp/trait.Ord.html) trait."
msgstr ""

#: src/generics/exercise.md
msgid "// TODO: implement the `min` function used in the tests.\n"
msgstr ""

#: src/generics/exercise.md src/generics/solution.md
#, fuzzy
msgid "'z'"
msgstr "'x'"

#: src/generics/exercise.md src/generics/solution.md
#, fuzzy
msgid "'7'"
msgstr "'x'"

#: src/generics/exercise.md src/generics/solution.md
#, fuzzy
msgid "'1'"
msgstr "'x'"

#: src/generics/exercise.md src/generics/solution.md
#: src/std-traits/from-and-into.md
msgid "\"hello\""
msgstr "\"hallo\""

#: src/generics/exercise.md src/generics/solution.md
msgid "\"goodbye\""
msgstr ""

#: src/generics/exercise.md src/generics/solution.md
msgid "\"bat\""
msgstr ""

#: src/generics/exercise.md src/generics/solution.md
msgid "\"armadillo\""
msgstr ""

#: src/generics/exercise.md
msgid ""
"Show students the [`Ord`](https://doc.rust-lang.org/stable/std/cmp/"
"trait.Ord.html) trait and [`Ordering`](https://doc.rust-lang.org/stable/std/"
"cmp/enum.Ordering.html) enum."
msgstr ""

#: src/welcome-day-2-afternoon.md src/welcome-day-4.md
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 50 "
"minutes. It contains:"
msgstr ""

#: src/closures.md src/concurrency/threads.md src/concurrency/shared-state.md
msgid "This segment should take about 30 minutes. It contains:"
msgstr ""

#: src/closures/syntax.md
msgid "Closures are created with vertical bars: `|..| ..`."
msgstr ""

#: src/closures/syntax.md
msgid "// Argument and return type can be inferred for lightweight syntax:\n"
msgstr ""

#: src/closures/syntax.md
msgid "// Or we can specify types and bracket the body to be fully explicit:\n"
msgstr ""

#: src/closures/syntax.md
msgid ""
"The arguments go between the `|..|`. The body can be surrounded by `{ .. }`, "
"but if it is a single expression these can be omitted."
msgstr ""

#: src/closures/syntax.md
msgid ""
"Argument types are optional, and are inferred if not given. The return type "
"is also optional, but can only be written if using `{ .. }` around the body."
msgstr ""

#: src/closures/syntax.md
msgid ""
"The examples can both be written as mere nested functions instead -- they do "
"not capture any variables from their lexical environment. We will see "
"captures next."
msgstr ""

#: src/closures/syntax.md
msgid ""
"The ability to store functions in variables doesn't just apply to closures, "
"regular functions can be put in variables and then invoked the same way that "
"closures can: [Example in the playground](https://play.rust-lang.org/?"
"version=stable&mode=debug&edition=2024&gist=817cbeeefc49f3d0d180a3d6d54c8bda)."
msgstr ""

#: src/closures/syntax.md
msgid ""
"The linked example also demonstrates that closures that don't capture "
"anything can also coerce to a regular function pointer."
msgstr ""

#: src/closures/capturing.md
msgid ""
"A closure can capture variables from the environment where it was defined."
msgstr ""

#: src/closures/capturing.md
msgid ""
"By default, a closure captures values by reference. Here `max_value` is "
"captured by `clamp`, but still available to `main` for printing. Try making "
"`max_value` mutable, changing it, and printing the clamped values again. Why "
"doesn't this work?"
msgstr ""

#: src/closures/capturing.md
msgid ""
"If a closure mutates values, it will capture them by mutable reference. Try "
"adding `max_value += 1` to `clamp`."
msgstr ""

#: src/closures/capturing.md
msgid ""
"You can force a closure to move values instead of referencing them with the "
"`move` keyword. This can help with lifetimes, for example if the closure "
"must outlive the captured values (more on lifetimes later)."
msgstr ""

#: src/closures/capturing.md
msgid ""
"This looks like `move |v| ..`. Try adding this keyword and see if `main` can "
"still access `max_value` after defining `clamp`."
msgstr ""

#: src/closures/capturing.md
msgid ""
"By default, closures will capture each variable from an outer scope by the "
"least demanding form of access they can (by shared reference if possible, "
"then exclusive reference, then by move). The `move` keyword forces capture "
"by value."
msgstr ""

#: src/closures/traits.md
msgid "Closure traits"
msgstr ""

#: src/closures/traits.md
msgid ""
"Closures or lambda expressions have types that cannot be named. However, "
"they implement special [`Fn`](https://doc.rust-lang.org/std/ops/"
"trait.Fn.html), [`FnMut`](https://doc.rust-lang.org/std/ops/"
"trait.FnMut.html), and [`FnOnce`](https://doc.rust-lang.org/std/ops/"
"trait.FnOnce.html) traits:"
msgstr ""

#: src/closures/traits.md
msgid ""
"The special types `fn(..) -> T` refer to function pointers - either the "
"address of a function, or a closure that captures nothing."
msgstr ""

#: src/closures/traits.md
msgid "\"Calling {func_name}({input}): {}\""
msgstr ""

#: src/closures/traits.md
msgid "\"-itis\""
msgstr ""

#: src/closures/traits.md
#, fuzzy
msgid "\"{x}{suffix}\""
msgstr "\"{x}, {abs_x}\""

#: src/closures/traits.md
msgid "\"add_suffix\""
msgstr ""

#: src/closures/traits.md
msgid "\"senior\""
msgstr ""

#: src/closures/traits.md
msgid "\"appendix\""
msgstr ""

#: src/closures/traits.md
#, fuzzy
msgid "\"/\""
msgstr "\"\""

#: src/closures/traits.md
#, fuzzy
msgid "\"accumulate\""
msgstr "\"accumulate: {}\""

#: src/closures/traits.md
msgid "\"red\""
msgstr ""

#: src/closures/traits.md
#, fuzzy
msgid "\"green\""
msgstr "\"greetings\""

#: src/closures/traits.md
msgid "\"blue\""
msgstr ""

#: src/closures/traits.md
msgid "\"take_and_reverse\""
msgstr ""

#: src/closures/traits.md
msgid "\"reversed: \""
msgstr ""

#: src/closures/traits.md
msgid ""
"An `Fn` (e.g. `add_suffix`) neither consumes nor mutates captured values. It "
"can be called needing only a shared reference to the closure, which means "
"the closure can be executed repeatedly and even concurrently."
msgstr ""

#: src/closures/traits.md
msgid ""
"An `FnMut` (e.g. `accumulate`) might mutate captured values. The closure "
"object is accessed via exclusive reference, so it can be called repeatedly "
"but not concurrently."
msgstr ""

#: src/closures/traits.md
msgid ""
"If you have an `FnOnce` (e.g. `take_and_reverse`), you may only call it "
"once. Doing so consumes the closure and any values captured by move."
msgstr ""

#: src/closures/traits.md
msgid ""
"`FnMut` is a subtype of `FnOnce`. `Fn` is a subtype of `FnMut` and `FnOnce`. "
"I.e. you can use an `FnMut` wherever an `FnOnce` is called for, and you can "
"use an `Fn` wherever an `FnMut` or `FnOnce` is called for."
msgstr ""

#: src/closures/traits.md
msgid ""
"When you define a function that takes a closure, you should take `FnOnce` if "
"you can (i.e. you call it once), or `FnMut` else, and last `Fn`. This allows "
"the most flexibility for the caller."
msgstr ""

#: src/closures/traits.md
msgid ""
"In contrast, when you have a closure, the most flexible you can have is `Fn` "
"(which can be passed to a consumer of any of the three closure traits), then "
"`FnMut`, and lastly `FnOnce`."
msgstr ""

#: src/closures/traits.md
msgid ""
"The compiler also infers `Copy` (e.g. for `add_suffix`) and `Clone` (e.g. "
"`take_and_reverse`), depending on what the closure captures. Function "
"pointers (references to `fn` items) implement `Copy` and `Fn`."
msgstr ""

#: src/closures/exercise.md
msgid ""
"Building on the generic logger from this morning, implement a `Filter` that "
"uses a closure to filter log messages, sending those that pass the filtering "
"predicate to an inner logger."
msgstr ""

#: src/closures/exercise.md
msgid "// TODO: Define and implement `Filter`.\n"
msgstr ""

#: src/closures/exercise.md src/closures/solution.md
msgid "\"yikes\""
msgstr ""

#: src/closures/exercise.md src/closures/solution.md
msgid "\"yikes, something went wrong\""
msgstr ""

#: src/closures/exercise.md src/closures/solution.md
msgid "\"uhoh\""
msgstr ""

#: src/closures/solution.md
msgid "/// Only log messages matching a filtering predicate.\n"
msgstr ""

#: src/closures/solution.md
msgid ""
"Note that the `P: Fn(u8, &str) -> bool` bound on the first `Filter` impl "
"block isn't strictly necessary, but it helps with type inference when "
"calling `new`. Demonstrate removing it and showing how the compiler now "
"needs type annotations for the closure passed to `new`."
msgstr ""

#: src/std-types.md src/std-types/option.md
#, fuzzy
msgid "Option"
msgstr "Undtagelser"

#: src/std-types.md src/std-types/result.md src/error-handling.md
msgid "Result"
msgstr ""

#: src/std-types.md src/std-types/string.md
msgid "String"
msgstr ""

#: src/std-types.md
#, fuzzy
msgid "Vec"
msgstr "`Vec`"

#: src/std-types.md
#, fuzzy
msgid "HashMap"
msgstr "`HashMap`"

#: src/std-types.md
msgid ""
"For each of the slides in this section, spend some time reviewing the "
"documentation pages, highlighting some of the more common methods."
msgstr ""

#: src/std-types/std.md
msgid ""
"Rust comes with a standard library that helps establish a set of common "
"types used by Rust libraries and programs. This way, two libraries can work "
"together smoothly because they both use the same `String` type."
msgstr ""

#: src/std-types/std.md
msgid ""
"In fact, Rust contains several layers of the Standard Library: `core`, "
"`alloc` and `std`."
msgstr ""

#: src/std-types/std.md
msgid ""
"`core` includes the most basic types and functions that don't depend on "
"`libc`, allocator or even the presence of an operating system."
msgstr ""

#: src/std-types/std.md
msgid ""
"`alloc` includes types that require a global heap allocator, such as `Vec`, "
"`Box` and `Arc`."
msgstr ""

#: src/std-types/std.md
msgid ""
"Embedded Rust applications often only use `core`, and sometimes `alloc`."
msgstr ""

#: src/std-types/docs.md
msgid "Rust comes with extensive documentation. For example:"
msgstr ""

#: src/std-types/docs.md
msgid ""
"All of the details about [loops](https://doc.rust-lang.org/stable/reference/"
"expressions/loop-expr.html)."
msgstr ""

#: src/std-types/docs.md
msgid ""
"Primitive types like [`u8`](https://doc.rust-lang.org/stable/std/"
"primitive.u8.html)."
msgstr ""

#: src/std-types/docs.md
msgid ""
"Standard library types like [`Option`](https://doc.rust-lang.org/stable/std/"
"option/enum.Option.html) or [`BinaryHeap`](https://doc.rust-lang.org/stable/"
"std/collections/struct.BinaryHeap.html)."
msgstr ""

#: src/std-types/docs.md
msgid "Use `rustup doc --std` or <https://std.rs> to view the documentation."
msgstr ""

#: src/std-types/docs.md
msgid "In fact, you can document your own code:"
msgstr ""

#: src/std-types/docs.md
msgid ""
"/// Determine whether the first argument is divisible by the second "
"argument.\n"
"///\n"
"/// If the second argument is zero, the result is false.\n"
msgstr ""

#: src/std-types/docs.md
msgid ""
"The contents are treated as Markdown. All published Rust library crates are "
"automatically documented at [`docs.rs`](https://docs.rs) using the [rustdoc]"
"(https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html) tool. It is "
"idiomatic to document all public items in an API using this pattern."
msgstr ""

#: src/std-types/docs.md
msgid ""
"To document an item from inside the item (such as inside a module), use `//!"
"` or `/*! .. */`, called \"inner doc comments\":"
msgstr ""

#: src/std-types/docs.md
msgid ""
"//! This module contains functionality relating to divisibility of "
"integers.\n"
msgstr ""

#: src/std-types/docs.md
msgid ""
"Show students the generated docs for the `rand` crate at <https://docs.rs/"
"rand>."
msgstr ""

#: src/std-types/option.md
msgid ""
"We have already seen some use of `Option<T>`. It stores either a value of "
"type `T` or nothing. For example, [`String::find`](https://doc.rust-lang.org/"
"stable/std/string/struct.String.html#method.find) returns an `Option<usize>`."
msgstr ""

#: src/std-types/option.md
msgid "\"L√∂we ËÄÅËôé L√©opard Gepardi\""
msgstr ""

#: src/std-types/option.md
msgid "'√©'"
msgstr ""

#: src/std-types/option.md
#, fuzzy
msgid "'Z'"
msgstr "'x'"

#: src/std-types/option.md
msgid "\"Character not found\""
msgstr ""

#: src/std-types/option.md
msgid "`Option` is widely used, not just in the standard library."
msgstr ""

#: src/std-types/option.md
msgid ""
"`unwrap` will return the value in an `Option`, or panic. `expect` is similar "
"but takes an error message."
msgstr ""

#: src/std-types/option.md
msgid ""
"You can panic on None, but you can't \"accidentally\" forget to check for "
"None."
msgstr ""

#: src/std-types/option.md
msgid ""
"It's common to `unwrap`/`expect` all over the place when hacking something "
"together, but production code typically handles `None` in a nicer fashion."
msgstr ""

#: src/std-types/option.md
msgid ""
"The \"niche optimization\" means that `Option<T>` often has the same size in "
"memory as `T`, if there is some representation that is not a valid value of "
"T. For example, a reference cannot be NULL, so `Option<&T>` automatically "
"uses NULL to represent the `None` variant, and thus can be stored in the "
"same memory as `&T`."
msgstr ""

#: src/std-types/result.md
msgid ""
"`Result` is similar to `Option`, but indicates the success or failure of an "
"operation, each with a different enum variant. It is generic: `Result<T, E>` "
"where `T` is used in the `Ok` variant and `E` appears in the `Err` variant."
msgstr ""

#: src/std-types/result.md src/error-handling/result.md
msgid "\"diary.txt\""
msgstr "\"dagbog.txt\""

#: src/std-types/result.md src/error-handling/result.md
#, fuzzy
msgid "\"Dear diary: {contents} ({bytes} bytes)\""
msgstr "\"K√¶re dagbog: {contents}\""

#: src/std-types/result.md src/error-handling/result.md
msgid "\"Could not read file content\""
msgstr ""

#: src/std-types/result.md src/error-handling/result.md
msgid "\"The diary could not be opened: {err}\""
msgstr ""

#: src/std-types/result.md
msgid ""
"As with `Option`, the successful value sits inside of `Result`, forcing the "
"developer to explicitly extract it. This encourages error checking. In the "
"case where an error should never happen, `unwrap()` or `expect()` can be "
"called, and this is a signal of the developer intent too."
msgstr ""

#: src/std-types/result.md
msgid ""
"`Result` documentation is a recommended read. Not during the course, but it "
"is worth mentioning. It contains a lot of convenience methods and functions "
"that help functional-style programming."
msgstr ""

#: src/std-types/result.md
msgid ""
"`Result` is the standard type to implement error handling as we will see on "
"Day 4."
msgstr ""

#: src/std-types/string.md
msgid ""
"[`String`](https://doc.rust-lang.org/std/string/struct.String.html) is a "
"growable UTF-8 encoded string:"
msgstr ""

#: src/std-types/string.md src/std-traits/comparisons.md
#: src/std-traits/read-and-write.md src/memory-management/review.md
#: src/testing/unit-tests.md src/concurrency/threads/scoped.md
msgid "\"Hello\""
msgstr "\"Hello\""

#: src/std-types/string.md
msgid "\"s1: len = {}, capacity = {}\""
msgstr "\"s1: len = {}, capacity = {}\""

#: src/std-types/string.md
msgid "'!'"
msgstr "'!'"

#: src/std-types/string.md
msgid "\"s2: len = {}, capacity = {}\""
msgstr "\"s2: len = {}, capacity = {}\""

#: src/std-types/string.md
msgid "\"üá®üá≠\""
msgstr "\"üá®üá≠\""

#: src/std-types/string.md
msgid "\"s3: len = {}, number of chars = {}\""
msgstr "\"s3: len = {}, antal tegn = {}\""

#: src/std-types/string.md
msgid ""
"`String` implements [`Deref<Target = str>`](https://doc.rust-lang.org/std/"
"string/struct.String.html#deref-methods-str), which means that you can call "
"all `str` methods on a `String`."
msgstr ""

#: src/std-types/string.md
msgid ""
"`String::new` returns a new empty string, use `String::with_capacity` when "
"you know how much data you want to push to the string."
msgstr ""

#: src/std-types/string.md
msgid ""
"`String::len` returns the size of the `String` in bytes (which can be "
"different from its length in characters)."
msgstr ""

#: src/std-types/string.md
msgid ""
"`String::chars` returns an iterator over the actual characters. Note that a "
"`char` can be different from what a human will consider a \"character\" due "
"to [grapheme clusters](https://docs.rs/unicode-segmentation/latest/"
"unicode_segmentation/struct.Graphemes.html)."
msgstr ""

#: src/std-types/string.md
msgid ""
"When people refer to strings they could either be talking about `&str` or "
"`String`."
msgstr ""

#: src/std-types/string.md
msgid ""
"When a type implements `Deref<Target = T>`, the compiler will let you "
"transparently call methods from `T`."
msgstr ""

#: src/std-types/string.md
msgid ""
"We haven't discussed the `Deref` trait yet, so at this point this mostly "
"explains the structure of the sidebar in the documentation."
msgstr ""

#: src/std-types/string.md
msgid ""
"`String` implements `Deref<Target = str>` which transparently gives it "
"access to `str`'s methods."
msgstr ""

#: src/std-types/string.md
msgid "Write and compare `let s3 = s1.deref();` and `let s3 = &*s1;`."
msgstr ""

#: src/std-types/string.md
msgid ""
"`String` is implemented as a wrapper around a vector of bytes, many of the "
"operations you see supported on vectors are also supported on `String`, but "
"with some extra guarantees."
msgstr ""

#: src/std-types/string.md
msgid "Compare the different ways to index a `String`:"
msgstr ""

#: src/std-types/string.md
msgid ""
"To a character by using `s3.chars().nth(i).unwrap()` where `i` is in-bound, "
"out-of-bounds."
msgstr ""

#: src/std-types/string.md
msgid ""
"To a substring by using `s3[0..4]`, where that slice is on character "
"boundaries or not."
msgstr ""

#: src/std-types/string.md
msgid ""
"Many types can be converted to a string with the [`to_string`](https://"
"doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string) method. "
"This trait is automatically implemented for all types that implement "
"`Display`, so anything that can be formatted can also be converted to a "
"string."
msgstr ""

#: src/std-types/vec.md
msgid ""
"[`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html) is the standard "
"resizable heap-allocated buffer:"
msgstr ""

#: src/std-types/vec.md
msgid "\"v1: len = {}, capacity = {}\""
msgstr "\"v1: len = {}, capacity = {}\""

#: src/std-types/vec.md
msgid "\"v2: len = {}, capacity = {}\""
msgstr "\"v2: len = {}, capacity = {}\""

#: src/std-types/vec.md
msgid "// Canonical macro to initialize a vector with elements.\n"
msgstr ""

#: src/std-types/vec.md
msgid "// Retain only the even elements.\n"
msgstr ""

#: src/std-types/vec.md
msgid "\"{v3:?}\""
msgstr "\"{v3:?}\""

#: src/std-types/vec.md
msgid "// Remove consecutive duplicates.\n"
msgstr ""

#: src/std-types/vec.md
msgid ""
"`Vec` implements [`Deref<Target = [T]>`](https://doc.rust-lang.org/std/vec/"
"struct.Vec.html#deref-methods-%5BT%5D), which means that you can call slice "
"methods on a `Vec`."
msgstr ""

#: src/std-types/vec.md
msgid ""
"`Vec` is a type of collection, along with `String` and `HashMap`. The data "
"it contains is stored on the heap. This means the amount of data doesn't "
"need to be known at compile time. It can grow or shrink at runtime."
msgstr ""

#: src/std-types/vec.md
msgid ""
"Notice how `Vec<T>` is a generic type too, but you don't have to specify `T` "
"explicitly. As always with Rust type inference, the `T` was established "
"during the first `push` call."
msgstr ""

#: src/std-types/vec.md
msgid ""
"`vec![...]` is a canonical macro to use instead of `Vec::new()` and it "
"supports adding initial elements to the vector."
msgstr ""

#: src/std-types/vec.md
msgid ""
"To index the vector you use `[` `]`, but they will panic if out of bounds. "
"Alternatively, using `get` will return an `Option`. The `pop` function will "
"remove the last element."
msgstr ""

#: src/std-types/hashmap.md
msgid "Standard hash map with protection against HashDoS attacks:"
msgstr ""

#: src/std-types/hashmap.md
msgid "\"Adventures of Huckleberry Finn\""
msgstr "\"Huckleberry Finn\""

#: src/std-types/hashmap.md
msgid "\"Grimms' Fairy Tales\""
msgstr "\"Grimms eventyr\""

#: src/std-types/hashmap.md
msgid "\"Pride and Prejudice\""
msgstr "\"Stolthed og fordom\""

#: src/std-types/hashmap.md
msgid "\"Les Mis√©rables\""
msgstr "\"De Elendige\""

#: src/std-types/hashmap.md
msgid "\"We know about {} books, but not Les Mis√©rables.\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"Alice's Adventure in Wonderland\""
msgstr "\"Alice i Eventyrland\""

#: src/std-types/hashmap.md
msgid "\"{book}: {count} pages\""
msgstr "\"{book}: {count} sider\""

#: src/std-types/hashmap.md
msgid "\"{book} is unknown.\""
msgstr "\"{book} er ukendt.\""

#: src/std-types/hashmap.md
msgid "// Use the .entry() method to insert a value if nothing is found.\n"
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"`HashMap` is not defined in the prelude and needs to be brought into scope."
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"Try the following lines of code. The first line will see if a book is in the "
"hashmap and if not return an alternative value. The second line will insert "
"the alternative value in the hashmap if the book is not found."
msgstr ""

#: src/std-types/hashmap.md
msgid "\"Harry Potter and the Sorcerer's Stone\""
msgstr ""

#: src/std-types/hashmap.md
msgid "\"The Hunger Games\""
msgstr "\"D√∏dsspillet\""

#: src/std-types/hashmap.md
msgid "Unlike `vec!`, there is unfortunately no standard `hashmap!` macro."
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"Although, since Rust 1.56, HashMap implements [`From<[(K, V); N]>`](https://"
"doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#impl-"
"From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V,+RandomState%3E), which allows "
"us to easily initialize a hash map from a literal array:"
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"Alternatively HashMap can be built from any `Iterator` that yields key-value "
"tuples."
msgstr ""

#: src/std-types/hashmap.md
msgid ""
"This type has several \"method-specific\" return types, such as "
"`std::collections::hash_map::Keys`. These types often appear in searches of "
"the Rust docs. Show students the docs for this type, and the helpful link "
"back to the `keys` method."
msgstr ""

#: src/std-types/exercise.md
msgid ""
"In this exercise you will take a very simple data structure and make it "
"generic. It uses a [`std::collections::HashMap`](https://doc.rust-lang.org/"
"stable/std/collections/struct.HashMap.html) to keep track of what values "
"have been seen and how many times each one has appeared."
msgstr ""

#: src/std-types/exercise.md
msgid ""
"The initial version of `Counter` is hardcoded to only work for `u32` values. "
"Make the struct and its methods generic over the type of value being "
"tracked, that way `Counter` can track any type of value."
msgstr ""

#: src/std-types/exercise.md
msgid ""
"If you finish early, try using the [`entry`](https://doc.rust-lang.org/"
"stable/std/collections/struct.HashMap.html#method.entry) method to halve the "
"number of hash lookups required to implement the `count` method."
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid ""
"/// Counter counts the number of times each value of type T has been seen.\n"
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
#, fuzzy
msgid "/// Create a new Counter.\n"
msgstr "/// Break error.\n"

#: src/std-types/exercise.md src/std-types/solution.md
msgid "/// Count an occurrence of the given value.\n"
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "/// Return the number of times the given value has been seen.\n"
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "\"saw {} values equal to {}\""
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "\"apple\""
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "\"orange\""
msgstr ""

#: src/std-types/exercise.md src/std-types/solution.md
msgid "\"got {} apples\""
msgstr ""

#: src/std-traits.md
#, fuzzy
msgid "From and Into"
msgstr "`From` og `Into`"

#: src/std-traits.md
#, fuzzy
msgid "Read and Write"
msgstr "`Read` og `Write`"

#: src/std-traits.md
msgid "Default, struct update syntax"
msgstr ""

#: src/std-traits.md
msgid ""
"As with the standard library types, spend time reviewing the documentation "
"for each trait."
msgstr ""

#: src/std-traits.md
msgid "This section is long. Take a break midway through."
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"These traits support comparisons between values. All traits can be derived "
"for types containing fields that implement these traits."
msgstr ""

#: src/std-traits/comparisons.md
msgid "`PartialEq` and `Eq`"
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"`PartialEq` is a partial equivalence relation, with required method `eq` and "
"provided method `ne`. The `==` and `!=` operators will call these methods."
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"`Eq` is a full equivalence relation (reflexive, symmetric, and transitive) "
"and implies `PartialEq`. Functions that require full equivalence will use "
"`Eq` as a trait bound."
msgstr ""

#: src/std-traits/comparisons.md
#, fuzzy
msgid "`PartialOrd` and `Ord`"
msgstr "`Read` og `Write`"

#: src/std-traits/comparisons.md
msgid ""
"`PartialOrd` defines a partial ordering, with a `partial_cmp` method. It is "
"used to implement the `<`, `<=`, `>=`, and `>` operators."
msgstr ""

#: src/std-traits/comparisons.md
msgid "`Ord` is a total ordering, with `cmp` returning `Ordering`."
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"`PartialEq` can be implemented between different types, but `Eq` cannot, "
"because it is reflexive:"
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"In practice, it's common to derive these traits, but uncommon to implement "
"them."
msgstr ""

#: src/std-traits/comparisons.md
msgid ""
"When comparing references in Rust, it will compare the value of the things "
"pointed to, it will NOT compare the references themselves. That means that "
"references to two different things can compare as equal if the values "
"pointed to are the same:"
msgstr ""

#: src/std-traits/operators.md
msgid ""
"Operator overloading is implemented via traits in [`std::ops`](https://"
"doc.rust-lang.org/std/ops/index.html):"
msgstr ""

#: src/std-traits/operators.md
#, fuzzy
msgid "\"{p1:?} + {p2:?} = {:?}\""
msgstr "\"{:?} + {:?} = {:?}\""

#: src/std-traits/operators.md src/memory-management/drop.md
msgid "Discussion points:"
msgstr ""

#: src/std-traits/operators.md
msgid ""
"You could implement `Add` for `&Point`. In which situations is that useful?"
msgstr ""

#: src/std-traits/operators.md
msgid ""
"Answer: `Add:add` consumes `self`. If type `T` for which you are overloading "
"the operator is not `Copy`, you should consider overloading the operator for "
"`&T` as well. This avoids unnecessary cloning on the call site."
msgstr ""

#: src/std-traits/operators.md
msgid ""
"Why is `Output` an associated type? Could it be made a type parameter of the "
"method?"
msgstr ""

#: src/std-traits/operators.md
msgid ""
"Short answer: Function type parameters are controlled by the caller, but "
"associated types (like `Output`) are controlled by the implementer of a "
"trait."
msgstr ""

#: src/std-traits/operators.md
msgid ""
"You could implement `Add` for two different types, e.g. `impl Add<(i32, "
"i32)> for Point` would add a tuple to a `Point`."
msgstr ""

#: src/std-traits/operators.md
msgid ""
"The `Not` trait (`!` operator) is notable because it does not convert the "
"argument to `bool` like the same operator in C-family languages; instead, "
"for integer types it flips each bit of the number, which, arithmetically, is "
"equivalent to subtracting the argument from `-1`: `!5 == -6`."
msgstr ""

#: src/std-traits/from-and-into.md
msgid ""
"Types implement [`From`](https://doc.rust-lang.org/std/convert/"
"trait.From.html) and [`Into`](https://doc.rust-lang.org/std/convert/"
"trait.Into.html) to facilitate type conversions. Unlike `as`, these traits "
"correspond to lossless, infallible conversions."
msgstr ""

#: src/std-traits/from-and-into.md
msgid "\"{s}, {addr}, {one}, {bigger}\""
msgstr "\"{s}, {addr}, {one}, {bigger}\""

#: src/std-traits/from-and-into.md
msgid ""
"[`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html) is "
"automatically implemented when [`From`](https://doc.rust-lang.org/std/"
"convert/trait.From.html) is implemented:"
msgstr ""

#: src/std-traits/from-and-into.md
msgid ""
"That's why it is common to only implement `From`, as your type will get "
"`Into` implementation too."
msgstr ""

#: src/std-traits/from-and-into.md
msgid ""
"When declaring a function argument input type like \"anything that can be "
"converted into a `String`\", the rule is opposite, you should use `Into`. "
"Your function will accept types that implement `From` and those that _only_ "
"implement `Into`."
msgstr ""

#: src/std-traits/casting.md
msgid ""
"Rust has no _implicit_ type conversions, but does support explicit casts "
"with `as`. These generally follow C semantics where those are defined."
msgstr ""

#: src/std-traits/casting.md
#, fuzzy
msgid "\"as u16: {}\""
msgstr "\"pengepremie: {}\""

#: src/std-traits/casting.md
#, fuzzy
msgid "\"as i16: {}\""
msgstr "\"pengepremie: {}\""

#: src/std-traits/casting.md
#, fuzzy
msgid "\"as u8: {}\""
msgstr "\"pengepremie: {}\""

#: src/std-traits/casting.md
msgid ""
"The results of `as` are _always_ defined in Rust and consistent across "
"platforms. This might not match your intuition for changing sign or casting "
"to a smaller type -- check the docs, and comment for clarity."
msgstr ""

#: src/std-traits/casting.md
msgid ""
"Casting with `as` is a relatively sharp tool that is easy to use "
"incorrectly, and can be a source of subtle bugs as future maintenance work "
"changes the types that are used or the ranges of values in types. Casts are "
"best used only when the intent is to indicate unconditional truncation (e.g. "
"selecting the bottom 32 bits of a `u64` with `as u32`, regardless of what "
"was in the high bits)."
msgstr ""

#: src/std-traits/casting.md
msgid ""
"For infallible casts (e.g. `u32` to `u64`), prefer using `From` or `Into` "
"over `as` to confirm that the cast is in fact infallible. For fallible "
"casts, `TryFrom` and `TryInto` are available when you want to handle casts "
"that fit differently from those that don't."
msgstr ""

#: src/std-traits/casting.md
msgid "Consider taking a break after this slide."
msgstr ""

#: src/std-traits/casting.md
msgid ""
"`as` is similar to a C++ static cast. Use of `as` in cases where data might "
"be lost is generally discouraged, or at least deserves an explanatory "
"comment."
msgstr ""

#: src/std-traits/casting.md
msgid "This is common in casting integers to `usize` for use as an index."
msgstr ""

#: src/std-traits/read-and-write.md
msgid ""
"Using [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and "
"[`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html), you can "
"abstract over `u8` sources:"
msgstr ""

#: src/std-traits/read-and-write.md
msgid "b\"foo\\nbar\\nbaz\\n\""
msgstr "b\"foo\\nbar\\nbaz\\n\""

#: src/std-traits/read-and-write.md
msgid "\"lines in slice: {}\""
msgstr "\"linjer i slice: {}\""

#: src/std-traits/read-and-write.md
msgid "\"lines in file: {}\""
msgstr "\"linjer i file: {}\""

#: src/std-traits/read-and-write.md
msgid ""
"Similarly, [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) lets "
"you abstract over `u8` sinks:"
msgstr ""

#: src/std-traits/read-and-write.md
msgid "\"\\n\""
msgstr "\"\\n\""

#: src/std-traits/read-and-write.md
#, fuzzy
msgid "\"Logged: {buffer:?}\""
msgstr "\"{buffer}\""

#: src/std-traits/default.md
msgid "The `Default` Trait"
msgstr ""

#: src/std-traits/default.md
msgid ""
"The [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) "
"trait produces a default value for a type."
msgstr ""

#: src/std-traits/default.md
msgid "\"John Smith\""
msgstr "\"John Smith\""

#: src/std-traits/default.md
msgid "\"Y is set!\""
msgstr "\"Y er sat!\""

#: src/std-traits/default.md
msgid ""
"It can be implemented directly or it can be derived via `#[derive(Default)]`."
msgstr ""

#: src/std-traits/default.md
msgid ""
"A derived implementation will produce a value where all fields are set to "
"their default values."
msgstr ""

#: src/std-traits/default.md
msgid "This means all types in the struct must implement `Default` too."
msgstr ""

#: src/std-traits/default.md
msgid ""
"Standard Rust types often implement `Default` with reasonable values (e.g. "
"`0`, `\"\"`, etc)."
msgstr ""

#: src/std-traits/default.md
msgid "The partial struct initialization works nicely with default."
msgstr ""

#: src/std-traits/default.md
msgid ""
"The Rust standard library is aware that types can implement `Default` and "
"provides convenience methods that use it."
msgstr ""

#: src/std-traits/default.md
msgid ""
"The `..` syntax is called [struct update syntax](https://doc.rust-lang.org/"
"book/ch05-01-defining-structs.html#creating-instances-from-other-instances-"
"with-struct-update-syntax)."
msgstr ""

#: src/std-traits/exercise.md
msgid ""
"In this example, you will implement the classic [\"ROT13\" cipher](https://"
"en.wikipedia.org/wiki/ROT13). Copy this code to the playground, and "
"implement the missing bits. Only rotate ASCII alphabetic characters, to "
"ensure the result is still valid UTF-8."
msgstr ""

#: src/std-traits/exercise.md
msgid "// Implement the `Read` trait for `RotDecoder`.\n"
msgstr ""

#: src/std-traits/exercise.md src/std-traits/solution.md
msgid "\"Gb trg gb gur bgure fvqr!\""
msgstr ""

#: src/std-traits/exercise.md src/std-traits/solution.md
msgid "\"To get to the other side!\""
msgstr ""

#: src/std-traits/exercise.md
msgid ""
"What happens if you chain two `RotDecoder` instances together, each rotating "
"by 13 characters?"
msgstr ""

#: src/welcome-day-3.md
msgid "Welcome to Day 3"
msgstr "Velkommen til Dag 3"

#: src/welcome-day-3.md
msgid "Today, we will cover:"
msgstr ""

#: src/welcome-day-3.md
msgid ""
"Memory management, lifetimes, and the borrow checker: how Rust ensures "
"memory safety."
msgstr ""

#: src/welcome-day-3.md
msgid "Smart pointers: standard library pointer types."
msgstr ""

#: src/welcome-day-3.md src/welcome-day-4-afternoon.md
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 20 "
"minutes. It contains:"
msgstr ""

#: src/memory-management.md src/memory-management/clone.md
msgid "Clone"
msgstr ""

#: src/memory-management.md
msgid "Drop"
msgstr ""

#: src/memory-management/review.md
msgid "Programs allocate memory in two ways:"
msgstr ""

#: src/memory-management/review.md
msgid "Stack: Continuous area of memory for local variables."
msgstr ""

#: src/memory-management/review.md
msgid "Values have fixed sizes known at compile time."
msgstr ""

#: src/memory-management/review.md
msgid "Extremely fast: just move a stack pointer."
msgstr ""

#: src/memory-management/review.md
msgid "Easy to manage: follows function calls."
msgstr ""

#: src/memory-management/review.md
msgid "Great memory locality."
msgstr ""

#: src/memory-management/review.md
msgid "Heap: Storage of values outside of function calls."
msgstr ""

#: src/memory-management/review.md
msgid "Values have dynamic sizes determined at runtime."
msgstr ""

#: src/memory-management/review.md
msgid "Slightly slower than the stack: some bookkeeping needed."
msgstr ""

#: src/memory-management/review.md
msgid "No guarantee of memory locality."
msgstr ""

#: src/memory-management/review.md
msgid ""
"Creating a `String` puts fixed-sized metadata on the stack and dynamically "
"sized data, the actual string, on the heap:"
msgstr ""

#: src/memory-management/review.md
msgid ""
"Mention that a `String` is backed by a `Vec`, so it has a capacity and "
"length and can grow if mutable via reallocation on the heap."
msgstr ""

#: src/memory-management/review.md
msgid ""
"If students ask about it, you can mention that the underlying memory is heap "
"allocated using the [System Allocator](https://doc.rust-lang.org/std/alloc/"
"struct.System.html) and custom allocators can be implemented using the "
"[Allocator API](https://doc.rust-lang.org/std/alloc/index.html)"
msgstr ""

#: src/memory-management/review.md
msgid ""
"We can inspect the memory layout with `unsafe` Rust. However, you should "
"point out that this is rightfully unsafe!"
msgstr ""

#: src/memory-management/review.md src/testing/unit-tests.md
msgid "' '"
msgstr "' '"

#: src/memory-management/review.md
msgid "\"world\""
msgstr ""

#: src/memory-management/review.md
msgid ""
"// DON'T DO THIS AT HOME! For educational purposes only.\n"
"    // String provides no guarantees about its layout, so this could lead "
"to\n"
"    // undefined behavior.\n"
msgstr ""

#: src/memory-management/review.md
msgid "\"capacity = {capacity}, ptr = {ptr:#x}, len = {len}\""
msgstr ""

#: src/memory-management/approaches.md
msgid "Traditionally, languages have fallen into two broad categories:"
msgstr ""

#: src/memory-management/approaches.md
msgid "Full control via manual memory management: C, C++, Pascal, ..."
msgstr ""

#: src/memory-management/approaches.md
msgid "Programmer decides when to allocate or free heap memory."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"Programmer must determine whether a pointer still points to valid memory."
msgstr ""

#: src/memory-management/approaches.md
msgid "Studies show, programmers make mistakes."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"Full safety via automatic memory management at runtime: Java, Python, Go, "
"Haskell, ..."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"A runtime system ensures that memory is not freed until it can no longer be "
"referenced."
msgstr ""

#: src/memory-management/approaches.md
msgid "Typically implemented with reference counting or garbage collection."
msgstr ""

#: src/memory-management/approaches.md
msgid "Rust offers a new mix:"
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"Full control _and_ safety via compile time enforcement of correct memory "
"management."
msgstr ""

#: src/memory-management/approaches.md
msgid "It does this with an explicit ownership concept."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"This slide is intended to help students coming from other languages to put "
"Rust in context."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"C must manage heap manually with `malloc` and `free`. Common errors include "
"forgetting to call `free`, calling it multiple times for the same pointer, "
"or dereferencing a pointer after the memory it points to has been freed."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"C++ has tools like smart pointers (`unique_ptr`, `shared_ptr`) that take "
"advantage of language guarantees about calling destructors to ensure memory "
"is freed when a function returns. It is still quite easy to misuse these "
"tools and create similar bugs to C."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"Java, Go, and Python rely on the garbage collector to identify memory that "
"is no longer reachable and discard it. This guarantees that any pointer can "
"be dereferenced, eliminating use-after-free and other classes of bugs. But, "
"GC has a runtime cost and is difficult to tune properly."
msgstr ""

#: src/memory-management/approaches.md
msgid ""
"Rust's ownership and borrowing model can, in many cases, get the performance "
"of C, with alloc and free operations precisely where they are required -- "
"zero-cost. It also provides tools similar to C++'s smart pointers. When "
"required, other options such as reference counting are available, and there "
"are even crates available to support runtime garbage collection (not covered "
"in this class)."
msgstr ""

#: src/memory-management/ownership.md
msgid ""
"All variable bindings have a _scope_ where they are valid and it is an error "
"to use a variable outside its scope:"
msgstr ""

#: src/memory-management/ownership.md
msgid ""
"We say that the variable _owns_ the value. Every Rust value has precisely "
"one owner at all times."
msgstr ""

#: src/memory-management/ownership.md
msgid ""
"At the end of the scope, the variable is _dropped_ and the data is freed. A "
"destructor can run here to free up resources."
msgstr ""

#: src/memory-management/ownership.md
msgid ""
"Students familiar with garbage collection implementations will know that a "
"garbage collector starts with a set of \"roots\" to find all reachable "
"memory. Rust's \"single owner\" principle is a similar idea."
msgstr ""

#: src/memory-management/move.md
msgid "An assignment will transfer _ownership_ between variables:"
msgstr ""

#: src/memory-management/move.md src/concurrency/async-control-flow/select.md
msgid "\"Hello!\""
msgstr ""

#: src/memory-management/move.md
msgid "// dbg!(s1);\n"
msgstr ""

#: src/memory-management/move.md
msgid "The assignment of `s1` to `s2` transfers ownership."
msgstr ""

#: src/memory-management/move.md
msgid "When `s1` goes out of scope, nothing happens: it does not own anything."
msgstr ""

#: src/memory-management/move.md
msgid "When `s2` goes out of scope, the string data is freed."
msgstr ""

#: src/memory-management/move.md
msgid "Before move to `s2`:"
msgstr ""

#: src/memory-management/move.md
msgid "After move to `s2`:"
msgstr ""

#: src/memory-management/move.md
#, fuzzy
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - -.\n"
":                           :     :                                     :\n"
":    s1 \"(inaccessible)\"    :     :                                     :\n"
":   +-----------+-------+   :     :   +----+----+----+----+----+----+   :\n"
":   | ptr       |   o---+---+--+--+-->| H  | e  | l  | l  | o  | !  |   :\n"
":   | len       |     6 |   :  |  :   +----+----+----+----+----+----+   :\n"
":   | capacity  |     6 |   :  |  :                                     :\n"
":   +-----------+-------+   :  |  :                                     :\n"
":                           :  |  `- - - - - - - - - - - - - - - - - - -'\n"
":    s2                     :  |\n"
":   +-----------+-------+   :  |\n"
":   | ptr       |   o---+---+--'\n"
":   | len       |     6 |   :\n"
":   | capacity  |     6 |   :\n"
":   +-----------+-------+   :\n"
":                           :\n"
"`- - - - - - - - - - - - - -'\n"
"```"
msgstr ""
"```bob\n"
" Stak                              Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - -.\n"
":                           :     :                           :\n"
":    s1 \"(utilg√¶ngelig)\"    :     :                           :\n"
":   +-----------+-------+   :     :   +----+----+----+----+   :\n"
":   | ptr       |   o---+---+--+--+-->| R  | u  | s  | t  |   :\n"
":   | len       |     4 |   :  |  :   +----+----+----+----+   :\n"
":   | capacity  |     4 |   :  |  :                           :\n"
":   +-----------+-------+   :  |  :                           :\n"
":                           :  |  `- - - - - - - - - - - - - -'\n"
":    s2                     :  |\n"
":   +-----------+-------+   :  |\n"
":   | ptr       |   o---+---+--'\n"
":   | len       |     4 |   :\n"
":   | capacity  |     4 |   :\n"
":   +-----------+-------+   :\n"
":                           :\n"
"`- - - - - - - - - - - - - -'\n"
"```"

#: src/memory-management/move.md
msgid ""
"When you pass a value to a function, the value is assigned to the function "
"parameter. This transfers ownership:"
msgstr ""

#: src/memory-management/move.md src/memory-management/clone.md
msgid "\"Hello {name}\""
msgstr ""

#: src/memory-management/move.md src/memory-management/clone.md
#: src/android/aidl/types/parcelables.md src/android/interoperability/java.md
msgid "\"Alice\""
msgstr ""

#: src/memory-management/move.md
msgid "// say_hello(name);\n"
msgstr ""

#: src/memory-management/move.md
msgid ""
"Mention that this is the opposite of the defaults in C++, which copies by "
"value unless you use `std::move` (and the move constructor is defined!)."
msgstr ""

#: src/memory-management/move.md
msgid ""
"It is only the ownership that moves. Whether any machine code is generated "
"to manipulate the data itself is a matter of optimization, and such copies "
"are aggressively optimized away."
msgstr ""

#: src/memory-management/move.md
msgid ""
"Simple values (such as integers) can be marked `Copy` (see later slides)."
msgstr ""

#: src/memory-management/move.md
msgid "In Rust, clones are explicit (by using `clone`)."
msgstr ""

#: src/memory-management/move.md
msgid "In the `say_hello` example:"
msgstr ""

#: src/memory-management/move.md
msgid ""
"With the first call to `say_hello`, `main` gives up ownership of `name`. "
"Afterwards, `name` cannot be used anymore within `main`."
msgstr ""

#: src/memory-management/move.md
msgid ""
"The heap memory allocated for `name` will be freed at the end of the "
"`say_hello` function."
msgstr ""

#: src/memory-management/move.md
msgid ""
"`main` can retain ownership if it passes `name` as a reference (`&name`) and "
"if `say_hello` accepts a reference as a parameter."
msgstr ""

#: src/memory-management/move.md
msgid ""
"Alternatively, `main` can pass a clone of `name` in the first call "
"(`name.clone()`)."
msgstr ""

#: src/memory-management/move.md
msgid ""
"Rust makes it harder than C++ to inadvertently create copies by making move "
"semantics the default, and by forcing programmers to make clones explicit."
msgstr ""

#: src/memory-management/move.md
msgid "Defensive Copies in Modern C++"
msgstr "Defensive kopier i moderne C++"

#: src/memory-management/move.md
msgid "Modern C++ solves this differently:"
msgstr ""

#: src/memory-management/move.md
msgid "\"Cpp\""
msgstr "\"Cpp\""

#: src/memory-management/move.md
msgid "// Duplicate the data in s1.\n"
msgstr ""

#: src/memory-management/move.md
msgid ""
"The heap data from `s1` is duplicated and `s2` gets its own independent copy."
msgstr ""

#: src/memory-management/move.md
msgid "When `s1` and `s2` go out of scope, they each free their own memory."
msgstr ""

#: src/memory-management/move.md
msgid "Before copy-assignment:"
msgstr ""

#: src/memory-management/move.md
msgid "After copy-assignment:"
msgstr ""

#: src/memory-management/move.md
msgid ""
"C++ has made a slightly different choice than Rust. Because `=` copies data, "
"the string data has to be cloned. Otherwise we would get a double-free when "
"either string goes out of scope."
msgstr ""

#: src/memory-management/move.md
msgid ""
"C++ also has [`std::move`](https://en.cppreference.com/w/cpp/utility/move), "
"which is used to indicate when a value may be moved from. If the example had "
"been `s2 = std::move(s1)`, no heap allocation would take place. After the "
"move, `s1` would be in a valid but unspecified state. Unlike Rust, the "
"programmer is allowed to keep using `s1`."
msgstr ""

#: src/memory-management/move.md
msgid ""
"Unlike Rust, `=` in C++ can run arbitrary code as determined by the type "
"that is being copied or moved."
msgstr ""

#: src/memory-management/clone.md
msgid ""
"Sometimes you _want_ to make a copy of a value. The `Clone` trait "
"accomplishes this."
msgstr ""

#: src/memory-management/clone.md
msgid ""
"The idea of `Clone` is to make it easy to spot where heap allocations are "
"occurring. Look for `.clone()` and a few others like `vec!` or `Box::new`."
msgstr ""

#: src/memory-management/clone.md
msgid ""
"It's common to \"clone your way out\" of problems with the borrow checker, "
"and return later to try to optimize those clones away."
msgstr ""

#: src/memory-management/clone.md
msgid ""
"`clone` generally performs a deep copy of the value, meaning that if you "
"e.g. clone an array, all of the elements of the array are cloned as well."
msgstr ""

#: src/memory-management/clone.md
msgid ""
"The behavior for `clone` is user-defined, so it can perform custom cloning "
"logic if needed."
msgstr ""

#: src/memory-management/copy-types.md
msgid ""
"While move semantics are the default, certain types are copied by default:"
msgstr ""

#: src/memory-management/copy-types.md
msgid "These types implement the `Copy` trait."
msgstr ""

#: src/memory-management/copy-types.md
msgid "You can opt-in your own types to use copy semantics:"
msgstr ""

#: src/memory-management/copy-types.md
msgid "After the assignment, both `p1` and `p2` own their own data."
msgstr ""

#: src/memory-management/copy-types.md
msgid "We can also use `p1.clone()` to explicitly copy the data."
msgstr ""

#: src/memory-management/copy-types.md
msgid "Copying and cloning are not the same thing:"
msgstr ""

#: src/memory-management/copy-types.md
msgid ""
"Copying refers to bitwise copies of memory regions and does not work on "
"arbitrary objects."
msgstr ""

#: src/memory-management/copy-types.md
msgid ""
"Copying does not allow for custom logic (unlike copy constructors in C++)."
msgstr ""

#: src/memory-management/copy-types.md
msgid ""
"Cloning is a more general operation and also allows for custom behavior by "
"implementing the `Clone` trait."
msgstr ""

#: src/memory-management/copy-types.md
msgid "Copying does not work on types that implement the `Drop` trait."
msgstr ""

#: src/memory-management/copy-types.md
msgid "In the above example, try the following:"
msgstr ""

#: src/memory-management/copy-types.md
msgid ""
"Add a `String` field to `struct Point`. It will not compile because `String` "
"is not a `Copy` type."
msgstr ""

#: src/memory-management/copy-types.md
msgid ""
"Remove `Copy` from the `derive` attribute. The compiler error is now in the "
"`println!` for `p1`."
msgstr ""

#: src/memory-management/copy-types.md
msgid "Show that it works if you clone `p1` instead."
msgstr ""

#: src/memory-management/copy-types.md
msgid ""
"Shared references are `Copy`/`Clone`, mutable references are not. This is "
"because Rust requires that mutable references be exclusive, so while it's "
"valid to make a copy of a shared reference, creating a copy of a mutable "
"reference would violate Rust's borrowing rules."
msgstr ""

#: src/memory-management/drop.md
msgid "The `Drop` Trait"
msgstr ""

#: src/memory-management/drop.md
msgid ""
"Values which implement [`Drop`](https://doc.rust-lang.org/std/ops/"
"trait.Drop.html) can specify code to run when they go out of scope:"
msgstr ""

#: src/memory-management/drop.md
msgid "\"Dropping {}\""
msgstr "\"Dropper {}\""

#: src/memory-management/drop.md src/concurrency/sync-exercises/link-checker.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"a\""
msgstr "\"a\""

#: src/memory-management/drop.md src/android/testing/googletest.md
msgid "\"b\""
msgstr "\"b\""

#: src/memory-management/drop.md
msgid "\"c\""
msgstr "\"c\""

#: src/memory-management/drop.md
msgid "\"d\""
msgstr "\"d\""

#: src/memory-management/drop.md
msgid "\"Exiting innermost block\""
msgstr ""

#: src/memory-management/drop.md
msgid "\"Exiting next block\""
msgstr ""

#: src/memory-management/drop.md
msgid "\"Exiting main\""
msgstr ""

#: src/memory-management/drop.md
msgid "Note that `std::mem::drop` is not the same as `std::ops::Drop::drop`."
msgstr ""

#: src/memory-management/drop.md
msgid "Values are automatically dropped when they go out of scope."
msgstr ""

#: src/memory-management/drop.md
msgid ""
"When a value is dropped, if it implements `std::ops::Drop` then its "
"`Drop::drop` implementation will be called."
msgstr ""

#: src/memory-management/drop.md
msgid ""
"All its fields will then be dropped too, whether or not it implements `Drop`."
msgstr ""

#: src/memory-management/drop.md
msgid ""
"`std::mem::drop` is just an empty function that takes any value. The "
"significance is that it takes ownership of the value, so at the end of its "
"scope it gets dropped. This makes it a convenient way to explicitly drop "
"values earlier than they would otherwise go out of scope."
msgstr ""

#: src/memory-management/drop.md
msgid ""
"This can be useful for objects that do some work on `drop`: releasing locks, "
"closing files, etc."
msgstr ""

#: src/memory-management/drop.md
msgid "Why doesn't `Drop::drop` take `self`?"
msgstr ""

#: src/memory-management/drop.md
msgid ""
"Short-answer: If it did, `std::mem::drop` would be called at the end of the "
"block, resulting in another call to `Drop::drop`, and a stack overflow!"
msgstr ""

#: src/memory-management/drop.md
msgid "Try replacing `drop(a)` with `a.drop()`."
msgstr ""

#: src/memory-management/exercise.md
msgid ""
"In this example, we will implement a complex data type that owns all of its "
"data. We will use the \"builder pattern\" to support building a new value "
"piece-by-piece, using convenience functions."
msgstr ""

#: src/memory-management/exercise.md
msgid "Fill in the missing pieces."
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// A representation of a software package.\n"
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid ""
"/// Return a representation of this package as a dependency, for use in\n"
"    /// building other packages.\n"
msgstr ""

#: src/memory-management/exercise.md
#, fuzzy
msgid "\"1\""
msgstr "\"\""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid ""
"/// A builder for a Package. Use `build()` to create the `Package` itself.\n"
msgstr ""

#: src/memory-management/exercise.md
#, fuzzy
msgid "\"2\""
msgstr "\"\""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// Set the package version.\n"
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// Set the package authors.\n"
msgstr ""

#: src/memory-management/exercise.md
#, fuzzy
msgid "\"3\""
msgstr "\"\""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// Add an additional dependency.\n"
msgstr ""

#: src/memory-management/exercise.md
#, fuzzy
msgid "\"4\""
msgstr "\"\""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "/// Set the language. If not set, language defaults to None.\n"
msgstr ""

#: src/memory-management/exercise.md
#, fuzzy
msgid "\"5\""
msgstr "\"\""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"base64\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"0.13\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"log\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"0.4\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
#, fuzzy
msgid "\"serde\""
msgstr "\"serr_lower\""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"djmitche\""
msgstr ""

#: src/memory-management/exercise.md src/memory-management/solution.md
msgid "\"4.0\""
msgstr ""

#: src/memory-management/solution.md
msgid "\"0.1\""
msgstr ""

#: src/smart-pointers.md
#, fuzzy
msgid "Box<T>"
msgstr "`Box`"

#: src/smart-pointers.md
#, fuzzy
msgid "Rc"
msgstr "`Rc`"

#: src/smart-pointers/box.md
msgid ""
"[`Box`](https://doc.rust-lang.org/std/boxed/struct.Box.html) is an owned "
"pointer to data on the heap:"
msgstr ""

#: src/smart-pointers/box.md
msgid "\"five: {}\""
msgstr "\"five: {}\""

#: src/smart-pointers/box.md
msgid ""
"`Box<T>` implements `Deref<Target = T>`, which means that you can [call "
"methods from `T` directly on a `Box<T>`](https://doc.rust-lang.org/std/ops/"
"trait.Deref.html#more-on-deref-coercion)."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"Recursive data types or data types with dynamic sizes cannot be stored "
"inline without a pointer indirection. `Box` accomplishes that indirection:"
msgstr ""

#: src/smart-pointers/box.md
msgid "/// A non-empty list: first element and the rest of the list.\n"
msgstr ""

#: src/smart-pointers/box.md
msgid "/// An empty list.\n"
msgstr ""

#: src/smart-pointers/box.md
msgid "\"{list:?}\""
msgstr "\"{list:?}\""

#: src/smart-pointers/box.md
#, fuzzy
msgid ""
"```bob\n"
" Stack                           Heap\n"
".- - - - - - - - - - - - - - .     .- - - - - - - - - - - - - - - - - - - - "
"- - - - -.\n"
":                            :     :                                                 :\n"
":    "
"list                    :     :                                                 :\n"
":   +---------+----+----+    :     :    +---------+----+----+    +------+----"
"+----+  :\n"
":   | Element | 1  | o--+----+-----+--->| Element | 2  | o--+--->| Nil  | // "
"| // |  :\n"
":   +---------+----+----+    :     :    +---------+----+----+    +------+----"
"+----+  :\n"
":                            :     :                                                 :\n"
":                            :     :                                                 :\n"
"'- - - - - - - - - - - - - - '     '- - - - - - - - - - - - - - - - - - - - "
"- - - - -'\n"
"```"
msgstr ""
"```bob\n"
" Stak                            Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"- -.\n"
":                         :     :                                               :\n"
":    "
"list                 :     :                                               :\n"
":   +------+----+----+    :     :    +------+----+----+    +------+----+----"
"+   :\n"
":   | Cons | 1  | o--+----+-----+--->| Cons | 2  | o--+--->| Nil  | // | // "
"|   :\n"
":   +------+----+----+    :     :    +------+----+----+    +------+----+----"
"+   :\n"
":                         :     :                                               :\n"
":                         :     :                                               :\n"
"'- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"- -'\n"
"```"

#: src/smart-pointers/box.md
msgid ""
"`Box` is like `std::unique_ptr` in C++, except that it's guaranteed to be "
"not null."
msgstr ""

#: src/smart-pointers/box.md
msgid "A `Box` can be useful when you:"
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"have a type whose size can't be known at compile time, but the Rust compiler "
"wants to know an exact size."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"want to transfer ownership of a large amount of data. To avoid copying large "
"amounts of data on the stack, instead store the data on the heap in a `Box` "
"so only the pointer is moved."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"If `Box` was not used and we attempted to embed a `List` directly into the "
"`List`, the compiler would not be able to compute a fixed size for the "
"struct in memory (the `List` would be of infinite size)."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"`Box` solves this problem as it has the same size as a regular pointer and "
"just points at the next element of the `List` in the heap."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"Remove the `Box` in the List definition and show the compiler error. We get "
"the message \"recursive without indirection\", because for data recursion, "
"we have to use indirection, a `Box` or reference of some kind, instead of "
"storing the value directly."
msgstr ""

#: src/smart-pointers/box.md
msgid ""
"Though `Box` looks like `std::unique_ptr` in C++, it cannot be empty/null. "
"This makes `Box` one of the types that allow the compiler to optimize "
"storage of some enums (the \"niche optimization\")."
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"[`Rc`](https://doc.rust-lang.org/std/rc/struct.Rc.html) is a reference-"
"counted shared pointer. Use this when you need to refer to the same data "
"from multiple places:"
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"Each `Rc` points to the same shared data structure, containing strong and "
"weak pointers and the value:"
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"See [`Arc`](../concurrency/shared-state/arc.md) and [`Mutex`](https://"
"doc.rust-lang.org/std/sync/struct.Mutex.html) if you are in a multi-threaded "
"context."
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"You can _downgrade_ a shared pointer into a [`Weak`](https://doc.rust-"
"lang.org/std/rc/struct.Weak.html) pointer to create cycles that will get "
"dropped."
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"`Rc`'s count ensures that its contained value is valid for as long as there "
"are references."
msgstr ""

#: src/smart-pointers/rc.md
msgid "`Rc` in Rust is like `std::shared_ptr` in C++."
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"`Rc::clone` is cheap: it creates a pointer to the same allocation and "
"increases the reference count. Does not make a deep clone and can generally "
"be ignored when looking for performance issues in code."
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"`make_mut` actually clones the inner value if necessary (\"clone-on-write\") "
"and returns a mutable reference."
msgstr ""

#: src/smart-pointers/rc.md
msgid "Use `Rc::strong_count` to check the reference count."
msgstr ""

#: src/smart-pointers/rc.md
msgid ""
"`Rc::downgrade` gives you a _weakly reference-counted_ object to create "
"cycles that will be dropped properly (likely in combination with `RefCell`)."
msgstr ""

#: src/smart-pointers/trait-objects.md
msgid ""
"We previously saw how trait objects can be used with references, e.g `&dyn "
"Pet`. However, we can also use trait objects with smart pointers like `Box` "
"to create an owned trait object: `Box<dyn Pet>`."
msgstr ""

#: src/smart-pointers/trait-objects.md
msgid "Memory layout after allocating `pets`:"
msgstr ""

#: src/smart-pointers/trait-objects.md
#, fuzzy
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - "
"- - - -.\n"
":                               :     :                                             :\n"
":    \"pets: Vec<Box<dyn Pet>>\"  :     :   \"data: Cat\"         +----+----"
"+----+----+ :\n"
":   +-----------+-------+       :     :  +-------+-------+    | F  | i  | d  "
"| o  | :\n"
":   | ptr       |   o---+-------+--.  :  | lives |     9 |    +----+----+----"
"+----+ :\n"
":   | len       |     2 |       :  |  :  +-------+-------+      "
"^                   :\n"
":   | capacity  |     2 |       :  |  :       ^                 "
"|                   :\n"
":   +-----------+-------+       :  |  :       |                 "
"'-------.           :\n"
":                               :  |  :       |               data:"
"\"Dog\"|           :\n"
":                               :  |  :       |              +-------"
"+--|-------+   :\n"
"`- - - - - - - - - - - - - - - -'  |  :   +---|-+-----+      | name  |  o, "
"4, 4 |   :\n"
"                                   `--+-->| o o | o o-|----->| age   "
"|        5 |   :\n"
"                                      :   +-|---+-|---+      +-------"
"+----------+   :\n"
"                                      :     |     "
"|                                 :\n"
"                                      `- - -| - - |- - - - - - - - - - - - - "
"- - - -'\n"
"                                            |     |\n"
"                                            |     |                      "
"\"Program text\"\n"
"                                      .- - -| - - |- - - - - - - - - - - - - "
"- - - -.\n"
"                                      :     |     |       "
"vtable                    :\n"
"                                      :     |     |      "
"+----------------------+   :\n"
"                                      :     |     `----->| \"<Dog as "
"Pet>::talk\" |   :\n"
"                                      :     |            "
"+----------------------+   :\n"
"                                      :     |             "
"vtable                    :\n"
"                                      :     |            "
"+----------------------+   :\n"
"                                      :     '----------->| \"<Cat as "
"Pet>::talk\" |   :\n"
"                                      :                  "
"+----------------------+   :\n"
"                                      :                                             :\n"
"                                      '- - - - - - - - - - - - - - - - - - - "
"- - - -'\n"
"```"
msgstr ""
"```bob\n"
" Stak                              Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - "
"- -.\n"
":                           :     :                                             :\n"
":    "
"pets                   :     :                                             :\n"
":   +-----------+-------+   :     :   +-----+-----"
"+                             :\n"
":   | ptr       |   o---+---+-----+-->| o o | o o "
"|                             :\n"
":   | len       |     2 |   :     :   +-|-|-+-|-|-"
"+                             :\n"
":   | capacity  |     2 |   :     :     | |   | |   +---------------"
"+           :\n"
":   +-----------+-------+   :     :     | |   | '-->| name: \"Fido\"  "
"|           :\n"
":                           :     :     | |   |     +---------------"
"+           :\n"
"`- - - - - - - - - - - - - -'     :     | |   "
"|                                 :\n"
"                                  :     | |   |     +----------------------"
"+    :\n"
"                                  :     | |   '---->| \"<Dog as Pet>::name\" "
"|    :\n"
"                                  :     | |         +----------------------"
"+    :\n"
"                                  :     | "
"|                                     :\n"
"                                  :     | |   +-"
"+                               :\n"
"                                  :     | '-->|"
"\\|                               :\n"
"                                  :     |     +-"
"+                               :\n"
"                                  :     "
"|                                       :\n"
"                                  :     |     +----------------------"
"+          :\n"
"                                  :     '---->| \"<Cat as Pet>::name\" "
"|          :\n"
"                                  :           +----------------------"
"+          :\n"
"                                  :                                             :\n"
"                                  '- - - - - - - - - - - - - - - - - - - - - "
"- -'\n"
"\n"
"```"

#: src/smart-pointers/trait-objects.md
msgid ""
"Types that implement a given trait may be of different sizes. This makes it "
"impossible to have things like `Vec<dyn Pet>` in the example above."
msgstr ""

#: src/smart-pointers/trait-objects.md
msgid ""
"`dyn Pet` is a way to tell the compiler about a dynamically sized type that "
"implements `Pet`."
msgstr ""

#: src/smart-pointers/trait-objects.md
msgid ""
"In the example, `pets` is allocated on the stack and the vector data is on "
"the heap. The two vector elements are _fat pointers_:"
msgstr ""

#: src/smart-pointers/trait-objects.md
msgid ""
"A fat pointer is a double-width pointer. It has two components: a pointer to "
"the actual object and a pointer to the [virtual method table](https://"
"en.wikipedia.org/wiki/Virtual_method_table) (vtable) for the `Pet` "
"implementation of that particular object."
msgstr ""

#: src/smart-pointers/trait-objects.md
msgid ""
"The data for the `Dog` named Fido is the `name` and `age` fields. The `Cat` "
"has a `lives` field."
msgstr ""

#: src/smart-pointers/trait-objects.md
msgid "Compare these outputs in the above example:"
msgstr ""

#: src/smart-pointers/trait-objects.md
msgid "\"{} {}\""
msgstr "\"{} {}\""

#: src/smart-pointers/trait-objects.md src/modules/exercise.md
#: src/modules/solution.md src/android/build-rules/library.md
#: src/android/interoperability/cpp/rust-bridge.md
#: src/concurrency/async-pitfalls/cancellation.md
msgid "\"{}\""
msgstr "\"{}\""

#: src/smart-pointers/exercise.md
msgid ""
"A binary tree is a tree-type data structure where every node has two "
"children (left and right). We will create a tree where each node stores a "
"value. For a given node N, all nodes in a N's left subtree contain smaller "
"values, and all nodes in N's right subtree will contain larger values. A "
"given value should only be stored in the tree once, i.e. no duplicate nodes."
msgstr ""

#: src/smart-pointers/exercise.md
msgid "Implement the following types, so that the given tests pass."
msgstr ""

#: src/smart-pointers/exercise.md src/smart-pointers/solution.md
msgid "/// A node in the binary tree.\n"
msgstr ""

#: src/smart-pointers/exercise.md src/smart-pointers/solution.md
msgid "/// A possibly-empty subtree.\n"
msgstr ""

#: src/smart-pointers/exercise.md src/smart-pointers/solution.md
msgid ""
"/// A container storing a set of values, using a binary tree.\n"
"///\n"
"/// If the same value is added multiple times, it is only stored once.\n"
msgstr ""

#: src/smart-pointers/exercise.md
msgid "// Implement `new`, `insert`, `len`, and `has` for `Subtree`.\n"
msgstr ""

#: src/smart-pointers/exercise.md src/smart-pointers/solution.md
msgid "// not a unique item\n"
msgstr ""

#: src/welcome-day-3-afternoon.md
msgid ""
"Including 10 minute breaks, this session should take about 1 hour and 55 "
"minutes. It contains:"
msgstr ""

#: src/borrowing/shared.md
msgid ""
"As we saw before, instead of transferring ownership when calling a function, "
"you can let a function _borrow_ the value:"
msgstr ""

#: src/borrowing/shared.md
msgid "The `add` function _borrows_ two points and returns a new point."
msgstr ""

#: src/borrowing/shared.md
msgid "The caller retains ownership of the inputs."
msgstr ""

#: src/borrowing/shared.md
msgid ""
"This slide is a review of the material on references from day 1, expanding "
"slightly to include function arguments and return values."
msgstr ""

#: src/borrowing/shared.md
msgid "Notes on stack returns and inlining:"
msgstr ""

#: src/borrowing/shared.md
msgid ""
"Demonstrate that the return from `add` is cheap because the compiler can "
"eliminate the copy operation, by inlining the call to add into main. Change "
"the above code to print stack addresses and run it on the [Playground]"
"(https://play.rust-lang.org/?"
"version=stable&mode=release&edition=2024&gist=0cb13be1c05d7e3446686ad9947c4671) "
"or look at the assembly in [Godbolt](https://rust.godbolt.org/). In the "
"\"DEBUG\" optimization level, the addresses should change, while they stay "
"the same when changing to the \"RELEASE\" setting:"
msgstr ""

#: src/borrowing/shared.md
msgid ""
"The Rust compiler can do automatic inlining, that can be disabled on a "
"function level with `#[inline(never)]`."
msgstr ""

#: src/borrowing/shared.md
msgid ""
"Once disabled, the printed address will change on all optimization levels. "
"Looking at Godbolt or Playground, one can see that in this case, the return "
"of the value depends on the ABI, e.g. on amd64 the two i32 that is making up "
"the point will be returned in 2 registers (eax and edx)."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"Rust's _borrow checker_ puts constraints on the ways you can borrow values. "
"We've already seen that a reference cannot _outlive_ the value it borrows:"
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"There's also a second main rule that the borrow checker enforces: The "
"_aliasing_ rule. For a given value, at any time:"
msgstr ""

#: src/borrowing/borrowck.md
msgid "You can have one or more shared references to the value, _or_"
msgstr ""

#: src/borrowing/borrowck.md
msgid "You can have exactly one exclusive reference to the value."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"The \"outlives\" rule was demonstrated previously when we first looked at "
"references. We review it here to show students that the borrow checking is "
"following a few different rules to validate borrowing."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"The above code does not compile because `a` is borrowed as mutable (through "
"`c`) and as immutable (through `b`) at the same time."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"Note that the requirement is that conflicting references not _exist_ at the "
"same point. It does not matter where the reference is dereferenced. Try "
"commenting out `*c = 20` and show that the compiler error still occurs even "
"if we never use `c`."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"Note that the intermediate reference `c` isn't necessary to trigger a borrow "
"conflict. Replace `c` with a direct mutation of `a` and demonstrate that "
"this produces a similar error. This is because direct mutation of a value "
"effectively creates a temporary mutable reference."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"Move the `dbg!` statement for `b` before the scope that introduces `c` to "
"make the code compile."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"After that change, the compiler realizes that `b` is only ever used before "
"the new mutable borrow of `a` through `c`. This is a feature of the borrow "
"checker called \"non-lexical lifetimes\"."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"Technically, multiple mutable references to a piece of data can exist at the "
"same time via re-borrowing. This is what allows you to pass a mutable "
"reference into a function without invalidating the original reference. [This "
"playground example](https://play.rust-lang.org/?"
"version=stable&mode=debug&edition=2024&gist=8f5896878611566845fe3b0f4dc5af68) "
"demonstrates that behavior."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"Rust uses the exclusive reference constraint to ensure that data races do "
"not occur in multi-threaded code, since only one thread can have mutable "
"access to a piece of data at a time."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"Rust also uses this constraint to optimize code. For example, a value behind "
"a shared reference can be safely cached in a register for the lifetime of "
"that reference."
msgstr ""

#: src/borrowing/borrowck.md
msgid ""
"Fields of a struct can be borrowed independently of each other, but calling "
"a method on a struct will borrow the whole struct, potentially invalidating "
"references to individual fields. See [this playground snippet](https://"
"play.rust-lang.org/?"
"version=stable&mode=debug&edition=2024&gist=f293a31f2d4d0d31770486247c2e8437) "
"for an example of this."
msgstr ""

#: src/borrowing/examples.md
msgid ""
"As a concrete example of how these borrowing rules prevent memory errors, "
"consider the case of modifying a collection while there are references to "
"its elements:"
msgstr ""

#: src/borrowing/examples.md
msgid "Similarly, consider the case of iterator invalidation:"
msgstr ""

#: src/borrowing/examples.md
msgid ""
"In both of these cases, modifying the collection by pushing new elements "
"into it can potentially invalidate existing references to the collection's "
"elements if the collection has to reallocate."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"In some situations, it's necessary to modify data behind a shared (read-"
"only) reference. For example, a shared data structure might have an internal "
"cache, and wish to update that cache from read-only methods."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"The \"interior mutability\" pattern allows exclusive (mutable) access behind "
"a shared reference. The standard library provides several ways to do this, "
"all while still ensuring safety, typically by performing a runtime check."
msgstr ""

#: src/borrowing/interior-mutability.md
msgid ""
"The main thing to take away from this slide is that Rust provides _safe_ "
"ways to modify data behind a shared reference. There are a variety of ways "
"to ensure that safety, and the next sub-slides present a few of them."
msgstr ""

#: src/borrowing/interior-mutability/cell.md
msgid ""
"`Cell` wraps a value and allows getting or setting the value using only a "
"shared reference to the `Cell`. However, it does not allow any references to "
"the inner value. Since there are no references, borrowing rules cannot be "
"broken."
msgstr ""

#: src/borrowing/interior-mutability/cell.md
#: src/borrowing/interior-mutability/refcell.md
msgid "// Note that `cell` is NOT declared as mutable.\n"
msgstr ""

#: src/borrowing/interior-mutability/cell.md
msgid ""
"`Cell` is a simple means to ensure safety: it has a `set` method that takes "
"`&self`. This needs no runtime check, but requires moving values, which can "
"have its own cost."
msgstr ""

#: src/borrowing/interior-mutability/refcell.md
msgid ""
"`RefCell` allows accessing and mutating a wrapped value by providing "
"alternative types `Ref` and `RefMut` that emulate `&T`/`&mut T` without "
"actually being Rust references."
msgstr ""

#: src/borrowing/interior-mutability/refcell.md
msgid ""
"These types perform dynamic checks using a counter in the `RefCell` to "
"prevent existence of a `RefMut` alongside another `Ref`/`RefMut`."
msgstr ""

#: src/borrowing/interior-mutability/refcell.md
msgid ""
"By implementing `Deref` (and `DerefMut` for `RefMut`), these types allow "
"calling methods on the inner value without allowing references to escape."
msgstr ""

#: src/borrowing/interior-mutability/refcell.md
msgid ""
"// This triggers an error at runtime.\n"
"        // let other = cell.borrow();\n"
"        // println!(\"{}\", other);\n"
msgstr ""

#: src/borrowing/interior-mutability/refcell.md
#, fuzzy
msgid "\"{cell:?}\""
msgstr "\"{:?}\""

#: src/borrowing/interior-mutability/refcell.md
msgid ""
"`RefCell` enforces Rust's usual borrowing rules (either multiple shared "
"references or a single exclusive reference) with a runtime check. In this "
"case, all borrows are very short and never overlap, so the checks always "
"succeed."
msgstr ""

#: src/borrowing/interior-mutability/refcell.md
msgid ""
"The extra block in the example is to end the borrow created by the call to "
"`borrow_mut` before we print the cell. Trying to print a borrowed `RefCell` "
"just shows the message `\"{borrowed}\"`."
msgstr ""

#: src/borrowing/interior-mutability/refcell.md
msgid ""
"There are also `OnceCell` and `OnceLock`, which allow initialization on "
"first use. Making these useful requires some more knowledge than students "
"have at this time."
msgstr ""

#: src/borrowing/exercise.md
msgid ""
"You're working on implementing a health-monitoring system. As part of that, "
"you need to keep track of users' health statistics."
msgstr ""

#: src/borrowing/exercise.md
msgid ""
"You'll start with a stubbed function in an `impl` block as well as a `User` "
"struct definition. Your goal is to implement the stubbed out method on the "
"`User` `struct` defined in the `impl` block."
msgstr ""

#: src/borrowing/exercise.md
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and fill in the missing "
"method:"
msgstr ""

#: src/borrowing/exercise.md
msgid ""
"\"Update a user's statistics based on measurements from a visit to the "
"doctor\""
msgstr ""

#: src/borrowing/exercise.md src/borrowing/solution.md
#: src/android/build-rules/library.md
#: src/android/aidl/example-service/client.md
msgid "\"Bob\""
msgstr "\"Bob\""

#: src/lifetimes/lifetime-annotations.md
msgid ""
"A reference has a _lifetime_, which must not \"outlive\" the value it refers "
"to. This is verified by the borrow checker."
msgstr ""

#: src/lifetimes/lifetime-annotations.md
msgid ""
"The lifetime can be implicit - this is what we have seen so far. Lifetimes "
"can also be explicit: `&'a Point`, `&'document str`. Lifetimes start with "
"`'` and `'a` is a typical default name. Read `&'a Point` as \"a borrowed "
"`Point` which is valid for at least the lifetime `a`\"."
msgstr ""

#: src/lifetimes/lifetime-annotations.md
msgid ""
"Only ownership, not lifetime annotations, control when values are destroyed "
"and determine the concrete lifetime of a given value. The borrow checker "
"just validates that borrows never extend beyond the concrete lifetime of the "
"value."
msgstr ""

#: src/lifetimes/lifetime-annotations.md
msgid ""
"Explicit lifetime annotations, like types, are required on function "
"signatures (but can be elided in common cases). These provide information "
"for inference at callsites and within the function body, helping the borrow "
"checker to do its job."
msgstr ""

#: src/lifetimes/lifetime-annotations.md
msgid "// What is the lifetime of p3?\n"
msgstr ""

#: src/lifetimes/lifetime-annotations.md
msgid ""
"In this example, the compiler does not know what lifetime to infer for `p3`. "
"Looking inside the function body shows that it can only safely assume that "
"`p3`'s lifetime is the shorter of `p1` and `p2`. But just like types, Rust "
"requires explicit annotations of lifetimes on function arguments and return "
"values."
msgstr ""

#: src/lifetimes/lifetime-annotations.md
msgid "Add `'a` appropriately to `left_most`:"
msgstr ""

#: src/lifetimes/lifetime-annotations.md
msgid ""
"This says there is some lifetime `'a` which both `p1` and `p2` outlive, and "
"which outlives the return value. The borrow checker verifies this within the "
"function body, and uses this information in `main` to determine a lifetime "
"for `p3`."
msgstr ""

#: src/lifetimes/lifetime-annotations.md
msgid "Try dropping `p2` in `main` before printing `p3`."
msgstr ""

#: src/lifetimes/lifetime-elision.md
msgid "Lifetimes in Function Calls"
msgstr "Livstider i funktionskald"

#: src/lifetimes/lifetime-elision.md
msgid ""
"Lifetimes for function arguments and return values must be fully specified, "
"but Rust allows lifetimes to be elided in most cases with [a few simple "
"rules](https://doc.rust-lang.org/nomicon/lifetime-elision.html). This is not "
"inference -- it is just a syntactic shorthand."
msgstr ""

#: src/lifetimes/lifetime-elision.md
msgid "Each argument which does not have a lifetime annotation is given one."
msgstr ""

#: src/lifetimes/lifetime-elision.md
msgid ""
"If there is only one argument lifetime, it is given to all un-annotated "
"return values."
msgstr ""

#: src/lifetimes/lifetime-elision.md
msgid ""
"If there are multiple argument lifetimes, but the first one is for `self`, "
"that lifetime is given to all un-annotated return values."
msgstr ""

#: src/lifetimes/lifetime-elision.md
msgid "In this example, `cab_distance` is trivially elided."
msgstr ""

#: src/lifetimes/lifetime-elision.md
msgid ""
"The `nearest` function provides another example of a function with multiple "
"references in its arguments that requires explicit annotation. In `main`, "
"the return value is allowed to outlive the query."
msgstr ""

#: src/lifetimes/lifetime-elision.md
msgid "Try adjusting the signature to \"lie\" about the lifetimes returned:"
msgstr ""

#: src/lifetimes/lifetime-elision.md
msgid ""
"This won't compile, demonstrating that the annotations are checked for "
"validity by the compiler. Note that this is not the case for raw pointers "
"(unsafe), and this is a common source of errors with unsafe Rust."
msgstr ""

#: src/lifetimes/lifetime-elision.md
msgid ""
"Students may ask when to use lifetimes. Rust borrows _always_ have "
"lifetimes. Most of the time, elision and type inference mean these don't "
"need to be written out. In more complicated cases, lifetime annotations can "
"help resolve ambiguity. Often, especially when prototyping, it's easier to "
"just work with owned data by cloning values where necessary."
msgstr ""

#: src/lifetimes/struct-lifetimes.md
msgid ""
"If a data type stores borrowed data, it must be annotated with a lifetime:"
msgstr ""

#: src/lifetimes/struct-lifetimes.md
msgid "\"The quick brown fox jumps over the lazy dog.\""
msgstr ""

#: src/lifetimes/struct-lifetimes.md
msgid "// drop(doc);\n"
msgstr ""

#: src/lifetimes/struct-lifetimes.md
msgid ""
"In the above example, the annotation on `Highlight` enforces that the data "
"underlying the contained `&str` lives at least as long as any instance of "
"`Highlight` that uses that data. A struct cannot live longer than the data "
"it references."
msgstr ""

#: src/lifetimes/struct-lifetimes.md
msgid ""
"If `doc` is dropped before the end of the lifetime of `noun` or `verb`, the "
"borrow checker throws an error."
msgstr ""

#: src/lifetimes/struct-lifetimes.md
msgid ""
"Types with borrowed data force users to hold on to the original data. This "
"can be useful for creating lightweight views, but it generally makes them "
"somewhat harder to use."
msgstr ""

#: src/lifetimes/struct-lifetimes.md
msgid "When possible, make data structures own their data directly."
msgstr ""

#: src/lifetimes/struct-lifetimes.md
msgid ""
"Some structs with multiple references inside can have more than one lifetime "
"annotation. This can be necessary if there is a need to describe lifetime "
"relationships between the references themselves, in addition to the lifetime "
"of the struct itself. Those are very advanced use cases."
msgstr ""

#: src/lifetimes/exercise.md
msgid ""
"In this exercise, you will build a parser for the [protobuf binary encoding]"
"(https://protobuf.dev/programming-guides/encoding/). Don't worry, it's "
"simpler than it seems! This illustrates a common parsing pattern, passing "
"slices of data. The underlying data itself is never copied."
msgstr ""

#: src/lifetimes/exercise.md
msgid ""
"Fully parsing a protobuf message requires knowing the types of the fields, "
"indexed by their field numbers. That is typically provided in a `proto` "
"file. In this exercise, we'll encode that information into `match` "
"statements in functions that get called for each field."
msgstr ""

#: src/lifetimes/exercise.md
msgid "We'll use the following proto:"
msgstr ""

#: src/lifetimes/exercise.md
#, fuzzy
msgid "Messages"
msgstr "\"Besked {i}\""

#: src/lifetimes/exercise.md
msgid ""
"A proto message is encoded as a series of fields, one after the next. Each "
"is implemented as a \"tag\" followed by the value. The tag contains a field "
"number (e.g., `2` for the `id` field of a `Person` message) and a wire type "
"defining how the payload should be determined from the byte stream. These "
"are combined into a single integer, as decoded in `unpack_tag` below."
msgstr ""

#: src/lifetimes/exercise.md
msgid "Varint"
msgstr ""

#: src/lifetimes/exercise.md
msgid ""
"Integers, including the tag, are represented with a variable-length encoding "
"called VARINT. Luckily, `parse_varint` is defined for you below."
msgstr ""

#: src/lifetimes/exercise.md
#, fuzzy
msgid "Wire Types"
msgstr "Skalartyper"

#: src/lifetimes/exercise.md
msgid ""
"Proto defines several wire types, only two of which are used in this "
"exercise."
msgstr ""

#: src/lifetimes/exercise.md
msgid ""
"The `Varint` wire type contains a single varint, and is used to encode proto "
"values of type `int32` such as `Person.id`."
msgstr ""

#: src/lifetimes/exercise.md
msgid ""
"The `Len` wire type contains a length expressed as a varint, followed by a "
"payload of that number of bytes. This is used to encode proto values of type "
"`string` such as `Person.name`. It is also used to encode proto values "
"containing sub-messages such as `Person.phones`, where the payload contains "
"an encoding of the sub-message."
msgstr ""

#: src/lifetimes/exercise.md
msgid ""
"The given code also defines callbacks to handle `Person` and `PhoneNumber` "
"fields, and to parse a message into a series of calls to those callbacks."
msgstr ""

#: src/lifetimes/exercise.md
msgid ""
"What remains for you is to implement the `parse_field` function and the "
"`ProtoMessage` trait for `Person` and `PhoneNumber`."
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "/// A wire type as seen on the wire.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "/// The Varint WireType indicates the value is a single VARINT.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid ""
"// The I64 WireType indicates that the value is precisely 8 bytes in\n"
"    // little-endian order containing a 64-bit signed integer or double "
"type.\n"
"    //I64,  -- not needed for this exercise\n"
"    /// The Len WireType indicates that the value is a length represented as "
"a\n"
"    /// VARINT followed by exactly that number of bytes.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid ""
"// The I32 WireType indicates that the value is precisely 4 bytes in\n"
"    // little-endian order containing a 32-bit signed integer or float "
"type.\n"
"    //I32,  -- not needed for this exercise\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "/// A field's value, typed based on the wire type.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "//I64(i64),  -- not needed for this exercise\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "//I32(i32),  -- not needed for this exercise\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "/// A field, containing the field number and its value.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "//1 => WireType::I64,  -- not needed for this exercise\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "//5 => WireType::I32,  -- not needed for this exercise\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
#, fuzzy
msgid "\"Invalid wire type: {value}\""
msgstr "\"int: {}\""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"Expected string to be a `Len` field\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
#, fuzzy
msgid "\"Invalid string\""
msgstr "\"En streng\""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"Expected bytes to be a `Len` field\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"Expected `u64` to be a `Varint` field\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid ""
"/// Parse a VARINT, returning the parsed value and the remaining bytes.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"Not enough bytes for varint\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid ""
"// This is the last byte of the VARINT, so convert it to\n"
"            // a u64 and return it.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "// More than 7 bytes is invalid.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"Too many bytes for varint\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "/// Convert a tag into a field number and a WireType.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "/// Parse a field, returning the remaining bytes\n"
msgstr ""

#: src/lifetimes/exercise.md
msgid ""
"\"Based on the wire type, build a Field, consuming as many bytes as "
"necessary.\""
msgstr ""

#: src/lifetimes/exercise.md
msgid "\"Return the field, and any un-consumed bytes.\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid ""
"/// Parse a message in the given data, calling `T::add_field` for each field "
"in\n"
"/// the message.\n"
"///\n"
"/// The entire input is consumed.\n"
msgstr ""

#: src/lifetimes/exercise.md
msgid "// TODO: Implement ProtoMessage for Person and PhoneNumber.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md src/modules/exercise.md
#: src/modules/solution.md src/testing/unit-tests.md src/testing/solution.md
msgid "\"\""
msgstr "\"\""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"beautiful name\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"Evan\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"+1234-777-9090\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"home\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "// Put that all together into a single parse.\n"
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"maxwell\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"+1202-555-1212\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"+1800-867-5308\""
msgstr ""

#: src/lifetimes/exercise.md src/lifetimes/solution.md
msgid "\"mobile\""
msgstr ""

#: src/lifetimes/exercise.md
msgid ""
"In this exercise there are various cases where protobuf parsing might fail, "
"e.g. if you try to parse an `i32` when there are fewer than 4 bytes left in "
"the data buffer. In normal Rust code we'd handle this with the `Result` "
"enum, but for simplicity in this exercise we panic if any errors are "
"encountered. On day 4 we'll cover error handling in Rust in more detail."
msgstr ""

#: src/lifetimes/solution.md
msgid "\"len not a valid `usize`\""
msgstr ""

#: src/lifetimes/solution.md
msgid "\"Unexpected EOF\""
msgstr ""

#: src/lifetimes/solution.md
msgid "// skip everything else\n"
msgstr ""

#: src/welcome-day-4.md
#, fuzzy
msgid "Welcome to Day 4"
msgstr "Velkommen til Dag 1"

#: src/welcome-day-4.md
msgid ""
"Today we will cover topics relating to building large-scale software in Rust:"
msgstr ""

#: src/welcome-day-4.md
msgid "Iterators: a deep dive on the `Iterator` trait."
msgstr ""

#: src/welcome-day-4.md
msgid "Modules and visibility."
msgstr ""

#: src/welcome-day-4.md
msgid "Testing."
msgstr ""

#: src/welcome-day-4.md
msgid "Error handling: panics, `Result`, and the try operator `?`."
msgstr ""

#: src/welcome-day-4.md
msgid ""
"Unsafe Rust: the escape hatch when you can't express yourself in safe Rust."
msgstr ""

#: src/iterators.md
#, fuzzy
msgid "Iterator Trait"
msgstr "Iteratorer"

#: src/iterators.md
#, fuzzy
msgid "Iterator Helper Methods"
msgstr "`Iterator`"

#: src/iterators.md
#, fuzzy
msgid "collect"
msgstr "Select"

#: src/iterators.md
#, fuzzy
msgid "IntoIterator"
msgstr "`IntoIterator`"

#: src/iterators/motivation.md
#, fuzzy
msgid "Motivating Iterators"
msgstr "Iteratorer"

#: src/iterators/motivation.md
msgid ""
"If you want to iterate over the contents of an array, you'll need to define:"
msgstr ""

#: src/iterators/motivation.md
msgid ""
"Some state to keep track of where you are in the iteration process, e.g. an "
"index."
msgstr ""

#: src/iterators/motivation.md
msgid "A condition to determine when iteration is done."
msgstr ""

#: src/iterators/motivation.md
msgid "Logic for updating the state of iteration each loop."
msgstr ""

#: src/iterators/motivation.md
msgid "Logic for fetching each element using that iteration state."
msgstr ""

#: src/iterators/motivation.md
msgid "In a C-style for loop you declare these things directly:"
msgstr ""

#: src/iterators/motivation.md
msgid ""
"In Rust we bundle this state and logic together into an object known as an "
"\"iterator\"."
msgstr ""

#: src/iterators/motivation.md
msgid ""
"This slide provides context for what Rust iterators do under the hood. We "
"use the (hopefully) familiar construct of a C-style `for` loop to show how "
"iteration requires some state and some logic, that way on the next slide we "
"can show how an iterator bundles these together."
msgstr ""

#: src/iterators/motivation.md
msgid ""
"Rust doesn't have a C-style `for` loop, but we can express the same thing "
"with `while`:"
msgstr ""

#: src/iterators/motivation.md
msgid ""
"There's another way to express array iteration using `for` in C and C++: You "
"can use a pointer to the front and a pointer to the end of the array and "
"then compare those pointers to determine when the loop should end."
msgstr ""

#: src/iterators/motivation.md
msgid ""
"If students ask, you can point out that this is how Rust's slice and array "
"iterators work under the hood (though implemented as a Rust iterator)."
msgstr ""

#: src/iterators/iterator.md
msgid ""
"The [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) "
"trait defines how an object can be used to produce a sequence of values. For "
"example, if we wanted to create an iterator that can produce the elements of "
"a slice it might look something like this:"
msgstr ""

#: src/iterators/iterator.md
msgid ""
"The `SliceIter` example implements the same logic as the C-style `for` loop "
"demonstrated on the last slide."
msgstr ""

#: src/iterators/iterator.md
msgid ""
"Point out to the students that iterators are lazy: Creating the iterator "
"just initializes the struct but does not otherwise do any work. No work "
"happens until the `next` method is called."
msgstr ""

#: src/iterators/iterator.md
msgid ""
"Iterators don't need to be finite! It's entirely valid to have an iterator "
"that will produce values forever. For example, a half open range like `0..` "
"will keep going until integer overflow occurs."
msgstr ""

#: src/iterators/iterator.md
msgid ""
"The \"real\" version of `SliceIter` is the [`slice::Iter`](https://doc.rust-"
"lang.org/stable/std/slice/struct.Iter.html) type in the standard library, "
"however the real version uses pointers under the hood instead of an index in "
"order to eliminate bounds checks."
msgstr ""

#: src/iterators/iterator.md
msgid ""
"The `SliceIter` example is a good example of a struct that contains a "
"reference and therefore uses lifetime annotations."
msgstr ""

#: src/iterators/iterator.md
msgid ""
"You can also demonstrate adding a generic parameter to `SliceIter` to allow "
"it to work with any kind of slice (not just `&[i32]`)."
msgstr ""

#: src/iterators/helpers.md
msgid ""
"In addition to the `next` method that defines how an iterator behaves, the "
"`Iterator` trait provides 70+ helper methods that can be used to build "
"customized iterators."
msgstr ""

#: src/iterators/helpers.md
#, fuzzy
msgid "// Create a range from 1 to 10\n"
msgstr "/// Break error.\n"

#: src/iterators/helpers.md
#, fuzzy
msgid "// Keep only even numbers\n"
msgstr "/// Analyze the numbers.\n"

#: src/iterators/helpers.md
#, fuzzy
msgid "// Square each number\n"
msgstr "/// Analyze the numbers.\n"

#: src/iterators/helpers.md
#, fuzzy
msgid "// Sum up all the squared numbers\n"
msgstr "/// Analyze the numbers.\n"

#: src/iterators/helpers.md
msgid "\"The sum of squares of even numbers from 1 to 10 is: {}\""
msgstr ""

#: src/iterators/helpers.md
msgid ""
"The `Iterator` trait implements many common functional programming "
"operations over collections (e.g. `map`, `filter`, `reduce`, etc). This is "
"the trait where you can find all the documentation about them."
msgstr ""

#: src/iterators/helpers.md
msgid ""
"Many of these helper methods take the original iterator and produce a new "
"iterator with different behavior. These are know as \"iterator adapter "
"methods\"."
msgstr ""

#: src/iterators/helpers.md
msgid ""
"Some methods, like `sum` and `count`, consume the iterator and pull all of "
"the elements out of it."
msgstr ""

#: src/iterators/helpers.md
msgid ""
"These methods are designed to be chained together so that it's easy to build "
"a custom iterator that does exactly what you need."
msgstr ""

#: src/iterators/helpers.md
msgid ""
"Rust's iterators are extremely efficient and highly optimizable. Even "
"complex iterators made by combining many adapter methods will still result "
"in code as efficient as equivalent imperative implementations."
msgstr ""

#: src/iterators/collect.md
msgid ""
"The [`collect`](https://doc.rust-lang.org/std/iter/"
"trait.Iterator.html#method.collect) method lets you build a collection from "
"an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html)."
msgstr ""

#: src/iterators/collect.md
msgid "\"prime_squares: {prime_squares:?}\""
msgstr ""

#: src/iterators/collect.md
msgid ""
"Any iterator can be collected in to a `Vec`, `VecDeque`, or `HashSet`. "
"Iterators that produce key-value pairs (i.e. a two-element tuple) can also "
"be collected into `HashMap` and `BTreeMap`."
msgstr ""

#: src/iterators/collect.md
msgid ""
"Show the students the definition for `collect` in the standard library docs. "
"There are two ways to specify the generic type `B` for this method:"
msgstr ""

#: src/iterators/collect.md
msgid ""
"With the \"turbofish\": `some_iterator.collect::<COLLECTION_TYPE>()`, as "
"shown. The `_` shorthand used here lets Rust infer the type of the `Vec` "
"elements."
msgstr ""

#: src/iterators/collect.md
msgid ""
"With type inference: `let prime_squares: Vec<_> = some_iterator.collect()`. "
"Rewrite the example to use this form."
msgstr ""

#: src/iterators/collect.md
msgid ""
"If students are curious about how this works, you can bring up the "
"[`FromIterator`](https://doc.rust-lang.org/std/iter/trait.FromIterator.html) "
"trait, which defines how each type of collection gets built from an iterator."
msgstr ""

#: src/iterators/collect.md
msgid ""
"In addition to the basic implementations of `FromIterator` for `Vec`, "
"`HashMap`, etc., there are also more specialized implementations which let "
"you do cool things like convert an `Iterator<Item = Result<V, E>>` into a "
"`Result<Vec<V>, E>`."
msgstr ""

#: src/iterators/collect.md
msgid ""
"The reason type annotations are often needed with `collect` is because it's "
"generic over its return type. This makes it harder for the compiler to infer "
"the correct type in a lot of cases."
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"The `Iterator` trait tells you how to _iterate_ once you have created an "
"iterator. The related trait [`IntoIterator`](https://doc.rust-lang.org/std/"
"iter/trait.IntoIterator.html) defines how to create an iterator for a type. "
"It is used automatically by the `for` loop."
msgstr ""

#: src/iterators/intoiterator.md
msgid "\"point = {x}, {y}\""
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"`IntoIterator` is the trait that makes for loops work. It is implemented by "
"collection types such as `Vec<T>` and references to them such as `&Vec<T>` "
"and `&[T]`. Ranges also implement it. This is why you can iterate over a "
"vector with `for i in some_vec { .. }` but `some_vec.next()` doesn't exist."
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"Click through to the docs for `IntoIterator`. Every implementation of "
"`IntoIterator` must declare two types:"
msgstr ""

#: src/iterators/intoiterator.md
msgid "`Item`: the type to iterate over, such as `i8`,"
msgstr ""

#: src/iterators/intoiterator.md
msgid "`IntoIter`: the `Iterator` type returned by the `into_iter` method."
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"Note that `IntoIter` and `Item` are linked: the iterator must have the same "
"`Item` type, which means that it returns `Option<Item>`"
msgstr ""

#: src/iterators/intoiterator.md
msgid "The example iterates over all combinations of x and y coordinates."
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"Try iterating over the grid twice in `main`. Why does this fail? Note that "
"`IntoIterator::into_iter` takes ownership of `self`."
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"Fix this issue by implementing `IntoIterator` for `&Grid` and creating a "
"`GridRefIter` that iterates by reference. A version with both `GridIter` and "
"`GridRefIter` is available [in this playground](https://play.rust-lang.org/?"
"version=stable&mode=debug&edition=2024&gist=947e371c7295af758504f01f149023a1)."
msgstr ""

#: src/iterators/intoiterator.md
msgid ""
"The same problem can occur for standard library types: `for e in "
"some_vector` will take ownership of `some_vector` and iterate over owned "
"elements from that vector. Use `for e in &some_vector` instead, to iterate "
"over references to elements of `some_vector`."
msgstr ""

#: src/iterators/exercise.md
msgid ""
"In this exercise, you will need to find and use some of the provided methods "
"in the [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) "
"trait to implement a complex calculation."
msgstr ""

#: src/iterators/exercise.md
msgid ""
"Copy the following code to <https://play.rust-lang.org/> and make the tests "
"pass. Use an iterator expression and `collect` the result to construct the "
"return value."
msgstr ""

#: src/iterators/exercise.md src/iterators/solution.md
msgid ""
"/// Calculate the differences between elements of `values` offset by "
"`offset`,\n"
"/// wrapping around from the end of `values` to the beginning.\n"
"///\n"
"/// Element `n` of the result is `values[(n+offset)%len] - values[n]`.\n"
msgstr ""

#: src/modules.md src/modules/paths.md
msgid "use, super, self"
msgstr ""

#: src/modules/modules.md
msgid "We have seen how `impl` blocks let us namespace functions to a type."
msgstr ""

#: src/modules/modules.md
msgid "Similarly, `mod` lets us namespace types and functions:"
msgstr ""

#: src/modules/modules.md
msgid "\"In the foo module\""
msgstr ""

#: src/modules/modules.md
msgid "\"In the bar module\""
msgstr ""

#: src/modules/modules.md
msgid ""
"Packages provide functionality and include a `Cargo.toml` file that "
"describes how to build a bundle of 1+ crates."
msgstr ""

#: src/modules/modules.md
msgid ""
"Crates are a tree of modules, where a binary crate creates an executable and "
"a library crate compiles to a library."
msgstr ""

#: src/modules/modules.md
msgid "Modules define organization, scope, and are the focus of this section."
msgstr ""

#: src/modules/filesystem.md
msgid ""
"Omitting the module content will tell Rust to look for it in another file:"
msgstr ""

#: src/modules/filesystem.md
msgid ""
"This tells Rust that the `garden` module content is found at `src/"
"garden.rs`. Similarly, a `garden::vegetables` module can be found at `src/"
"garden/vegetables.rs`."
msgstr ""

#: src/modules/filesystem.md
msgid "The `crate` root is in:"
msgstr ""

#: src/modules/filesystem.md
msgid "`src/lib.rs` (for a library crate)"
msgstr ""

#: src/modules/filesystem.md
msgid "`src/main.rs` (for a binary crate)"
msgstr ""

#: src/modules/filesystem.md
msgid ""
"Modules defined in files can be documented, too, using \"inner doc "
"comments\". These document the item that contains them -- in this case, a "
"module."
msgstr ""

#: src/modules/filesystem.md
msgid ""
"//! This module implements the garden, including a highly performant "
"germination\n"
"//! implementation.\n"
msgstr ""

#: src/modules/filesystem.md
msgid "// Re-export types from this module.\n"
msgstr ""

#: src/modules/filesystem.md
msgid "/// Sow the given seed packets.\n"
msgstr ""

#: src/modules/filesystem.md
msgid "/// Harvest the produce in the garden that is ready.\n"
msgstr ""

#: src/modules/filesystem.md
msgid ""
"Before Rust 2018, modules needed to be located at `module/mod.rs` instead of "
"`module.rs`, and this is still a working alternative for editions after 2018."
msgstr ""

#: src/modules/filesystem.md
msgid ""
"The main reason to introduce `filename.rs` as alternative to `filename/"
"mod.rs` was because many files named `mod.rs` can be hard to distinguish in "
"IDEs."
msgstr ""

#: src/modules/filesystem.md
msgid "Deeper nesting can use folders, even if the main module is a file:"
msgstr ""

#: src/modules/filesystem.md
msgid ""
"The place rust will look for modules can be changed with a compiler "
"directive:"
msgstr ""

#: src/modules/filesystem.md
msgid "\"some/path.rs\""
msgstr ""

#: src/modules/filesystem.md
msgid ""
"This is useful, for example, if you would like to place tests for a module "
"in a file named `some_module_test.rs`, similar to the convention in Go."
msgstr ""

#: src/modules/visibility.md
msgid "Modules are a privacy boundary:"
msgstr ""

#: src/modules/visibility.md
msgid "Module items are private by default (hides implementation details)."
msgstr ""

#: src/modules/visibility.md
msgid "Parent and sibling items are always visible."
msgstr ""

#: src/modules/visibility.md
msgid ""
"In other words, if an item is visible in module `foo`, it's visible in all "
"the descendants of `foo`."
msgstr ""

#: src/modules/visibility.md
msgid "\"outer::private\""
msgstr ""

#: src/modules/visibility.md
msgid "\"outer::public\""
msgstr ""

#: src/modules/visibility.md
msgid "\"outer::inner::private\""
msgstr ""

#: src/modules/visibility.md
msgid "\"outer::inner::public\""
msgstr ""

#: src/modules/visibility.md
msgid "Use the `pub` keyword to make modules public."
msgstr ""

#: src/modules/visibility.md
msgid ""
"Additionally, there are advanced `pub(...)` specifiers to restrict the scope "
"of public visibility."
msgstr ""

#: src/modules/visibility.md
msgid ""
"See the [Rust Reference](https://doc.rust-lang.org/reference/visibility-and-"
"privacy.html#pubin-path-pubcrate-pubsuper-and-pubself)."
msgstr ""

#: src/modules/visibility.md
msgid "Configuring `pub(crate)` visibility is a common pattern."
msgstr ""

#: src/modules/visibility.md
msgid "Less commonly, you can give visibility to a specific path."
msgstr ""

#: src/modules/visibility.md
msgid ""
"In any case, visibility must be granted to an ancestor module (and all of "
"its descendants)."
msgstr ""

#: src/modules/encapsulation.md
msgid "Visibility and Encapsulation"
msgstr ""

#: src/modules/encapsulation.md
msgid ""
"Like with items in a module, struct fields are also private by default. "
"Private fields are likewise visible within the rest of the module (including "
"child modules). This allows us to encapsulate implementation details of "
"struct, controlling what data and functionality is visible externally."
msgstr ""

#: src/modules/encapsulation.md
#, fuzzy
msgid "\"Is {} big? {}\""
msgstr "\"{} {}\""

#: src/modules/encapsulation.md
#, fuzzy
msgid "\"foo.val = {}\""
msgstr "\"bool: {}\""

#: src/modules/encapsulation.md
msgid "// let foo = Foo { val: 42, is_big: true };\n"
msgstr ""

#: src/modules/encapsulation.md
msgid "// println!(\"Is {} big? {}\", foo.val, foo.is_big);\n"
msgstr ""

#: src/modules/encapsulation.md
msgid ""
"This slide demonstrates how privacy in structs is module-based. Students "
"coming from object-oriented languages may be used to types being the "
"encapsulation boundary, so this demonstrates how Rust behaves differently "
"while showing how we can still achieve encapsulation."
msgstr ""

#: src/modules/encapsulation.md
msgid ""
"Note how the `is_big` field is fully controlled by `Foo`, allowing `Foo` to "
"control how it's initialized and enforce any invariants it needs to (e.g. "
"that `is_big` is only `true` if `val > 100`)."
msgstr ""

#: src/modules/encapsulation.md
msgid ""
"Point out how helper functions can be defined in the same module (including "
"child modules) in order to get access to the type's private fields/methods."
msgstr ""

#: src/modules/encapsulation.md
msgid ""
"The first commented out line demonstrates that you cannot initialize a "
"struct with private fields. The second one demonstrates that you also can't "
"directly access private fields."
msgstr ""

#: src/modules/encapsulation.md
msgid ""
"Enums do not support privacy: Variants and data within those variants is "
"always public."
msgstr ""

#: src/modules/encapsulation.md
msgid ""
"If students want more information about privacy (or lack thereof) in enums, "
"you can bring up `#[doc_hidden]` and `#[non_exhaustive]` and show how "
"they're used to limit what can be done with an enum."
msgstr ""

#: src/modules/encapsulation.md
msgid ""
"Module privacy still applies when there are `impl` blocks in other modules "
"[(example in the playground)](https://play.rust-lang.org/?"
"version=stable&mode=debug&edition=2024&gist=3e61f43c88de12bcdf69c1d6df9ab3da)."
msgstr ""

#: src/modules/paths.md
msgid ""
"A module can bring symbols from another module into scope with `use`. You "
"will typically see something like this at the top of each module:"
msgstr ""

#: src/modules/paths.md
msgid "Paths"
msgstr ""

#: src/modules/paths.md
msgid "Paths are resolved as follows:"
msgstr ""

#: src/modules/paths.md
msgid "As a relative path:"
msgstr ""

#: src/modules/paths.md
msgid "`foo` or `self::foo` refers to `foo` in the current module,"
msgstr ""

#: src/modules/paths.md
msgid "`super::foo` refers to `foo` in the parent module."
msgstr ""

#: src/modules/paths.md
msgid "As an absolute path:"
msgstr ""

#: src/modules/paths.md
msgid "`crate::foo` refers to `foo` in the root of the current crate,"
msgstr ""

#: src/modules/paths.md
msgid "`bar::foo` refers to `foo` in the `bar` crate."
msgstr ""

#: src/modules/paths.md
msgid ""
"It is common to \"re-export\" symbols at a shorter path. For example, the "
"top-level `lib.rs` in a crate might have"
msgstr ""

#: src/modules/paths.md
msgid ""
"making `DiskStorage` and `NetworkStorage` available to other crates with a "
"convenient, short path."
msgstr ""

#: src/modules/paths.md
msgid ""
"For the most part, only items that appear in a module need to be `use`'d. "
"However, a trait must be in scope to call any methods on that trait, even if "
"a type implementing that trait is already in scope. For example, to use the "
"`read_to_string` method on a type implementing the `Read` trait, you need to "
"`use std::io::Read`."
msgstr ""

#: src/modules/paths.md
msgid ""
"The `use` statement can have a wildcard: `use std::io::*`. This is "
"discouraged because it is not clear which items are imported, and those "
"might change over time."
msgstr ""

#: src/modules/exercise.md
msgid ""
"In this exercise, you will reorganize a small GUI Library implementation. "
"This library defines a `Widget` trait and a few implementations of that "
"trait, as well as a `main` function."
msgstr ""

#: src/modules/exercise.md
msgid ""
"It is typical to put each type or set of closely-related types into its own "
"module, so each widget type should get its own module."
msgstr ""

#: src/modules/exercise.md
msgid "Cargo Setup"
msgstr ""

#: src/modules/exercise.md
msgid ""
"The Rust playground only supports one file, so you will need to make a Cargo "
"project on your local filesystem:"
msgstr ""

#: src/modules/exercise.md
msgid ""
"Edit the resulting `src/main.rs` to add `mod` statements, and add additional "
"files in the `src` directory."
msgstr ""

#: src/modules/exercise.md
msgid "Source"
msgstr ""

#: src/modules/exercise.md
msgid "Here's the single-module implementation of the GUI library:"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "/// Natural width of `self`.\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "/// Draw the widget into a buffer.\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "/// Draw the widget on standard output.\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"{buffer}\""
msgstr "\"{buffer}\""

#: src/modules/exercise.md
msgid "// Add 4 paddings for borders\n"
msgstr ""

#: src/modules/exercise.md
msgid ""
"// TODO: Change draw_into to return Result<(), std::fmt::Error>. Then use "
"the\n"
"        // ?-operator here instead of .unwrap().\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"+-{:-<inner_width$}-+\""
msgstr "\"+-{:-<inner_width$}-+\""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"| {:^inner_width$} |\""
msgstr "\"| {:^inner_width$} |\""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"+={:=<inner_width$}=+\""
msgstr "\"+={:=<inner_width$}=+\""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"| {:inner_width$} |\""
msgstr "\"| {:inner_width$} |\""

#: src/modules/exercise.md src/modules/solution.md
msgid "// add a bit of padding\n"
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"+{:-<width$}+\""
msgstr "\"+{:-<width$}+\""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"|{:^width$}|\""
msgstr "\"|{:^width$}|\""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"Rust GUI Demo 1.23\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"This is a small text GUI demo.\""
msgstr ""

#: src/modules/exercise.md src/modules/solution.md
msgid "\"Click me!\""
msgstr ""

#: src/modules/exercise.md
msgid ""
"Encourage students to divide the code in a way that feels natural for them, "
"and get accustomed to the required `mod`, `use`, and `pub` declarations. "
"Afterward, discuss what organizations are most idiomatic."
msgstr ""

#: src/modules/solution.md
msgid "// ---- src/widgets.rs ----\n"
msgstr ""

#: src/modules/solution.md
msgid "// ---- src/widgets/label.rs ----\n"
msgstr ""

#: src/modules/solution.md
#, fuzzy
msgid "// ANCHOR_END: Label-width\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md
#, fuzzy
msgid "// ANCHOR: Label-draw_into\n"
msgstr "// ANCHOR: main\n"

#: src/modules/solution.md
#, fuzzy
msgid "// ANCHOR_END: Label-draw_into\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md
msgid "// ---- src/widgets/button.rs ----\n"
msgstr ""

#: src/modules/solution.md
#, fuzzy
msgid "// ANCHOR_END: Button-width\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md
#, fuzzy
msgid "// ANCHOR: Button-draw_into\n"
msgstr "// ANCHOR: main\n"

#: src/modules/solution.md
#, fuzzy
msgid "// ANCHOR_END: Button-draw_into\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md
msgid "// ---- src/widgets/window.rs ----\n"
msgstr ""

#: src/modules/solution.md
msgid ""
"// ANCHOR_END: Window-width\n"
"        // Add 4 paddings for borders\n"
msgstr ""

#: src/modules/solution.md
#, fuzzy
msgid "// ANCHOR: Window-draw_into\n"
msgstr "// ANCHOR: main\n"

#: src/modules/solution.md
#, fuzzy
msgid "// ANCHOR_END: Window-draw_into\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md
msgid ""
"// TODO: after learning about error handling, you can change\n"
"        // draw_into to return Result<(), std::fmt::Error>. Then use\n"
"        // the ?-operator here instead of .unwrap().\n"
msgstr ""

#: src/modules/solution.md
msgid "// ---- src/main.rs ----\n"
msgstr ""

#: src/testing/unit-tests.md
msgid ""
"Rust and Cargo come with a simple unit test framework. Tests are marked with "
"`#[test]`. Unit tests are often put in a nested `tests` module, using "
"`#[cfg(test)]` to conditionally compile them only when building tests."
msgstr ""

#: src/testing/unit-tests.md
msgid "\"Hello World\""
msgstr "\"Hej verden\""

#: src/testing/unit-tests.md
msgid "This lets you unit test private helpers."
msgstr ""

#: src/testing/unit-tests.md
msgid "The `#[cfg(test)]` attribute is only active when you run `cargo test`."
msgstr ""

#: src/testing/other.md
msgid "Integration Tests"
msgstr ""

#: src/testing/other.md
msgid "If you want to test your library as a client, use an integration test."
msgstr ""

#: src/testing/other.md
msgid "Create a `.rs` file under `tests/`:"
msgstr ""

#: src/testing/other.md
msgid "// tests/my_library.rs\n"
msgstr ""

#: src/testing/other.md
msgid "These tests only have access to the public API of your crate."
msgstr ""

#: src/testing/other.md
msgid "Documentation Tests"
msgstr ""

#: src/testing/other.md
msgid "Rust has built-in support for documentation tests:"
msgstr ""

#: src/testing/other.md
msgid ""
"/// Shortens a string to the given length.\n"
"///\n"
"/// ```\n"
"/// # use playground::shorten_string;\n"
"/// assert_eq!(shorten_string(\"Hello World\", 5), \"Hello\");\n"
"/// assert_eq!(shorten_string(\"Hello World\", 20), \"Hello World\");\n"
"/// ```\n"
msgstr ""

#: src/testing/other.md
msgid "Code blocks in `///` comments are automatically seen as Rust code."
msgstr ""

#: src/testing/other.md
msgid "The code will be compiled and executed as part of `cargo test`."
msgstr ""

#: src/testing/other.md
msgid ""
"Adding `#` in the code will hide it from the docs, but will still compile/"
"run it."
msgstr ""

#: src/testing/other.md
msgid ""
"Test the above code on the [Rust Playground](https://play.rust-lang.org/?"
"version=stable&mode=debug&edition=2024&gist=3ce2ad13ea1302f6572cb15cd96becf0)."
msgstr ""

#: src/testing/lints.md
msgid ""
"The Rust compiler produces fantastic error messages, as well as helpful "
"built-in lints. [Clippy](https://doc.rust-lang.org/clippy/) provides even "
"more lints, organized into groups that can be enabled per-project."
msgstr ""

#: src/testing/lints.md
msgid "\"X probably fits in a u16, right? {}\""
msgstr ""

#: src/testing/lints.md
msgid ""
"There are compiler lints visible here, but not clippy lints. Run `clippy` on "
"the playground site to show clippy warnings. Clippy has extensive "
"documentation of its lints, and adds new lints (including default-deny "
"lints) all the time."
msgstr ""

#: src/testing/lints.md
msgid ""
"Note that errors or warnings with `help: ...` can be fixed with `cargo fix` "
"or via your editor."
msgstr ""

#: src/testing/exercise.md
msgid ""
"The [Luhn algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) is used "
"to validate credit card numbers. The algorithm takes a string as input and "
"does the following to validate the credit card number:"
msgstr ""

#: src/testing/exercise.md
msgid ""
"Ignore all spaces. Reject numbers with fewer than two digits. Reject letters "
"and other non-digit characters."
msgstr ""

#: src/testing/exercise.md
msgid ""
"Moving from **right to left**, double every second digit: for the number "
"`1234`, we double `3` and `1`. For the number `98765`, we double `6` and `8`."
msgstr ""

#: src/testing/exercise.md
msgid ""
"After doubling a digit, sum the digits if the result is greater than 9. So "
"doubling `7` becomes `14` which becomes `1 + 4 = 5`."
msgstr ""

#: src/testing/exercise.md
msgid "Sum all the undoubled and doubled digits."
msgstr ""

#: src/testing/exercise.md
msgid "The credit card number is valid if the sum ends with `0`."
msgstr ""

#: src/testing/exercise.md
msgid ""
"The provided code provides a buggy implementation of the luhn algorithm, "
"along with two basic unit tests that confirm that most of the algorithm is "
"implemented correctly."
msgstr ""

#: src/testing/exercise.md
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and write additional "
"tests to uncover bugs in the provided implementation, fixing any bugs you "
"find."
msgstr ""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"4263 9826 4026 9299\""
msgstr "\"4263 9826 4026 9299\""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"4539 3195 0343 6467\""
msgstr "\"4539 3195 0343 6467\""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"7992 7398 713\""
msgstr "\"7992 7398 713\""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"4223 9826 4026 9299\""
msgstr "\"4223 9826 4026 9299\""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"4539 3195 0343 6476\""
msgstr "\"4539 3195 0343 6476\""

#: src/testing/exercise.md src/testing/solution.md
msgid "\"8273 1232 7352 0569\""
msgstr "\"8273 1232 7352 0569\""

#: src/testing/solution.md
msgid "// New: accept whitespace.\n"
msgstr ""

#: src/testing/solution.md
msgid "// New: reject all other characters.\n"
msgstr ""

#: src/testing/solution.md
msgid "// New: check that we have at least two digits\n"
msgstr ""

#: src/testing/solution.md
msgid "\"foo 0 0\""
msgstr "\"foo 0 0\""

#: src/testing/solution.md
msgid "\" \""
msgstr "\" \""

#: src/testing/solution.md
msgid "\"  \""
msgstr "\"  \""

#: src/testing/solution.md
msgid "\"    \""
msgstr "\"    \""

#: src/testing/solution.md
msgid "\"0\""
msgstr "\"0\""

#: src/testing/solution.md
msgid "\" 0 0 \""
msgstr "\" 0 0 \""

#: src/error-handling.md
#, fuzzy
msgid "Error Trait"
msgstr "`Error`"

#: src/error-handling.md
#, fuzzy
msgid "thiserror"
msgstr "`Error`"

#: src/error-handling.md
msgid "anyhow"
msgstr ""

#: src/error-handling.md src/error-handling/exercise.md
msgid "Exercise: Rewriting with Result"
msgstr ""

#: src/error-handling/panics.md
msgid "In case of a fatal runtime error, Rust triggers a \"panic\":"
msgstr ""

#: src/error-handling/panics.md
msgid "Panics are for unrecoverable and unexpected errors."
msgstr ""

#: src/error-handling/panics.md
msgid "Panics are symptoms of bugs in the program."
msgstr ""

#: src/error-handling/panics.md
msgid "Runtime failures like failed bounds checks can panic."
msgstr ""

#: src/error-handling/panics.md
msgid "Assertions (such as `assert!`) panic on failure."
msgstr ""

#: src/error-handling/panics.md
msgid "Purpose-specific panics can use the `panic!` macro."
msgstr ""

#: src/error-handling/panics.md
msgid ""
"A panic will \"unwind\" the stack, dropping values just as if the functions "
"had returned."
msgstr ""

#: src/error-handling/panics.md
msgid ""
"Use non-panicking APIs (such as `Vec::get`) if crashing is not acceptable."
msgstr ""

#: src/error-handling/panics.md
msgid ""
"By default, a panic will cause the stack to unwind. The unwinding can be "
"caught:"
msgstr ""

#: src/error-handling/panics.md
msgid "\"No problem here!\""
msgstr ""

#: src/error-handling/panics.md
msgid "\"oh no!\""
msgstr "\"√•h nej!\""

#: src/error-handling/panics.md
msgid ""
"Catching is unusual; do not attempt to implement exceptions with "
"`catch_unwind`!"
msgstr ""

#: src/error-handling/panics.md
msgid ""
"This can be useful in servers which should keep running even if a single "
"request crashes."
msgstr ""

#: src/error-handling/panics.md
msgid "This does not work if `panic = 'abort'` is set in your `Cargo.toml`."
msgstr ""

#: src/error-handling/result.md
msgid ""
"Our primary mechanism for error handling in Rust is the [`Result`](https://"
"doc.rust-lang.org/stable/std/result/enum.Result.html) enum, which we briefly "
"saw when discussing standard library types."
msgstr ""

#: src/error-handling/result.md
msgid ""
"`Result` has two variants: `Ok` which contains the success value, and `Err` "
"which contains an error value of some kind."
msgstr ""

#: src/error-handling/result.md
msgid ""
"Whether or not a function can produce an error is encoded in the function's "
"type signature by having the function return a `Result` value."
msgstr ""

#: src/error-handling/result.md
msgid ""
"Like with `Option`, there is no way to forget to handle an error: You cannot "
"access either the success value or the error value without first pattern "
"matching on the `Result` to check which variant you have. Methods like "
"`unwrap` make it easier to write quick-and-dirty code that doesn't do robust "
"error handling, but means that you can always see in your source code where "
"proper error handling is being skipped."
msgstr ""

#: src/error-handling/result.md
msgid ""
"It may be helpful to compare error handling in Rust to error handling "
"conventions that students may be familiar with from other programming "
"languages."
msgstr ""

#: src/error-handling/result.md
msgid "Many languages use exceptions, e.g. C++, Java, Python."
msgstr ""

#: src/error-handling/result.md
msgid ""
"In most languages with exceptions, whether or not a function can throw an "
"exception is not visible as part of its type signature. This generally means "
"that you can't tell when calling a function if it may throw an exception or "
"not."
msgstr ""

#: src/error-handling/result.md
msgid ""
"Exceptions generally unwind the call stack, propagating upward until a `try` "
"block is reached. An error originating deep in the call stack may impact an "
"unrelated function further up."
msgstr ""

#: src/error-handling/result.md
msgid "Error Numbers"
msgstr ""

#: src/error-handling/result.md
msgid ""
"Some languages have functions return an error number (or some other error "
"value) separately from the successful return value of the function. Examples "
"include C and Go."
msgstr ""

#: src/error-handling/result.md
msgid ""
"Depending on the language it may be possible to forget to check the error "
"value, in which case you may be accessing an uninitialized or otherwise "
"invalid success value."
msgstr ""

#: src/error-handling/try.md
msgid ""
"Runtime errors like connection-refused or file-not-found are handled with "
"the `Result` type, but matching this type on every call can be cumbersome. "
"The try-operator `?` is used to return errors to the caller. It lets you "
"turn the common"
msgstr ""

#: src/error-handling/try.md
msgid "into the much simpler"
msgstr ""

#: src/error-handling/try.md
msgid "We can use this to simplify our error handling code:"
msgstr ""

#: src/error-handling/try.md
msgid "//fs::write(\"config.dat\", \"alice\").unwrap();\n"
msgstr "//fs::write(\"config.dat\", \"alice\").unwrap();\n"

#: src/error-handling/try.md src/error-handling/try-conversions.md
#: src/error-handling/thiserror.md src/error-handling/anyhow.md
msgid "\"config.dat\""
msgstr "\"config.dat\""

#: src/error-handling/try.md src/error-handling/try-conversions.md
msgid "\"username or error: {username:?}\""
msgstr ""

#: src/error-handling/try.md
msgid "Simplify the `read_username` function to use `?`."
msgstr ""

#: src/error-handling/try.md
msgid "The `username` variable can be either `Ok(string)` or `Err(error)`."
msgstr ""

#: src/error-handling/try.md
msgid ""
"Use the `fs::write` call to test out the different scenarios: no file, empty "
"file, file with username."
msgstr ""

#: src/error-handling/try.md
msgid ""
"Note that `main` can return a `Result<(), E>` as long as it implements "
"`std::process::Termination`. In practice, this means that `E` implements "
"`Debug`. The executable will print the `Err` variant and return a nonzero "
"exit status on error."
msgstr ""

#: src/error-handling/try-conversions.md
msgid ""
"The effective expansion of `?` is a little more complicated than previously "
"indicated:"
msgstr ""

#: src/error-handling/try-conversions.md
msgid "works the same as"
msgstr ""

#: src/error-handling/try-conversions.md
msgid ""
"The `From::from` call here means we attempt to convert the error type to the "
"type returned by the function. This makes it easy to encapsulate errors into "
"higher-level errors."
msgstr ""

#: src/error-handling/try-conversions.md
#, fuzzy
msgid "\"I/O error: {e}\""
msgstr "\"IO-fejl: {e}\""

#: src/error-handling/try-conversions.md
msgid "\"Found no username in {path}\""
msgstr ""

#: src/error-handling/try-conversions.md
#, fuzzy
msgid "//std::fs::write(\"config.dat\", \"\").unwrap();\n"
msgstr "//fs::write(\"config.dat\", \"\").unwrap();\n"

#: src/error-handling/try-conversions.md
msgid ""
"The `?` operator must return a value compatible with the return type of the "
"function. For `Result`, it means that the error types have to be compatible. "
"A function that returns `Result<T, ErrorOuter>` can only use `?` on a value "
"of type `Result<U, ErrorInner>` if `ErrorOuter` and `ErrorInner` are the "
"same type or if `ErrorOuter` implements `From<ErrorInner>`."
msgstr ""

#: src/error-handling/try-conversions.md
msgid ""
"A common alternative to a `From` implementation is `Result::map_err`, "
"especially when the conversion only happens in one place."
msgstr ""

#: src/error-handling/try-conversions.md
msgid ""
"There is no compatibility requirement for `Option`. A function returning "
"`Option<T>` can use the `?` operator on `Option<U>` for arbitrary `T` and "
"`U` types."
msgstr ""

#: src/error-handling/try-conversions.md
msgid ""
"A function that returns `Result` cannot use `?` on `Option` and vice versa. "
"However, `Option::ok_or` converts `Option` to `Result` whereas `Result::ok` "
"turns `Result` into `Option`."
msgstr ""

#: src/error-handling/error.md
msgid "Dynamic Error Types"
msgstr ""

#: src/error-handling/error.md
msgid ""
"Sometimes we want to allow any type of error to be returned without writing "
"our own enum covering all the different possibilities. The "
"`std::error::Error` trait makes it easy to create a trait object that can "
"contain any error."
msgstr ""

#: src/error-handling/error.md
#, fuzzy
msgid "\"count.dat\""
msgstr "\"config.dat\""

#: src/error-handling/error.md
msgid "\"1i3\""
msgstr ""

#: src/error-handling/error.md
#, fuzzy
msgid "\"Count: {count}\""
msgstr "\"count: {}\""

#: src/error-handling/error.md
msgid "\"Error: {err}\""
msgstr "\"Fejl: {err}\""

#: src/error-handling/error.md
msgid ""
"The `read_count` function can return `std::io::Error` (from file operations) "
"or `std::num::ParseIntError` (from `String::parse`)."
msgstr ""

#: src/error-handling/error.md
msgid ""
"Boxing errors saves on code, but gives up the ability to cleanly handle "
"different error cases differently in the program. As such it's generally not "
"a good idea to use `Box<dyn Error>` in the public API of a library, but it "
"can be a good option in a program where you just want to display the error "
"message somewhere."
msgstr ""

#: src/error-handling/error.md
msgid ""
"Make sure to implement the `std::error::Error` trait when defining a custom "
"error type so it can be boxed."
msgstr ""

#: src/error-handling/thiserror.md
msgid ""
"The [`thiserror`](https://docs.rs/thiserror/) crate provides macros to help "
"avoid boilerplate when defining error types. It provides derive macros that "
"assist in implementing `From<T>`, `Display`, and the `Error` trait."
msgstr ""

#: src/error-handling/thiserror.md
#, fuzzy
msgid "\"I/O error: {0}\""
msgstr "\"IO-fejl: {e}\""

#: src/error-handling/thiserror.md src/error-handling/anyhow.md
msgid "\"Found no username in {0}\""
msgstr ""

#: src/error-handling/thiserror.md src/error-handling/anyhow.md
msgid "//fs::write(\"config.dat\", \"\").unwrap();\n"
msgstr "//fs::write(\"config.dat\", \"\").unwrap();\n"

#: src/error-handling/thiserror.md src/error-handling/anyhow.md
msgid "\"Username: {username}\""
msgstr ""

#: src/error-handling/thiserror.md src/error-handling/anyhow.md
msgid "\"Error: {err:?}\""
msgstr "\"Fejl: {err:?}\""

#: src/error-handling/thiserror.md
msgid ""
"The `Error` derive macro is provided by `thiserror`, and has lots of useful "
"attributes to help define error types in a compact way."
msgstr ""

#: src/error-handling/thiserror.md
msgid "The message from `#[error]` is used to derive the `Display` trait."
msgstr ""

#: src/error-handling/thiserror.md
msgid ""
"Note that the (`thiserror::`)`Error` derive macro, while it has the effect "
"of implementing the (`std::error::`)`Error` trait, is not the same this; "
"traits and macros do not share a namespace."
msgstr ""

#: src/error-handling/anyhow.md
msgid ""
"The [`anyhow`](https://docs.rs/anyhow/) crate provides a rich error type "
"with support for carrying additional contextual information, which can be "
"used to provide a semantic trace of what the program was doing leading up to "
"the error."
msgstr ""

#: src/error-handling/anyhow.md
msgid ""
"This can be combined with the convenience macros from [`thiserror`](https://"
"docs.rs/thiserror/) to avoid writing out trait impls explicitly for custom "
"error types."
msgstr ""

#: src/error-handling/anyhow.md
msgid "\"Failed to open {path}\""
msgstr ""

#: src/error-handling/anyhow.md
msgid "\"Failed to read\""
msgstr ""

#: src/error-handling/anyhow.md
msgid ""
"`anyhow::Error` is essentially a wrapper around `Box<dyn Error>`. As such "
"it's again generally not a good choice for the public API of a library, but "
"is widely used in applications."
msgstr ""

#: src/error-handling/anyhow.md
msgid "`anyhow::Result<V>` is a type alias for `Result<V, anyhow::Error>`."
msgstr ""

#: src/error-handling/anyhow.md
msgid ""
"Functionality provided by `anyhow::Error` may be familiar to Go developers, "
"as it provides similar behavior to the Go `error` type and `Result<T, "
"anyhow::Error>` is much like a Go `(T, error)` (with the convention that "
"only one element of the pair is meaningful)."
msgstr ""

#: src/error-handling/anyhow.md
msgid ""
"`anyhow::Context` is a trait implemented for the standard `Result` and "
"`Option` types. `use anyhow::Context` is necessary to enable `.context()` "
"and `.with_context()` on those types."
msgstr ""

#: src/error-handling/anyhow.md
msgid ""
"`anyhow::Error` has support for downcasting, much like `std::any::Any`; the "
"specific error type stored inside can be extracted for examination if "
"desired with [`Error::downcast`](https://docs.rs/anyhow/latest/anyhow/"
"struct.Error.html#method.downcast)."
msgstr ""

#: src/error-handling/exercise.md
msgid ""
"In this exercise we're revisiting the expression evaluator exercise that we "
"did in day 2. Our initial solution ignores a possible error case: Dividing "
"by zero! Rewrite `eval` to instead use idiomatic error handling to handle "
"this error case and return an error when it occurs. We provide a simple "
"`DivideByZeroError` type to use as the error type for `eval`."
msgstr ""

#: src/error-handling/exercise.md
msgid ""
"// The original implementation of the expression evaluator. Update this to\n"
"// return a `Result` and produce an error when dividing by 0.\n"
msgstr ""

#: src/error-handling/exercise.md
msgid "\"Cannot divide by zero!\""
msgstr ""

#: src/error-handling/exercise.md
msgid ""
"The starting code here isn't exactly the same as the previous exercise's "
"solution: We've added in an explicit panic to show students where the error "
"case is. Point this out if students get confused."
msgstr ""

#: src/unsafe-rust.md
msgid "This segment should take about 1 hour and 15 minutes. It contains:"
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid "The Rust language has two parts:"
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid "**Safe Rust:** memory safe, no undefined behavior possible."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid ""
"**Unsafe Rust:** can trigger undefined behavior if preconditions are "
"violated."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid ""
"We saw mostly safe Rust in this course, but it's important to know what "
"Unsafe Rust is."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid ""
"Unsafe code is usually small and isolated, and its correctness should be "
"carefully documented. It is usually wrapped in a safe abstraction layer."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid "Unsafe Rust gives you access to five new capabilities:"
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid "Dereference raw pointers."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid "Access or modify mutable static variables."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid "Access `union` fields."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid "Call `unsafe` functions, including `extern` functions."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid "Implement `unsafe` traits."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid ""
"We will briefly cover unsafe capabilities next. For full details, please see "
"[Chapter 19.1 in the Rust Book](https://doc.rust-lang.org/book/ch19-01-"
"unsafe-rust.html) and the [Rustonomicon](https://doc.rust-lang.org/nomicon/)."
msgstr ""

#: src/unsafe-rust/unsafe.md
msgid ""
"Unsafe Rust does not mean the code is incorrect. It means that developers "
"have turned off some compiler safety features and have to write correct code "
"by themselves. It means the compiler no longer enforces Rust's memory-safety "
"rules."
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid "Creating pointers is safe, but dereferencing them requires `unsafe`:"
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid ""
"// SAFETY: p1 and p2 were created by taking raw pointers to a local, so "
"they\n"
"    // are guaranteed to be non-null, aligned, and point into a single "
"(stack-)\n"
"    // allocated object.\n"
"    //\n"
"    // The object underlying the raw pointers lives for the entire function, "
"so\n"
"    // it is not deallocated while the raw pointers still exist. It is not\n"
"    // accessed through references while the raw pointers exist, nor is it\n"
"    // accessed from other threads concurrently.\n"
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid "// Mutation may soundly be observed through a raw pointer, like in C.\n"
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid ""
"// UNSOUND. DO NOT DO THIS.\n"
"    /*\n"
"    let r: &i32 = unsafe { &*p1 };\n"
"    dbg!(r);\n"
"    x = 50;\n"
"    dbg!(r); // Object underlying the reference has been mutated. This is "
"UB.\n"
"    */"
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid ""
"It is good practice (and required by the Android Rust style guide) to write "
"a comment for each `unsafe` block explaining how the code inside it "
"satisfies the safety requirements of the unsafe operations it is doing."
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid ""
"In the case of pointer dereferences, this means that the pointers must be "
"[_valid_](https://doc.rust-lang.org/std/ptr/index.html#safety), i.e.:"
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid "The pointer must be non-null."
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid ""
"The pointer must be _dereferenceable_ (within the bounds of a single "
"allocated object)."
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid "The object must not have been deallocated."
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid "There must not be concurrent accesses to the same location."
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid ""
"If the pointer was obtained by casting a reference, the underlying object "
"must be live and no reference may be used to access the memory."
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid "In most cases the pointer must also be properly aligned."
msgstr ""

#: src/unsafe-rust/dereferencing.md
msgid ""
"The \"UNSOUND\" section gives an example of a common kind of UB bug: na√Øvely "
"taking a reference to the dereference of a raw pointer sidesteps the "
"compiler's knowledge of what object the reference is actually pointing to. "
"As such, the borrow checker does not freeze `x` and so we are able to modify "
"it despite the existence of a reference to it. Creating a reference from a "
"pointer requires _great care_."
msgstr ""

#: src/unsafe-rust/mutable-static.md
msgid "It is safe to read an immutable static variable:"
msgstr ""

#: src/unsafe-rust/mutable-static.md
msgid "\"Hello, world!\""
msgstr "\"Hej verden!\""

#: src/unsafe-rust/mutable-static.md
msgid "\"HELLO_WORLD: {HELLO_WORLD}\""
msgstr "\"HELLO_WORLD: {HELLO_WORLD}\""

#: src/unsafe-rust/mutable-static.md
msgid ""
"However, mutable static variables are unsafe to read and write because "
"multiple threads could do so concurrently without synchronization, "
"constituting a data race."
msgstr ""

#: src/unsafe-rust/mutable-static.md
msgid ""
"Using mutable statics soundly requires reasoning about concurrency without "
"the compiler's help:"
msgstr ""

#: src/unsafe-rust/mutable-static.md
msgid ""
"// SAFETY: There are no other threads which could be accessing `COUNTER`.\n"
msgstr ""

#: src/unsafe-rust/mutable-static.md
msgid ""
"The program here is sound because it is single-threaded. However, the Rust "
"compiler reasons about functions individually so can't assume that. Try "
"removing the `unsafe` and see how the compiler explains that it is undefined "
"behavior to access a mutable static from multiple threads."
msgstr ""

#: src/unsafe-rust/mutable-static.md
msgid ""
"The 2024 Rust edition goes further and makes accessing a mutable static by "
"reference an error by default."
msgstr ""

#: src/unsafe-rust/mutable-static.md
msgid ""
"Using a mutable static is almost always a bad idea, you should use interior "
"mutability instead."
msgstr ""

#: src/unsafe-rust/mutable-static.md
msgid ""
"There are some cases where it might be necessary in low-level `no_std` code, "
"such as implementing a heap allocator or working with some C APIs. In this "
"case you should use pointers rather than references."
msgstr ""

#: src/unsafe-rust/unions.md
msgid "Unions are like enums, but you need to track the active field yourself:"
msgstr ""

#: src/unsafe-rust/unions.md
msgid "\"int: {}\""
msgstr "\"int: {}\""

#: src/unsafe-rust/unions.md
msgid "\"bool: {}\""
msgstr "\"bool: {}\""

#: src/unsafe-rust/unions.md
msgid "// Undefined behavior!\n"
msgstr ""

#: src/unsafe-rust/unions.md
msgid ""
"Unions are very rarely needed in Rust as you can usually use an enum. They "
"are occasionally needed for interacting with C library APIs."
msgstr ""

#: src/unsafe-rust/unions.md
msgid ""
"If you just want to reinterpret bytes as a different type, you probably want "
"[`std::mem::transmute`](https://doc.rust-lang.org/stable/std/mem/"
"fn.transmute.html) or a safe wrapper such as the [`zerocopy`](https://"
"crates.io/crates/zerocopy) crate."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid ""
"A function or method can be marked `unsafe` if it has extra preconditions "
"you must uphold to avoid undefined behaviour."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "Unsafe functions may come from two places:"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "Rust functions declared unsafe."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "Unsafe foreign functions in `extern \"C\"` blocks."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md
msgid "We will look at the two kinds of unsafe functions next."
msgstr ""

#: src/unsafe-rust/unsafe-functions/rust.md
msgid ""
"You can mark your own functions as `unsafe` if they require particular "
"preconditions to avoid undefined behaviour."
msgstr ""

#: src/unsafe-rust/unsafe-functions/rust.md
msgid ""
"/// Swaps the values pointed to by the given pointers.\n"
"///\n"
"/// # Safety\n"
"///\n"
"/// The pointers must be valid, properly aligned, and not otherwise accessed "
"for\n"
"/// the duration of the function call.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions/rust.md
msgid ""
"// SAFETY: Our caller promised that the pointers are valid, properly "
"aligned\n"
"    // and have no other access.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions/rust.md
msgid ""
"// SAFETY: The pointers must be valid, aligned and unique because they came\n"
"    // from references.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions/rust.md
msgid "\"a = {}, b = {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions/rust.md
msgid ""
"We wouldn't actually use pointers for a `swap` function --- it can be done "
"safely with references."
msgstr ""

#: src/unsafe-rust/unsafe-functions/rust.md
msgid ""
"Note that Rust 2021 and earlier allow unsafe code within an unsafe function "
"without an `unsafe` block. This changed in the 2024 edition. We can prohibit "
"it in older editions with `#[deny(unsafe_op_in_unsafe_fn)]`. Try adding it "
"and see what happens."
msgstr ""

#: src/unsafe-rust/unsafe-functions/extern-c.md
msgid ""
"You can declare foreign functions for access from Rust with `unsafe extern`. "
"This is unsafe because the compiler has to way to reason about their "
"behavior. Functions declared in an `extern` block must be marked as `safe` "
"or `unsafe`, depending on whether they have preconditions for safe use:"
msgstr ""

#: src/unsafe-rust/unsafe-functions/extern-c.md src/unsafe-rust/exercise.md
#: src/unsafe-rust/solution.md src/android/interoperability/with-c.md
#: src/android/interoperability/with-c/rust-library.md
#: src/android/interoperability/cpp/cpp-bridge.md
#: src/exercises/chromium/build-rules.md src/bare-metal/aps/inline-assembly.md
#: src/bare-metal/aps/uart/using.md src/bare-metal/aps/safemmio/using.md
#: src/bare-metal/aps/logging/using.md
#: src/unsafe-deep-dive/motivations/interop.md
msgid "\"C\""
msgstr "\"C\""

#: src/unsafe-rust/unsafe-functions/extern-c.md
msgid ""
"// `abs` doesn't deal with pointers and doesn't have any safety "
"requirements.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions/extern-c.md
msgid ""
"/// # Safety\n"
"    ///\n"
"    /// `s` must be a pointer to a NUL-terminated C string which is valid "
"and\n"
"    /// not modified for the duration of this function call.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions/extern-c.md
msgid "\"Absolute value of -3 according to C: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions/extern-c.md
msgid ""
"// SAFETY: We pass a pointer to a C string literal which is valid for\n"
"        // the duration of the program.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions/extern-c.md
#, fuzzy
msgid "\"String length: {}\""
msgstr "\"L√¶ngde: {}\""

#: src/unsafe-rust/unsafe-functions/extern-c.md
#, fuzzy
msgid "\"String\""
msgstr "\"En streng\""

#: src/unsafe-rust/unsafe-functions/extern-c.md
msgid ""
"Rust used to consider all extern functions unsafe, but this changed in Rust "
"1.82 with `unsafe extern` blocks."
msgstr ""

#: src/unsafe-rust/unsafe-functions/extern-c.md
msgid ""
"`abs` must be explicitly marked as `safe` because it is an external function "
"(FFI). Calling external functions is usually only a problem when those "
"functions do things with pointers which might violate Rust's memory model, "
"but in general any C function might have undefined behaviour under any "
"arbitrary circumstances."
msgstr ""

#: src/unsafe-rust/unsafe-functions/extern-c.md
msgid ""
"The `\"C\"` in this example is the ABI; [other ABIs are available too]"
"(https://doc.rust-lang.org/reference/items/external-blocks.html)."
msgstr ""

#: src/unsafe-rust/unsafe-functions/extern-c.md
msgid ""
"Note that there is no verification that the Rust function signature matches "
"that of the function definition -- that's up to you!"
msgstr ""

#: src/unsafe-rust/unsafe-functions/calling.md
msgid "Failing to uphold the safety requirements breaks memory safety!"
msgstr ""

#: src/unsafe-rust/unsafe-functions/calling.md
msgid "// 8 bytes\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions/calling.md
#, fuzzy
msgid "\"{pk:?}\""
msgstr "\"{:?}\""

#: src/unsafe-rust/unsafe-functions/calling.md
msgid ""
"Always include a safety comment for each `unsafe` block. It must explain why "
"the code is actually safe. This example is missing a safety comment and is "
"unsound."
msgstr ""

#: src/unsafe-rust/unsafe-functions/calling.md
msgid ""
"The second argument to `slice::from_raw_parts` is the number of _elements_, "
"not bytes! This example demonstrates unexpected behavior by reading past the "
"end of one array and into another."
msgstr ""

#: src/unsafe-rust/unsafe-functions/calling.md
msgid ""
"This is undefined behavior because we're reading past the end of the array "
"that the pointer was derived from."
msgstr ""

#: src/unsafe-rust/unsafe-functions/calling.md
msgid ""
"`log_public_key` should be unsafe, because `pk_ptr` must meet certain "
"prerequisites to avoid undefined behaviour. A safe function which can cause "
"undefined behaviour is said to be `unsound`. What should its safety "
"documentation say?"
msgstr ""

#: src/unsafe-rust/unsafe-functions/calling.md
msgid ""
"The standard library contains many low-level unsafe functions. Prefer the "
"safe alternatives when possible!"
msgstr ""

#: src/unsafe-rust/unsafe-functions/calling.md
msgid ""
"If you use an unsafe function as an optimization, make sure to add a "
"benchmark to demonstrate the gain."
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
msgid "Implementing Unsafe Traits"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
msgid ""
"Like with functions, you can mark a trait as `unsafe` if the implementation "
"must guarantee particular conditions to avoid undefined behaviour."
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
msgid ""
"For example, the `zerocopy` crate has an unsafe trait that looks [something "
"like this](https://docs.rs/zerocopy/latest/zerocopy/trait.IntoBytes.html):"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
msgid ""
"/// ...\n"
"/// # Safety\n"
"/// The type must have a defined representation and no padding.\n"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
msgid "// SAFETY: `u32` has a defined representation and no padding.\n"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
msgid ""
"There should be a `# Safety` section on the Rustdoc for the trait explaining "
"the requirements for the trait to be safely implemented."
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
msgid ""
"The actual safety section for `IntoBytes` is rather longer and more "
"complicated."
msgstr ""

#: src/unsafe-rust/unsafe-traits.md
msgid "The built-in `Send` and `Sync` traits are unsafe."
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "Safe FFI Wrapper"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"Rust has great support for calling functions through a _foreign function "
"interface_ (FFI). We will use this to build a safe wrapper for the `libc` "
"functions you would use from C to read the names of files in a directory."
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "You will want to consult the manual pages:"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "[`opendir(3)`](https://man7.org/linux/man-pages/man3/opendir.3.html)"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "[`readdir(3)`](https://man7.org/linux/man-pages/man3/readdir.3.html)"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "[`closedir(3)`](https://man7.org/linux/man-pages/man3/closedir.3.html)"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"You will also want to browse the [`std::ffi`](https://doc.rust-lang.org/std/"
"ffi/) module. There you find a number of string types which you need for the "
"exercise:"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "Encoding"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "Use"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"[`str`](https://doc.rust-lang.org/std/primitive.str.html) and [`String`]"
"(https://doc.rust-lang.org/std/string/struct.String.html)"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "UTF-8"
msgstr "UTF-8"

#: src/unsafe-rust/exercise.md
msgid "Text processing in Rust"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"[`CStr`](https://doc.rust-lang.org/std/ffi/struct.CStr.html) and [`CString`]"
"(https://doc.rust-lang.org/std/ffi/struct.CString.html)"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "NUL-terminated"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "Communicating with C functions"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"[`OsStr`](https://doc.rust-lang.org/std/ffi/struct.OsStr.html) and "
"[`OsString`](https://doc.rust-lang.org/std/ffi/struct.OsString.html)"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "OS-specific"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "Communicating with the OS"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "You will convert between all these types:"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`&str` to `CString`: you need to allocate space for a trailing `\\0` "
"character,"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "`CString` to `*const i8`: you need a pointer to call C functions,"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`*const i8` to `&CStr`: you need something which can find the trailing `\\0` "
"character,"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`&CStr` to `&[u8]`: a slice of bytes is the universal interface for \"some "
"unknown data\","
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`&[u8]` to `&OsStr`: `&OsStr` is a step towards `OsString`, use [`OsStrExt`]"
"(https://doc.rust-lang.org/std/os/unix/ffi/trait.OsStrExt.html) to create it,"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"`&OsStr` to `OsString`: you need to clone the data in `&OsStr` to be able to "
"return it and call `readdir` again."
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"The [Nomicon](https://doc.rust-lang.org/nomicon/ffi.html) also has a very "
"useful chapter about FFI."
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and fill in the missing "
"functions and methods:"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "// TODO: remove this when you're done with your implementation.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "\"macos\""
msgstr "\"macos\""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "// Opaque type. See https://doc.rust-lang.org/nomicon/ffi.html.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid ""
"// Layout according to the Linux man page for readdir(3), where ino_t and\n"
"    // off_t are resolved according to the definitions in\n"
"    // /usr/include/x86_64-linux-gnu/{sys/types.h, bits/typesizes.h}.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "// Layout according to the macOS man page for dir(5).\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "\"x86_64\""
msgstr "\"x86_64\""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid ""
"// See https://github.com/rust-lang/libc/issues/414 and the section on\n"
"        // _DARWIN_FEATURE_64_BIT_INODE in the macOS man page for stat(2).\n"
"        //\n"
"        // \"Platforms that existed before these updates were available\" "
"refers\n"
"        // to macOS (as opposed to iOS / wearOS / etc.) on Intel and "
"PowerPC.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "\"readdir$INODE64\""
msgstr "\"readdir$INODE64\""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid ""
"// Call opendir and return a Ok value if that worked,\n"
"        // otherwise return Err with a message.\n"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "// Keep calling readdir until we get a NULL pointer back.\n"
msgstr ""

#: src/unsafe-rust/exercise.md
msgid "// Call closedir as needed.\n"
msgstr ""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
#: src/android/interoperability/with-c/rust-library.md
msgid "\".\""
msgstr "\".\""

#: src/unsafe-rust/exercise.md src/unsafe-rust/solution.md
msgid "\"files: {:#?}\""
msgstr ""

#: src/unsafe-rust/exercise.md
msgid ""
"FFI binding code is typically generated by tools like [bindgen](https://"
"github.com/rust-lang/rust-bindgen), rather than being written manually as we "
"are doing here. However, bindgen can't run in an online playground."
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"Invalid path: {err}\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "// SAFETY: path.as_ptr() cannot be NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"Could not open {path:?}\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid ""
"// Keep calling readdir until we get a NULL pointer back.\n"
"        // SAFETY: self.dir is never NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid "// We have reached the end of the directory.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid ""
"// SAFETY: dirent is not NULL and dirent.d_name is NUL\n"
"        // terminated.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid ""
"// Call closedir as needed.\n"
"        // SAFETY: self.dir is never NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"Could not close {:?}\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"no-such-directory\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"Non UTF-8 character in path\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"..\""
msgstr "\"..\""

#: src/unsafe-rust/solution.md
msgid "\"foo.txt\""
msgstr "\"foo.txt\""

#: src/unsafe-rust/solution.md
msgid "\"The Foo Diaries\\n\""
msgstr ""

#: src/unsafe-rust/solution.md
msgid "\"bar.png\""
msgstr "\"bar.png\""

#: src/unsafe-rust/solution.md
msgid "\"<PNG>\\n\""
msgstr "\"<PNG>\\n\""

#: src/unsafe-rust/solution.md
msgid "\"crab.rs\""
msgstr "\"crab.rs\""

#: src/unsafe-rust/solution.md
msgid "\"//! Crab\\n\""
msgstr ""

#: src/android.md
msgid "Welcome to Rust in Android"
msgstr ""

#: src/android.md
msgid ""
"Rust is supported for system software on Android. This means that you can "
"write new services, libraries, drivers or even firmware in Rust (or improve "
"existing code as needed)."
msgstr ""

#: src/android.md
msgid ""
"The speaker may mention any of the following given the increased use of Rust "
"in Android:"
msgstr ""

#: src/android.md
msgid ""
"Service example: [DNS over HTTP](https://security.googleblog.com/2022/07/dns-"
"over-http3-in-android.html)."
msgstr ""

#: src/android.md
msgid ""
"Libraries: [Rutabaga Virtual Graphics Interface](https://crosvm.dev/book/"
"appendix/rutabaga_gfx.html)."
msgstr ""

#: src/android.md
msgid ""
"Kernel Drivers: [Binder](https://lore.kernel.org/rust-for-linux/20231101-"
"rust-binder-v1-0-08ba9197f637@google.com/)."
msgstr ""

#: src/android.md
msgid ""
"Firmware: [pKVM firmware](https://security.googleblog.com/2023/10/bare-metal-"
"rust-in-android.html)."
msgstr ""

#: src/android/setup.md
msgid ""
"We will be using a Cuttlefish Android Virtual Device to test our code. Make "
"sure you have access to one or create a new one with:"
msgstr ""

#: src/android/setup.md
msgid ""
"Please see the [Android Developer Codelab](https://source.android.com/docs/"
"setup/start) for details."
msgstr ""

#: src/android/setup.md
msgid ""
"The code on the following pages can be found in the [`src/android/` "
"directory](https://github.com/google/comprehensive-rust/tree/main/src/"
"android) of the course material. Please `git clone` the repository to follow "
"along."
msgstr ""

#: src/android/setup.md
msgid ""
"Cuttlefish is a reference Android device designed to work on generic Linux "
"desktops. MacOS support is also planned."
msgstr ""

#: src/android/setup.md
msgid ""
"The Cuttlefish system image maintains high fidelity to real devices, and is "
"the ideal emulator to run many Rust use cases."
msgstr ""

#: src/android/build-rules.md
msgid "The Android build system (Soong) supports Rust through several modules:"
msgstr ""

#: src/android/build-rules.md
msgid "Module Type"
msgstr ""

#: src/android/build-rules.md
msgid "Description"
msgstr ""

#: src/android/build-rules.md
msgid "`rust_binary`"
msgstr "`rust_binary`"

#: src/android/build-rules.md
msgid "Produces a Rust binary."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_library`"
msgstr "`rust_library`"

#: src/android/build-rules.md
msgid "Produces a Rust library, and provides both `rlib` and `dylib` variants."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_ffi`"
msgstr "`rust_ffi`"

#: src/android/build-rules.md
msgid ""
"Produces a Rust C library usable by `cc` modules, and provides both static "
"and shared variants."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_proc_macro`"
msgstr "`rust_proc_macro`"

#: src/android/build-rules.md
msgid ""
"Produces a `proc-macro` Rust library. These are analogous to compiler "
"plugins."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_test`"
msgstr "`rust_test`"

#: src/android/build-rules.md
msgid "Produces a Rust test binary that uses the standard Rust test harness."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_fuzz`"
msgstr "`rust_fuzz`"

#: src/android/build-rules.md
msgid "Produces a Rust fuzz binary leveraging `libfuzzer`."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_protobuf`"
msgstr "`rust_protobuf`"

#: src/android/build-rules.md
msgid ""
"Generates source and produces a Rust library that provides an interface for "
"a particular protobuf."
msgstr ""

#: src/android/build-rules.md
msgid "`rust_bindgen`"
msgstr "`rust_bindgen`"

#: src/android/build-rules.md
msgid ""
"Generates source and produces a Rust library containing Rust bindings to C "
"libraries."
msgstr ""

#: src/android/build-rules.md
msgid "We will look at `rust_binary` and `rust_library` next."
msgstr ""

#: src/android/build-rules.md
msgid "Additional items the speaker may mention:"
msgstr ""

#: src/android/build-rules.md
msgid ""
"Cargo is not optimized for multi-language repositories, and also downloads "
"packages from the internet."
msgstr ""

#: src/android/build-rules.md
msgid ""
"For compliance and performance, Android must have crates in-tree. It must "
"also interoperate with C/C++/Java code. Soong fills that gap."
msgstr ""

#: src/android/build-rules.md
msgid ""
"Soong has many similarities to [Bazel](https://bazel.build/), which is the "
"open-source variant of Blaze (used in google3)."
msgstr ""

#: src/android/build-rules.md
msgid "Fun fact: Data from Star Trek is a Soong-type Android."
msgstr ""

#: src/android/build-rules/binary.md
msgid "Rust Binaries"
msgstr ""

#: src/android/build-rules/binary.md
msgid ""
"Let's start with a simple application. At the root of an AOSP checkout, "
"create the following files:"
msgstr ""

#: src/android/build-rules/binary.md src/android/build-rules/library.md
msgid "_hello_rust/Android.bp_:"
msgstr "_hello_rust/Android.bp_:"

#: src/android/build-rules/binary.md
msgid "\"hello_rust\""
msgstr "\"hello_rust\""

#: src/android/build-rules/binary.md src/android/build-rules/library.md
#: src/android/logging.md
msgid "\"src/main.rs\""
msgstr "\"src/main.rs\""

#: src/android/build-rules/binary.md src/android/build-rules/library.md
msgid "_hello_rust/src/main.rs_:"
msgstr "_hello_rust/src/main.rs_:"

#: src/android/build-rules/binary.md src/android/build-rules/library.md
msgid "//! Rust demo.\n"
msgstr ""

#: src/android/build-rules/binary.md src/android/build-rules/library.md
msgid "/// Prints a greeting to standard output.\n"
msgstr ""

#: src/android/build-rules/binary.md src/exercises/chromium/build-rules.md
msgid "\"Hello from Rust!\""
msgstr ""

#: src/android/build-rules/binary.md
msgid "You can now build, push, and run the binary:"
msgstr ""

#: src/android/build-rules/binary.md
#, fuzzy
msgid ""
"```shell\n"
"m hello_rust\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust\" /data/local/tmp\n"
"adb shell /data/local/tmp/hello_rust\n"
"```"
msgstr ""
"```shell\n"
"m hello_rust\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust /data/local/tmp\"\n"
"adb shell /data/local/tmp/hello_rust\n"
"```"

#: src/android/build-rules/binary.md src/android/build-rules/library.md
msgid ""
"Go through the build steps and demonstrate them running in your emulator."
msgstr ""

#: src/android/build-rules/binary.md
msgid ""
"Notice the extensive documentation comments? The Android build rules enforce "
"that all modules have documentation. Try removing it and see what error you "
"get."
msgstr ""

#: src/android/build-rules/binary.md
msgid ""
"Stress that the Rust build rules look like the other Soong rules. This is by "
"design, to make using Rust as easy as C++ or Java."
msgstr ""

#: src/android/build-rules/library.md
msgid "Rust Libraries"
msgstr ""

#: src/android/build-rules/library.md
msgid "You use `rust_library` to create a new Rust library for Android."
msgstr ""

#: src/android/build-rules/library.md
msgid "Here we declare a dependency on two libraries:"
msgstr ""

#: src/android/build-rules/library.md
msgid "`libgreeting`, which we define below,"
msgstr ""

#: src/android/build-rules/library.md
msgid ""
"`libtextwrap`, which is a crate already vendored in [`external/rust/android-"
"crates-io/crates/`](https://cs.android.com/android/platform/superproject/"
"main/+/main:external/rust/android-crates-io/crates/)."
msgstr ""

#: src/android/build-rules/library.md
msgid "\"hello_rust_with_dep\""
msgstr "\"hello_rust_with_dep\""

#: src/android/build-rules/library.md
msgid "\"libgreetings\""
msgstr "\"libgreetings\""

#: src/android/build-rules/library.md
msgid "\"libtextwrap\""
msgstr "\"libtextwrap\""

#: src/android/build-rules/library.md
msgid "// Need this to avoid dynamic link error.\n"
msgstr ""

#: src/android/build-rules/library.md
msgid "\"greetings\""
msgstr "\"greetings\""

#: src/android/build-rules/library.md
#: src/android/aidl/example-service/service.md src/android/testing.md
#: src/android/interoperability/java.md
msgid "\"src/lib.rs\""
msgstr "\"src/lib.rs\""

#: src/android/build-rules/library.md
msgid "_hello_rust/src/lib.rs_:"
msgstr "_hello_rust/src/lib.rs_:"

#: src/android/build-rules/library.md
msgid "//! Greeting library.\n"
msgstr ""

#: src/android/build-rules/library.md
msgid "/// Greet `name`.\n"
msgstr ""

#: src/android/build-rules/library.md
msgid "\"Hello {name}, it is very nice to meet you!\""
msgstr ""

#: src/android/build-rules/library.md
msgid "You build, push, and run the binary like before:"
msgstr ""

#: src/android/build-rules/library.md
#, fuzzy
msgid ""
"```shell\n"
"m hello_rust_with_dep\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_with_dep\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/hello_rust_with_dep\n"
"```"
msgstr ""
"```shell\n"
"m hello_rust_with_dep\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_with_dep /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/hello_rust_with_dep\n"
"```"

#: src/android/build-rules/library.md
msgid ""
"A Rust crate named `greetings` must be built by a rule called "
"`libgreetings`. Note how the Rust code uses the crate name, as is normal in "
"Rust."
msgstr ""

#: src/android/build-rules/library.md
msgid ""
"Again, the build rules enforce that we add documentation comments to all "
"public items."
msgstr ""

#: src/android/aidl.md
msgid ""
"Rust supports the [Android Interface Definition Language (AIDL)](https://"
"developer.android.com/guide/components/aidl):"
msgstr ""

#: src/android/aidl.md
msgid "Rust code can call existing AIDL servers."
msgstr ""

#: src/android/aidl.md
msgid "You can create new AIDL servers in Rust."
msgstr ""

#: src/android/aidl.md
msgid "AIDL enables Android apps to interact with each other."
msgstr ""

#: src/android/aidl.md
msgid ""
"Since Rust is a first-class citizen in this ecosystem, other processes on "
"the device can call Rust services."
msgstr ""

#: src/android/aidl/birthday-service.md
msgid ""
"To illustrate using Rust with Binder, we will create a Binder interface. "
"Then, we'll implement the service and write a client that talks to it."
msgstr ""

#: src/android/aidl/example-service/interface.md
msgid "AIDL Interfaces"
msgstr ""

#: src/android/aidl/example-service/interface.md
msgid "You declare the API of your service using an AIDL interface:"
msgstr ""

#: src/android/aidl/example-service/interface.md
#: src/android/aidl/example-service/service-bindings.md
#: src/android/aidl/types/objects.md src/android/aidl/types/parcelables.md
#: src/android/aidl/types/file-descriptor.md
msgid ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"
msgstr ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"

#: src/android/aidl/example-service/interface.md
#: src/android/aidl/example-service/service-bindings.md
#: src/android/aidl/example-service/changing-definition.md
msgid "/** Birthday service interface. */"
msgstr ""

#: src/android/aidl/example-service/interface.md
#: src/android/aidl/example-service/service-bindings.md
#: src/android/aidl/example-service/changing-definition.md
msgid "/** Generate a Happy Birthday message. */"
msgstr ""

#: src/android/aidl/example-service/interface.md
msgid "_birthday_service/aidl/Android.bp_:"
msgstr "_birthday_service/aidl/Android.bp_:"

#: src/android/aidl/example-service/interface.md
msgid "\"com.example.birthdayservice\""
msgstr "\"com.example.birthdayservice\""

#: src/android/aidl/example-service/interface.md
msgid "\"com/example/birthdayservice/*.aidl\""
msgstr "\"com/example/birthdayservice/*.aidl\""

#: src/android/aidl/example-service/interface.md
msgid "// Rust is not enabled by default\n"
msgstr ""

#: src/android/aidl/example-service/interface.md
msgid ""
"Note that the directory structure under the `aidl/` directory needs to match "
"the package name used in the AIDL file, i.e. the package is "
"`com.example.birthdayservice` and the file is at `aidl/com/example/"
"IBirthdayService.aidl`."
msgstr ""

#: src/android/aidl/example-service/service-bindings.md
msgid "Generated Service API"
msgstr ""

#: src/android/aidl/example-service/service-bindings.md
msgid "Binder generates a trait for each interface definition."
msgstr ""

#: src/android/aidl/example-service/service-bindings.md
msgid "_out/soong/.intermediates/.../com_example_birthdayservice.rs_:"
msgstr ""

#: src/android/aidl/example-service/service-bindings.md
msgid ""
"Your service will need to implement this trait, and your client will use "
"this trait to talk to the service."
msgstr ""

#: src/android/aidl/example-service/service-bindings.md
msgid ""
"Point out how the generated function signature, specifically the argument "
"and return types, correspond to the interface definition."
msgstr ""

#: src/android/aidl/example-service/service-bindings.md
msgid ""
"`String` for an argument results in a different Rust type than `String` as a "
"return type."
msgstr ""

#: src/android/aidl/example-service/service.md
msgid "Service Implementation"
msgstr ""

#: src/android/aidl/example-service/service.md
msgid "We can now implement the AIDL service:"
msgstr ""

#: src/android/aidl/example-service/service.md
#: src/android/aidl/example-service/changing-implementation.md
#: src/android/aidl/types/file-descriptor.md
msgid "_birthday_service/src/lib.rs_:"
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/aidl/example-service/service.md
msgid "//! Implementation of the `IBirthdayService` AIDL interface.\n"
msgstr ""

#: src/android/aidl/example-service/service.md
msgid "/// The `IBirthdayService` implementation.\n"
msgstr ""

#: src/android/aidl/example-service/service.md
#: src/android/aidl/example-service/changing-implementation.md
#: src/android/aidl/types/file-descriptor.md
msgid "\"Happy Birthday {name}, congratulations with the {years} years!\""
msgstr ""

#: src/android/aidl/example-service/service.md
#: src/android/aidl/example-service/server.md
#: src/android/aidl/example-service/client.md
msgid "_birthday_service/Android.bp_:"
msgstr "_birthday_service/Android.bp_:"

#: src/android/aidl/example-service/service.md
#: src/android/aidl/example-service/server.md
msgid "\"libbirthdayservice\""
msgstr "\"libbirthdayservice\""

#: src/android/aidl/example-service/service.md
#: src/android/aidl/example-service/server.md
#: src/android/aidl/example-service/client.md
msgid "\"birthdayservice\""
msgstr "\"birthdayservice\""

#: src/android/aidl/example-service/service.md
#: src/android/aidl/example-service/server.md
#: src/android/aidl/example-service/client.md
msgid "\"com.example.birthdayservice-rust\""
msgstr "\"com.example.birthdayservice-rust\""

#: src/android/aidl/example-service/service.md
msgid ""
"Point out the path to the generated `IBirthdayService` trait, and explain "
"why each of the segments is necessary."
msgstr ""

#: src/android/aidl/example-service/service.md
msgid ""
"Note that `wishHappyBirthday` and other AIDL IPC methods take `&self` "
"(instead of `&mut self`)."
msgstr ""

#: src/android/aidl/example-service/service.md
msgid ""
"This is necessary because Binder responds to incoming requests on a thread "
"pool, allowing for multiple requests to be processed in parallel. This "
"requires that the service methods only get a shared reference to `self`."
msgstr ""

#: src/android/aidl/example-service/service.md
msgid ""
"Any state that needs to be modified by the service will have to be put in "
"something like a `Mutex` to allow for safe mutation."
msgstr ""

#: src/android/aidl/example-service/service.md
msgid ""
"The correct approach for managing service state depends heavily on the "
"details of your service."
msgstr ""

#: src/android/aidl/example-service/service.md
msgid ""
"TODO: What does the `binder::Interface` trait do? Are there methods to "
"override? Where is the source?"
msgstr ""

#: src/android/aidl/example-service/server.md
msgid "AIDL Server"
msgstr ""

#: src/android/aidl/example-service/server.md
msgid "Finally, we can create a server which exposes the service:"
msgstr ""

#: src/android/aidl/example-service/server.md
msgid "_birthday_service/src/server.rs_:"
msgstr "_birthday_service/src/server.rs_:"

#: src/android/aidl/example-service/server.md
msgid "//! Birthday service.\n"
msgstr ""

#: src/android/aidl/example-service/server.md
msgid "/// Entry point for birthday service.\n"
msgstr ""

#: src/android/aidl/example-service/server.md
msgid "\"Failed to register service\""
msgstr ""

#: src/android/aidl/example-service/server.md
msgid "\"birthday_server\""
msgstr "\"birthday_server\""

#: src/android/aidl/example-service/server.md
msgid "\"src/server.rs\""
msgstr "\"src/server.rs\""

#: src/android/aidl/example-service/server.md
#: src/android/aidl/example-service/client.md
msgid "// To avoid dynamic link error.\n"
msgstr ""

#: src/android/aidl/example-service/server.md
msgid ""
"The process for taking a user-defined service implementation (in this case, "
"the `BirthdayService` type, which implements the `IBirthdayService`) and "
"starting it as a Binder service has multiple steps. This may appear more "
"complicated than students are used to if they've used Binder from C++ or "
"another language. Explain to students why each step is necessary."
msgstr ""

#: src/android/aidl/example-service/server.md
msgid "Create an instance of your service type (`BirthdayService`)."
msgstr ""

#: src/android/aidl/example-service/server.md
msgid ""
"Wrap the service object in the corresponding `Bn*` type (`BnBirthdayService` "
"in this case). This type is generated by Binder and provides common Binder "
"functionality, similar to the `BnBinder` base class in C++. Since Rust "
"doesn't have inheritance, we use composition, putting our `BirthdayService` "
"within the generated `BnBinderService`."
msgstr ""

#: src/android/aidl/example-service/server.md
msgid ""
"Call `add_service`, giving it a service identifier and your service object "
"(the `BnBirthdayService` object in the example)."
msgstr ""

#: src/android/aidl/example-service/server.md
msgid ""
"Call `join_thread_pool` to add the current thread to Binder's thread pool "
"and start listening for connections."
msgstr ""

#: src/android/aidl/example-service/deploy.md
msgid "We can now build, push, and start the service:"
msgstr ""

#: src/android/aidl/example-service/deploy.md
#, fuzzy
msgid ""
"```shell\n"
"m birthday_server\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_server\" /data/local/"
"tmp\n"
"adb root\n"
"adb shell /data/local/tmp/birthday_server\n"
"```"
msgstr ""
"```shell\n"
"m birthday_server\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_server /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/birthday_server\n"
"```"

#: src/android/aidl/example-service/deploy.md
msgid "In another terminal, check that the service runs:"
msgstr ""

#: src/android/aidl/example-service/deploy.md
msgid "You can also call the service with `service call`:"
msgstr ""

#: src/android/aidl/example-service/client.md
msgid "AIDL Client"
msgstr ""

#: src/android/aidl/example-service/client.md
msgid "Finally, we can create a Rust client for our new service."
msgstr ""

#: src/android/aidl/example-service/client.md
#: src/android/aidl/example-service/changing-implementation.md
#: src/android/aidl/types/objects.md src/android/aidl/types/parcelables.md
#: src/android/aidl/types/file-descriptor.md
msgid "_birthday_service/src/client.rs_:"
msgstr "_birthday_service/src/client.rs_:"

#: src/android/aidl/example-service/client.md
msgid "/// Call the birthday service.\n"
msgstr ""

#: src/android/aidl/example-service/client.md src/android/aidl/types/objects.md
#: src/android/aidl/types/parcelables.md
#: src/android/aidl/types/file-descriptor.md
msgid "\"Failed to connect to BirthdayService\""
msgstr ""

#: src/android/aidl/example-service/client.md
#, fuzzy
msgid "// Call the service.\n"
msgstr "/// Analyze the numbers.\n"

#: src/android/aidl/example-service/client.md
msgid "\"{msg}\""
msgstr "\"{msg}\""

#: src/android/aidl/example-service/client.md
msgid "\"birthday_client\""
msgstr "\"birthday_client\""

#: src/android/aidl/example-service/client.md
msgid "\"src/client.rs\""
msgstr "\"src/client.rs\""

#: src/android/aidl/example-service/client.md
msgid "Notice that the client does not depend on `libbirthdayservice`."
msgstr ""

#: src/android/aidl/example-service/client.md
msgid "Build, push, and run the client on your device:"
msgstr ""

#: src/android/aidl/example-service/client.md
#, fuzzy
msgid ""
"```shell\n"
"m birthday_client\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_client\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/birthday_client Charlie 60\n"
"```"
msgstr ""
"```shell\n"
"m birthday_client\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_client /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/birthday_client Charlie 60\n"
"```"

#: src/android/aidl/example-service/client.md
msgid ""
"`Strong<dyn IBirthdayService>` is the trait object representing the service "
"that the client has connected to."
msgstr ""

#: src/android/aidl/example-service/client.md
msgid ""
"`Strong` is a custom smart pointer type for Binder. It handles both an in-"
"process ref count for the service trait object, and the global Binder ref "
"count that tracks how many processes have a reference to the object."
msgstr ""

#: src/android/aidl/example-service/client.md
msgid ""
"Note that the trait object that the client uses to talk to the service uses "
"the exact same trait that the server implements. For a given Binder "
"interface, there is a single Rust trait generated that both client and "
"server use."
msgstr ""

#: src/android/aidl/example-service/client.md
msgid ""
"Use the same service identifier used when registering the service. This "
"should ideally be defined in a common crate that both the client and server "
"can depend on."
msgstr ""

#: src/android/aidl/example-service/changing-definition.md
msgid ""
"Let's extend the API: we'll let clients specify a list of lines for the "
"birthday card:"
msgstr ""

#: src/android/aidl/example-service/changing-definition.md
msgid "This results in an updated trait definition for `IBirthdayService`:"
msgstr ""

#: src/android/aidl/example-service/changing-definition.md
msgid ""
"Note how the `String[]` in the AIDL definition is translated as a "
"`&[String]` in Rust, i.e. that idiomatic Rust types are used in the "
"generated bindings wherever possible:"
msgstr ""

#: src/android/aidl/example-service/changing-definition.md
msgid "`in` array arguments are translated to slices."
msgstr ""

#: src/android/aidl/example-service/changing-definition.md
msgid "`out` and `inout` args are translated to `&mut Vec<T>`."
msgstr ""

#: src/android/aidl/example-service/changing-definition.md
msgid "Return values are translated to returning a `Vec<T>`."
msgstr ""

#: src/android/aidl/example-service/changing-implementation.md
msgid "Updating Client and Service"
msgstr ""

#: src/android/aidl/example-service/changing-implementation.md
msgid "Update the client and server code to account for the new API."
msgstr ""

#: src/android/aidl/example-service/changing-implementation.md
msgid "'\\n'"
msgstr ""

#: src/android/aidl/example-service/changing-implementation.md
msgid "\"Habby birfday to yuuuuu\""
msgstr ""

#: src/android/aidl/example-service/changing-implementation.md
msgid "\"And also: many more\""
msgstr ""

#: src/android/aidl/example-service/changing-implementation.md
msgid ""
"TODO: Move code snippets into project files where they'll actually be built?"
msgstr ""

#: src/android/aidl/types.md
msgid "Working With AIDL Types"
msgstr ""

#: src/android/aidl/types.md
msgid "AIDL types translate into the appropriate idiomatic Rust type:"
msgstr ""

#: src/android/aidl/types.md
msgid "Primitive types map (mostly) to idiomatic Rust types."
msgstr ""

#: src/android/aidl/types.md
msgid "Collection types like slices, `Vec`s and string types are supported."
msgstr ""

#: src/android/aidl/types.md
msgid ""
"References to AIDL objects and file handles can be sent between clients and "
"services."
msgstr ""

#: src/android/aidl/types.md
msgid "File handles and parcelables are fully supported."
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "Primitive types map (mostly) idiomatically:"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "AIDL Type"
msgstr ""

#: src/android/aidl/types/primitives.md src/android/aidl/types/arrays.md
#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "Rust Type"
msgstr "Rust by Example"

#: src/android/aidl/types/primitives.md
msgid "Note"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`boolean`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`byte`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`i8`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "Note that bytes are signed."
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`u16`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "Note the usage of `u16`, NOT `u32`."
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`int`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`i32`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`long`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`i64`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`float`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`f32`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`double`"
msgstr ""

#: src/android/aidl/types/primitives.md
msgid "`f64`"
msgstr ""

#: src/android/aidl/types/arrays.md
msgid ""
"The array types (`T[]`, `byte[]`, and `List<T>`) are translated to the "
"appropriate Rust array type depending on how they are used in the function "
"signature:"
msgstr ""

#: src/android/aidl/types/arrays.md
#, fuzzy
msgid "Position"
msgstr "L√∏sninger"

#: src/android/aidl/types/arrays.md
msgid "`in` argument"
msgstr ""

#: src/android/aidl/types/arrays.md
#, fuzzy
msgid "`&[T]`"
msgstr "Arraysegmenter"

#: src/android/aidl/types/arrays.md
msgid "`out`/`inout` argument"
msgstr ""

#: src/android/aidl/types/arrays.md
#, fuzzy
msgid "`&mut Vec<T>`"
msgstr "`Vec`"

#: src/android/aidl/types/arrays.md
msgid "Return"
msgstr ""

#: src/android/aidl/types/arrays.md
#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`Vec<T>`"
msgstr "`Vec`"

#: src/android/aidl/types/arrays.md
msgid ""
"In Android 13 or higher, fixed-size arrays are supported, i.e. `T[N]` "
"becomes `[T; N]`. Fixed-size arrays can have multiple dimensions (e.g. "
"`int[3][4]`). In the Java backend, fixed-size arrays are represented as "
"array types."
msgstr ""

#: src/android/aidl/types/arrays.md
msgid "Arrays in parcelable fields always get translated to `Vec<T>`."
msgstr ""

#: src/android/aidl/types/objects.md
msgid ""
"AIDL objects can be sent either as a concrete AIDL type or as the type-"
"erased `IBinder` interface:"
msgstr ""

#: src/android/aidl/types/objects.md
#, fuzzy
msgid ""
"_birthday_service/aidl/com/example/birthdayservice/"
"IBirthdayInfoProvider.aidl_:"
msgstr ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"

#: src/android/aidl/types/objects.md
msgid "/** The same thing, but using a binder object. */"
msgstr ""

#: src/android/aidl/types/objects.md
msgid "/** The same thing, but using `IBinder`. */"
msgstr ""

#: src/android/aidl/types/objects.md
msgid "/// Rust struct implementing the `IBirthdayInfoProvider` interface.\n"
msgstr ""

#: src/android/aidl/types/objects.md
msgid "// Create a binder object for the `IBirthdayInfoProvider` interface.\n"
msgstr ""

#: src/android/aidl/types/objects.md
msgid "// Send the binder object to the service.\n"
msgstr ""

#: src/android/aidl/types/objects.md
msgid ""
"// Perform the same operation but passing the provider as an `SpIBinder`.\n"
msgstr ""

#: src/android/aidl/types/objects.md
msgid ""
"Note the usage of `BnBirthdayInfoProvider`. This serves the same purpose as "
"`BnBirthdayService` that we saw previously."
msgstr ""

#: src/android/aidl/types/parcelables.md
msgid "Binder for Rust supports sending parcelables directly:"
msgstr ""

#: src/android/aidl/types/parcelables.md
#, fuzzy
msgid "_birthday_service/aidl/com/example/birthdayservice/BirthdayInfo.aidl_:"
msgstr ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"

#: src/android/aidl/types/parcelables.md
msgid "/** The same thing, but with a parcelable. */"
msgstr ""

#: src/android/aidl/types/file-descriptor.md
msgid ""
"Files can be sent between Binder clients/servers using the "
"`ParcelFileDescriptor` type:"
msgstr ""

#: src/android/aidl/types/file-descriptor.md
msgid "/** The same thing, but loads info from a file. */"
msgstr ""

#: src/android/aidl/types/file-descriptor.md
msgid "// Open a file and put the birthday info in it.\n"
msgstr ""

#: src/android/aidl/types/file-descriptor.md
msgid "\"/data/local/tmp/birthday.info\""
msgstr ""

#: src/android/aidl/types/file-descriptor.md
#, fuzzy
msgid "\"{name}\""
msgstr "\"nyt areal: {}\""

#: src/android/aidl/types/file-descriptor.md
msgid "\"{years}\""
msgstr ""

#: src/android/aidl/types/file-descriptor.md
msgid "// Create a `ParcelFileDescriptor` from the file and send it.\n"
msgstr ""

#: src/android/aidl/types/file-descriptor.md
msgid ""
"// Convert the file descriptor to a `File`. `ParcelFileDescriptor` wraps\n"
"        // an `OwnedFd`, which can be cloned and then used to create a "
"`File`\n"
"        // object.\n"
msgstr ""

#: src/android/aidl/types/file-descriptor.md
#, fuzzy
msgid "\"Invalid file handle\""
msgstr "\"analyze_numbers\""

#: src/android/aidl/types/file-descriptor.md
msgid ""
"`ParcelFileDescriptor` wraps an `OwnedFd`, and so can be created from a "
"`File` (or any other type that wraps an `OwnedFd`), and can be used to "
"create a new `File` handle on the other side."
msgstr ""

#: src/android/aidl/types/file-descriptor.md
msgid ""
"Other types of file descriptors can be wrapped and sent, e.g. TCP, UDP, and "
"UNIX sockets."
msgstr ""

#: src/android/testing.md
#, fuzzy
msgid "Testing in Android"
msgstr "Rust i Android"

#: src/android/testing.md
msgid ""
"Building on [Testing](../testing.md), we will now look at how unit tests "
"work in AOSP. Use the `rust_test` module for your unit tests:"
msgstr ""

#: src/android/testing.md
#, fuzzy
msgid "_testing/Android.bp_:"
msgstr "_hello_rust/Android.bp_:"

#: src/android/testing.md
#, fuzzy
msgid "\"libleftpad\""
msgstr "\"libtextwrap\""

#: src/android/testing.md
msgid "\"leftpad\""
msgstr ""

#: src/android/testing.md
#, fuzzy
msgid "\"libleftpad_test\""
msgstr "\"libbirthday_bindgen_test\""

#: src/android/testing.md
msgid "\"leftpad_test\""
msgstr ""

#: src/android/testing.md src/android/interoperability/with-c/run-our-binary.md
msgid "\"general-tests\""
msgstr "\"general-tests\""

#: src/android/testing.md
msgid "\"libgoogletest_example\""
msgstr ""

#: src/android/testing.md
msgid "\"googletest_example\""
msgstr ""

#: src/android/testing.md
#, fuzzy
msgid "\"googletest.rs\""
msgstr "\"general-tests\""

#: src/android/testing.md
#, fuzzy
msgid "\"libgoogletest_rust\""
msgstr "\"liblog_rust\""

#: src/android/testing.md
msgid "\"libmockall_example\""
msgstr ""

#: src/android/testing.md
msgid "\"mockall_example\""
msgstr ""

#: src/android/testing.md
#, fuzzy
msgid "\"mockall.rs\""
msgstr "\"crab.rs\""

#: src/android/testing.md
#, fuzzy
msgid "\"libmockall\""
msgstr "\"libjni\""

#: src/android/testing.md
#, fuzzy
msgid "_testing/src/lib.rs_:"
msgstr "_hello_rust/src/lib.rs_:"

#: src/android/testing.md
msgid "//! Left-padding library.\n"
msgstr ""

#: src/android/testing.md
msgid "/// Left-pad `s` to `width`.\n"
msgstr ""

#: src/android/testing.md
#, fuzzy
msgid "\"{s:>width$}\""
msgstr "\"|{:^width$}|\""

#: src/android/testing.md
#, fuzzy
msgid "\"  foo\""
msgstr "\"foo\""

#: src/android/testing.md
#, fuzzy
msgid "\"foobar\""
msgstr "\"foo\""

#: src/android/testing.md
msgid "You can now run the test with"
msgstr ""

#: src/android/testing.md
msgid "The output looks like this:"
msgstr ""

#: src/android/testing.md
msgid ""
"```text\n"
"INFO: Elapsed time: 2.666s, Critical Path: 2.40s\n"
"INFO: 3 processes: 2 internal, 1 linux-sandbox.\n"
"INFO: Build completed successfully, 3 total actions\n"
"//comprehensive-rust-android/testing:libleftpad_test_host            PASSED "
"in 2.3s\n"
"    PASSED  libleftpad_test.tests::long_string (0.0s)\n"
"    PASSED  libleftpad_test.tests::short_string (0.0s)\n"
"Test cases: finished with 2 passing and 0 failing out of 2 test cases\n"
"```"
msgstr ""

#: src/android/testing.md
msgid ""
"Notice how you only mention the root of the library crate. Tests are found "
"recursively in nested modules."
msgstr ""

#: src/android/testing/googletest.md
msgid ""
"The [GoogleTest](https://docs.rs/googletest/) crate allows for flexible test "
"assertions using _matchers_:"
msgstr ""

#: src/android/testing/googletest.md
msgid "\"bar\""
msgstr "\"bar\""

#: src/android/testing/googletest.md
msgid "\"baz\""
msgstr ""

#: src/android/testing/googletest.md
msgid "\"xyz\""
msgstr ""

#: src/android/testing/googletest.md
msgid ""
"If we change the last element to `\"!\"`, the test fails with a structured "
"error message pin-pointing the error:"
msgstr ""

#: src/android/testing/googletest.md
msgid ""
"GoogleTest is not part of the Rust Playground, so you need to run this "
"example in a local environment. Use `cargo add googletest` to quickly add it "
"to an existing Cargo project."
msgstr ""

#: src/android/testing/googletest.md
msgid ""
"The `use googletest::prelude::*;` line imports a number of [commonly used "
"macros and types](https://docs.rs/googletest/latest/googletest/prelude/"
"index.html)."
msgstr ""

#: src/android/testing/googletest.md
msgid ""
"This just scratches the surface, there are many builtin matchers. Consider "
"going through the first chapter of [\"Advanced testing for Rust "
"applications\"](https://rust-exercises.com/advanced-testing/), a self-guided "
"Rust course: it provides a guided introduction to the library, with "
"exercises to help you get comfortable with `googletest` macros, its matchers "
"and its overall philosophy."
msgstr ""

#: src/android/testing/googletest.md
msgid ""
"A particularly nice feature is that mismatches in multi-line strings are "
"shown as a diff:"
msgstr ""

#: src/android/testing/googletest.md
msgid ""
"\"Memory safety found,\\n\\\n"
"                 Rust's strong typing guides the way,\\n\\\n"
"                 Secure code you'll write.\""
msgstr ""

#: src/android/testing/googletest.md
msgid ""
"\"Memory safety found,\\n\\\n"
"            Rust's silly humor guides the way,\\n\\\n"
"            Secure code you'll write.\""
msgstr ""

#: src/android/testing/googletest.md
msgid "shows a color-coded diff (colors not shown here):"
msgstr ""

#: src/android/testing/googletest.md
msgid ""
"The crate is a Rust port of [GoogleTest for C++](https://google.github.io/"
"googletest/)."
msgstr ""

#: src/android/testing/mocking.md
msgid ""
"For mocking, [Mockall](https://docs.rs/mockall/) is a widely used library. "
"You need to refactor your code to use traits, which you can then quickly "
"mock:"
msgstr ""

#: src/android/testing/mocking.md
msgid ""
"Mockall is the recommended mocking library in Android (AOSP). There are "
"other [mocking libraries available on crates.io](https://crates.io/keywords/"
"mock), in particular in the area of mocking HTTP services. The other mocking "
"libraries work in a similar fashion as Mockall, meaning that they make it "
"easy to get a mock implementation of a given trait."
msgstr ""

#: src/android/testing/mocking.md
msgid ""
"Note that mocking is somewhat _controversial_: mocks allow you to completely "
"isolate a test from its dependencies. The immediate result is faster and "
"more stable test execution. On the other hand, the mocks can be configured "
"wrongly and return output different from what the real dependencies would do."
msgstr ""

#: src/android/testing/mocking.md
msgid ""
"If at all possible, it is recommended that you use the real dependencies. As "
"an example, many databases allow you to configure an in-memory backend. This "
"means that you get the correct behavior in your tests, plus they are fast "
"and will automatically clean up after themselves."
msgstr ""

#: src/android/testing/mocking.md
msgid ""
"Similarly, many web frameworks allow you to start an in-process server which "
"binds to a random port on `localhost`. Always prefer this over mocking away "
"the framework since it helps you test your code in the real environment."
msgstr ""

#: src/android/testing/mocking.md
msgid ""
"Mockall is not part of the Rust Playground, so you need to run this example "
"in a local environment. Use `cargo add mockall` to quickly add Mockall to an "
"existing Cargo project."
msgstr ""

#: src/android/testing/mocking.md
msgid ""
"Mockall has a lot more functionality. In particular, you can set up "
"expectations which depend on the arguments passed. Here we use this to mock "
"a cat which becomes hungry 3 hours after the last time it was fed:"
msgstr ""

#: src/android/testing/mocking.md
msgid ""
"You can use `.times(n)` to limit the number of times a mock method can be "
"called to `n` --- the mock will automatically panic when dropped if this "
"isn't satisfied."
msgstr ""

#: src/android/logging.md
msgid ""
"You should use the `log` crate to automatically log to `logcat` (on-device) "
"or `stdout` (on-host):"
msgstr ""

#: src/android/logging.md
msgid "_hello_rust_logs/Android.bp_:"
msgstr "_hello_rust_logs/Android.bp_:"

#: src/android/logging.md
msgid "\"hello_rust_logs\""
msgstr "\"hello_rust_logs\""

#: src/android/logging.md
msgid "\"liblog_rust\""
msgstr "\"liblog_rust\""

#: src/android/logging.md
msgid "\"liblogger\""
msgstr "\"liblogger\""

#: src/android/logging.md
msgid "_hello_rust_logs/src/main.rs_:"
msgstr "_hello_rust_logs/src/main.rs_:"

#: src/android/logging.md
msgid "//! Rust logging demo.\n"
msgstr ""

#: src/android/logging.md
msgid "/// Logs a greeting.\n"
msgstr ""

#: src/android/logging.md
msgid "\"rust\""
msgstr "\"rust\""

#: src/android/logging.md
msgid "\"Starting program.\""
msgstr ""

#: src/android/logging.md
msgid "\"Things are going fine.\""
msgstr ""

#: src/android/logging.md
msgid "\"Something went wrong!\""
msgstr ""

#: src/android/logging.md src/android/interoperability/with-c/run-our-binary.md
#: src/android/interoperability/with-c/rust.md
msgid "Build, push, and run the binary on your device:"
msgstr ""

#: src/android/logging.md
#, fuzzy
msgid ""
"```shell\n"
"m hello_rust_logs\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_logs\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/hello_rust_logs\n"
"```"
msgstr ""
"```shell\n"
"m hello_rust_logs\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_logs /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/hello_rust_logs\n"
"```"

#: src/android/logging.md
msgid "The logs show up in `adb logcat`:"
msgstr ""

#: src/android/logging.md
msgid ""
"The logger implementation in `liblogger` is only needed in the final binary, "
"if you're logging from a library you only need the `log` facade crate."
msgstr ""

#: src/android/interoperability.md
msgid ""
"Rust has excellent support for interoperability with other languages. This "
"means that you can:"
msgstr ""

#: src/android/interoperability.md
msgid "Call Rust functions from other languages."
msgstr ""

#: src/android/interoperability.md
msgid "Call functions written in other languages from Rust."
msgstr ""

#: src/android/interoperability.md
msgid ""
"When you call functions in a foreign language, you're using a _foreign "
"function interface_, also known as FFI."
msgstr ""

#: src/android/interoperability.md
msgid ""
"This is a key ability of Rust: compiled code becomes indistinguishable from "
"compiled C or C++ code."
msgstr ""

#: src/android/interoperability.md
msgid ""
"Technically, we say that Rust can be compiled to the same [ABI](https://"
"en.wikipedia.org/wiki/Application_binary_interface) (application binary "
"interface) as C code."
msgstr ""

#: src/android/interoperability/with-c.md
msgid "Interoperability with C"
msgstr ""

#: src/android/interoperability/with-c.md
msgid ""
"Rust has full support for linking object files with a C calling convention. "
"Similarly, you can export Rust functions and call them from C."
msgstr ""

#: src/android/interoperability/with-c.md
msgid "You can do it by hand if you want:"
msgstr ""

#: src/android/interoperability/with-c.md
msgid "\"{x}, {abs_x}\""
msgstr "\"{x}, {abs_x}\""

#: src/android/interoperability/with-c.md
msgid ""
"We already saw this in the [Safe FFI Wrapper exercise](../../unsafe-rust/"
"exercise.md)."
msgstr ""

#: src/android/interoperability/with-c.md
msgid ""
"This assumes full knowledge of the target platform. Not recommended for "
"production."
msgstr ""

#: src/android/interoperability/with-c.md
msgid "We will look at better options next."
msgstr ""

#: src/android/interoperability/with-c.md
msgid ""
"The [`\"C\"` part](https://doc.rust-lang.org/reference/items/external-"
"blocks.html#abi) of the `extern` block tells Rust that `abs` can be called "
"using the C [ABI](https://en.wikipedia.org/wiki/"
"Application_binary_interface) (application binary interface)."
msgstr ""

#: src/android/interoperability/with-c.md
msgid ""
"The `safe fn abs` part tells Rust that `abs` is a safe function. By default, "
"extern functions are unsafe, but since `abs(x)` can't trigger undefined "
"behavior with any `x`, we can declare it safe."
msgstr ""

#: src/android/interoperability/with-c/c-library.md
msgid "Let's first create a small C library:"
msgstr ""

#: src/android/interoperability/with-c/c-library.md
msgid "_interoperability/bindgen/libbirthday.h_:"
msgstr "_interoperability/bindgen/libbirthday.h_:"

#: src/android/interoperability/with-c/c-library.md
msgid "_interoperability/bindgen/libbirthday.c_:"
msgstr "_interoperability/bindgen/libbirthday.c_:"

#: src/android/interoperability/with-c/c-library.md
msgid "<stdio.h>"
msgstr "<stdio.h>"

#: src/android/interoperability/with-c/c-library.md
#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday.h\""
msgstr "\"libbirthday.h\""

#: src/android/interoperability/with-c/c-library.md
msgid "\"+--------------\\n\""
msgstr "\"+--------------\\n\""

#: src/android/interoperability/with-c/c-library.md
msgid "\"| Happy Birthday %s!\\n\""
msgstr ""

#: src/android/interoperability/with-c/c-library.md
msgid "\"| Congratulations with the %i years!\\n\""
msgstr ""

#: src/android/interoperability/with-c/c-library.md
msgid "Add this to your `Android.bp` file:"
msgstr ""

#: src/android/interoperability/with-c/c-library.md
#: src/android/interoperability/with-c/bindgen.md
#: src/android/interoperability/with-c/run-our-binary.md
msgid "_interoperability/bindgen/Android.bp_:"
msgstr "_interoperability/bindgen/Android.bp_:"

#: src/android/interoperability/with-c/c-library.md
#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday\""
msgstr "\"libbirthday\""

#: src/android/interoperability/with-c/c-library.md
msgid "\"libbirthday.c\""
msgstr "\"libbirthday.c\""

#: src/android/interoperability/with-c/bindgen.md
msgid "Using Bindgen"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid ""
"The [bindgen](https://rust-lang.github.io/rust-bindgen/introduction.html) "
"tool can auto-generate bindings from a C header file."
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid ""
"Create a wrapper header file for the library (not strictly needed in this "
"example):"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "_interoperability/bindgen/libbirthday_wrapper.h_:"
msgstr "_interoperability/bindgen/libbirthday_wrapper.h_:"

#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday_bindgen\""
msgstr "\"libbirthday_bindgen\""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"birthday_bindgen\""
msgstr "\"birthday_bindgen\""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"libbirthday_wrapper.h\""
msgstr "\"libbirthday_wrapper.h\""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"bindings\""
msgstr "\"bindings\""

#: src/android/interoperability/with-c/bindgen.md
msgid "Finally, we can use the bindings in our Rust program:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"print_birthday_card\""
msgstr "\"print_birthday_card\""

#: src/android/interoperability/with-c/bindgen.md
msgid "\"main.rs\""
msgstr "\"main.rs\""

#: src/android/interoperability/with-c/bindgen.md
msgid "_interoperability/bindgen/main.rs_:"
msgstr "_interoperability/bindgen/main.rs_:"

#: src/android/interoperability/with-c/bindgen.md
msgid "//! Bindgen demo.\n"
msgstr "//! Bindgen-demo.\n"

#: src/android/interoperability/with-c/bindgen.md
msgid ""
"// SAFETY: The pointer we pass is valid because it came from a Rust\n"
"    // reference, and the `name` it contains refers to `name` above which "
"also\n"
"    // remains valid. `print_card` doesn't store either pointer to use "
"later\n"
"    // after it returns.\n"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid ""
"The Android build rules will automatically call `bindgen` for you behind the "
"scenes."
msgstr ""

#: src/android/interoperability/with-c/bindgen.md
msgid ""
"Notice that the Rust code in `main` is still hard to write. It is good "
"practice to encapsulate the output of `bindgen` in a Rust library which "
"exposes a safe interface to caller."
msgstr ""

#: src/android/interoperability/with-c/run-our-binary.md
#, fuzzy
msgid ""
"```shell\n"
"m print_birthday_card\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/print_birthday_card\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/print_birthday_card\n"
"```"
msgstr ""
"```shell\n"
"m print_birthday_card\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/print_birthday_card /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/print_birthday_card\n"
"```"

#: src/android/interoperability/with-c/run-our-binary.md
msgid "Finally, we can run auto-generated tests to ensure the bindings work:"
msgstr ""

#: src/android/interoperability/with-c/run-our-binary.md
msgid "\"libbirthday_bindgen_test\""
msgstr "\"libbirthday_bindgen_test\""

#: src/android/interoperability/with-c/run-our-binary.md
msgid "\":libbirthday_bindgen\""
msgstr "\":libbirthday_bindgen\""

#: src/android/interoperability/with-c/run-our-binary.md
msgid "\"none\""
msgstr "\"none\""

#: src/android/interoperability/with-c/run-our-binary.md
msgid "// Generated file, skip linting\n"
msgstr ""

#: src/android/interoperability/with-c/rust-library.md
msgid ""
"Exporting Rust functions and types to C is easy. Here's a simple Rust "
"library:"
msgstr ""

#: src/android/interoperability/with-c/rust-library.md
msgid "_interoperability/rust/libanalyze/analyze.rs_"
msgstr "_interoperability/rust/libanalyze/analyze.rs_"

#: src/android/interoperability/with-c/rust-library.md
msgid "//! Rust FFI demo.\n"
msgstr "//! Rust FFI-demo.\n"

#: src/android/interoperability/with-c/rust-library.md
msgid ""
"/// Analyze the numbers.\n"
"// SAFETY: There is no other global function of this name.\n"
msgstr ""

#: src/android/interoperability/with-c/rust-library.md
msgid "\"x ({x}) is smallest!\""
msgstr "\"x ({x}) er mindst!\""

#: src/android/interoperability/with-c/rust-library.md
msgid "\"y ({y}) is probably larger than x ({x})\""
msgstr "\"y ({y}) er muligvis st√∏rre end x ({x})\""

#: src/android/interoperability/with-c/rust-library.md
msgid "_interoperability/rust/libanalyze/Android.bp_"
msgstr "_interoperability/rust/libanalyze/Android.bp_"

#: src/android/interoperability/with-c/rust-library.md
#: src/android/interoperability/with-c/rust.md
msgid "\"libanalyze_ffi\""
msgstr "\"libanalyze_ffi\""

#: src/android/interoperability/with-c/rust-library.md
msgid "\"analyze_ffi\""
msgstr "\"analyze_ffi\""

#: src/android/interoperability/with-c/rust-library.md
msgid "\"analyze.rs\""
msgstr "\"analyze.rs\""

#: src/android/interoperability/with-c/rust-library.md
msgid ""
"`#[unsafe(no_mangle)]` disables Rust's usual name mangling, so the exported "
"symbol will just be the name of the function. You can also use "
"`#[unsafe(export_name = \"some_name\")]` to specify whatever name you want."
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid "Calling Rust"
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid "We can now call this from a C binary:"
msgstr ""

#: src/android/interoperability/with-c/rust.md
msgid "_interoperability/rust/libanalyze/analyze.h_"
msgstr "_interoperability/rust/libanalyze/analyze.h_"

#: src/android/interoperability/with-c/rust.md
msgid "_interoperability/rust/analyze/main.c_"
msgstr "_interoperability/rust/analyze/main.c_"

#: src/android/interoperability/with-c/rust.md
msgid "\"analyze.h\""
msgstr "\"analyze.h\""

#: src/android/interoperability/with-c/rust.md
msgid "_interoperability/rust/analyze/Android.bp_"
msgstr "_interoperability/rust/analyze/Android.bp_"

#: src/android/interoperability/with-c/rust.md
msgid "\"analyze_numbers\""
msgstr "\"analyze_numbers\""

#: src/android/interoperability/with-c/rust.md
msgid "\"main.c\""
msgstr "\"main.c\""

#: src/android/interoperability/with-c/rust.md
#, fuzzy
msgid ""
"```shell\n"
"m analyze_numbers\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/analyze_numbers\" /data/local/"
"tmp\n"
"adb shell /data/local/tmp/analyze_numbers\n"
"```"
msgstr ""
"```shell\n"
"m analyze_numbers\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/analyze_numbers /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/analyze_numbers\n"
"```"

#: src/android/interoperability/cpp.md
msgid ""
"The [CXX crate](https://cxx.rs/) enables safe interoperability between Rust "
"and C++."
msgstr ""

#: src/android/interoperability/cpp.md
msgid "The overall approach looks like this:"
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid ""
"CXX relies on a description of the function signatures that will be exposed "
"from each language to the other. You provide this description using extern "
"blocks in a Rust module annotated with the `#[cxx::bridge]` attribute macro."
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid "\"org::blobstore\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid "// Shared structs with fields visible to both languages.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/generated-cpp.md
msgid "// Rust types and signatures exposed to C++.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/rust-bridge.md
#: src/android/interoperability/cpp/generated-cpp.md
#: src/android/interoperability/cpp/rust-result.md
#: src/chromium/interoperability-with-cpp/example-bindings.md
#: src/chromium/interoperability-with-cpp/error-handling-qr.md
#: src/chromium/interoperability-with-cpp/error-handling-png.md
#, fuzzy
msgid "\"Rust\""
msgstr "\"rust\""

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/cpp-bridge.md
msgid "// C++ types and signatures exposed to Rust.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/cpp-bridge.md
#: src/android/interoperability/cpp/cpp-exception.md
#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "\"C++\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md
#: src/android/interoperability/cpp/cpp-bridge.md
msgid "\"include/blobstore.h\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid "The bridge is generally declared in an `ffi` module within your crate."
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid ""
"From the declarations made in the bridge module, CXX will generate matching "
"Rust and C++ type/function definitions in order to expose those items to "
"both languages."
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid ""
"To view the generated Rust code, use [cargo-expand](https://github.com/"
"dtolnay/cargo-expand) to view the expanded proc macro. For most of the "
"examples you would use `cargo expand ::ffi` to expand just the `ffi` module "
"(though this doesn't apply for Android projects)."
msgstr ""

#: src/android/interoperability/cpp/bridge.md
msgid "To view the generated C++ code, look in `target/cxxbridge`."
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
msgid "Rust Bridge Declarations"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
msgid "// Opaque type\n"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
msgid "// Method on `MyType`\n"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
#, fuzzy
msgid "// Free function\n"
msgstr "Funktioner"

#: src/android/interoperability/cpp/rust-bridge.md
msgid ""
"Items declared in the `extern \"Rust\"` reference items that are in scope in "
"the parent module."
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md
msgid ""
"The CXX code generator uses your `extern \"Rust\"` section(s) to produce a C+"
"+ header file containing the corresponding C++ declarations. The generated "
"header has the same path as the Rust source file containing the bridge, "
"except with a .rs.h file extension."
msgstr ""

#: src/android/interoperability/cpp/generated-cpp.md
msgid "Results in (roughly) the following C++:"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid "C++ Bridge Declarations"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid "Results in (roughly) the following Rust:"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid "\"org$blobstore$cxxbridge1$new_blobstore_client\""
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid "\"org$blobstore$cxxbridge1$BlobstoreClient$put\""
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid ""
"The programmer does not need to promise that the signatures they have typed "
"in are accurate. CXX performs static assertions that the signatures exactly "
"correspond with what is declared in C++."
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md
msgid ""
"`unsafe extern` blocks allow you to declare C++ functions that are safe to "
"call from Rust."
msgstr ""

#: src/android/interoperability/cpp/shared-types.md
msgid "// A=1, J=11, Q=12, K=13\n"
msgstr ""

#: src/android/interoperability/cpp/shared-types.md
msgid "Only C-like (unit) enums are supported."
msgstr ""

#: src/android/interoperability/cpp/shared-types.md
msgid ""
"A limited number of traits are supported for `#[derive()]` on shared types. "
"Corresponding functionality is also generated for the C++ code, e.g. if you "
"derive `Hash` also generates an implementation of `std::hash` for the "
"corresponding C++ type."
msgstr ""

#: src/android/interoperability/cpp/shared-enums.md
#, fuzzy
msgid "Generated Rust:"
msgstr "\"general-tests\""

#: src/android/interoperability/cpp/shared-enums.md
msgid "Generated C++:"
msgstr ""

#: src/android/interoperability/cpp/shared-enums.md
msgid ""
"On the Rust side, the code generated for shared enums is actually a struct "
"wrapping a numeric value. This is because it is not UB in C++ for an enum "
"class to hold a value different from all of the listed variants, and our "
"Rust representation needs to have the same behavior."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid "\"fallible1 requires depth > 0\""
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid "\"Success!\""
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid ""
"Rust functions that return `Result` are translated to exceptions on the C++ "
"side."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid ""
"The exception thrown will always be of type `rust::Error`, which primarily "
"exposes a way to get the error message string. The error message will come "
"from the error type's `Display` impl."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md
msgid ""
"A panic unwinding from Rust to C++ will always cause the process to "
"immediately terminate."
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md
msgid "\"example/include/example.h\""
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md
#, fuzzy
msgid "\"Error: {}\""
msgstr "\"Fejl: {err}\""

#: src/android/interoperability/cpp/cpp-exception.md
msgid ""
"C++ functions declared to return a `Result` will catch any thrown exception "
"on the C++ side and return it as an `Err` value to the calling Rust function."
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md
msgid ""
"If an exception is thrown from an extern \"C++\" function that is not "
"declared by the CXX bridge to return `Result`, the program calls C++'s "
"`std::terminate`. The behavior is equivalent to the same exception being "
"thrown through a `noexcept` C++ function."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "C++ Type"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`rust::String`"
msgstr "`rust_bindgen`"

#: src/android/interoperability/cpp/type-mapping.md
msgid "`&str`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`rust::Str`"
msgstr "`rust_test`"

#: src/android/interoperability/cpp/type-mapping.md
msgid "`CxxString`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`std::string`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`&[T]`/`&mut [T]`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`rust::Slice`"
msgstr "`rust_ffi`"

#: src/android/interoperability/cpp/type-mapping.md
msgid "`rust::Box<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`UniquePtr<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid "`std::unique_ptr<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`rust::Vec<T>`"
msgstr "`mpsc::Receiver<T>`"

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`CxxVector<T>`"
msgstr "`Cell<T>`"

#: src/android/interoperability/cpp/type-mapping.md
#, fuzzy
msgid "`std::vector<T>`"
msgstr "`mpsc::Receiver<T>`"

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"These types can be used in the fields of shared structs and the arguments "
"and returns of extern functions."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"Note that Rust's `String` does not map directly to `std::string`. There are "
"a few reasons for this:"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"`std::string` does not uphold the UTF-8 invariant that `String` requires."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"The two types have different layouts in memory and so can't be passed "
"directly between languages."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md
msgid ""
"`std::string` requires move constructors that don't match Rust's move "
"semantics, so a `std::string` can't be passed by value to Rust."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
#: src/android/interoperability/cpp/android-build-cpp.md
#: src/android/interoperability/cpp/android-build-rust.md
#, fuzzy
msgid "Building in Android"
msgstr "Rust i Android"

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid ""
"Create two genrules: One to generate the CXX header, and one to generate the "
"CXX source file. These are then used as inputs to the `cc_library_static`."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid ""
"// Generate a C++ header containing the C++ bindings\n"
"// to the Rust exported functions in lib.rs.\n"
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
#: src/android/interoperability/cpp/android-build-cpp.md
msgid "\"libcxx_test_bridge_header\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"cxxbridge\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"$(location cxxbridge) $(in) --header > $(out)\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
#: src/android/interoperability/cpp/android-build-rust.md
#, fuzzy
msgid "\"lib.rs\""
msgstr "\"src/lib.rs\""

#: src/android/interoperability/cpp/android-cpp-genrules.md
#, fuzzy
msgid "\"lib.rs.h\""
msgstr "\"src/lib.rs\""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "// Generate the C++ code that Rust calls into.\n"
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
#: src/android/interoperability/cpp/android-build-cpp.md
msgid "\"libcxx_test_bridge_code\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid "\"$(location cxxbridge) $(in) > $(out)\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
#, fuzzy
msgid "\"lib.rs.cc\""
msgstr "\"src/lib.rs\""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid ""
"The `cxxbridge` tool is a standalone tool that generates the C++ side of the "
"bridge module. It is included in Android and available as a Soong tool."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md
msgid ""
"By convention, if your Rust source file is `lib.rs` your header file will be "
"named `lib.rs.h` and your source file will be named `lib.rs.cc`. This naming "
"convention isn't enforced, though."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid ""
"Create a `cc_library_static` to build the C++ library, including the CXX "
"generated header and source file."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
#: src/android/interoperability/cpp/android-build-rust.md
#, fuzzy
msgid "\"libcxx_test_cpp\""
msgstr "\"libtextwrap\""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid "\"cxx_test.cpp\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid "\"cxx-bridge-header\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid ""
"Point out that `libcxx_test_bridge_header` and `libcxx_test_bridge_code` are "
"the dependencies for the CXX-generated C++ bindings. We'll show how these "
"are setup on the next slide."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid ""
"Note that you also need to depend on the `cxx-bridge-header` library in "
"order to pull in common CXX definitions."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md
msgid ""
"Full docs for using CXX in Android can be found in [the Android docs]"
"(https://source.android.com/docs/setup/build/rust/building-rust-modules/"
"android-rust-patterns#rust-cpp-interop-using-cxx). You may want to share "
"that link with the class so that students know where they can find these "
"instructions again in the future."
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md
msgid ""
"Create a `rust_binary` that depends on `libcxx` and your `cc_library_static`."
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md
msgid "\"cxx_test\""
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md
#, fuzzy
msgid "\"libcxx\""
msgstr "\"libjni\""

#: src/android/interoperability/java.md
msgid "Interoperability with Java"
msgstr ""

#: src/android/interoperability/java.md
msgid ""
"Java can load shared objects via [Java Native Interface (JNI)](https://"
"en.wikipedia.org/wiki/Java_Native_Interface). The [`jni` crate](https://"
"docs.rs/jni/) allows you to create a compatible library."
msgstr ""

#: src/android/interoperability/java.md
msgid "First, we create a Rust function to export to Java:"
msgstr ""

#: src/android/interoperability/java.md
msgid "_interoperability/java/src/lib.rs_:"
msgstr ""

#: src/android/interoperability/java.md
msgid "//! Rust <-> Java FFI demo.\n"
msgstr ""

#: src/android/interoperability/java.md
msgid ""
"/// HelloWorld::hello method implementation.\n"
"// SAFETY: There is no other global function of this name.\n"
msgstr ""

#: src/android/interoperability/java.md
msgid "\"system\""
msgstr "\"system\""

#: src/android/interoperability/java.md
msgid "\"Hello, {input}!\""
msgstr ""

#: src/android/interoperability/java.md
msgid "_interoperability/java/Android.bp_:"
msgstr "_interoperability/java/Android.bp_:"

#: src/android/interoperability/java.md
msgid "\"libhello_jni\""
msgstr "\"libhello_jni\""

#: src/android/interoperability/java.md
msgid "\"hello_jni\""
msgstr "\"hello_jni\""

#: src/android/interoperability/java.md
msgid "\"libjni\""
msgstr "\"libjni\""

#: src/android/interoperability/java.md
msgid "We then call this function from Java:"
msgstr ""

#: src/android/interoperability/java.md
msgid "_interoperability/java/HelloWorld.java_:"
msgstr ""

#: src/android/interoperability/java.md
msgid "\"helloworld_jni\""
msgstr "\"helloworld_jni\""

#: src/android/interoperability/java.md
msgid "\"HelloWorld.java\""
msgstr "\"HelloWorld.java\""

#: src/android/interoperability/java.md
msgid "\"HelloWorld\""
msgstr "\"HelloWorld\""

#: src/android/interoperability/java.md
msgid "Finally, you can build, sync, and run the binary:"
msgstr ""

#: src/android/interoperability/java.md
msgid ""
"The `unsafe(no_mangle)` attribute instructs Rust to emit the "
"`Java_HelloWorld_hello` symbol exactly as written. This is important so that "
"Java can recognize the symbol as a `hello` method on the `HelloWorld` class."
msgstr ""

#: src/android/interoperability/java.md
msgid ""
"By default, Rust will mangle (rename) symbols so that a binary can link in "
"two versions of the same Rust crate."
msgstr ""

#: src/chromium.md
#, fuzzy
msgid "Welcome to Rust in Chromium"
msgstr "\"Velkommen til RustOS 3.14\""

#: src/chromium.md
msgid ""
"Rust is supported for third-party libraries in Chromium, with first-party "
"glue code to connect between Rust and existing Chromium C++ code."
msgstr ""

#: src/chromium.md
msgid ""
"Today, we'll call into Rust to do something silly with strings. If you've "
"got a corner of the code where you're displaying a UTF8 string to the user, "
"feel free to follow this recipe in your part of the codebase instead of the "
"exact part we talk about."
msgstr ""

#: src/chromium/setup.md
msgid ""
"Make sure you can build and run Chromium. Any platform and set of build "
"flags is OK, so long as your code is relatively recent (commit position "
"1223636 onwards, corresponding to November 2023):"
msgstr ""

#: src/chromium/setup.md
msgid ""
"(A component, debug build is recommended for quickest iteration time. This "
"is the default!)"
msgstr ""

#: src/chromium/setup.md
msgid ""
"See [How to build Chromium](https://www.chromium.org/developers/how-tos/get-"
"the-code/) if you aren't already at that point. Be warned: setting up to "
"build Chromium takes time."
msgstr ""

#: src/chromium/setup.md
msgid "It's also recommended that you have Visual Studio code installed."
msgstr ""

#: src/chromium/setup.md
msgid "About the exercises"
msgstr ""

#: src/chromium/setup.md
msgid ""
"This part of the course has a series of exercises that build on each other. "
"We'll be doing them spread throughout the course instead of just at the end. "
"If you don't have time to complete a certain part, don't worry: you can "
"catch up in the next slot."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"The Rust community typically uses `cargo` and libraries from [crates.io]"
"(https://crates.io/). Chromium is built using `gn` and `ninja` and a curated "
"set of dependencies."
msgstr ""

#: src/chromium/cargo.md
msgid "When writing code in Rust, your choices are:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Use `gn` and `ninja` with the help of the templates from `//build/rust/"
"*.gni` (e.g. `rust_static_library` that we'll meet later). This uses "
"Chromium's audited toolchain and crates."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Use `cargo`, but [restrict yourself to Chromium's audited toolchain and "
"crates](https://chromium.googlesource.com/chromium/src/+/refs/heads/main/"
"docs/rust.md#Using-cargo)"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Use `cargo`, trusting a [toolchain](https://rustup.rs/) and/or [crates "
"downloaded from the internet](https://crates.io/)"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"From here on we'll be focusing on `gn` and `ninja`, because this is how Rust "
"code can be built into the Chromium browser. At the same time, Cargo is an "
"important part of the Rust ecosystem and you should keep it in your toolbox."
msgstr ""

#: src/chromium/cargo.md
#, fuzzy
msgid "Mini exercise"
msgstr "√òvelser"

#: src/chromium/cargo.md
msgid "Split into small groups and:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Brainstorm scenarios where `cargo` may offer an advantage and assess the "
"risk profile of these scenarios."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Discuss which tools, libraries, and groups of people need to be trusted when "
"using `gn` and `ninja`, offline `cargo`, etc."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Ask students to avoid peeking at the speaker notes before completing the "
"exercise. Assuming folks taking the course are physically together, ask them "
"to discuss in small groups of 3-4 people."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Notes/hints related to the first part of the exercise (\"scenarios where "
"Cargo may offer an advantage\"):"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"It's fantastic that when writing a tool, or prototyping a part of Chromium, "
"one has access to the rich ecosystem of crates.io libraries. There is a "
"crate for almost anything and they are usually quite pleasant to use. "
"(`clap` for command-line parsing, `serde` for serializing/deserializing to/"
"from various formats, `itertools` for working with iterators, etc.)."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`cargo` makes it easy to try a library (just add a single line to "
"`Cargo.toml` and start writing code)"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"It may be worth comparing how CPAN helped make `perl` a popular choice. Or "
"comparing with `python` + `pip`."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Development experience is made really nice not only by core Rust tools (e.g. "
"using `rustup` to switch to a different `rustc` version when testing a crate "
"that needs to work on nightly, current stable, and older stable) but also by "
"an ecosystem of third-party tools (e.g. Mozilla provides `cargo vet` for "
"streamlining and sharing security audits; `criterion` crate gives a "
"streamlined way to run benchmarks)."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`cargo` makes it easy to add a tool via `cargo install --locked cargo-vet`."
msgstr ""

#: src/chromium/cargo.md
msgid "It may be worth comparing with Chrome Extensions or VScode extensions."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Broad, generic examples of projects where `cargo` may be the right choice:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Perhaps surprisingly, Rust is becoming increasingly popular in the industry "
"for writing command line tools. The breadth and ergonomics of libraries is "
"comparable to Python, while being more robust (thanks to the rich type "
"system) and running faster (as a compiled, rather than interpreted language)."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Participating in the Rust ecosystem requires using standard Rust tools like "
"Cargo. Libraries that want to get external contributions, and want to be "
"used outside of Chromium (e.g. in Bazel or Android/Soong build environments) "
"should probably use Cargo."
msgstr ""

#: src/chromium/cargo.md
msgid "Examples of Chromium-related projects that are `cargo`\\-based:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`serde_json_lenient` (experimented with in other parts of Google which "
"resulted in PRs with performance improvements)"
msgstr ""

#: src/chromium/cargo.md
msgid "Fontations libraries like `font-types`"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`gnrt` tool (we will meet it later in the course) which depends on `clap` "
"for command-line parsing and on `toml` for configuration files."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Disclaimer: a unique reason for using `cargo` was unavailability of `gn` "
"when building and bootstrapping Rust standard library when building Rust "
"toolchain."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`run_gnrt.py` uses Chromium's copy of `cargo` and `rustc`. `gnrt` depends on "
"third-party libraries downloaded from the internet, but `run_gnrt.py` asks "
"`cargo` that only `--locked` content is allowed via `Cargo.lock`.)"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Students may identify the following items as being implicitly or explicitly "
"trusted:"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`rustc` (the Rust compiler) which in turn depends on the LLVM libraries, the "
"Clang compiler, the `rustc` sources (fetched from GitHub, reviewed by Rust "
"compiler team), binary Rust compiler downloaded for bootstrapping"
msgstr ""

#: src/chromium/cargo.md
msgid ""
"`rustup` (it may be worth pointing out that `rustup` is developed under the "
"umbrella of the https://github.com/rust-lang/ organization - same as `rustc`)"
msgstr ""

#: src/chromium/cargo.md
msgid "`cargo`, `rustfmt`, etc."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Various internal infrastructure (bots that build `rustc`, system for "
"distributing the prebuilt toolchain to Chromium engineers, etc.)"
msgstr ""

#: src/chromium/cargo.md
msgid "Cargo tools like `cargo audit`, `cargo vet`, etc."
msgstr ""

#: src/chromium/cargo.md
msgid ""
"Rust libraries vendored into `//third_party/rust` (audited by "
"security@chromium.org)"
msgstr ""

#: src/chromium/cargo.md
msgid "Other Rust libraries (some niche, some quite popular and commonly used)"
msgstr ""

#: src/chromium/policy.md
msgid "Chromium Rust policy"
msgstr ""

#: src/chromium/policy.md
msgid ""
"Chromium's Rust policy can be found [here](https://source.chromium.org/"
"chromium/chromium/src/+/main:docs/rust.md;l=22). Rust can be used for both "
"first-party and third-party code."
msgstr ""

#: src/chromium/policy.md
msgid "Using Rust for pure first-party code looks like this:"
msgstr ""

#: src/chromium/policy.md
#, fuzzy
msgid ""
"```bob\n"
"\"C++\"                           Rust\n"
".- - - - - - - - - -.           .- - - - - - - - - - -.\n"
":                   :           :                     :\n"
": Existing Chromium :           :  Chromium Rust      :\n"
": \"C++\"             :           :  code               :\n"
": +---------------+ :           : +----------------+  :\n"
": |               | :           : |                |  :\n"
": |         o-----+-+-----------+-+->              |  :\n"
": |               | : Language  : |                |  :\n"
": +---------------+ : boundary  : +----------------+  :\n"
":                   :           :                     :\n"
"`- - - - - - - - - -'           `- - - - - - - - - - -'\n"
"```"
msgstr ""
"```bob\n"
" Stak                            Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"-.\n"
":                         :     :                                             :\n"
":    "
"list                 :     :                                             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":   | 1  | o--+-----------+-----+--->| 2  | o--+--->| // | null "
"|             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":                         :     :                                             :\n"
":                         :     :                                             :\n"
"`- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"-'\n"
"```"

#: src/chromium/policy.md
msgid ""
"The third-party case is also common. It's likely that you'll also need a "
"small amount of first-party glue code, because very few Rust libraries "
"directly expose a C/C++ API."
msgstr ""

#: src/chromium/policy.md
#, fuzzy
msgid ""
"```bob\n"
"\"C++\"                           Rust\n"
".- - - - - - - - - -.           .- - - - - - - - - - - - - - - - - - - - - - "
"-.\n"
":                   :           :                                             :\n"
": Existing Chromium :           :  Chromium Rust              Existing "
"Rust   :\n"
": \"C++\"             :           :  \"wrapper\"                  "
"crate           :\n"
": +---------------+ :           : +----------------+          +-------------"
"+ :\n"
": |               | :           : |                |          |             "
"| :\n"
": |         o-----+-+-----------+-+->            o-+----------+-->          "
"| :\n"
": |               | : Language  : |                | Crate    |             "
"| :\n"
": +---------------+ : boundary  : +----------------+ API      +-------------"
"+ :\n"
":                   :           :                                             :\n"
"`- - - - - - - - - -'           `- - - - - - - - - - - - - - - - - - - - - - "
"-'\n"
"```"
msgstr ""
"```bob\n"
" Stak                            Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"-.\n"
":                         :     :                                             :\n"
":    "
"list                 :     :                                             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":   | 1  | o--+-----------+-----+--->| 2  | o--+--->| // | null "
"|             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":                         :     :                                             :\n"
":                         :     :                                             :\n"
"`- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"-'\n"
"```"

#: src/chromium/policy.md
msgid ""
"The scenario of using a third-party crate is the more complex one, so "
"today's course will focus on:"
msgstr ""

#: src/chromium/policy.md
msgid "Bringing in third-party Rust libraries (\"crates\")"
msgstr ""

#: src/chromium/policy.md
msgid ""
"Writing glue code to be able to use those crates from Chromium C++. (The "
"same techniques are used when working with first-party Rust code)."
msgstr ""

#: src/chromium/build-rules.md
msgid "Build rules"
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"Rust code is usually built using `cargo`. Chromium builds with `gn` and "
"`ninja` for efficiency --- its static rules allow maximum parallelism. Rust "
"is no exception."
msgstr ""

#: src/chromium/build-rules.md
msgid "Adding Rust code to Chromium"
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"In some existing Chromium `BUILD.gn` file, declare a `rust_static_library`:"
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"You can also add `deps` on other Rust targets. Later we'll use this to "
"depend upon third party code."
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"You must specify _both_ the crate root, _and_ a full list of sources. The "
"`crate_root` is the file given to the Rust compiler representing the root "
"file of the compilation unit --- typically `lib.rs`. `sources` is a complete "
"list of all source files which `ninja` needs in order to determine when "
"rebuilds are necessary."
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"(There's no such thing as a Rust `source_set`, because in Rust, an entire "
"crate is a compilation unit. A `static_library` is the smallest unit.)"
msgstr ""

#: src/chromium/build-rules.md
msgid ""
"Students might be wondering why we need a gn template, rather than using "
"[gn's built-in support for Rust static libraries](https://"
"gn.googlesource.com/gn/+/main/docs/reference.md#func_static_library). The "
"answer is that this template provides support for CXX interop, Rust "
"features, and unit tests, some of which we'll use later."
msgstr ""

#: src/chromium/build-rules/unsafe.md
msgid "Including `unsafe` Rust Code"
msgstr ""

#: src/chromium/build-rules/unsafe.md
msgid ""
"Unsafe Rust code is forbidden in `rust_static_library` by default --- it "
"won't compile. If you need unsafe Rust code, add `allow_unsafe = true` to "
"the gn target. (Later in the course we'll see circumstances where this is "
"necessary.)"
msgstr ""

#: src/chromium/build-rules/unsafe.md
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [\n"
"    \"lib.rs\",\n"
"    \"hippopotamus.rs\"\n"
"  ]\n"
"  allow_unsafe = true\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules/depending.md
msgid "Simply add the above target to the `deps` of some Chromium C++ target."
msgstr ""

#: src/chromium/build-rules/depending.md
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"}\n"
"\n"
"# or source_set, static_library etc.\n"
"component(\"preexisting_cpp\") {\n"
"  deps = [ \":my_rust_lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Types are elided in Rust code, which makes a good IDE even more useful than "
"for C++. Visual Studio code works well for Rust in Chromium. To use it,"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Ensure your VSCode has the `rust-analyzer` extension, not earlier forms of "
"Rust support"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"`gn gen out/Debug --export-rust-project` (or equivalent for your output "
"directory)"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid "`ln -s out/Debug/rust-project.json rust-project.json`"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"A demo of some of the code annotation and exploration features of rust-"
"analyzer might be beneficial if the audience are naturally skeptical of IDEs."
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"The following steps may help with the demo (but feel free to instead use a "
"piece of Chromium-related Rust that you are most familiar with):"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid "Open `components/qr_code_generator/qr_code_generator_ffi_glue.rs`"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Place the cursor over the `QrCode::new` call (around line 26) in "
"\\`qr_code_generator_ffi_glue.rs"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Demo **show documentation** (typical bindings: vscode = ctrl k i; vim/CoC = "
"K)."
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Demo **go to definition** (typical bindings: vscode = F12; vim/CoC = g d). "
"(This will take you to `//third_party/rust/.../qr_code-.../src/lib.rs`.)"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Demo **outline** and navigate to the `QrCode::with_bits` method (around line "
"164; the outline is in the file explorer pane in vscode; typical vim/CoC "
"bindings = space o)"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"Demo **type annotations** (there are quite a few nice examples in the "
"`QrCode::with_bits` method)"
msgstr ""

#: src/chromium/build-rules/vscode.md
msgid ""
"It may be worth pointing out that `gn gen ... --export-rust-project` will "
"need to be rerun after editing `BUILD.gn` files (which we will do a few "
"times throughout the exercises in this session)."
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid "Build rules exercise"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"In your Chromium build, add a new Rust target to `//ui/base/BUILD.gn` "
"containing:"
msgstr ""

#: src/exercises/chromium/build-rules.md src/bare-metal/aps/inline-assembly.md
#: src/bare-metal/aps/uart/using.md src/bare-metal/aps/safemmio/using.md
#: src/bare-metal/aps/logging/using.md
msgid "// SAFETY: There is no other global function of this name.\n"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"**Important**: note that `no_mangle` here is considered a type of unsafety "
"by the Rust compiler, so you'll need to allow unsafe code in your `gn` "
"target."
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Add this new Rust target as a dependency of `//ui/base:base`. Declare this "
"function at the top of `ui/base/resource/resource_bundle.cc` (later, we'll "
"see how this can be automated by bindings generation tools):"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Call this function from somewhere in `ui/base/resource/resource_bundle.cc` - "
"we suggest the top of `ResourceBundle::MaybeMangleLocalizedString`. Build "
"and run Chromium, and ensure that \"Hello from Rust!\" is printed lots of "
"times."
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"If you use VSCode, now set up Rust to work well in VSCode. It will be useful "
"in subsequent exercises. If you've succeeded, you will be able to use right-"
"click \"Go to definition\" on `println!`."
msgstr ""

#: src/exercises/chromium/build-rules.md
#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Where to find help"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"The options available to the [`rust_static_library` gn template](https://"
"source.chromium.org/chromium/chromium/src/+/main:build/rust/"
"rust_static_library.gni;l=16)"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Information about [`#[unsafe(no_mangle)]`](https://doc.rust-lang.org/beta/"
"reference/abi.html#the-no_mangle-attribute)"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Information about [`extern \"C\"`](https://doc.rust-lang.org/std/"
"keyword.extern.html)"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"Information about gn's [`--export-rust-project`](https://gn.googlesource.com/"
"gn/+/main/docs/reference.md#compilation-database) switch"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"[How to install rust-analyzer in VSCode](https://code.visualstudio.com/docs/"
"languages/rust)"
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"This example is unusual because it boils down to the lowest-common-"
"denominator interop language, C. Both C++ and Rust can natively declare and "
"call C ABI functions. Later in the course, we'll connect C++ directly to "
"Rust."
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"`allow_unsafe = true` is required here because `#[unsafe(no_mangle)]` might "
"allow Rust to generate two functions with the same name, and Rust can no "
"longer guarantee that the right one is called."
msgstr ""

#: src/exercises/chromium/build-rules.md
msgid ""
"If you need a pure Rust executable, you can also do that using the "
"`rust_executable` gn template."
msgstr ""

#: src/chromium/testing.md
msgid ""
"Rust community typically authors unit tests in a module placed in the same "
"source file as the code being tested. This was covered [earlier](../"
"testing.md) in the course and looks like this:"
msgstr ""

#: src/chromium/testing.md
msgid ""
"In Chromium we place unit tests in a separate source file and we continue to "
"follow this practice for Rust --- this makes tests consistently discoverable "
"and helps to avoid rebuilding `.rs` files a second time (in the `test` "
"configuration)."
msgstr ""

#: src/chromium/testing.md
msgid ""
"This results in the following options for testing Rust code in Chromium:"
msgstr ""

#: src/chromium/testing.md
msgid ""
"Native Rust tests (i.e. `#[test]`). Discouraged outside of `//third_party/"
"rust`."
msgstr ""

#: src/chromium/testing.md
msgid ""
"`gtest` tests authored in C++ and exercising Rust via FFI calls. Sufficient "
"when Rust code is just a thin FFI layer and the existing unit tests provide "
"sufficient coverage for the feature."
msgstr ""

#: src/chromium/testing.md
msgid ""
"`gtest` tests authored in Rust and using the crate under test through its "
"public API (using `pub mod for_testing { ... }` if needed). This is the "
"subject of the next few slides."
msgstr ""

#: src/chromium/testing.md
msgid ""
"Mention that native Rust tests of third-party crates should eventually be "
"exercised by Chromium bots. (Such testing is needed rarely --- only after "
"adding or updating third-party crates.)"
msgstr ""

#: src/chromium/testing.md
msgid ""
"Some examples may help illustrate when C++ `gtest` vs Rust `gtest` should be "
"used:"
msgstr ""

#: src/chromium/testing.md
msgid ""
"QR has very little functionality in the first-party Rust layer (it's just a "
"thin FFI glue) and therefore uses the existing C++ unit tests for testing "
"both the C++ and the Rust implementation (parameterizing the tests so they "
"enable or disable Rust using a `ScopedFeatureList`)."
msgstr ""

#: src/chromium/testing.md
msgid ""
"Hypothetical/WIP PNG integration may need memory-safe implementations of "
"pixel transformations that are provided by `libpng` but missing in the `png` "
"crate - e.g. RGBA => BGRA, or gamma correction. Such functionality may "
"benefit from separate tests authored in Rust."
msgstr ""

#: src/chromium/testing/rust-gtest-interop.md
msgid ""
"The [`rust_gtest_interop`](https://chromium.googlesource.com/chromium/src/+/"
"main/testing/rust_gtest_interop/README.md) library provides a way to:"
msgstr ""

#: src/chromium/testing/rust-gtest-interop.md
msgid ""
"Use a Rust function as a `gtest` testcase (using the `#[gtest(...)]` "
"attribute)"
msgstr ""

#: src/chromium/testing/rust-gtest-interop.md
msgid ""
"Use `expect_eq!` and similar macros (similar to `assert_eq!` but not "
"panicking and not terminating the test when the assertion fails)."
msgstr ""

#: src/chromium/testing/rust-gtest-interop.md
#, fuzzy
msgid "Example:"
msgstr "Eksempel"

#: src/chromium/testing/build-gn.md
msgid ""
"The simplest way to build Rust `gtest` tests is to add them to an existing "
"test binary that already contains tests authored in C++. For example:"
msgstr ""

#: src/chromium/testing/build-gn.md
msgid ""
"```gn\n"
"test(\"ui_base_unittests\") {\n"
"  ...\n"
"  sources += [ \"my_rust_lib_unittest.rs\" ]\n"
"  deps += [ \":my_rust_lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/testing/build-gn.md
msgid ""
"Authoring Rust tests in a separate `static_library` also works, but requires "
"manually declaring the dependency on the support libraries:"
msgstr ""

#: src/chromium/testing/build-gn.md
msgid ""
"```gn\n"
"rust_static_library(\"my_rust_lib_unittests\") {\n"
"  testonly = true\n"
"  is_gtest_unittests = true\n"
"  crate_root = \"my_rust_lib_unittest.rs\"\n"
"  sources = [ \"my_rust_lib_unittest.rs\" ]\n"
"  deps = [\n"
"    \":my_rust_lib\",\n"
"    \"//testing/rust_gtest_interop\",\n"
"  ]\n"
"}\n"
"\n"
"test(\"ui_base_unittests\") {\n"
"  ...\n"
"  deps += [ \":my_rust_lib_unittests\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid ""
"After adding `:my_rust_lib` to GN `deps`, we still need to learn how to "
"import and use `my_rust_lib` from `my_rust_lib_unittest.rs`. We haven't "
"provided an explicit `crate_name` for `my_rust_lib` so its crate name is "
"computed based on the full target path and name. Fortunately we can avoid "
"working with such an unwieldy name by using the `chromium::import!` macro "
"from the automatically-imported `chromium` crate:"
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid "\"//ui/base:my_rust_lib\""
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid "Under the covers the macro expands to something similar to:"
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid ""
"More information can be found in [the doc comment](https://"
"source.chromium.org/chromium/chromium/src/+/main:build/rust/chromium_prelude/"
"chromium_prelude.rs?q=f:chromium_prelude.rs%20pub.use.*%5Cbimport%5Cb;%20-"
"f:third_party&ss=chromium%2Fchromium%2Fsrc) of the `chromium::import` macro."
msgstr ""

#: src/chromium/testing/chromium-import-macro.md
msgid ""
"`rust_static_library` supports specifying an explicit name via `crate_name` "
"property, but doing this is discouraged. And it is discouraged because the "
"crate name has to be globally unique. crates.io guarantees uniqueness of its "
"crate names so `cargo_crate` GN targets (generated by the `gnrt` tool "
"covered in a later section) use short crate names."
msgstr ""

#: src/exercises/chromium/testing.md
#, fuzzy
msgid "Testing exercise"
msgstr "√òvelser"

#: src/exercises/chromium/testing.md
msgid "Time for another exercise!"
msgstr ""

#: src/exercises/chromium/testing.md
msgid "In your Chromium build:"
msgstr ""

#: src/exercises/chromium/testing.md
msgid ""
"Add a testable function next to `hello_from_rust`. Some suggestions: adding "
"two integers received as arguments, computing the nth Fibonacci number, "
"summing integers in a slice, etc."
msgstr ""

#: src/exercises/chromium/testing.md
msgid "Add a separate `..._unittest.rs` file with a test for the new function."
msgstr ""

#: src/exercises/chromium/testing.md
msgid "Add the new tests to `BUILD.gn`."
msgstr ""

#: src/exercises/chromium/testing.md
msgid "Build the tests, run them, and verify that the new test works."
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"The Rust community offers multiple options for C++/Rust interop, with new "
"tools being developed all the time. At the moment, Chromium uses a tool "
"called CXX."
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"You describe your whole language boundary in an interface definition "
"language (which looks a lot like Rust) and then CXX tools generate "
"declarations for functions and types in both Rust and C++."
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"See the [CXX tutorial](https://cxx.rs/tutorial.html) for a full example of "
"using this."
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"Talk through the diagram. Explain that behind the scenes, this is doing just "
"the same as you previously did. Point out that automating the process has "
"the following benefits:"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"The tool guarantees that the C++ and Rust sides match (e.g. you get compile "
"errors if the `#[cxx::bridge]` doesn't match the actual C++ or Rust "
"definitions, but with out-of-sync manual bindings you'd get Undefined "
"Behavior)"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"The tool automates generation of FFI thunks (small, C-ABI-compatible, free "
"functions) for non-C features (e.g. enabling FFI calls into Rust or C++ "
"methods; manual bindings would require authoring such top-level, free "
"functions manually)"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid "The tool and the library can handle a set of core types - for example:"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"`&[T]` can be passed across the FFI boundary, even though it doesn't "
"guarantee any particular ABI or memory layout. With manual bindings "
"`std::span<T>` / `&[T]` have to be manually destructured and rebuilt out of "
"a pointer and length - this is error-prone given that each language "
"represents empty slices slightly differently)"
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"Smart pointers like `std::unique_ptr<T>`, `std::shared_ptr<T>`, and/or `Box` "
"are natively supported. With manual bindings, one would have to pass C-ABI-"
"compatible raw pointers, which would increase lifetime and memory-safety "
"risks."
msgstr ""

#: src/chromium/interoperability-with-cpp.md
msgid ""
"`rust::String` and `CxxString` types understand and maintain differences in "
"string representation across the languages (e.g. `rust::String::lossy` can "
"build a Rust string from non-UTF8 input and `rust::String::c_str` can NUL-"
"terminate a string)."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid ""
"CXX requires that the whole C++/Rust boundary is declared in `cxx::bridge` "
"modules inside `.rs` source code."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "\"example/include/blobstore.h\""
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "// Definitions of Rust types and functions go here\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Point out:"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid ""
"Although this looks like a regular Rust `mod`, the `#[cxx::bridge]` "
"procedural macro does complex things to it. The generated code is quite a "
"bit more sophisticated - though this does still result in a `mod` called "
"`ffi` in your code."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Native support for C++'s `std::unique_ptr` in Rust"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Native support for Rust slices in C++"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Calls from C++ to Rust, and Rust types (in the top part)"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid "Calls from Rust to C++, and C++ types (in the bottom part)"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md
msgid ""
"**Common misconception**: It _looks_ like a C++ header is being parsed by "
"Rust, but this is misleading. This header is never interpreted by Rust, but "
"simply `#include`d in the generated C++ code for the benefit of C++ "
"compilers."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"By far the most useful page when using CXX is the [type reference](https://"
"cxx.rs/bindings.html)."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid "CXX fundamentally suits cases where:"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"Your Rust-C++ interface is sufficiently simple that you can declare all of "
"it."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"You're using only the types natively supported by CXX already, for example "
"`std::unique_ptr`, `std::string`, `&[u8]` etc."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"It has many limitations --- for example lack of support for Rust's `Option` "
"type."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"These limitations constrain us to using Rust in Chromium only for well "
"isolated \"leaf nodes\" rather than for arbitrary Rust-C++ interop. When "
"considering a use-case for Rust in Chromium, a good starting point is to "
"draft the CXX bindings for the language boundary to see if it appears simple "
"enough."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"You should also discuss some of the other sticky points with CXX, for "
"example:"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid ""
"Its error handling is based around C++ exceptions (given on the next slide)"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md
msgid "Function pointers are awkward to use."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"CXX's [support for `Result<T,E>`](https://cxx.rs/binding/result.html) relies "
"on C++ exceptions, so we can't use that in Chromium. Alternatives:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid "The `T` part of `Result<T, E>` can be:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"Returned via out parameters (e.g. via `&mut T`). This requires that `T` can "
"be passed across the FFI boundary - for example `T` has to be:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid "A primitive type (like `u32` or `usize`)"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"A type natively supported by `cxx` (like `UniquePtr<T>`) that has a suitable "
"default value to use in a failure case (_unlike_ `Box<T>`)."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"Retained on the Rust side, and exposed via reference. This may be needed "
"when `T` is a Rust type, which cannot be passed across the FFI boundary, and "
"cannot be stored in `UniquePtr<T>`."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid "The `E` part of `Result<T, E>` can be:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"Returned as a boolean (e.g. `true` representing success, and `false` "
"representing failure)"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md
msgid ""
"Preserving error details is in theory possible, but so far hasn't been "
"needed in practice."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid "CXX Error Handling: QR Example"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid ""
"The QR code generator is [an example](https://source.chromium.org/chromium/"
"chromium/src/+/main:components/qr_code_generator/"
"qr_code_generator_ffi_glue.rs;l=13-18;drc=7bf1b75b910ca430501b9c6a74c1d18a0223ecca) "
"where a boolean is used to communicate success vs failure, and where the "
"successful result can be passed across the FFI boundary:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid "\"qr_code_generator\""
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid ""
"Students may be curious about the semantics of the `out_qr_size` output. "
"This is not the size of the vector, but the size of the QR code (and "
"admittedly it is a bit redundant - this is the square root of the size of "
"the vector)."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid ""
"It may be worth pointing out the importance of initializing `out_qr_size` "
"before calling into the Rust function. Creation of a Rust reference that "
"points to uninitialized memory results in Undefined Behavior (unlike in C++, "
"when only the act of dereferencing such memory results in UB)."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-qr.md
msgid ""
"If students ask about `Pin`, then explain why CXX needs it for mutable "
"references to C++ data: the answer is that C++ data can‚Äôt be moved around "
"like Rust data, because it may contain self-referential pointers."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid "CXX Error Handling: PNG Example"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid ""
"A prototype of a PNG decoder illustrates what can be done when the "
"successful result cannot be passed across the FFI boundary:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
#, fuzzy
msgid "\"gfx::rust_bindings\""
msgstr "\"bindings\""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid ""
"/// This returns an FFI-friendly equivalent of `Result<PngReader<'a>,\n"
"        /// ()>`.\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid "/// C++ bindings for the `crate::png::ResultOfPngReader` type.\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid "/// C++ bindings for the `crate::png::PngReader` type.\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid ""
"`PngReader` and `ResultOfPngReader` are Rust types --- objects of these "
"types cannot cross the FFI boundary without indirection of a `Box<T>`. We "
"can't have an `out_parameter: &mut PngReader`, because CXX doesn't allow C++ "
"to store Rust objects by value."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling-png.md
msgid ""
"This example illustrates that even though CXX doesn't support arbitrary "
"generics nor templates, we can still pass them across the FFI boundary by "
"manually specializing / monomorphizing them into a non-generic type. In the "
"example `ResultOfPngReader` is a non-generic type that forwards into "
"appropriate methods of `Result<T, E>` (e.g. into `is_err`, `unwrap`, and/or "
"`as_mut`)."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid "Using cxx in Chromium"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"In Chromium, we define an independent `#[cxx::bridge] mod` for each leaf-"
"node where we want to use Rust. You'd typically have one for each "
"`rust_static_library`. Just add"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"```gn\n"
"cxx_bindings = [ \"my_rust_file.rs\" ]\n"
"   # list of files containing #[cxx::bridge], not all source files\n"
"allow_unsafe = true\n"
"```"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"to your existing `rust_static_library` target alongside `crate_root` and "
"`sources`."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid "C++ headers will be generated at a sensible location, so you can just"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid "\"ui/base/my_rust_file.rs.h\""
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"You will find some utility functions in `//base` to convert to/from Chromium "
"C++ types to CXX Rust types --- for example [`SpanToRustSlice`](https://"
"source.chromium.org/chromium/chromium/src/+/main:base/containers/"
"span_rust.h;l=21)."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid "Students may ask --- why do we still need `allow_unsafe = true`?"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"The broad answer is that no C/C++ code is \"safe\" by the normal Rust "
"standards. Calling back and forth to C/C++ from Rust may do arbitrary things "
"to memory, and compromise the safety of Rust's own data layouts. Presence of "
"_too many_ `unsafe` keywords in C/C++ interop can harm the signal-to-noise "
"ratio of such a keyword, and is [controversial](https://steveklabnik.com/"
"writing/the-cxx-debate), but strictly, bringing any foreign code into a Rust "
"binary can cause unexpected behavior from Rust's perspective."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md
msgid ""
"The narrow answer lies in the diagram at the top of [this page](../"
"interoperability-with-cpp.md) --- behind the scenes, CXX generates Rust "
"`unsafe` and `extern \"C\"` functions just like we did manually in the "
"previous section."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Exercise: Interoperability with C++"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Part one"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"In the Rust file you previously created, add a `#[cxx::bridge]` which "
"specifies a single function, to be called from C++, called "
"`hello_from_rust`, taking no parameters and returning no value."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Modify your previous `hello_from_rust` function to remove `extern \"C\"` and "
"`#[unsafe(no_mangle)]`. This is now just a standard Rust function."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Modify your `gn` target to build these bindings."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"In your C++ code, remove the forward-declaration of `hello_from_rust`. "
"Instead, include the generated header file."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Build and run!"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Part two"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"It's a good idea to play with CXX a little. It helps you think about how "
"flexible Rust in Chromium actually is."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Some things to try:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Call back into C++ from Rust. You will need:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"An additional header file which you can `include!` from your `cxx::bridge`. "
"You'll need to declare your C++ function in that new header file."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"An `unsafe` block to call such a function, or alternatively specify the "
"`unsafe` keyword in your `#[cxx::bridge]` [as described here](https://cxx.rs/"
"extern-c++.html#functions-and-member-functions)."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"You may also need to `#include \"third_party/rust/cxx/v1/crate/include/"
"cxx.h\"`"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Pass a C++ string from C++ into Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Pass a reference to a C++ object into Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Intentionally get the Rust function signatures mismatched from the "
"`#[cxx::bridge]`, and get used to the errors you see."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Intentionally get the C++ function signatures mismatched from the "
"`#[cxx::bridge]`, and get used to the errors you see."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Pass a `std::unique_ptr` of some type from C++ into Rust, so that Rust can "
"own some C++ object."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Create a Rust object and pass it into C++, so that C++ owns it. (Hint: you "
"need a `Box`)."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Declare some methods on a C++ type. Call them from Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Declare some methods on a Rust type. Call them from C++."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Part three"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"Now you understand the strengths and limitations of CXX interop, think of a "
"couple of use-cases for Rust in Chromium where the interface would be "
"sufficiently simple. Sketch how you might define that interface."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "The [`cxx` binding reference](https://cxx.rs/bindings.html)"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"The [`rust_static_library` gn template](https://source.chromium.org/chromium/"
"chromium/src/+/main:build/rust/rust_static_library.gni;l=16)"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid "Some of the questions you may encounter:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"I'm seeing a problem initializing a variable of type X with type Y, where X "
"and Y are both function types. This is because your C++ function doesn't "
"quite match the declaration in your `cxx::bridge`."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md
msgid ""
"I seem to be able to freely convert C++ references into Rust references. "
"Doesn't that risk UB? For CXX's _opaque_ types, no, because they are zero-"
"sized. For CXX trivial types yes, it's _possible_ to cause UB, although "
"CXX's design makes it quite difficult to craft such an example."
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid ""
"Rust libraries are called \"crates\" and are found at [crates.io](https://"
"crates.io). It's _very easy_ for Rust crates to depend upon one another. So "
"they do!"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Property"
msgstr "Egenskab"

#: src/chromium/adding-third-party-crates.md
msgid "C++ library"
msgstr ""

#: src/chromium/adding-third-party-crates.md
#, fuzzy
msgid "Rust crate"
msgstr "Rust's √∏kosystem"

#: src/chromium/adding-third-party-crates.md
#, fuzzy
msgid "Build system"
msgstr "Rust's √∏kosystem"

#: src/chromium/adding-third-party-crates.md
msgid "Lots"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Consistent: `Cargo.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Typical library size"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Large-ish"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Small"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Transitive dependencies"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "Few"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "For a Chromium engineer, this has pros and cons:"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid ""
"All crates use a common build system so we can automate their inclusion into "
"Chromium..."
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid ""
"... but, crates typically have transitive dependencies, so you will likely "
"have to bring in multiple libraries."
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "We'll discuss:"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "How to put a crate in the Chromium source code tree"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "How to make `gn` build rules for it"
msgstr ""

#: src/chromium/adding-third-party-crates.md
msgid "How to audit its source code for sufficient safety."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid "Configuring the `Cargo.toml` file to add crates"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid ""
"Chromium has a single set of centrally-managed direct crate dependencies. "
"These are managed through a single [`Cargo.toml`](https://"
"source.chromium.org/chromium/chromium/src/+/main:third_party/rust/"
"chromium_crates_io/Cargo.toml):"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid ""
"```toml\n"
"[dependencies]\n"
"bitflags = \"1\"\n"
"cfg-if = \"1\"\n"
"cxx = \"1\"\n"
"# lots more...\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid ""
"As with any other `Cargo.toml`, you can specify [more details about the "
"dependencies](https://doc.rust-lang.org/cargo/reference/specifying-"
"dependencies.html) --- most commonly, you'll want to specify the `features` "
"that you wish to enable in the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md
msgid ""
"When adding a crate to Chromium, you'll often need to provide some extra "
"information in an additional file, `gnrt_config.toml`, which we'll meet next."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid ""
"Alongside `Cargo.toml` is [`gnrt_config.toml`](https://source.chromium.org/"
"chromium/chromium/src/+/main:third_party/rust/chromium_crates_io/"
"gnrt_config.toml). This contains Chromium-specific extensions to crate "
"handling."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid ""
"If you add a new crate, you should specify at least the `group`. This is one "
"of:"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid "For instance,"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid ""
"Depending on the crate source code layout, you may also need to use this "
"file to specify where its `LICENSE` file(s) can be found."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md
msgid ""
"Later, we'll see some other things you will need to configure in this file "
"to resolve problems."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid ""
"A tool called `gnrt` knows how to download crates and how to generate "
"`BUILD.gn` rules."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid "To start, download the crate you want like this:"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid ""
"Although the `gnrt` tool is part of the Chromium source code, by running "
"this command you will be downloading and running its dependencies from "
"`crates.io`. See [the earlier section](../cargo.md) discussing this security "
"decision."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid "This `vendor` command may download:"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
#, fuzzy
msgid "Your crate"
msgstr "\"Sokrates\""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid "Direct and transitive dependencies"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid ""
"New versions of other crates, as required by `cargo` to resolve the complete "
"set of crates required by Chromium."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md
msgid ""
"Chromium maintains patches for some crates, kept in `//third_party/rust/"
"chromium_crates_io/patches`. These will be reapplied automatically, but if "
"patching fails you may need to take manual action."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"Once you've downloaded the crate, generate the `BUILD.gn` files like this:"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid "Now run `git status`. You should find:"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"At least one new crate source code in `third_party/rust/chromium_crates_io/"
"vendor`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"At least one new `BUILD.gn` in `third_party/rust/<crate name>/v<major semver "
"version>`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid "An appropriate `README.chromium`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"The \"major semver version\" is a [Rust \"semver\" version number](https://"
"doc.rust-lang.org/cargo/reference/semver.html)."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"Take a close look, especially at the things generated in `third_party/rust`."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md
msgid ""
"Talk a little about semver --- and specifically the way that in Chromium "
"it's to allow multiple incompatible versions of a crate, which is "
"discouraged but sometimes necessary in the Cargo ecosystem."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid ""
"If your build fails, it may be because of a `build.rs`: programs which do "
"arbitrary things at build time. This is fundamentally at odds with the "
"design of `gn` and `ninja` which aim for static, deterministic, build rules "
"to maximize parallelism and repeatability of builds."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid ""
"Some `build.rs` actions are automatically supported; others require action:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "build script effect"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Supported by our gn templates"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Work required by you"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Checking rustc version to configure features on and off"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Yes"
msgstr "Ja"

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "None"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Checking platform or CPU to configure features on and off"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Generating code"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Yes - specify in `gnrt_config.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Building C/C++"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "No"
msgstr "Nej"

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Patch around it"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid "Arbitrary other actions"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md
msgid ""
"Fortunately, most crates don't contain a build script, and fortunately, most "
"build scripts only do the top two actions."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid ""
"If `ninja` complains about missing files, check the `build.rs` to see if it "
"writes source code files."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid ""
"If so, modify [`gnrt_config.toml`](../configuring-gnrt-config-toml.md) to "
"add `build-script-outputs` to the crate. If this is a transitive dependency, "
"that is, one on which Chromium code should not directly depend, also add "
"`allow-first-party-usage=false`. There are several examples already in that "
"file:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid ""
"```toml\n"
"[crate.unicode-linebreak]\n"
"allow-first-party-usage = false\n"
"build-script-outputs = [\"tables.rs\"]\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md
msgid ""
"Now rerun [`gnrt.py -- gen`](../generating-gn-build-rules.md) to regenerate "
"`BUILD.gn` files to inform ninja that this particular output file is input "
"to subsequent build steps."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid ""
"Some crates use the [`cc`](https://crates.io/crates/cc) crate to build and "
"link C/C++ libraries. Other crates parse C/C++ using [`bindgen`](https://"
"crates.io/crates/bindgen) within their build scripts. These actions can't be "
"supported in a Chromium context --- our gn, ninja and LLVM build system is "
"very specific in expressing relationships between build actions."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid "So, your options are:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid "Avoid these crates"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid "Apply a patch to the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md
msgid ""
"Patches should be kept in `third_party/rust/chromium_crates_io/patches/"
"<crate>` - see for example the [patches against the `cxx` crate](https://"
"source.chromium.org/chromium/chromium/src/+/main:third_party/rust/"
"chromium_crates_io/patches/cxx/) - and will be applied automatically by "
"`gnrt` each time it upgrades the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid ""
"Once you've added a third-party crate and generated build rules, depending "
"on a crate is simple. Find your `rust_static_library` target, and add a "
"`dep` on the `:lib` target within your crate."
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid "Specifically,"
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid ""
"```bob\n"
"                     +------------+      +----------------------+\n"
"\"//third_party/rust\" | crate name | \"/v\" | major semver version | "
"\":lib\"\n"
"                     +------------+      +----------------------+\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md
msgid ""
"```gn\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"  deps = [ \"//third_party/rust/example_rust_crate/v1:lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid "Auditing Third Party Crates"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Adding new libraries is subject to Chromium's standard [policies](https://"
"chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/"
"rust.md#Third_party-review), but of course also subject to security review. "
"As you may be bringing in not just a single crate but also transitive "
"dependencies, there may be a lot of code to review. On the other hand, safe "
"Rust code can have limited negative side effects. How should you review it?"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Over time Chromium aims to move to a process based around [cargo vet]"
"(https://mozilla.github.io/cargo-vet/)."
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Meanwhile, for each new crate addition, we are checking for the following:"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Understand why each crate is used. What's the relationship between crates? "
"If the build system for each crate contains a `build.rs` or procedural "
"macros, work out what they're for. Are they compatible with the way Chromium "
"is normally built?"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid "Check each crate seems to be reasonably well maintained"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Use `cd third-party/rust/chromium_crates_io; cargo audit` to check for known "
"vulnerabilities (first you'll need to `cargo install cargo-audit`, which "
"ironically involves downloading lots of dependencies from the internet[2](../"
"cargo.md))"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Ensure any `unsafe` code is good enough for the [Rule of Two](https://"
"chromium.googlesource.com/chromium/src/+/main/docs/security/rule-"
"of-2.md#unsafe-code-in-safe-languages)"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid "Check for any use of `fs` or `net` APIs"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"Read all the code at a sufficient level to look for anything out of place "
"that might have been maliciously inserted. (You can't realistically aim for "
"100% perfection here: there's often just too much code.)"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md
msgid ""
"These are just guidelines --- work with reviewers from "
"`security@chromium.org` to work out the right way to become confident of the "
"crate."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid "Checking Crates into Chromium Source Code"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid "`git status` should reveal:"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid "Crate code in `//third_party/rust/chromium_crates_io`"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid ""
"Metadata (`BUILD.gn` and `README.chromium`) in `//third_party/rust/<crate>/"
"<version>`"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid "Please also add an `OWNERS` file in the latter location."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid ""
"You should land all this, along with your `Cargo.toml` and "
"`gnrt_config.toml` changes, into the Chromium repo."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid ""
"**Important**: you need to use `git add -f` because otherwise `.gitignore` "
"files may result in some files being skipped."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md
msgid ""
"As you do so, you might find presubmit checks fail because of non-inclusive "
"language. This is because Rust crate data tends to include names of git "
"branches, and many projects still use non-inclusive terminology there. So "
"you may need to run:"
msgstr ""

#: src/chromium/adding-third-party-crates/keeping-up-to-date.md
msgid ""
"As the OWNER of any third party Chromium dependency, you are [expected to "
"keep it up to date with any security fixes](https://"
"chromium.googlesource.com/chromium/src/+/main/docs/"
"adding_to_third_party.md#add-owners). It is hoped that we will soon automate "
"this for Rust crates, but for now, it's still your responsibility just as it "
"is for any other third party dependency."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid ""
"Add [uwuify](https://crates.io/crates/uwuify) to Chromium, turning off the "
"crate's [default features](https://doc.rust-lang.org/cargo/reference/"
"features.html#the-default-feature). Assume that the crate will be used in "
"shipping Chromium, but won't be used to handle untrustworthy input."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid ""
"(In the next exercise we'll use uwuify from Chromium, but feel free to skip "
"ahead and do that now if you like. Or, you could create a new "
"[`rust_executable` target](https://source.chromium.org/chromium/chromium/src/"
"+/main:build/rust/rust_executable.gni) which uses `uwuify`)."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "Students will need to download lots of transitive dependencies."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "The total crates needed are:"
msgstr ""

#: src/exercises/chromium/third-party.md
#, fuzzy
msgid "`instant`,"
msgstr "Konstant"

#: src/exercises/chromium/third-party.md
msgid "`lock_api`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`parking_lot`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`parking_lot_core`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`redox_syscall`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`scopeguard`,"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`smallvec`, and"
msgstr ""

#: src/exercises/chromium/third-party.md
msgid "`uwuify`."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid ""
"If students are downloading even more than that, they probably forgot to "
"turn off the default features."
msgstr ""

#: src/exercises/chromium/third-party.md
msgid ""
"Thanks to [Daniel Liu](https://github.com/Daniel-Liu-c0deb0t) for this crate!"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid "Bringing It Together --- Exercise"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"In this exercise, you're going to add a whole new Chromium feature, bringing "
"together everything you already learned."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid "The Brief from Product Management"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"A community of pixies has been discovered living in a remote rainforest. "
"It's important that we get Chromium for Pixies delivered to them as soon as "
"possible."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"The requirement is to translate all Chromium's UI strings into Pixie "
"language."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"There's not time to wait for proper translations, but fortunately pixie "
"language is very close to English, and it turns out there's a Rust crate "
"which does the translation."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"In fact, you already [imported that crate in the previous exercise](https://"
"crates.io/crates/uwuify)."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"(Obviously, real translations of Chrome require incredible care and "
"diligence. Don't ship this!)"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid "Steps"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"Modify `ResourceBundle::MaybeMangleLocalizedString` so that it uwuifies all "
"strings before display. In this special build of Chromium, it should always "
"do this irrespective of the setting of `mangle_localized_strings_`."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"If you've done everything right across all these exercises, congratulations, "
"you should have created Chrome for pixies!"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"UTF16 vs UTF8. Students should be aware that Rust strings are always UTF8, "
"and will probably decide that it's better to do the conversion on the C++ "
"side using `base::UTF16ToUTF8` and back again."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"If students decide to do the conversion on the Rust side, they'll need to "
"consider [`String::from_utf16`](https://doc.rust-lang.org/std/string/"
"struct.String.html#method.from_utf16), consider error handling, and consider "
"which [CXX supported types can transfer a lot of u16s](https://cxx.rs/"
"binding/slice.html)."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"Students may design the C++/Rust boundary in several different ways, e.g. "
"taking and returning strings by value, or taking a mutable reference to a "
"string. If a mutable reference is used, CXX will likely tell the student "
"that they need to use [`Pin`](https://doc.rust-lang.org/std/pin/). You may "
"need to explain what `Pin` does, and then explain why CXX needs it for "
"mutable references to C++ data: the answer is that C++ data can't be moved "
"around like Rust data, because it may contain self-referential pointers."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"The C++ target containing `ResourceBundle::MaybeMangleLocalizedString` will "
"need to depend on a `rust_static_library` target. The student probably "
"already did this."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md
msgid ""
"The `rust_static_library` target will need to depend on `//third_party/rust/"
"uwuify/v0_2:lib`."
msgstr ""

#: src/exercises/chromium/solutions.md
msgid ""
"Solutions to the Chromium exercises can be found in [this series of CLs]"
"(https://chromium-review.googlesource.com/c/chromium/src/+/5096560)."
msgstr ""

#: src/bare-metal.md
msgid "Welcome to Bare Metal Rust"
msgstr "Velkommen til Rust p√• det r√• jern"

#: src/bare-metal.md
msgid ""
"This is a standalone one-day course about bare-metal Rust, aimed at people "
"who are familiar with the basics of Rust (perhaps from completing the "
"Comprehensive Rust course), and ideally also have some experience with bare-"
"metal programming in some other language such as C."
msgstr ""

#: src/bare-metal.md
msgid ""
"Today we will talk about 'bare-metal' Rust: running Rust code without an OS "
"underneath us. This will be divided into several parts:"
msgstr ""

#: src/bare-metal.md
msgid "What is `no_std` Rust?"
msgstr ""

#: src/bare-metal.md
msgid "Writing firmware for microcontrollers."
msgstr ""

#: src/bare-metal.md
msgid "Writing bootloader / kernel code for application processors."
msgstr ""

#: src/bare-metal.md
msgid "Some useful crates for bare-metal Rust development."
msgstr ""

#: src/bare-metal.md
msgid ""
"For the microcontroller part of the course we will use the [BBC micro:bit]"
"(https://microbit.org/) v2 as an example. It's a [development board](https://"
"tech.microbit.org/hardware/) based on the Nordic nRF52833 microcontroller "
"with some LEDs and buttons, an I2C-connected accelerometer and compass, and "
"an on-board SWD debugger."
msgstr ""

#: src/bare-metal.md
msgid ""
"To get started, install some tools we'll need later. On gLinux or Debian:"
msgstr ""

#: src/bare-metal.md
msgid ""
"And give users in the `plugdev` group access to the micro:bit programmer:"
msgstr ""

#: src/bare-metal.md
msgid ""
"You should see \"NXP ARM mbed\" in the output of `lsusb` if the device is "
"available. If you are using a Linux environment on a Chromebook, you will "
"need to share the USB device with Linux, via `chrome://os-settings/crostini/"
"sharedUsbDevices`."
msgstr ""

#: src/bare-metal.md src/bare-metal/microcontrollers/debugging.md
msgid "On MacOS:"
msgstr "P√• MacOS:"

#: src/bare-metal/no_std.md
msgid "`core`"
msgstr "`core`"

#: src/bare-metal/no_std.md
msgid "`std`"
msgstr "`std`"

#: src/bare-metal/no_std.md
msgid "Slices, `&str`, `CStr`"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`NonZeroU8`..."
msgstr "`NonZeroU8`..."

#: src/bare-metal/no_std.md
msgid "`Option`, `Result`"
msgstr "`Option`, `Result`"

#: src/bare-metal/no_std.md
msgid "`Display`, `Debug`, `write!`..."
msgstr "`Display`, `Debug`, `write!`..."

#: src/bare-metal/no_std.md
msgid "`Iterator`"
msgstr "`Iterator`"

#: src/bare-metal/no_std.md
msgid "`Error`"
msgstr "`Error`"

#: src/bare-metal/no_std.md
msgid "`panic!`, `assert_eq!`..."
msgstr "`panic!`, `assert_eq!`..."

#: src/bare-metal/no_std.md
msgid "`NonNull` and all the usual pointer-related functions"
msgstr ""

#: src/bare-metal/no_std.md
msgid "`Future` and `async`/`await`"
msgstr "`Future` og `async`/`await`"

#: src/bare-metal/no_std.md
msgid "`fence`, `AtomicBool`, `AtomicPtr`, `AtomicU32`..."
msgstr "`fence`, `AtomicBool`, `AtomicPtr`, `AtomicU32`..."

#: src/bare-metal/no_std.md
msgid "`Duration`"
msgstr "`Duration`"

#: src/bare-metal/no_std.md
msgid "`Box`, `Cow`, `Arc`, `Rc`"
msgstr "`Box`, `Cow`, `Arc`, `Rc`"

#: src/bare-metal/no_std.md
msgid "`Vec`, `BinaryHeap`, `BtreeMap`, `LinkedList`, `VecDeque`"
msgstr "`Vec`, `BinaryHeap`, `BtreeMap`, `LinkedList`, `VecDeque`"

#: src/bare-metal/no_std.md
msgid "`String`, `CString`, `format!`"
msgstr "`String`, `CString`, `format!`"

#: src/bare-metal/no_std.md
msgid "`Mutex`, `Condvar`, `Barrier`, `Once`, `RwLock`, `mpsc`"
msgstr "`Mutex`, `Condvar`, `Barrier`, `Once`, `RwLock`, `mpsc`"

#: src/bare-metal/no_std.md
msgid "`File` and the rest of `fs`"
msgstr "`File` og resten af `fs`"

#: src/bare-metal/no_std.md
msgid "`println!`, `Read`, `Write`, `Stdin`, `Stdout` and the rest of `io`"
msgstr "`println!`, `Read`, `Write`, `Stdin`, `Stdout` og resten af `io`"

#: src/bare-metal/no_std.md
msgid "`Path`, `OsString`"
msgstr "`Path`, `OsString`"

#: src/bare-metal/no_std.md
msgid "`net`"
msgstr "`net`"

#: src/bare-metal/no_std.md
msgid "`Command`, `Child`, `ExitCode`"
msgstr "`Command`, `Child`, `ExitCode`"

#: src/bare-metal/no_std.md
msgid "`spawn`, `sleep` and the rest of `thread`"
msgstr "`spawn`, `sleep` og resten af `thread`"

#: src/bare-metal/no_std.md
msgid "`SystemTime`, `Instant`"
msgstr "`SystemTime`, `Instant`"

#: src/bare-metal/no_std.md
msgid "`HashMap` depends on RNG."
msgstr ""

#: src/bare-metal/no_std.md
msgid "`std` re-exports the contents of both `core` and `alloc`."
msgstr ""

#: src/bare-metal/minimal.md
msgid "A minimal `no_std` program"
msgstr ""

#: src/bare-metal/minimal.md
msgid "This will compile to an empty binary."
msgstr ""

#: src/bare-metal/minimal.md
msgid "`std` provides a panic handler; without it we must provide our own."
msgstr ""

#: src/bare-metal/minimal.md
msgid "It can also be provided by another crate, such as `panic-halt`."
msgstr ""

#: src/bare-metal/minimal.md
msgid ""
"Depending on the target, you may need to compile with `panic = \"abort\"` to "
"avoid an error about `eh_personality`."
msgstr ""

#: src/bare-metal/minimal.md
msgid ""
"Note that there is no `main` or any other entry point; it's up to you to "
"define your own entry point. This will typically involve a linker script and "
"some assembly code to set things up ready for Rust code to run."
msgstr ""

#: src/bare-metal/alloc.md
msgid ""
"To use `alloc` you must implement a [global (heap) allocator](https://"
"doc.rust-lang.org/stable/std/alloc/trait.GlobalAlloc.html)."
msgstr ""

#: src/bare-metal/alloc.md
#, fuzzy
msgid "// SAFETY: `HEAP` is only used here and `entry` is only called once.\n"
msgstr ""
"// Safe because `HEAP` is only used here and `entry` is only called once.\n"

#: src/bare-metal/alloc.md
msgid "// Give the allocator some memory to allocate.\n"
msgstr "// Give the allocator some memory to allocate.\n"

#: src/bare-metal/alloc.md
msgid "// Now we can do things that require heap allocation.\n"
msgstr "// Now we can do things that require heap allocation.\n"

#: src/bare-metal/alloc.md
msgid "\"A string\""
msgstr "\"En streng\""

#: src/bare-metal/alloc.md
msgid ""
"`buddy_system_allocator` is a crate implementing a basic buddy system "
"allocator. Other crates are available, or you can write your own or hook "
"into your existing allocator."
msgstr ""

#: src/bare-metal/alloc.md
msgid ""
"The const parameter of `LockedHeap` is the max order of the allocator; i.e. "
"in this case it can allocate regions of up to 2\\*\\*32 bytes."
msgstr ""

#: src/bare-metal/alloc.md
msgid ""
"If any crate in your dependency tree depends on `alloc` then you must have "
"exactly one global allocator defined in your binary. Usually this is done in "
"the top-level binary crate."
msgstr ""

#: src/bare-metal/alloc.md
msgid ""
"`extern crate panic_halt as _` is necessary to ensure that the `panic_halt` "
"crate is linked in so we get its panic handler."
msgstr ""

#: src/bare-metal/alloc.md
msgid "This example will build but not run, as it doesn't have an entry point."
msgstr ""

#: src/bare-metal/microcontrollers.md
msgid ""
"The `cortex_m_rt` crate provides (among other things) a reset handler for "
"Cortex M microcontrollers."
msgstr ""

#: src/bare-metal/microcontrollers.md
msgid ""
"Next we'll look at how to access peripherals, with increasing levels of "
"abstraction."
msgstr ""

#: src/bare-metal/microcontrollers.md
msgid ""
"The `cortex_m_rt::entry` macro requires that the function have type `fn() "
"-> !`, because returning to the reset handler doesn't make sense."
msgstr ""

#: src/bare-metal/microcontrollers.md
msgid "Run the example with `cargo embed --bin minimal`"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
msgid ""
"Most microcontrollers access peripherals via memory-mapped IO. Let's try "
"turning on an LED on our micro:bit:"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
msgid "/// GPIO port 0 peripheral address\n"
msgstr "/// GPIO port 0 peripheral address\n"

#: src/bare-metal/microcontrollers/mmio.md
msgid "// GPIO peripheral offsets\n"
msgstr "// GPIO peripheral offsets\n"

#: src/bare-metal/microcontrollers/mmio.md
msgid "// PIN_CNF fields\n"
msgstr "// PIN_CNF fields\n"

#: src/bare-metal/microcontrollers/mmio.md
#: src/bare-metal/microcontrollers/pacs.md
#: src/bare-metal/microcontrollers/hals.md
msgid "// Configure GPIO 0 pins 21 and 28 as push-pull outputs.\n"
msgstr "// Configure GPIO 0 pins 21 and 28 as push-pull outputs.\n"

#: src/bare-metal/microcontrollers/mmio.md
#, fuzzy
msgid ""
"// SAFETY: The pointers are to valid peripheral control registers, and no\n"
"    // aliases exist.\n"
msgstr ""
"// Safe because the pointers are to valid peripheral control registers, and\n"
"    // no aliases exist.\n"

#: src/bare-metal/microcontrollers/mmio.md
#: src/bare-metal/microcontrollers/pacs.md
#: src/bare-metal/microcontrollers/hals.md
msgid "// Set pin 28 low and pin 21 high to turn the LED on.\n"
msgstr "// Set pin 28 low and pin 21 high to turn the LED on.\n"

#: src/bare-metal/microcontrollers/mmio.md
msgid ""
"GPIO 0 pin 21 is connected to the first column of the LED matrix, and pin 28 "
"to the first row."
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md
#: src/bare-metal/microcontrollers/pacs.md
#: src/bare-metal/microcontrollers/hals.md
#: src/bare-metal/microcontrollers/board-support.md
msgid "Run the example with:"
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid "Peripheral Access Crates"
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"[`svd2rust`](https://crates.io/crates/svd2rust) generates mostly-safe Rust "
"wrappers for memory-mapped peripherals from [CMSIS-SVD](https://www.keil.com/"
"pack/doc/CMSIS/SVD/html/index.html) files."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"SVD (System View Description) files are XML files typically provided by "
"silicon vendors that describe the memory map of the device."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"They are organized by peripheral, register, field and value, with names, "
"descriptions, addresses and so on."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"SVD files are often buggy and incomplete, so there are various projects that "
"patch the mistakes, add missing details, and publish the generated crates."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid "`cortex-m-rt` provides the vector table, among other things."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md
msgid ""
"If you `cargo install cargo-binutils` then you can run `cargo objdump --bin "
"pac -- -d --no-show-raw-insn` to see the resulting binary."
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid "HAL crates"
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid ""
"[HAL crates](https://github.com/rust-embedded/awesome-embedded-rust#hal-"
"implementation-crates) for many microcontrollers provide wrappers around "
"various peripherals. These generally implement traits from [`embedded-hal`]"
"(https://crates.io/crates/embedded-hal)."
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid "// Create HAL wrapper for GPIO port 0.\n"
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid ""
"`set_low` and `set_high` are methods on the `embedded_hal` `OutputPin` trait."
msgstr ""

#: src/bare-metal/microcontrollers/hals.md
msgid ""
"HAL crates exist for many Cortex-M and RISC-V devices, including various "
"STM32, GD32, nRF, NXP, MSP430, AVR and PIC microcontrollers."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md
msgid "Board support crates"
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md
msgid ""
"Board support crates provide a further level of wrapping for a specific "
"board for convenience."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md
msgid ""
"In this case the board support crate is just providing more useful names, "
"and a bit of initialization."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md
msgid ""
"The crate may also include drivers for some on-board devices outside of the "
"microcontroller itself."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md
msgid "`microbit-v2` includes a simple driver for the LED matrix."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid "The type state pattern"
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid "// let gpio0_01_again = gpio0.p0_01; // Error, moved.\n"
msgstr "// let gpio0_01_again = gpio0.p0_01; // Error, moved.\n"

#: src/bare-metal/microcontrollers/type-state.md
msgid "// pin_input.is_high(); // Error, moved.\n"
msgstr "// pin_input.is_high(); // Error, moved.\n"

#: src/bare-metal/microcontrollers/type-state.md
msgid ""
"Pins don't implement `Copy` or `Clone`, so only one instance of each can "
"exist. Once a pin is moved out of the port struct, nobody else can take it."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid ""
"Changing the configuration of a pin consumes the old pin instance, so you "
"can't use the old instance afterwards."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid ""
"The type of a value indicates the state it is in: e.g., in this case, the "
"configuration state of a GPIO pin. This encodes the state machine into the "
"type system and ensures that you don't try to use a pin in a certain way "
"without properly configuring it first. Illegal state transitions are caught "
"at compile time."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid ""
"You can call `is_high` on an input pin and `set_high` on an output pin, but "
"not vice-versa."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md
msgid "Many HAL crates follow this pattern."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"The [`embedded-hal`](https://crates.io/crates/embedded-hal) crate provides a "
"number of traits covering common microcontroller peripherals:"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "GPIO"
msgstr "GPIO"

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "PWM"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "Delay timers"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid "I2C and SPI buses and devices"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"Similar traits for byte streams (e.g. UARTs), CAN buses and RNGs are broken "
"out into [`embedded-io`](https://crates.io/crates/embedded-io), [`embedded-"
"can`](https://crates.io/crates/embedded-can) and [`rand_core`](https://"
"crates.io/crates/rand_core) respectively."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"Other crates then implement [drivers](https://github.com/rust-embedded/"
"awesome-embedded-rust#driver-crates) in terms of these traits, e.g. an "
"accelerometer driver might need an I2C or SPI device instance."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"The traits cover using the peripherals but not initializing or configuring "
"them, as initialization and configuration is usually highly platform-"
"specific."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"There are implementations for many microcontrollers, as well as other "
"platforms such as Linux on Raspberry Pi."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"[`embedded-hal-async`](https://crates.io/crates/embedded-hal-async) provides "
"async versions of the traits."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md
msgid ""
"[`embedded-hal-nb`](https://crates.io/crates/embedded-hal-nb) provides "
"another approach to non-blocking I/O, based on the [`nb`](https://crates.io/"
"crates/nb) crate."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"[probe-rs](https://probe.rs/) is a handy toolset for embedded debugging, "
"like OpenOCD but better integrated."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"SWD (Serial Wire Debug) and JTAG via CMSIS-DAP, ST-Link and J-Link probes"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid "GDB stub and Microsoft DAP (Debug Adapter Protocol) server"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid "Cargo integration"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"`cargo-embed` is a cargo subcommand to build and flash binaries, log RTT "
"(Real Time Transfers) output and connect GDB. It's configured by an "
"`Embed.toml` file in your project directory."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"[CMSIS-DAP](https://arm-software.github.io/CMSIS_5/DAP/html/index.html) is "
"an Arm standard protocol over USB for an in-circuit debugger to access the "
"CoreSight Debug Access Port of various Arm Cortex processors. It's what the "
"on-board debugger on the BBC micro:bit uses."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"ST-Link is a range of in-circuit debuggers from ST Microelectronics, J-Link "
"is a range from SEGGER."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"The Debug Access Port is usually either a 5-pin JTAG interface or 2-pin "
"Serial Wire Debug."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"probe-rs is a library that you can integrate into your own tools if you want "
"to."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"The [Microsoft Debug Adapter Protocol](https://microsoft.github.io/debug-"
"adapter-protocol/) lets VSCode and other IDEs debug code running on any "
"supported microcontroller."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid "cargo-embed is a binary built using the probe-rs library."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md
msgid ""
"RTT (Real Time Transfers) is a mechanism to transfer data between the debug "
"host and the target through a number of ring buffers."
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md
#, fuzzy
msgid "_Embed.toml_:"
msgstr "Embed.toml:"

#: src/bare-metal/microcontrollers/debugging.md
msgid "In one terminal under `src/bare-metal/microcontrollers/examples/`:"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md
msgid "In another terminal in the same directory:"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md
msgid "On gLinux or Debian:"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md
msgid "In GDB, try running:"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
#: src/bare-metal/aps/other-projects.md
msgid "Other projects"
msgstr "Andre projekter"

#: src/bare-metal/microcontrollers/other-projects.md
msgid "[RTIC](https://rtic.rs/)"
msgstr "[RTIC](https://rtic.rs/)"

#: src/bare-metal/microcontrollers/other-projects.md
msgid "\"Real-Time Interrupt-driven Concurrency\"."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Shared resource management, message passing, task scheduling, timer queue."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "[Embassy](https://embassy.dev/)"
msgstr "[Embassy](https://embassy.dev/)"

#: src/bare-metal/microcontrollers/other-projects.md
msgid "`async` executors with priorities, timers, networking, USB."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "[TockOS](https://www.tockos.org/documentation/getting-started)"
msgstr "[TockOS](https://www.tockos.org/documentation/getting-started)"

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Security-focused RTOS with preemptive scheduling and Memory Protection Unit "
"support."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "[Hubris](https://hubris.oxide.computer/)"
msgstr "[Hubris](https://hubris.oxide.computer/)"

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Microkernel RTOS from Oxide Computer Company with memory protection, "
"unprivileged drivers, IPC."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
#, fuzzy
msgid "[Bindings for FreeRTOS](https://github.com/lobaro/FreeRTOS-rust)."
msgstr "[Bindinger til FreeRTOS](https://github.com/lobaro/FreeRTOS-rust)"

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Some platforms have `std` implementations, e.g. [esp-idf](https://esp-"
"rs.github.io/book/overview/using-the-standard-library.html)."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "RTIC can be considered either an RTOS or a concurrency framework."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "It doesn't include any HALs."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"It uses the Cortex-M NVIC (Nested Virtual Interrupt Controller) for "
"scheduling rather than a proper kernel."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid "Cortex-M only."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"Google uses TockOS on the Haven microcontroller for Titan security keys."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md
msgid ""
"FreeRTOS is mostly written in C, but there are Rust bindings for writing "
"applications."
msgstr ""

#: src/exercises/bare-metal/morning.md
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port."
msgstr ""

#: src/exercises/bare-metal/morning.md
msgid ""
"After looking at the exercises, you can look at the [solutions](solutions-"
"morning.md) provided."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port. If you have time, try displaying it on the LEDs somehow too, or "
"use the buttons somehow."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid "Hints:"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"Check the documentation for the [`lsm303agr`](https://docs.rs/lsm303agr/"
"latest/lsm303agr/) and [`microbit-v2`](https://docs.rs/microbit-v2/latest/"
"microbit/) crates, as well as the [micro:bit hardware](https://"
"tech.microbit.org/hardware/)."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"The LSM303AGR Inertial Measurement Unit is connected to the internal I2C bus."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"TWI is another name for I2C, so the I2C master peripheral is called TWIM."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"The LSM303AGR driver needs something implementing the "
"`embedded_hal::i2c::I2c` trait. The [`microbit::hal::Twim`](https://docs.rs/"
"microbit-v2/latest/microbit/hal/struct.Twim.html) struct implements this."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"You have a [`microbit::Board`](https://docs.rs/microbit-v2/latest/microbit/"
"struct.Board.html) struct with fields for the various pins and peripherals."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"You can also look at the [nRF52833 datasheet](https://"
"infocenter.nordicsemi.com/pdf/nRF52833_PS_v1.5.pdf) if you want, but it "
"shouldn't be necessary for this exercise."
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `compass` directory for the following files."
msgstr ""

#: src/exercises/bare-metal/compass.md src/exercises/bare-metal/rtc.md
msgid "_src/main.rs_:"
msgstr "_src/main.rs_:"

#: src/exercises/bare-metal/compass.md src/exercises/bare-metal/rtc.md
msgid "_Cargo.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid "_Embed.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md src/exercises/bare-metal/rtc.md
msgid "_.cargo/config.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid "See the serial output on Linux with:"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid ""
"Or on Mac OS something like (the device name may be slightly different):"
msgstr ""

#: src/exercises/bare-metal/compass.md
msgid "Use Ctrl+A Ctrl+Q to quit picocom."
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "Bare Metal Rust Morning Exercise"
msgstr "Bar metal formiddags√∏velser"

#: src/exercises/bare-metal/solutions-morning.md
msgid "([back to exercise](compass.md))"
msgstr "([tilbage til √∏velsen](compass.md))"

#: src/exercises/bare-metal/solutions-morning.md
msgid "// Configure serial port.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "// Use the system timer as a delay provider.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "// Set up the I2C controller and Inertial Measurement Unit.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "\"Setting up IMU...\""
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "// Set up display and timer.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "\"Ready.\""
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "// Read compass data and log it to the serial port.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md
msgid "\"{},{},{}\\t{},{},{}\""
msgstr "\"{},{},{}\\t{},{},{}\""

#: src/exercises/bare-metal/solutions-morning.md
msgid ""
"// If button A is pressed, switch to the next mode and briefly blink all "
"LEDs\n"
"        // on.\n"
msgstr ""

#: src/bare-metal/aps.md
msgid "Application processors"
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"So far we've talked about microcontrollers, such as the Arm Cortex-M series. "
"These are typically small systems with very limited resources."
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"Larger systems with more resources are typically called application "
"processors, built around processors such as the ARM Cortex-A or Intel Atom."
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"For simplicity we'll just work with QEMU's aarch64 ['virt'](https://qemu-"
"project.gitlab.io/qemu/system/arm/virt.html) board."
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"Broadly speaking, microcontrollers don't have an MMU or multiple levels of "
"privilege (exception levels on Arm CPUs, rings on x86)."
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"Application processors have more resources, and often run an operating "
"system, instead of directly executing the target application on startup."
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"QEMU supports emulating various different machines or board models for each "
"architecture. The 'virt' board doesn't correspond to any particular real "
"hardware, but is designed purely for virtual machines."
msgstr ""

#: src/bare-metal/aps.md
msgid ""
"We will still address this board as bare-metal, as if we were writing an "
"operating system."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"Before we can start running Rust code, we need to do some initialization."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"```armasm\n"
"/**\n"
" * This is a generic entry point for an image. It carries out the\n"
" * operations required to prepare the loaded image to be run.\n"
" * Specifically, it\n"
" *\n"
" * - sets up the MMU with an identity map of virtual to physical\n"
" *   addresses, and enables caching\n"
" * - enables floating point\n"
" * - zeroes the bss section using registers x25 and above\n"
" * - prepares the stack, pointing to a section within the image\n"
" * - sets up the exception vector\n"
" * - branches to the Rust `main` function\n"
" *\n"
" * It preserves x0-x3 for the Rust entry point, as these may contain\n"
" * boot parameters.\n"
" */\n"
".section .init.entry, \"ax\"\n"
".global entry\n"
"entry:\n"
"    /*\n"
"     * Load and apply the memory management configuration, ready to\n"
"     * enable MMU and caches.\n"
"     */\n"
"    adrp x30, idmap\n"
"    msr ttbr0_el1, x30\n"
"\n"
"    mov_i x30, .Lmairval\n"
"    msr mair_el1, x30\n"
"\n"
"    mov_i x30, .Ltcrval\n"
"    /* Copy the supported PA range into TCR_EL1.IPS. */\n"
"    mrs x29, id_aa64mmfr0_el1\n"
"    bfi x30, x29, #32, #4\n"
"\n"
"    msr tcr_el1, x30\n"
"\n"
"    mov_i x30, .Lsctlrval\n"
"\n"
"    /*\n"
"     * Ensure everything before this point has completed, then\n"
"     * invalidate any potentially stale local TLB entries before they\n"
"     * start being used.\n"
"     */\n"
"    isb\n"
"    tlbi vmalle1\n"
"    ic iallu\n"
"    dsb nsh\n"
"    isb\n"
"\n"
"    /*\n"
"     * Configure sctlr_el1 to enable MMU and cache and don't proceed\n"
"     * until this has completed.\n"
"     */\n"
"    msr sctlr_el1, x30\n"
"    isb\n"
"\n"
"    /* Disable trapping floating point access in EL1. */\n"
"    mrs x30, cpacr_el1\n"
"    orr x30, x30, #(0x3 << 20)\n"
"    msr cpacr_el1, x30\n"
"    isb\n"
"\n"
"    /* Zero out the bss section. */\n"
"    adr_l x29, bss_begin\n"
"    adr_l x30, bss_end\n"
"0:  cmp x29, x30\n"
"    b.hs 1f\n"
"    stp xzr, xzr, [x29], #16\n"
"    b 0b\n"
"\n"
"1:  /* Prepare the stack. */\n"
"    adr_l x30, boot_stack_end\n"
"    mov sp, x30\n"
"\n"
"    /* Set up exception vector. */\n"
"    adr x30, vector_table_el1\n"
"    msr vbar_el1, x30\n"
"\n"
"    /* Call into Rust code. */\n"
"    bl main\n"
"\n"
"    /* Loop forever waiting for interrupts. */\n"
"2:  wfi\n"
"    b 2b\n"
"```"
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"This code is in `src/bare-metal/aps/examples/src/entry.S`. It's not "
"necessary to understand this in detail -- the takeaway is that typically "
"some low-level setup is needed to meet Rust's expectations of the system."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"This is the same as it would be for C: initializing the processor state, "
"zeroing the BSS, and setting up the stack pointer."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"The BSS (block starting symbol, for historical reasons) is the part of the "
"object file that contains statically allocated variables that are "
"initialized to zero. They are omitted from the image, to avoid wasting space "
"on zeroes. The compiler assumes that the loader will take care of zeroing "
"them."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"The BSS may already be zeroed, depending on how memory is initialized and "
"the image is loaded, but we zero it to be sure."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"We need to enable the MMU and cache before reading or writing any memory. If "
"we don't:"
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"Unaligned accesses will fault. We build the Rust code for the `aarch64-"
"unknown-none` target that sets `+strict-align` to prevent the compiler from "
"generating unaligned accesses, so it should be fine in this case, but this "
"is not necessarily the case in general."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"If it were running in a VM, this can lead to cache coherency issues. The "
"problem is that the VM is accessing memory directly with the cache disabled, "
"while the host has cacheable aliases to the same memory. Even if the host "
"doesn't explicitly access the memory, speculative accesses can lead to cache "
"fills, and then changes from one or the other will get lost when the cache "
"is cleaned or the VM enables the cache. (Cache is keyed by physical address, "
"not VA or IPA.)"
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"For simplicity, we just use a hardcoded pagetable (see `idmap.S`) that "
"identity maps the first 1 GiB of address space for devices, the next 1 GiB "
"for DRAM, and another 1 GiB higher up for more devices. This matches the "
"memory layout that QEMU uses."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"We also set up the exception vector (`vbar_el1`), which we'll see more about "
"later."
msgstr ""

#: src/bare-metal/aps/entry-point.md
msgid ""
"All examples this afternoon assume we will be running at exception level 1 "
"(EL1). If you need to run at a different exception level, you'll need to "
"modify `entry.S` accordingly."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "Inline assembly"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"Sometimes we need to use assembly to do things that aren't possible with "
"Rust code. For example, to make an HVC (hypervisor call) to tell the "
"firmware to power off the system:"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"// SAFETY: this only uses the declared registers and doesn't do anything\n"
"    // with memory.\n"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"hvc #0\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w0\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w1\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w2\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w3\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w4\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w5\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w6\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid "\"w7\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"(If you actually want to do this, use the [`smccc`](https://crates.io/crates/"
"smccc) crate which has wrappers for all these functions.)"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"PSCI is the Arm Power State Coordination Interface, a standard set of "
"functions to manage system and CPU power states, among other things. It is "
"implemented by EL3 firmware and hypervisors on many systems."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"The `0 => _` syntax means initialize the register to 0 before running the "
"inline assembly code, and ignore its contents afterwards. We need to use "
"`inout` rather than `in` because the call could potentially clobber the "
"contents of the registers."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"This `main` function needs to be `#[unsafe(no_mangle)]` and `extern \"C\"` "
"because it is called from our entry point in `entry.S`."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"Just `#[no_mangle]` would be sufficient but [RFC3325](https://rust-"
"lang.github.io/rfcs/3325-unsafe-attributes.html) uses this notation to draw "
"reviewer attention to attributes that might cause undefined behavior if used "
"incorrectly."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"`_x0`‚Äì`_x3` are the values of registers `x0`‚Äì`x3`, which are conventionally "
"used by the bootloader to pass things like a pointer to the device tree. "
"According to the standard aarch64 calling convention (which is what `extern "
"\"C\"` specifies to use), registers `x0`‚Äì`x7` are used for the first 8 "
"arguments passed to a function, so `entry.S` doesn't need to do anything "
"special except make sure it doesn't change these registers."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md
msgid ""
"Run the example in QEMU with `make qemu_psci` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid "Volatile memory access for MMIO"
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Use [`pointer::read_volatile`](https://doc.rust-lang.org/stable/core/"
"primitive.pointer.html#method.read_volatile) and [`pointer::write_volatile`]"
"(https://doc.rust-lang.org/stable/core/"
"primitive.pointer.html#method.write_volatile)."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Never hold a reference to a location being accessed with these methods. Rust "
"may read from (or write to, for `&mut`) a reference at any time."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Use `&raw` to get fields of structs without creating an intermediate "
"reference."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid "// SAFETY: Some device is mapped at this address.\n"
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Volatile access: read or write operations may have side-effects, so prevent "
"the compiler or hardware from reordering, duplicating or eliding them."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Usually if you write and then read, e.g. via a mutable reference, the "
"compiler may assume that the value read is the same as the value just "
"written, and not bother actually reading memory."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"Some existing crates for volatile access to hardware do hold references, but "
"this is unsound. Whenever a reference exists, the compiler may choose to "
"dereference it."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid "Use `&raw` to get struct field pointers from a pointer to the struct."
msgstr ""

#: src/bare-metal/aps/mmio.md
msgid ""
"For compatibility with old versions of Rust you can use the [`addr_of!`]"
"(https://doc.rust-lang.org/stable/core/ptr/macro.addr_of.html) macro instead."
msgstr ""

#: src/bare-metal/aps/uart.md
msgid "Let's write a UART driver"
msgstr ""

#: src/bare-metal/aps/uart.md
msgid ""
"The QEMU 'virt' machine has a [PL011](https://developer.arm.com/"
"documentation/ddi0183/g) UART, so let's write a driver for that."
msgstr ""

#: src/bare-metal/aps/uart.md
msgid "/// Minimal driver for a PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/uart.md
msgid ""
"/// Constructs a new instance of the UART driver for a PL011 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the 8 MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""

#: src/bare-metal/aps/uart.md src/bare-metal/aps/better-uart/driver.md
#: src/bare-metal/aps/safemmio/driver.md
msgid "/// Writes a single byte to the UART.\n"
msgstr "/// Writes a single byte to the UART.\n"

#: src/bare-metal/aps/uart.md src/bare-metal/aps/better-uart/driver.md
#: src/bare-metal/aps/safemmio/driver.md
msgid "// Wait until there is room in the TX buffer.\n"
msgstr "// Wait until there is room in the TX buffer.\n"

#: src/bare-metal/aps/uart.md
#, fuzzy
msgid ""
"// SAFETY: We know that the base address points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
msgstr ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"

#: src/bare-metal/aps/uart.md src/bare-metal/aps/better-uart/driver.md
#: src/bare-metal/aps/safemmio/driver.md
msgid "// Write to the TX buffer.\n"
msgstr "// Write to the TX buffer.\n"

#: src/bare-metal/aps/uart.md src/bare-metal/aps/better-uart/driver.md
#: src/bare-metal/aps/safemmio/driver.md
msgid "// Wait until the UART is no longer busy.\n"
msgstr "// Wait until the UART is no longer busy.\n"

#: src/bare-metal/aps/uart.md
msgid ""
"Note that `Uart::new` is unsafe while the other methods are safe. This is "
"because as long as the caller of `Uart::new` guarantees that its safety "
"requirements are met (i.e. that there is only ever one instance of the "
"driver for a given UART, and nothing else aliasing its address space), then "
"it is always safe to call `write_byte` later because we can assume the "
"necessary preconditions."
msgstr ""

#: src/bare-metal/aps/uart.md
msgid ""
"We could have done it the other way around (making `new` safe but "
"`write_byte` unsafe), but that would be much less convenient to use as every "
"place that calls `write_byte` would need to reason about the safety"
msgstr ""

#: src/bare-metal/aps/uart.md
msgid ""
"This is a common pattern for writing safe wrappers of unsafe code: moving "
"the burden of proof for soundness from a large number of places to a smaller "
"number of places."
msgstr ""

#: src/bare-metal/aps/uart/traits.md
msgid "More traits"
msgstr ""

#: src/bare-metal/aps/uart/traits.md
msgid ""
"We derived the `Debug` trait. It would be useful to implement a few more "
"traits too."
msgstr ""

#: src/bare-metal/aps/uart/traits.md
#, fuzzy
msgid ""
"// SAFETY: `Uart` just contains a pointer to device memory, which can be\n"
"// accessed from any context.\n"
msgstr ""
"// Safe because it just contains a pointer to device memory, which can be\n"
"// accessed from any context.\n"

#: src/bare-metal/aps/uart/traits.md
msgid ""
"Implementing `Write` lets us use the `write!` and `writeln!` macros with our "
"`Uart` type."
msgstr ""

#: src/bare-metal/aps/uart/traits.md
msgid ""
"`Send` is an auto-trait, but not implemented automatically because it is not "
"implemented for pointers."
msgstr ""

#: src/bare-metal/aps/uart/using.md src/bare-metal/aps/logging/using.md
msgid "Using it"
msgstr ""

#: src/bare-metal/aps/uart/using.md
msgid ""
"Let's write a small program using our driver to write to the serial console."
msgstr ""

#: src/bare-metal/aps/uart/using.md src/bare-metal/aps/safemmio/using.md
#: src/bare-metal/aps/logging/using.md src/bare-metal/aps/aarch64-rt.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Base address of the primary PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/uart/using.md src/bare-metal/aps/safemmio/using.md
#: src/bare-metal/aps/logging/using.md src/bare-metal/aps/aarch64-rt.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"// SAFETY: `PL011_BASE_ADDRESS` is the base address of a PL011 device, and\n"
"    // nothing else accesses that address range.\n"
msgstr ""

#: src/bare-metal/aps/uart/using.md src/bare-metal/aps/safemmio/using.md
#: src/bare-metal/aps/logging/using.md src/bare-metal/aps/aarch64-rt.md
msgid "\"main({x0:#x}, {x1:#x}, {x2:#x}, {x3:#x})\""
msgstr ""

#: src/bare-metal/aps/uart/using.md
msgid ""
"As in the [inline assembly](../inline-assembly.md) example, this `main` "
"function is called from our entry point code in `entry.S`. See the speaker "
"notes there for details."
msgstr ""

#: src/bare-metal/aps/uart/using.md
msgid ""
"Run the example in QEMU with `make qemu_minimal` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "A better UART driver"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid ""
"The PL011 actually has [more registers](https://developer.arm.com/"
"documentation/ddi0183/g/programmers-model/summary-of-registers), and adding "
"offsets to construct pointers to access them is error-prone and hard to "
"read. Additionally, some of them are bit fields, which would be nice to "
"access in a structured way."
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "Offset"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "Register name"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "Width"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x00"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "DR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "12"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x04"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "RSR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "4"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x18"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "FR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "9"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x20"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "ILPR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "8"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x24"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "IBRD"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "16"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x28"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "FBRD"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "6"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x2c"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "LCR_H"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x30"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "CR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x34"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "IFLS"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x38"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "IMSC"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "11"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x3c"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "RIS"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x40"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "MIS"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x44"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "ICR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "0x48"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "DMACR"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "3"
msgstr ""

#: src/bare-metal/aps/better-uart.md
msgid "There are also some ID registers that have been omitted for brevity."
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md
msgid ""
"The [`bitflags`](https://crates.io/crates/bitflags) crate is useful for "
"working with bitflags."
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// Flags from the UART flag register.\n"
msgstr "/// Flags from the UART flag register.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// Clear to send.\n"
msgstr "/// Clear to send.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// Data set ready.\n"
msgstr "/// Data set ready.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// Data carrier detect.\n"
msgstr "/// Data carrier detect.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// UART busy transmitting data.\n"
msgstr "/// UART busy transmitting data.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// Receive FIFO is empty.\n"
msgstr "/// Receive FIFO is empty.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// Transmit FIFO is full.\n"
msgstr "/// Transmit FIFO is full.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// Receive FIFO is full.\n"
msgstr "/// Receive FIFO is full.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// Transmit FIFO is empty.\n"
msgstr "/// Transmit FIFO is empty.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid "/// Ring indicator.\n"
msgstr "/// Ring indicator.\n"

#: src/bare-metal/aps/better-uart/bitflags.md
msgid ""
"The `bitflags!` macro creates a newtype something like `struct Flags(u16)`, "
"along with a bunch of method implementations to get and set flags."
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md
msgid "Multiple registers"
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md
msgid ""
"We can use a struct to represent the memory layout of the UART's registers."
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md
msgid ""
"[`#[repr(C)]`](https://doc.rust-lang.org/reference/type-layout.html#the-c-"
"representation) tells the compiler to lay the struct fields out in order, "
"following the same rules as C. This is necessary for our struct to have a "
"predictable layout, as default Rust representation allows the compiler to "
"(among other things) reorder fields however it sees fit."
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md
#: src/bare-metal/aps/safemmio/driver.md
msgid "Now let's use the new `Registers` struct in our driver."
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md
#: src/bare-metal/aps/safemmio/driver.md
msgid "/// Driver for a PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md
#, fuzzy
msgid ""
"/// Constructs a new instance of the UART driver for a PL011 device with "
"the\n"
"    /// given set of registers.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given pointer must point to the 8 MMIO control registers of a "
"PL011\n"
"    /// device, which must be mapped into the address space of the process "
"as\n"
"    /// device memory and not have any other aliases.\n"
msgstr ""
"/// Constructs a new instance of the UART driver for a PL011 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"

#: src/bare-metal/aps/better-uart/driver.md
#, fuzzy
msgid ""
"// SAFETY: We know that self.registers points to the control registers\n"
"        // of a PL011 device which is appropriately mapped.\n"
msgstr ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"

#: src/bare-metal/aps/better-uart/driver.md
#: src/bare-metal/aps/safemmio/driver.md
#, fuzzy
msgid ""
"/// Reads and returns a pending byte, or `None` if nothing has been\n"
"    /// received.\n"
msgstr ""
"/// Reads and returns a pending byte, or `None` if nothing has been "
"received.\n"

#: src/bare-metal/aps/better-uart/driver.md
#, fuzzy
msgid ""
"// SAFETY: We know that self.registers points to the control\n"
"            // registers of a PL011 device which is appropriately mapped.\n"
msgstr ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"

#: src/bare-metal/aps/better-uart/driver.md
#: src/bare-metal/aps/safemmio/driver.md
msgid "// TODO: Check for error conditions in bits 8-11.\n"
msgstr "// TODO: Check for error conditions in bits 8-11.\n"

#: src/bare-metal/aps/better-uart/driver.md
msgid ""
"Note the use of `&raw const` / `&raw mut` to get pointers to individual "
"fields without creating an intermediate reference, which would be unsound."
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md
msgid ""
"The example isn't included in the slides because it is very similar to the "
"`safe-mmio` example which comes next. You can run it in QEMU with `make "
"qemu` under `src/bare-metal/aps/examples` if you need to."
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid ""
"The [`safe-mmio`](https://crates.io/crates/safe-mmio) crate provides types "
"to wrap registers that can be read or written safely."
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid "Can't read"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid "Read has no side-effects"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid "Read has side-effects"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid "Can't write"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid ""
"[`ReadPure`](https://docs.rs/safe-mmio/latest/safe_mmio/fields/"
"struct.ReadPure.html)"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid ""
"[`ReadOnly`](https://docs.rs/safe-mmio/latest/safe_mmio/fields/"
"struct.ReadOnly.html)"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid "Can write"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid ""
"[`WriteOnly`](https://docs.rs/safe-mmio/latest/safe_mmio/fields/"
"struct.WriteOnly.html)"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid ""
"[`ReadPureWrite`](https://docs.rs/safe-mmio/latest/safe_mmio/fields/"
"struct.ReadPureWrite.html)"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid ""
"[`ReadWrite`](https://docs.rs/safe-mmio/latest/safe_mmio/fields/"
"struct.ReadWrite.html)"
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid "Reading `dr` has a side effect: it pops a byte from the receive FIFO."
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid ""
"Reading `rsr` (and other registers) has no side-effects. It is a 'pure' read."
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid ""
"There are a number of different crates providing safe abstractions around "
"MMIO operations; we recommend the `safe-mmio` crate."
msgstr ""

#: src/bare-metal/aps/safemmio/registers.md
msgid ""
"The difference between `ReadPure` or `ReadOnly` (and likewise between "
"`ReadPureWrite` and `ReadWrite`) is whether reading a register can have side-"
"effects that change the state of the device, e.g., reading the data register "
"pops a byte from the receive FIFO. `ReadPure` means that reads have no side-"
"effects, they are purely reading data."
msgstr ""

#: src/bare-metal/aps/safemmio/driver.md
msgid ""
"/// Constructs a new instance of the UART driver for a PL011 device with "
"the\n"
"    /// given set of registers.\n"
msgstr ""

#: src/bare-metal/aps/safemmio/driver.md
msgid "The driver no longer needs any unsafe code!"
msgstr ""

#: src/bare-metal/aps/safemmio/driver.md
msgid ""
"`UniqueMmioPointer` is a wrapper around a raw pointer to an MMIO device or "
"register. The caller of `UniqueMmioPointer::new` promises that it is valid "
"and unique for the given lifetime, so it can provide safe methods to read "
"and write fields."
msgstr ""

#: src/bare-metal/aps/safemmio/driver.md
msgid ""
"Note that `Uart::new` is now safe; `UniqueMmioPointer::new` is unsafe "
"instead."
msgstr ""

#: src/bare-metal/aps/safemmio/driver.md
msgid ""
"These MMIO accesses are generally a wrapper around `read_volatile` and "
"`write_volatile`, though on aarch64 they are instead implemented in assembly "
"to work around a bug where the compiler can emit instructions that prevent "
"MMIO virtualization."
msgstr ""

#: src/bare-metal/aps/safemmio/driver.md
msgid ""
"The `field!` and `field_shared!` macros internally use `&raw mut` and `&raw "
"const` to get pointers to individual fields without creating an intermediate "
"reference, which would be unsound."
msgstr ""

#: src/bare-metal/aps/safemmio/driver.md
msgid ""
"`field!` needs a mutable reference to a `UniqueMmioPointer`, and returns a "
"`UniqueMmioPointer` that allows reads with side effects and writes."
msgstr ""

#: src/bare-metal/aps/safemmio/driver.md
msgid ""
"`field_shared!` works with a shared reference to either a "
"`UniqueMmioPointer` or a `SharedMmioPointer`. It returns a "
"`SharedMmioPointer` that only allows pure reads."
msgstr ""

#: src/bare-metal/aps/safemmio/using.md
msgid ""
"Let's write a small program using our driver to write to the serial console, "
"and echo incoming bytes."
msgstr ""

#: src/bare-metal/aps/safemmio/using.md
msgid "b'\\r'"
msgstr ""

#: src/bare-metal/aps/safemmio/using.md
#: src/concurrency/async-pitfalls/cancellation.md
msgid "b'\\n'"
msgstr ""

#: src/bare-metal/aps/safemmio/using.md
msgid "b'q'"
msgstr ""

#: src/bare-metal/aps/safemmio/using.md
msgid "\"\\n\\nBye!\""
msgstr ""

#: src/bare-metal/aps/safemmio/using.md
msgid ""
"Run the example in QEMU with `make qemu_safemmio` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/logging.md
msgid ""
"It would be nice to be able to use the logging macros from the [`log`]"
"(https://crates.io/crates/log) crate. We can do this by implementing the "
"`Log` trait."
msgstr ""

#: src/bare-metal/aps/logging.md
msgid "\"[{}] {}\""
msgstr "\"[{}] {}\""

#: src/bare-metal/aps/logging.md
msgid "/// Initialises UART logger.\n"
msgstr "/// Initialises UART logger.\n"

#: src/bare-metal/aps/logging.md
msgid ""
"The first unwrap in `log` will succeed because we initialize `LOGGER` before "
"calling `set_logger`. The second will succeed because `Uart::write_str` "
"always returns `Ok`."
msgstr ""

#: src/bare-metal/aps/logging/using.md
msgid "We need to initialise the logger before we use it."
msgstr ""

#: src/bare-metal/aps/logging/using.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"{info}\""
msgstr ""

#: src/bare-metal/aps/logging/using.md
msgid "Note that our panic handler can now log details of panics."
msgstr ""

#: src/bare-metal/aps/logging/using.md
msgid ""
"Run the example in QEMU with `make qemu_logger` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid ""
"AArch64 defines an exception vector table with 16 entries, for 4 types of "
"exceptions (synchronous, IRQ, FIQ, SError) from 4 states (current EL with "
"SP0, current EL with SPx, lower EL using AArch64, lower EL using AArch32). "
"We implement this in assembly to save volatile registers to the stack before "
"calling into Rust code:"
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid "EL is exception level; all our examples this afternoon run in EL1."
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid ""
"For simplicity we aren't distinguishing between SP0 and SPx for the current "
"EL exceptions, or between AArch32 and AArch64 for the lower EL exceptions."
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid ""
"For this example we just log the exception and power down, as we don't "
"expect any of them to actually happen."
msgstr ""

#: src/bare-metal/aps/exceptions.md
msgid ""
"We can think of exception handlers and our main execution context more or "
"less like different threads. [`Send` and `Sync`](../../concurrency/send-"
"sync.md) will control what we can share between them, just like with "
"threads. For example, if we want to share some value between exception "
"handlers and the rest of the program, and it's `Send` but not `Sync`, then "
"we'll need to wrap it in something like a `Mutex` and put it in a static."
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
msgid ""
"The `aarch64-rt` crate provides the assembly entry point and exception "
"vector that we implemented before. We just need to mark our main function "
"with the `entry!` macro."
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
msgid ""
"It also provides the `initial_pagetable!` macro to let us define an initial "
"static pagetable in Rust, rather than in assembly code like we did before."
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
msgid ""
"We can also use the UART driver from the `arm-pl011-uart` crate rather than "
"writing our own."
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Attributes to use for device memory in the initial identity map.\n"
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Attributes to use for normal memory in the initial identity map.\n"
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "// 1 GiB of device memory.\n"
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "// 1 GiB of normal memory.\n"
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "// Another 1 GiB of device memory starting at 256 GiB.\n"
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"system_off returned\""
msgstr ""

#: src/bare-metal/aps/aarch64-rt.md
msgid ""
"Run the example in QEMU with `make qemu_rt` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "[oreboot](https://github.com/oreboot/oreboot)"
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "\"coreboot without the C\"."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "Supports x86, aarch64 and RISC-V."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "Relies on LinuxBoot rather than having many drivers itself."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"[Rust RaspberryPi OS tutorial](https://github.com/rust-embedded/rust-"
"raspberrypi-OS-tutorials)"
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"Initialization, UART driver, simple bootloader, JTAG, exception levels, "
"exception handling, page tables."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"Some caveats around cache maintenance and initialization in Rust, not "
"necessarily a good example to copy for production code."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "[`cargo-call-stack`](https://crates.io/crates/cargo-call-stack)"
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid "Static analysis to determine maximum stack usage."
msgstr ""

#: src/bare-metal/aps/other-projects.md
msgid ""
"The RaspberryPi OS tutorial runs Rust code before the MMU and caches are "
"enabled. This will read and write memory (e.g. the stack). However, this has "
"the problems mentioned at the beginning of this session regarding unaligned "
"access and cache coherency."
msgstr ""

#: src/bare-metal/useful-crates.md
msgid "Useful crates"
msgstr ""

#: src/bare-metal/useful-crates.md
msgid ""
"We'll look at a few crates that solve some common problems in bare-metal "
"programming."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"The [`zerocopy`](https://docs.rs/zerocopy/) crate (from Fuchsia) provides "
"traits and macros for safely converting between byte sequences and other "
"types."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"This is not suitable for MMIO (as it doesn't use volatile reads and writes), "
"but can be useful for working with structures shared with hardware e.g. by "
"DMA, or sent over some external interface."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"`FromBytes` can be implemented for types for which any byte pattern is "
"valid, and so can safely be converted from an untrusted sequence of bytes."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"Attempting to derive `FromBytes` for these types would fail, because "
"`RequestType` doesn't use all possible u32 values as discriminants, so not "
"all byte patterns are valid."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"`zerocopy::byteorder` has types for byte-order aware numeric primitives."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md
msgid ""
"Run the example with `cargo run` under `src/bare-metal/useful-crates/"
"zerocopy-example/`. (It won't run in the Playground because of the crate "
"dependency.)"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid ""
"The [`aarch64-paging`](https://crates.io/crates/aarch64-paging) crate lets "
"you create page tables according to the AArch64 Virtual Memory System "
"Architecture."
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid "// Create a new page table with identity mapping.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid "// Map a 2 MiB region of memory as read-only.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid "// Set `TTBR0_EL1` to activate the page table.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid ""
"This is used in Android for the [Protected VM Firmware](https://"
"cs.android.com/android/platform/superproject/main/+/main:packages/modules/"
"Virtualization/guest/pvmfw/)."
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md
msgid ""
"There's no easy way to run this example by itself, as it needs to run on "
"real hardware or under QEMU."
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md
msgid ""
"[`buddy_system_allocator`](https://crates.io/crates/buddy_system_allocator) "
"is a crate that implements a basic buddy system allocator. It can be used "
"both to implement [`GlobalAlloc`](https://doc.rust-lang.org/core/alloc/"
"trait.GlobalAlloc.html) (using [`LockedHeap`](https://docs.rs/"
"buddy_system_allocator/0.9.0/buddy_system_allocator/struct.LockedHeap.html)) "
"so you can use the standard `alloc` crate (as we saw [before](../alloc.md)), "
"or for allocating other address space (using [`FrameAllocator`](https://"
"docs.rs/buddy_system_allocator/0.9.0/buddy_system_allocator/"
"struct.FrameAllocator.html)) . For example, we might want to allocate MMIO "
"space for PCI BARs:"
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md
msgid "PCI BARs always have alignment equal to their size."
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md
msgid ""
"Run the example with `cargo run` under `src/bare-metal/useful-crates/"
"allocator-example/`. (It won't run in the Playground because of the crate "
"dependency.)"
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md
msgid ""
"Sometimes you want something that can be resized like a `Vec`, but without "
"heap allocation. [`tinyvec`](https://crates.io/crates/tinyvec) provides "
"this: a vector backed by an array or slice, which could be statically "
"allocated or on the stack, that keeps track of how many elements are used "
"and panics if you try to use more than are allocated."
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md
msgid ""
"`tinyvec` requires that the element type implement `Default` for "
"initialization."
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md
msgid ""
"The Rust Playground includes `tinyvec`, so this example will run fine inline."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"`std::sync::Mutex` and the other synchronisation primitives from `std::sync` "
"are not available in `core` or `alloc`. How can we manage synchronisation or "
"interior mutability, such as for sharing state between different CPUs?"
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"The [`spin`](https://crates.io/crates/spin) crate provides spinlock-based "
"equivalents of many of these primitives."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid "Be careful to avoid deadlock if you take locks in interrupt handlers."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"`spin` also has a ticket lock mutex implementation; equivalents of `RwLock`, "
"`Barrier` and `Once` from `std::sync`; and `Lazy` for lazy initialization."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"The [`once_cell`](https://crates.io/crates/once_cell) crate also has some "
"useful types for late initialization with a slightly different approach to "
"`spin::once::Once`."
msgstr ""

#: src/bare-metal/useful-crates/spin.md
msgid ""
"The Rust Playground includes `spin`, so this example will run fine inline."
msgstr ""

#: src/bare-metal/android.md
msgid ""
"To build a bare-metal Rust binary in AOSP, you need to use a "
"`rust_ffi_static` Soong rule to build your Rust code, then a `cc_binary` "
"with a linker script to produce the binary itself, and then a `raw_binary` "
"to convert the ELF to a raw binary ready to be run."
msgstr ""

#: src/bare-metal/android/vmbase.md
msgid "vmbase"
msgstr "vmbase"

#: src/bare-metal/android/vmbase.md
msgid ""
"For VMs running under crosvm on aarch64, the [vmbase](https://"
"android.googlesource.com/platform/packages/modules/Virtualization/+/refs/"
"heads/main/libs/libvmbase/) library provides a linker script and useful "
"defaults for the build rules, along with an entry point, UART console "
"logging and more."
msgstr ""

#: src/bare-metal/android/vmbase.md
msgid ""
"The `main!` macro marks your main function, to be called from the `vmbase` "
"entry point."
msgstr ""

#: src/bare-metal/android/vmbase.md
msgid ""
"The `vmbase` entry point handles console initialisation, and issues a "
"PSCI_SYSTEM_OFF to shutdown the VM if your main function returns."
msgstr ""

#: src/exercises/bare-metal/afternoon.md
msgid "We will write a driver for the PL031 real-time clock device."
msgstr ""

#: src/exercises/bare-metal/afternoon.md
msgid ""
"After looking at the exercises, you can look at the [solutions](solutions-"
"afternoon.md) provided."
msgstr ""

#: src/exercises/bare-metal/rtc.md
#: src/exercises/bare-metal/solutions-afternoon.md
msgid "RTC driver"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"The QEMU aarch64 virt machine has a [PL031](https://developer.arm.com/"
"documentation/ddi0224/c) real-time clock at 0x9010000. For this exercise, "
"you should write a driver for it."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"Use it to print the current time to the serial console. You can use the "
"[`chrono`](https://crates.io/crates/chrono) crate for date/time formatting."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"Use the match register and raw interrupt status to busy-wait until a given "
"time, e.g. 3 seconds in the future. (Call [`core::hint::spin_loop`](https://"
"doc.rust-lang.org/core/hint/fn.spin_loop.html) inside the loop.)"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"_Extension if you have time:_ Enable and handle the interrupt generated by "
"the RTC match. You can use the driver provided in the [`arm-gic`](https://"
"docs.rs/arm-gic/) crate to configure the Arm Generic Interrupt Controller."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "Use the RTC interrupt, which is wired to the GIC as `IntId::spi(2)`."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"Once the interrupt is enabled, you can put the core to sleep via "
"`arm_gic::wfi()`, which will cause the core to sleep until it receives an "
"interrupt."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `rtc` directory for the following files."
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid ""
"_src/exceptions.rs_ (you should only need to change this for the 3rd part of "
"the exercise):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_src/logger.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_build.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_memory.ld_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "_Makefile_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md
msgid "Run the code in QEMU with `make qemu`."
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "Bare Metal Rust Afternoon"
msgstr "R√• jern Rust eftermiddag"

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "([back to exercise](rtc.md))"
msgstr "([tilbage til √∏velsen](rtc.md))"

#: src/exercises/bare-metal/solutions-afternoon.md
#, fuzzy
msgid "_main.rs_:"
msgstr "_src/main.rs_:"

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Base addresses of the GICv3.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Base address of the PL031 RTC.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// The IRQ used by the PL031 RTC.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"main({:#x}, {:#x}, {:#x}, {:#x})\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"// SAFETY: `GICD_BASE_ADDRESS` and `GICR_BASE_ADDRESS` are the base\n"
"    // addresses of a GICv3 distributor and redistributor respectively, and\n"
"    // nothing else accesses those address ranges.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"// SAFETY: `PL031_BASE_ADDRESS` is the base address of a PL031 device, and\n"
"    // nothing else accesses that address range.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"RTC: {time}\""
msgstr "\"RTC: {time}\""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "// Wait for 3 seconds, without interrupts.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"Waiting for {}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"matched={}, interrupt_pending={}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "\"Finished waiting\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "// Wait another 3 seconds for an interrupt.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
#, fuzzy
msgid "_pl031.rs_:"
msgstr "`pl031.rs`:"

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Data register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Match register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Load register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Control register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Interrupt Mask Set or Clear register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Raw Interrupt Status\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Masked Interrupt Status\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Interrupt Clear Register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Driver for a PL031 real-time clock.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Constructs a new instance of the RTC driver for a PL031 device with the\n"
"    /// given set of registers.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Reads the current RTC value.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Writes a match value. When the RTC value matches this then an interrupt\n"
"    /// will be generated (if it is enabled).\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Returns whether the match register matches the RTC value, whether or "
"not\n"
"    /// the interrupt is enabled.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Returns whether there is currently an interrupt pending.\n"
"    ///\n"
"    /// This should be true if and only if `matched` returns true and the\n"
"    /// interrupt is masked.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid ""
"/// Sets or clears the interrupt mask.\n"
"    ///\n"
"    /// When the mask is true the interrupt is enabled; when it is false "
"the\n"
"    /// interrupt is disabled.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md
msgid "/// Clears a pending interrupt, if any.\n"
msgstr ""

#: src/concurrency/welcome.md
msgid "Welcome to Concurrency in Rust"
msgstr "Velkommen til Concurrency i Rust"

#: src/concurrency/welcome.md
msgid ""
"Rust has full support for concurrency using OS threads with mutexes and "
"channels."
msgstr ""

#: src/concurrency/welcome.md
msgid ""
"The Rust type system plays an important role in making many concurrency bugs "
"compile time bugs. This is often referred to as _fearless concurrency_ since "
"you can rely on the compiler to ensure correctness at runtime."
msgstr ""

#: src/concurrency/welcome.md
msgid ""
"Including 10 minute breaks, this session should take about 3 hours and 20 "
"minutes. It contains:"
msgstr ""

#: src/concurrency/welcome.md
msgid ""
"Rust lets us access OS concurrency toolkit: threads, sync. primitives, etc."
msgstr ""

#: src/concurrency/welcome.md
msgid ""
"The type system gives us safety for concurrency without any special features."
msgstr ""

#: src/concurrency/welcome.md
msgid ""
"The same tools that help with \"concurrent\" access in a single thread "
"(e.g., a called function that might mutate an argument or save references to "
"it to read later) save us from multi-threading issues."
msgstr ""

#: src/concurrency/threads/plain.md
msgid "Rust threads work similarly to threads in other languages:"
msgstr "Tr√•de (eng: _threads_) i Rust virker p√• samme m√•de som i andre sprog:"

#: src/concurrency/threads/plain.md
msgid "\"Count in thread: {i}!\""
msgstr "\"T√¶ller i tr√•den: {i}!\""

#: src/concurrency/threads/plain.md
msgid "\"Main thread: {i}\""
msgstr "\"Hovedtr√•den: {i}\""

#: src/concurrency/threads/plain.md
msgid ""
"Spawning new threads does not automatically delay program termination at the "
"end of `main`."
msgstr ""

#: src/concurrency/threads/plain.md
msgid "Thread panics are independent of each other."
msgstr "Hver tr√•d kan g√• i panik uafh√¶ngigt af andre tr√•de."

#: src/concurrency/threads/plain.md
#, fuzzy
msgid ""
"Panics can carry a payload, which can be unpacked with [`Any::downcast_ref`]"
"(https://doc.rust-lang.org/std/any/trait.Any.html#method.downcast_ref)."
msgstr "En panik kan have en nyttelast som kan udpakkes med `downcast_ref`."

#: src/concurrency/threads/plain.md
#, fuzzy
msgid "Run the example."
msgstr "Rust by Example"

#: src/concurrency/threads/plain.md
msgid ""
"5ms timing is loose enough that main and spawned threads stay mostly in "
"lockstep."
msgstr ""

#: src/concurrency/threads/plain.md
msgid "Notice that the program ends before the spawned thread reaches 10!"
msgstr ""

#: src/concurrency/threads/plain.md
msgid ""
"This is because `main` ends the program and spawned threads do not make it "
"persist."
msgstr ""

#: src/concurrency/threads/plain.md
msgid "Compare to `pthreads`/C++ `std::thread`/`boost::thread` if desired."
msgstr ""

#: src/concurrency/threads/plain.md
msgid "How do we wait around for the spawned thread to complete?"
msgstr ""

#: src/concurrency/threads/plain.md
msgid ""
"[`thread::spawn`](https://doc.rust-lang.org/std/thread/fn.spawn.html) "
"returns a `JoinHandle`. Look at the docs."
msgstr ""

#: src/concurrency/threads/plain.md
msgid ""
"`JoinHandle` has a [`.join()`](https://doc.rust-lang.org/std/thread/"
"struct.JoinHandle.html#method.join) method that blocks."
msgstr ""

#: src/concurrency/threads/plain.md
#, fuzzy
msgid ""
"Use `let handle = thread::spawn(...)` and later `handle.join()` to wait for "
"the thread to finish and have the program count all the way to 10."
msgstr ""
"Brug `let handle = thread::spawn(...)` og senere `handle.join()` for at "
"vente p√• at tr√•den afsluttes."

#: src/concurrency/threads/plain.md
msgid "Now what if we want to return a value?"
msgstr ""

#: src/concurrency/threads/plain.md
msgid "Look at docs again:"
msgstr ""

#: src/concurrency/threads/plain.md
#, fuzzy
msgid ""
"[`thread::spawn`](https://doc.rust-lang.org/std/thread/fn.spawn.html)'s "
"closure returns `T`"
msgstr ""
"Du kan dog bruge en [tr√•d med virkefelt (eng: _scoped thread_)](https://"
"doc.rust-lang.org/std/thread/fn.scope.html) for at opn√• dette:"

#: src/concurrency/threads/plain.md
msgid ""
"`JoinHandle` [`.join()`](https://doc.rust-lang.org/std/thread/"
"struct.JoinHandle.html#method.join) returns `thread::Result<T>`"
msgstr ""

#: src/concurrency/threads/plain.md
#, fuzzy
msgid ""
"Use the `Result` return value from `handle.join()` to get access to the "
"returned value."
msgstr ""
"Bruge `Result`\\-returv√¶rdien fra  `handle.join()` til at f√• adgang til "
"panikkens nyttelast. Dette er et godt tidspunkt til at snakke om [`Any`]"
"(https://doc.rust-lang.org/std/any/index.html)."

#: src/concurrency/threads/plain.md
msgid "Ok, what about the other case?"
msgstr ""

#: src/concurrency/threads/plain.md
#, fuzzy
msgid "Trigger a panic in the thread. Note that this doesn't panic `main`."
msgstr "Skab en panik i tr√•den, bem√¶rk hvordan dette ikke p√•virker `main`."

#: src/concurrency/threads/plain.md
#, fuzzy
msgid ""
"Access the panic payload. This is a good time to talk about [`Any`](https://"
"doc.rust-lang.org/std/any/index.html)."
msgstr ""
"Bruge `Result`\\-returv√¶rdien fra  `handle.join()` til at f√• adgang til "
"panikkens nyttelast. Dette er et godt tidspunkt til at snakke om [`Any`]"
"(https://doc.rust-lang.org/std/any/index.html)."

#: src/concurrency/threads/plain.md
msgid "Now we can return values from threads! What about taking inputs?"
msgstr ""

#: src/concurrency/threads/plain.md
msgid "Capture something by reference in the thread closure."
msgstr ""

#: src/concurrency/threads/plain.md
msgid "An error message indicates we must move it."
msgstr ""

#: src/concurrency/threads/plain.md
msgid "Move it in, see we can compute and then return a derived value."
msgstr ""

#: src/concurrency/threads/plain.md
msgid "If we want to borrow?"
msgstr ""

#: src/concurrency/threads/plain.md
msgid ""
"Main kills child threads when it returns, but another function would just "
"return and leave them running."
msgstr ""

#: src/concurrency/threads/plain.md
msgid "That would be stack use-after-return, which violates memory safety!"
msgstr ""

#: src/concurrency/threads/plain.md
msgid "How do we avoid this? See next slide."
msgstr ""

#: src/concurrency/threads/scoped.md
msgid "Normal threads cannot borrow from their environment:"
msgstr "Normale tr√•de kan ikke l√•ne fra deres omgivelser:"

#: src/concurrency/threads/scoped.md
msgid ""
"However, you can use a [scoped thread](https://doc.rust-lang.org/std/thread/"
"fn.scope.html) for this:"
msgstr ""
"Du kan dog bruge en [tr√•d med virkefelt (eng: _scoped thread_)](https://"
"doc.rust-lang.org/std/thread/fn.scope.html) for at opn√• dette:"

#: src/concurrency/threads/scoped.md
msgid ""
"The reason for that is that when the `thread::scope` function completes, all "
"the threads are guaranteed to be joined, so they can return borrowed data."
msgstr ""
"Grunden er, at `thread::scope`\\-funktionen garanterer at alle tr√•dene er "
"blevet forenet med hovedtr√•den n√•r kaldet afsluttet. De vil s√•ledes "
"returnere det l√•nte data."

#: src/concurrency/threads/scoped.md
msgid ""
"Normal Rust borrowing rules apply: you can either borrow mutably by one "
"thread, or immutably by any number of threads."
msgstr ""
"De normale l√•neregler for Rust g√¶lder: du kan enten lade √©n tr√•d l√•ne data "
"for at √¶ndre p√• det, eller du kan lade flere tr√•de l√•ne data uden at √¶ndre "
"p√• det."

#: src/concurrency/channels.md src/concurrency/async-control-flow.md
#: src/unsafe-deep-dive/motivations.md
msgid "This segment should take about 20 minutes. It contains:"
msgstr ""

#: src/concurrency/channels/senders-receivers.md
msgid ""
"Rust channels have two parts: a [`Sender<T>`](https://doc.rust-lang.org/std/"
"sync/mpsc/struct.Sender.html) and a [`Receiver<T>`](https://doc.rust-"
"lang.org/std/sync/mpsc/struct.Receiver.html). The two parts are connected "
"via the channel, but you only see the end-points."
msgstr ""

#: src/concurrency/channels/senders-receivers.md
msgid "\"Received: {:?}\""
msgstr "\"Modtaget: {:?}\""

#: src/concurrency/channels/senders-receivers.md
msgid ""
"[`mpsc`](https://doc.rust-lang.org/std/sync/mpsc/index.html) stands for "
"Multi-Producer, Single-Consumer. `Sender` and `SyncSender` implement `Clone` "
"(so you can make multiple producers) but `Receiver` does not."
msgstr ""

#: src/concurrency/channels/senders-receivers.md
msgid ""
"[`send()`](https://doc.rust-lang.org/std/sync/mpsc/"
"struct.Sender.html#method.send) and [`recv()`](https://doc.rust-lang.org/std/"
"sync/mpsc/struct.Receiver.html#method.recv) return `Result`. If they return "
"`Err`, it means the counterpart `Sender` or `Receiver` is dropped and the "
"channel is closed."
msgstr ""

#: src/concurrency/channels/unbounded.md
msgid ""
"You get an unbounded and asynchronous channel with [`mpsc::channel()`]"
"(https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html):"
msgstr ""

#: src/concurrency/channels/unbounded.md src/concurrency/channels/bounded.md
msgid "\"Message {i}\""
msgstr "\"Besked {i}\""

#: src/concurrency/channels/unbounded.md src/concurrency/channels/bounded.md
msgid "\"{thread_id:?}: sent Message {i}\""
msgstr "\"{thread_id:?}: sendte Besked {i}\""

#: src/concurrency/channels/unbounded.md src/concurrency/channels/bounded.md
msgid "\"{thread_id:?}: done\""
msgstr "\"{thread_id:?}: f√¶rdig\""

#: src/concurrency/channels/unbounded.md src/concurrency/channels/bounded.md
msgid "\"Main: got {msg}\""
msgstr "\"Hovedtr√•den: modtog {msg}\""

#: src/concurrency/channels/unbounded.md
msgid ""
"An unbounded channel will allocate as much space as is necessary to store "
"pending messages. The `send()` method will not block the calling thread."
msgstr ""

#: src/concurrency/channels/unbounded.md
msgid ""
"A call to `send()` will abort with an error (that is why it returns "
"`Result`) if the channel is closed. A channel is closed when the receiver is "
"dropped."
msgstr ""

#: src/concurrency/channels/bounded.md
msgid ""
"With bounded (synchronous) channels, [`send()`](https://doc.rust-lang.org/"
"std/sync/mpsc/struct.SyncSender.html#method.send) can block the current "
"thread:"
msgstr ""

#: src/concurrency/channels/bounded.md
msgid ""
"Calling `send()` will block the current thread until there is space in the "
"channel for the new message. The thread can be blocked indefinitely if there "
"is nobody who reads from the channel."
msgstr ""

#: src/concurrency/channels/bounded.md
msgid ""
"Like unbounded channels, a call to `send()` will abort with an error if the "
"channel is closed."
msgstr ""

#: src/concurrency/channels/bounded.md
msgid ""
"A bounded channel with a size of zero is called a \"rendezvous channel\". "
"Every send will block the current thread until another thread calls "
"[`recv()`](https://doc.rust-lang.org/std/sync/mpsc/"
"struct.Receiver.html#method.recv)."
msgstr ""

#: src/concurrency/send-sync.md
msgid "Send"
msgstr "Send"

#: src/concurrency/send-sync.md
msgid "Sync"
msgstr "Sync"

#: src/concurrency/send-sync/marker-traits.md
msgid ""
"How does Rust know to forbid shared access across threads? The answer is in "
"two traits:"
msgstr ""

#: src/concurrency/send-sync/marker-traits.md
msgid ""
"[`Send`](https://doc.rust-lang.org/std/marker/trait.Send.html): a type `T` "
"is `Send` if it is safe to move a `T` across a thread boundary."
msgstr ""

#: src/concurrency/send-sync/marker-traits.md
msgid ""
"[`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html): a type `T` "
"is `Sync` if it is safe to move a `&T` across a thread boundary."
msgstr ""

#: src/concurrency/send-sync/marker-traits.md
msgid ""
"`Send` and `Sync` are [unsafe traits](../../unsafe-rust/unsafe-traits.md). "
"The compiler will automatically derive them for your types as long as they "
"only contain `Send` and `Sync` types. You can also implement them manually "
"when you know it is valid."
msgstr ""

#: src/concurrency/send-sync/marker-traits.md
msgid ""
"One can think of these traits as markers that the type has certain thread-"
"safety properties."
msgstr ""

#: src/concurrency/send-sync/marker-traits.md
msgid "They can be used in the generic constraints as normal traits."
msgstr ""

#: src/concurrency/send-sync/send.md
msgid ""
"A type `T` is [`Send`](https://doc.rust-lang.org/std/marker/trait.Send.html) "
"if it is safe to move a `T` value to another thread."
msgstr ""

#: src/concurrency/send-sync/send.md
msgid ""
"The effect of moving ownership to another thread is that _destructors_ will "
"run in that thread. So the question is when you can allocate a value in one "
"thread and deallocate it in another."
msgstr ""

#: src/concurrency/send-sync/send.md
msgid ""
"As an example, a connection to the SQLite library must only be accessed from "
"a single thread."
msgstr ""

#: src/concurrency/send-sync/sync.md
msgid ""
"A type `T` is [`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html) "
"if it is safe to access a `T` value from multiple threads at the same time."
msgstr ""

#: src/concurrency/send-sync/sync.md
msgid "More precisely, the definition is:"
msgstr ""

#: src/concurrency/send-sync/sync.md
msgid "`T` is `Sync` if and only if `&T` is `Send`"
msgstr ""

#: src/concurrency/send-sync/sync.md
msgid ""
"This statement is essentially a shorthand way of saying that if a type is "
"thread-safe for shared use, it is also thread-safe to pass references of it "
"across threads."
msgstr ""

#: src/concurrency/send-sync/sync.md
msgid ""
"This is because if a type is Sync it means that it can be shared across "
"multiple threads without the risk of data races or other synchronization "
"issues, so it is safe to move it to another thread. A reference to the type "
"is also safe to move to another thread, because the data it references can "
"be accessed from any thread safely."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`Send + Sync`"
msgstr "`Send + Sync`"

#: src/concurrency/send-sync/examples.md
msgid "Most types you come across are `Send + Sync`:"
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`i8`, `f32`, `bool`, `char`, `&str`, ..."
msgstr "`i8`, `f32`, `bool`, `char`, `&str`, ..."

#: src/concurrency/send-sync/examples.md
msgid "`(T1, T2)`, `[T; N]`, `&[T]`, `struct { x: T }`, ..."
msgstr "`(T1, T2)`, `[T; N]`, `&[T]`, `struct { x: T }`, ..."

#: src/concurrency/send-sync/examples.md
msgid "`String`, `Option<T>`, `Vec<T>`, `Box<T>`, ..."
msgstr "`String`, `Option<T>`, `Vec<T>`, `Box<T>`, ..."

#: src/concurrency/send-sync/examples.md
msgid "`Arc<T>`: Explicitly thread-safe via atomic reference count."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`Mutex<T>`: Explicitly thread-safe via internal locking."
msgstr ""

#: src/concurrency/send-sync/examples.md
#, fuzzy
msgid "`mpsc::Sender<T>`: As of 1.72.0."
msgstr "`mpsc::Sender<T>`"

#: src/concurrency/send-sync/examples.md
msgid "`AtomicBool`, `AtomicU8`, ...: Uses special atomic instructions."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid ""
"The generic types are typically `Send + Sync` when the type parameters are "
"`Send + Sync`."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`Send + !Sync`"
msgstr "`Send + !Sync`"

#: src/concurrency/send-sync/examples.md
msgid ""
"These types can be moved to other threads, but they're not thread-safe. "
"Typically because of interior mutability:"
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`mpsc::Receiver<T>`"
msgstr "`mpsc::Receiver<T>`"

#: src/concurrency/send-sync/examples.md
msgid "`Cell<T>`"
msgstr "`Cell<T>`"

#: src/concurrency/send-sync/examples.md
msgid "`RefCell<T>`"
msgstr "`RefCell<T>`"

#: src/concurrency/send-sync/examples.md
msgid "`!Send + Sync`"
msgstr "`!Send + Sync`"

#: src/concurrency/send-sync/examples.md
msgid ""
"These types are safe to access (via shared references) from multiple "
"threads, but they cannot be moved to another thread:"
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid ""
"`MutexGuard<T: Sync>`: Uses OS level primitives which must be deallocated on "
"the thread which created them. However, an already-locked mutex can have its "
"guarded variable read by any thread with which the guard is shared."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid "`!Send + !Sync`"
msgstr "`!Send + !Sync`"

#: src/concurrency/send-sync/examples.md
msgid "These types are not thread-safe and cannot be moved to other threads:"
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid ""
"`Rc<T>`: each `Rc<T>` has a reference to an `RcBox<T>`, which contains a non-"
"atomic reference count."
msgstr ""

#: src/concurrency/send-sync/examples.md
msgid ""
"`*const T`, `*mut T`: Rust assumes raw pointers may have special concurrency "
"considerations."
msgstr ""

#: src/concurrency/shared-state.md
msgid "Arc"
msgstr "Arc"

#: src/concurrency/shared-state.md
msgid "Mutex"
msgstr "Mutex"

#: src/concurrency/shared-state/arc.md
msgid ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html) allows "
"shared, read-only ownership via `Arc::clone`:"
msgstr ""

#: src/concurrency/shared-state/arc.md
msgid "/// A struct that prints which thread drops it.\n"
msgstr ""

#: src/concurrency/shared-state/arc.md
#, fuzzy
msgid "\"Dropped by {:?}\""
msgstr "\"Dropper {}\""

#: src/concurrency/shared-state/arc.md
msgid "// Sleep for 0-500ms.\n"
msgstr ""

#: src/concurrency/shared-state/arc.md
msgid "\"{thread_id:?}: {v:?}\""
msgstr ""

#: src/concurrency/shared-state/arc.md
msgid "// Now only the spawned threads will hold clones of `v`.\n"
msgstr ""

#: src/concurrency/shared-state/arc.md
msgid ""
"// When the last spawned thread finishes, it will drop `v`'s contents.\n"
msgstr ""

#: src/concurrency/shared-state/arc.md
msgid ""
"`Arc` stands for \"Atomic Reference Counted\", a thread safe version of `Rc` "
"that uses atomic operations."
msgstr ""

#: src/concurrency/shared-state/arc.md
msgid ""
"`Arc<T>` implements `Clone` whether or not `T` does. It implements `Send` "
"and `Sync` if and only if `T` implements them both."
msgstr ""

#: src/concurrency/shared-state/arc.md
msgid ""
"`Arc::clone()` has the cost of atomic operations that get executed, but "
"after that the use of the `T` is free."
msgstr ""

#: src/concurrency/shared-state/arc.md
msgid ""
"Beware of reference cycles, `Arc` does not use a garbage collector to detect "
"them."
msgstr ""

#: src/concurrency/shared-state/arc.md
msgid "`std::sync::Weak` can help."
msgstr "`std::sync::Weak` kan hj√¶lpe."

#: src/concurrency/shared-state/mutex.md
msgid ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html) ensures "
"mutual exclusion _and_ allows mutable access to `T` behind a read-only "
"interface (another form of [interior mutability](../../borrowing/interior-"
"mutability.md)):"
msgstr ""

#: src/concurrency/shared-state/mutex.md
msgid "\"v: {:?}\""
msgstr "\"v: {:?}\""

#: src/concurrency/shared-state/mutex.md
msgid ""
"Notice how we have a [`impl<T: Send> Sync for Mutex<T>`](https://doc.rust-"
"lang.org/std/sync/struct.Mutex.html#impl-Sync-for-Mutex%3CT%3E) blanket "
"implementation."
msgstr ""

#: src/concurrency/shared-state/mutex.md
msgid ""
"`Mutex` in Rust looks like a collection with just one element --- the "
"protected data."
msgstr ""

#: src/concurrency/shared-state/mutex.md
msgid ""
"It is not possible to forget to acquire the mutex before accessing the "
"protected data."
msgstr ""

#: src/concurrency/shared-state/mutex.md
msgid ""
"You can get an `&mut T` from an `&Mutex<T>` by taking the lock. The "
"`MutexGuard` ensures that the `&mut T` doesn't outlive the lock being held."
msgstr ""

#: src/concurrency/shared-state/mutex.md
msgid ""
"`Mutex<T>` implements both `Send` and `Sync` if and only if `T` implements "
"`Send`."
msgstr ""

#: src/concurrency/shared-state/mutex.md
msgid "A read-write lock counterpart: `RwLock`."
msgstr ""

#: src/concurrency/shared-state/mutex.md
msgid "Why does `lock()` return a `Result`?"
msgstr ""

#: src/concurrency/shared-state/mutex.md
msgid ""
"If the thread that held the `Mutex` panicked, the `Mutex` becomes "
"\"poisoned\" to signal that the data it protected might be in an "
"inconsistent state. Calling `lock()` on a poisoned mutex fails with a "
"[`PoisonError`](https://doc.rust-lang.org/std/sync/struct.PoisonError.html). "
"You can call `into_inner()` on the error to recover the data regardless."
msgstr ""

#: src/concurrency/shared-state/example.md
msgid "Let us see `Arc` and `Mutex` in action:"
msgstr ""

#: src/concurrency/shared-state/example.md
msgid "// use std::sync::{Arc, Mutex};\n"
msgstr "// use std::sync::{Arc, Mutex};\n"

#: src/concurrency/shared-state/example.md
msgid "\"v: {v:?}\""
msgstr ""

#: src/concurrency/shared-state/example.md
msgid "Possible solution:"
msgstr ""

#: src/concurrency/shared-state/example.md
msgid "Notable parts:"
msgstr ""

#: src/concurrency/shared-state/example.md
msgid ""
"`v` is wrapped in both `Arc` and `Mutex`, because their concerns are "
"orthogonal."
msgstr ""

#: src/concurrency/shared-state/example.md
msgid ""
"Wrapping a `Mutex` in an `Arc` is a common pattern to share mutable state "
"between threads."
msgstr ""

#: src/concurrency/shared-state/example.md
msgid ""
"`v: Arc<_>` needs to be cloned to make a new reference for each new spawned "
"thread. Note `move` was added to the lambda signature."
msgstr ""

#: src/concurrency/shared-state/example.md
msgid ""
"Blocks are introduced to narrow the scope of the `LockGuard` as much as "
"possible."
msgstr ""

#: src/concurrency/sync-exercises.md src/concurrency/async-exercises.md
msgid "This segment should take about 1 hour and 10 minutes. It contains:"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
msgid "The dining philosophers problem is a classic problem in concurrency:"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
msgid ""
"Five philosophers dine together at the same table. Each philosopher has "
"their own place at the table. There is a chopstick between each plate. The "
"dish served is spaghetti which requires two chopsticks to eat. Each "
"philosopher can only alternately think and eat. Moreover, a philosopher can "
"only eat their spaghetti when they have both a left and right chopstick. "
"Thus two chopsticks will only be available when their two nearest neighbors "
"are thinking, not eating. After an individual philosopher finishes eating, "
"they will put down both chopsticks."
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
msgid ""
"You will need a local [Cargo installation](../../cargo/running-locally.md) "
"for this exercise. Copy the code below to a file called `src/main.rs`, fill "
"out the blanks, and test that `cargo run` does not deadlock:"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/dining-philosophers.md
msgid ""
"// left_chopstick: ...\n"
"    // right_chopstick: ...\n"
"    // thoughts: ...\n"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/sync-exercises/solutions.md
#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
msgid "\"Eureka! {} has a new idea!\""
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
msgid "// Pick up chopsticks...\n"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/sync-exercises/solutions.md
#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
msgid "\"{} is eating...\""
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/sync-exercises/solutions.md
#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
msgid "\"Socrates\""
msgstr "\"Sokrates\""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/sync-exercises/solutions.md
#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
msgid "\"Hypatia\""
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"Plato\""
msgstr "\"Plato\""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"Aristotle\""
msgstr "\"Aristoteles\""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"Pythagoras\""
msgstr "\"Pythagoras\""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
msgid "// Create chopsticks\n"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
msgid "// Create philosophers\n"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
msgid "// Make each of them think and eat 100 times\n"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
msgid "// Output their thoughts\n"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
msgid "You can use the following `Cargo.toml`:"
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
#, fuzzy
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"```"

#: src/concurrency/sync-exercises/dining-philosophers.md
msgid ""
"Encourage students to focus first on implementing a solution that \"mostly\" "
"works."
msgstr ""

#: src/concurrency/sync-exercises/dining-philosophers.md
msgid ""
"The deadlock in the simplest solution is a general concurrency problem and "
"highlights that Rust does not automatically prevent this sort of bug."
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid ""
"Let us use our new knowledge to create a multi-threaded link checker. It "
"should start at a webpage and check that links on the page are valid. It "
"should recursively check other pages on the same domain and keep doing this "
"until all pages have been validated."
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid ""
"For this, you will need an HTTP client such as [`reqwest`](https://docs.rs/"
"reqwest/). You will also need a way to find links, we can use [`scraper`]"
"(https://docs.rs/scraper/). Finally, we'll need some way of handling errors, "
"we will use [`thiserror`](https://docs.rs/thiserror/)."
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid "Create a new Cargo project and `reqwest` it as a dependency with:"
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid ""
"If `cargo add` fails with `error: no such subcommand`, then please edit the "
"`Cargo.toml` file by hand. Add the dependencies listed below."
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid ""
"The `cargo add` calls will update the `Cargo.toml` file to look like this:"
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
#, fuzzy
msgid ""
"```toml\n"
"[package]\n"
"name = \"link-checker\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"reqwest = { version = \"0.11.12\", features = [\"blocking\", \"rustls-"
"tls\"] }\n"
"scraper = \"0.13.0\"\n"
"thiserror = \"1.0.37\"\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"link-checker\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"reqwest = { version = \"0.11.12\", features = [\"blocking\", \"rustls-"
"tls\"] }\n"
"scraper = \"0.13.0\"\n"
"thiserror = \"1.0.37\"\n"
"```"

#: src/concurrency/sync-exercises/link-checker.md
msgid ""
"You can now download the start page. Try with a small site such as `https://"
"www.google.org/`."
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid "Your `src/main.rs` file should look something like this:"
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"request error: {0}\""
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"bad http response: {0}\""
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"Checking {:#}\""
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"href\""
msgstr "\"href\""

#: src/concurrency/sync-exercises/link-checker.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"On {base_url:#}: ignored unparsable {href:?}: {err}\""
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
#: src/concurrency/sync-exercises/solutions.md
msgid "\"https://www.google.org\""
msgstr "\"https://www.google.org\""

#: src/concurrency/sync-exercises/link-checker.md
msgid "\"Links: {links:#?}\""
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid "\"Could not extract links: {err:#}\""
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid "Run the code in `src/main.rs` with"
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid ""
"Use threads to check the links in parallel: send the URLs to be checked to a "
"channel and let a few threads check the URLs in parallel."
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid ""
"Extend this to recursively extract links from all pages on the "
"`www.google.org` domain. Put an upper limit of 100 pages or so so that you "
"don't end up being blocked by the site."
msgstr ""

#: src/concurrency/sync-exercises/link-checker.md
msgid ""
"This is a complex exercise and intended to give students an opportunity to "
"work on a larger project than others. A success condition for this exercise "
"is to get stuck on some \"real\" issue and work through it with the support "
"of other students or the instructor."
msgstr ""

#: src/concurrency/sync-exercises/solutions.md
msgid "\"{} is trying to eat\""
msgstr ""

#: src/concurrency/sync-exercises/solutions.md
msgid ""
"// To avoid a deadlock, we have to break the symmetry\n"
"        // somewhere. This will swap the chopsticks without deinitializing\n"
"        // either of them.\n"
msgstr ""

#: src/concurrency/sync-exercises/solutions.md
msgid "\"{thought}\""
msgstr ""

#: src/concurrency/sync-exercises/solutions.md
msgid "Link Checker"
msgstr "Linktjekker"

#: src/concurrency/sync-exercises/solutions.md
msgid ""
"/// Determine whether links within the given page should be extracted.\n"
msgstr ""

#: src/concurrency/sync-exercises/solutions.md
msgid ""
"/// Mark the given page as visited, returning false if it had already\n"
"    /// been visited.\n"
msgstr ""

#: src/concurrency/sync-exercises/solutions.md
msgid "// To multiplex the non-cloneable Receiver, wrap it in Arc<Mutex<_>>.\n"
msgstr ""

#: src/concurrency/sync-exercises/solutions.md
msgid "// The sender got dropped. No more commands coming in.\n"
msgstr ""

#: src/concurrency/sync-exercises/solutions.md
msgid "\"Got crawling error: {:#}\""
msgstr ""

#: src/concurrency/sync-exercises/solutions.md
msgid "\"Bad URLs: {:#?}\""
msgstr ""

#: src/concurrency/welcome-async.md
msgid ""
"\"Async\" is a concurrency model where multiple tasks are executed "
"concurrently by executing each task until it would block, then switching to "
"another task that is ready to make progress. The model allows running a "
"larger number of tasks on a limited number of threads. This is because the "
"per-task overhead is typically very low and operating systems provide "
"primitives for efficiently identifying I/O that is able to proceed."
msgstr ""

#: src/concurrency/welcome-async.md
msgid ""
"Rust's asynchronous operation is based on \"futures\", which represent work "
"that may be completed in the future. Futures are \"polled\" until they "
"signal that they are complete."
msgstr ""

#: src/concurrency/welcome-async.md
msgid ""
"Futures are polled by an async runtime, and several different runtimes are "
"available."
msgstr ""

#: src/concurrency/welcome-async.md
msgid ""
"Python has a similar model in its `asyncio`. However, its `Future` type is "
"callback-based, and not polled. Async Python programs require a \"loop\", "
"similar to a runtime in Rust."
msgstr ""

#: src/concurrency/welcome-async.md
msgid ""
"JavaScript's `Promise` is similar, but again callback-based. The language "
"runtime implements the event loop, so many of the details of Promise "
"resolution are hidden."
msgstr ""

#: src/concurrency/welcome-async.md
msgid ""
"Including 10 minute breaks, this session should take about 3 hours and 30 "
"minutes. It contains:"
msgstr ""

#: src/concurrency/async.md
msgid "async/await"
msgstr "async/await"

#: src/concurrency/async/async-await.md
msgid ""
"At a high level, async Rust code looks very much like \"normal\" sequential "
"code:"
msgstr ""

#: src/concurrency/async/async-await.md
msgid "\"Count is: {i}!\""
msgstr ""

#: src/concurrency/async/async-await.md
msgid ""
"Note that this is a simplified example to show the syntax. There is no long "
"running operation or any real concurrency in it!"
msgstr ""

#: src/concurrency/async/async-await.md
msgid ""
"The \"async\" keyword is syntactic sugar. The compiler replaces the return "
"type with a future."
msgstr ""

#: src/concurrency/async/async-await.md
msgid ""
"You cannot make `main` async, without additional instructions to the "
"compiler on how to use the returned future."
msgstr ""

#: src/concurrency/async/async-await.md
msgid ""
"You need an executor to run async code. `block_on` blocks the current thread "
"until the provided future has run to completion."
msgstr ""

#: src/concurrency/async/async-await.md
msgid ""
"`.await` asynchronously waits for the completion of another operation. "
"Unlike `block_on`, `.await` doesn't block the current thread."
msgstr ""

#: src/concurrency/async/async-await.md
msgid ""
"`.await` can only be used inside an `async` function (or block; these are "
"introduced later)."
msgstr ""

#: src/concurrency/async/futures.md
msgid ""
"[`Future`](https://doc.rust-lang.org/std/future/trait.Future.html) is a "
"trait, implemented by objects that represent an operation that may not be "
"complete yet. A future can be polled, and `poll` returns a [`Poll`](https://"
"doc.rust-lang.org/std/task/enum.Poll.html)."
msgstr ""

#: src/concurrency/async/futures.md
msgid ""
"An async function returns an `impl Future`. It's also possible (but "
"uncommon) to implement `Future` for your own types. For example, the "
"`JoinHandle` returned from `tokio::spawn` implements `Future` to allow "
"joining to it."
msgstr ""

#: src/concurrency/async/futures.md
msgid ""
"The `.await` keyword, applied to a Future, causes the current async function "
"to pause until that Future is ready, and then evaluates to its output."
msgstr ""

#: src/concurrency/async/futures.md
msgid ""
"The `Future` and `Poll` types are implemented exactly as shown; click the "
"links to show the implementations in the docs."
msgstr ""

#: src/concurrency/async/futures.md
msgid ""
"`Context` allows a Future to schedule itself to be polled again when an "
"event such as a timeout occurs."
msgstr ""

#: src/concurrency/async/futures.md
msgid ""
"`Pin` ensures that the Future isn't moved in memory, so that pointers into "
"that future remain valid. This is required to allow references to remain "
"valid after an `.await`. We will address `Pin` in the \"Pitfalls\" segment."
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"Rust transforms an async function or block to a hidden type that implements "
"`Future`, using a state machine to track the function's progress. The "
"details of this transform are complex, but it helps to have a schematic "
"understanding of what is happening. The following function"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid "/// Sum two D10 rolls plus a modifier.\n"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid "is transformed to something like"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid "// Function has not begun yet.\n"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid "// Waiting for first `.await` to complete.\n"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid "// Waiting for second `.await` to complete.\n"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid "// Create future for first dice roll.\n"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid "// Poll sub-future for first dice roll.\n"
msgstr ""

#: src/concurrency/async/state-machine.md
#, fuzzy
msgid "// Create future for second roll.\n"
msgstr "/// Clear to send.\n"

#: src/concurrency/async/state-machine.md
msgid "// Poll sub-future for second dice roll.\n"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"This example is illustrative, and isn't an accurate representation of the "
"Rust compiler's transformation. The important things to notice here are:"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"Calling an async function does nothing but construct and return a future."
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"All local variables are stored in the function's future, using an enum to "
"identify where execution is currently suspended."
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"An `.await` in the async function is translated into an a new state "
"containing all live variables and the awaited future. The `loop` then "
"handles that updated state, polling the future until it returns "
"`Poll::Ready`."
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"Execution continues eagerly until a `Poll::Pending` occurs. In this simple "
"example, every future is ready immediately."
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"`main` contains a na√Øve executor, which just busy-loops until the future is "
"ready. We will discuss real executors shortly."
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"Imagine the `Future` data structure for a deeply nested stack of async "
"functions. Each function's `Future` contains the `Future` structures for the "
"functions it calls. This can result in unexpectedly large compiler-generated "
"`Future` types."
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"This also means that recursive async functions are challenging. Compare to "
"the common error of building recursive type, such as"
msgstr ""

#: src/concurrency/async/state-machine.md
msgid ""
"The fix for a recursive type is to add a layer of indrection, such as with "
"`Box`. Similarly, a recursive async function must box the recursive future:"
msgstr ""

#: src/concurrency/async/state-machine.md
#: src/unsafe-deep-dive/foundations/less-powerful.md
#, fuzzy
msgid "\"{n}\""
msgstr "\"{} {}\""

#: src/concurrency/async/runtimes.md
msgid ""
"A _runtime_ provides support for performing operations asynchronously (a "
"_reactor_) and is responsible for executing futures (an _executor_). Rust "
"does not have a \"built-in\" runtime, but several options are available:"
msgstr ""

#: src/concurrency/async/runtimes.md
msgid ""
"[Tokio](https://tokio.rs/): performant, with a well-developed ecosystem of "
"functionality like [Hyper](https://hyper.rs/) for HTTP or [Tonic](https://"
"github.com/hyperium/tonic) for gRPC."
msgstr ""

#: src/concurrency/async/runtimes.md
msgid "[smol](https://docs.rs/smol/latest/smol/): simple and lightweight"
msgstr ""

#: src/concurrency/async/runtimes.md
msgid ""
"Several larger applications have their own runtimes. For example, [Fuchsia]"
"(https://fuchsia.googlesource.com/fuchsia/+/refs/heads/main/src/lib/fuchsia-"
"async/src/lib.rs) already has one."
msgstr ""

#: src/concurrency/async/runtimes.md
msgid ""
"Note that of the listed runtimes, only Tokio is supported in the Rust "
"playground. The playground also does not permit any I/O, so most interesting "
"async things can't run in the playground."
msgstr ""

#: src/concurrency/async/runtimes.md
msgid ""
"Futures are \"inert\" in that they do not do anything (not even start an I/O "
"operation) unless there is an executor polling them. This differs from JS "
"Promises, for example, which will run to completion even if they are never "
"used."
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "Tokio provides:"
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "A multi-threaded runtime for executing asynchronous code."
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "An asynchronous version of the standard library."
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "A large ecosystem of libraries."
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "\"Count in task: {i}!\""
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "\"Main task: {i}\""
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "With the `tokio::main` macro we can now make `main` async."
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "The `spawn` function creates a new, concurrent \"task\"."
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "Note: `spawn` takes a `Future`, you don't call `.await` on `count_to`."
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "**Further exploration:**"
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid ""
"Why does `count_to` not (usually) get to 10? This is an example of async "
"cancellation. `tokio::spawn` returns a handle which can be awaited to wait "
"until it finishes."
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "Try `count_to(10).await` instead of spawning."
msgstr ""

#: src/concurrency/async/runtimes/tokio.md
msgid "Try awaiting the task returned from `tokio::spawn`."
msgstr ""

#: src/concurrency/async/tasks.md
msgid "Rust has a task system, which is a form of lightweight threading."
msgstr ""

#: src/concurrency/async/tasks.md
msgid ""
"A task has a single top-level future which the executor polls to make "
"progress. That future may have one or more nested futures that its `poll` "
"method polls, corresponding loosely to a call stack. Concurrency within a "
"task is possible by polling multiple child futures, such as racing a timer "
"and an I/O operation."
msgstr ""

#: src/concurrency/async/tasks.md
#, fuzzy
msgid "\"127.0.0.1:0\""
msgstr "\"127.0.0.1:2000\""

#: src/concurrency/async/tasks.md
msgid "\"listening on port {}\""
msgstr ""

#: src/concurrency/async/tasks.md
msgid "\"connection from {addr:?}\""
msgstr ""

#: src/concurrency/async/tasks.md
msgid "b\"Who are you?\\n\""
msgstr ""

#: src/concurrency/async/tasks.md
#, fuzzy
msgid "\"socket error\""
msgstr "\"IO-fejl: {e}\""

#: src/concurrency/async/tasks.md
msgid "\"Thanks for dialing in, {name}!\\n\""
msgstr ""

#: src/concurrency/async/tasks.md src/concurrency/async-control-flow/join.md
msgid ""
"Copy this example into your prepared `src/main.rs` and run it from there."
msgstr ""

#: src/concurrency/async/tasks.md
msgid ""
"Try connecting to it with a TCP connection tool like [nc](https://"
"www.unix.com/man-page/linux/1/nc/) or [telnet](https://www.unix.com/man-page/"
"linux/1/telnet/)."
msgstr ""

#: src/concurrency/async/tasks.md
msgid ""
"Ask students to visualize what the state of the example server would be with "
"a few connected clients. What tasks exist? What are their Futures?"
msgstr ""

#: src/concurrency/async/tasks.md
msgid ""
"This is the first time we've seen an `async` block. This is similar to a "
"closure, but does not take any arguments. Its return value is a Future, "
"similar to an `async fn`."
msgstr ""

#: src/concurrency/async/tasks.md
msgid ""
"Refactor the async block into a function, and improve the error handling "
"using `?`."
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid ""
"Several crates have support for asynchronous channels. For instance `tokio`:"
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid "\"Received {count} pings so far.\""
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid "\"ping_handler complete\""
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid "\"Failed to send ping.\""
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid "\"Sent {} pings so far.\""
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid "\"Something went wrong in ping handler task.\""
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid "Change the channel size to `3` and see how it affects the execution."
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid ""
"Overall, the interface is similar to the `sync` channels as seen in the "
"[morning class](../channels.md)."
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid "Try removing the `std::mem::drop` call. What happens? Why?"
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid ""
"The [Flume](https://docs.rs/flume/latest/flume/) crate has channels that "
"implement both `sync` and `async` `send` and `recv`. This can be convenient "
"for complex applications with both IO and heavy CPU processing tasks."
msgstr ""

#: src/concurrency/async-control-flow/channels.md
msgid ""
"What makes working with `async` channels preferable is the ability to "
"combine them with other `future`s to combine them and create complex control "
"flow."
msgstr ""

#: src/concurrency/async-control-flow/join.md
msgid ""
"A join operation waits until all of a set of futures are ready, and returns "
"a collection of their results. This is similar to `Promise.all` in "
"JavaScript or `asyncio.gather` in Python."
msgstr ""

#: src/concurrency/async-control-flow/join.md
msgid "\"https://google.com\""
msgstr "\"https://google.com\""

#: src/concurrency/async-control-flow/join.md
msgid "\"https://httpbin.org/ip\""
msgstr "\"https://httpbin.org/ip\""

#: src/concurrency/async-control-flow/join.md
msgid "\"https://play.rust-lang.org/\""
msgstr "\"https://play.rust-lang.org/\""

#: src/concurrency/async-control-flow/join.md
msgid "\"BAD_URL\""
msgstr "\"BAD_URL\""

#: src/concurrency/async-control-flow/join.md
#, fuzzy
msgid "\"{page_sizes_dict:?}\""
msgstr "\"{page_counts:#?}\""

#: src/concurrency/async-control-flow/join.md
msgid ""
"For multiple futures of disjoint types, you can use `std::future::join!` but "
"you must know how many futures you will have at compile time. This is "
"currently in the `futures` crate, soon to be stabilised in `std::future`."
msgstr ""

#: src/concurrency/async-control-flow/join.md
msgid ""
"The risk of `join` is that one of the futures may never resolve, this would "
"cause your program to stall."
msgstr ""

#: src/concurrency/async-control-flow/join.md
msgid ""
"You can also combine `join_all` with `join!` for instance to join all "
"requests to an http service as well as a database query. Try adding a "
"`tokio::time::sleep` to the future, using `futures::join!`. This is not a "
"timeout (that requires `select!`, explained in the next chapter), but "
"demonstrates `join!`."
msgstr ""

#: src/concurrency/async-control-flow/select.md
msgid ""
"A select operation waits until any of a set of futures is ready, and "
"responds to that future's result. In JavaScript, this is similar to "
"`Promise.race`. In Python, it compares to `asyncio.wait(task_set, "
"return_when=asyncio.FIRST_COMPLETED)`."
msgstr ""

#: src/concurrency/async-control-flow/select.md
msgid ""
"Similar to a match statement, the body of `select!` has a number of arms, "
"each of the form `pattern = future => statement`. When a `future` is ready, "
"its return value is destructured by the `pattern`. The `statement` is then "
"run with the resulting variables. The `statement` result becomes the result "
"of the `select!` macro."
msgstr ""

#: src/concurrency/async-control-flow/select.md
#, fuzzy
msgid "\"got: {msg}\""
msgstr "\"Hovedtr√•den: modtog {msg}\""

#: src/concurrency/async-control-flow/select.md
msgid "\"timeout\""
msgstr ""

#: src/concurrency/async-control-flow/select.md
#, fuzzy
msgid "\"Failed to send greeting\""
msgstr "\"Kunne ikke sende katten.\""

#: src/concurrency/async-control-flow/select.md
msgid "\"Listener failed\""
msgstr ""

#: src/concurrency/async-control-flow/select.md
msgid ""
"The `listener` async block here is a common form: wait for some async event, "
"or for a timeout. Change the `sleep` to sleep longer to see it fail. Why "
"does the `send` also fail in this situation?"
msgstr ""

#: src/concurrency/async-control-flow/select.md
msgid ""
"`select!` is also often used in a loop in \"actor\" architectures, where a "
"task reacts to events in a loop. That has some pitfalls, which will be "
"discussed in the next segment."
msgstr ""

#: src/concurrency/async-pitfalls.md
msgid ""
"Async / await provides convenient and efficient abstraction for concurrent "
"asynchronous programming. However, the async/await model in Rust also comes "
"with its share of pitfalls and footguns. We illustrate some of them in this "
"chapter."
msgstr ""

#: src/concurrency/async-pitfalls.md
msgid "Pin"
msgstr "Pin"

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid "Blocking the executor"
msgstr ""

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid ""
"Most async runtimes only allow IO tasks to run concurrently. This means that "
"CPU blocking tasks will block the executor and prevent other tasks from "
"being executed. An easy workaround is to use async equivalent methods where "
"possible."
msgstr ""

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid "\"future {id} slept for {duration_ms}ms, finished after {}ms\""
msgstr ""

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid "\"current_thread\""
msgstr ""

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid ""
"Run the code and see that the sleeps happen consecutively rather than "
"concurrently."
msgstr ""

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid ""
"The `\"current_thread\"` flavor puts all tasks on a single thread. This "
"makes the effect more obvious, but the bug is still present in the multi-"
"threaded flavor."
msgstr ""

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid ""
"Switch the `std::thread::sleep` to `tokio::time::sleep` and await its result."
msgstr ""

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid ""
"Another fix would be to `tokio::task::spawn_blocking` which spawns an actual "
"thread and transforms its handle into a future without blocking the executor."
msgstr ""

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid ""
"You should not think of tasks as OS threads. They do not map 1 to 1 and most "
"executors will allow many tasks to run on a single OS thread. This is "
"particularly problematic when interacting with other libraries via FFI, "
"where that library might depend on thread-local storage or map to specific "
"OS threads (e.g., CUDA). Prefer `tokio::task::spawn_blocking` in such "
"situations."
msgstr ""

#: src/concurrency/async-pitfalls/blocking-executor.md
msgid ""
"Use sync mutexes with care. Holding a mutex over an `.await` may cause "
"another task to block, and that task may be running on the same thread."
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"Recall an async function or block creates a type implementing `Future` and "
"containing all of the local variables. Some of those variables can hold "
"references (pointers) to other local variables. To ensure those remain "
"valid, the future can never be moved to a different memory location."
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"To prevent moving the future type in memory, it can only be polled through a "
"pinned pointer. `Pin` is a wrapper around a reference that disallows all "
"operations that would move the instance it points to into a different memory "
"location."
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"// A work item. In this case, just sleep for the given time and respond\n"
"// with a message on the `respond_on` channel.\n"
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid "// A worker which listens for work on a queue and performs it.\n"
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid "// Pretend to work.\n"
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid "\"failed to send response\""
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid "// TODO: report number of iterations every 100ms\n"
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid "// A requester which requests work and waits for it to complete.\n"
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid "\"failed to send on work queue\""
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid "\"failed waiting for response\""
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid "\"work result for iteration {i}: {resp}\""
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"You may recognize this as an example of the actor pattern. Actors typically "
"call `select!` in a loop."
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"This serves as a summation of a few of the previous lessons, so take your "
"time with it."
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"Naively add a `_ = sleep(Duration::from_millis(100)) => { println!(..) }` to "
"the `select!`. This will never execute. Why?"
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"Instead, add a `timeout_fut` containing that future outside of the `loop`:"
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"This still doesn't work. Follow the compiler errors, adding `&mut` to the "
"`timeout_fut` in the `select!` to work around the move, then using "
"`Box::pin`:"
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"This compiles, but once the timeout expires it is `Poll::Ready` on every "
"iteration (a fused future would help with this). Update to reset "
"`timeout_fut` every time it expires:"
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"Box allocates on the heap. In some cases, `std::pin::pin!` (only recently "
"stabilized, with older code often using `tokio::pin!`) is also an option, "
"but that is difficult to use for a future that is reassigned."
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"Another alternative is to not use `pin` at all but spawn another task that "
"will send to a `oneshot` channel every 100ms."
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"Data that contains pointers to itself is called self-referential. Normally, "
"the Rust borrow checker would prevent self-referential data from being "
"moved, as the references cannot outlive the data they point to. However, the "
"code transformation for async blocks and functions is not verified by the "
"borrow checker."
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"`Pin` is a wrapper around a reference. An object cannot be moved from its "
"place using a pinned pointer. However, it can still be moved through an "
"unpinned pointer."
msgstr ""

#: src/concurrency/async-pitfalls/pin.md
msgid ""
"The `poll` method of the `Future` trait uses `Pin<&mut Self>` instead of "
"`&mut Self` to refer to the instance. That's why it can only be called on a "
"pinned pointer."
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"Async methods in traits were stabilized in the 1.75 release. This required "
"support for using return-position `impl Trait` in traits, as the desugaring "
"for `async fn` includes `-> impl Future<Output = ...>`."
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"However, even with the native support, there are some pitfalls around `async "
"fn`:"
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"Return-position `impl Trait` captures all in-scope lifetimes (so some "
"patterns of borrowing cannot be expressed)."
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"Async traits cannot be used with [trait objects](../../smart-pointers/trait-"
"objects.md) (`dyn Trait` support)."
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"The [async_trait](https://docs.rs/async-trait/) crate provides a workaround "
"for `dyn` support through a macro, with some caveats:"
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid "\"Running all sleepers...\""
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
#, fuzzy
msgid "\"Slept for {} ms\""
msgstr "\"expr: {:?}\""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"`async_trait` is easy to use, but note that it's using heap allocations to "
"achieve this. This heap allocation has performance overhead."
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"The challenges in language support for `async trait` are too deep to "
"describe in-depth in this class. See [this blog post](https://"
"smallcultfollowing.com/babysteps/blog/2019/10/26/async-fn-in-traits-are-"
"hard/) by Niko Matsakis if you are interested in digging deeper. See also "
"these keywords:"
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"[RPIT](https://doc.rust-lang.org/reference/types/impl-trait.html#abstract-"
"return-types): short for [return-position `impl Trait`](../../generics/impl-"
"trait.md)."
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"[RPITIT](https://blog.rust-lang.org/2023/12/21/async-fn-rpit-in-"
"traits.html): short for return-position `impl Trait` in trait (RPIT in "
"trait)."
msgstr ""

#: src/concurrency/async-pitfalls/async-traits.md
msgid ""
"Try creating a new sleeper struct that will sleep for a random amount of "
"time and adding it to the `Vec`."
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid ""
"Dropping a future implies it can never be polled again. This is called "
"_cancellation_ and it can occur at any `await` point. Care is needed to "
"ensure the system works correctly even when futures are cancelled. For "
"example, it shouldn't deadlock or lose data."
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid "\"not UTF-8\""
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid "\"hi\\nthere\\n\""
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid "\"tick!\""
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid ""
"The compiler doesn't help with cancellation-safety. You need to read API "
"documentation and consider what state your `async fn` holds."
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid ""
"Unlike `panic` and `?`, cancellation is part of normal control flow (vs "
"error-handling)."
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid "The example loses parts of the string."
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid ""
"Whenever the `tick()` branch finishes first, `next()` and its `buf` are "
"dropped."
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid ""
"`LinesReader` can be made cancellation-safe by making `buf` part of the "
"struct:"
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid "// prefix buf and bytes with self.\n"
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid ""
"[`Interval::tick`](https://docs.rs/tokio/latest/tokio/time/"
"struct.Interval.html#method.tick) is cancellation-safe because it keeps "
"track of whether a tick has been 'delivered'."
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid ""
"[`AsyncReadExt::read`](https://docs.rs/tokio/latest/tokio/io/"
"trait.AsyncReadExt.html#method.read) is cancellation-safe because it either "
"returns or doesn't read data."
msgstr ""

#: src/concurrency/async-pitfalls/cancellation.md
msgid ""
"[`AsyncBufReadExt::read_line`](https://docs.rs/tokio/latest/tokio/io/"
"trait.AsyncBufReadExt.html#method.read_line) is similar to the example and "
"_isn't_ cancellation-safe. See its documentation for details and "
"alternatives."
msgstr ""

#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
#, fuzzy
msgid "Dining Philosophers --- Async"
msgstr "Filosoffer omkring spisebordet"

#: src/concurrency/async-exercises/dining-philosophers.md
msgid ""
"See [dining philosophers](../sync-exercises/dining-philosophers.md) for a "
"description of the problem."
msgstr ""

#: src/concurrency/async-exercises/dining-philosophers.md
msgid ""
"As before, you will need a local [Cargo installation](../../cargo/running-"
"locally.md) for this exercise. Copy the code below to a file called `src/"
"main.rs`, fill out the blanks, and test that `cargo run` does not deadlock:"
msgstr ""

#: src/concurrency/async-exercises/dining-philosophers.md
msgid "// Keep trying until we have both chopsticks\n"
msgstr ""

#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
msgid "// tokio scheduler doesn't deadlock with 5 philosophers, so have 2.\n"
msgstr ""

#: src/concurrency/async-exercises/dining-philosophers.md
#: src/concurrency/async-exercises/solutions.md
msgid "// Make them think and eat\n"
msgstr ""

#: src/concurrency/async-exercises/dining-philosophers.md
msgid ""
"Since this time you are using Async Rust, you'll need a `tokio` dependency. "
"You can use the following `Cargo.toml`:"
msgstr ""

#: src/concurrency/async-exercises/dining-philosophers.md
#, fuzzy
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers-async-dine\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"tokio = { version = \"1.26.0\", features = [\"sync\", \"time\", \"macros\", "
"\"rt-multi-thread\"] }\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"link-checker\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"reqwest = { version = \"0.11.12\", features = [\"blocking\", \"rustls-"
"tls\"] }\n"
"scraper = \"0.13.0\"\n"
"thiserror = \"1.0.37\"\n"
"```"

#: src/concurrency/async-exercises/dining-philosophers.md
msgid ""
"Also note that this time you have to use the `Mutex` and the `mpsc` module "
"from the `tokio` crate."
msgstr ""

#: src/concurrency/async-exercises/dining-philosophers.md
msgid "Can you make your implementation single-threaded?"
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"In this exercise, we want to use our new knowledge to implement a broadcast "
"chat application. We have a chat server that the clients connect to and "
"publish their messages. The client reads user messages from the standard "
"input, and sends them to the server. The chat server broadcasts each message "
"that it receives to all the clients."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"For this, we use [a broadcast channel](https://docs.rs/tokio/latest/tokio/"
"sync/broadcast/fn.channel.html) on the server, and [`tokio_websockets`]"
"(https://docs.rs/tokio-websockets/) for the communication between the client "
"and the server."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid "Create a new Cargo project and add the following dependencies:"
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid "_Cargo.toml_:"
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
#, fuzzy
msgid ""
"```toml\n"
"[package]\n"
"name = \"chat-async\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"futures-util = { version = \"0.3.31\", features = [\"sink\"] }\n"
"http = \"1.3.1\"\n"
"tokio = { version = \"1.47.1\", features = [\"full\"] }\n"
"tokio-websockets = { version = \"0.12.1\", features = [\"client\", "
"\"fastrand\", \"server\", \"sha1_smol\"] }\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"link-checker\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"reqwest = { version = \"0.11.12\", features = [\"blocking\", \"rustls-"
"tls\"] }\n"
"scraper = \"0.13.0\"\n"
"thiserror = \"1.0.37\"\n"
"```"

#: src/concurrency/async-exercises/chat-app.md
msgid "The required APIs"
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"You are going to need the following functions from `tokio` and "
"[`tokio_websockets`](https://docs.rs/tokio-websockets/). Spend a few minutes "
"to familiarize yourself with the API."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"[StreamExt::next()](https://docs.rs/futures-util/0.3.28/futures_util/stream/"
"trait.StreamExt.html#method.next) implemented by `WebSocketStream`: for "
"asynchronously reading messages from a Websocket Stream."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"[SinkExt::send()](https://docs.rs/futures-util/0.3.28/futures_util/sink/"
"trait.SinkExt.html#method.send) implemented by `WebSocketStream`: for "
"asynchronously sending messages on a Websocket Stream."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"[Lines::next_line()](https://docs.rs/tokio/latest/tokio/io/"
"struct.Lines.html#method.next_line): for asynchronously reading user "
"messages from the standard input."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"[Sender::subscribe()](https://docs.rs/tokio/latest/tokio/sync/broadcast/"
"struct.Sender.html#method.subscribe): for subscribing to a broadcast channel."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid "Two binaries"
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"Normally in a Cargo project, you can have only one binary, and one `src/"
"main.rs` file. In this project, we need two binaries. One for the client, "
"and one for the server. You could potentially make them two separate Cargo "
"projects, but we are going to put them in a single Cargo project with two "
"binaries. For this to work, the client and the server code should go under "
"`src/bin` (see the [documentation](https://doc.rust-lang.org/cargo/reference/"
"cargo-targets.html#binaries))."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"Copy the following server and client code into `src/bin/server.rs` and `src/"
"bin/client.rs`, respectively. Your task is to complete these files as "
"described below."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
#: src/concurrency/async-exercises/solutions.md
msgid "_src/bin/server.rs_:"
msgstr "_src/bin/server.rs_:"

#: src/concurrency/async-exercises/chat-app.md
msgid "// TODO: For a hint, see the description of the task below.\n"
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
#: src/concurrency/async-exercises/solutions.md
msgid "\"127.0.0.1:2000\""
msgstr "\"127.0.0.1:2000\""

#: src/concurrency/async-exercises/chat-app.md
#: src/concurrency/async-exercises/solutions.md
msgid "\"listening on port 2000\""
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
#: src/concurrency/async-exercises/solutions.md
msgid "\"New connection from {addr:?}\""
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
#: src/concurrency/async-exercises/solutions.md
msgid "// Wrap the raw TCP stream into a websocket.\n"
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
#: src/concurrency/async-exercises/solutions.md
msgid "_src/bin/client.rs_:"
msgstr "_src/bin/client.rs_:"

#: src/concurrency/async-exercises/chat-app.md
#: src/concurrency/async-exercises/solutions.md
msgid "\"ws://127.0.0.1:2000\""
msgstr "\"ws://127.0.0.1:2000\""

#: src/concurrency/async-exercises/chat-app.md
msgid "Running the binaries"
msgstr "Afvikling af bin√¶re filer"

#: src/concurrency/async-exercises/chat-app.md
msgid "Run the server with:"
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid "and the client with:"
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid "Implement the `handle_connection` function in `src/bin/server.rs`."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"Hint: Use `tokio::select!` for concurrently performing two tasks in a "
"continuous loop. One task receives messages from the client and broadcasts "
"them. The other sends messages received by the server to the client."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid "Complete the main function in `src/bin/client.rs`."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"Hint: As before, use `tokio::select!` in a continuous loop for concurrently "
"performing two tasks: (1) reading user messages from standard input and "
"sending them to the server, and (2) receiving messages from the server, and "
"displaying them for the user."
msgstr ""

#: src/concurrency/async-exercises/chat-app.md
msgid ""
"Optional: Once you are done, change the code to broadcast messages to all "
"clients, but the sender of the message."
msgstr ""

#: src/concurrency/async-exercises/solutions.md
msgid ""
"// Keep trying until we have both chopsticks\n"
"        // Pick up chopsticks...\n"
msgstr ""

#: src/concurrency/async-exercises/solutions.md
msgid "// The locks are dropped here\n"
msgstr ""

#: src/concurrency/async-exercises/solutions.md
msgid "// tx is dropped here, so we don't need to explicitly drop it later\n"
msgstr ""

#: src/concurrency/async-exercises/solutions.md
msgid "\"Here is a thought: {thought}\""
msgstr ""

#: src/concurrency/async-exercises/solutions.md
msgid "\"Welcome to chat! Type a message\""
msgstr ""

#: src/concurrency/async-exercises/solutions.md
msgid ""
"// A continuous loop for concurrently performing two tasks: (1) receiving\n"
"    // messages from `ws_stream` and broadcasting them, and (2) receiving\n"
"    // messages on `bcast_rx` and sending them to the client.\n"
msgstr ""

#: src/concurrency/async-exercises/solutions.md
msgid "\"From client {addr:?} {text:?}\""
msgstr ""

#: src/concurrency/async-exercises/solutions.md
msgid "// Continuous loop for concurrently sending and receiving messages.\n"
msgstr ""

#: src/concurrency/async-exercises/solutions.md
msgid "\"From server: {}\""
msgstr ""

#: src/idiomatic/welcome.md
#, fuzzy
msgid "Welcome to Idiomatic Rust"
msgstr "Velkommen til Rust p√• det r√• jern"

#: src/idiomatic/welcome.md
msgid ""
"[Rust Fundamentals](../welcome-day-1.md) introduced Rust syntax and core "
"concepts. We now want to go one step further: how do you use Rust "
"_effectively_ in your projects? What does _idiomatic_ Rust look like?"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"This course is opinionated: we will nudge you towards some patterns, and "
"away from others. Nonetheless, we do recognize that some projects may have "
"different needs. We always provide the necessary information to help you "
"make informed decisions within the context and constraints of your own "
"projects."
msgstr ""

#: src/idiomatic/welcome.md
msgid "‚ö†Ô∏è This course is under **active development**."
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"The material may change frequently and there might be errors that have not "
"yet been spotted. Nonetheless, we encourage you to browse through and "
"provide early feedback!"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Including 10 minute breaks, this session should take about 25 minutes. It "
"contains:"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"The course will cover the topics listed below. Each topic may be covered in "
"one or more slides, depending on its complexity and relevance."
msgstr ""

#: src/idiomatic/welcome.md
msgid "Foundations of API design"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Golden rule: prioritize clarity and readability at the callsite. People will "
"spend much more time reading the call sites than declarations of the "
"functions being called."
msgstr ""

#: src/idiomatic/welcome.md
msgid "Make your API predictable"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Follow naming conventions (case conventions, prefer vocabulary precedented "
"in the standard library - e.g., methods should be called \"push\" not "
"\"push_back\", \"is_empty\" not \"empty\" etc.)"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Know the vocabulary types and traits in the standard library, and use them "
"in your APIs. If something feels like a basic type/algorithm, check in the "
"standard library first."
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Use well-established API design patterns that we will discuss later in this "
"class (e.g., newtype, owned/view type pairs, error handling)"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Write meaningful and effective doc comments (e.g., don't merely repeat the "
"method name with spaces instead of underscores, don't repeat the same "
"information just to fill out every markdown tag, provide usage examples)"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Leveraging the type system"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Short recap on enums, structs and type aliases"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Newtype pattern and encapsulation: parse, don't validate"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Extension traits: avoid the newtype pattern when you want to provide "
"additional behaviour"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"RAII, scope guards and drop bombs: using `Drop` to clean up resources, "
"trigger actions or enforce invariants"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"\"Token\" types: force users to prove they've performed a specific action"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"The typestate pattern: enforce correct state transitions at compile-time"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Using the borrow checker to enforce invariants that have nothing to do with "
"memory ownership"
msgstr ""

#: src/idiomatic/welcome.md
msgid "OwnedFd/BorrowedFd in the standard library"
msgstr ""

#: src/idiomatic/welcome.md
msgid "[Branded types](https://plv.mpi-sws.org/rustbelt/ghostcell/paper.pdf)"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Don't fight the borrow checker"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"\"Owned\" types and \"view\" types: `&str` and `String`, `Path` and "
"`PathBuf`, etc."
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Don't hide ownership requirements: avoid hidden `.clone()`, learn to love "
"`Cow`"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Split types along ownership boundaries"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Structure your ownership hierarchy like a tree"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Strategies to manage circular dependencies: reference counting, using "
"indexes instead of references"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Interior mutability (Cell, RefCell)"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Working with lifetime parameters on user-defined data types"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Polymorphism in Rust"
msgstr ""

#: src/idiomatic/welcome.md
msgid "A quick refresher on traits and generic functions"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Rust has no inheritance: what are the implications?"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Using enums for polymorphism"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Using traits for polymorphism"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Using composition"
msgstr ""

#: src/idiomatic/welcome.md
msgid "How do I pick the most appropriate pattern?"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Working with generics"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Generic type parameter in a function or trait object as an argument?"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Trait bounds don't have to refer to the generic parameter"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Type parameters in traits: should it be a generic parameter or an associated "
"type?"
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Macros: a valuable tool to DRY up code when traits are not enough (or too "
"complex)"
msgstr ""

#: src/idiomatic/welcome.md
msgid "What is the purpose of errors? Recovery vs. reporting."
msgstr ""

#: src/idiomatic/welcome.md
msgid "Result vs. Option"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Designing good errors:"
msgstr ""

#: src/idiomatic/welcome.md
msgid "Determine the error scope."
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Capture additional context as the error flows upwards, crossing scope "
"boundaries."
msgstr ""

#: src/idiomatic/welcome.md
msgid "Leverage the `Error` trait to keep track of the full error chain."
msgstr ""

#: src/idiomatic/welcome.md
msgid "Leverage `thiserror` to reduce boilerplate when defining error types."
msgstr ""

#: src/idiomatic/welcome.md
msgid ""
"Distinguish fatal errors from recoverable errors using `Result<Result<T, "
"RecoverableError>, FatalError>`."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"Rust's type system is _expressive_: you can use types and traits to build "
"abstractions that make your code harder to misuse."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"In some cases, you can go as far as enforcing correctness at _compile-time_, "
"with no runtime overhead."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"Types and traits can model concepts and constraints from your business "
"domain. With careful design, you can improve the clarity and maintainability "
"of the entire codebase."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid "Additional items speaker may mention:"
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"Rust's type system borrows a lot of ideas from functional programming "
"languages."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"For example, Rust's enums are known as \"algebraic data types\" in languages "
"like Haskell and OCaml. You can take inspiration from learning material "
"geared towards functional languages when looking for guidance on how to "
"design with types. [\"Domain Modeling Made Functional\"](https://"
"pragprog.com/titles/swdddf/domain-modeling-made-functional/) is a great "
"resource on the topic, with examples written in F#."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"Despite Rust's functional roots, not all functional design patterns can be "
"easily translated to Rust."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"For example, you must have a solid grasp on a broad selection of advanced "
"topics to design APIs that leverage higher-order functions and higher-kinded "
"types in Rust."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"Evaluate, on a case-by-case basis, whether a more imperative approach may be "
"easier to implement. Consider using in-place mutation, relying on Rust's "
"borrow-checker and type system to control what can be mutated, and where."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"The same caution should be applied to object-oriented design patterns. Rust "
"doesn't support inheritance, and object decomposition should take into "
"account the constraints introduced by the borrow checker."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
msgid ""
"Mention that type-level programming can be often used to create \"zero-cost "
"abstractions\", although the label can be misleading: the impact on compile "
"times and code complexity may be significant."
msgstr ""

#: src/idiomatic/leveraging-the-type-system.md
#: src/unsafe-deep-dive/foundations.md
msgid "This segment should take about 25 minutes. It contains:"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
msgid "A _newtype_ is a wrapper around an existing type, often a primitive:"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
msgid "/// A unique user identifier, implemented as a newtype around `u64`.\n"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
msgid ""
"Unlike type aliases, newtypes aren't interchangeable with the wrapped type:"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid "// üõ†Ô∏è‚ùå\n"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
msgid ""
"The Rust compiler won't let you use methods or operators defined on the "
"underlying type either:"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
msgid ""
"Students should have encountered the newtype pattern in the \"Fundamentals\" "
"course, when they learned about [tuple structs](../../user-defined-types/"
"tuple-structs.md)."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
msgid "Run the example to show students the error message from the compiler."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
msgid ""
"Modify the example to use a typealias instead of a newtype, such as `type "
"MessageId = u64`. The modified example should compile, thus highlighting the "
"differences between the two approaches."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern.md
msgid ""
"Stress that newtypes, out of the box, have no behaviour attached to them. "
"You need to be intentional about which methods and operators you are willing "
"to forward from the underlying type. In our `UserId` example, it is "
"reasonable to allow comparisons between `UserId`s, but it wouldn't make "
"sense to allow arithmetic operations like addition or subtraction."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid ""
"When a function takes multiple arguments of the same type, call sites are "
"unclear:"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid "// [...]\n"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid "\"password\""
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
#, fuzzy
msgid "\"username\""
msgstr "\"nyt areal: {}\""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid ""
"// In another part of the codebase, we swap arguments by mistake.\n"
"// Bug (best case), security vulnerability (worst case)\n"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid "The newtype pattern can prevent this class of errors at compile time:"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid ""
"Run both examples to show students the successful compilation for the "
"original example, and the compiler error returned by the modified example."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid ""
"Stress the _semantic_ angle. The newtype pattern should be leveraged to use "
"distinct types for distinct concepts, thus ruling out this class of errors "
"entirely."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid ""
"Nonetheless, note that there are legitimate scenarios where a function may "
"take multiple arguments of the same type. In those scenarios, if correctness "
"is of paramount importance, consider using a struct with named fields as "
"input:"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid ""
"// No need to check the definition of the `login` function to spot the "
"issue.\n"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/semantic-confusion.md
msgid ""
"Users are forced, at the callsite, to assign values to each field, thus "
"increasing the likelihood of spotting bugs."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/parse-don-t-validate.md
msgid "The newtype pattern can be leveraged to enforce _invariants_."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/parse-don-t-validate.md
msgid "// Other validation checks...\n"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/parse-don-t-validate.md
msgid ""
"The newtype pattern, combined with Rust's module and visibility system, can "
"be used to _guarantee_ that instances of a given type satisfy a set of "
"invariants."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/parse-don-t-validate.md
msgid ""
"In the example above, the raw `String` stored inside the `Username` struct "
"can't be accessed directly from other modules or crates, since it's not "
"marked as `pub` or `pub(in ...)`. Consumers of the `Username` type are "
"forced to use the `new` method to create instances. In turn, `new` performs "
"validation, thus ensuring that all instances of `Username` satisfy those "
"checks."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/parse-don-t-validate.md
msgid ""
"The `as_str` method allows consumers to access the raw string representation "
"(e.g., to store it in a database). However, consumers can't modify the "
"underlying value since `&str`, the returned type, restricts them to read-"
"only access."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/parse-don-t-validate.md
msgid "Type-level invariants have second-order benefits."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/parse-don-t-validate.md
msgid ""
"The input is validated once, at the boundary, and the rest of the program "
"can rely on the invariants being upheld. We can avoid redundant validation "
"and \"defensive programming\" checks throughout the program, reducing noise "
"and improving performance."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/is-it-encapsulated.md
msgid "Is It Truly Encapsulated?"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/is-it-encapsulated.md
msgid ""
"You must evaluate _the entire API surface_ exposed by a newtype to determine "
"if invariants are indeed bullet-proof. It is crucial to consider all "
"possible interactions, including trait implementations, that may allow users "
"to bypass validation checks."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/is-it-encapsulated.md
msgid "// Validation checks...\n"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/is-it-encapsulated.md
msgid "// ‚ÄºÔ∏è\n"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/is-it-encapsulated.md
msgid ""
"`DerefMut` allows users to get a mutable reference to the wrapped value."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/is-it-encapsulated.md
msgid ""
"The mutable reference can be used to modify the underlying data in ways that "
"may violate the invariants enforced by `Username::new`!"
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/is-it-encapsulated.md
msgid ""
"When auditing the API surface of a newtype, you can narrow down the review "
"scope to methods and traits that provide mutable access to the underlying "
"data."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/is-it-encapsulated.md
msgid "Remind students of privacy boundaries."
msgstr ""

#: src/idiomatic/leveraging-the-type-system/newtype-pattern/is-it-encapsulated.md
msgid ""
"In particular, functions and methods defined in the same module of the "
"newtype can access its underlying data directly. If possible, move the "
"newtype definition to its own separate module to reduce the scope of the "
"audit."
msgstr ""

#: src/unsafe-deep-dive/welcome.md
#, fuzzy
msgid "Welcome to Unsafe Rust"
msgstr "Velkommen til Rust p√• det r√• jern"

#: src/unsafe-deep-dive/welcome.md
msgid "IMPORTANT: THIS MODULE IS IN AN EARLY STAGE OF DEVELOPMENT"
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid ""
"Please do not consider this module of Comprehensive Rust to be complete. "
"With that in mind, your feedback, comments, and especially your concerns, "
"are very welcome."
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid ""
"To comment on this module's development, please use the [GitHub issue "
"tracker](https://github.com/google/comprehensive-rust/issues)."
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid ""
"The `unsafe` keyword is easy to type, but hard to master. When used "
"appropriately, it forms a useful and indeed essential part of the Rust "
"programming language."
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid ""
"By the end of this deep dive, you'll know how to work with `unsafe` code, "
"review others' changes that include the `unsafe` keyword, and produce your "
"own."
msgstr ""

#: src/unsafe-deep-dive/welcome.md
#, fuzzy
msgid "What you'll learn:"
msgstr "Hvad du ser:"

#: src/unsafe-deep-dive/welcome.md
msgid "What the terms undefined behavior, soundness, and safety mean"
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid "Why the `unsafe` keyword exists in the Rust language"
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid "How to write your own code using `unsafe` safely"
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid "How to review `unsafe` code"
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid "Links to other sections of the course"
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid "The `unsafe` keyword has treatment in:"
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid ""
"_Rust Fundamentals_, the main module of Comprehensive Rust, includes a "
"session on [Unsafe Rust](../unsafe-rust.html) in its last day."
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid ""
"_Rust in Chromium_ discusses how to [interoperate with C++](../chromium/"
"interoperability-with-cpp.md). Consult that material if you are looking into "
"FFI."
msgstr ""

#: src/unsafe-deep-dive/welcome.md
msgid ""
"_Bare Metal Rust_ uses unsafe heavily to interact with the underlying host, "
"among other things."
msgstr ""

#: src/unsafe-deep-dive/setup.md
msgid "Setting Up"
msgstr ""

#: src/unsafe-deep-dive/setup.md
#, fuzzy
msgid "Local Rust installation"
msgstr "Installation"

#: src/unsafe-deep-dive/setup.md
msgid ""
"You should have a Rust compiler installed that supports the 2024 edition of "
"the language, which is any version of rustc higher than 1.84."
msgstr ""

#: src/unsafe-deep-dive/setup.md
msgid "(Optional) Create a local instance of the course"
msgstr ""

#: src/unsafe-deep-dive/setup.md
msgid ""
"```console\n"
"$ git clone --depth=1 https://github.com/google/comprehensive-rust.git\n"
"Cloning into 'comprehensive-rust'...\n"
"...\n"
"$ cd comprehensive-rust\n"
"$ cargo install-tools\n"
"...\n"
"$ cargo serve # then open http://127.0.0.1:3000/ in a browser\n"
"```"
msgstr ""

#: src/unsafe-deep-dive/setup.md
msgid ""
"Ask everyone to confirm that everyone is able to execute `rustc` with a "
"version older that 1.87."
msgstr ""

#: src/unsafe-deep-dive/setup.md
msgid ""
"For those people who do not, tell them that we'll resolve that in the break."
msgstr ""

#: src/unsafe-deep-dive/motivations.md
msgid "We know that writing code without the guarantees that Rust provides ..."
msgstr ""

#: src/unsafe-deep-dive/motivations.md
msgid ""
"‚ÄúUse-after-free (UAF), integer overflows, and out of bounds (OOB) reads/"
"writes comprise 90% of vulnerabilities with OOB being the most common.‚Äù"
msgstr ""

#: src/unsafe-deep-dive/motivations.md
msgid ""
"\\--‚Äî **Jeff Vander Stoep and Chong Zang**, Google. \"[Queue the Hardening "
"Enhancements](https://security.googleblog.com/2019/05/queue-hardening-"
"enhancements.html)\""
msgstr ""

#: src/unsafe-deep-dive/motivations.md
msgid "... so why is `unsafe` part of the language?"
msgstr ""

#: src/unsafe-deep-dive/motivations.md
msgid "1 minute"
msgstr ""

#: src/unsafe-deep-dive/motivations.md
msgid ""
"The `unsafe` keyword exists because there is no compiler technology "
"available today that makes it obsolete. Compilers cannot verify everything."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"TODO: Refactor this content into multiple slides as this slide is intended "
"as an introduction to the motivations only, rather than to be an elaborate "
"discussion of the whole problem."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "Language interoperability allows you to:"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "Call functions written in other languages from Rust"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "Write functions in Rust that are callable from other languages"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "However, this requires unsafe."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
#, fuzzy
msgid "\"{a:?}\""
msgstr "\"{:?}\""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"The Rust compiler can't enforce any safety guarantees for programs that it "
"hasn't compiled, so it delegates that responsibility to you through the "
"unsafe keyword."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"The code example we're seeing shows how to call the random function provided "
"by libc within Rust. libc is available to scripts in the Rust Playground."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "This uses Rust's _foreign function interface_."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"This isn't the only style of interoperability, however it is the method "
"that's needed if you want to work between Rust and some other language in a "
"zero cost way. Another important strategy is message passing."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"Message passing avoids unsafe, but serialization, allocation, data transfer "
"and parsing all take energy and time."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "Answers to questions"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"_Where does \"random\" come from?_  \n"
"libc is dynamically linked to Rust programs by default, allowing our code to "
"rely on its symbols, including `random`, being available to our program."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"_What is the \"safe\" keyword?_  \n"
"It allows callers to call the function without needing to wrap that call in "
"`unsafe`. The [`safe` function qualifier](https://doc.rust-lang.org/stable/"
"edition-guide/rust-2024/unsafe-extern.html) was introduced in the 2024 "
"edition of Rust and can only be used within `extern` blocks. It was "
"introduced because `unsafe` became a mandatory qualifier for `extern` blocks "
"in that edition."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"_What is the [`std::ffi::c_long`](https://doc.rust-lang.org/std/ffi/"
"type.c_long.html) type?_  \n"
"According to the C standard, an integer that's at least 32 bits wide. On "
"today's systems, It's an `i32` on Windows and an `i64` on Linux."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "Consideration: type safety"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"Modify the code example to remove the need for type casting later. Discuss "
"the potential UB - long's width is defined by the target."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "Changes from the original:"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"It's also possible to completely ignore the intended type and create "
"undefined behavior in multiple ways. The code below produces output most of "
"the time, but generally results in a stack overflow. It may also produce "
"illegal `char` values. Although `char` is represented in 4 bytes (32 bits), "
"[not all bit patterns are permitted as a `char`](https://doc.rust-lang.org/"
"std/primitive.char.html#validity-and-layout)."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"Stress that the Rust compiler will trust that the wrapper is telling the "
"truth."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"Attempting to print a `[char; 2]` from randomly generated input will often "
"produce strange output, including:"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"Mention that type safety is generally not a large concern in practice. Tools "
"that produce wrappers automatically, i.e. bindgen, are excellent at reading "
"header files and producing values of the correct type."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "Consideration: Ownership and lifetime management"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"While libc's `random` function doesn't use pointers, many do. This creates "
"many more possibilities for unsoundness."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "both sides might attempt to free the memory (double free)"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "both sides can attempt to write to the data"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"For example, some C libraries expose functions that write to static buffers "
"that are re-used between calls."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"/// Create a formatted time based on time `t`, including trailing newline.\n"
"    /// Read `man 3 ctime` details.\n"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
#, fuzzy
msgid "\"now (1): {}\""
msgstr "\"pengepremie: {}\""

#: src/unsafe-deep-dive/motivations/interop.md
#, fuzzy
msgid "\"future:  {}\""
msgstr "\"five: {}\""

#: src/unsafe-deep-dive/motivations/interop.md
#, fuzzy
msgid "\"now (2): {}\""
msgstr "\"int: {}\""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "_Aside:_ Lifetimes in the `format_timestamp()` function"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"Neither `'a`, nor `'static`, correctly describe the lifetime of the string "
"that's returned. Rust treats it as an immutable reference, but subsequent "
"calls to `ctime` will overwrite the static buffer that the string occupies."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "Consideration: Representation mismatch"
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"Different programming languages have made different design decisions and "
"this can create impedance mismatches between different domains."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
msgid ""
"Consider string handling. C++ defines `std::string`, which has an "
"incompatible memory layout with Rust's `String` type. `String` also requires "
"text to be encoded as UTF-8, whereas `std::string` does not. In C, text is "
"represented by a null-terminated sequence of bytes (`char*`)."
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
#, fuzzy
msgid "b\"Hello, C\\0\""
msgstr "\"Hallo \""

#: src/unsafe-deep-dive/motivations/interop.md
#, fuzzy
msgid "b\"Hello, Rust\""
msgstr "\"Hallo \""

#: src/unsafe-deep-dive/motivations/interop.md
msgid "\"{c}\""
msgstr ""

#: src/unsafe-deep-dive/motivations/interop.md
#, fuzzy
msgid "\"{rust}\""
msgstr "\"rust\""

#: src/unsafe-deep-dive/motivations/data-structures.md
msgid "Some families of data structures are impossible to create in safe Rust."
msgstr ""

#: src/unsafe-deep-dive/motivations/data-structures.md
msgid "graphs"
msgstr ""

#: src/unsafe-deep-dive/motivations/data-structures.md
msgid "bit twiddling"
msgstr ""

#: src/unsafe-deep-dive/motivations/data-structures.md
msgid "self-referential types"
msgstr ""

#: src/unsafe-deep-dive/motivations/data-structures.md
#, fuzzy
msgid "intrusive data structures"
msgstr "Livstider i datastrukturer"

#: src/unsafe-deep-dive/motivations/data-structures.md
msgid ""
"Graphs: General-purpose graphs cannot be created as they may need to "
"represent cycles. Cycles are impossible for the type system to reason about."
msgstr ""

#: src/unsafe-deep-dive/motivations/data-structures.md
msgid ""
"Bit twiddling: Overloading bits with multiple meanings. Examples include "
"using the NaN bits in `f64` for some other purpose or the higher-order bits "
"of pointers on `x86_64` platforms. This is somewhat common when writing "
"language interpreters to keep representations within the word size the "
"target platform."
msgstr ""

#: src/unsafe-deep-dive/motivations/data-structures.md
msgid "Self-referential types are too hard for the borrow checker to verify."
msgstr ""

#: src/unsafe-deep-dive/motivations/data-structures.md
msgid ""
"Intrusive data structures: store structural metadata (like pointers to other "
"elements) inside the elements themselves, which requires careful handling of "
"aliasing."
msgstr ""

#: src/unsafe-deep-dive/motivations/performance.md
msgid "TODO: Stub for now"
msgstr ""

#: src/unsafe-deep-dive/motivations/performance.md
msgid ""
"It's easy to think of performance as the main reason for unsafe, but high "
"performance code makes up the minority of unsafe blocks."
msgstr ""

#: src/unsafe-deep-dive/foundations.md
msgid "Some fundamental concepts and terms."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
#, fuzzy
msgid "What is ‚Äúunsafety‚Äù?"
msgstr "Hvad er Rust?"

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Unsafe Rust is a superset of Safe Rust."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Let's create a list of things that are enabled by the `unsafe` keyword."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Definitions from authoritative docs:"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "From the [unsafe keyword's documentation]():"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Code or interfaces whose memory safety cannot be verified by the type system."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
#, fuzzy
msgid "..."
msgstr "// ...\n"

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Here are the abilities Unsafe Rust has in addition to Safe Rust:"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Dereference raw pointers"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
#, fuzzy
msgid "Implement unsafe traits"
msgstr "Asynkrone egenskaber (eng. Traits)"

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
#, fuzzy
msgid "Call unsafe functions"
msgstr "Funktioner"

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Mutate statics (including external ones)"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Access fields of unions"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "From the [reference](https://doc.rust-lang.org/reference/unsafety.html)"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"The following language level features cannot be used in the safe subset of "
"Rust:"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Dereferencing a raw pointer."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Reading or writing a mutable or external static variable."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Accessing a field of a union, other than to assign to it."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Calling an unsafe function (including an intrinsic or foreign function)."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Calling a safe function marked with a target_feature from a function that "
"does not have a target_feature attribute enabling the same features (see "
"attributes.codegen.target_feature.safety-restrictions)."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Implementing an unsafe trait."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Declaring an extern block."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Applying an unsafe attribute to an item."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
#, fuzzy
msgid "Group exercise"
msgstr "√òvelser"

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"You may have a group of learners who are not familiar with each other yet. "
"This is a way for you to gather some data about their confidence levels and "
"the psychological safety that they're feeling."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Part 1: Informal definition"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Use this to gauge the confidence level of the group. If they are uncertain, "
"then tailor the next section to be more directed."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Ask the class: **By raising your hand, indicate if you would feel "
"comfortable defining unsafe?**"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "If anyone's feeling confident, allow them to try to explain."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Part 2: Evidence gathering"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Ask the class to spend 3-5 minutes."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Find a use of the unsafe keyword. What contract/invariant/pre-condition is "
"being established or satisfied?"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Write down terms that need to be defined (unsafe, memory safety, soundness, "
"undefined behavior)"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Part 3: Write a working definition"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Part 4: Remarks"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "Mention that we'll be reviewing our definition at the end of the day."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Note: Avoid detailed discussion about precise semantics of memory safety"
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"It's possible that the group will slide into a discussion about the precise "
"semantics of what memory safety actually is and how define pointer validity. "
"This isn't a productive line of discussion. It can undermine confidence in "
"less experienced learners."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Perhaps refer people who wish to discuss this to the discussion within the "
"official [documentation for pointer types](https://doc.rust-lang.org/std/ptr/"
"index.html#safety) (excerpt below) as a place for further research."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid ""
"Many functions in [this module](https://doc.rust-lang.org/std/ptr/"
"index.html) take raw pointers as arguments and read from or write to them. "
"For this to be safe, these pointers must be _valid_ for the given access."
msgstr ""

#: src/unsafe-deep-dive/foundations/what-is-unsafe.md
msgid "The precise rules for validity are not determined yet."
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid ""
"The unsafe keyword indicates that the programmer is responsible for "
"upholding Rust's safety guarantees."
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid "The keyword has two roles:"
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid "define pre-conditions that must be satisfied"
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid ""
"assert to the compiler (= promise) that those defined pre-conditions are "
"satisfied"
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
#, fuzzy
msgid "Further references"
msgstr "Referencer"

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid ""
"[The unsafe keyword chapter of the Rust Reference](https://doc.rust-lang.org/"
"reference/unsafe-keyword.html)"
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid "Places where pre-conditions can be defined (Role 1)"
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid ""
"[unsafe functions](https://doc.rust-lang.org/reference/unsafe-"
"keyword.html#unsafe-functions-unsafe-fn) (`unsafe fn foo() { ... }`). "
"Example: `get_unchecked` method on slices, which requires callers to verify "
"that the index is in-bounds."
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid ""
"unsafe traits (`unsafe trait`). Examples: [`Send`](https://doc.rust-lang.org/"
"std/marker/trait.Send.html) and [`Sync`](https://doc.rust-lang.org/std/"
"marker/trait.Sync.html) marker traits in the standard library."
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid "Places where pre-conditions must be satisfied (Role 2)"
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid "unsafe blocks (`unafe { ... }`)"
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid "implementing unsafe traits (`unsafe impl`)"
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid "access external items (`unsafe extern`)"
msgstr ""

#: src/unsafe-deep-dive/foundations/when-is-unsafe-used.md
msgid ""
"adding [unsafe attributes](https://doc.rust-lang.org/reference/"
"attributes.html) o an item. Examples: [`export_name`](https://doc.rust-"
"lang.org/reference/abi.html#the-export_name-attribute), [`link_section`]"
"(https://doc.rust-lang.org/reference/abi.html#the-link_section-attribute) "
"and [`no_mangle`](https://doc.rust-lang.org/reference/abi.html#the-no_mangle-"
"attribute). Usage: `#[unsafe(no_mangle)]`"
msgstr ""

#: src/unsafe-deep-dive/foundations/data-structures-are-safe.md
msgid "Data structures are safe ..."
msgstr ""

#: src/unsafe-deep-dive/foundations/data-structures-are-safe.md
msgid "Data structures are inert. They cannot do any harm by themselves."
msgstr ""

#: src/unsafe-deep-dive/foundations/data-structures-are-safe.md
msgid "Safe Rust code can create raw pointers:"
msgstr ""

#: src/unsafe-deep-dive/foundations/data-structures-are-safe.md
#: src/unsafe-deep-dive/foundations/actions-might-not-be.md
msgid "\"{safe:p}\""
msgstr ""

#: src/unsafe-deep-dive/foundations/data-structures-are-safe.md
msgid ""
"Consider a raw pointer to an integer, i.e., the value `safe` is the raw "
"pointer type `*const i64`. Raw pointers can be out-of-bounds, misaligned, or "
"be null. But the unsafe keyword is not required when creating them."
msgstr ""

#: src/unsafe-deep-dive/foundations/actions-might-not-be.md
msgid "... but actions on them might not be"
msgstr ""

#: src/unsafe-deep-dive/foundations/actions-might-not-be.md
msgid "Modify the example to de-reference `safe` without an `unsafe` block."
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "The `unsafe` keyword does not allow you to break Rust."
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "b\"RUST\""
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "Suggested outline"
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "Request that someone explains what `std::mem::transmute` does"
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "Discuss why it doesn't compile"
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "Fix the code"
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "Expected compiler output"
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "Suggested change"
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid "Notes on less familiar Rust"
msgstr ""

#: src/unsafe-deep-dive/foundations/less-powerful.md
msgid ""
"the `b` prefix on a string literal marks it as byte slice (`&[u8]`) rather "
"than a string slice (`&str`)"
msgstr ""

#: src/thanks.md
msgid ""
"_Thank you for taking Comprehensive Rust ü¶Ä!_ We hope you enjoyed it and "
"that it was useful."
msgstr ""
"_Tak for at tage Comprehensive Rust ü¶Ä!_ Vi h√•ber du har nydt det og at det "
"har v√¶ret hj√¶lpsomt."

#: src/thanks.md
msgid ""
"We've had a lot of fun putting the course together. The course is not "
"perfect, so if you spotted any mistakes or have ideas for improvements, "
"please get in [contact with us on GitHub](https://github.com/google/"
"comprehensive-rust/discussions). We would love to hear from you."
msgstr ""

#: src/thanks.md
msgid ""
"Thank you for reading the speaker notes! We hope they have been useful. If "
"you find pages without notes, please send us a PR and link it to [issue "
"#1083](https://github.com/google/comprehensive-rust/issues/1083). We are "
"also very grateful for fixes and improvements to the existing notes."
msgstr ""

#: src/glossary.md
msgid ""
"The following is a glossary which aims to give a short definition of many "
"Rust terms. For translations, this also serves to connect the term back to "
"the English original."
msgstr ""

#. Please add the English term in italic after your translated term. Also, please keep the hard line breaks to ensure a nice formatting.
#: src/glossary.md
msgid ""
"allocate:  \n"
"Dynamic memory allocation on [the heap](memory-management/review.md)."
msgstr ""

#: src/glossary.md
msgid ""
"argument:  \n"
"Information that is passed into a function or method."
msgstr ""

#: src/glossary.md
msgid ""
"associated type:  \n"
"A type associated with a specific trait. Useful for defining the "
"relationship between types."
msgstr ""

#: src/glossary.md
msgid ""
"Bare-metal Rust:  \n"
"Low-level Rust development, often deployed to a system without an operating "
"system. See [Bare-metal Rust](bare-metal.md)."
msgstr ""

#: src/glossary.md
msgid ""
"block:  \n"
"See [Blocks](control-flow-basics/blocks-and-scopes.md) and _scope_."
msgstr ""

#: src/glossary.md
msgid ""
"borrow:  \n"
"See [Borrowing](borrowing/shared.md)."
msgstr ""

#: src/glossary.md
msgid ""
"borrow checker:  \n"
"The part of the Rust compiler which checks that all borrows are valid."
msgstr ""

#: src/glossary.md
msgid ""
"brace:  \n"
"`{` and `}`. Also called _curly brace_, they delimit _blocks_."
msgstr ""

#: src/glossary.md
msgid ""
"build:  \n"
"The process of converting source code into executable code or a usable "
"program."
msgstr ""

#: src/glossary.md
msgid ""
"call:  \n"
"To invoke or execute a function or method."
msgstr ""

#: src/glossary.md
msgid ""
"channel:  \n"
"Used to safely pass messages [between threads](concurrency/channels.md)."
msgstr ""

#: src/glossary.md
msgid ""
"Comprehensive Rust ü¶Ä:  \n"
"The courses here are jointly called Comprehensive Rust ü¶Ä."
msgstr ""

#: src/glossary.md
msgid ""
"concurrency:  \n"
"The execution of multiple tasks or processes at the same time."
msgstr ""

#: src/glossary.md
msgid ""
"Concurrency in Rust:  \n"
"See [Concurrency in Rust](concurrency/welcome.md)."
msgstr ""

#: src/glossary.md
msgid ""
"constant:  \n"
"A value that does not change during the execution of a program."
msgstr ""

#: src/glossary.md
msgid ""
"control flow:  \n"
"The order in which the individual statements or instructions are executed in "
"a program."
msgstr ""

#: src/glossary.md
msgid ""
"crash:  \n"
"An unexpected and unhandled failure or termination of a program."
msgstr ""

#: src/glossary.md
msgid ""
"enumeration:  \n"
"A data type that holds one of several named constants, possibly with an "
"associated tuple or struct."
msgstr ""

#: src/glossary.md
msgid ""
"error:  \n"
"An unexpected condition or result that deviates from the expected behavior."
msgstr ""

#: src/glossary.md
msgid ""
"error handling:  \n"
"The process of managing and responding to errors that occur during program "
"execution."
msgstr ""

#: src/glossary.md
msgid ""
"exercise:  \n"
"A task or problem designed to practice and test programming skills."
msgstr ""

#: src/glossary.md
msgid ""
"function:  \n"
"A reusable block of code that performs a specific task."
msgstr ""

#: src/glossary.md
msgid ""
"garbage collector:  \n"
"A mechanism that automatically frees up memory occupied by objects that are "
"no longer in use."
msgstr ""

#: src/glossary.md
msgid ""
"generics:  \n"
"A feature that allows writing code with placeholders for types, enabling "
"code reuse with different data types."
msgstr ""

#: src/glossary.md
msgid ""
"immutable:  \n"
"Unable to be changed after creation."
msgstr ""

#: src/glossary.md
msgid ""
"integration test:  \n"
"A type of test that verifies the interactions between different parts or "
"components of a system."
msgstr ""

#: src/glossary.md
msgid ""
"keyword:  \n"
"A reserved word in a programming language that has a specific meaning and "
"cannot be used as an identifier."
msgstr ""

#: src/glossary.md
msgid ""
"library:  \n"
"A collection of precompiled routines or code that can be used by programs."
msgstr ""

#: src/glossary.md
msgid ""
"macro:  \n"
"Rust macros can be recognized by a `!` in the name. Macros are used when "
"normal functions are not enough. A typical example is `format!`, which takes "
"a variable number of arguments, which isn't supported by Rust functions."
msgstr ""

#: src/glossary.md
msgid ""
"`main` function:  \n"
"Rust programs start executing with the `main` function."
msgstr ""

#: src/glossary.md
msgid ""
"match:  \n"
"A control flow construct in Rust that allows for pattern matching on the "
"value of an expression."
msgstr ""

#: src/glossary.md
msgid ""
"memory leak:  \n"
"A situation where a program fails to release memory that is no longer "
"needed, leading to a gradual increase in memory usage."
msgstr ""

#: src/glossary.md
msgid ""
"method:  \n"
"A function associated with an object or a type in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"module:  \n"
"A namespace that contains definitions, such as functions, types, or traits, "
"to organize code in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"move:  \n"
"The transfer of ownership of a value from one variable to another in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"mutable:  \n"
"A property in Rust that allows variables to be modified after they have been "
"declared."
msgstr ""

#: src/glossary.md
msgid ""
"ownership:  \n"
"The concept in Rust that defines which part of the code is responsible for "
"managing the memory associated with a value."
msgstr ""

#: src/glossary.md
msgid ""
"panic:  \n"
"An unrecoverable error condition in Rust that results in the termination of "
"the program."
msgstr ""

#: src/glossary.md
msgid ""
"parameter:  \n"
"A value that is passed into a function or method when it is called."
msgstr ""

#: src/glossary.md
msgid ""
"pattern:  \n"
"A combination of values, literals, or structures that can be matched against "
"an expression in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"payload:  \n"
"The data or information carried by a message, event, or data structure."
msgstr ""

#: src/glossary.md
msgid ""
"program:  \n"
"A set of instructions that a computer can execute to perform a specific task "
"or solve a particular problem."
msgstr ""

#: src/glossary.md
msgid ""
"programming language:  \n"
"A formal system used to communicate instructions to a computer, such as Rust."
msgstr ""

#: src/glossary.md
msgid ""
"receiver:  \n"
"The first parameter in a Rust method that represents the instance on which "
"the method is called."
msgstr ""

#: src/glossary.md
msgid ""
"reference counting:  \n"
"A memory management technique in which the number of references to an object "
"is tracked, and the object is deallocated when the count reaches zero."
msgstr ""

#: src/glossary.md
msgid ""
"return:  \n"
"A keyword in Rust used to indicate the value to be returned from a function."
msgstr ""

#: src/glossary.md
msgid ""
"Rust:  \n"
"A systems programming language that focuses on safety, performance, and "
"concurrency."
msgstr ""

#: src/glossary.md
msgid ""
"Rust Fundamentals:  \n"
"Days 1 to 4 of this course."
msgstr ""

#: src/glossary.md
msgid ""
"Rust in Android:  \n"
"See [Rust in Android](android.md)."
msgstr ""

#: src/glossary.md
msgid ""
"Rust in Chromium:  \n"
"See [Rust in Chromium](chromium.md)."
msgstr ""

#: src/glossary.md
msgid ""
"safe:  \n"
"Refers to code that adheres to Rust's ownership and borrowing rules, "
"preventing memory-related errors."
msgstr ""

#: src/glossary.md
msgid ""
"scope:  \n"
"The region of a program where a variable is valid and can be used."
msgstr ""

#: src/glossary.md
msgid ""
"standard library:  \n"
"A collection of modules providing essential functionality in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"static:  \n"
"A keyword in Rust used to define static variables or items with a `'static` "
"lifetime."
msgstr ""

#: src/glossary.md
msgid ""
"string:  \n"
"A data type storing textual data. See [Strings](references/strings.html) for "
"more."
msgstr ""

#: src/glossary.md
msgid ""
"struct:  \n"
"A composite data type in Rust that groups together variables of different "
"types under a single name."
msgstr ""

#: src/glossary.md
msgid ""
"test:  \n"
"A Rust module containing functions that test the correctness of other "
"functions."
msgstr ""

#: src/glossary.md
msgid ""
"thread:  \n"
"A separate sequence of execution in a program, allowing concurrent execution."
msgstr ""

#: src/glossary.md
msgid ""
"thread safety:  \n"
"The property of a program that ensures correct behavior in a multithreaded "
"environment."
msgstr ""

#: src/glossary.md
msgid ""
"trait:  \n"
"A collection of methods defined for an unknown type, providing a way to "
"achieve polymorphism in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"trait bound:  \n"
"An abstraction where you can require types to implement some traits of your "
"interest."
msgstr ""

#: src/glossary.md
msgid ""
"tuple:  \n"
"A composite data type that contains variables of different types. Tuple "
"fields have no names, and are accessed by their ordinal numbers."
msgstr ""

#: src/glossary.md
msgid ""
"type:  \n"
"A classification that specifies which operations can be performed on values "
"of a particular kind in Rust."
msgstr ""

#: src/glossary.md
msgid ""
"type inference:  \n"
"The ability of the Rust compiler to deduce the type of a variable or "
"expression."
msgstr ""

#: src/glossary.md
msgid ""
"undefined behavior:  \n"
"Actions or conditions in Rust that have no specified result, often leading "
"to unpredictable program behavior."
msgstr ""

#: src/glossary.md
msgid ""
"union:  \n"
"A data type that can hold values of different types but only one at a time."
msgstr ""

#: src/glossary.md
msgid ""
"unit test:  \n"
"Rust comes with built-in support for running small unit tests and larger "
"integration tests. See [Unit Tests](testing/unit-tests.html)."
msgstr ""

#: src/glossary.md
msgid ""
"unit type:  \n"
"Type that holds no data, written as a tuple with no members."
msgstr ""

#: src/glossary.md
msgid ""
"unsafe:  \n"
"The subset of Rust which allows you to trigger _undefined behavior_. See "
"[Unsafe Rust](unsafe-rust/unsafe.md)."
msgstr ""

#: src/glossary.md
msgid ""
"variable:  \n"
"A memory location storing data. Variables are valid in a _scope_."
msgstr ""

#: src/other-resources.md
msgid "Other Rust Resources"
msgstr "Andre Rust-resourcer"

#: src/other-resources.md
msgid ""
"The Rust community has created a wealth of high-quality and free resources "
"online."
msgstr ""

#: src/other-resources.md
msgid "Official Documentation"
msgstr "Officiel dokumentation"

#: src/other-resources.md
msgid "The Rust project hosts many resources. These cover Rust in general:"
msgstr "Rust-projektet huser mange ressourcer. Disse d√¶kker Rust generelt:"

#: src/other-resources.md
msgid ""
"[The Rust Programming Language](https://doc.rust-lang.org/book/): the "
"canonical free book about Rust. Covers the language in detail and includes a "
"few projects for people to build."
msgstr ""
"[The Rust Programming Language](https://doc.rust-lang.org/book/): en gratis "
"bog om Rust. D√¶kker sproget detaljeret og indeholder et par projekter du kan "
"bygge."

#: src/other-resources.md
msgid ""
"[Rust By Example](https://doc.rust-lang.org/rust-by-example/): covers the "
"Rust syntax via a series of examples which showcase different constructs. "
"Sometimes includes small exercises where you are asked to expand on the code "
"in the examples."
msgstr ""
"[Rust By Example](https://doc.rust-lang.org/rust-by-example/): d√¶kker "
"syntaksen i Rust via en r√¶kke eksempler som viser de forskellige "
"konstruktioner. Der er sommetider sm√• opgaver hvor du bliver bedt om at "
"udvide koden i eksemplerne."

#: src/other-resources.md
msgid ""
"[Rust Standard Library](https://doc.rust-lang.org/std/): full documentation "
"of the standard library for Rust."
msgstr ""
"[Rust Standard Library](https://doc.rust-lang.org/std/): fuld dokumentation "
"af standardbiblioteket for Rust."

#: src/other-resources.md
msgid ""
"[The Rust Reference](https://doc.rust-lang.org/reference/): an incomplete "
"book which describes the Rust grammar and memory model."
msgstr ""
"[The Rust Reference](https://doc.rust-lang.org/reference/): en ufuldst√¶ndig "
"bog som beskriver grammatikken og en hukommelsesmodel for Rust."

#: src/other-resources.md
msgid ""
"[Rust API Guidelines](https://rust-lang.github.io/api-guidelines/): "
"recommendations on how to design APIs."
msgstr ""

#: src/other-resources.md
msgid "More specialized guides hosted on the official Rust site:"
msgstr "Mere specialiserede guider huset p√• den officielle Rust side:"

#: src/other-resources.md
msgid ""
"[The Rustonomicon](https://doc.rust-lang.org/nomicon/): covers unsafe Rust, "
"including working with raw pointers and interfacing with other languages "
"(FFI)."
msgstr ""
"[The Rustonomicon](https://doc.rust-lang.org/nomicon/): d√¶kker unsafe Rust, "
"inklusiv det at arbejde med r√• pointere og at kommunikere med andre sprog "
"(FFI)."

#: src/other-resources.md
msgid ""
"[Asynchronous Programming in Rust](https://rust-lang.github.io/async-book/): "
"covers the new asynchronous programming model which was introduced after the "
"Rust Book was written."
msgstr ""
"[Asynchronous Programming in Rust](https://rust-lang.github.io/async-book/): "
"d√¶kker den nye asynkrone programmeringsmodel som blev introduceret efter at "
"Rustbogen blev skrevet."

#: src/other-resources.md
msgid ""
"[The Embedded Rust Book](https://doc.rust-lang.org/stable/embedded-book/): "
"an introduction to using Rust on embedded devices without an operating "
"system."
msgstr ""
"[The Embedded Rust Book](https://doc.rust-lang.org/stable/embedded-book/): "
"en introduktion til at bruge Rust p√• indlejrede enheder uden et "
"operativsystem."

#: src/other-resources.md
msgid "Unofficial Learning Material"
msgstr "Uofficielt l√¶remateriale"

#: src/other-resources.md
msgid "A small selection of other guides and tutorial for Rust:"
msgstr "Et lille udvalg af andre guides for Rust:"

#: src/other-resources.md
msgid ""
"[Learn Rust the Dangerous Way](http://cliffle.com/p/dangerust/): covers Rust "
"from the perspective of low-level C programmers."
msgstr ""

#: src/other-resources.md
msgid ""
"[Rust for Embedded C Programmers](https://opentitan.org/book/doc/"
"rust_for_c_devs.html): covers Rust from the perspective of developers who "
"write firmware in C."
msgstr ""

#: src/other-resources.md
msgid ""
"[Rust for professionals](https://overexact.com/rust-for-professionals/): "
"covers the syntax of Rust using side-by-side comparisons with other "
"languages such as C, C++, Java, JavaScript, and Python."
msgstr ""

#: src/other-resources.md
msgid ""
"[Rust on Exercism](https://exercism.org/tracks/rust): 100+ exercises to help "
"you learn Rust."
msgstr ""

#: src/other-resources.md
msgid ""
"[Ferrous Teaching Material](https://ferrous-systems.github.io/teaching-"
"material/index.html): a series of small presentations covering both basic "
"and advanced part of the Rust language. Other topics such as WebAssembly, "
"and async/await are also covered."
msgstr ""

#: src/other-resources.md
msgid ""
"[Advanced testing for Rust applications](https://rust-exercises.com/advanced-"
"testing/): a self-paced workshop that goes beyond Rust's built-in testing "
"framework. It covers `googletest`, snapshot testing, mocking as well as how "
"to write your own custom test harness."
msgstr ""

#: src/other-resources.md
msgid ""
"[Beginner's Series to Rust](https://docs.microsoft.com/en-us/shows/beginners-"
"series-to-rust/) and [Take your first steps with Rust](https://"
"docs.microsoft.com/en-us/learn/paths/rust-first-steps/): two Rust guides "
"aimed at new developers. The first is a set of 35 videos and the second is a "
"set of 11 modules which covers Rust syntax and basic constructs."
msgstr ""

#: src/other-resources.md
msgid ""
"[Learn Rust With Entirely Too Many Linked Lists](https://rust-"
"unofficial.github.io/too-many-lists/): in-depth exploration of Rust's memory "
"management rules, through implementing a few different types of list "
"structures."
msgstr ""

#: src/other-resources.md
msgid ""
"Please see the [Little Book of Rust Books](https://lborb.github.io/book/) "
"for even more Rust books."
msgstr ""

#: src/credits.md
msgid ""
"The material here builds on top of the many great sources of Rust "
"documentation. See the page on [other resources](other-resources.md) for a "
"full list of useful resources."
msgstr ""

#: src/credits.md
msgid ""
"The material of Comprehensive Rust is licensed under the terms of the Apache "
"2.0 license, please see [`LICENSE`](https://github.com/google/comprehensive-"
"rust/blob/main/LICENSE) for details."
msgstr ""

#: src/credits.md
msgid "Rust by Example"
msgstr "Rust by Example"

#: src/credits.md
msgid ""
"Some examples and exercises have been copied and adapted from [Rust by "
"Example](https://doc.rust-lang.org/rust-by-example/). Please see the "
"`third_party/rust-by-example/` directory for details, including the license "
"terms."
msgstr ""

#: src/credits.md
msgid "Rust on Exercism"
msgstr "Rust p√• Exercism"

#: src/credits.md
msgid ""
"Some exercises have been copied and adapted from [Rust on Exercism](https://"
"exercism.org/tracks/rust). Please see the `third_party/rust-on-exercism/` "
"directory for details, including the license terms."
msgstr ""

#: src/credits.md
msgid "CXX"
msgstr "CXX"

#: src/credits.md
msgid ""
"The [Interoperability with C++](android/interoperability/cpp.md) section "
"uses an image from [CXX](https://cxx.rs/). Please see the `third_party/cxx/` "
"directory for details, including the license terms."
msgstr ""
