msgid ""
msgstr ""
"Project-Id-Version: Comprehensive Rust ü¶Ä\n"
"POT-Creation-Date: 2023-11-30T15:58:18+01:00\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: da\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: src/SUMMARY.md:2 src/index.md:1
msgid "Welcome to Comprehensive Rust ü¶Ä"
msgstr "Velkommen til Comprehensive Rust ü¶Ä"

#: src/SUMMARY.md:3 src/running-the-course.md:1
msgid "Running the Course"
msgstr "Afvikling af kurset"

#: src/SUMMARY.md:4 src/running-the-course/course-structure.md:1
msgid "Course Structure"
msgstr "Kursets struktur"

#: src/SUMMARY.md:5 src/running-the-course/keyboard-shortcuts.md:1
msgid "Keyboard Shortcuts"
msgstr "Genvejstaster"

#: src/SUMMARY.md:6 src/running-the-course/translations.md:1
msgid "Translations"
msgstr "Overs√¶ttelser"

#: src/SUMMARY.md:7 src/cargo.md:1
msgid "Using Cargo"
msgstr "Brug af Cargo"

#: src/SUMMARY.md:8
msgid "Rust Ecosystem"
msgstr "Rust's √∏kosystem"

#: src/SUMMARY.md:9
msgid "Code Samples"
msgstr "Kodeeksempler"

#: src/SUMMARY.md:10
msgid "Running Cargo Locally"
msgstr ""

#: src/SUMMARY.md:15
msgid "Day 1: Morning"
msgstr "Dag 1: Formiddag"

#: src/SUMMARY.md:17 src/SUMMARY.md:43 src/SUMMARY.md:69 src/SUMMARY.md:92
#: src/SUMMARY.md:118 src/SUMMARY.md:137 src/SUMMARY.md:157 src/SUMMARY.md:182
#: src/SUMMARY.md:205 src/SUMMARY.md:244 src/SUMMARY.md:279 src/SUMMARY.md:331
msgid "Welcome"
msgstr "Velkommen"

#: src/SUMMARY.md:18 src/SUMMARY.md:20 src/hello-world.md:1
#: src/hello-world/hello-world.md:1
#, fuzzy
msgid "Hello, World"
msgstr "Hej verden!"

#: src/SUMMARY.md:19 src/hello-world/what-is-rust.md:1
msgid "What is Rust?"
msgstr "Hvad er Rust?"

#: src/SUMMARY.md:21 src/hello-world/benefits.md:1
msgid "Benefits of Rust"
msgstr ""

#: src/SUMMARY.md:22 src/hello-world/playground.md:1
msgid "Playground"
msgstr ""

#: src/SUMMARY.md:23 src/types-and-values.md:1
msgid "Types and Values"
msgstr ""

#: src/SUMMARY.md:24 src/types-and-values/variables.md:1
msgid "Variables"
msgstr "Variabler"

#: src/SUMMARY.md:25 src/types-and-values/values.md:1
msgid "Values"
msgstr ""

#: src/SUMMARY.md:26 src/types-and-values/arithmetic.md:1
msgid "Arithmetic"
msgstr ""

#: src/SUMMARY.md:27 src/types-and-values/strings.md:1
msgid "Strings"
msgstr ""

#: src/SUMMARY.md:28 src/types-and-values/inference.md:1
msgid "Type Inference"
msgstr "Typeudledning"

#: src/SUMMARY.md:29 src/types-and-values/exercise.md:1
msgid "Exercise: Fibonacci"
msgstr ""

#: src/SUMMARY.md:30 src/SUMMARY.md:39 src/SUMMARY.md:50 src/SUMMARY.md:55
#: src/SUMMARY.md:63 src/SUMMARY.md:74 src/SUMMARY.md:81 src/SUMMARY.md:88
#: src/SUMMARY.md:102 src/SUMMARY.md:112 src/SUMMARY.md:128 src/SUMMARY.md:133
#: src/SUMMARY.md:143 src/SUMMARY.md:151 src/SUMMARY.md:163 src/SUMMARY.md:170
#: src/SUMMARY.md:178 src/SUMMARY.md:190 src/SUMMARY.md:199
#: src/types-and-values/solution.md:1 src/control-flow-basics/solution.md:1
#: src/tuples-and-arrays/solution.md:1 src/references/solution.md:1
#: src/user-defined-types/solution.md:1 src/pattern-matching/solution.md:1
#: src/methods-and-traits/solution.md:1 src/generics/solution.md:1
#: src/std-types/solution.md:1 src/std-traits/solution.md:1
#: src/memory-management/solution.md:1 src/smart-pointers/solution.md:1
#: src/borrowing/solution.md:1 src/slices-and-lifetimes/solution.md:1
#: src/iterators/solution.md:1 src/modules/solution.md:1
#: src/testing/solution.md:1 src/error-handling/solution.md:1
#: src/unsafe-rust/solution.md:1
#, fuzzy
msgid "Solution"
msgstr "L√∏sninger"

#: src/SUMMARY.md:31 src/control-flow-basics.md:1
#, fuzzy
msgid "Control Flow Basics"
msgstr "Forgreninger"

#: src/SUMMARY.md:32 src/control-flow-basics/conditionals.md:1
msgid "Conditionals"
msgstr ""

#: src/SUMMARY.md:33 src/control-flow-basics/loops.md:1
#, fuzzy
msgid "Loops"
msgstr "`for`\\-l√∏kker"

#: src/SUMMARY.md:34 src/control-flow-basics/break-continue.md:1
msgid "`break` and `continue`"
msgstr ""

#: src/SUMMARY.md:35 src/control-flow-basics/blocks-and-scopes.md:1
msgid "Blocks and Scopes"
msgstr ""

#: src/SUMMARY.md:36 src/control-flow-basics/functions.md:1
msgid "Functions"
msgstr "Funktioner"

#: src/SUMMARY.md:37 src/control-flow-basics/macros.md:1
msgid "Macros"
msgstr ""

#: src/SUMMARY.md:38
msgid "Exercise: Collatz conjecture"
msgstr ""

#: src/SUMMARY.md:41
msgid "Day 1: Afternoon"
msgstr "Dag 1: Eftermiddag"

#: src/SUMMARY.md:44 src/SUMMARY.md:45 src/tuples-and-arrays.md:1
#: src/tuples-and-arrays/tuples-and-arrays.md:1
msgid "Tuples and Arrays"
msgstr ""

#: src/SUMMARY.md:46 src/tuples-and-arrays/iteration.md:1
msgid "Array Iteration"
msgstr ""

#: src/SUMMARY.md:47 src/SUMMARY.md:70 src/tuples-and-arrays/match.md:1
#: src/pattern-matching.md:1
msgid "Pattern Matching"
msgstr "M√∏nstergenkendelse"

#: src/SUMMARY.md:48 src/SUMMARY.md:71 src/tuples-and-arrays/destructuring.md:1
#: src/pattern-matching/destructuring.md:1
#, fuzzy
msgid "Destructuring"
msgstr "Dekonstruktion af enumerationer"

#: src/SUMMARY.md:49 src/tuples-and-arrays/exercise.md:1
msgid "Exercise: Nested Arrays"
msgstr ""

#: src/SUMMARY.md:51 src/references.md:1
msgid "References"
msgstr "Referencer"

#: src/SUMMARY.md:52 src/references/shared.md:1
#, fuzzy
msgid "Shared References"
msgstr "Referencer"

#: src/SUMMARY.md:53 src/references/exclusive.md:1
#, fuzzy
msgid "Exclusive References"
msgstr "H√¶ngende referencer"

#: src/SUMMARY.md:54 src/references/exercise.md:1
msgid "Exercise: Geometry"
msgstr ""

#: src/SUMMARY.md:56 src/user-defined-types.md:1
msgid "User-Defined Types"
msgstr ""

#: src/SUMMARY.md:57 src/user-defined-types/named-structs.md:1
#, fuzzy
msgid "Named Structs"
msgstr "Strukturer"

#: src/SUMMARY.md:58 src/user-defined-types/tuple-structs.md:4
msgid "Tuple Structs"
msgstr "Tuple-strukturer"

#: src/SUMMARY.md:59 src/user-defined-types/enums.md:1
#: src/pattern-matching/destructuring.md:23
#: src/pattern-matching/destructuring.md:66
msgid "Enums"
msgstr "Enumerationer"

#: src/SUMMARY.md:60 src/user-defined-types/static-and-const.md:1
#, fuzzy
msgid "Static and Const"
msgstr "static & const"

#: src/SUMMARY.md:61 src/user-defined-types/aliases.md:1
msgid "Type Aliases"
msgstr ""

#: src/SUMMARY.md:62 src/user-defined-types/exercise.md:1
msgid "Exercise: Elevator Events"
msgstr ""

#: src/SUMMARY.md:67
msgid "Day 2: Morning"
msgstr "Dag 2: Formiddag"

#: src/SUMMARY.md:72 src/pattern-matching/let-control-flow.md:1
#, fuzzy
msgid "Let Control Flow"
msgstr "Forgreninger"

#: src/SUMMARY.md:73 src/pattern-matching/exercise.md:1
msgid "Exercise: Expression Evaluation"
msgstr ""

#: src/SUMMARY.md:75 src/methods-and-traits.md:1
#, fuzzy
msgid "Methods and Traits"
msgstr "Asynkrone egenskaber (eng. Traits)"

#: src/SUMMARY.md:76 src/methods-and-traits/methods.md:1
msgid "Methods"
msgstr "Metoder"

#: src/SUMMARY.md:77 src/methods-and-traits/traits.md:1
msgid "Traits"
msgstr ""

#: src/SUMMARY.md:78 src/methods-and-traits/deriving.md:1
msgid "Deriving"
msgstr ""

#: src/SUMMARY.md:79 src/methods-and-traits/trait-objects.md:1
msgid "Trait Objects"
msgstr ""

#: src/SUMMARY.md:80 src/methods-and-traits/exercise.md:1
msgid "Exercise: GUI Library"
msgstr ""

#: src/SUMMARY.md:82 src/generics.md:1
msgid "Generics"
msgstr ""

#: src/SUMMARY.md:83 src/generics/generic-functions.md:1
#, fuzzy
msgid "Generic Functions"
msgstr "Funktioner"

#: src/SUMMARY.md:84
msgid "Generic Data types"
msgstr ""

#: src/SUMMARY.md:85 src/generics/trait-bounds.md:1
msgid "Trait Bounds"
msgstr ""

#: src/SUMMARY.md:86
#, fuzzy
msgid "Impl Trait"
msgstr "`impl Trait`"

#: src/SUMMARY.md:87 src/generics/exercise.md:1
msgid "Exercise: Generic `min`"
msgstr ""

#: src/SUMMARY.md:90
msgid "Day 2: Afternoon"
msgstr "Dag 2: Eftermiddag"

#: src/SUMMARY.md:93 src/std-types.md:1
msgid "Standard Library Types"
msgstr ""

#: src/SUMMARY.md:94 src/std-types/std.md:1
msgid "Standard Library"
msgstr ""

#: src/SUMMARY.md:95 src/std-types/docs.md:1
msgid "Language Docs"
msgstr ""

#: src/SUMMARY.md:96 src/std-types/option.md:1
#, fuzzy
msgid "Option"
msgstr "Undtagelser"

#: src/SUMMARY.md:97 src/std-types/result.md:1
msgid "Result"
msgstr ""

#: src/SUMMARY.md:98 src/std-types/string.md:1
msgid "String"
msgstr ""

#: src/SUMMARY.md:99
msgid "Vec"
msgstr ""

#: src/SUMMARY.md:100
msgid "HashMap"
msgstr ""

#: src/SUMMARY.md:101 src/std-types/exercise.md:1
#, fuzzy
msgid "Exercise: Counter"
msgstr "√òvelser"

#: src/SUMMARY.md:103 src/std-traits.md:1
msgid "Standard Library Traits"
msgstr ""

#: src/SUMMARY.md:104 src/std-traits/comparisons.md:1 src/async.md:17
msgid "Comparisons"
msgstr "Sammenligninger"

#: src/SUMMARY.md:105 src/std-traits/operators.md:1
#, fuzzy
msgid "Operators"
msgstr "Iteratorer"

#: src/SUMMARY.md:106
msgid "From and Into"
msgstr ""

#: src/SUMMARY.md:107 src/std-traits/casting.md:1
msgid "Casting"
msgstr ""

#: src/SUMMARY.md:108
msgid "Read and Write"
msgstr ""

#: src/SUMMARY.md:109
msgid "`Default`, struct update syntax"
msgstr ""

#: src/SUMMARY.md:110 src/std-traits/closures.md:1
msgid "Closures"
msgstr ""

#: src/SUMMARY.md:111 src/std-traits/exercise.md:1
#, fuzzy
msgid "Exercise: ROT13"
msgstr "√òvelser"

#: src/SUMMARY.md:116
msgid "Day 3: Morning"
msgstr ""

#: src/SUMMARY.md:119 src/memory-management.md:1
msgid "Memory Management"
msgstr "H√•ndtering af hukommelse"

#: src/SUMMARY.md:120 src/memory-management/review.md:1
msgid "Review of Program Memory"
msgstr ""

#: src/SUMMARY.md:121 src/memory-management/approaches.md:1
#, fuzzy
msgid "Approaches to Memory Management"
msgstr "Hukommelsesh√•ndtering i Rust"

#: src/SUMMARY.md:122 src/memory-management/ownership.md:1
msgid "Ownership"
msgstr "Ejerskab"

#: src/SUMMARY.md:123
#, fuzzy
msgid "Move semantics"
msgstr "Overf√∏rselssemantik"

#: src/SUMMARY.md:124 src/memory-management/clone.md:1
msgid "Clone"
msgstr ""

#: src/SUMMARY.md:125 src/memory-management/copy-types.md:4
#, fuzzy
msgid "Copy Types"
msgstr "Sammensatte typer"

#: src/SUMMARY.md:126
msgid "Drop"
msgstr ""

#: src/SUMMARY.md:127 src/memory-management/exercise.md:1
msgid "Exercise: Builder Type"
msgstr ""

#: src/SUMMARY.md:129 src/smart-pointers.md:1
msgid "Smart Pointers"
msgstr ""

#: src/SUMMARY.md:130
msgid "\\[Box"
msgstr ""

#: src/SUMMARY.md:130
msgid "\\](smart-pointers/box.md)"
msgstr ""

#: src/SUMMARY.md:131
msgid "Rc"
msgstr ""

#: src/SUMMARY.md:132 src/smart-pointers/exercise.md:1
msgid "Exercise: Binary Tree"
msgstr ""

#: src/SUMMARY.md:135
msgid "Day 3: Afternoon"
msgstr ""

#: src/SUMMARY.md:138 src/borrowing.md:1
msgid "Borrowing"
msgstr "L√•n af variabler"

#: src/SUMMARY.md:139 src/borrowing/shared.md:1
#, fuzzy
msgid "Borrowing a Value"
msgstr "L√•n af variabler"

#: src/SUMMARY.md:140 src/borrowing/borrowck.md:1
#, fuzzy
msgid "Borrow Checking"
msgstr "L√•n af variabler"

#: src/SUMMARY.md:141 src/borrowing/interior-mutability.md:4
msgid "Interior Mutability"
msgstr ""

#: src/SUMMARY.md:142 src/borrowing/exercise.md:1
#, fuzzy
msgid "Exercise: Health Statistics"
msgstr "([tilbage til √∏velsen](health-statistics.md))"

#: src/SUMMARY.md:144 src/slices-and-lifetimes.md:1
#, fuzzy
msgid "Slices and Lifetimes"
msgstr "Livstider"

#: src/SUMMARY.md:145
#, fuzzy
msgid "Slices: `&[T]`"
msgstr "Arraysegmenter"

#: src/SUMMARY.md:146 src/slices-and-lifetimes/str.md:4
#, fuzzy
msgid "String References"
msgstr "H√¶ngende referencer"

#: src/SUMMARY.md:147
#, fuzzy
msgid "Lifetime Annotations"
msgstr "Livstider i funktionskald"

#: src/SUMMARY.md:148
#, fuzzy
msgid "Lifetime Elision"
msgstr "Livstider"

#: src/SUMMARY.md:149
#, fuzzy
msgid "Struct Lifetimes"
msgstr "Livstider"

#: src/SUMMARY.md:150 src/slices-and-lifetimes/exercise.md:1
msgid "Exercise: Protobuf Parsing"
msgstr ""

#: src/SUMMARY.md:155
#, fuzzy
msgid "Day 4: Morning"
msgstr "Dag 1: Formiddag"

#: src/SUMMARY.md:158 src/SUMMARY.md:159 src/iterators.md:1
#: src/iterators/iterators.md:4
msgid "Iterators"
msgstr "Iteratorer"

#: src/SUMMARY.md:160
#, fuzzy
msgid "IntoIterator"
msgstr "`IntoIterator`"

#: src/SUMMARY.md:161 src/iterators/fromiterator.md:1
msgid "FromIterator"
msgstr ""

#: src/SUMMARY.md:162 src/iterators/exercise.md:1
msgid "Exercise: Iterator Method Chaining"
msgstr ""

#: src/SUMMARY.md:164 src/SUMMARY.md:165 src/modules.md:1
#: src/modules/modules.md:1
msgid "Modules"
msgstr ""

#: src/SUMMARY.md:166 src/modules/filesystem.md:1
msgid "Filesystem Hierarchy"
msgstr ""

#: src/SUMMARY.md:167 src/modules/visibility.md:1
msgid "Visibility"
msgstr ""

#: src/SUMMARY.md:168 src/modules/paths.md:1
msgid "use, super, self"
msgstr ""

#: src/SUMMARY.md:169 src/modules/exercise.md:1
msgid "Exercise: Modules for the GUI Library"
msgstr ""

#: src/SUMMARY.md:171 src/testing.md:1
msgid "Testing"
msgstr ""

#: src/SUMMARY.md:172
msgid "Test Modules"
msgstr ""

#: src/SUMMARY.md:173 src/testing/other.md:1
#, fuzzy
msgid "Other Types of Tests"
msgstr "Andre projekter"

#: src/SUMMARY.md:174 src/SUMMARY.md:314 src/testing/useful-crates.md:1
msgid "Useful Crates"
msgstr ""

#: src/SUMMARY.md:175 src/testing/googletest.md:1
msgid "GoogleTest"
msgstr ""

#: src/SUMMARY.md:176
msgid "Compiler lints and Clippy"
msgstr ""

#: src/SUMMARY.md:177 src/testing/exercise.md:1
#, fuzzy
msgid "Exercise: Luhn Algorithm"
msgstr "Luhn-algorithmen"

#: src/SUMMARY.md:180
#, fuzzy
msgid "Day 4: Afternoon"
msgstr "Dag 1: Eftermiddag"

#: src/SUMMARY.md:183 src/error-handling.md:1
msgid "Error Handling"
msgstr ""

#: src/SUMMARY.md:184 src/error-handling/panics.md:1
msgid "Panics"
msgstr ""

#: src/SUMMARY.md:185
#, fuzzy
msgid "Try operator"
msgstr "Egenskab"

#: src/SUMMARY.md:186 src/error-handling/try-conversions.md:1
#, fuzzy
msgid "Try Conversions"
msgstr "Implicitte konverteringer"

#: src/SUMMARY.md:187
msgid "Error Trait"
msgstr ""

#: src/SUMMARY.md:188
msgid "thiserror and anyhow"
msgstr ""

#: src/SUMMARY.md:189 src/error-handling/exercise.md:1
msgid "Exercise: Rewriting with Result"
msgstr ""

#: src/SUMMARY.md:191 src/unsafe-rust.md:1 src/unsafe-rust/unsafe.md:1
msgid "Unsafe Rust"
msgstr ""

#: src/SUMMARY.md:192
msgid "Unsafe"
msgstr ""

#: src/SUMMARY.md:193 src/unsafe-rust/dereferencing.md:1
msgid "Dereferencing Raw Pointers"
msgstr ""

#: src/SUMMARY.md:194 src/unsafe-rust/mutable-static.md:1
msgid "Mutable Static Variables"
msgstr ""

#: src/SUMMARY.md:195 src/unsafe-rust/unions.md:1
msgid "Unions"
msgstr ""

#: src/SUMMARY.md:196 src/unsafe-rust/unsafe-functions.md:1
#, fuzzy
msgid "Unsafe Functions"
msgstr "Funktioner"

#: src/SUMMARY.md:197
#, fuzzy
msgid "Unsafe Traits"
msgstr "Asynkrone egenskaber (eng. Traits)"

#: src/SUMMARY.md:198
msgid "Exercise: FFI Wrapper"
msgstr ""

#: src/SUMMARY.md:201 src/SUMMARY.md:320 src/bare-metal/android.md:1
msgid "Android"
msgstr "Android"

#: src/SUMMARY.md:206 src/SUMMARY.md:245 src/android/setup.md:1
#: src/chromium/setup.md:1
msgid "Setup"
msgstr ""

#: src/SUMMARY.md:207 src/SUMMARY.md:248 src/android/build-rules.md:1
msgid "Build Rules"
msgstr ""

#: src/SUMMARY.md:208
msgid "Binary"
msgstr ""

#: src/SUMMARY.md:209
msgid "Library"
msgstr ""

#: src/SUMMARY.md:210 src/android/aidl.md:1
msgid "AIDL"
msgstr ""

#: src/SUMMARY.md:211
msgid "Interface"
msgstr ""

#: src/SUMMARY.md:212
msgid "Implementation"
msgstr ""

#: src/SUMMARY.md:213
msgid "Server"
msgstr ""

#: src/SUMMARY.md:214 src/android/aidl/deploy.md:1
msgid "Deploy"
msgstr ""

#: src/SUMMARY.md:215
msgid "Client"
msgstr ""

#: src/SUMMARY.md:216 src/android/aidl/changing.md:1
msgid "Changing API"
msgstr ""

#: src/SUMMARY.md:217 src/SUMMARY.md:310 src/android/logging.md:1
#: src/bare-metal/aps/logging.md:1
msgid "Logging"
msgstr ""

#: src/SUMMARY.md:218 src/android/interoperability.md:1
msgid "Interoperability"
msgstr ""

#: src/SUMMARY.md:219
msgid "With C"
msgstr ""

#: src/SUMMARY.md:220
msgid "Calling C with Bindgen"
msgstr ""

#: src/SUMMARY.md:221
msgid "Calling Rust from C"
msgstr ""

#: src/SUMMARY.md:222
msgid "With C++)"
msgstr ""

#: src/SUMMARY.md:223 src/android/interoperability/cpp/bridge.md:1
msgid "The Bridge Module"
msgstr ""

#: src/SUMMARY.md:224
#, fuzzy
msgid "Rust Bridge"
msgstr "Rust i Android"

#: src/SUMMARY.md:225 src/android/interoperability/cpp/generated-cpp.md:1
msgid "Generated C++"
msgstr ""

#: src/SUMMARY.md:226
msgid "C++ Bridge"
msgstr ""

#: src/SUMMARY.md:227 src/android/interoperability/cpp/shared-types.md:1
#, fuzzy
msgid "Shared Types"
msgstr "Skalartyper"

#: src/SUMMARY.md:228 src/android/interoperability/cpp/shared-enums.md:1
msgid "Shared Enums"
msgstr ""

#: src/SUMMARY.md:229 src/android/interoperability/cpp/rust-result.md:1
msgid "Rust Error Handling"
msgstr ""

#: src/SUMMARY.md:230 src/android/interoperability/cpp/cpp-exception.md:1
msgid "C++ Error Handling"
msgstr ""

#: src/SUMMARY.md:231 src/android/interoperability/cpp/type-mapping.md:1
msgid "Additional Types"
msgstr ""

#: src/SUMMARY.md:232
msgid "Building for Android: C++"
msgstr ""

#: src/SUMMARY.md:233
msgid "Building for Android: Genrules"
msgstr ""

#: src/SUMMARY.md:234
msgid "Building for Android: Rust"
msgstr ""

#: src/SUMMARY.md:235
msgid "With Java"
msgstr ""

#: src/SUMMARY.md:236 src/SUMMARY.md:293 src/SUMMARY.md:322 src/SUMMARY.md:345
#: src/SUMMARY.md:367 src/exercises/android/morning.md:1
#: src/exercises/bare-metal/morning.md:1
#: src/exercises/bare-metal/afternoon.md:1
#: src/exercises/concurrency/morning.md:1
#: src/exercises/concurrency/afternoon.md:1
msgid "Exercises"
msgstr "√òvelser"

#: src/SUMMARY.md:240
msgid "Chromium"
msgstr ""

#: src/SUMMARY.md:246 src/chromium/cargo.md:1
msgid "Using cargo for experimental tools"
msgstr ""

#: src/SUMMARY.md:247
msgid "Policy"
msgstr ""

#: src/SUMMARY.md:249
msgid "Unsafe code"
msgstr ""

#: src/SUMMARY.md:250 src/chromium/build-rules/depending.md:1
msgid "Depending on Rust code from Chromium C++"
msgstr ""

#: src/SUMMARY.md:251 src/chromium/build-rules/vscode.md:1
msgid "Visual Studio code"
msgstr ""

#: src/SUMMARY.md:252 src/SUMMARY.md:258 src/SUMMARY.md:271
#: src/exercises/chromium/third-party.md:1
#, fuzzy
msgid "Exercise"
msgstr "√òvelser"

#: src/SUMMARY.md:253 src/chromium/interoperability-with-cpp.md:1
msgid "Interoperability with C++"
msgstr ""

#: src/SUMMARY.md:254
#: src/chromium/interoperability-with-cpp/example-bindings.md:1
#, fuzzy
msgid "Example bindings"
msgstr "Eksempler"

#: src/SUMMARY.md:255
#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:1
msgid "Limitations of cxx"
msgstr ""

#: src/SUMMARY.md:256
#: src/chromium/interoperability-with-cpp/error-handling.md:1
msgid "cxx error handling"
msgstr ""

#: src/SUMMARY.md:257
#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:1
msgid "Using cxx in Chromium"
msgstr ""

#: src/SUMMARY.md:259 src/chromium/adding-third-party-crates.md:1
msgid "Adding third party crates"
msgstr ""

#: src/SUMMARY.md:260
msgid "Configuring Cargo.toml"
msgstr ""

#: src/SUMMARY.md:261
msgid "Configuring gnrt_config.toml"
msgstr ""

#: src/SUMMARY.md:262
#: src/chromium/adding-third-party-crates/downloading-crates.md:1
msgid "Downloading crates"
msgstr ""

#: src/SUMMARY.md:263
msgid "Generating gn build rules"
msgstr ""

#: src/SUMMARY.md:264
#: src/chromium/adding-third-party-crates/resolving-problems.md:1
msgid "Resolving problems"
msgstr ""

#: src/SUMMARY.md:265
#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:1
msgid "Build scripts which generate code"
msgstr ""

#: src/SUMMARY.md:266
#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:1
msgid "Build scripts which build C++ or take arbitrary actions"
msgstr ""

#: src/SUMMARY.md:267
#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:1
msgid "Depending on a crate"
msgstr ""

#: src/SUMMARY.md:268
msgid "Reviews and audits"
msgstr ""

#: src/SUMMARY.md:269
msgid "Checking into Chromium source code"
msgstr ""

#: src/SUMMARY.md:270
#: src/chromium/adding-third-party-crates/keeping-up-to-date.md:1
msgid "Keeping crates up to date"
msgstr ""

#: src/SUMMARY.md:272
msgid "Bringing it together - Exercise"
msgstr ""

#: src/SUMMARY.md:275
msgid "Bare Metal: Morning"
msgstr "R√• jern: Formiddag"

#: src/SUMMARY.md:280
msgid "no_std"
msgstr "no_std"

#: src/SUMMARY.md:281
msgid "A Minimal Example"
msgstr "Et minimalt eksempel"

#: src/SUMMARY.md:282
msgid "alloc"
msgstr "alloc"

#: src/SUMMARY.md:283 src/bare-metal/microcontrollers.md:1
msgid "Microcontrollers"
msgstr ""

#: src/SUMMARY.md:284 src/bare-metal/microcontrollers/mmio.md:1
msgid "Raw MMIO"
msgstr "R√• MMIO"

#: src/SUMMARY.md:285
msgid "PACs"
msgstr "PAC'er"

#: src/SUMMARY.md:286
msgid "HAL Crates"
msgstr ""

#: src/SUMMARY.md:287
msgid "Board Support Crates"
msgstr ""

#: src/SUMMARY.md:288
msgid "The Type State Pattern"
msgstr ""

#: src/SUMMARY.md:289
msgid "embedded-hal"
msgstr "embedded-hal"

#: src/SUMMARY.md:290
msgid "probe-rs, cargo-embed"
msgstr "probe-rs, cargo-embed"

#: src/SUMMARY.md:291 src/bare-metal/microcontrollers/debugging.md:1
msgid "Debugging"
msgstr "Fejlfinding"

#: src/SUMMARY.md:292 src/SUMMARY.md:313
msgid "Other Projects"
msgstr "Andre projekter"

#: src/SUMMARY.md:294 src/exercises/bare-metal/compass.md:1
#: src/exercises/bare-metal/solutions-morning.md:3
msgid "Compass"
msgstr "Kompas"

#: src/SUMMARY.md:295 src/SUMMARY.md:324 src/SUMMARY.md:348 src/SUMMARY.md:370
msgid "Solutions"
msgstr "L√∏sninger"

#: src/SUMMARY.md:297
msgid "Bare Metal: Afternoon"
msgstr "R√• jern: Eftermiddag"

#: src/SUMMARY.md:299
msgid "Application Processors"
msgstr ""

#: src/SUMMARY.md:300 src/bare-metal/aps/entry-point.md:1
msgid "Getting Ready to Rust"
msgstr ""

#: src/SUMMARY.md:301
msgid "Inline Assembly"
msgstr ""

#: src/SUMMARY.md:302
msgid "MMIO"
msgstr "MMIO"

#: src/SUMMARY.md:303
msgid "Let's Write a UART Driver"
msgstr ""

#: src/SUMMARY.md:304
msgid "More Traits"
msgstr ""

#: src/SUMMARY.md:305
msgid "A Better UART Driver"
msgstr ""

#: src/SUMMARY.md:306 src/bare-metal/aps/better-uart/bitflags.md:1
msgid "Bitflags"
msgstr "Bitflag"

#: src/SUMMARY.md:307
msgid "Multiple Registers"
msgstr ""

#: src/SUMMARY.md:308 src/bare-metal/aps/better-uart/driver.md:1
msgid "Driver"
msgstr "Driver"

#: src/SUMMARY.md:309 src/SUMMARY.md:311
msgid "Using It"
msgstr "Anvendelse"

#: src/SUMMARY.md:312 src/bare-metal/aps/exceptions.md:1
msgid "Exceptions"
msgstr "Undtagelser"

#: src/SUMMARY.md:315
msgid "zerocopy"
msgstr "zerocopy"

#: src/SUMMARY.md:316
msgid "aarch64-paging"
msgstr "aarch64-paging"

#: src/SUMMARY.md:317
msgid "buddy_system_allocator"
msgstr "buddy_system_allocator"

#: src/SUMMARY.md:318
msgid "tinyvec"
msgstr "tinyvec"

#: src/SUMMARY.md:319
msgid "spin"
msgstr "spin"

#: src/SUMMARY.md:321 src/bare-metal/android/vmbase.md:1
msgid "vmbase"
msgstr "vmbase"

#: src/SUMMARY.md:323
msgid "RTC Driver"
msgstr ""

#: src/SUMMARY.md:327
msgid "Concurrency: Morning"
msgstr ""

#: src/SUMMARY.md:332 src/concurrency/threads.md:1
msgid "Threads"
msgstr "Tr√•de"

#: src/SUMMARY.md:333 src/concurrency/scoped-threads.md:1
msgid "Scoped Threads"
msgstr "Tr√•de med virkefelt"

#: src/SUMMARY.md:334 src/concurrency/channels.md:1
msgid "Channels"
msgstr "Kanaler"

#: src/SUMMARY.md:335 src/concurrency/channels/unbounded.md:1
msgid "Unbounded Channels"
msgstr "Ubegr√¶nsede kanaler"

#: src/SUMMARY.md:336 src/concurrency/channels/bounded.md:1
msgid "Bounded Channels"
msgstr "Begr√¶nsede kanaler"

#: src/SUMMARY.md:337
msgid "Send and Sync"
msgstr "Send og Sync"

#: src/SUMMARY.md:338
msgid "Send"
msgstr "Send"

#: src/SUMMARY.md:339
msgid "Sync"
msgstr "Sync"

#: src/SUMMARY.md:340 src/concurrency/send-sync/examples.md:1
msgid "Examples"
msgstr "Eksempler"

#: src/SUMMARY.md:341 src/concurrency/shared_state.md:1
msgid "Shared State"
msgstr "Delt tilstand"

#: src/SUMMARY.md:342
msgid "Arc"
msgstr "Arc"

#: src/SUMMARY.md:343
msgid "Mutex"
msgstr "Mutex"

#: src/SUMMARY.md:344 src/memory-management/review.md:16
#: src/error-handling/try-conversions.md:22
#: src/concurrency/shared_state/example.md:1
msgid "Example"
msgstr "Eksempel"

#: src/SUMMARY.md:346 src/SUMMARY.md:368
#: src/exercises/concurrency/dining-philosophers.md:1
#: src/exercises/concurrency/solutions-morning.md:3
msgid "Dining Philosophers"
msgstr "Filosoffer omkring spisebordet"

#: src/SUMMARY.md:347 src/exercises/concurrency/link-checker.md:1
msgid "Multi-threaded Link Checker"
msgstr "Flertr√•det linktjekker"

#: src/SUMMARY.md:350
msgid "Concurrency: Afternoon"
msgstr "Concurrency: Eftermiddag"

#: src/SUMMARY.md:352
msgid "Async Basics"
msgstr "Grundl√¶ggende Async"

#: src/SUMMARY.md:353
msgid "async/await"
msgstr "async/await"

#: src/SUMMARY.md:354 src/async/futures.md:1
msgid "Futures"
msgstr "Fremtidige resultater (eng. Futures)"

#: src/SUMMARY.md:355 src/async/runtimes.md:1
msgid "Runtimes"
msgstr ""

#: src/SUMMARY.md:356 src/async/runtimes/tokio.md:1
msgid "Tokio"
msgstr "Tokio"

#: src/SUMMARY.md:357 src/exercises/concurrency/link-checker.md:126
#: src/async/tasks.md:1 src/exercises/concurrency/chat-app.md:143
msgid "Tasks"
msgstr "Opgaver (eng. Tasks)"

#: src/SUMMARY.md:358 src/async/channels.md:1
msgid "Async Channels"
msgstr "Asynkrone kanaler"

#: src/SUMMARY.md:359
msgid "Control Flow"
msgstr "Forgreninger"

#: src/SUMMARY.md:360 src/async/control-flow/join.md:1
msgid "Join"
msgstr "Join"

#: src/SUMMARY.md:361 src/async/control-flow/select.md:1
msgid "Select"
msgstr "Select"

#: src/SUMMARY.md:362
msgid "Pitfalls"
msgstr "Faldgruber"

#: src/SUMMARY.md:363
msgid "Blocking the Executor"
msgstr ""

#: src/SUMMARY.md:364 src/async/pitfalls/pin.md:1
msgid "Pin"
msgstr "Pin"

#: src/SUMMARY.md:365 src/async/pitfalls/async-traits.md:1
msgid "Async Traits"
msgstr "Asynkrone egenskaber (eng. Traits)"

#: src/SUMMARY.md:366 src/async/pitfalls/cancellation.md:1
msgid "Cancellation"
msgstr "Annulering"

#: src/SUMMARY.md:369 src/exercises/concurrency/chat-app.md:1
#: src/exercises/concurrency/solutions-afternoon.md:95
msgid "Broadcast Chat Application"
msgstr "Broadcast chat-applikation"

#: src/SUMMARY.md:373
msgid "Final Words"
msgstr "Afsluttende bem√¶rkninger"

#: src/SUMMARY.md:377 src/thanks.md:1
msgid "Thanks!"
msgstr "Tak!"

#: src/SUMMARY.md:378 src/glossary.md:1
msgid "Glossary"
msgstr ""

#: src/SUMMARY.md:379
msgid "Other Resources"
msgstr "Andre resourcer"

#: src/SUMMARY.md:380 src/credits.md:1
msgid "Credits"
msgstr "Anerkendelser"

#: src/index.md:3
msgid ""
"[![Build workflow](https://img.shields.io/github/actions/workflow/status/"
"google/comprehensive-rust/build.yml?style=flat-square)](https://github.com/"
"google/comprehensive-rust/actions/workflows/build.yml?query=branch%3Amain) [!"
"[GitHub contributors](https://img.shields.io/github/contributors/google/"
"comprehensive-rust?style=flat-square)](https://github.com/google/"
"comprehensive-rust/graphs/contributors) [![GitHub stars](https://img.shields."
"io/github/stars/google/comprehensive-rust?style=flat-square)](https://github."
"com/google/comprehensive-rust/stargazers)"
msgstr ""
"[![Bygge-arbejdsgang](https://img.shields.io/github/actions/workflow/status/"
"google/comprehensive-rust/build.yml?style=flat-square)](https://github.com/"
"google/comprehensive-rust/actions/workflows/build.yml?query=branch%3Amain) [!"
"[GitHub-bidragsydere](https://img.shields.io/github/contributors/google/"
"comprehensive-rust?style=flat-square)](https://github.com/google/"
"comprehensive-rust/graphs/contributors) [![GitHub-stjerner](https://img."
"shields.io/github/stars/google/comprehensive-rust?style=flat-square)]"
"(https://github.com/google/comprehensive-rust/stargazers)"

#: src/index.md:7
msgid ""
"This is a free Rust course developed by the Android team at Google. The "
"course covers the full spectrum of Rust, from basic syntax to advanced "
"topics like generics and error handling."
msgstr ""
"Dette er et gratis Rust-kursus udviklet af Android-teamet. Kurset d√¶kker "
"hele spektret af Rust, fra grundl√¶ggende syntaks til avancerede emner som "
"generiske typer og fejlh√•ndtering."

#: src/index.md:11
msgid ""
"The latest version of the course can be found at <https://google.github.io/"
"comprehensive-rust/>. If you are reading somewhere else, please check there "
"for updates."
msgstr ""

#: src/index.md:15
msgid ""
"The goal of the course is to teach you Rust. We assume you don't know "
"anything about Rust and hope to:"
msgstr ""
"M√•let med kurset er at l√¶re dig Rust. Vi antager, at du ikke ved noget om "
"Rust og h√•ber at:"

#: src/index.md:18
msgid "Give you a comprehensive understanding of the Rust syntax and language."
msgstr "Give dig en omfattende forst√•else af Rust-syntaksen og sproget."

#: src/index.md:19
msgid "Enable you to modify existing programs and write new programs in Rust."
msgstr ""
"G√∏re det muligt for dig at √¶ndre eksisterende programmer og skrive nye "
"programmer i Rust."

#: src/index.md:20
msgid "Show you common Rust idioms."
msgstr "Vise dig idiomatisk Rust."

#: src/index.md:22
#, fuzzy
msgid "We call the first four course days Rust Fundamentals."
msgstr ""
"Vi kalder de f√∏rste tre kursusdage Grundl√¶ggende Rust (_Rust Fundamentals_)."

#: src/index.md:24
msgid ""
"Building on this, you're invited to dive into one or more specialized topics:"
msgstr ""
"Efterf√∏lgende er du inviteret til at dykke ned i et eller flere "
"specialiserede emner:"

#: src/index.md:26
msgid ""
"[Android](android.md): a half-day course on using Rust for Android platform "
"development (AOSP). This includes interoperability with C, C++, and Java."
msgstr ""
"[Android](android.md): en halv kursusdag om at bruge Rust til "
"platformudvikling i Android (AOSP). Dette inkluderer interoperabilitet med "
"C, C++ og Java."

#: src/index.md:28
#, fuzzy
msgid ""
"[Chromium](chromium.md): a half-day course on using Rust within Chromium "
"based browsers. This includes interoperability with C++ and how to include "
"third-party crates in Chromium."
msgstr ""
"[Android](android.md): en halv kursusdag om at bruge Rust til "
"platformudvikling i Android (AOSP). Dette inkluderer interoperabilitet med "
"C, C++ og Java."

#: src/index.md:31
msgid ""
"[Bare-metal](bare-metal.md): a whole-day class on using Rust for bare-metal "
"(embedded) development. Both microcontrollers and application processors are "
"covered."
msgstr ""
"[R√• jern](bare-metal.md): en fuld kursusdag om at bruge Rust til udvikling "
"p√• det r√• jern og indlejrede (_bare metal and embedded_) systemer. D√¶kker "
"b√•de mikroprocessorer og applikationsprocessorer."

#: src/index.md:34
msgid ""
"[Concurrency](concurrency.md): a whole-day class on concurrency in Rust. We "
"cover both classical concurrency (preemptively scheduling using threads and "
"mutexes) and async/await concurrency (cooperative multitasking using "
"futures)."
msgstr ""
"[Samtidighed](concurrency.md): en hel kursusdag om samtidighed "
"(_concurrency_) i Rust. Vi d√¶kker b√•de klassisk samtidighed (tidsdelt "
"multitasking ved hj√¶lp af tr√•de og mutexes) og async/await samtidighed "
"(kooperativ multitasking ved hj√¶lp af _futures_)."

#: src/index.md:40
msgid "Non-Goals"
msgstr "Ting som ikke d√¶kkes"

#: src/index.md:42
msgid ""
"Rust is a large language and we won't be able to cover all of it in a few "
"days. Some non-goals of this course are:"
msgstr ""
"Rust er et stort sprog og vi vil ikke v√¶re i stand til at d√¶kke det hele p√• "
"et par dage. Nogle ting som vi ikke d√¶kker er:"

#: src/index.md:45
msgid ""
"Learning how to develop macros: please see [Chapter 19.5 in the Rust Book]"
"(https://doc.rust-lang.org/book/ch19-06-macros.html) and [Rust by Example]"
"(https://doc.rust-lang.org/rust-by-example/macros.html) instead."
msgstr ""
"At l√¶re hvordan man udvikler makroer: se venligst [Kapitel 19.5 i Rust-bogen]"
"(https://doc.rust-lang.org/book/ch19-06-macros.html) og [Rust by Example]"
"(https://doc.rust-lang.org/rust-by-example/macros.html) i stedet."

#: src/index.md:49
msgid "Assumptions"
msgstr "Antagelser"

#: src/index.md:51
msgid ""
"The course assumes that you already know how to program. Rust is a "
"statically-typed language and we will sometimes make comparisons with C and "
"C++ to better explain or contrast the Rust approach."
msgstr ""
"Kurset antager at du allerede ved hvordan man programerer. Rust er et "
"statisk typet sprog og vi vil nogle gange sammenligne med C og C++ for bedre "
"at kunne forklare Rust's tilgangsvinkel."

#: src/index.md:55
msgid ""
"If you know how to program in a dynamically-typed language such as Python or "
"JavaScript, then you will be able to follow along just fine too."
msgstr ""
"Hvis du ved hvordan man programmerer i et dynamisk typet sprog s√•som Python "
"eller JavaScript, s√• vil du ogs√• fint kunne f√∏lge med."

#: src/index.md:60
msgid ""
"This is an example of a _speaker note_. We will use these to add additional "
"information to the slides. This could be key points which the instructor "
"should cover as well as answers to typical questions which come up in class."
msgstr ""
"Dette er et eksempel p√• en _note_. Vi vil bruge disse til at tilf√∏je "
"yderligere information til siderne. Dette kan v√¶re n√∏glepunkter som "
"instrukt√∏ren skal d√¶kke s√•vel som svar p√• typiske sp√∏rgsm√•l som bliver "
"stillet i klassen."

#: src/running-the-course.md:3 src/running-the-course/course-structure.md:3
msgid "This page is for the course instructor."
msgstr "Denne side er for kursuslederen."

#: src/running-the-course.md:5
msgid ""
"Here is a bit of background information about how we've been running the "
"course internally at Google."
msgstr ""

#: src/running-the-course.md:8
msgid ""
"We typically run classes from 9:00 am to 4:00 pm, with a 1 hour lunch break "
"in the middle. This leaves 3 hours for the morning class and 3 hours for the "
"afternoon class. Both sessions contain multiple breaks and time for students "
"to work on exercises."
msgstr ""

#: src/running-the-course.md:13
msgid "Before you run the course, you will want to:"
msgstr ""

#: src/running-the-course.md:15
msgid ""
"Make yourself familiar with the course material. We've included speaker "
"notes to help highlight the key points (please help us by contributing more "
"speaker notes!). When presenting, you should make sure to open the speaker "
"notes in a popup (click the link with a little arrow next to \"Speaker "
"Notes\"). This way you have a clean screen to present to the class."
msgstr ""

#: src/running-the-course.md:21
msgid ""
"Decide on the dates. Since the course takes at least three full days, we "
"recommend that you schedule the days over two weeks. Course participants "
"have said that they find it helpful to have a gap in the course since it "
"helps them process all the information we give them."
msgstr ""

#: src/running-the-course.md:26
msgid ""
"Find a room large enough for your in-person participants. We recommend a "
"class size of 15-25 people. That's small enough that people are comfortable "
"asking questions --- it's also small enough that one instructor will have "
"time to answer the questions. Make sure the room has _desks_ for yourself "
"and for the students: you will all need to be able to sit and work with your "
"laptops. In particular, you will be doing a lot of live-coding as an "
"instructor, so a lectern won't be very helpful for you."
msgstr ""

#: src/running-the-course.md:34
msgid ""
"On the day of your course, show up to the room a little early to set things "
"up. We recommend presenting directly using `mdbook serve` running on your "
"laptop (see the [installation instructions](https://github.com/google/"
"comprehensive-rust#building)). This ensures optimal performance with no lag "
"as you change pages. Using your laptop will also allow you to fix typos as "
"you or the course participants spot them."
msgstr ""

#: src/running-the-course.md:40
msgid ""
"Let people solve the exercises by themselves or in small groups. We "
"typically spend 30-45 minutes on exercises in the morning and in the "
"afternoon (including time to review the solutions). Make sure to ask people "
"if they're stuck or if there is anything you can help with. When you see "
"that several people have the same problem, call it out to the class and "
"offer a solution, e.g., by showing people where to find the relevant "
"information in the standard library."
msgstr ""

#: src/running-the-course.md:48
msgid ""
"That is all, good luck running the course! We hope it will be as much fun "
"for you as it has been for us!"
msgstr ""

#: src/running-the-course.md:51
msgid ""
"Please [provide feedback](https://github.com/google/comprehensive-rust/"
"discussions/86) afterwards so that we can keep improving the course. We "
"would love to hear what worked well for you and what can be made better. "
"Your students are also very welcome to [send us feedback](https://github.com/"
"google/comprehensive-rust/discussions/100)!"
msgstr ""

#: src/running-the-course/course-structure.md:5
msgid "Rust Fundamentals"
msgstr ""

#: src/running-the-course/course-structure.md:7
msgid ""
"The first three days make up [Rust Fundaments](../welcome-day-1.md). The "
"days are fast paced and we cover a lot of ground!"
msgstr ""

#: src/running-the-course/course-structure.md:10
#, fuzzy
msgid "Course schedule:"
msgstr "Kursets struktur"

#: src/running-the-course/course-structure.md:11
msgid "Day 1 Morning (3 hours, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md:12
msgid "[Welcome](../welcome-day-1.md) (5 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:13
msgid "[Hello, World](../hello-world.md) (20 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:14
msgid "[Types and Values](../types-and-values.md) (1 hour and 5 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:15
msgid "[Control Flow Basics](../control-flow-basics.md) (1 hour)"
msgstr ""

#: src/running-the-course/course-structure.md:16
msgid "Day 1 Afternoon (2 hours and 55 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md:17
msgid "[Tuples and Arrays](../tuples-and-arrays.md) (1 hour)"
msgstr ""

#: src/running-the-course/course-structure.md:18
msgid "[References](../references.md) (50 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:19
msgid "[User-Defined Types](../user-defined-types.md) (50 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:20
msgid "Day 2 Morning (3 hours and 15 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md:21
msgid "[Welcome](../welcome-day-2.md) (3 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:22
msgid "[Pattern Matching](../pattern-matching.md) (50 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:23
msgid "[Methods and Traits](../methods-and-traits.md) (1 hour and 5 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:24
msgid "[Generics](../generics.md) (45 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:25
msgid "Day 2 Afternoon (3 hours, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md:26
msgid "[Standard Library Types](../std-types.md) (1 hour and 10 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:27
msgid "[Standard Library Traits](../std-traits.md) (1 hour and 40 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:28
msgid "Day 3 Morning (2 hours and 15 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md:29
msgid "[Welcome](../welcome-day-3.md) (3 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:30
msgid "[Memory Management](../memory-management.md) (1 hour and 10 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:31
msgid "[Smart Pointers](../smart-pointers.md) (45 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:32
msgid "Day 3 Afternoon (2 hours and 20 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md:33
msgid "[Borrowing](../borrowing.md) (1 hour)"
msgstr ""

#: src/running-the-course/course-structure.md:34
msgid ""
"[Slices and Lifetimes](../slices-and-lifetimes.md) (1 hour and 10 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:35
msgid "Day 4 Morning (3 hours and 5 minutes, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md:36
msgid "[Welcome](../welcome-day-4.md) (3 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:37
msgid "[Iterators](../iterators.md) (45 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:38
msgid "[Modules](../modules.md) (45 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:39
msgid "[Testing](../testing.md) (1 hour)"
msgstr ""

#: src/running-the-course/course-structure.md:40
msgid "Day 4 Afternoon (2 hours, including breaks)"
msgstr ""

#: src/running-the-course/course-structure.md:41
msgid "[Error Handling](../error-handling.md) (45 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:42
msgid "[Unsafe Rust](../unsafe-rust.md) (1 hour and 5 minutes)"
msgstr ""

#: src/running-the-course/course-structure.md:45
msgid "Deep Dives"
msgstr ""

#: src/running-the-course/course-structure.md:47
msgid ""
"In addition to the 3-day class on Rust Fundamentals, we cover some more "
"specialized topics:"
msgstr ""
"Ud over kurset p√• tre dage om Grundl√¶ggende Rust, d√¶kker vi mere "
"specialiserede emner:"

#: src/running-the-course/course-structure.md:50
msgid "Rust in Android"
msgstr "Rust i Android"

#: src/running-the-course/course-structure.md:52
msgid ""
"The [Rust in Android](../android.md) deep dive is a half-day course on using "
"Rust for Android platform development. This includes interoperability with "
"C, C++, and Java."
msgstr ""

#: src/running-the-course/course-structure.md:56
msgid ""
"You will need an [AOSP checkout](https://source.android.com/docs/setup/"
"download/downloading). Make a checkout of the [course repository](https://"
"github.com/google/comprehensive-rust) on the same machine and move the `src/"
"android/` directory into the root of your AOSP checkout. This will ensure "
"that the Android build system sees the `Android.bp` files in `src/android/`."
msgstr ""

#: src/running-the-course/course-structure.md:61
msgid ""
"Ensure that `adb sync` works with your emulator or real device and pre-build "
"all Android examples using `src/android/build_all.sh`. Read the script to "
"see the commands it runs and make sure they work when you run them by hand."
msgstr ""

#: src/running-the-course/course-structure.md:68
#, fuzzy
msgid "Rust in Chromium"
msgstr "Rust i Android"

#: src/running-the-course/course-structure.md:70
msgid ""
"The [Rust in Chromium](../chromium.md) deep dive is a half-day course on "
"using Rust as part of the Chromium browser. It includes using Rust in "
"Chromium's `gn` build system, bringing in third-party libraries (\"crates\") "
"and C++ interoperability."
msgstr ""

#: src/running-the-course/course-structure.md:75
msgid ""
"You will need to be able to build Chromium --- a debug, component build is "
"[recommended](../chromium/setup.md) for speed but any build will work. "
"Ensure that you can run the Chromium browser that you've built."
msgstr ""

#: src/running-the-course/course-structure.md:79
msgid "Bare-Metal Rust"
msgstr "Bare-Metal Rust"

#: src/running-the-course/course-structure.md:81
msgid ""
"The [Bare-Metal Rust](../bare-metal.md) deep dive is a full day class on "
"using Rust for bare-metal (embedded) development. Both microcontrollers and "
"application processors are covered."
msgstr ""

#: src/running-the-course/course-structure.md:85
msgid ""
"For the microcontroller part, you will need to buy the [BBC micro:bit]"
"(https://microbit.org/) v2 development board ahead of time. Everybody will "
"need to install a number of packages as described on the [welcome page](../"
"bare-metal.md)."
msgstr ""

#: src/running-the-course/course-structure.md:90
msgid "Concurrency in Rust"
msgstr "Samtidighed i Rust"

#: src/running-the-course/course-structure.md:92
msgid ""
"The [Concurrency in Rust](../concurrency.md) deep dive is a full day class "
"on classical as well as `async`/`await` concurrency."
msgstr ""

#: src/running-the-course/course-structure.md:95
msgid ""
"You will need a fresh crate set up and the dependencies downloaded and ready "
"to go. You can then copy/paste the examples into `src/main.rs` to experiment "
"with them:"
msgstr ""

#: src/running-the-course/course-structure.md:106
msgid "Format"
msgstr ""

#: src/running-the-course/course-structure.md:108
msgid ""
"The course is meant to be very interactive and we recommend letting the "
"questions drive the exploration of Rust!"
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md:3
msgid "There are several useful keyboard shortcuts in mdBook:"
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md:5
msgid "Arrow-Left"
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md:5
msgid ": Navigate to the previous page."
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md:6
msgid "Arrow-Right"
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md:6
msgid ": Navigate to the next page."
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md:7 src/cargo/code-samples.md:19
msgid "Ctrl + Enter"
msgstr "Ctrl + Enter"

#: src/running-the-course/keyboard-shortcuts.md:7
msgid ": Execute the code sample that has focus."
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md:8
msgid "s"
msgstr ""

#: src/running-the-course/keyboard-shortcuts.md:8
msgid ": Activate the search bar."
msgstr ""

#: src/running-the-course/translations.md:3
msgid ""
"The course has been translated into other languages by a set of wonderful "
"volunteers:"
msgstr ""

#: src/running-the-course/translations.md:6
msgid ""
"[Brazilian Portuguese](https://google.github.io/comprehensive-rust/pt-BR/) "
"by [@rastringer](https://github.com/rastringer), [@hugojacob](https://github."
"com/hugojacob), [@joaovicmendes](https://github.com/joaovicmendes), and "
"[@henrif75](https://github.com/henrif75)."
msgstr ""

#: src/running-the-course/translations.md:7
msgid ""
"[Chinese (Simplified)](https://google.github.io/comprehensive-rust/zh-CN/) "
"by [@suetfei](https://github.com/suetfei), [@wnghl](https://github.com/"
"wnghl), [@anlunx](https://github.com/anlunx), [@kongy](https://github.com/"
"kongy), [@noahdragon](https://github.com/noahdragon), [@superwhd](https://"
"github.com/superwhd), [@SketchK](https://github.com/SketchK), and [@nodmp]"
"(https://github.com/nodmp)."
msgstr ""

#: src/running-the-course/translations.md:8
msgid ""
"[Chinese (Traditional)](https://google.github.io/comprehensive-rust/zh-TW/) "
"by [@hueich](https://github.com/hueich), [@victorhsieh](https://github.com/"
"victorhsieh), [@mingyc](https://github.com/mingyc), [@kuanhungchen](https://"
"github.com/kuanhungchen), and [@johnathan79717](https://github.com/"
"johnathan79717)."
msgstr ""

#: src/running-the-course/translations.md:9
msgid ""
"[Korean](https://google.github.io/comprehensive-rust/ko/) by [@keispace]"
"(https://github.com/keispace), [@jiyongp](https://github.com/jiyongp), and "
"[@jooyunghan](https://github.com/jooyunghan)."
msgstr ""

#: src/running-the-course/translations.md:10
msgid ""
"[Spanish](https://google.github.io/comprehensive-rust/es/) by [@deavid]"
"(https://github.com/deavid)."
msgstr ""

#: src/running-the-course/translations.md:12
msgid ""
"Use the language picker in the top-right corner to switch between languages."
msgstr ""

#: src/running-the-course/translations.md:14
msgid "Incomplete Translations"
msgstr "Ufuldst√¶ndige overs√¶ttelser"

#: src/running-the-course/translations.md:16
msgid ""
"There is a large number of in-progress translations. We link to the most "
"recently updated translations:"
msgstr ""

#: src/running-the-course/translations.md:19
msgid ""
"[Bengali](https://google.github.io/comprehensive-rust/bn/) by [@raselmandol]"
"(https://github.com/raselmandol)."
msgstr ""

#: src/running-the-course/translations.md:20
msgid ""
"[French](https://google.github.io/comprehensive-rust/fr/) by [@KookaS]"
"(https://github.com/KookaS) and [@vcaen](https://github.com/vcaen)."
msgstr ""

#: src/running-the-course/translations.md:21
msgid ""
"[German](https://google.github.io/comprehensive-rust/de/) by [@Throvn]"
"(https://github.com/Throvn) and [@ronaldfw](https://github.com/ronaldfw)."
msgstr ""

#: src/running-the-course/translations.md:22
msgid ""
"[Japanese](https://google.github.io/comprehensive-rust/ja/) by [@CoinEZ-JPN]"
"(https://github.com/CoinEZ) and [@momotaro1105](https://github.com/"
"momotaro1105)."
msgstr ""

#: src/running-the-course/translations.md:24
msgid ""
"If you want to help with this effort, please see [our instructions](https://"
"github.com/google/comprehensive-rust/blob/main/TRANSLATIONS.md) for how to "
"get going. Translations are coordinated on the [issue tracker](https://"
"github.com/google/comprehensive-rust/issues/282)."
msgstr ""

#: src/cargo.md:3
msgid ""
"When you start reading about Rust, you will soon meet [Cargo](https://doc."
"rust-lang.org/cargo/), the standard tool used in the Rust ecosystem to build "
"and run Rust applications. Here we want to give a brief overview of what "
"Cargo is and how it fits into the wider ecosystem and how it fits into this "
"training."
msgstr ""

#: src/cargo.md:8
msgid "Installation"
msgstr "Installation"

#: src/cargo.md:10
msgid "**Please follow the instructions on <https://rustup.rs/>.**"
msgstr ""

#: src/cargo.md:12
msgid ""
"This will give you the Cargo build tool (`cargo`) and the Rust compiler "
"(`rustc`). You will also get `rustup`, a command line utility that you can "
"use to install to different compiler versions."
msgstr ""

#: src/cargo.md:14
msgid ""
"After installing Rust, you should configure your editor or IDE to work with "
"Rust. Most editors do this by talking to [rust-analyzer](https://rust-"
"analyzer.github.io/), which provides auto-completion and jump-to-definition "
"functionality for [VS Code](https://code.visualstudio.com/), [Emacs](https://"
"rust-analyzer.github.io/manual.html#emacs), [Vim/Neovim](https://rust-"
"analyzer.github.io/manual.html#vimneovim), and many others. There is also a "
"different IDE available called [RustRover](https://www.jetbrains.com/rust/)."
msgstr ""

#: src/cargo.md:18
msgid ""
"On Debian/Ubuntu, you can also install Cargo, the Rust source and the [Rust "
"formatter](https://github.com/rust-lang/rustfmt) via `apt`. However, this "
"gets you an outdated rust version and may lead to unexpected behavior. The "
"command would be:"
msgstr ""

#: src/cargo/rust-ecosystem.md:1
msgid "The Rust Ecosystem"
msgstr ""

#: src/cargo/rust-ecosystem.md:3
msgid ""
"The Rust ecosystem consists of a number of tools, of which the main ones are:"
msgstr ""

#: src/cargo/rust-ecosystem.md:5
msgid ""
"`rustc`: the Rust compiler which turns `.rs` files into binaries and other "
"intermediate formats."
msgstr ""

#: src/cargo/rust-ecosystem.md:8
msgid ""
"`cargo`: the Rust dependency manager and build tool. Cargo knows how to "
"download dependencies, usually hosted on <https://crates.io>, and it will "
"pass them to `rustc` when building your project. Cargo also comes with a "
"built-in test runner which is used to execute unit tests."
msgstr ""

#: src/cargo/rust-ecosystem.md:13
msgid ""
"`rustup`: the Rust toolchain installer and updater. This tool is used to "
"install and update `rustc` and `cargo` when new versions of Rust are "
"released. In addition, `rustup` can also download documentation for the "
"standard library. You can have multiple versions of Rust installed at once "
"and `rustup` will let you switch between them as needed."
msgstr ""

#: src/cargo/rust-ecosystem.md:21 src/hello-world/hello-world.md:26
#: src/tuples-and-arrays/tuples-and-arrays.md:37 src/references/exclusive.md:19
#: src/pattern-matching/destructuring.md:68 src/memory-management/move.md:147
#: src/error-handling/try.md:53 src/android/setup.md:17
#: src/concurrency/threads.md:30 src/async/async-await.md:25
msgid "Key points:"
msgstr "N√∏glepunkter:"

#: src/cargo/rust-ecosystem.md:23
msgid ""
"Rust has a rapid release schedule with a new release coming out every six "
"weeks. New releases maintain backwards compatibility with old releases --- "
"plus they enable new functionality."
msgstr ""

#: src/cargo/rust-ecosystem.md:27
msgid ""
"There are three release channels: \"stable\", \"beta\", and \"nightly\"."
msgstr ""

#: src/cargo/rust-ecosystem.md:29
msgid ""
"New features are being tested on \"nightly\", \"beta\" is what becomes "
"\"stable\" every six weeks."
msgstr ""

#: src/cargo/rust-ecosystem.md:32
msgid ""
"Dependencies can also be resolved from alternative [registries](https://doc."
"rust-lang.org/cargo/reference/registries.html), git, folders, and more."
msgstr ""

#: src/cargo/rust-ecosystem.md:34
msgid ""
"Rust also has [editions](https://doc.rust-lang.org/edition-guide/): the "
"current edition is Rust 2021. Previous editions were Rust 2015 and Rust 2018."
msgstr ""

#: src/cargo/rust-ecosystem.md:37
msgid ""
"The editions are allowed to make backwards incompatible changes to the "
"language."
msgstr ""

#: src/cargo/rust-ecosystem.md:40
msgid ""
"To prevent breaking code, editions are opt-in: you select the edition for "
"your crate via the `Cargo.toml` file."
msgstr ""

#: src/cargo/rust-ecosystem.md:43
msgid ""
"To avoid splitting the ecosystem, Rust compilers can mix code written for "
"different editions."
msgstr ""

#: src/cargo/rust-ecosystem.md:46
msgid ""
"Mention that it is quite rare to ever use the compiler directly not through "
"`cargo` (most users never do)."
msgstr ""

#: src/cargo/rust-ecosystem.md:48
msgid ""
"It might be worth alluding that Cargo itself is an extremely powerful and "
"comprehensive tool.  It is capable of many advanced features including but "
"not limited to: "
msgstr ""

#: src/cargo/rust-ecosystem.md:49
msgid "Project/package structure"
msgstr ""

#: src/cargo/rust-ecosystem.md:50
msgid "[workspaces](https://doc.rust-lang.org/cargo/reference/workspaces.html)"
msgstr ""

#: src/cargo/rust-ecosystem.md:51
msgid "Dev Dependencies and Runtime Dependency management/caching"
msgstr ""

#: src/cargo/rust-ecosystem.md:52
msgid ""
"[build scripting](https://doc.rust-lang.org/cargo/reference/build-scripts."
"html)"
msgstr ""

#: src/cargo/rust-ecosystem.md:53
msgid ""
"[global installation](https://doc.rust-lang.org/cargo/commands/cargo-install."
"html)"
msgstr ""

#: src/cargo/rust-ecosystem.md:54
msgid ""
"It is also extensible with sub command plugins as well (such as [cargo "
"clippy](https://github.com/rust-lang/rust-clippy))."
msgstr ""

#: src/cargo/rust-ecosystem.md:55
msgid ""
"Read more from the [official Cargo Book](https://doc.rust-lang.org/cargo/)"
msgstr ""

#: src/cargo/code-samples.md:1
msgid "Code Samples in This Training"
msgstr ""

#: src/cargo/code-samples.md:3
msgid ""
"For this training, we will mostly explore the Rust language through examples "
"which can be executed through your browser. This makes the setup much easier "
"and ensures a consistent experience for everyone."
msgstr ""

#: src/cargo/code-samples.md:7
msgid ""
"Installing Cargo is still encouraged: it will make it easier for you to do "
"the exercises. On the last day, we will do a larger exercise which shows you "
"how to work with dependencies and for that you need Cargo."
msgstr ""

#: src/cargo/code-samples.md:11
msgid "The code blocks in this course are fully interactive:"
msgstr ""

#: src/cargo/code-samples.md:15 src/cargo/running-locally.md:45
msgid "\"Edit me!\""
msgstr "\"Rediger mig!\""

#: src/cargo/code-samples.md:19
msgid "You can use "
msgstr "Du kan bruge "

#: src/cargo/code-samples.md:19
#, fuzzy
msgid " to execute the code when focus is in the text box."
msgstr "for at afvikle koden n√•r tekstboksen er i fokus."

#: src/cargo/code-samples.md:24
msgid ""
"Most code samples are editable like shown above. A few code samples are not "
"editable for various reasons:"
msgstr ""

#: src/cargo/code-samples.md:27
msgid ""
"The embedded playgrounds cannot execute unit tests. Copy-paste the code and "
"open it in the real Playground to demonstrate unit tests."
msgstr ""

#: src/cargo/code-samples.md:30
msgid ""
"The embedded playgrounds lose their state the moment you navigate away from "
"the page! This is the reason that the students should solve the exercises "
"using a local Rust installation or via the Playground."
msgstr ""

#: src/cargo/running-locally.md:1
msgid "Running Code Locally with Cargo"
msgstr ""

#: src/cargo/running-locally.md:3
msgid ""
"If you want to experiment with the code on your own system, then you will "
"need to first install Rust. Do this by following the [instructions in the "
"Rust Book](https://doc.rust-lang.org/book/ch01-01-installation.html). This "
"should give you a working `rustc` and `cargo`. At the time of writing, the "
"latest stable Rust release has these version numbers:"
msgstr ""

#: src/cargo/running-locally.md:15
msgid ""
"You can use any later version too since Rust maintains backwards "
"compatibility."
msgstr ""

#: src/cargo/running-locally.md:17
msgid ""
"With this in place, follow these steps to build a Rust binary from one of "
"the examples in this training:"
msgstr ""

#: src/cargo/running-locally.md:20
msgid "Click the \"Copy to clipboard\" button on the example you want to copy."
msgstr ""

#: src/cargo/running-locally.md:22
msgid ""
"Use `cargo new exercise` to create a new `exercise/` directory for your code:"
msgstr ""

#: src/cargo/running-locally.md:29
msgid ""
"Navigate into `exercise/` and use `cargo run` to build and run your binary:"
msgstr ""

#: src/cargo/running-locally.md:40
msgid ""
"Replace the boiler-plate code in `src/main.rs` with your own code. For "
"example, using the example on the previous page, make `src/main.rs` look like"
msgstr ""

#: src/cargo/running-locally.md:49
msgid "Use `cargo run` to build and run your updated binary:"
msgstr ""

#: src/cargo/running-locally.md:59
msgid ""
"Use `cargo check` to quickly check your project for errors, use `cargo "
"build` to compile it without running it. You will find the output in `target/"
"debug/` for a normal debug build. Use `cargo build --release` to produce an "
"optimized release build in `target/release/`."
msgstr ""

#: src/cargo/running-locally.md:64
msgid ""
"You can add dependencies for your project by editing `Cargo.toml`. When you "
"run `cargo` commands, it will automatically download and compile missing "
"dependencies for you."
msgstr ""

#: src/cargo/running-locally.md:72
msgid ""
"Try to encourage the class participants to install Cargo and use a local "
"editor. It will make their life easier since they will have a normal "
"development environment."
msgstr ""

#: src/welcome-day-1.md:1
msgid "Welcome to Day 1"
msgstr "Velkommen til Dag 1"

#: src/welcome-day-1.md:3
msgid ""
"This is the first day of Rust Fundamentals. We will cover a lot of ground "
"today:"
msgstr ""
"Dette er den f√∏rste dag af Rust Fundamentals. Vi kommer til at d√¶kke en "
"masse terr√¶n i dag:"

#: src/welcome-day-1.md:6
msgid ""
"Basic Rust syntax: variables, scalar and compound types, enums, structs, "
"references, functions, and methods."
msgstr ""

#: src/welcome-day-1.md:8
#, fuzzy
msgid "Types and type inference."
msgstr "Typeudledning"

#: src/welcome-day-1.md:9
msgid "Control flow constructs: loops, conditionals, and so on."
msgstr ""

#: src/welcome-day-1.md:10
msgid "User-defined types: structs and enums."
msgstr ""

#: src/welcome-day-1.md:11
msgid "Pattern matching: destructuring enums, structs, and arrays."
msgstr ""

#: src/welcome-day-1.md:13 src/welcome-day-2.md:12 src/welcome-day-3.md:8
#: src/welcome-day-4.md:11
msgid "Schedule"
msgstr ""

#: src/welcome-day-1.md:15 src/welcome-day-1-afternoon.md:3
#: src/welcome-day-2.md:14 src/welcome-day-2-afternoon.md:3
#: src/welcome-day-3.md:10 src/welcome-day-3-afternoon.md:3
#: src/welcome-day-4.md:13 src/welcome-day-4-afternoon.md:3
msgid "In this session:"
msgstr ""

#: src/welcome-day-1.md:16
msgid "[Welcome](./welcome-day-1.md) (5 minutes)"
msgstr ""

#: src/welcome-day-1.md:17
msgid "[Hello, World](./hello-world.md) (20 minutes)"
msgstr ""

#: src/welcome-day-1.md:18
msgid "[Types and Values](./types-and-values.md) (1 hour and 5 minutes)"
msgstr ""

#: src/welcome-day-1.md:19
msgid "[Control Flow Basics](./control-flow-basics.md) (1 hour)"
msgstr ""

#: src/welcome-day-1.md:21 src/welcome-day-2-afternoon.md:7
msgid "Including 10 minute breaks, this session should take about 3 hours"
msgstr ""

#: src/welcome-day-1.md:27
msgid "Please remind the students that:"
msgstr ""

#: src/welcome-day-1.md:29
msgid ""
"They should ask questions when they get them, don't save them to the end."
msgstr ""

#: src/welcome-day-1.md:30
msgid ""
"The class is meant to be interactive and discussions are very much "
"encouraged!"
msgstr ""

#: src/welcome-day-1.md:31
msgid ""
"As an instructor, you should try to keep the discussions relevant, i.e., "
"keep the discussions related to how Rust does things vs some other language. "
"It can be hard to find the right balance, but err on the side of allowing "
"discussions since they engage people much more than one-way communication."
msgstr ""

#: src/welcome-day-1.md:35
msgid ""
"The questions will likely mean that we talk about things ahead of the slides."
msgstr ""

#: src/welcome-day-1.md:36
msgid ""
"This is perfectly okay! Repetition is an important part of learning. "
"Remember that the slides are just a support and you are free to skip them as "
"you like."
msgstr ""

#: src/welcome-day-1.md:40
msgid ""
"The idea for the first day is to show the \"basic\" things in Rust that "
"should have immediate parallels in other languages. The more advanced parts "
"of Rust come on the subsequent days."
msgstr ""

#: src/welcome-day-1.md:44
msgid ""
"If you're teaching this in a classroom, this is a good place to go over the "
"schedule. Note that there is an exercise at the end of each segment, "
"followed by a break. Plan to cover the exercise solution after the break. "
"The times listed here are a suggestion in order to keep the course on "
"schedule. Feel free to be flexible and adjust as necessary!"
msgstr ""

#: src/hello-world.md:3 src/types-and-values.md:3 src/control-flow-basics.md:3
#: src/tuples-and-arrays.md:3 src/references.md:3 src/user-defined-types.md:3
#: src/pattern-matching.md:3 src/methods-and-traits.md:3 src/generics.md:3
#: src/std-types.md:3 src/std-traits.md:3 src/memory-management.md:3
#: src/smart-pointers.md:3 src/borrowing.md:3 src/slices-and-lifetimes.md:3
#: src/iterators.md:3 src/modules.md:3 src/testing.md:3 src/error-handling.md:3
#: src/unsafe-rust.md:3
msgid "In this segment:"
msgstr ""

#: src/hello-world.md:4
msgid "[What is Rust?](./hello-world/what-is-rust.md) (10 minutes)"
msgstr ""

#: src/hello-world.md:5
msgid "[Hello, World](./hello-world/hello-world.md) (5 minutes)"
msgstr ""

#: src/hello-world.md:6
msgid "[Benefits of Rust](./hello-world/benefits.md) (3 minutes)"
msgstr ""

#: src/hello-world.md:7
msgid "[Playground](./hello-world/playground.md) (2 minutes)"
msgstr ""

#: src/hello-world.md:9
msgid "This segment should take about 20 minutes"
msgstr ""

#: src/hello-world/what-is-rust.md:3
msgid ""
"Rust is a new programming language which had its [1.0 release in 2015]"
"(https://blog.rust-lang.org/2015/05/15/Rust-1.0.html):"
msgstr ""

#: src/hello-world/what-is-rust.md:5
msgid "Rust is a statically compiled language in a similar role as C++"
msgstr ""

#: src/hello-world/what-is-rust.md:6
msgid "`rustc` uses LLVM as its backend."
msgstr ""

#: src/hello-world/what-is-rust.md:7
msgid ""
"Rust supports many [platforms and architectures](https://doc.rust-lang.org/"
"nightly/rustc/platform-support.html):"
msgstr ""

#: src/hello-world/what-is-rust.md:9
msgid "x86, ARM, WebAssembly, ..."
msgstr ""

#: src/hello-world/what-is-rust.md:10
msgid "Linux, Mac, Windows, ..."
msgstr ""

#: src/hello-world/what-is-rust.md:11
msgid "Rust is used for a wide range of devices:"
msgstr ""

#: src/hello-world/what-is-rust.md:12
msgid "firmware and boot loaders,"
msgstr ""

#: src/hello-world/what-is-rust.md:13
msgid "smart displays,"
msgstr ""

#: src/hello-world/what-is-rust.md:14
msgid "mobile phones,"
msgstr ""

#: src/hello-world/what-is-rust.md:15
msgid "desktops,"
msgstr ""

#: src/hello-world/what-is-rust.md:16
msgid "servers."
msgstr ""

#: src/hello-world/what-is-rust.md:22
msgid "Rust fits in the same area as C++:"
msgstr "Rust har det samme anvendelsesomr√•de som C++:"

#: src/hello-world/what-is-rust.md:24
msgid "High flexibility."
msgstr ""

#: src/hello-world/what-is-rust.md:25
msgid "High level of control."
msgstr ""

#: src/hello-world/what-is-rust.md:26
msgid ""
"Can be scaled down to very constrained devices such as microcontrollers."
msgstr ""

#: src/hello-world/what-is-rust.md:27
msgid "Has no runtime or garbage collection."
msgstr ""

#: src/hello-world/what-is-rust.md:28
msgid "Focuses on reliability and safety without sacrificing performance."
msgstr ""

#: src/hello-world/hello-world.md:3
msgid ""
"Let us jump into the simplest possible Rust program, a classic Hello World "
"program:"
msgstr ""

#: src/hello-world/hello-world.md:8
msgid "\"Hello üåç!\""
msgstr "\"Hallo üåç!\""

#: src/hello-world/hello-world.md:12
msgid "What you see:"
msgstr "Hvad du ser:"

#: src/hello-world/hello-world.md:14
msgid "Functions are introduced with `fn`."
msgstr ""

#: src/hello-world/hello-world.md:15
msgid "Blocks are delimited by curly braces like in C and C++."
msgstr ""

#: src/hello-world/hello-world.md:16
msgid "The `main` function is the entry point of the program."
msgstr ""

#: src/hello-world/hello-world.md:17
msgid "Rust has hygienic macros, `println!` is an example of this."
msgstr ""

#: src/hello-world/hello-world.md:18
msgid "Rust strings are UTF-8 encoded and can contain any Unicode character."
msgstr ""

#: src/hello-world/hello-world.md:23
msgid ""
"This slide tries to make the students comfortable with Rust code. They will "
"see a ton of it over the next three days so we start small with something "
"familiar."
msgstr ""

#: src/hello-world/hello-world.md:28
msgid ""
"Rust is very much like other languages in the C/C++/Java tradition. It is "
"imperative and it doesn't try to reinvent things unless absolutely necessary."
msgstr ""

#: src/hello-world/hello-world.md:32
msgid "Rust is modern with full support for things like Unicode."
msgstr ""

#: src/hello-world/hello-world.md:34
msgid ""
"Rust uses macros for situations where you want to have a variable number of "
"arguments (no function [overloading](basic-syntax/functions-interlude.md))."
msgstr ""

#: src/hello-world/hello-world.md:37
msgid ""
"Macros being 'hygienic' means they don't accidentally capture identifiers "
"from the scope they are used in. Rust macros are actually only [partially "
"hygienic](https://veykril.github.io/tlborm/decl-macros/minutiae/hygiene."
"html)."
msgstr ""

#: src/hello-world/hello-world.md:41
msgid ""
"Rust is multi-paradigm. For example, it has powerful [object-oriented "
"programming features](https://doc.rust-lang.org/book/ch17-00-oop.html), and, "
"while it is not a functional language, it includes a range of [functional "
"concepts](https://doc.rust-lang.org/book/ch13-00-functional-features.html)."
msgstr ""

#: src/hello-world/benefits.md:3
msgid "Some unique selling points of Rust:"
msgstr ""

#: src/hello-world/benefits.md:5
msgid ""
"_Compile time memory safety_ - whole classes of memory bugs are prevented at "
"compile time"
msgstr ""

#: src/hello-world/benefits.md:6
msgid "No uninitialized variables."
msgstr ""

#: src/hello-world/benefits.md:7
msgid "No double-frees."
msgstr ""

#: src/hello-world/benefits.md:8
msgid "No use-after-free."
msgstr ""

#: src/hello-world/benefits.md:9
msgid "No `NULL` pointers."
msgstr ""

#: src/hello-world/benefits.md:10
msgid "No forgotten locked mutexes."
msgstr ""

#: src/hello-world/benefits.md:11
msgid "No data races between threads."
msgstr ""

#: src/hello-world/benefits.md:12
msgid "No iterator invalidation."
msgstr ""

#: src/hello-world/benefits.md:14
msgid ""
"_No undefined runtime behavior_ - what a Rust statement does is never left "
"unspecified"
msgstr ""

#: src/hello-world/benefits.md:16
msgid "Array access is bounds checked."
msgstr ""

#: src/hello-world/benefits.md:17
msgid "Integer overflow is defined (panic or wrap-around)."
msgstr ""

#: src/hello-world/benefits.md:19
msgid ""
"_Modern language features_ - as expressive and ergonomic as higher-level "
"languages"
msgstr ""

#: src/hello-world/benefits.md:21
msgid "Enums and pattern matching."
msgstr ""

#: src/hello-world/benefits.md:22
msgid "Generics."
msgstr ""

#: src/hello-world/benefits.md:23
msgid "No overhead FFI."
msgstr ""

#: src/hello-world/benefits.md:24
msgid "Zero-cost abstractions."
msgstr ""

#: src/hello-world/benefits.md:25
msgid "Great compiler errors."
msgstr ""

#: src/hello-world/benefits.md:26
msgid "Built-in dependency manager."
msgstr ""

#: src/hello-world/benefits.md:27
msgid "Built-in support for testing."
msgstr ""

#: src/hello-world/benefits.md:28
msgid "Excellent Language Server Protocol support."
msgstr ""

#: src/hello-world/benefits.md:33
msgid ""
"Do not spend much time here. All of these points will be covered in more "
"depth later."
msgstr ""

#: src/hello-world/benefits.md:36
msgid ""
"Make sure to ask the class which languages they have experience with. "
"Depending on the answer you can highlight different features of Rust:"
msgstr ""

#: src/hello-world/benefits.md:39
msgid ""
"Experience with C or C++: Rust eliminates a whole class of _runtime errors_ "
"via the borrow checker. You get performance like in C and C++, but you don't "
"have the memory unsafety issues. In addition, you get a modern language with "
"constructs like pattern matching and built-in dependency management."
msgstr ""

#: src/hello-world/benefits.md:44
msgid ""
"Experience with Java, Go, Python, JavaScript...: You get the same memory "
"safety as in those languages, plus a similar high-level language feeling. In "
"addition you get fast and predictable performance like C and C++ (no garbage "
"collector) as well as access to low-level hardware (should you need it)"
msgstr ""

#: src/hello-world/playground.md:3
msgid ""
"The [Rust Playground](https://play.rust-lang.org/) provides an easy way to "
"run short Rust programs, and is the basis for the examples and exercises in "
"this course.  Try running the \"hello-world\" program it starts with. It "
"comes with a few handy features:"
msgstr ""

#: src/hello-world/playground.md:8
msgid ""
"Under \"Tools\", use the `rustfmt` option to format your code in the "
"\"standard\" way."
msgstr ""

#: src/hello-world/playground.md:11
msgid ""
"Rust has two main \"profiles\" for generating code: Debug (extra runtime "
"checks, less optimization) and Release (fewer runtime checks, lots of "
"optimization). These are accessible under \"Debug\" at the top."
msgstr ""

#: src/hello-world/playground.md:15
msgid ""
"If you're interested, use \"ASM\" under \"...\" to see the generated "
"assembly code."
msgstr ""

#: src/hello-world/playground.md:21
msgid ""
"As students head into the break, encourage them to open up the playground "
"and experiment a little. Encourage them to keep the tab open and try things "
"out during the rest of the course. This is particularly helpful for advanced "
"students who want to know more about Rust's optimzations or generated "
"assembly."
msgstr ""

#: src/types-and-values.md:4
msgid "[Variables](./types-and-values/variables.md) (5 minutes)"
msgstr ""

#: src/types-and-values.md:5
msgid "[Values](./types-and-values/values.md) (10 minutes)"
msgstr ""

#: src/types-and-values.md:6
msgid "[Arithmetic](./types-and-values/arithmetic.md) (5 minutes)"
msgstr ""

#: src/types-and-values.md:7
msgid "[Strings](./types-and-values/strings.md) (10 minutes)"
msgstr ""

#: src/types-and-values.md:8
msgid "[Type Inference](./types-and-values/inference.md) (5 minutes)"
msgstr ""

#: src/types-and-values.md:9
msgid "[Exercise: Fibonacci](./types-and-values/exercise.md) (30 minutes)"
msgstr ""

#: src/types-and-values.md:11 src/methods-and-traits.md:10
#: src/unsafe-rust.md:12
msgid "This segment should take about 1 hour and 5 minutes"
msgstr ""

#: src/types-and-values/variables.md:3
msgid ""
"Rust provides type safety via static typing. Variable bindings are made with "
"`let`:"
msgstr ""

#: src/types-and-values/variables.md:9 src/control-flow-basics/loops.md:29
#: src/control-flow-basics/break-continue.md:33
#: src/control-flow-basics/blocks-and-scopes.md:17
#, fuzzy
msgid "\"x: {x}\""
msgstr "\"{x}\""

#: src/types-and-values/variables.md:10
msgid ""
"// x = 20;\n"
"    // println!(\"x: {x}\");\n"
msgstr ""

#: src/types-and-values/variables.md:18
msgid ""
"Uncomment the `x = 20` to demonstrate that variables are immutable by "
"default. Add the `mut` keyword to allow changes."
msgstr ""

#: src/types-and-values/variables.md:21
msgid ""
"The `i32` here is the type of the variable. This must be known at compile "
"time, but type inference (covered later) allows the programmer to omit it in "
"many cases."
msgstr ""

#: src/types-and-values/values.md:3
msgid ""
"Here are some basic built-in types, and the syntax for literal values of "
"each type."
msgstr ""

#: src/types-and-values/values.md:5
#: src/tuples-and-arrays/tuples-and-arrays.md:7 src/unsafe-rust/exercise.md:16
msgid "Types"
msgstr ""

#: src/types-and-values/values.md:5
#: src/tuples-and-arrays/tuples-and-arrays.md:7
msgid "Literals"
msgstr ""

#: src/types-and-values/values.md:7
msgid "Signed integers"
msgstr ""

#: src/types-and-values/values.md:7
msgid "`i8`, `i16`, `i32`, `i64`, `i128`, `isize`"
msgstr ""

#: src/types-and-values/values.md:7
msgid "`-10`, `0`, `1_000`, `123_i64`"
msgstr ""

#: src/types-and-values/values.md:8
msgid "Unsigned integers"
msgstr ""

#: src/types-and-values/values.md:8
msgid "`u8`, `u16`, `u32`, `u64`, `u128`, `usize`"
msgstr ""

#: src/types-and-values/values.md:8
msgid "`0`, `123`, `10_u16`"
msgstr ""

#: src/types-and-values/values.md:9
msgid "Floating point numbers"
msgstr ""

#: src/types-and-values/values.md:9
msgid "`f32`, `f64`"
msgstr ""

#: src/types-and-values/values.md:9
msgid "`3.14`, `-10.0e20`, `2_f32`"
msgstr ""

#: src/types-and-values/values.md:10
msgid "Unicode scalar values"
msgstr ""

#: src/types-and-values/values.md:10
msgid "`char`"
msgstr ""

#: src/types-and-values/values.md:10
msgid "`'a'`, `'Œ±'`, `'‚àû'`"
msgstr ""

#: src/types-and-values/values.md:11
msgid "Booleans"
msgstr ""

#: src/types-and-values/values.md:11
msgid "`bool`"
msgstr ""

#: src/types-and-values/values.md:11
msgid "`true`, `false`"
msgstr ""

#: src/types-and-values/values.md:13
msgid "The types have widths as follows:"
msgstr ""

#: src/types-and-values/values.md:15
msgid "`iN`, `uN`, and `fN` are _N_ bits wide,"
msgstr ""

#: src/types-and-values/values.md:16
msgid "`isize` and `usize` are the width of a pointer,"
msgstr ""

#: src/types-and-values/values.md:17
msgid "`char` is 32 bits wide,"
msgstr ""

#: src/types-and-values/values.md:18
msgid "`bool` is 8 bits wide."
msgstr ""

#: src/types-and-values/values.md:23
msgid "There are a few syntaxes which are not shown above:"
msgstr ""

#: src/types-and-values/values.md:25
msgid ""
"All underscores in numbers can be left out, they are for legibility only. So "
"`1_000` can be written as `1000` (or `10_00`), and `123_i64` can be written "
"as `123i64`."
msgstr ""

#: src/types-and-values/arithmetic.md:9
#, fuzzy
msgid "\"result: {}\""
msgstr "\"result: {:?}\""

#: src/types-and-values/arithmetic.md:16
msgid ""
"This is the first time we've seen a function other than `main`, but the "
"meaning should be clear: it takes three integers, and returns an integer. "
"Functions will be covered in more detail later."
msgstr ""

#: src/types-and-values/arithmetic.md:20
msgid "Arithmetic is very similar to other languages, with similar precedence."
msgstr ""

#: src/types-and-values/arithmetic.md:22
msgid ""
"What about integer overflow? In C and C++ overflow of _signed_ integers is "
"actually undefined, and might do different things on different platforms or "
"compilers. In Rust, it's defined."
msgstr ""

#: src/types-and-values/arithmetic.md:26
msgid ""
"Change the `i32`'s to `i16` to see an integer overflow, which panics "
"(checked) in a debug build and wraps in a release build.  There are other "
"options, such as overflowing, saturating, and carrying.  These are accessed "
"with method syntax, e.g., `(a * b).saturating_add(b * c).saturating_add(c * "
"a)`."
msgstr ""

#: src/types-and-values/arithmetic.md:31
msgid ""
"In fact, the compiler will detect overflow of constant expressions, which is "
"why the example requires a separate function."
msgstr ""

#: src/types-and-values/strings.md:3
msgid ""
"Rust has two types to represent strings, both of which will be covered in "
"more depth later.  Both _always_ store UTF-8 encoded strings."
msgstr ""

#: src/types-and-values/strings.md:6
msgid "`String` - a modifiable, owned string."
msgstr ""

#: src/types-and-values/strings.md:7
msgid "`&str` - a read-only string. String literals have this type."
msgstr ""

#: src/types-and-values/strings.md:11
#, fuzzy
msgid "\"Greetings\""
msgstr "\"greetings\""

#: src/types-and-values/strings.md:12
msgid "\"ü™ê\""
msgstr ""

#: src/types-and-values/strings.md:15
msgid "\", \""
msgstr ""

#: src/types-and-values/strings.md:17
#, fuzzy
msgid "\"final sentence: {}\""
msgstr "\"indre blok: {a}\""

#: src/types-and-values/strings.md:18 src/async/control-flow/join.md:30
msgid "\"{:?}\""
msgstr "\"{:?}\""

#: src/types-and-values/strings.md:19
msgid "//println!(\"{:?}\", &sentence[12..13]);\n"
msgstr ""

#: src/types-and-values/strings.md:26
msgid ""
"This slide introduces strings. Everything here will be covered in more depth "
"later, but this is enough for subsequent slides and exercises to use strings."
msgstr ""

#: src/types-and-values/strings.md:29
msgid "Invalid UTF-8 in a string is UB, and this not allowed in safe Rust."
msgstr ""

#: src/types-and-values/strings.md:31
msgid ""
"`String` is a user-defined type with a constructor (`::new()`) and methods "
"like `s.push_str(..)`."
msgstr ""

#: src/types-and-values/strings.md:33
msgid ""
"The `&` in `&str` indicates that this is a reference. We will cover "
"references later, so for now just think of `&str` as a unit meaning \"a read-"
"only string\"."
msgstr ""

#: src/types-and-values/strings.md:36
msgid ""
"The commented-out line is indexing into the string by byte position. "
"`12..13` does not end on a character boundary, so the program panics. Adjust "
"it to a range that does, based on the error message."
msgstr ""

#: src/types-and-values/strings.md:40
msgid ""
"Raw strings allow you to create a `&str` value with escapes disabled: "
"`r\"\\n\" == \"\\\\n\"`. You can embed double-quotes by using an equal "
"amount of `#` on either side of the quotes:"
msgstr ""

#: src/types-and-values/inference.md:3
msgid "Rust will look at how the variable is _used_ to determine the type:"
msgstr ""

#: src/types-and-values/inference.md:28
msgid ""
"This slide demonstrates how the Rust compiler infers types based on "
"constraints given by variable declarations and usages."
msgstr ""

#: src/types-and-values/inference.md:30
msgid ""
"It is very important to emphasize that variables declared like this are not "
"of some sort of dynamic \"any type\" that can hold any data. The machine "
"code generated by such declaration is identical to the explicit declaration "
"of a type. The compiler does the job for us and helps us write more concise "
"code."
msgstr ""

#: src/types-and-values/inference.md:34
msgid ""
"When nothing constrains the type of an integer literal, Rust defaults to "
"`i32`. This sometimes appears as `{integer}` in error messages. Similarly, "
"floating-point literals default to `f64`."
msgstr ""

#: src/types-and-values/inference.md:43
msgid "// ERROR: no implementation for `{float} == {integer}`\n"
msgstr ""

#: src/types-and-values/exercise.md:3
msgid ""
"The first and second Fibonacci numbers are both `1`.  For n>2, he n'th "
"Fibonacci number is calculated recursively as the sum of the n-1'th and "
"n-2'th Fibonacci numbers."
msgstr ""

#: src/types-and-values/exercise.md:7
msgid ""
"Write a function `fib(n)` that calculates the n'th Fibonacci number.  When "
"will this function panic?"
msgstr ""

#: src/types-and-values/exercise.md:13
msgid "// The base case.\n"
msgstr ""

#: src/types-and-values/exercise.md:14 src/types-and-values/exercise.md:17
#: src/control-flow-basics/exercise.md:26
#: src/control-flow-basics/exercise.md:30
msgid "\"Implement this\""
msgstr ""

#: src/types-and-values/exercise.md:16
msgid "// The recursive case.\n"
msgstr ""

#: src/types-and-values/exercise.md:23 src/types-and-values/solution.md:14
#, fuzzy
msgid "\"fib(n) = {}\""
msgstr "\"fib({i}): {n}\""

#: src/control-flow-basics.md:4
msgid "[Conditionals](./control-flow-basics/conditionals.md) (5 minutes)"
msgstr ""

#: src/control-flow-basics.md:5
msgid "[Loops](./control-flow-basics/loops.md) (5 minutes)"
msgstr ""

#: src/control-flow-basics.md:6
msgid ""
"[break and continue](./control-flow-basics/break-continue.md) (5 minutes)"
msgstr ""

#: src/control-flow-basics.md:7
msgid ""
"[Blocks and Scopes](./control-flow-basics/blocks-and-scopes.md) (10 minutes)"
msgstr ""

#: src/control-flow-basics.md:8
msgid "[Functions](./control-flow-basics/functions.md) (3 minutes)"
msgstr ""

#: src/control-flow-basics.md:9
msgid "[Macros](./control-flow-basics/macros.md) (2 minutes)"
msgstr ""

#: src/control-flow-basics.md:10
msgid ""
"[Exercise: Collatz conjecture](./control-flow-basics/exercise.md) (30 "
"minutes)"
msgstr ""

#: src/control-flow-basics.md:12 src/tuples-and-arrays.md:10 src/borrowing.md:9
#: src/testing.md:11
msgid "This segment should take about 1 hour"
msgstr ""

#: src/control-flow-basics/conditionals.md:3
msgid "Much of the Rust syntax will be familiar to you from C, C++ or Java:"
msgstr ""

#: src/control-flow-basics/conditionals.md:5
msgid "Blocks are delimited by curly braces."
msgstr ""

#: src/control-flow-basics/conditionals.md:6
msgid ""
"Line comments are started with `//`, block comments are delimited by `/* ... "
"*/`."
msgstr ""

#: src/control-flow-basics/conditionals.md:8
msgid "Keywords like `if` and `while` work the same."
msgstr ""

#: src/control-flow-basics/conditionals.md:9
msgid "Variable assignment is done with `=`, comparison is done with `==`."
msgstr ""

#: src/control-flow-basics/conditionals.md:11
msgid "`if` expressions"
msgstr ""

#: src/control-flow-basics/conditionals.md:13
msgid ""
"You use [`if` expressions](https://doc.rust-lang.org/reference/expressions/"
"if-expr.html#if-expressions) exactly like `if` statements in other languages:"
msgstr ""

#: src/control-flow-basics/conditionals.md:21
#: src/control-flow-basics/conditionals.md:38
msgid "\"small\""
msgstr ""

#: src/control-flow-basics/conditionals.md:23
msgid "\"biggish\""
msgstr ""

#: src/control-flow-basics/conditionals.md:25
msgid "\"huge\""
msgstr ""

#: src/control-flow-basics/conditionals.md:30
msgid ""
"In addition, you can use `if` as an expression. The last expression of each "
"block becomes the value of the `if` expression:"
msgstr ""

#: src/control-flow-basics/conditionals.md:40
msgid "\"large\""
msgstr ""

#: src/control-flow-basics/conditionals.md:42
#, fuzzy
msgid "\"number size: {}\""
msgstr "\"{numbers:?}\""

#: src/control-flow-basics/conditionals.md:49
msgid ""
"Because `if` is an expression and must have a particular type, both of its "
"branch blocks must have the same type. Show what happens if you add `;` "
"after `\"small\"` in the second example."
msgstr ""

#: src/control-flow-basics/conditionals.md:51
msgid ""
"When `if` is used in an expression, the expression must have a `;` to "
"separate it from the next statement. Remove the `;` before `println!` to see "
"the compiler error."
msgstr ""

#: src/control-flow-basics/loops.md:3
msgid "There are three looping keywords in Rust: `while`, `loop`, and `for`:"
msgstr ""

#: src/control-flow-basics/loops.md:5
msgid "`while`"
msgstr ""

#: src/control-flow-basics/loops.md:7
msgid ""
"The [`while` keyword](https://doc.rust-lang.org/reference/expressions/loop-"
"expr.html#predicate-loops) works much like in other languages, executing the "
"loop body as long as the condition is true."
msgstr ""

#: src/control-flow-basics/loops.md:17
#, fuzzy
msgid "\"Final x: {x}\""
msgstr "\" -> {x}\""

#: src/control-flow-basics/loops.md:21
#, fuzzy
msgid "`for`"
msgstr "`for`\\-l√∏kker"

#: src/control-flow-basics/loops.md:23
msgid ""
"The [`for` loop](https://doc.rust-lang.org/std/keyword.for.html) iterates "
"over ranges of values:"
msgstr ""

#: src/control-flow-basics/loops.md:34
msgid "`loop`"
msgstr ""

#: src/control-flow-basics/loops.md:36
msgid ""
"The [`loop` statement](https://doc.rust-lang.org/std/keyword.loop.html) just "
"loops forever, until a `break`."
msgstr ""

#: src/control-flow-basics/loops.md:44
msgid "\"{i}\""
msgstr ""

#: src/control-flow-basics/loops.md:55
msgid ""
"We will discuss iteration later; for now, just stick to range expressions."
msgstr ""

#: src/control-flow-basics/loops.md:56
msgid ""
"Note that the `for` loop only iterates to `4`. Show the `1..=5` syntax for "
"an inclusive range."
msgstr ""

#: src/control-flow-basics/break-continue.md:3
msgid ""
"If you want to exit any kind of loop early, use [`break`](https://doc.rust-"
"lang.org/reference/expressions/loop-expr.html#break-expressions). For "
"`loop`, this can take an optional expression that becomes the value of the "
"`loop` expression."
msgstr ""

#: src/control-flow-basics/break-continue.md:7
msgid ""
"If you want to immediately start the next iteration use [`continue`](https://"
"doc.rust-lang.org/reference/expressions/loop-expr.html#continue-expressions)."
msgstr ""

#: src/control-flow-basics/break-continue.md:23
#, fuzzy
msgid "\"{result}\""
msgstr "\"result: {:?}\""

#: src/control-flow-basics/break-continue.md:27
msgid ""
"Both `continue` and `break` can optionally take a label argument which is "
"used to break out of nested loops:"
msgstr ""

#: src/control-flow-basics/break-continue.md:36
#, fuzzy
msgid "\"x: {x}, i: {i}\""
msgstr "\"{x}, {abs_x}\""

#: src/control-flow-basics/break-continue.md:46
msgid ""
"In this case we break the outer loop after 3 iterations of the inner loop."
msgstr ""

#: src/control-flow-basics/break-continue.md:51
msgid ""
"Note that `loop` is the only looping construct which returns a non-trivial "
"value. This is because it's guaranteed to be entered at least once (unlike "
"`while` and `for` loops)."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:3
msgid "Blocks"
msgstr "Blokke"

#: src/control-flow-basics/blocks-and-scopes.md:5
msgid ""
"A block in Rust contains a sequence of expressions. Each block has a value "
"and a type, which are those of the last expression of the block:"
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:14
msgid "\"y: {y}\""
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:21
msgid ""
"If the last expression ends with `;`, then the resulting value and type is "
"`()`."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:23
msgid "Scopes and Shadowing"
msgstr "Virkefelt og overskyggede variabler"

#: src/control-flow-basics/blocks-and-scopes.md:25
msgid "A variable's scope is limited to the enclosing block."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:27
msgid ""
"You can shadow variables, both those from outer scopes and variables from "
"the same scope:"
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:33
msgid "\"before: {a}\""
msgstr "\"f√∏r: {a}\""

#: src/control-flow-basics/blocks-and-scopes.md:35
#: src/std-traits/from-and-into.md:7 src/std-traits/from-and-into.md:19
#: src/slices-and-lifetimes/solution.md:216
msgid "\"hello\""
msgstr "\"hallo\""

#: src/control-flow-basics/blocks-and-scopes.md:36
msgid "\"inner scope: {a}\""
msgstr "\"indre blok: {a}\""

#: src/control-flow-basics/blocks-and-scopes.md:39
msgid "\"shadowed in inner scope: {a}\""
msgstr "\"overskygget i indre blok: {a}\""

#: src/control-flow-basics/blocks-and-scopes.md:42
msgid "\"after: {a}\""
msgstr "\"efter: {a}\""

#: src/control-flow-basics/blocks-and-scopes.md:49
msgid ""
"You can show how the value of the block changes by changing the last line in "
"the block. For instance, adding/removing a semicolon or using a `return`."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:50
msgid ""
"Show that a variable's scope is limited by adding a b\\` in the inner block "
"in the last example, and then trying to access it outside that block."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:51
msgid ""
"Shadowing is different from mutation, because after shadowing both "
"variable's memory locations exist at the same time. Both are available under "
"the same name, depending where you use it in the code."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:52
msgid "A shadowing variable can have a different type."
msgstr ""

#: src/control-flow-basics/blocks-and-scopes.md:53
msgid ""
"Shadowing looks obscure at first, but is convenient for holding on to values "
"after `.unwrap()`."
msgstr ""

#: src/control-flow-basics/functions.md:21
msgid ""
"Declaration parameters are followed by a type (the reverse of some "
"programming languages), then a return type."
msgstr ""

#: src/control-flow-basics/functions.md:22
msgid ""
"The last expression in a function body (or any block) becomes the return "
"value. Simply omit the `;` at the end of the expression. The `return` "
"keyword can be used for early return, but the \"bare value\" form is "
"idiomatic at the end of a function (refactor `gcd` to use a `return`)."
msgstr ""

#: src/control-flow-basics/functions.md:24
msgid ""
"Some functions have no return value, and return the 'unit type', `()`. The "
"compiler will infer this if the `-> ()` return type is omitted."
msgstr ""

#: src/control-flow-basics/functions.md:25
msgid ""
"Overloading is not supported -- each function has a single implementation."
msgstr ""

#: src/control-flow-basics/functions.md:26
msgid ""
"Always takes a fixed number of parameters. Default arguments are not "
"supported. Macros can be used to support variadic functions."
msgstr ""

#: src/control-flow-basics/functions.md:27
msgid ""
"Always takes a single set of parameter types. These types can be generic, "
"which will be covered later."
msgstr ""

#: src/control-flow-basics/macros.md:3
msgid ""
"Macros are expanded into Rust code during compilation, and can take a "
"variable number of arguments. They are distinguished by a `!` at the end. "
"The Rust standard library includes an assortment of useful macros."
msgstr ""

#: src/control-flow-basics/macros.md:7
msgid ""
"`println!(format, ..)` prints a line to standard output, applying formatting "
"described in [`std::fmt`](https://doc.rust-lang.org/std/fmt/index.html)."
msgstr ""

#: src/control-flow-basics/macros.md:8
msgid ""
"`format!(format, ..)` works just like `println!` but returns the result as a "
"string."
msgstr ""

#: src/control-flow-basics/macros.md:9
msgid "`dbg!(expression)` logs the value of the expression and returns it."
msgstr ""

#: src/control-flow-basics/macros.md:10
msgid ""
"`todo!()` marks a bit of code as not-yet-implemented. If executed, it will "
"panic."
msgstr ""

#: src/control-flow-basics/macros.md:11
msgid ""
"`unreachable!()` marks a bit of code as unreachable. If executed, it will "
"panic."
msgstr ""

#: src/control-flow-basics/macros.md:28
#, fuzzy
msgid "\"{n}! = {}\""
msgstr "\"{} {}\""

#: src/control-flow-basics/macros.md:35
msgid ""
"The takeaway from this section is that these common conveniences exist, and "
"how to use them. Why they are defined as macros, and what they expand to, is "
"not especially critical."
msgstr ""

#: src/control-flow-basics/macros.md:39
msgid ""
"The course does not cover defining macros, but a later section will describe "
"use of derive macros."
msgstr ""

#: src/control-flow-basics/exercise.md:1
msgid "Exercise: Collatz Sequence"
msgstr ""

#: src/control-flow-basics/exercise.md:3
msgid ""
"The [Collatz Sequence](https://en.wikipedia.org/wiki/Collatz_conjecture) is "
"defined as follows, for an arbitrary n"
msgstr ""

#: src/control-flow-basics/exercise.md:4 src/control-flow-basics/exercise.md:10
msgid "1"
msgstr ""

#: src/control-flow-basics/exercise.md:4
msgid " greater than zero:"
msgstr ""

#: src/control-flow-basics/exercise.md:6 src/control-flow-basics/exercise.md:7
#: src/control-flow-basics/exercise.md:8
msgid "If _n"
msgstr ""

#: src/control-flow-basics/exercise.md:6 src/control-flow-basics/exercise.md:7
#: src/control-flow-basics/exercise.md:8
msgid "i"
msgstr ""

#: src/control-flow-basics/exercise.md:6
msgid "_ is 1, then the sequence terminates at _n"
msgstr ""

#: src/control-flow-basics/exercise.md:6
msgid "_."
msgstr ""

#: src/control-flow-basics/exercise.md:7
msgid "_ is even, then _n"
msgstr ""

#: src/control-flow-basics/exercise.md:7 src/control-flow-basics/exercise.md:8
msgid "i+1"
msgstr ""

#: src/control-flow-basics/exercise.md:7
msgid " = n"
msgstr ""

#: src/control-flow-basics/exercise.md:7
msgid " / 2_."
msgstr ""

#: src/control-flow-basics/exercise.md:8
msgid "_ is odd, then _n"
msgstr ""

#: src/control-flow-basics/exercise.md:8
msgid " = 3 * n"
msgstr ""

#: src/control-flow-basics/exercise.md:8
msgid " + 1_."
msgstr ""

#: src/control-flow-basics/exercise.md:10
msgid "For example, beginning with _n"
msgstr ""

#: src/control-flow-basics/exercise.md:10
msgid "_ = 3:"
msgstr ""

#: src/control-flow-basics/exercise.md:11
msgid "3 is odd, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:11
msgid "2"
msgstr ""

#: src/control-flow-basics/exercise.md:11
msgid "_ = 3 * 3 + 1 = 10;"
msgstr ""

#: src/control-flow-basics/exercise.md:12
msgid "10 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:12 src/bare-metal/aps/better-uart.md:22
msgid "3"
msgstr ""

#: src/control-flow-basics/exercise.md:12
msgid "_ = 10 / 2 = 5;"
msgstr ""

#: src/control-flow-basics/exercise.md:13
msgid "5 is odd, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:13 src/bare-metal/aps/better-uart.md:10
msgid "4"
msgstr ""

#: src/control-flow-basics/exercise.md:13
msgid "_ = 3 * 15 + 1 = 16;"
msgstr ""

#: src/control-flow-basics/exercise.md:14
msgid "16 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:14
msgid "5"
msgstr ""

#: src/control-flow-basics/exercise.md:14
msgid "_ = 16 / 2  = 8;"
msgstr ""

#: src/control-flow-basics/exercise.md:15
msgid "8 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:15 src/bare-metal/aps/better-uart.md:14
#: src/bare-metal/aps/better-uart.md:17
msgid "6"
msgstr ""

#: src/control-flow-basics/exercise.md:15
msgid "_ = 8 / 2  = 4;"
msgstr ""

#: src/control-flow-basics/exercise.md:16
msgid "4 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:16
msgid "7"
msgstr ""

#: src/control-flow-basics/exercise.md:16
msgid "_ = 4 / 2  = 2;"
msgstr ""

#: src/control-flow-basics/exercise.md:17
msgid "2 is even, so  _n"
msgstr ""

#: src/control-flow-basics/exercise.md:17 src/bare-metal/aps/better-uart.md:12
#: src/bare-metal/aps/better-uart.md:15
msgid "8"
msgstr ""

#: src/control-flow-basics/exercise.md:17
msgid "_ = 1; and"
msgstr ""

#: src/control-flow-basics/exercise.md:18
msgid "the sequence terminates."
msgstr ""

#: src/control-flow-basics/exercise.md:20
msgid ""
"Write a function to calculate the length of the collatz sequence for a given "
"initial `n`."
msgstr ""

#: src/control-flow-basics/exercise.md:24 src/control-flow-basics/solution.md:4
msgid "/// Determine the length of the collatz sequence beginning at `n`.\n"
msgstr ""

#: src/control-flow-basics/solution.md:20 src/concurrency/scoped-threads.md:11
#: src/concurrency/scoped-threads.md:30
msgid "\"Length: {}\""
msgstr "\"L√¶ngde: {}\""

#: src/welcome-day-1-afternoon.md:1 src/welcome-day-2-afternoon.md:1
#: src/welcome-day-3-afternoon.md:1 src/welcome-day-4-afternoon.md:1
#, fuzzy
msgid "Welcome Back"
msgstr "Velkommen"

#: src/welcome-day-1-afternoon.md:4
msgid "[Tuples and Arrays](./tuples-and-arrays.md) (1 hour)"
msgstr ""

#: src/welcome-day-1-afternoon.md:5
msgid "[References](./references.md) (50 minutes)"
msgstr ""

#: src/welcome-day-1-afternoon.md:6
msgid "[User-Defined Types](./user-defined-types.md) (50 minutes)"
msgstr ""

#: src/welcome-day-1-afternoon.md:8
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 55 "
"minutes"
msgstr ""

#: src/tuples-and-arrays.md:4
msgid ""
"[Tuples and Arrays](./tuples-and-arrays/tuples-and-arrays.md) (10 minutes)"
msgstr ""

#: src/tuples-and-arrays.md:5
msgid "[Array Iteration](./tuples-and-arrays/iteration.md) (3 minutes)"
msgstr ""

#: src/tuples-and-arrays.md:6
msgid "[Pattern Matching](./tuples-and-arrays/match.md) (10 minutes)"
msgstr ""

#: src/tuples-and-arrays.md:7
msgid "[Destructuring](./tuples-and-arrays/destructuring.md) (5 minutes)"
msgstr ""

#: src/tuples-and-arrays.md:8
msgid "[Exercise: Nested Arrays](./tuples-and-arrays/exercise.md) (30 minutes)"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:3
msgid ""
"Tuples and arrays are the first \"compound\" types we have seen. All "
"elements of an array have the same type, while tuples can accommodate "
"different types. Both types have a size fixed at compile time."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:9
#: src/tuples-and-arrays/destructuring.md:27
msgid "Arrays"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:9
msgid "`[T; N]`"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:9
msgid "`[20, 30, 40]`, `[0; 3]`"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:10
#: src/tuples-and-arrays/destructuring.md:9
msgid "Tuples"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:10
msgid "`()`, `(T,)`, `(T1, T2)`, ..."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:10
msgid "`()`, `('x',)`, `('x', 1.2)`, ..."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:12
msgid "Array assignment and access:"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:23
msgid "Tuple assignment and access:"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:39
msgid "Arrays:"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:41
msgid ""
"A value of the array type `[T; N]` holds `N` (a compile-time constant) "
"elements of the same type `T`. Note that the length of the array is _part of "
"its type_, which means that `[u8; 3]` and `[u8; 4]` are considered two "
"different types. Slices, which have a size determined at runtime, are "
"covered later."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:46
msgid ""
"Try accessing an out-of-bounds array element. Array accesses are checked at "
"runtime. Rust can usually optimize these checks away, and they can be "
"avoided using unsafe Rust."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:50
msgid "We can use literals to assign values to arrays."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:52
msgid ""
"The `println!` macro asks for the debug implementation with the `?` format "
"parameter: `{}` gives the default output, `{:?}` gives the debug output. "
"Types such as integers and strings implement the default output, but arrays "
"only implement the debug output. This means that we must use debug output "
"here."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:57
msgid ""
"Adding `#`, eg `{a:#?}`, invokes a \"pretty printing\" format, which can be "
"easier to read."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:59
msgid "Tuples:"
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:61
msgid "Like arrays, tuples have a fixed length."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:63
msgid "Tuples group together values of different types into a compound type."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:65
msgid ""
"Fields of a tuple can be accessed by the period and the index of the value, "
"e.g. `t.0`, `t.1`."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:67
msgid ""
"The empty tuple `()` is also known as the \"unit type\". It is both a type, "
"and the only valid value of that type --- that is to say both the type and "
"its value are expressed as `()`. It is used to indicate, for example, that a "
"function or expression has no return value, as we'll see in a future slide."
msgstr ""

#: src/tuples-and-arrays/tuples-and-arrays.md:71
msgid ""
"You can think of it as `void` that can be familiar to you from other "
"programming languages."
msgstr ""

#: src/tuples-and-arrays/iteration.md:3
msgid "The `for` statement supports iterating over arrays (but not tuples)."
msgstr ""

#: src/tuples-and-arrays/iteration.md:19
msgid ""
"This functionality uses the `IntoIterator` trait, but we haven't covered "
"that yet."
msgstr ""

#: src/tuples-and-arrays/iteration.md:21
msgid ""
"The `assert_ne!` macro is new here. There are also `assert_eq!` and `assert!"
"` macros. These are always checked while, debug-only variants like "
"`debug_assert!` compile to nothing in release builds."
msgstr ""

#: src/tuples-and-arrays/match.md:3
msgid ""
"The `match` keyword lets you match a value against one or more _patterns_. "
"The comparisons are done from top to bottom and the first match wins."
msgstr ""

#: src/tuples-and-arrays/match.md:6
msgid "The patterns can be simple values, similarly to `switch` in C and C++:"
msgstr ""

#: src/tuples-and-arrays/match.md:10
msgid "'x'"
msgstr "'x'"

#: src/tuples-and-arrays/match.md:12
msgid "'q'"
msgstr "'q'"

#: src/tuples-and-arrays/match.md:12
msgid "\"Quitting\""
msgstr ""

#: src/tuples-and-arrays/match.md:13 src/std-traits/solution.md:16
#: src/error-handling/exercise.md:64 src/error-handling/exercise.md:66
#: src/error-handling/solution.md:63 src/error-handling/solution.md:65
msgid "'a'"
msgstr "'a'"

#: src/tuples-and-arrays/match.md:13
msgid "'s'"
msgstr "'s'"

#: src/tuples-and-arrays/match.md:13
msgid "'w'"
msgstr "'w'"

#: src/tuples-and-arrays/match.md:13
msgid "'d'"
msgstr "'d'"

#: src/tuples-and-arrays/match.md:13
msgid "\"Moving around\""
msgstr ""

#: src/tuples-and-arrays/match.md:14 src/error-handling/exercise.md:56
#: src/error-handling/exercise.md:58 src/error-handling/exercise.md:66
#: src/error-handling/solution.md:55 src/error-handling/solution.md:57
#: src/error-handling/solution.md:65
msgid "'0'"
msgstr "'0'"

#: src/tuples-and-arrays/match.md:14 src/error-handling/exercise.md:56
#: src/error-handling/exercise.md:58 src/error-handling/exercise.md:66
#: src/error-handling/solution.md:55 src/error-handling/solution.md:57
#: src/error-handling/solution.md:65
msgid "'9'"
msgstr "'9'"

#: src/tuples-and-arrays/match.md:14
msgid "\"Number input\""
msgstr ""

#: src/tuples-and-arrays/match.md:15
msgid "\"Lowercase: {key}\""
msgstr ""

#: src/tuples-and-arrays/match.md:16
msgid "\"Something else\""
msgstr ""

#: src/tuples-and-arrays/match.md:21
msgid ""
"The `_` pattern is a wildcard pattern which matches any value. The "
"expressions _must_ be irrefutable, meaning that it covers every possibility, "
"so `_` is often used as the final catch-all case."
msgstr ""

#: src/tuples-and-arrays/match.md:25
msgid ""
"Match can be used as an expression. Just like like `if`, each match arm must "
"have the same type. The type is the last expression of the block, if any. In "
"the example above, the type is `()`."
msgstr ""

#: src/tuples-and-arrays/match.md:28
msgid ""
"A variable in the pattern (`key` in this example) will create a binding that "
"can be used within the match arm."
msgstr ""

#: src/tuples-and-arrays/match.md:31
msgid "A match guard causes the arm to match only if the condition is true."
msgstr ""

#: src/tuples-and-arrays/match.md:36 src/user-defined-types/named-structs.md:41
#: src/user-defined-types/enums.md:29 src/methods-and-traits/methods.md:65
msgid "Key Points:"
msgstr ""

#: src/tuples-and-arrays/match.md:37
msgid ""
"You might point out how some specific characters are being used when in a "
"pattern"
msgstr ""

#: src/tuples-and-arrays/match.md:38
msgid "`|` as an `or`"
msgstr ""

#: src/tuples-and-arrays/match.md:39
msgid "`..` can expand as much as it needs to be"
msgstr ""

#: src/tuples-and-arrays/match.md:40
msgid "`1..=5` represents an inclusive range"
msgstr ""

#: src/tuples-and-arrays/match.md:41
msgid "`_` is a wild card"
msgstr ""

#: src/tuples-and-arrays/match.md:43
msgid ""
"Match guards as a separate syntax feature are important and necessary when "
"we wish to concisely express more complex ideas than patterns alone would "
"allow."
msgstr ""

#: src/tuples-and-arrays/match.md:44
msgid ""
"They are not the same as separate `if` expression inside of the match arm. "
"An `if` expression inside of the branch block (after `=>`) happens after the "
"match arm is selected. Failing the `if` condition inside of that block won't "
"result in other arms of the original `match` expression being considered."
msgstr ""

#: src/tuples-and-arrays/match.md:46
msgid ""
"The condition defined in the guard applies to every expression in a pattern "
"with an `|`."
msgstr ""

#: src/tuples-and-arrays/destructuring.md:3
msgid ""
"Destructuring is a way of extracting data from a data structure by writing a "
"pattern that is matched up to the data structure, binding variables to "
"subcomponents of the data structure."
msgstr ""

#: src/tuples-and-arrays/destructuring.md:7
msgid "You can destructure tuples and arrays by matching on their elements:"
msgstr ""

#: src/tuples-and-arrays/destructuring.md:18
msgid "\"on Y axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:19
msgid "\"on X axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:20
msgid "\"left of Y axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:21
msgid "\"below X axis\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:22
msgid "\"first quadrant\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:33
msgid "\"Tell me about {triple:?}\""
msgstr "\"Fort√¶l mig om {triple:?}\""

#: src/tuples-and-arrays/destructuring.md:35
msgid "\"First is 0, y = {y}, and z = {z}\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:36
msgid "\"First is 1 and the rest were ignored\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:37
msgid "\"All elements were ignored\""
msgstr ""

#: src/tuples-and-arrays/destructuring.md:45
msgid "Create a new array pattern using `_` to represent an element."
msgstr ""

#: src/tuples-and-arrays/destructuring.md:46
msgid "Add more values to the array."
msgstr ""

#: src/tuples-and-arrays/destructuring.md:47
msgid ""
"Point out that how `..` will expand to account for different number of "
"elements."
msgstr ""

#: src/tuples-and-arrays/destructuring.md:48
msgid "Show matching against the tail with patterns `[.., b]` and `[a@..,b]`"
msgstr ""

#: src/tuples-and-arrays/exercise.md:3
msgid "Arrays can contain other arrays:"
msgstr ""

#: src/tuples-and-arrays/exercise.md:9
msgid "What is the type of this variable?"
msgstr ""

#: src/tuples-and-arrays/exercise.md:11
msgid ""
"Use an array such as the above to write a function `transpose` which will "
"transpose a matrix (turn rows into columns):"
msgstr ""

#: src/tuples-and-arrays/exercise.md:21
msgid "Hard-code both functions to operate on 3 √ó 3 matrices."
msgstr ""

#: src/tuples-and-arrays/exercise.md:23
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and implement the "
"functions:"
msgstr ""

#: src/tuples-and-arrays/exercise.md:27 src/methods-and-traits/exercise.md:20
#: src/borrowing/exercise.md:14 src/unsafe-rust/exercise.md:49
msgid "// TODO: remove this when you're done with your implementation.\n"
msgstr ""

#: src/tuples-and-arrays/exercise.md:36 src/tuples-and-arrays/solution.md:34
msgid "// <-- the comment makes rustfmt add a newline\n"
msgstr ""

#: src/tuples-and-arrays/exercise.md:41 src/tuples-and-arrays/solution.md:39
#, fuzzy
msgid "\"matrix: {:#?}\""
msgstr "\"matrix:\""

#: src/tuples-and-arrays/exercise.md:43 src/tuples-and-arrays/solution.md:41
#, fuzzy
msgid "\"transposed: {:#?}\""
msgstr "\"transponeret:\""

#: src/tuples-and-arrays/exercise.md:50
msgid ""
"The `transpose` function takes its argument by value, but we haven't covered "
"ownership yet. Try printing a matrix after it has been transposed, to show "
"the \"value has been moved\" error, as a preview of ownership and move "
"semantics."
msgstr ""

#: src/tuples-and-arrays/solution.md:17 src/tuples-and-arrays/solution.md:25
msgid "//\n"
msgstr ""

#: src/references.md:4
msgid "[Shared References](./references/shared.md) (10 minutes)"
msgstr ""

#: src/references.md:5
msgid "[Exclusive References](./references/exclusive.md) (10 minutes)"
msgstr ""

#: src/references.md:6
msgid "[Exercise: Geometry](./references/exercise.md) (30 minutes)"
msgstr ""

#: src/references.md:8 src/user-defined-types.md:11 src/pattern-matching.md:8
msgid "This segment should take about 50 minutes"
msgstr ""

#: src/references/shared.md:3
msgid ""
"A reference provides a way to access another value without taking "
"responsibility for the value, and is also called \"borrowing\". Shared "
"references are read-only, and the referenced data cannot change."
msgstr ""

#: src/references/shared.md:19
msgid ""
"A shared reference to a type `T` has type `&T`. A reference value is made "
"with the `&` operator. The `*` operator \"dereferences\" a reference, "
"yielding its value."
msgstr ""

#: src/references/shared.md:22
msgid "Rust will statically forbid dangling references:"
msgstr ""

#: src/references/shared.md:35
msgid ""
"A reference is said to \"borrow\" the value it refers to, and this is a good "
"model for students not familiar with pointers: code can use the reference to "
"access the value, but is still \"owned\" by the original variable. The "
"course will get into more detail on ownership in day 3."
msgstr ""

#: src/references/shared.md:40
msgid ""
"References are implemented as pointers, and a key advantage is that they can "
"be much smaller than the thing they point to. Students familiar with C or C+"
"+ will recognize references as pointers. Later parts of the course will "
"cover how Rust prevents the memory-safety bugs that come from using raw "
"pointers."
msgstr ""

#: src/references/shared.md:45
msgid ""
"Rust does not automatically create references for you - the `&` is always "
"required."
msgstr ""

#: src/references/shared.md:48
msgid ""
"Rust will auto-dereference in some cases, in particular when invoking "
"methods (try `r.count_ones()`). There is no need for an `->` operator like "
"in C++."
msgstr ""

#: src/references/shared.md:52
msgid ""
"In this example, `r` is mutable so that it can be reassigned (`r = &b`). "
"Note that this re-binds `r`, so that it refers to something else. This is "
"different from C++, where assignment to a reference changes the referenced "
"value."
msgstr ""

#: src/references/shared.md:57
msgid ""
"A shared reference does not allow modifying the value it refers to, even if "
"that value was mutable. Try `*r = 'X'`."
msgstr ""

#: src/references/shared.md:60
msgid ""
"Rust is tracking the lifetimes of all references to ensure they live long "
"enough. Dangling references cannot occur in safe Rust. `x_axis` would return "
"a reference to `point`, but `point` will be deallocated when the function "
"returns, so this will not compile."
msgstr ""

#: src/references/shared.md:65
msgid "We will talk more about borrowing when we get to ownership."
msgstr ""

#: src/references/exclusive.md:3
msgid ""
"Exclusive references, also known as mutable references, allow changing the "
"value they refer to. They have type `&mut T`."
msgstr ""

#: src/references/exclusive.md:21
msgid ""
"\"Exclusive\" means that only this reference can be used to access the "
"value. No other references (shared or exclusive) can exist at the same time, "
"and the referenced value cannot be accessed while the exclusive reference "
"exists. Try making an `&point.0` or changing `point.0` while `x_coord` is "
"alive."
msgstr ""

#: src/references/exclusive.md:26
msgid ""
"Be sure to note the difference between `let mut x_coord: &i32` and `let "
"x_coord: &mut i32`. The first one represents a shared reference which can be "
"bound to different values, while the second represents an exclusive "
"reference to a mutable value."
msgstr ""

#: src/references/exercise.md:3
msgid ""
"We will create a few utility functions for 3-dimensional geometry, "
"representing a point as `[f64;3]`. It is up to you to determine the function "
"signatures."
msgstr ""

#: src/references/exercise.md:7
msgid ""
"// Calculate the magnitude of a vector by summing the squares of its "
"coordinates\n"
"// and taking the square root. Use the `sqrt()` method to calculate the "
"square\n"
"// root, like `v.sqrt()`.\n"
msgstr ""

#: src/references/exercise.md:15
msgid ""
"// Normalize a vector by calculating its magnitude and dividing all of its\n"
"// coordinates by that magnitude.\n"
msgstr ""

#: src/references/exercise.md:23
msgid "// Use the following `main` to test your work.\n"
msgstr ""

#: src/references/exercise.md:28 src/references/solution.md:23
msgid "\"Magnitude of a unit vector: {}\""
msgstr ""

#: src/references/exercise.md:33 src/references/solution.md:28
msgid "\"Magnitude of {v:?}: {}\""
msgstr ""

#: src/references/exercise.md:35 src/references/solution.md:30
msgid "\"Magnitude of {v:?} after normalization: {}\""
msgstr ""

#: src/references/solution.md:4
msgid "/// Calculate the magnitude of the given vector.\n"
msgstr ""

#: src/references/solution.md:12
msgid ""
"/// Change the magnitude of the vector to 1.0 without changing its "
"direction.\n"
msgstr ""

#: src/user-defined-types.md:4
msgid "[Named Structs](./user-defined-types/named-structs.md) (10 minutes)"
msgstr ""

#: src/user-defined-types.md:5
msgid "[Tuple Structs](./user-defined-types/tuple-structs.md) (10 minutes)"
msgstr ""

#: src/user-defined-types.md:6
msgid "[Enums](./user-defined-types/enums.md) (5 minutes)"
msgstr ""

#: src/user-defined-types.md:7
msgid ""
"[Static and Const](./user-defined-types/static-and-const.md) (5 minutes)"
msgstr ""

#: src/user-defined-types.md:8
msgid "[Type Aliases](./user-defined-types/aliases.md) (2 minutes)"
msgstr ""

#: src/user-defined-types.md:9
msgid ""
"[Exercise: Elevator Events](./user-defined-types/exercise.md) (15 minutes)"
msgstr ""

#: src/user-defined-types/named-structs.md:3
msgid "Like C and C++, Rust has support for custom structs:"
msgstr ""

#: src/user-defined-types/named-structs.md:12
msgid "\"{} is {} years old\""
msgstr ""

#: src/user-defined-types/named-structs.md:17
#: src/android/interoperability/with-c/bindgen.md:87
msgid "\"Peter\""
msgstr "\"Peter\""

#: src/user-defined-types/named-structs.md:25
msgid "\"Avery\""
msgstr ""

#: src/user-defined-types/named-structs.md:31
msgid "\"Jackie\""
msgstr "\"Jackie\""

#: src/user-defined-types/named-structs.md:43
msgid "Structs work like in C or C++."
msgstr ""

#: src/user-defined-types/named-structs.md:44
msgid "Like in C++, and unlike in C, no typedef is needed to define a type."
msgstr ""

#: src/user-defined-types/named-structs.md:45
msgid "Unlike in C++, there is no inheritance between structs."
msgstr ""

#: src/user-defined-types/named-structs.md:46
msgid ""
"This may be a good time to let people know there are different types of "
"structs."
msgstr ""

#: src/user-defined-types/named-structs.md:47
msgid ""
"Zero-sized structs (e.g. `struct Foo;`) might be used when implementing a "
"trait on some type but don‚Äôt have any data that you want to store in the "
"value itself."
msgstr ""

#: src/user-defined-types/named-structs.md:48
msgid ""
"The next slide will introduce Tuple structs, used when the field names are "
"not important."
msgstr ""

#: src/user-defined-types/named-structs.md:49
msgid ""
"If you already have variables with the right names, then you can create the "
"struct using a shorthand."
msgstr ""

#: src/user-defined-types/named-structs.md:51
msgid ""
"The syntax `..peter` allows us to copy the majority of the fields from the "
"old struct without having to explicitly type it all out. It must always be "
"the last element."
msgstr ""

#: src/user-defined-types/tuple-structs.md:6
msgid "If the field names are unimportant, you can use a tuple struct:"
msgstr ""

#: src/user-defined-types/tuple-structs.md:13
msgid "\"({}, {})\""
msgstr "\"({}, {})\""

#: src/user-defined-types/tuple-structs.md:17
msgid "This is often used for single-field wrappers (called newtypes):"
msgstr ""

#: src/user-defined-types/tuple-structs.md:24
msgid "\"Ask a rocket scientist at NASA\""
msgstr ""

#: src/user-defined-types/tuple-structs.md:28
#: src/android/interoperability/cpp/cpp-bridge.md:50
#: src/bare-metal/microcontrollers/type-state.md:14
#: src/async/pitfalls/cancellation.md:96 src/async/pitfalls/cancellation.md:99
msgid "// ...\n"
msgstr "// ...\n"

#: src/user-defined-types/tuple-structs.md:41
msgid ""
"Newtypes are a great way to encode additional information about the value in "
"a primitive type, for example:"
msgstr ""

#: src/user-defined-types/tuple-structs.md:42
msgid "The number is measured in some units: `Newtons` in the example above."
msgstr ""

#: src/user-defined-types/tuple-structs.md:43
msgid ""
"The value passed some validation when it was created, so you no longer have "
"to validate it again at every use: `PhoneNumber(String)` or `OddNumber(u32)`."
msgstr ""

#: src/user-defined-types/tuple-structs.md:44
msgid ""
"Demonstrate how to add a `f64` value to a `Newtons` type by accessing the "
"single field in the newtype."
msgstr ""

#: src/user-defined-types/tuple-structs.md:45
msgid ""
"Rust generally doesn‚Äôt like inexplicit things, like automatic unwrapping or "
"for instance using booleans as integers."
msgstr ""

#: src/user-defined-types/tuple-structs.md:46
msgid "Operator overloading is discussed on Day 3 (generics)."
msgstr ""

#: src/user-defined-types/tuple-structs.md:47
msgid ""
"The example is a subtle reference to the [Mars Climate Orbiter](https://en."
"wikipedia.org/wiki/Mars_Climate_Orbiter) failure."
msgstr ""

#: src/user-defined-types/enums.md:3
msgid ""
"The `enum` keyword allows the creation of a type which has a few different "
"variants:"
msgstr ""

#: src/user-defined-types/enums.md:15
msgid "// Simple variant\n"
msgstr ""

#: src/user-defined-types/enums.md:16
msgid "// Tuple variant\n"
msgstr ""

#: src/user-defined-types/enums.md:17
msgid "// Struct variant\n"
msgstr ""

#: src/user-defined-types/enums.md:22
msgid "\"On this turn: {:?}\""
msgstr ""

#: src/user-defined-types/enums.md:31
msgid "Enumerations allow you to collect a set of values under one type"
msgstr ""

#: src/user-defined-types/enums.md:32
msgid ""
"Direction has two variants, `Left` and `Right`. These are referred to with "
"the `Direction::..` namespace."
msgstr ""

#: src/user-defined-types/enums.md:33
msgid ""
"PlayerMove shows the three types of variants. Rust will also store a "
"discriminant so that it can determine at runtime which variant is in a value."
msgstr ""

#: src/user-defined-types/enums.md:34
msgid "This might be a good time to compare Structs and Enums:"
msgstr ""

#: src/user-defined-types/enums.md:35
msgid ""
"In both, you can have a simple version without fields (unit struct) or one "
"with different types of fields (variant payloads)."
msgstr ""

#: src/user-defined-types/enums.md:36
msgid ""
"You could even implement the different variants of an enum with separate "
"structs but then they wouldn‚Äôt be the same type as they would if they were "
"all defined in an enum."
msgstr ""

#: src/user-defined-types/enums.md:37
msgid "Rust uses minimal space to store the discriminant."
msgstr ""

#: src/user-defined-types/enums.md:38
msgid "If necessary, it stores an integer of the smallest required size"
msgstr ""

#: src/user-defined-types/enums.md:39
msgid ""
"If the allowed variant values do not cover all bit patterns, it will use "
"invalid bit patterns to encode the discriminant (the \"niche "
"optimization\"). For example, `Option<&u8>` stores either a pointer to an "
"integer or `NULL` for the `None` variant."
msgstr ""

#: src/user-defined-types/enums.md:43
msgid ""
"You can control the discriminant if needed (e.g., for compatibility with C):"
msgstr ""

#: src/user-defined-types/enums.md:61
msgid ""
"Without `repr`, the discriminant type takes 2 bytes, because 10001 fits 2 "
"bytes."
msgstr ""

#: src/user-defined-types/enums.md:64
#: src/user-defined-types/static-and-const.md:68
#: src/memory-management/review.md:48 src/memory-management/move.md:92
#: src/smart-pointers/box.md:73 src/borrowing/shared.md:32
msgid "More to Explore"
msgstr ""

#: src/user-defined-types/enums.md:66
msgid ""
"Rust has several optimizations it can employ to make enums take up less "
"space."
msgstr ""

#: src/user-defined-types/enums.md:68
msgid ""
"Niche optimization: Rust will merge unused bit patterns for the enum "
"discriminant."
msgstr ""

#: src/user-defined-types/enums.md:71
msgid ""
"Null pointer optimization: For [some types](https://doc.rust-lang.org/std/"
"option/#representation), Rust guarantees that `size_of::<T>()` equals "
"`size_of::<Option<T>>()`."
msgstr ""

#: src/user-defined-types/enums.md:75
msgid ""
"Example code if you want to show how the bitwise representation _may_ look "
"like in practice. It's important to note that the compiler provides no "
"guarantees regarding this representation, therefore this is totally unsafe."
msgstr ""

#: src/user-defined-types/enums.md:112
msgid ""
"More complex example if you want to discuss what happens when we chain more "
"than 256 `Option`s together."
msgstr ""

#: src/user-defined-types/static-and-const.md:3
msgid ""
"Static and constant variables are two different ways to create globally-"
"scoped values that cannot be moved or reallocated during the execution of "
"the program."
msgstr ""

#: src/user-defined-types/static-and-const.md:6
msgid "`const`"
msgstr ""

#: src/user-defined-types/static-and-const.md:8
msgid ""
"Constant variables are evaluated at compile time and their values are "
"inlined wherever they are used:"
msgstr ""

#: src/user-defined-types/static-and-const.md:30
msgid ""
"According to the [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html) these are inlined upon use."
msgstr ""

#: src/user-defined-types/static-and-const.md:32
msgid ""
"Only functions marked `const` can be called at compile time to generate "
"`const` values. `const` functions can however be called at runtime."
msgstr ""

#: src/user-defined-types/static-and-const.md:34
msgid "`static`"
msgstr ""

#: src/user-defined-types/static-and-const.md:36
msgid ""
"Static variables will live during the whole execution of the program, and "
"therefore will not move:"
msgstr ""

#: src/user-defined-types/static-and-const.md:39
msgid "\"Welcome to RustOS 3.14\""
msgstr "\"Velkommen til RustOS 3.14\""

#: src/user-defined-types/static-and-const.md:42
msgid "\"{BANNER}\""
msgstr "\"{BANNER}\""

#: src/user-defined-types/static-and-const.md:46
msgid ""
"As noted in the [Rust RFC Book](https://rust-lang.github.io/rfcs/0246-const-"
"vs-static.html), these are not inlined upon use and have an actual "
"associated memory location.  This is useful for unsafe and embedded code, "
"and the variable lives through the entirety of the program execution. When a "
"globally-scoped value does not have a reason to need object identity, "
"`const` is generally preferred."
msgstr ""

#: src/user-defined-types/static-and-const.md:53
msgid "Mention that `const` behaves semantically similar to C++'s `constexpr`."
msgstr ""

#: src/user-defined-types/static-and-const.md:54
msgid ""
"`static`, on the other hand, is much more similar to a `const` or mutable "
"global variable in C++."
msgstr ""

#: src/user-defined-types/static-and-const.md:55
msgid ""
"`static` provides object identity: an address in memory and state as "
"required by types with interior mutability such as `Mutex<T>`."
msgstr ""

#: src/user-defined-types/static-and-const.md:56
msgid ""
"It isn't super common that one would need a runtime evaluated constant, but "
"it is helpful and safer than using a static."
msgstr ""

#: src/user-defined-types/static-and-const.md:58
msgid "Properties table:"
msgstr ""

#: src/user-defined-types/static-and-const.md:60
#: src/chromium/adding-third-party-crates.md:6
msgid "Property"
msgstr "Egenskab"

#: src/user-defined-types/static-and-const.md:60
msgid "Static"
msgstr "Statisk"

#: src/user-defined-types/static-and-const.md:60
msgid "Constant"
msgstr "Konstant"

#: src/user-defined-types/static-and-const.md:62
msgid "Has an address in memory"
msgstr "Har en adresse i hukommelsen"

#: src/user-defined-types/static-and-const.md:62
#: src/user-defined-types/static-and-const.md:63
#: src/user-defined-types/static-and-const.md:65
#: src/user-defined-types/static-and-const.md:66
#: src/chromium/adding-third-party-crates/resolving-problems.md:12
#: src/chromium/adding-third-party-crates/resolving-problems.md:13
#: src/chromium/adding-third-party-crates/resolving-problems.md:14
msgid "Yes"
msgstr "Ja"

#: src/user-defined-types/static-and-const.md:62
msgid "No (inlined)"
msgstr "Nej (inlinet)"

#: src/user-defined-types/static-and-const.md:63
msgid "Lives for the entire duration of the program"
msgstr ""

#: src/user-defined-types/static-and-const.md:63
#: src/user-defined-types/static-and-const.md:64
#: src/user-defined-types/static-and-const.md:66
#: src/chromium/adding-third-party-crates/resolving-problems.md:15
#: src/chromium/adding-third-party-crates/resolving-problems.md:16
msgid "No"
msgstr "Nej"

#: src/user-defined-types/static-and-const.md:64
msgid "Can be mutable"
msgstr ""

#: src/user-defined-types/static-and-const.md:64
msgid "Yes (unsafe)"
msgstr "Ja (_unsafe_)"

#: src/user-defined-types/static-and-const.md:65
msgid "Evaluated at compile time"
msgstr "Evalueret ved kompileringstid"

#: src/user-defined-types/static-and-const.md:65
msgid "Yes (initialised at compile time)"
msgstr "Ja (initialiseret ved kompileringstid)"

#: src/user-defined-types/static-and-const.md:66
msgid "Inlined wherever it is used"
msgstr ""

#: src/user-defined-types/static-and-const.md:70
msgid ""
"Because `static` variables are accessible from any thread, they must be "
"`Sync`. Interior mutability is possible through a [`Mutex`](https://doc.rust-"
"lang.org/std/sync/struct.Mutex.html), atomic or similar."
msgstr ""

#: src/user-defined-types/static-and-const.md:74
msgid "Thread-local data can be created with the macro `std::thread_local`."
msgstr ""

#: src/user-defined-types/aliases.md:3
msgid ""
"A type alias creates a name for another type. The two types can be used "
"interchangeably."
msgstr ""

#: src/user-defined-types/aliases.md:12
msgid "// Aliases are more useful with long, complex types:\n"
msgstr ""

#: src/user-defined-types/aliases.md:21
msgid "C programmers will recognize this as similar to a `typedef`."
msgstr ""

#: src/user-defined-types/exercise.md:3
msgid ""
"We will create a data structure to represent an event in an elevator control "
"system. It is up to you to define the types and functions to construct "
"various events. Use `#[derive(Debug)]` to allow the types to be formatted "
"with `{:?}`."
msgstr ""

#: src/user-defined-types/exercise.md:8 src/user-defined-types/solution.md:39
msgid "/// The car has arrived on the given floor.\n"
msgstr ""

#: src/user-defined-types/exercise.md:12 src/user-defined-types/solution.md:44
#, fuzzy
msgid "/// The car doors have opened.\n"
msgstr "/// Clear to send.\n"

#: src/user-defined-types/exercise.md:17 src/user-defined-types/solution.md:49
#, fuzzy
msgid "/// The car doors have closed.\n"
msgstr "/// Clear to send.\n"

#: src/user-defined-types/exercise.md:22 src/user-defined-types/solution.md:54
msgid ""
"/// A directional button was pressed in an elevator lobby on the given "
"floor.\n"
msgstr ""

#: src/user-defined-types/exercise.md:27 src/user-defined-types/solution.md:59
msgid "/// A floor button was pressed in the elevator car.\n"
msgstr ""

#: src/user-defined-types/exercise.md:35 src/user-defined-types/solution.md:67
msgid "\"A ground floor passenger has pressed the up button: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:39 src/user-defined-types/solution.md:71
msgid "\"The car has arrived on the ground floor: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:42 src/user-defined-types/solution.md:74
#, fuzzy
msgid "\"The car door opened: {:?}\""
msgstr "\"Modtaget: {:?}\""

#: src/user-defined-types/exercise.md:44 src/user-defined-types/solution.md:76
msgid "\"A passenger has pressed the 3rd floor button: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:47 src/user-defined-types/solution.md:79
msgid "\"The car door closed: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:48 src/user-defined-types/solution.md:80
msgid "\"The car has arrived on the 3rd floor: {:?}\""
msgstr ""

#: src/user-defined-types/exercise.md:52
msgid ""
"This exercise only requires creating data structures. The next part of the "
"course will cover getting data out of these structures."
msgstr ""

#: src/user-defined-types/solution.md:4
msgid ""
"/// An event in the elevator system that the controller must react to.\n"
msgstr ""

#: src/user-defined-types/solution.md:7
msgid "/// A button was pressed.\n"
msgstr ""

#: src/user-defined-types/solution.md:10
msgid "/// The car has arrived at the given floor.\n"
msgstr ""

#: src/user-defined-types/solution.md:13
msgid "/// The car's doors have opened.\n"
msgstr ""

#: src/user-defined-types/solution.md:16
msgid "/// The car's doors have closed.\n"
msgstr ""

#: src/user-defined-types/solution.md:19
msgid "/// A floor is represented as an integer.\n"
msgstr ""

#: src/user-defined-types/solution.md:22
msgid "/// A direction of travel.\n"
msgstr ""

#: src/user-defined-types/solution.md:29
msgid "/// A user-accessible button.\n"
msgstr ""

#: src/user-defined-types/solution.md:33
msgid "/// A button in the elevator lobby on the given floor.\n"
msgstr ""

#: src/user-defined-types/solution.md:36
msgid "/// A floor button within the car.\n"
msgstr ""

#: src/welcome-day-2.md:1
msgid "Welcome to Day 2"
msgstr "Velkommen til Dag 2"

#: src/welcome-day-2.md:3
msgid ""
"Now that we have seen a fair amount of Rust, today will focus on Rust's type "
"system:"
msgstr ""

#: src/welcome-day-2.md:6
msgid "Pattern matching: extracting data from structures."
msgstr ""

#: src/welcome-day-2.md:7
msgid "Methods: associating functions with types."
msgstr ""

#: src/welcome-day-2.md:8
msgid "Traits: behaviors shared by multiple types."
msgstr ""

#: src/welcome-day-2.md:9
msgid "Generics: parameterizing types on other types."
msgstr ""

#: src/welcome-day-2.md:10
msgid ""
"Standard library types and traits: a tour of Rust's rich standard library."
msgstr ""

#: src/welcome-day-2.md:15
msgid "[Welcome](./welcome-day-2.md) (3 minutes)"
msgstr ""

#: src/welcome-day-2.md:16
msgid "[Pattern Matching](./pattern-matching.md) (50 minutes)"
msgstr ""

#: src/welcome-day-2.md:17
msgid "[Methods and Traits](./methods-and-traits.md) (1 hour and 5 minutes)"
msgstr ""

#: src/welcome-day-2.md:18
msgid "[Generics](./generics.md) (45 minutes)"
msgstr ""

#: src/welcome-day-2.md:20
msgid ""
"Including 10 minute breaks, this session should take about 3 hours and 15 "
"minutes"
msgstr ""

#: src/pattern-matching.md:4
msgid "[Destructuring](./pattern-matching/destructuring.md) (10 minutes)"
msgstr ""

#: src/pattern-matching.md:5
msgid "[Let Control Flow](./pattern-matching/let-control-flow.md) (10 minutes)"
msgstr ""

#: src/pattern-matching.md:6
msgid ""
"[Exercise: Expression Evaluation](./pattern-matching/exercise.md) (30 "
"minutes)"
msgstr ""

#: src/pattern-matching/destructuring.md:3
msgid "Like tuples, structs and enums can also be destructured by matching:"
msgstr ""

#: src/pattern-matching/destructuring.md:5
#: src/pattern-matching/destructuring.md:58
msgid "Structs"
msgstr "Strukturer"

#: src/pattern-matching/destructuring.md:17
msgid "\"x.0 = 1, b = {b}, y = {y}\""
msgstr "\"x.0 = 1, b = {b}, y = {y}\""

#: src/pattern-matching/destructuring.md:18
msgid "\"y = 2, x = {i:?}\""
msgstr "\"y = 2, x = {i:?}\""

#: src/pattern-matching/destructuring.md:19
msgid "\"y = {y}, other fields were ignored\""
msgstr "\"y = {y}, andre felter blev ignoreret\""

#: src/pattern-matching/destructuring.md:25
msgid ""
"Patterns can also be used to bind variables to parts of your values. This is "
"how you inspect the structure of your types. Let us start with a simple "
"`enum` type:"
msgstr ""

#: src/pattern-matching/destructuring.md:38
msgid "\"cannot divide {n} into two equal parts\""
msgstr ""

#: src/pattern-matching/destructuring.md:45
msgid "\"{n} divided in two is {half}\""
msgstr ""

#: src/pattern-matching/destructuring.md:46
msgid "\"sorry, an error happened: {msg}\""
msgstr ""

#: src/pattern-matching/destructuring.md:51
msgid ""
"Here we have used the arms to _destructure_ the `Result` value. In the first "
"arm, `half` is bound to the value inside the `Ok` variant. In the second "
"arm, `msg` is bound to the error message."
msgstr ""

#: src/pattern-matching/destructuring.md:60
msgid "Change the literal values in `foo` to match with the other patterns."
msgstr ""

#: src/pattern-matching/destructuring.md:61
msgid "Add a new field to `Foo` and make changes to the pattern as needed."
msgstr ""

#: src/pattern-matching/destructuring.md:62
msgid ""
"The distinction between a capture and a constant expression can be hard to "
"spot. Try changing the `2` in the second arm to a variable, and see that it "
"subtly doesn't work. Change it to a `const` and see it working again."
msgstr ""

#: src/pattern-matching/destructuring.md:69
msgid ""
"The `if`/`else` expression is returning an enum that is later unpacked with "
"a `match`."
msgstr ""

#: src/pattern-matching/destructuring.md:70
msgid ""
"You can try adding a third variant to the enum definition and displaying the "
"errors when running the code. Point out the places where your code is now "
"inexhaustive and how the compiler tries to give you hints."
msgstr ""

#: src/pattern-matching/destructuring.md:71
msgid ""
"The values in the enum variants can only be accessed after being pattern "
"matched. The pattern binds references to the fields in the \"match arm\" "
"after the `=>`."
msgstr ""

#: src/pattern-matching/destructuring.md:72
msgid ""
"Demonstrate what happens when the search is inexhaustive. Note the advantage "
"the Rust compiler provides by confirming when all cases are handled."
msgstr ""

#: src/pattern-matching/let-control-flow.md:3
msgid ""
"Rust has a few control flow constructs which differ from other languages. "
"They are used for pattern matching:"
msgstr ""

#: src/pattern-matching/let-control-flow.md:6
#: src/pattern-matching/let-control-flow.md:9
msgid "`if let` expressions"
msgstr "`if let`-udtryk"

#: src/pattern-matching/let-control-flow.md:7
msgid "`while let` expressions"
msgstr "`while let`-udtryk"

#: src/pattern-matching/let-control-flow.md:8
msgid "`match` expressions"
msgstr "`match`-udtryk"

#: src/pattern-matching/let-control-flow.md:11
msgid ""
"The [`if let` expression](https://doc.rust-lang.org/reference/expressions/if-"
"expr.html#if-let-expressions) lets you execute different code depending on "
"whether a value matches a pattern:"
msgstr ""

#: src/pattern-matching/let-control-flow.md:23
#, fuzzy
msgid "\"slept for {:?}\""
msgstr "\"expr: {:?}\""

#: src/pattern-matching/let-control-flow.md:32
msgid ""
"For the common case of matching a pattern and returning from the function, "
"use [`let else`](https://doc.rust-lang.org/rust-by-example/flow_control/"
"let_else.html). The \"else\" case must diverge (`return`, `break`, or panic "
"- anything but falling off the end of the block)."
msgstr ""

#: src/pattern-matching/let-control-flow.md:43
#: src/pattern-matching/let-control-flow.md:101
#, fuzzy
msgid "\"got None\""
msgstr "\"none\""

#: src/pattern-matching/let-control-flow.md:49
#: src/pattern-matching/let-control-flow.md:105
#, fuzzy
msgid "\"got empty string\""
msgstr "\"En streng\""

#: src/pattern-matching/let-control-flow.md:55
#: src/pattern-matching/let-control-flow.md:109
msgid "\"not a hex digit\""
msgstr ""

#: src/pattern-matching/let-control-flow.md:60
#: src/pattern-matching/solution.md:128
msgid "\"result: {:?}\""
msgstr "\"result: {:?}\""

#: src/pattern-matching/let-control-flow.md:60
#: src/methods-and-traits/exercise.md:121
#: src/methods-and-traits/exercise.md:122
#: src/methods-and-traits/exercise.md:123 src/generics/trait-bounds.md:16
#: src/smart-pointers/solution.md:66 src/smart-pointers/solution.md:69
#: src/testing/googletest.md:11 src/testing/googletest.md:12
#: src/testing/solution.md:89
msgid "\"foo\""
msgstr "\"foo\""

#: src/pattern-matching/let-control-flow.md:64
msgid ""
"Like with `if let`, there is a [`while let`](https://doc.rust-lang.org/"
"reference/expressions/loop-expr.html#predicate-pattern-loops) variant which "
"repeatedly tests a value against a pattern:"
msgstr ""

#: src/pattern-matching/let-control-flow.md:78
msgid ""
"Here [`String::pop`](https://doc.rust-lang.org/stable/std/string/struct."
"String.html#method.pop) returns `Some(c)` until the string is empty, after "
"which it will return `None`. The `while let` lets us keep iterating through "
"all items."
msgstr ""

#: src/pattern-matching/let-control-flow.md:86
msgid "if-let"
msgstr ""

#: src/pattern-matching/let-control-flow.md:88
msgid ""
"Unlike `match`, `if let` does not have to cover all branches. This can make "
"it more concise than `match`."
msgstr ""

#: src/pattern-matching/let-control-flow.md:89
msgid "A common usage is handling `Some` values when working with `Option`."
msgstr ""

#: src/pattern-matching/let-control-flow.md:90
msgid ""
"Unlike `match`, `if let` does not support guard clauses for pattern matching."
msgstr ""

#: src/pattern-matching/let-control-flow.md:92
msgid "let-else"
msgstr ""

#: src/pattern-matching/let-control-flow.md:94
msgid ""
"`if-let`s can pile up, as shown.  The `let-else` construct supports "
"flattening this nested code. Rewrite the awkward version for students, so "
"they can see the transformation."
msgstr ""

#: src/pattern-matching/let-control-flow.md:97
msgid "The rewritten version is:"
msgstr ""

#: src/pattern-matching/let-control-flow.md:116
#, fuzzy
msgid "while-let"
msgstr "`while let`-lykker"

#: src/pattern-matching/let-control-flow.md:118
msgid ""
"Point out that the `while let` loop will keep going as long as the value "
"matches the pattern."
msgstr ""

#: src/pattern-matching/let-control-flow.md:119
msgid ""
"You could rewrite the `while let` loop as an infinite loop with an if "
"statement that breaks when there is no value to unwrap for `name.pop()`. The "
"`while let` provides syntactic sugar for the above scenario."
msgstr ""

#: src/pattern-matching/exercise.md:3
msgid ""
"Let's write a simple recursive evaluator for arithmetic expressions. Start "
"with an enum defining the binary operations:"
msgstr ""

#: src/pattern-matching/exercise.md:7 src/pattern-matching/solution.md:4
msgid "/// An operation to perform on two subexpressions.\n"
msgstr ""

#: src/pattern-matching/exercise.md:15 src/pattern-matching/solution.md:12
msgid "/// An expression, in tree form.\n"
msgstr ""

#: src/pattern-matching/exercise.md:19 src/pattern-matching/solution.md:16
msgid "/// An operation on two subexpressions.\n"
msgstr ""

#: src/pattern-matching/exercise.md:26 src/pattern-matching/solution.md:23
msgid "/// A literal value\n"
msgstr ""

#: src/pattern-matching/exercise.md:29 src/pattern-matching/solution.md:26
msgid "/// The result of evaluating an expression.\n"
msgstr ""

#: src/pattern-matching/exercise.md:33 src/pattern-matching/solution.md:30
msgid "/// Evaluation was successful, with the given result.\n"
msgstr ""

#: src/pattern-matching/exercise.md:35 src/pattern-matching/solution.md:32
msgid "/// Evaluation failed, with the given error message.\n"
msgstr ""

#: src/pattern-matching/exercise.md:37 src/pattern-matching/solution.md:34
msgid "// Allow `Ok` and `Err` as shorthands for `Res::Ok` and `Res::Err`.\n"
msgstr ""

#: src/pattern-matching/exercise.md:96 src/pattern-matching/solution.md:55
#: src/pattern-matching/solution.md:117
msgid "\"division by zero\""
msgstr ""

#: src/pattern-matching/exercise.md:101
msgid ""
"The `Box` type here is a smart pointer, and will be covered in detail later "
"in the course. An expression can be \"boxed\" with `Box::new` as seen in the "
"tests. To evaluate a boxed expression, use the deref operator to \"unbox\" "
"it: `eval(*boxed_expr)`."
msgstr ""

#: src/pattern-matching/exercise.md:106
msgid ""
"Some expressions cannot be evaluated and will return an error. The `Res` "
"type represents either a successful value or an error with a message. This "
"is very similar to the standard-library `Result` which we will see later."
msgstr ""

#: src/pattern-matching/exercise.md:110
msgid ""
"Copy and paste the code into the Rust playground, and begin implementing "
"`eval`. The final product should pass the tests. It may be helpful to use "
"`todo!()` and get the tests to pass one-by-one. You can also skip a test "
"temporarily with `#[ignore]`:"
msgstr ""

#: src/pattern-matching/exercise.md:122
msgid ""
"If you finish early, try writing a test that results in an integer overflow. "
"How could you handle this with `Res::Err` instead of a panic?"
msgstr ""

#: src/pattern-matching/solution.md:127
msgid "\"expr: {:?}\""
msgstr "\"expr: {:?}\""

#: src/methods-and-traits.md:4
msgid "[Methods](./methods-and-traits/methods.md) (10 minutes)"
msgstr ""

#: src/methods-and-traits.md:5
msgid "[Traits](./methods-and-traits/traits.md) (10 minutes)"
msgstr ""

#: src/methods-and-traits.md:6
msgid "[Deriving](./methods-and-traits/deriving.md) (5 minutes)"
msgstr ""

#: src/methods-and-traits.md:7
msgid "[Trait Objects](./methods-and-traits/trait-objects.md) (10 minutes)"
msgstr ""

#: src/methods-and-traits.md:8
msgid "[Exercise: GUI Library](./methods-and-traits/exercise.md) (30 minutes)"
msgstr ""

#: src/methods-and-traits/methods.md:3
msgid ""
"Rust allows you to associate functions with your new types. You do this with "
"an `impl` block:"
msgstr ""

#: src/methods-and-traits/methods.md:14
msgid "// No receiver, a static method\n"
msgstr ""

#: src/methods-and-traits/methods.md:18
msgid "// Exclusive borrowed read-write access to self\n"
msgstr ""

#: src/methods-and-traits/methods.md:22
msgid "// Shared and read-only borrowed access to self\n"
msgstr ""

#: src/methods-and-traits/methods.md:23
msgid "\"Recorded {} laps for {}:\""
msgstr ""

#: src/methods-and-traits/methods.md:25
msgid "\"Lap {idx}: {lap} sec\""
msgstr ""

#: src/methods-and-traits/methods.md:29
msgid "// Exclusive ownership of self\n"
msgstr ""

#: src/methods-and-traits/methods.md:31
msgid "\"Race {} is finished, total lap time: {}\""
msgstr ""

#: src/methods-and-traits/methods.md:36
msgid "\"Monaco Grand Prix\""
msgstr "\"Monacos Grand Prix\""

#: src/methods-and-traits/methods.md:43
msgid "// race.add_lap(42);\n"
msgstr "// race.add_lap(42);\n"

#: src/methods-and-traits/methods.md:47
msgid ""
"The `self` arguments specify the \"receiver\" - the object the method acts "
"on. There are several common receivers for a method:"
msgstr ""

#: src/methods-and-traits/methods.md:50
msgid ""
"`&self`: borrows the object from the caller using a shared and immutable "
"reference. The object can be used again afterwards."
msgstr ""

#: src/methods-and-traits/methods.md:52
msgid ""
"`&mut self`: borrows the object from the caller using a unique and mutable "
"reference. The object can be used again afterwards."
msgstr ""

#: src/methods-and-traits/methods.md:54
msgid ""
"`self`: takes ownership of the object and moves it away from the caller. The "
"method becomes the owner of the object. The object will be dropped "
"(deallocated) when the method returns, unless its ownership is explicitly "
"transmitted. Complete ownership does not automatically mean mutability."
msgstr ""

#: src/methods-and-traits/methods.md:58
msgid "`mut self`: same as above, but the method can mutate the object."
msgstr ""

#: src/methods-and-traits/methods.md:59
msgid ""
"No receiver: this becomes a static method on the struct. Typically used to "
"create constructors which are called `new` by convention."
msgstr ""

#: src/methods-and-traits/methods.md:66
msgid "It can be helpful to introduce methods by comparing them to functions."
msgstr ""

#: src/methods-and-traits/methods.md:67
msgid ""
"Methods are called on an instance of a type (such as a struct or enum), the "
"first parameter represents the instance as `self`."
msgstr ""

#: src/methods-and-traits/methods.md:68
msgid ""
"Developers may choose to use methods to take advantage of method receiver "
"syntax and to help keep them more organized. By using methods we can keep "
"all the implementation code in one predictable place."
msgstr ""

#: src/methods-and-traits/methods.md:69
msgid "Point out the use of the keyword `self`, a method receiver."
msgstr ""

#: src/methods-and-traits/methods.md:70
msgid ""
"Show that it is an abbreviated term for `self: Self` and perhaps show how "
"the struct name could also be used."
msgstr ""

#: src/methods-and-traits/methods.md:71
msgid ""
"Explain that `Self` is a type alias for the type the `impl` block is in and "
"can be used elsewhere in the block."
msgstr ""

#: src/methods-and-traits/methods.md:72
msgid ""
"Note how `self` is used like other structs and dot notation can be used to "
"refer to individual fields."
msgstr ""

#: src/methods-and-traits/methods.md:73
msgid ""
"This might be a good time to demonstrate how the `&self` differs from `self` "
"by trying to run `finish` twice."
msgstr ""

#: src/methods-and-traits/methods.md:74
msgid ""
"Beyond variants on `self`, there are also [special wrapper types](https://"
"doc.rust-lang.org/reference/special-types-and-traits.html) allowed to be "
"receiver types, such as `Box<Self>`."
msgstr ""

#: src/methods-and-traits/methods.md:75
msgid ""
"Note that references have not been covered yet. References in method "
"receivers are a particularly \"natural\" form of reference, so there is no "
"need to go into a great level of detail."
msgstr ""

#: src/methods-and-traits/traits.md:3
msgid ""
"Rust lets you abstract over types with traits. They're similar to interfaces:"
msgstr ""

#: src/methods-and-traits/traits.md:7 src/methods-and-traits/trait-objects.md:7
msgid "// No name needed, cats won't respond anyway.\n"
msgstr ""

#: src/methods-and-traits/traits.md:13
msgid "\"Oh you're a cutie! What's your name? {}\""
msgstr ""

#: src/methods-and-traits/traits.md:18
#: src/methods-and-traits/trait-objects.md:14
#, fuzzy
msgid "\"Woof, my name is {}!\""
msgstr "\"Hej, mit navn er {}\""

#: src/methods-and-traits/traits.md:22
#: src/methods-and-traits/trait-objects.md:18
msgid "\"Miau!\""
msgstr ""

#: src/methods-and-traits/traits.md:27
#: src/methods-and-traits/trait-objects.md:24
msgid "\"Fido\""
msgstr "\"Fido\""

#: src/methods-and-traits/traits.md:37
msgid ""
"A trait defines a number of methods that types must have in order to "
"implement the trait."
msgstr ""

#: src/methods-and-traits/traits.md:40
msgid "Traits are implemented in an `impl <trait> for <type> { .. }` block."
msgstr ""

#: src/methods-and-traits/traits.md:42
msgid ""
"Traits may specify pre-implemented (provided) methods and methods that users "
"are required to implement themselves. Provided methods can rely on required "
"methods. In this case, `greet` is provided, and relies on `talk`."
msgstr ""

#: src/methods-and-traits/deriving.md:3
msgid ""
"Supported traits can be automatically implemented for your custom types, as "
"follows:"
msgstr ""

#: src/methods-and-traits/deriving.md:15
msgid "// Default trait adds `default` constructor.\n"
msgstr ""

#: src/methods-and-traits/deriving.md:16
msgid "// Clone trait adds `clone` method.\n"
msgstr ""

#: src/methods-and-traits/deriving.md:17
msgid "\"EldurScrollz\""
msgstr ""

#: src/methods-and-traits/deriving.md:18
msgid "// Debug trait adds support for printing with `{:?}`.\n"
msgstr ""

#: src/methods-and-traits/deriving.md:19
#, fuzzy
msgid "\"{:?} vs. {:?}\""
msgstr "\"{:?} + {:?} = {:?}\""

#: src/methods-and-traits/deriving.md:26
msgid ""
"Derivation is implemented with macros, and many crates provide useful derive "
"macros to add useful functionality. For example, `serde` can derive "
"serialization support for a struct using `#[derive(Serialize)]`."
msgstr ""

#: src/methods-and-traits/trait-objects.md:3
msgid ""
"Trait objects allow for values of different types, for instance in a "
"collection:"
msgstr ""

#: src/methods-and-traits/trait-objects.md:27
#, fuzzy
msgid "\"Hello, who are you? {}\""
msgstr "\"Hej, mit navn er {}\""

#: src/methods-and-traits/trait-objects.md:32
msgid "Memory layout after allocating `pets`:"
msgstr ""

#: src/methods-and-traits/trait-objects.md:34
#, fuzzy
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - "
"- -.\n"
":                           :     :                                             :\n"
":    pets                   :     :                     +----+----+----+----"
"+   :\n"
":   +-----------+-------+   :     :   +-----+-----+  .->| F  | i  | d  | o  "
"|   :\n"
":   | ptr       |   o---+---+-----+-->| o o | o o |  |  +----+----+----+----"
"+   :\n"
":   | len       |     2 |   :     :   +-|-|-+-|-|-+  "
"`---------.                :\n"
":   | capacity  |     2 |   :     :     | |   | |    data      "
"|                :\n"
":   +-----------+-------+   :     :     | |   | |   +-------+--|-------"
"+        :\n"
":                           :     :     | |   | '-->| name  |  o, 4, 4 "
"|        :\n"
":                           :     :     | |   |     | age   |        5 "
"|        :\n"
"`- - - - - - - - - - - - - -'     :     | |   |     +-------+----------"
"+        :\n"
"                                  :     | |   "
"|                                 :\n"
"                                  :     | |   |      "
"vtable                     :\n"
"                                  :     | |   |     +----------------------"
"+    :\n"
"                                  :     | |   '---->| \"<Dog as Pet>::talk\" "
"|    :\n"
"                                  :     | |         +----------------------"
"+    :\n"
"                                  :     | "
"|                                     :\n"
"                                  :     | |    "
"data                             :\n"
"                                  :     | |   +-------+-------"
"+                 :\n"
"                                  :     | '-->| lives |     9 "
"|                 :\n"
"                                  :     |     +-------+-------"
"+                 :\n"
"                                  :     "
"|                                       :\n"
"                                  :     |      "
"vtable                           :\n"
"                                  :     |     +----------------------"
"+          :\n"
"                                  :     '---->| \"<Cat as Pet>::talk\" "
"|          :\n"
"                                  :           +----------------------"
"+          :\n"
"                                  :                                             :\n"
"                                  '- - - - - - - - - - - - - - - - - - - - - "
"- -'\n"
"```"
msgstr ""
"```bob\n"
" Stak                              Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - "
"- -.\n"
":                           :     :                                             :\n"
":    "
"pets                   :     :                                             :\n"
":   +-----------+-------+   :     :   +-----+-----"
"+                             :\n"
":   | ptr       |   o---+---+-----+-->| o o | o o "
"|                             :\n"
":   | len       |     2 |   :     :   +-|-|-+-|-|-"
"+                             :\n"
":   | capacity  |     2 |   :     :     | |   | |   +---------------"
"+           :\n"
":   +-----------+-------+   :     :     | |   | '-->| name: \"Fido\"  "
"|           :\n"
":                           :     :     | |   |     +---------------"
"+           :\n"
"`- - - - - - - - - - - - - -'     :     | |   "
"|                                 :\n"
"                                  :     | |   |     +----------------------"
"+    :\n"
"                                  :     | |   '---->| \"<Dog as Pet>::name\" "
"|    :\n"
"                                  :     | |         +----------------------"
"+    :\n"
"                                  :     | "
"|                                     :\n"
"                                  :     | |   +-"
"+                               :\n"
"                                  :     | '-->|"
"\\|                               :\n"
"                                  :     |     +-"
"+                               :\n"
"                                  :     "
"|                                       :\n"
"                                  :     |     +----------------------"
"+          :\n"
"                                  :     '---->| \"<Cat as Pet>::name\" "
"|          :\n"
"                                  :           +----------------------"
"+          :\n"
"                                  :                                             :\n"
"                                  '- - - - - - - - - - - - - - - - - - - - - "
"- -'\n"
"\n"
"```"

#: src/methods-and-traits/trait-objects.md:69
msgid ""
"Types that implement a given trait may be of different sizes. This makes it "
"impossible to have things like `Vec<dyn Pet>` in the example above."
msgstr ""

#: src/methods-and-traits/trait-objects.md:71
msgid ""
"`dyn Pet` is a way to tell the compiler about a dynamically sized type that "
"implements `Pet`."
msgstr ""

#: src/methods-and-traits/trait-objects.md:73
msgid ""
"In the example, `pets` is allocated on the stack and the vector data is on "
"the heap. The two vector elements are _fat pointers_:"
msgstr ""

#: src/methods-and-traits/trait-objects.md:75
msgid ""
"A fat pointer is a double-width pointer. It has two components: a pointer to "
"the actual object and a pointer to the [virtual method table](https://en."
"wikipedia.org/wiki/Virtual_method_table) (vtable) for the `Pet` "
"implementation of that particular object."
msgstr ""

#: src/methods-and-traits/trait-objects.md:78
msgid ""
"The data for the `Dog` named Fido is the `name` and `age` fields. The `Cat` "
"has a `lives` field."
msgstr ""

#: src/methods-and-traits/trait-objects.md:80
msgid "Compare these outputs in the above example:"
msgstr ""

#: src/methods-and-traits/trait-objects.md:82
#: src/methods-and-traits/trait-objects.md:83 src/std-traits/closures.md:55
msgid "\"{} {}\""
msgstr "\"{} {}\""

#: src/methods-and-traits/trait-objects.md:84
#: src/methods-and-traits/trait-objects.md:85
#: src/methods-and-traits/solution.md:123 src/std-traits/exercise.md:25
#: src/std-traits/solution.md:31 src/modules/solution.md:70
#: src/android/build-rules/library.md:43
#: src/android/interoperability/cpp/rust-bridge.md:17
#: src/async/pitfalls/cancellation.md:59
msgid "\"{}\""
msgstr "\"{}\""

#: src/methods-and-traits/exercise.md:3
msgid ""
"Let us design a classical GUI library using our new knowledge of traits and "
"trait objects. We'll only implement the drawing of it (as text) for "
"simplicity."
msgstr ""

#: src/methods-and-traits/exercise.md:6
msgid "We will have a number of widgets in our library:"
msgstr ""

#: src/methods-and-traits/exercise.md:8
msgid "`Window`: has a `title` and contains other widgets."
msgstr ""

#: src/methods-and-traits/exercise.md:9
msgid ""
"`Button`: has a `label`. In reality, it would also take a callback function "
"to allow the program to do something when the button is clicked but we won't "
"include that since we're only drawing the GUI."
msgstr ""

#: src/methods-and-traits/exercise.md:12
msgid "`Label`: has a `label`."
msgstr ""

#: src/methods-and-traits/exercise.md:14
msgid "The widgets will implement a `Widget` trait, see below."
msgstr ""

#: src/methods-and-traits/exercise.md:16
msgid ""
"Copy the code below to <https://play.rust-lang.org/>, fill in the missing "
"`draw_into` methods so that you implement the `Widget` trait:"
msgstr ""

#: src/methods-and-traits/exercise.md:24 src/methods-and-traits/solution.md:5
#: src/modules/solution.md:22
msgid "/// Natural width of `self`.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:27 src/methods-and-traits/solution.md:8
#: src/modules/solution.md:25
msgid "/// Draw the widget into a buffer.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:30 src/methods-and-traits/solution.md:11
#: src/modules/solution.md:28
msgid "/// Draw the widget on standard output.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:34 src/methods-and-traits/solution.md:15
#: src/modules/solution.md:32
msgid "\"{buffer}\""
msgstr "\"{buffer}\""

#: src/methods-and-traits/exercise.md:86
msgid "// TODO: Implement `Widget` for `Label`.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:88
msgid "// TODO: Implement `Widget` for `Button`.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:90
msgid "// TODO: Implement `Widget` for `Window`.\n"
msgstr ""

#: src/methods-and-traits/exercise.md:94 src/methods-and-traits/solution.md:128
#: src/modules/solution.md:178
msgid "\"Rust GUI Demo 1.23\""
msgstr ""

#: src/methods-and-traits/exercise.md:95 src/methods-and-traits/solution.md:129
#: src/modules/solution.md:180
msgid "\"This is a small text GUI demo.\""
msgstr ""

#: src/methods-and-traits/exercise.md:96 src/methods-and-traits/solution.md:130
#: src/modules/solution.md:182
msgid "\"Click me!\""
msgstr ""

#: src/methods-and-traits/exercise.md:101
msgid "The output of the above program can be something simple like this:"
msgstr ""

#: src/methods-and-traits/exercise.md:113
msgid ""
"If you want to draw aligned text, you can use the [fill/alignment](https://"
"doc.rust-lang.org/std/fmt/index.html#fillalignment) formatting operators. In "
"particular, notice how you can pad with different characters (here a `'/'`) "
"and how you can control alignment:"
msgstr ""

#: src/methods-and-traits/exercise.md:121
msgid "\"left aligned:  |{:/<width$}|\""
msgstr ""

#: src/methods-and-traits/exercise.md:122
msgid "\"centered:      |{:/^width$}|\""
msgstr ""

#: src/methods-and-traits/exercise.md:123
msgid "\"right aligned: |{:/>width$}|\""
msgstr ""

#: src/methods-and-traits/exercise.md:127
msgid ""
"Using such alignment tricks, you can for example produce output like this:"
msgstr ""

#: src/methods-and-traits/solution.md:70
msgid "// Add 4 paddings for borders\n"
msgstr ""

#: src/methods-and-traits/solution.md:82 src/modules/solution.md:159
msgid ""
"// TODO: after learning about error handling, you can change\n"
"        // draw_into to return Result<(), std::fmt::Error>. Then use\n"
"        // the ?-operator here instead of .unwrap().\n"
msgstr ""

#: src/methods-and-traits/solution.md:85 src/methods-and-traits/solution.md:91
#: src/modules/solution.md:162 src/modules/solution.md:168
msgid "\"+-{:-<inner_width$}-+\""
msgstr "\"+-{:-<inner_width$}-+\""

#: src/methods-and-traits/solution.md:85 src/methods-and-traits/solution.md:87
#: src/methods-and-traits/solution.md:91 src/methods-and-traits/solution.md:105
#: src/methods-and-traits/solution.md:109 src/modules/solution.md:104
#: src/modules/solution.md:108 src/modules/solution.md:162
#: src/modules/solution.md:164 src/modules/solution.md:168
#: src/testing/unit-tests.md:27 src/testing/solution.md:95
msgid "\"\""
msgstr "\"\""

#: src/methods-and-traits/solution.md:86 src/modules/solution.md:163
msgid "\"| {:^inner_width$} |\""
msgstr "\"| {:^inner_width$} |\""

#: src/methods-and-traits/solution.md:87 src/modules/solution.md:164
msgid "\"+={:=<inner_width$}=+\""
msgstr "\"+={:=<inner_width$}=+\""

#: src/methods-and-traits/solution.md:89 src/modules/solution.md:166
msgid "\"| {:inner_width$} |\""
msgstr "\"| {:inner_width$} |\""

#: src/methods-and-traits/solution.md:97 src/modules/solution.md:94
msgid "// add a bit of padding\n"
msgstr ""

#: src/methods-and-traits/solution.md:105
#: src/methods-and-traits/solution.md:109 src/modules/solution.md:104
#: src/modules/solution.md:108
msgid "\"+{:-<width$}+\""
msgstr "\"+{:-<width$}+\""

#: src/methods-and-traits/solution.md:107 src/modules/solution.md:106
msgid "\"|{:^width$}|\""
msgstr "\"|{:^width$}|\""

#: src/generics.md:4
msgid "[Generic Functions](./generics/generic-functions.md) (5 minutes)"
msgstr ""

#: src/generics.md:5
msgid "[Generic Data types](./generics/generic-data.md) (15 minutes)"
msgstr ""

#: src/generics.md:6
msgid "[Trait Bounds](./generics/trait-bounds.md) (10 minutes)"
msgstr ""

#: src/generics.md:7
msgid "[Impl Trait](./generics/impl-trait.md) (5 minutes)"
msgstr ""

#: src/generics.md:8
msgid "[Exercise: Generic min](./generics/exercise.md) (10 minutes)"
msgstr ""

#: src/generics.md:10 src/smart-pointers.md:8 src/iterators.md:9
#: src/modules.md:10 src/error-handling.md:11
msgid "This segment should take about 45 minutes"
msgstr ""

#: src/generics/generic-functions.md:3
msgid ""
"Rust supports generics, which lets you abstract algorithms or data "
"structures (such as sorting or a binary tree) over the types used or stored."
msgstr ""

#: src/generics/generic-functions.md:8
msgid "/// Pick `even` or `odd` depending on the value of `n`.\n"
msgstr ""

#: src/generics/generic-functions.md:18
#, fuzzy
msgid "\"picked a number: {:?}\""
msgstr "\"{numbers:?}\""

#: src/generics/generic-functions.md:19
#, fuzzy
msgid "\"picked a tuple: {:?}\""
msgstr "\"result: {:?}\""

#: src/generics/generic-functions.md:19
msgid "\"dog\""
msgstr ""

#: src/generics/generic-functions.md:19
msgid "\"cat\""
msgstr "\"cat\""

#: src/generics/generic-functions.md:26
msgid ""
"Rust infers a type for T based on the types of the arguments and return "
"value."
msgstr ""

#: src/generics/generic-functions.md:28
msgid ""
"This is similar to C++ templates, but Rust partially compiles the generic "
"function immediately, so that function must be valid for all types matching "
"the constraints. For example, try modifying `pick` to return `even + odd` if "
"`n == 0`. Even if only the `pick` instantiation with integers is used, Rust "
"still considers it invalid. C++ would let you do this."
msgstr ""

#: src/generics/generic-functions.md:34
msgid ""
"Generic code is turned into non-generic code based on the call sites. This "
"is a zero-cost abstraction: you get exactly the same result as if you had "
"hand-coded the data structures without the abstraction."
msgstr ""

#: src/generics/generic-data.md:1
msgid "Generic Data Types"
msgstr ""

#: src/generics/generic-data.md:3
msgid "You can use generics to abstract over the concrete field type:"
msgstr ""

#: src/generics/generic-data.md:17
msgid "// fn set_x(&mut self, x: T)\n"
msgstr "// fn set_x(&mut self, x: T)\n"

#: src/generics/generic-data.md:23
msgid "\"{integer:?} and {float:?}\""
msgstr "\"{integer:?} og {float:?}\""

#: src/generics/generic-data.md:24
#, fuzzy
msgid "\"coords: {:?}\""
msgstr "\"result: {:?}\""

#: src/generics/generic-data.md:31
msgid ""
"_Q:_ Why `T` is specified twice in `impl<T> Point<T> {}`? Isn't that "
"redundant?"
msgstr ""

#: src/generics/generic-data.md:32
msgid ""
"This is because it is a generic implementation section for generic type. "
"They are independently generic."
msgstr ""

#: src/generics/generic-data.md:33
msgid "It means these methods are defined for any `T`."
msgstr ""

#: src/generics/generic-data.md:34
msgid "It is possible to write `impl Point<u32> { .. }`."
msgstr ""

#: src/generics/generic-data.md:35
msgid ""
"`Point` is still generic and you can use `Point<f64>`, but methods in this "
"block will only be available for `Point<u32>`."
msgstr ""

#: src/generics/generic-data.md:37
msgid ""
"Try declaring a new variable `let p = Point { x: 5, y: 10.0 };`. Update the "
"code to allow points that have elements of different types, by using two "
"type variables, e.g., `T` and `U`."
msgstr ""

#: src/generics/trait-bounds.md:3
msgid ""
"When working with generics, you often want to require the types to implement "
"some trait, so that you can call this trait's methods."
msgstr ""

#: src/generics/trait-bounds.md:6
msgid "You can do this with `T: Trait` or `impl Trait`:"
msgstr ""

#: src/generics/trait-bounds.md:12
msgid "// struct NotClonable;\n"
msgstr "// struct NotClonable;\n"

#: src/generics/trait-bounds.md:18
msgid "\"{pair:?}\""
msgstr "\"{pair:?}\""

#: src/generics/trait-bounds.md:25
msgid "Try making a `NonClonable` and passing it to `duplicate`."
msgstr ""

#: src/generics/trait-bounds.md:27
msgid "When multiple traits are necessary, use `+` to join them."
msgstr ""

#: src/generics/trait-bounds.md:29
msgid "Show a `where` clause, students will encounter it when reading code."
msgstr ""

#: src/generics/trait-bounds.md:40
msgid "It declutters the function signature if you have many parameters."
msgstr ""

#: src/generics/trait-bounds.md:41
msgid "It has additional features making it more powerful."
msgstr ""

#: src/generics/trait-bounds.md:42
msgid ""
"If someone asks, the extra feature is that the type on the left of \":\" can "
"be arbitrary, like `Option<T>`."
msgstr ""

#: src/generics/trait-bounds.md:44
msgid ""
"Note that Rust does not (yet) support specialization. For example, given the "
"original `duplicate`, it is invalid to add a specialized `duplicate(a: u32)`."
msgstr ""

#: src/generics/impl-trait.md:1
msgid "`impl Trait`"
msgstr "`impl Trait`"

#: src/generics/impl-trait.md:3
msgid ""
"Similar to trait bounds, an `impl Trait` syntax can be used in function "
"arguments and return values:"
msgstr ""

#: src/generics/impl-trait.md:7
msgid ""
"// Syntactic sugar for:\n"
"//   fn add_42_millions<T: Into<i32>>(x: T) -> i32 {\n"
msgstr ""

#: src/generics/impl-trait.md:19
msgid "\"{many}\""
msgstr "\"{many}\""

#: src/generics/impl-trait.md:21
msgid "\"{many_more}\""
msgstr "\"{many_more}\""

#: src/generics/impl-trait.md:23
msgid "\"debuggable: {debuggable:?}\""
msgstr ""

#: src/generics/impl-trait.md:30
msgid ""
"`impl Trait` allows you to work with types which you cannot name. The "
"meaning of `impl Trait` is a bit different in the different positions."
msgstr ""

#: src/generics/impl-trait.md:33
msgid ""
"For a parameter, `impl Trait` is like an anonymous generic parameter with a "
"trait bound."
msgstr ""

#: src/generics/impl-trait.md:35
msgid ""
"For a return type, it means that the return type is some concrete type that "
"implements the trait, without naming the type. This can be useful when you "
"don't want to expose the concrete type in a public API."
msgstr ""

#: src/generics/impl-trait.md:39
msgid ""
"Inference is hard in return position. A function returning `impl Foo` picks "
"the concrete type it returns, without writing it out in the source. A "
"function returning a generic type like `collect<B>() -> B` can return any "
"type satisfying `B`, and the caller may need to choose one, such as with "
"`let x: Vec<_> = foo.collect()` or with the turbofish, `foo.collect::"
"<Vec<_>>()`."
msgstr ""

#: src/generics/impl-trait.md:45
msgid ""
"What is the type of `debuggable`? Try `let debuggable: () = ..` to see what "
"the error message shows."
msgstr ""

#: src/generics/exercise.md:3
msgid ""
"In this short exercise, you will implement a generic `min` function that "
"determines the minimum of two values, using a `LessThan` trait."
msgstr ""

#: src/generics/exercise.md:8 src/generics/solution.md:5
msgid "/// Return true if self is less than other.\n"
msgstr ""

#: src/generics/exercise.md:29
msgid "// TODO: implement the `min` function used in `main`.\n"
msgstr ""

#: src/generics/exercise.md:34 src/generics/solution.md:37
msgid "\"Shapiro\""
msgstr ""

#: src/generics/exercise.md:38 src/generics/exercise.md:42
#: src/generics/solution.md:41 src/generics/solution.md:45
msgid "\"Baumann\""
msgstr ""

#: src/welcome-day-2-afternoon.md:4
msgid "[Standard Library Types](./std-types.md) (1 hour and 10 minutes)"
msgstr ""

#: src/welcome-day-2-afternoon.md:5
msgid "[Standard Library Traits](./std-traits.md) (1 hour and 40 minutes)"
msgstr ""

#: src/std-types.md:4
msgid "[Standard Library](./std-types/std.md) (3 minutes)"
msgstr ""

#: src/std-types.md:5
msgid "[Language Docs](./std-types/docs.md) (5 minutes)"
msgstr ""

#: src/std-types.md:6
msgid "[Option](./std-types/option.md) (10 minutes)"
msgstr ""

#: src/std-types.md:7
msgid "[Result](./std-types/result.md) (10 minutes)"
msgstr ""

#: src/std-types.md:8
msgid "[String](./std-types/string.md) (10 minutes)"
msgstr ""

#: src/std-types.md:9
msgid "[Vec](./std-types/vec.md) (10 minutes)"
msgstr ""

#: src/std-types.md:10
msgid "[HashMap](./std-types/hashmap.md) (10 minutes)"
msgstr ""

#: src/std-types.md:11
msgid "[Exercise: Counter](./std-types/exercise.md) (10 minutes)"
msgstr ""

#: src/std-types.md:13 src/memory-management.md:13
#: src/slices-and-lifetimes.md:11
msgid "This segment should take about 1 hour and 10 minutes"
msgstr ""

#: src/std-types.md:18
msgid ""
"For each of the slides in this section, spend some time reviewing the "
"documentation pages, highlighting some of the more common methods."
msgstr ""

#: src/std-types/std.md:3
msgid ""
"Rust comes with a standard library which helps establish a set of common "
"types used by Rust libraries and programs. This way, two libraries can work "
"together smoothly because they both use the same `String` type."
msgstr ""

#: src/std-types/std.md:7
msgid ""
"In fact, Rust contains several layers of the Standard Library: `core`, "
"`alloc` and `std`."
msgstr ""

#: src/std-types/std.md:8
msgid ""
"`core` includes the most basic types and functions that don't depend on "
"`libc`, allocator or even the presence of an operating system."
msgstr ""

#: src/std-types/std.md:10
msgid ""
"`alloc` includes types which require a global heap allocator, such as `Vec`, "
"`Box` and `Arc`."
msgstr ""

#: src/std-types/std.md:11
msgid ""
"Embedded Rust applications often only use `core`, and sometimes `alloc`."
msgstr ""

#: src/std-types/docs.md:3
msgid ""
"Rust comes with extensive documentation of the language and the standard "
"library."
msgstr ""

#: src/std-types/docs.md:5
#, fuzzy
msgid "For example:"
msgstr "C-eksempel"

#: src/std-types/docs.md:6
msgid ""
"All of the details about [loops](https://doc.rust-lang.org/stable/reference/"
"expressions/loop-expr.html)."
msgstr ""

#: src/std-types/docs.md:7
msgid ""
"Primitive types like [`u8`](https://doc.rust-lang.org/stable/std/primitive."
"u8.html)."
msgstr ""

#: src/std-types/docs.md:8
msgid ""
"Standard-library items like [`Option`](https://doc.rust-lang.org/stable/std/"
"option/enum.Option.html) or [`BinaryHeap`](https://doc.rust-lang.org/stable/"
"std/collections/struct.BinaryHeap.html)."
msgstr ""

#: src/std-types/docs.md:10
msgid "In fact, you can document your own code:"
msgstr ""

#: src/std-types/docs.md:13
msgid ""
"/// Determine whether the first argument is divisible by the second "
"argument.\n"
"///\n"
"/// If the second argument is zero, the result is false.\n"
msgstr ""

#: src/std-types/docs.md:24
msgid ""
"The contents are treated as Markdown. All published Rust library crates are "
"automatically documented at [`docs.rs`](https://docs.rs) using the [rustdoc]"
"(https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html) tool. It is "
"idiomatic to document all public items in an API using this pattern."
msgstr ""

#: src/std-types/docs.md:29
msgid ""
"To document an item from inside the item (such as inside a module), use `//!"
"` or `/*! .. */`, called \"inner doc comments\":"
msgstr ""

#: src/std-types/docs.md:33
msgid ""
"//! This module contains functionality relating to divisibility of "
"integers.\n"
msgstr ""

#: src/std-types/docs.md:39
msgid ""
"Show students the generated docs for the `rand` crate at [`docs.rs/rand`]"
"(https://docs.rs/rand)."
msgstr ""

#: src/std-types/option.md:3
msgid ""
"We have already seen some use of `Option<T>`. It stores either a value of "
"type `T` or nothing. For example, [`String::find`](https://doc.rust-lang.org/"
"stable/std/string/struct.String.html#method.find) returns an `Option<usize>`."
msgstr ""

#: src/std-types/option.md:10
msgid "\"L√∂we ËÄÅËôé L√©opard Gepardi\""
msgstr ""

#: src/std-types/option.md:11
msgid "'√©'"
msgstr ""

#: src/std-types/option.md:12 src/std-types/option.md:15
msgid "\"find returned {position:?}\""
msgstr ""

#: src/std-types/option.md:14
#, fuzzy
msgid "'Z'"
msgstr "'x'"

#: src/std-types/option.md:16
msgid "\"Character not found\""
msgstr ""

#: src/std-types/option.md:23
msgid "`Option` is widely used, not just in the standard library."
msgstr ""

#: src/std-types/option.md:24
msgid ""
"`unwrap` will return the value in an `Option`, or panic. `expect` is similar "
"but takes an error message."
msgstr ""

#: src/std-types/option.md:25
msgid ""
"You can panic on None, but you can't \"accidentally\" forget to check for "
"None."
msgstr ""

#: src/std-types/option.md:26
msgid ""
"It's common to `unwrap`/`expect` all over the place when hacking something "
"together, but production code typically handles `None` in a nicer fashion."
msgstr ""

#: src/std-types/option.md:27
msgid ""
"The niche optimization means that `Option<T>` often has the same size in "
"memory as `T`."
msgstr ""

#: src/std-types/result.md:3
msgid ""
"`Result` is similar to `Option`, but indicates the success or failure of an "
"operation, each with a different type. This is similar to the `Res` defined "
"in the expression exercise, but generic: `Result<T, E>` where `T` is used in "
"the `Ok` variant and `E` appears in the `Err` variant."
msgstr ""

#: src/std-types/result.md:13
msgid "\"diary.txt\""
msgstr "\"dagbog.txt\""

#: src/std-types/result.md:18
#, fuzzy
msgid "\"Dear diary: {contents} ({bytes} bytes)\""
msgstr "\"K√¶re dagbog: {contents}\""

#: src/std-types/result.md:20
msgid "\"Could not read file content\""
msgstr ""

#: src/std-types/result.md:24
msgid "\"The diary could not be opened: {err}\""
msgstr ""

#: src/std-types/result.md:33
msgid ""
"As with `Option`, the successful value sits inside of `Result`, forcing the "
"developer to explicitly extract it. This encourages error checking. In the "
"case where an error should never happen, `unwrap()` or `expect()` can be "
"called, and this is a signal of the developer intent too."
msgstr ""

#: src/std-types/result.md:36
msgid ""
"`Result` documentation is a recommended read. Not during the course, but it "
"is worth mentioning. It contains a lot of convenience methods and functions "
"that help functional-style programming."
msgstr ""

#: src/std-types/result.md:38
msgid ""
"`Result` is the standard type to implement error handling as we will see on "
"Day 3."
msgstr ""

#: src/std-types/string.md:3
msgid ""
"[`String`](https://doc.rust-lang.org/std/string/struct.String.html) is the "
"standard heap-allocated growable UTF-8 string buffer:"
msgstr ""

#: src/std-types/string.md:8 src/std-traits/read-and-write.md:35
#: src/memory-management/review.md:23 src/memory-management/review.md:55
#: src/testing/unit-tests.md:32 src/testing/unit-tests.md:37
#: src/concurrency/scoped-threads.md:9 src/concurrency/scoped-threads.md:26
msgid "\"Hello\""
msgstr "\"Hello\""

#: src/std-types/string.md:9
msgid "\"s1: len = {}, capacity = {}\""
msgstr "\"s1: len = {}, capacity = {}\""

#: src/std-types/string.md:13
msgid "'!'"
msgstr "'!'"

#: src/std-types/string.md:14
msgid "\"s2: len = {}, capacity = {}\""
msgstr "\"s2: len = {}, capacity = {}\""

#: src/std-types/string.md:16
msgid "\"üá®üá≠\""
msgstr "\"üá®üá≠\""

#: src/std-types/string.md:17
msgid "\"s3: len = {}, number of chars = {}\""
msgstr "\"s3: len = {}, antal tegn = {}\""

#: src/std-types/string.md:22
msgid ""
"`String` implements [`Deref<Target = str>`](https://doc.rust-lang.org/std/"
"string/struct.String.html#deref-methods-str), which means that you can call "
"all `str` methods on a `String`."
msgstr ""

#: src/std-types/string.md:31
msgid ""
"`String::new` returns a new empty string, use `String::with_capacity` when "
"you know how much data you want to push to the string."
msgstr ""

#: src/std-types/string.md:32
msgid ""
"`String::len` returns the size of the `String` in bytes (which can be "
"different from its length in characters)."
msgstr ""

#: src/std-types/string.md:33
msgid ""
"`String::chars` returns an iterator over the actual characters. Note that a "
"`char` can be different from what a human will consider a \"character\" due "
"to [grapheme clusters](https://docs.rs/unicode-segmentation/latest/"
"unicode_segmentation/struct.Graphemes.html)."
msgstr ""

#: src/std-types/string.md:34
msgid ""
"When people refer to strings they could either be talking about `&str` or "
"`String`."
msgstr ""

#: src/std-types/string.md:35
msgid ""
"When a type implements `Deref<Target = T>`, the compiler will let you "
"transparently call methods from `T`."
msgstr ""

#: src/std-types/string.md:36
msgid ""
"We haven't discussed the `Deref` trait yet, so at this point this mostly "
"explains the structure of the sidebar in the documentation."
msgstr ""

#: src/std-types/string.md:37
msgid ""
"`String` implements `Deref<Target = str>` which transparently gives it "
"access to `str`'s methods."
msgstr ""

#: src/std-types/string.md:38
msgid "Write and compare `let s3 = s1.deref();` and  `let s3 = &*s1;`."
msgstr ""

#: src/std-types/string.md:39
msgid ""
"`String` is implemented as a wrapper around a vector of bytes, many of the "
"operations you see supported on vectors are also supported on `String`, but "
"with some extra guarantees."
msgstr ""

#: src/std-types/string.md:40
msgid "Compare the different ways to index a `String`:"
msgstr ""

#: src/std-types/string.md:41
msgid ""
"To a character by using `s3.chars().nth(i).unwrap()` where `i` is in-bound, "
"out-of-bounds."
msgstr ""

#: src/std-types/string.md:42
msgid ""
"To a substring by using `s3[0..4]`, where that slice is on character "
"boundaries or not."
msgstr ""

#: src/std-types/vec.md:1
msgid "`Vec`"
msgstr "`Vec`"

#: src/std-types/vec.md:3
msgid ""
"[`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html) is the standard "
"resizable heap-allocated buffer:"
msgstr ""

#: src/std-types/vec.md:9
msgid "\"v1: len = {}, capacity = {}\""
msgstr "\"v1: len = {}, capacity = {}\""

#: src/std-types/vec.md:14
msgid "\"v2: len = {}, capacity = {}\""
msgstr "\"v2: len = {}, capacity = {}\""

#: src/std-types/vec.md:16
msgid "// Canonical macro to initialize a vector with elements.\n"
msgstr ""

#: src/std-types/vec.md:19
msgid "// Retain only the even elements.\n"
msgstr ""

#: src/std-types/vec.md:21 src/std-types/vec.md:25
msgid "\"{v3:?}\""
msgstr "\"{v3:?}\""

#: src/std-types/vec.md:23
msgid "// Remove consecutive duplicates.\n"
msgstr ""

#: src/std-types/vec.md:29
msgid ""
"`Vec` implements [`Deref<Target = [T]>`](https://doc.rust-lang.org/std/vec/"
"struct.Vec.html#deref-methods-%5BT%5D), which means that you can call slice "
"methods on a `Vec`."
msgstr ""

#: src/std-types/vec.md:38
msgid ""
"`Vec` is a type of collection, along with `String` and `HashMap`. The data "
"it contains is stored on the heap. This means the amount of data doesn't "
"need to be  known at compile time. It can grow or shrink at runtime."
msgstr ""

#: src/std-types/vec.md:41
msgid ""
"Notice how `Vec<T>` is a generic type too, but you don't have to specify `T` "
"explicitly. As always with Rust type inference, the `T` was established "
"during the first `push` call."
msgstr ""

#: src/std-types/vec.md:43
msgid ""
"`vec![...]` is a canonical macro to use instead of `Vec::new()` and it "
"supports adding initial elements to the vector."
msgstr ""

#: src/std-types/vec.md:45
msgid ""
"To index the vector you use `[` `]`, but they will panic if out of bounds. "
"Alternatively, using `get` will return an `Option`. The `pop` function will "
"remove the last element."
msgstr ""

#: src/std-types/vec.md:47
msgid ""
"Slices are covered on day 3. For now, students only need to know that a "
"value of type `Vec` gives access to all of the documented read-only slice "
"methods, too."
msgstr ""

#: src/std-types/hashmap.md:1 src/bare-metal/no_std.md:46
msgid "`HashMap`"
msgstr "`HashMap`"

#: src/std-types/hashmap.md:3
msgid "Standard hash map with protection against HashDoS attacks:"
msgstr ""

#: src/std-types/hashmap.md:10
msgid "\"Adventures of Huckleberry Finn\""
msgstr "\"Huckleberry Finn\""

#: src/std-types/hashmap.md:11
msgid "\"Grimms' Fairy Tales\""
msgstr "\"Grimms eventyr\""

#: src/std-types/hashmap.md:12 src/std-types/hashmap.md:19
#: src/std-types/hashmap.md:27
msgid "\"Pride and Prejudice\""
msgstr "\"Stolthed og fordom\""

#: src/std-types/hashmap.md:14
msgid "\"Les Mis√©rables\""
msgstr "\"De Elendige\""

#: src/std-types/hashmap.md:15
msgid "\"We know about {} books, but not Les Mis√©rables.\""
msgstr ""

#: src/std-types/hashmap.md:19 src/std-types/hashmap.md:27
msgid "\"Alice's Adventure in Wonderland\""
msgstr "\"Alice i Eventyrland\""

#: src/std-types/hashmap.md:21
msgid "\"{book}: {count} pages\""
msgstr "\"{book}: {count} sider\""

#: src/std-types/hashmap.md:22
msgid "\"{book} is unknown.\""
msgstr "\"{book} er ukendt.\""

#: src/std-types/hashmap.md:26
msgid "// Use the .entry() method to insert a value if nothing is found.\n"
msgstr ""

#: src/std-types/hashmap.md:32
msgid "\"{page_counts:#?}\""
msgstr "\"{page_counts:#?}\""

#: src/std-types/hashmap.md:39
msgid ""
"`HashMap` is not defined in the prelude and needs to be brought into scope."
msgstr ""

#: src/std-types/hashmap.md:40
msgid ""
"Try the following lines of code. The first line will see if a book is in the "
"hashmap and if not return an alternative value. The second line will insert "
"the alternative value in the hashmap if the book is not found."
msgstr ""

#: src/std-types/hashmap.md:44 src/std-types/hashmap.md:55
msgid "\"Harry Potter and the Sorcerer's Stone\""
msgstr ""

#: src/std-types/hashmap.md:47 src/std-types/hashmap.md:56
msgid "\"The Hunger Games\""
msgstr "\"D√∏dsspillet\""

#: src/std-types/hashmap.md:50
msgid "Unlike `vec!`, there is unfortunately no standard `hashmap!` macro."
msgstr ""

#: src/std-types/hashmap.md:51
msgid ""
"Although, since Rust 1.56, HashMap implements [`From<[(K, V); N]>`](https://"
"doc.rust-lang.org/std/collections/hash_map/struct.HashMap.html#impl-"
"From%3C%5B(K,+V);+N%5D%3E-for-HashMap%3CK,+V,+RandomState%3E), which allows "
"us to easily initialize a hash map from a literal array:"
msgstr ""

#: src/std-types/hashmap.md:60
msgid ""
"Alternatively HashMap can be built from any `Iterator` which yields key-"
"value tuples."
msgstr ""

#: src/std-types/hashmap.md:61
msgid ""
"We are showing `HashMap<String, i32>`, and avoid using `&str` as key to make "
"examples easier. Using references in collections can, of course, be done, "
"but it can lead into complications with the borrow checker."
msgstr ""

#: src/std-types/hashmap.md:63
msgid ""
"Try removing `to_string()` from the example above and see if it still "
"compiles. Where do you think we might run into issues?"
msgstr ""

#: src/std-types/hashmap.md:65
msgid ""
"This type has several \"method-specific\" return types, such as `std::"
"collections::hash_map::Keys`. These types often appear in searches of the "
"Rust docs. Show students the docs for this type, and the helpful link back "
"to the `keys` method."
msgstr ""

#: src/std-types/exercise.md:3
msgid ""
"In this exercise you will take a very simple data structure and make it "
"generic. It uses a [`std::collections::HashMap`](https://doc.rust-lang.org/"
"stable/std/collections/struct.HashMap.html) to keep track of which values "
"have been seen and how many times each one has appeared."
msgstr ""

#: src/std-types/exercise.md:9
msgid ""
"The initial version of `Counter` is hard coded to only work for `u32` "
"values. Make the struct and its methods generic over the type of value being "
"tracked, that way `Counter` can track any type of value."
msgstr ""

#: src/std-types/exercise.md:13
msgid ""
"If you finish early, try using the [`entry`](https://doc.rust-lang.org/"
"stable/std/collections/struct.HashMap.html#method.entry) method to halve the "
"number of hash lookups required to implement the `count` method."
msgstr ""

#: src/std-types/exercise.md:20 src/std-types/solution.md:6
msgid ""
"/// Counter counts the number of times each value of type T has been seen.\n"
msgstr ""

#: src/std-types/exercise.md:27 src/std-types/solution.md:13
#, fuzzy
msgid "/// Create a new Counter.\n"
msgstr "/// Break error.\n"

#: src/std-types/exercise.md:34 src/std-types/solution.md:20
msgid "/// Count an occurrence of the given value.\n"
msgstr ""

#: src/std-types/exercise.md:43 src/std-types/solution.md:25
msgid "/// Return the number of times the given value has been seen.\n"
msgstr ""

#: src/std-types/exercise.md:59 src/std-types/solution.md:41
msgid "\"saw {} values equal to {}\""
msgstr ""

#: src/std-types/exercise.md:63 src/std-types/exercise.md:65
#: src/std-types/exercise.md:66 src/std-types/solution.md:45
#: src/std-types/solution.md:47 src/std-types/solution.md:48
msgid "\"apple\""
msgstr ""

#: src/std-types/exercise.md:64 src/std-types/solution.md:46
msgid "\"orange\""
msgstr ""

#: src/std-types/exercise.md:66 src/std-types/solution.md:48
msgid "\"got {} apples\""
msgstr ""

#: src/std-traits.md:4
msgid "[Comparisons](./std-traits/comparisons.md) (10 minutes)"
msgstr ""

#: src/std-traits.md:5
msgid "[Operators](./std-traits/operators.md) (10 minutes)"
msgstr ""

#: src/std-traits.md:6
msgid "[From and Into](./std-traits/from-and-into.md) (10 minutes)"
msgstr ""

#: src/std-traits.md:7
msgid "[Casting](./std-traits/casting.md) (5 minutes)"
msgstr ""

#: src/std-traits.md:8
msgid "[Read and Write](./std-traits/read-and-write.md) (10 minutes)"
msgstr ""

#: src/std-traits.md:9
msgid "[Default, struct update syntax](./std-traits/default.md) (5 minutes)"
msgstr ""

#: src/std-traits.md:10
msgid "[Closures](./std-traits/closures.md) (20 minutes)"
msgstr ""

#: src/std-traits.md:11
msgid "[Exercise: ROT13](./std-traits/exercise.md) (30 minutes)"
msgstr ""

#: src/std-traits.md:13
msgid "This segment should take about 1 hour and 40 minutes"
msgstr ""

#: src/std-traits.md:18
msgid ""
"As with the standard-library types, spend time reviewing the documentation "
"for each trait."
msgstr ""

#: src/std-traits.md:21
msgid "This section is long. Take a break midway through."
msgstr ""

#: src/std-traits/comparisons.md:3
msgid ""
"These traits support comparisons between values. All traits can be derived "
"for types containing fields that implement these traits."
msgstr ""

#: src/std-traits/comparisons.md:6
msgid "`PartialEq` and `Eq`"
msgstr ""

#: src/std-traits/comparisons.md:8
msgid ""
"`PartialEq` is a partial equivalence relation, with required method `eq` and "
"provided method `ne`. The `==` and `!=` operators will call these methods."
msgstr ""

#: src/std-traits/comparisons.md:20
msgid ""
"`Eq` is a full equivalence relation (reflexive, symmetric, and transitive) "
"and implies `PartialEq`.  Functions that require full equivalence will use "
"`Eq` as a trait bound."
msgstr ""

#: src/std-traits/comparisons.md:24
#, fuzzy
msgid "`PartialOrd` and `Ord`"
msgstr "`Read` og `Write`"

#: src/std-traits/comparisons.md:26
msgid ""
"`PartialOrd` defines a partial ordering, with a `partial_cmp` method. It is "
"used to implement the `<`, `<=`, `>=`, and `>` operators."
msgstr ""

#: src/std-traits/comparisons.md:43
msgid "`Ord` is a total ordering, with `cmp` returning `Ordering`."
msgstr ""

#: src/std-traits/comparisons.md:48
msgid ""
"`PartialEq` can be implemented between different types, but `Eq` cannot, "
"because it is reflexive:"
msgstr ""

#: src/std-traits/comparisons.md:59
msgid ""
"In practice, it's common to derive these traits, but uncommon to implement "
"them."
msgstr ""

#: src/std-traits/operators.md:3
msgid ""
"Operator overloading is implemented via traits in [`std::ops`](https://doc."
"rust-lang.org/std/ops/index.html):"
msgstr ""

#: src/std-traits/operators.md:20
msgid "\"{:?} + {:?} = {:?}\""
msgstr "\"{:?} + {:?} = {:?}\""

#: src/std-traits/operators.md:27 src/memory-management/drop.md:46
msgid "Discussion points:"
msgstr ""

#: src/std-traits/operators.md:29
msgid ""
"You could implement `Add` for `&Point`. In which situations is that useful?"
msgstr ""

#: src/std-traits/operators.md:30
msgid ""
"Answer: `Add:add` consumes `self`. If type `T` for which you are overloading "
"the operator is not `Copy`, you should consider overloading the operator for "
"`&T` as well. This avoids unnecessary cloning on the call site."
msgstr ""

#: src/std-traits/operators.md:34
msgid ""
"Why is `Output` an associated type? Could it be made a type parameter of the "
"method?"
msgstr ""

#: src/std-traits/operators.md:35
msgid ""
"Short answer: Function type parameters are controlled by the caller, but "
"associated types (like `Output`) are controlled by the implementor of a "
"trait."
msgstr ""

#: src/std-traits/operators.md:38
msgid ""
"You could implement `Add` for two different types, e.g. `impl Add<(i32, "
"i32)> for Point` would add a tuple to a `Point`."
msgstr ""

#: src/std-traits/from-and-into.md:1
msgid "`From` and `Into`"
msgstr "`From` og `Into`"

#: src/std-traits/from-and-into.md:3
msgid ""
"Types implement [`From`](https://doc.rust-lang.org/std/convert/trait.From."
"html) and [`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html) to "
"facilitate type conversions:"
msgstr ""

#: src/std-traits/from-and-into.md:11 src/std-traits/from-and-into.md:23
msgid "\"{s}, {addr}, {one}, {bigger}\""
msgstr "\"{s}, {addr}, {one}, {bigger}\""

#: src/std-traits/from-and-into.md:15
msgid ""
"[`Into`](https://doc.rust-lang.org/std/convert/trait.Into.html) is "
"automatically implemented when [`From`](https://doc.rust-lang.org/std/"
"convert/trait.From.html) is implemented:"
msgstr ""

#: src/std-traits/from-and-into.md:30
msgid ""
"That's why it is common to only implement `From`, as your type will get "
"`Into` implementation too."
msgstr ""

#: src/std-traits/from-and-into.md:31
msgid ""
"When declaring a function argument input type like \"anything that can be "
"converted into a `String`\", the rule is opposite, you should use `Into`. "
"Your function will accept types that implement `From` and those that _only_ "
"implement `Into`."
msgstr ""

#: src/std-traits/casting.md:3
msgid ""
"Rust has no _implicit_ type conversions, but does support explicit casts "
"with `as`. These generally follow C semantics where those are defined."
msgstr ""

#: src/std-traits/casting.md:9
#, fuzzy
msgid "\"as u16: {}\""
msgstr "\"pengepremie: {}\""

#: src/std-traits/casting.md:10
#, fuzzy
msgid "\"as i16: {}\""
msgstr "\"pengepremie: {}\""

#: src/std-traits/casting.md:11
#, fuzzy
msgid "\"as u8: {}\""
msgstr "\"pengepremie: {}\""

#: src/std-traits/casting.md:15
msgid ""
"The results of `as` are _always_ defined in Rust and consistent across "
"platforms.  This might not match your intuition for changing sign or casting "
"to a smaller type -- check the docs, and comment for clarity."
msgstr ""

#: src/std-traits/casting.md:22
msgid "Consider taking a break after this slide."
msgstr ""

#: src/std-traits/casting.md:24
msgid ""
"`as` is similar to a C++ static cast.  Use of `as` in cases where data might "
"be lost is generally discouraged, or at least deserves an explanatory "
"comment."
msgstr ""

#: src/std-traits/casting.md:27
msgid "This is common in casting integers to `usize` for use as an index."
msgstr ""

#: src/std-traits/read-and-write.md:1
msgid "`Read` and `Write`"
msgstr "`Read` og `Write`"

#: src/std-traits/read-and-write.md:3
msgid ""
"Using [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html) and "
"[`BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html), you can "
"abstract over `u8` sources:"
msgstr ""

#: src/std-traits/read-and-write.md:14
msgid "b\"foo\\nbar\\nbaz\\n\""
msgstr "b\"foo\\nbar\\nbaz\\n\""

#: src/std-traits/read-and-write.md:15
msgid "\"lines in slice: {}\""
msgstr "\"linjer i slice: {}\""

#: src/std-traits/read-and-write.md:18
msgid "\"lines in file: {}\""
msgstr "\"linjer i file: {}\""

#: src/std-traits/read-and-write.md:23
msgid ""
"Similarly, [`Write`](https://doc.rust-lang.org/std/io/trait.Write.html) lets "
"you abstract over `u8` sinks:"
msgstr ""

#: src/std-traits/read-and-write.md:30
msgid "\"\\n\""
msgstr "\"\\n\""

#: src/std-traits/read-and-write.md:36 src/slices-and-lifetimes/str.md:11
msgid "\"World\""
msgstr "\"Verden\""

#: src/std-traits/read-and-write.md:37
msgid "\"Logged: {:?}\""
msgstr ""

#: src/std-traits/default.md:1
msgid "The `Default` Trait"
msgstr ""

#: src/std-traits/default.md:3
msgid ""
"[`Default`](https://doc.rust-lang.org/std/default/trait.Default.html) trait "
"produces a default value for a type."
msgstr ""

#: src/std-traits/default.md:18
msgid "\"John Smith\""
msgstr "\"John Smith\""

#: src/std-traits/default.md:24
msgid "\"{default_struct:#?}\""
msgstr "\"{default_struct:#?}\""

#: src/std-traits/default.md:27
msgid "\"Y is set!\""
msgstr "\"Y er sat!\""

#: src/std-traits/default.md:30
msgid "\"{almost_default_struct:#?}\""
msgstr ""

#: src/std-traits/default.md:33
msgid "\"{:#?}\""
msgstr "\"{:#?}\""

#: src/std-traits/default.md:41
msgid ""
"It can be implemented directly or it can be derived via `#[derive(Default)]`."
msgstr ""

#: src/std-traits/default.md:42
msgid ""
"A derived implementation will produce a value where all fields are set to "
"their default values."
msgstr ""

#: src/std-traits/default.md:43
msgid "This means all types in the struct must implement `Default` too."
msgstr ""

#: src/std-traits/default.md:44
msgid ""
"Standard Rust types often implement `Default` with reasonable values (e.g. "
"`0`, `\"\"`, etc)."
msgstr ""

#: src/std-traits/default.md:45
msgid "The partial struct copy works nicely with default."
msgstr ""

#: src/std-traits/default.md:46
msgid ""
"Rust standard library is aware that types can implement `Default` and "
"provides convenience methods that use it."
msgstr ""

#: src/std-traits/default.md:47
msgid ""
"the `..` syntax is called [struct update syntax](https://doc.rust-lang.org/"
"book/ch05-01-defining-structs.html#creating-instances-from-other-instances-"
"with-struct-update-syntax)"
msgstr ""

#: src/std-traits/closures.md:3
msgid ""
"Closures or lambda expressions have types which cannot be named. However, "
"they implement special [`Fn`](https://doc.rust-lang.org/std/ops/trait.Fn."
"html), [`FnMut`](https://doc.rust-lang.org/std/ops/trait.FnMut.html), and "
"[`FnOnce`](https://doc.rust-lang.org/std/ops/trait.FnOnce.html) traits:"
msgstr ""

#: src/std-traits/closures.md:10
msgid "\"Calling function on {input}\""
msgstr ""

#: src/std-traits/closures.md:16 src/std-traits/closures.md:17
msgid "\"add_3: {}\""
msgstr "\"add_3: {}\""

#: src/std-traits/closures.md:24 src/std-traits/closures.md:25
msgid "\"accumulate: {}\""
msgstr "\"accumulate: {}\""

#: src/std-traits/closures.md:28
msgid "\"multiply_sum: {}\""
msgstr "\"multiply_sum: {}\""

#: src/std-traits/closures.md:35
msgid ""
"An `Fn` (e.g. `add_3`) neither consumes nor mutates captured values, or "
"perhaps captures nothing at all. It can be called multiple times "
"concurrently."
msgstr ""

#: src/std-traits/closures.md:38
msgid ""
"An `FnMut` (e.g. `accumulate`) might mutate captured values. You can call it "
"multiple times, but not concurrently."
msgstr ""

#: src/std-traits/closures.md:41
msgid ""
"If you have an `FnOnce` (e.g. `multiply_sum`), you may only call it once. It "
"might consume captured values."
msgstr ""

#: src/std-traits/closures.md:44
msgid ""
"`FnMut` is a subtype of `FnOnce`. `Fn` is a subtype of `FnMut` and `FnOnce`. "
"I.e. you can use an `FnMut` wherever an `FnOnce` is called for, and you can "
"use an `Fn` wherever an `FnMut` or `FnOnce` is called for."
msgstr ""

#: src/std-traits/closures.md:48
msgid ""
"The compiler also infers `Copy` (e.g. for `add_3`) and `Clone` (e.g. "
"`multiply_sum`), depending on what the closure captures."
msgstr ""

#: src/std-traits/closures.md:51
msgid ""
"By default, closures will capture by reference if they can. The `move` "
"keyword makes them capture by value."
msgstr ""

#: src/std-traits/closures.md:59
msgid "\"Hi\""
msgstr "\"Hej\""

#: src/std-traits/closures.md:60
msgid "\"there\""
msgstr "\"der\""

#: src/std-traits/exercise.md:3
msgid ""
"In this example, you will implement the classic [\"ROT13\" cipher](https://"
"en.wikipedia.org/wiki/ROT13). Copy this code to the playground, and "
"implement the missing bits. Only rotate ASCII alphabetic characters, to "
"ensure the result is still valid UTF-8."
msgstr ""

#: src/std-traits/exercise.md:15
msgid "// Implement the `Read` trait for `RotDecoder`.\n"
msgstr ""

#: src/std-traits/exercise.md:20 src/std-traits/exercise.md:35
#: src/std-traits/solution.md:26 src/std-traits/solution.md:41
msgid "\"Gb trg gb gur bgure fvqr!\""
msgstr ""

#: src/std-traits/exercise.md:40 src/std-traits/solution.md:46
msgid "\"To get to the other side!\""
msgstr ""

#: src/std-traits/exercise.md:62
msgid ""
"What happens if you chain two `RotDecoder` instances together, each rotating "
"by 13 characters?"
msgstr ""

#: src/std-traits/solution.md:16
#, fuzzy
msgid "'A'"
msgstr "'x'"

#: src/welcome-day-3.md:1
msgid "Welcome to Day 3"
msgstr "Velkommen til Dag 3"

#: src/welcome-day-3.md:3
msgid "Today, we will cover:"
msgstr ""

#: src/welcome-day-3.md:5
msgid ""
"Memory management, lifetimes, and the borrow checker: how Rust ensures "
"memory safety."
msgstr ""

#: src/welcome-day-3.md:6
msgid "Smart pointers: standard library pointer types."
msgstr ""

#: src/welcome-day-3.md:11
msgid "[Welcome](./welcome-day-3.md) (3 minutes)"
msgstr ""

#: src/welcome-day-3.md:12
msgid "[Memory Management](./memory-management.md) (1 hour and 10 minutes)"
msgstr ""

#: src/welcome-day-3.md:13
msgid "[Smart Pointers](./smart-pointers.md) (45 minutes)"
msgstr ""

#: src/welcome-day-3.md:15
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 15 "
"minutes"
msgstr ""

#: src/memory-management.md:4
msgid "[Review of Program Memory](./memory-management/review.md) (5 minutes)"
msgstr ""

#: src/memory-management.md:5
msgid ""
"[Approaches to Memory Management](./memory-management/approaches.md) (10 "
"minutes)"
msgstr ""

#: src/memory-management.md:6
msgid "[Ownership](./memory-management/ownership.md) (5 minutes)"
msgstr ""

#: src/memory-management.md:7
msgid "[Move semantics](./memory-management/move.md) (10 minutes)"
msgstr ""

#: src/memory-management.md:8
msgid "[Clone](./memory-management/clone.md) (2 minutes)"
msgstr ""

#: src/memory-management.md:9
msgid "[Copy Types](./memory-management/copy-types.md) (5 minutes)"
msgstr ""

#: src/memory-management.md:10
msgid "[Drop](./memory-management/drop.md) (10 minutes)"
msgstr ""

#: src/memory-management.md:11
msgid "[Exercise: Builder Type](./memory-management/exercise.md) (20 minutes)"
msgstr ""

#: src/memory-management/review.md:3
msgid "Programs allocate memory in two ways:"
msgstr ""

#: src/memory-management/review.md:5
msgid "Stack: Continuous area of memory for local variables."
msgstr ""

#: src/memory-management/review.md:6
msgid "Values have fixed sizes known at compile time."
msgstr ""

#: src/memory-management/review.md:7
msgid "Extremely fast: just move a stack pointer."
msgstr ""

#: src/memory-management/review.md:8
msgid "Easy to manage: follows function calls."
msgstr ""

#: src/memory-management/review.md:9
msgid "Great memory locality."
msgstr ""

#: src/memory-management/review.md:11
msgid "Heap: Storage of values outside of function calls."
msgstr ""

#: src/memory-management/review.md:12
msgid "Values have dynamic sizes determined at runtime."
msgstr ""

#: src/memory-management/review.md:13
msgid "Slightly slower than the stack: some book-keeping needed."
msgstr ""

#: src/memory-management/review.md:14
msgid "No guarantee of memory locality."
msgstr ""

#: src/memory-management/review.md:18
msgid ""
"Creating a `String` puts fixed-sized metadata on the stack and dynamically "
"sized data, the actual string, on the heap:"
msgstr ""

#: src/memory-management/review.md:44
msgid ""
"Mention that a `String` is backed by a `Vec`, so it has a capacity and "
"length and can grow if mutable via reallocation on the heap."
msgstr ""

#: src/memory-management/review.md:46
msgid ""
"If students ask about it, you can mention that the underlying memory is heap "
"allocated using the [System Allocator](https://doc.rust-lang.org/std/alloc/"
"struct.System.html) and custom allocators can be implemented using the "
"[Allocator API](https://doc.rust-lang.org/std/alloc/index.html)"
msgstr ""

#: src/memory-management/review.md:50
msgid ""
"We can inspect the memory layout with `unsafe` Rust. However, you should "
"point out that this is rightfully unsafe!"
msgstr ""

#: src/memory-management/review.md:56 src/testing/unit-tests.md:15
msgid "' '"
msgstr "' '"

#: src/memory-management/review.md:57
msgid "\"world\""
msgstr ""

#: src/memory-management/review.md:58
msgid ""
"// DON'T DO THIS AT HOME! For educational purposes only.\n"
"    // String provides no guarantees about its layout, so this could lead "
"to\n"
"    // undefined behavior.\n"
msgstr ""

#: src/memory-management/review.md:63
msgid "\"ptr = {ptr:#x}, len = {len}, capacity = {capacity}\""
msgstr ""

#: src/memory-management/approaches.md:3
msgid "Traditionally, languages have fallen into two broad categories:"
msgstr ""

#: src/memory-management/approaches.md:5
msgid "Full control via manual memory management: C, C++, Pascal, ..."
msgstr ""

#: src/memory-management/approaches.md:6
msgid "Programmer decides when to allocate or free heap memory."
msgstr ""

#: src/memory-management/approaches.md:7
msgid ""
"Programmer must determine whether a pointer still points to valid memory."
msgstr ""

#: src/memory-management/approaches.md:8
msgid "Studies show, programmers make mistakes."
msgstr ""

#: src/memory-management/approaches.md:9
msgid ""
"Full safety via automatic memory management at runtime: Java, Python, Go, "
"Haskell, ..."
msgstr ""

#: src/memory-management/approaches.md:10
msgid ""
"A runtime system ensures that memory is not freed until it can no longer be "
"referenced."
msgstr ""

#: src/memory-management/approaches.md:11
msgid ""
"Typically implemented with reference counting, garbage collection, or RAII."
msgstr ""

#: src/memory-management/approaches.md:13
msgid "Rust offers a new mix:"
msgstr ""

#: src/memory-management/approaches.md:15
msgid ""
"Full control _and_ safety via compile time enforcement of correct memory "
"management."
msgstr ""

#: src/memory-management/approaches.md:18
msgid "It does this with an explicit ownership concept."
msgstr ""

#: src/memory-management/approaches.md:23
msgid ""
"This slide is intended to help students coming from other languages to put "
"Rust in context."
msgstr ""

#: src/memory-management/approaches.md:26
msgid ""
"C must manage heap manually with `malloc` and `free`. Common errors include "
"forgetting to call `free`, calling it multiple times for the same pointer, "
"or dereferencing a pointer after the memory it points to has been freed."
msgstr ""

#: src/memory-management/approaches.md:31
msgid ""
"C++ has tools like smart pointers (`unique_ptr`, `shared_ptr`) that take "
"advantage of language guarantees about calling destructors to ensure memory "
"is freed when a function returns. It is still quite easy to mis-use these "
"tools and create similar bugs to C."
msgstr ""

#: src/memory-management/approaches.md:36
msgid ""
"Java, Go, and Python rely on the garbage collector to identify memory that "
"is no longer reachable and discard it. This guarantees that any pointer can "
"be dereferenced, eliminating use-after-free and other classes of bugs. But, "
"GC has a runtime cost and is difficult to tune properly."
msgstr ""

#: src/memory-management/approaches.md:41
msgid ""
"Rust's ownership and borrowing model can, in many cases, get the performance "
"of C, with alloc and free operations precisely where they are required -- "
"zero cost. It also provides tools similar to C++'s smart pointers. When "
"required, other options such as reference counting are available, and there "
"are even third-party crates available to support runtime garbage collection "
"(not covered in this class)."
msgstr ""

#: src/memory-management/ownership.md:3
msgid ""
"All variable bindings have a _scope_ where they are valid and it is an error "
"to use a variable outside its scope:"
msgstr ""

#: src/memory-management/ownership.md:19
msgid ""
"We say that the variable _owns_ the value. Every Rust value has precisely "
"one owner at all times."
msgstr ""

#: src/memory-management/ownership.md:22
msgid ""
"At the end of the scope, the variable is _dropped_ and the data is freed. A "
"destructor can run here to free up resources."
msgstr ""

#: src/memory-management/ownership.md:28
msgid ""
"Students familiar with garbage-collection implementations will know that a "
"garbage collector starts with a set of \"roots\" to find all reachable "
"memory. Rust's \"single owner\" principle is a similar idea."
msgstr ""

#: src/memory-management/move.md:1
msgid "Move Semantics"
msgstr "Overf√∏rselssemantik"

#: src/memory-management/move.md:3
msgid "An assignment will transfer _ownership_ between variables:"
msgstr ""

#: src/memory-management/move.md:7
msgid "\"Hello!\""
msgstr ""

#: src/memory-management/move.md:9 src/slices-and-lifetimes/str.md:15
#: src/slices-and-lifetimes/str.md:17
msgid "\"s2: {s2}\""
msgstr "\"s2: {s2}\""

#: src/memory-management/move.md:10
msgid "// println!(\"s1: {s1}\");\n"
msgstr ""

#: src/memory-management/move.md:14
msgid "The assignment of `s1` to `s2` transfers ownership."
msgstr ""

#: src/memory-management/move.md:15
msgid "When `s1` goes out of scope, nothing happens: it does not own anything."
msgstr ""

#: src/memory-management/move.md:16
msgid "When `s2` goes out of scope, the string data is freed."
msgstr ""

#: src/memory-management/move.md:18
msgid "Before move to `s2`:"
msgstr ""

#: src/memory-management/move.md:35
msgid "After move to `s2`:"
msgstr ""

#: src/memory-management/move.md:37
msgid ""
"```bob\n"
" Stack                             Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - -.\n"
":                           :     :                           :\n"
":    s1 \"(inaccessible)\"    :     :                           :\n"
":   +-----------+-------+   :     :   +----+----+----+----+   :\n"
":   | ptr       |   o---+---+--+--+-->| R  | u  | s  | t  |   :\n"
":   | len       |     4 |   :  |  :   +----+----+----+----+   :\n"
":   | capacity  |     4 |   :  |  :                           :\n"
":   +-----------+-------+   :  |  :                           :\n"
":                           :  |  `- - - - - - - - - - - - - -'\n"
":    s2                     :  |\n"
":   +-----------+-------+   :  |\n"
":   | ptr       |   o---+---+--'\n"
":   | len       |     4 |   :\n"
":   | capacity  |     4 |   :\n"
":   +-----------+-------+   :\n"
":                           :\n"
"`- - - - - - - - - - - - - -'\n"
"```"
msgstr ""
"```bob\n"
" Stak                              Heap\n"
".- - - - - - - - - - - - - -.     .- - - - - - - - - - - - - -.\n"
":                           :     :                           :\n"
":    s1 \"(utilg√¶ngelig)\"    :     :                           :\n"
":   +-----------+-------+   :     :   +----+----+----+----+   :\n"
":   | ptr       |   o---+---+--+--+-->| R  | u  | s  | t  |   :\n"
":   | len       |     4 |   :  |  :   +----+----+----+----+   :\n"
":   | capacity  |     4 |   :  |  :                           :\n"
":   +-----------+-------+   :  |  :                           :\n"
":                           :  |  `- - - - - - - - - - - - - -'\n"
":    s2                     :  |\n"
":   +-----------+-------+   :  |\n"
":   | ptr       |   o---+---+--'\n"
":   | len       |     4 |   :\n"
":   | capacity  |     4 |   :\n"
":   +-----------+-------+   :\n"
":                           :\n"
"`- - - - - - - - - - - - - -'\n"
"```"

#: src/memory-management/move.md:58
msgid ""
"When you pass a value to a function, the value is assigned to the function "
"parameter. This transfers ownership:"
msgstr ""

#: src/memory-management/move.md:63
msgid "\"Hello {name}\""
msgstr ""

#: src/memory-management/move.md:67 src/android/interoperability/java.md:56
msgid "\"Alice\""
msgstr ""

#: src/memory-management/move.md:69
msgid "// say_hello(name);\n"
msgstr ""

#: src/memory-management/move.md:76
msgid ""
"Mention that this is the opposite of the defaults in C++, which copies by "
"value unless you use `std::move` (and the move constructor is defined!)."
msgstr ""

#: src/memory-management/move.md:78
msgid ""
"It is only the ownership that moves. Whether any machine code is generated "
"to manipulate the data itself is a matter of optimization, and such copies "
"are aggressively optimized away."
msgstr ""

#: src/memory-management/move.md:80
msgid ""
"Simple values (such as integers) can be marked `Copy` (see later slides)."
msgstr ""

#: src/memory-management/move.md:82
msgid "In Rust, clones are explicit (by using `clone`)."
msgstr ""

#: src/memory-management/move.md:84
msgid "In the `say_hello` example:"
msgstr ""

#: src/memory-management/move.md:86
msgid ""
"With the first call to `say_hello`, `main` gives up ownership of `name`. "
"Afterwards, `name` cannot be used anymore within `main`."
msgstr ""

#: src/memory-management/move.md:87
msgid ""
"The heap memory allocated for `name` will be freed at the end of the "
"`say_hello` function."
msgstr ""

#: src/memory-management/move.md:88
msgid ""
"`main` can retain ownership if it passes `name` as a reference (`&name`) and "
"if `say_hello` accepts a reference as a parameter."
msgstr ""

#: src/memory-management/move.md:89
msgid ""
"Alternatively, `main` can pass a clone of `name` in the first call (`name."
"clone()`)."
msgstr ""

#: src/memory-management/move.md:90
msgid ""
"Rust makes it harder than C++ to inadvertently create copies by making move "
"semantics the default, and by forcing programmers to make clones explicit."
msgstr ""

#: src/memory-management/move.md:94
msgid "Defensive Copies in Modern C++"
msgstr "Defensive kopier i moderne C++"

#: src/memory-management/move.md:96
msgid "Modern C++ solves this differently:"
msgstr ""

#: src/memory-management/move.md:99
msgid "\"Cpp\""
msgstr "\"Cpp\""

#: src/memory-management/move.md:100
msgid "// Duplicate the data in s1.\n"
msgstr ""

#: src/memory-management/move.md:103
msgid ""
"The heap data from `s1` is duplicated and `s2` gets its own independent copy."
msgstr ""

#: src/memory-management/move.md:104
msgid "When `s1` and `s2` go out of scope, they each free their own memory."
msgstr ""

#: src/memory-management/move.md:106
msgid "Before copy-assignment:"
msgstr ""

#: src/memory-management/move.md:123
msgid "After copy-assignment:"
msgstr ""

#: src/memory-management/move.md:149
msgid ""
"C++ has made a slightly different choice than Rust. Because `=` copies data, "
"the string data has to be cloned. Otherwise we would get a double-free when "
"either string goes out of scope."
msgstr ""

#: src/memory-management/move.md:153
msgid ""
"C++ also has [`std::move`](https://en.cppreference.com/w/cpp/utility/move), "
"which is used to indicate when a value may be moved from. If the example had "
"been `s2 = std::move(s1)`, no heap allocation would take place. After the "
"move, `s1` would be in a valid but unspecified state. Unlike Rust, the "
"programmer is allowed to keep using `s1`."
msgstr ""

#: src/memory-management/move.md:158
msgid ""
"Unlike Rust, `=` in C++ can run arbitrary code as determined by the type "
"which is being copied or moved."
msgstr ""

#: src/memory-management/clone.md:3
msgid ""
"Sometimes you _want_ to make a copy of a value. The `Clone` trait "
"accomplishes this."
msgstr ""

#: src/memory-management/clone.md:23
msgid ""
"The idea of `Clone` is to make it easy to spot where heap allocations are "
"occurring. Look for `.clone()` and a few others like `Vec::new` or `Box::"
"new`."
msgstr ""

#: src/memory-management/clone.md:26
msgid ""
"It's common to \"clone your way out\" of problems with the borrow checker, "
"and return later to try to optimize those clones away."
msgstr ""

#: src/memory-management/copy-types.md:6
msgid ""
"While move semantics are the default, certain types are copied by default:"
msgstr ""

#: src/memory-management/copy-types.md:18
msgid "These types implement the `Copy` trait."
msgstr ""

#: src/memory-management/copy-types.md:20
msgid "You can opt-in your own types to use copy semantics:"
msgstr ""

#: src/memory-management/copy-types.md:35
msgid "After the assignment, both `p1` and `p2` own their own data."
msgstr ""

#: src/memory-management/copy-types.md:36
msgid "We can also use `p1.clone()` to explicitly copy the data."
msgstr ""

#: src/memory-management/copy-types.md:41
msgid "Copying and cloning are not the same thing:"
msgstr ""

#: src/memory-management/copy-types.md:43
msgid ""
"Copying refers to bitwise copies of memory regions and does not work on "
"arbitrary objects."
msgstr ""

#: src/memory-management/copy-types.md:44
msgid ""
"Copying does not allow for custom logic (unlike copy constructors in C++)."
msgstr ""

#: src/memory-management/copy-types.md:45
msgid ""
"Cloning is a more general operation and also allows for custom behavior by "
"implementing the `Clone` trait."
msgstr ""

#: src/memory-management/copy-types.md:46
msgid "Copying does not work on types that implement the `Drop` trait."
msgstr ""

#: src/memory-management/copy-types.md:48
msgid "In the above example, try the following:"
msgstr ""

#: src/memory-management/copy-types.md:50
msgid ""
"Add a `String` field to `struct Point`. It will not compile because `String` "
"is not a `Copy` type."
msgstr ""

#: src/memory-management/copy-types.md:51
msgid ""
"Remove `Copy` from the `derive` attribute. The compiler error is now in the "
"`println!` for  `p1`."
msgstr ""

#: src/memory-management/copy-types.md:52
msgid "Show that it works if you clone `p1` instead."
msgstr ""

#: src/memory-management/drop.md:1
msgid "The `Drop` Trait"
msgstr ""

#: src/memory-management/drop.md:3
msgid ""
"Values which implement [`Drop`](https://doc.rust-lang.org/std/ops/trait.Drop."
"html) can specify code to run when they go out of scope:"
msgstr ""

#: src/memory-management/drop.md:12
msgid "\"Dropping {}\""
msgstr "\"Dropper {}\""

#: src/memory-management/drop.md:17
#: src/exercises/concurrency/link-checker.md:92
#: src/exercises/concurrency/solutions-morning.md:123
msgid "\"a\""
msgstr "\"a\""

#: src/memory-management/drop.md:19 src/testing/googletest.md:12
msgid "\"b\""
msgstr "\"b\""

#: src/memory-management/drop.md:21
msgid "\"c\""
msgstr "\"c\""

#: src/memory-management/drop.md:22
msgid "\"d\""
msgstr "\"d\""

#: src/memory-management/drop.md:23
msgid "\"Exiting block B\""
msgstr ""

#: src/memory-management/drop.md:25
msgid "\"Exiting block A\""
msgstr ""

#: src/memory-management/drop.md:28
msgid "\"Exiting main\""
msgstr ""

#: src/memory-management/drop.md:35
msgid "Note that `std::mem::drop` is not the same as `std::ops::Drop::drop`."
msgstr ""

#: src/memory-management/drop.md:36
msgid "Values are automatically dropped when they go out of scope."
msgstr ""

#: src/memory-management/drop.md:37
msgid ""
"When a value is dropped, if it implements `std::ops::Drop` then its `Drop::"
"drop` implementation will be called."
msgstr ""

#: src/memory-management/drop.md:39
msgid ""
"All its fields will then be dropped too, whether or not it implements `Drop`."
msgstr ""

#: src/memory-management/drop.md:40
msgid ""
"`std::mem::drop` is just an empty function that takes any value. The "
"significance is that it takes ownership of the value, so at the end of its "
"scope it gets dropped. This makes it a convenient way to explicitly drop "
"values earlier than they would otherwise go out of scope."
msgstr ""

#: src/memory-management/drop.md:43
msgid ""
"This can be useful for objects that do some work on `drop`: releasing locks, "
"closing files, etc."
msgstr ""

#: src/memory-management/drop.md:48
msgid "Why doesn't `Drop::drop` take `self`?"
msgstr ""

#: src/memory-management/drop.md:49
msgid ""
"Short-answer: If it did, `std::mem::drop` would be called at the end of the "
"block, resulting in another call to `Drop::drop`, and a stack overflow!"
msgstr ""

#: src/memory-management/drop.md:52
msgid "Try replacing `drop(a)` with `a.drop()`."
msgstr ""

#: src/memory-management/exercise.md:3
msgid ""
"In this example, we will implement a complex data type that owns all of its "
"data. We will use the \"builder pattern\" to support building a new value "
"piece-by-piece, using convenience functions."
msgstr ""

#: src/memory-management/exercise.md:7
msgid "Fill in the missing pieces."
msgstr ""

#: src/memory-management/exercise.md:22 src/memory-management/solution.md:16
msgid "/// A representation of a software package.\n"
msgstr ""

#: src/memory-management/exercise.md:35
#, fuzzy
msgid "\"1\""
msgstr "\"\""

#: src/memory-management/exercise.md:38 src/memory-management/solution.md:35
msgid ""
"/// A builder for a Package. Use `build()` to create the `Package` itself.\n"
msgstr ""

#: src/memory-management/exercise.md:44
#, fuzzy
msgid "\"2\""
msgstr "\"\""

#: src/memory-management/exercise.md:47 src/memory-management/solution.md:50
msgid "/// Set the package version.\n"
msgstr ""

#: src/memory-management/exercise.md:53 src/memory-management/solution.md:56
msgid "/// Set the package authors.\n"
msgstr ""

#: src/memory-management/exercise.md:55
#, fuzzy
msgid "\"3\""
msgstr "\"\""

#: src/memory-management/exercise.md:58 src/memory-management/solution.md:62
msgid "/// Add an additional dependency.\n"
msgstr ""

#: src/memory-management/exercise.md:60
#, fuzzy
msgid "\"4\""
msgstr "\"\""

#: src/memory-management/exercise.md:63 src/memory-management/solution.md:68
msgid "/// Set the language. If not set, language defaults to None.\n"
msgstr ""

#: src/memory-management/exercise.md:65
#, fuzzy
msgid "\"5\""
msgstr "\"\""

#: src/memory-management/exercise.md:74 src/memory-management/exercise.md:76
#: src/memory-management/solution.md:80 src/memory-management/solution.md:82
msgid "\"base64\""
msgstr ""

#: src/memory-management/exercise.md:74 src/memory-management/solution.md:80
msgid "\"0.13\""
msgstr ""

#: src/memory-management/exercise.md:75 src/memory-management/solution.md:81
msgid "\"base64: {base64:?}\""
msgstr ""

#: src/memory-management/exercise.md:77 src/memory-management/solution.md:83
msgid "\"0.4\""
msgstr ""

#: src/memory-management/exercise.md:80 src/memory-management/solution.md:86
#, fuzzy
msgid "\"log: {log:?}\""
msgstr "\"{dog:?}\""

#: src/memory-management/exercise.md:81 src/memory-management/solution.md:87
msgid "\"hawk\""
msgstr ""

#: src/memory-management/exercise.md:82 src/memory-management/solution.md:88
msgid "\"djmitche\""
msgstr ""

#: src/memory-management/exercise.md:83 src/memory-management/solution.md:89
msgid "\"4.0\""
msgstr ""

#: src/memory-management/exercise.md:87 src/memory-management/solution.md:93
#, fuzzy
msgid "\"serde: {serde:?}\""
msgstr "\"expr: {:?}\""

#: src/memory-management/solution.md:43
msgid "\"0.1\""
msgstr ""

#: src/smart-pointers.md:4
msgid "[Box](./smart-pointers/box.md) (10 minutes)"
msgstr ""

#: src/smart-pointers.md:5
msgid "[Rc](./smart-pointers/rc.md) (5 minutes)"
msgstr ""

#: src/smart-pointers.md:6
msgid "[Exercise: Binary Tree](./smart-pointers/exercise.md) (30 minutes)"
msgstr ""

#: src/smart-pointers/box.md:1
#: src/android/interoperability/cpp/type-mapping.md:9
#, fuzzy
msgid "`Box<T>`"
msgstr "`Box`"

#: src/smart-pointers/box.md:3
msgid ""
"[`Box`](https://doc.rust-lang.org/std/boxed/struct.Box.html) is an owned "
"pointer to data on the heap:"
msgstr ""

#: src/smart-pointers/box.md:8
msgid "\"five: {}\""
msgstr "\"five: {}\""

#: src/smart-pointers/box.md:26
msgid ""
"`Box<T>` implements `Deref<Target = T>`, which means that you can [call "
"methods from `T` directly on a `Box<T>`](https://doc.rust-lang.org/std/ops/"
"trait.Deref.html#more-on-deref-coercion)."
msgstr ""

#: src/smart-pointers/box.md:29
msgid ""
"Recursive data types or data types with dynamic sizes need to use a `Box`:"
msgstr ""

#: src/smart-pointers/box.md:40 src/smart-pointers/box.md:86
msgid "\"{list:?}\""
msgstr "\"{list:?}\""

#: src/smart-pointers/box.md:44
msgid ""
"```bob\n"
" Stack                           Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"- -.\n"
":                         :     :                                               :\n"
":    "
"list                 :     :                                               :\n"
":   +------+----+----+    :     :    +------+----+----+    +------+----+----"
"+   :\n"
":   | Cons | 1  | o--+----+-----+--->| Cons | 2  | o--+--->| Nil  | // | // "
"|   :\n"
":   +------+----+----+    :     :    +------+----+----+    +------+----+----"
"+   :\n"
":                         :     :                                               :\n"
":                         :     :                                               :\n"
"'- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"- -'\n"
"```"
msgstr ""
"```bob\n"
" Stak                            Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"- -.\n"
":                         :     :                                               :\n"
":    "
"list                 :     :                                               :\n"
":   +------+----+----+    :     :    +------+----+----+    +------+----+----"
"+   :\n"
":   | Cons | 1  | o--+----+-----+--->| Cons | 2  | o--+--->| Nil  | // | // "
"|   :\n"
":   +------+----+----+    :     :    +------+----+----+    +------+----+----"
"+   :\n"
":                         :     :                                               :\n"
":                         :     :                                               :\n"
"'- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"- -'\n"
"```"

#: src/smart-pointers/box.md:59
msgid ""
"`Box` is like `std::unique_ptr` in C++, except that it's guaranteed to be "
"not null."
msgstr ""

#: src/smart-pointers/box.md:60
msgid ""
"In the above example, you can even leave out the `*` in the `println!` "
"statement thanks to `Deref`."
msgstr ""

#: src/smart-pointers/box.md:61
msgid "A `Box` can be useful when you:"
msgstr ""

#: src/smart-pointers/box.md:62
msgid ""
"have a type whose size that can't be known at compile time, but the Rust "
"compiler wants to know an exact size."
msgstr ""

#: src/smart-pointers/box.md:63
msgid ""
"want to transfer ownership of a large amount of data. To avoid copying large "
"amounts of data on the stack, instead store the data on the heap in a `Box` "
"so only the pointer is moved."
msgstr ""

#: src/smart-pointers/box.md:65
msgid ""
"If `Box` was not used and we attempted to embed a `List` directly into the "
"`List`, the compiler would not compute a fixed size of the struct in memory "
"(`List` would be of infinite size)."
msgstr ""

#: src/smart-pointers/box.md:68
msgid ""
"`Box` solves this problem as it has the same size as a regular pointer and "
"just points at the next element of the `List` in the heap."
msgstr ""

#: src/smart-pointers/box.md:71
msgid ""
"Remove the `Box` in the List definition and show the compiler error. "
"\"Recursive with indirection\" is a hint you might want to use a Box or "
"reference of some kind, instead of storing a value directly."
msgstr ""

#: src/smart-pointers/box.md:75
msgid "Niche Optimization"
msgstr ""

#: src/smart-pointers/box.md:90
msgid ""
"A `Box` cannot be empty, so the pointer is always valid and non-`null`. This "
"allows the compiler to optimize the memory layout:"
msgstr ""

#: src/smart-pointers/box.md:93
msgid ""
"```bob\n"
" Stack                           Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"-.\n"
":                         :     :                                             :\n"
":    "
"list                 :     :                                             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":   | 1  | o--+-----------+-----+--->| 2  | o--+--->| // | null "
"|             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":                         :     :                                             :\n"
":                         :     :                                             :\n"
"`- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"-'\n"
"```"
msgstr ""
"```bob\n"
" Stak                            Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"-.\n"
":                         :     :                                             :\n"
":    "
"list                 :     :                                             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":   | 1  | o--+-----------+-----+--->| 2  | o--+--->| // | null "
"|             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":                         :     :                                             :\n"
":                         :     :                                             :\n"
"`- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"-'\n"
"```"

#: src/smart-pointers/rc.md:1
msgid "`Rc`"
msgstr "`Rc`"

#: src/smart-pointers/rc.md:3
msgid ""
"[`Rc`](https://doc.rust-lang.org/std/rc/struct.Rc.html) is a reference-"
"counted shared pointer. Use this when you need to refer to the same data "
"from multiple places:"
msgstr ""

#: src/smart-pointers/rc.md:13
msgid "\"a: {a}\""
msgstr "\"a: {a}\""

#: src/smart-pointers/rc.md:14
msgid "\"b: {b}\""
msgstr "\"b: {b}\""

#: src/smart-pointers/rc.md:18
msgid ""
"See [`Arc`](../concurrency/shared_state/arc.md) and [`Mutex`](https://doc."
"rust-lang.org/std/sync/struct.Mutex.html) if you are in a multi-threaded "
"context."
msgstr ""

#: src/smart-pointers/rc.md:19
msgid ""
"You can _downgrade_ a shared pointer into a [`Weak`](https://doc.rust-lang."
"org/std/rc/struct.Weak.html) pointer to create cycles that will get dropped."
msgstr ""

#: src/smart-pointers/rc.md:30
msgid ""
"`Rc`'s count ensures that its contained value is valid for as long as there "
"are references."
msgstr ""

#: src/smart-pointers/rc.md:31
msgid "`Rc` in Rust is like `std::shared_ptr` in C++."
msgstr ""

#: src/smart-pointers/rc.md:32
msgid ""
"`Rc::clone` is cheap: it creates a pointer to the same allocation and "
"increases the reference count. Does not make a deep clone and can generally "
"be ignored when looking for performance issues in code."
msgstr ""

#: src/smart-pointers/rc.md:33
msgid ""
"`make_mut` actually clones the inner value if necessary (\"clone-on-write\") "
"and returns a mutable reference."
msgstr ""

#: src/smart-pointers/rc.md:34
msgid "Use `Rc::strong_count` to check the reference count."
msgstr ""

#: src/smart-pointers/rc.md:35
msgid ""
"`Rc::downgrade` gives you a _weakly reference-counted_ object to create "
"cycles that will be dropped properly (likely in combination with `RefCell`, "
"on the next slide)."
msgstr ""

#: src/smart-pointers/exercise.md:3
msgid ""
"A binary tree is a tree-type data structure where every node has two "
"children (left and right). We will create a tree where each node stores a "
"value. For a given node N, all nodes in a N's left subtree contain smaller "
"values, and all nodes in N's right subtree will contain larger values."
msgstr ""

#: src/smart-pointers/exercise.md:8
msgid "Implement the following types, so that the given tests pass."
msgstr ""

#: src/smart-pointers/exercise.md:17 src/smart-pointers/solution.md:10
msgid ""
"/// A container storing a set of values, using a binary tree.\n"
"///\n"
"/// If the same value is added multiple times, it is only stored once.\n"
msgstr ""

#: src/smart-pointers/exercise.md:23
msgid "// Implement `new`, `insert`, and `has`.\n"
msgstr ""

#: src/smart-pointers/exercise.md:38 src/smart-pointers/solution.md:84
msgid "// not a unique item\n"
msgstr ""

#: src/smart-pointers/exercise.md:73
msgid ""
"Extra Credit: implement an iterator over a binary tree that returns the "
"values in order."
msgstr ""

#: src/smart-pointers/solution.md:68 src/testing/googletest.md:11
msgid "\"bar\""
msgstr "\"bar\""

#: src/welcome-day-3-afternoon.md:4
msgid "[Borrowing](./borrowing.md) (1 hour)"
msgstr ""

#: src/welcome-day-3-afternoon.md:5
msgid ""
"[Slices and Lifetimes](./slices-and-lifetimes.md) (1 hour and 10 minutes)"
msgstr ""

#: src/welcome-day-3-afternoon.md:7
msgid ""
"Including 10 minute breaks, this session should take about 2 hours and 20 "
"minutes"
msgstr ""

#: src/borrowing.md:4
msgid "[Borrowing a Value](./borrowing/shared.md) (10 minutes)"
msgstr ""

#: src/borrowing.md:5
msgid "[Borrow Checking](./borrowing/borrowck.md) (10 minutes)"
msgstr ""

#: src/borrowing.md:6
msgid "[Interior Mutability](./borrowing/interior-mutability.md) (10 minutes)"
msgstr ""

#: src/borrowing.md:7
msgid "[Exercise: Health Statistics](./borrowing/exercise.md) (30 minutes)"
msgstr ""

#: src/borrowing/shared.md:3
msgid ""
"As we saw before, instead of transferring ownership when calling a function, "
"you can let a function _borrow_ the value:"
msgstr ""

#: src/borrowing/shared.md:23
msgid "The `add` function _borrows_ two points and returns a new point."
msgstr ""

#: src/borrowing/shared.md:24
msgid "The caller retains ownership of the inputs."
msgstr ""

#: src/borrowing/shared.md:29
msgid ""
"This slide is a review of the material on references from day 1, expanding "
"slightly to include function arguments and return values."
msgstr ""

#: src/borrowing/shared.md:34
msgid "Notes on stack returns:"
msgstr ""

#: src/borrowing/shared.md:36
msgid ""
"Demonstrate that the return from `add` is cheap because the compiler can "
"eliminate the copy operation. Change the above code to print stack addresses "
"and run it on the [Playground](https://play.rust-lang.org/) or look at the "
"assembly in [Godbolt](https://rust.godbolt.org/). In the \"DEBUG\" "
"optimization level, the addresses should change, while they stay the same "
"when changing to the \"RELEASE\" setting:"
msgstr ""

#: src/borrowing/shared.md:57
msgid "The Rust compiler can do return value optimization (RVO)."
msgstr ""

#: src/borrowing/shared.md:58
msgid ""
"In C++, copy elision has to be defined in the language specification because "
"constructors can have side effects. In Rust, this is not an issue at all. If "
"RVO did not happen, Rust will always perform a simple and efficient `memcpy` "
"copy."
msgstr ""

#: src/borrowing/borrowck.md:3
msgid ""
"Rust's _borrow checker_ puts constraints on the ways you can borrow values. "
"For a given value, at any time:"
msgstr ""

#: src/borrowing/borrowck.md:5
msgid "You can have one or more shared references to the value, _or_"
msgstr ""

#: src/borrowing/borrowck.md:6
msgid "You can have exactly one exclusive reference to the value."
msgstr ""

#: src/borrowing/borrowck.md:27
msgid ""
"Note that the requirement is that conflicting references not _exist_ at the "
"same point. It does not matter where the reference is dereferenced."
msgstr ""

#: src/borrowing/borrowck.md:28
msgid ""
"The above code does not compile because `a` is borrowed as mutable (through "
"`c`) and as immutable (through `b`) at the same time."
msgstr ""

#: src/borrowing/borrowck.md:29
msgid ""
"Move the `println!` statement for `b` before the scope that introduces `c` "
"to make the code compile."
msgstr ""

#: src/borrowing/borrowck.md:30
msgid ""
"After that change, the compiler realizes that `b` is only ever used before "
"the new mutable borrow of `a` through `c`. This is a feature of the borrow "
"checker called \"non-lexical lifetimes\"."
msgstr ""

#: src/borrowing/borrowck.md:31
msgid ""
"The exclusive reference constraint is quite strong. Rust uses it to ensure "
"that data races do not occur. Rust also _relies_ on this constraint to "
"optimize codes. For example, a value behind a shared reference can be safely "
"cached in a register for the lifetime of that reference."
msgstr ""

#: src/borrowing/borrowck.md:32
msgid ""
"The borrow checker is designed to accommodate many common patterns, such as "
"taking exclusive references to different fields in a struct at the same "
"time. But, there are some situations where it doesn't quite \"get it\" and "
"this often results in \"fighting with the borrow checker.\""
msgstr ""

#: src/borrowing/interior-mutability.md:6
msgid ""
"Rust provides a few safe means of modifying a value given only a shared "
"reference to that value. All of these replace copmile-time checks with "
"runtime checks."
msgstr ""

#: src/borrowing/interior-mutability.md:10
msgid "`Cell` and `RefCell`"
msgstr "`Cell` og `RefCell`"

#: src/borrowing/interior-mutability.md:12
msgid ""
"[`Cell`](https://doc.rust-lang.org/std/cell/struct.Cell.html) and [`RefCell`]"
"(https://doc.rust-lang.org/std/cell/struct.RefCell.html) implement what Rust "
"calls _interior mutability:_ mutation of values in an immutable context."
msgstr ""

#: src/borrowing/interior-mutability.md:17
msgid ""
"`Cell` is typically used for simple types, as it requires copying or moving "
"values. More complex interior types typically use `RefCell`, which tracks "
"shared and exclusive references at runtime and panics if they are misused."
msgstr ""

#: src/borrowing/interior-mutability.md:49
msgid "\"graph: {root:#?}\""
msgstr ""

#: src/borrowing/interior-mutability.md:50
msgid "\"graph sum: {}\""
msgstr ""

#: src/borrowing/interior-mutability.md:57
msgid ""
"If we were using `Cell` instead of `RefCell` in this example, we would have "
"to move the `Node` out of the `Rc` to push children, then move it back in. "
"This is safe because there's always one, un-referenced value in the cell, "
"but it's not ergonomic."
msgstr ""

#: src/borrowing/interior-mutability.md:58
msgid ""
"To do anything with a Node, you must call a `RefCell` method, usually "
"`borrow` or `borrow_mut`."
msgstr ""

#: src/borrowing/interior-mutability.md:59
msgid ""
"Demonstrate that reference loops can be created by adding `root` to `subtree."
"children` (don't try to print it!)."
msgstr ""

#: src/borrowing/interior-mutability.md:60
msgid ""
"To demonstrate a runtime panic, add a `fn inc(&mut self)` that increments "
"`self.value` and calls the same method on its children. This will panic in "
"the presence of the reference loop, with `thread 'main' panicked at 'already "
"borrowed: BorrowMutError'`."
msgstr ""

#: src/borrowing/exercise.md:3
msgid ""
"You're working on implementing a health-monitoring system. As part of that, "
"you need to keep track of users' health statistics."
msgstr ""

#: src/borrowing/exercise.md:6
msgid ""
"You'll start with some stubbed functions in an `impl` block as well as a "
"`User` struct definition. Your goal is to implement the stubbed out methods "
"on the `User` `struct` defined in the `impl` block."
msgstr ""

#: src/borrowing/exercise.md:10
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and fill in the missing "
"methods:"
msgstr ""

#: src/borrowing/exercise.md:51
msgid ""
"\"Update a user's statistics based on measurements from a visit to the "
"doctor\""
msgstr ""

#: src/borrowing/exercise.md:56 src/borrowing/exercise.md:62
#: src/borrowing/exercise.md:68 src/borrowing/solution.md:58
#: src/borrowing/solution.md:64 src/borrowing/solution.md:70
#: src/android/build-rules/library.md:43 src/android/aidl/client.md:23
msgid "\"Bob\""
msgstr "\"Bob\""

#: src/borrowing/exercise.md:57 src/borrowing/solution.md:59
msgid "\"I'm {} and my age is {}\""
msgstr ""

#: src/slices-and-lifetimes.md:4
msgid "[Slices: &\\[T\\]](./slices-and-lifetimes/slices.md) (10 minutes)"
msgstr ""

#: src/slices-and-lifetimes.md:5
msgid "[String References](./slices-and-lifetimes/str.md) (10 minutes)"
msgstr ""

#: src/slices-and-lifetimes.md:6
msgid ""
"[Lifetime Annotations](./slices-and-lifetimes/lifetime-annotations.md) (10 "
"minutes)"
msgstr ""

#: src/slices-and-lifetimes.md:7
msgid ""
"[Lifetime Elision](./slices-and-lifetimes/lifetime-elision.md) (5 minutes)"
msgstr ""

#: src/slices-and-lifetimes.md:8
msgid ""
"[Struct Lifetimes](./slices-and-lifetimes/struct-lifetimes.md) (5 minutes)"
msgstr ""

#: src/slices-and-lifetimes.md:9
msgid ""
"[Exercise: Protobuf Parsing](./slices-and-lifetimes/exercise.md) (30 minutes)"
msgstr ""

#: src/slices-and-lifetimes/slices.md:1
msgid "Slices"
msgstr "Arraysegmenter"

#: src/slices-and-lifetimes/slices.md:3
msgid "A slice gives you a view into a larger collection:"
msgstr ""

#: src/slices-and-lifetimes/slices.md:17
msgid "Slices borrow data from the sliced type."
msgstr ""

#: src/slices-and-lifetimes/slices.md:18
msgid "Question: What happens if you modify `a[3]` right before printing `s`?"
msgstr ""

#: src/slices-and-lifetimes/slices.md:23
msgid ""
"We create a slice by borrowing `a` and specifying the starting and ending "
"indexes in brackets."
msgstr ""

#: src/slices-and-lifetimes/slices.md:25
msgid ""
"If the slice starts at index 0, Rust‚Äôs range syntax allows us to drop the "
"starting index, meaning that `&a[0..a.len()]` and `&a[..a.len()]` are "
"identical."
msgstr ""

#: src/slices-and-lifetimes/slices.md:27
msgid ""
"The same is true for the last index, so `&a[2..a.len()]` and `&a[2..]` are "
"identical."
msgstr ""

#: src/slices-and-lifetimes/slices.md:29
msgid ""
"To easily create a slice of the full array, we can therefore use `&a[..]`."
msgstr ""

#: src/slices-and-lifetimes/slices.md:31
msgid ""
"`s` is a reference to a slice of `i32`s. Notice that the type of `s` "
"(`&[i32]`) no longer mentions the array length. This allows us to perform "
"computation on slices of different sizes."
msgstr ""

#: src/slices-and-lifetimes/slices.md:33
msgid ""
"Slices always borrow from another object. In this example, `a` has to remain "
"'alive' (in scope) for at least as long as our slice."
msgstr ""

#: src/slices-and-lifetimes/slices.md:35
msgid ""
"The question about modifying `a[3]` can spark an interesting discussion, but "
"the answer is that for memory safety reasons you cannot do it through `a` at "
"this point in the execution, but you can read the data from both `a` and `s` "
"safely. It works before you created the slice, and again after the "
"`println`, when the slice is no longer used. More details will be explained "
"in the borrow checker section."
msgstr ""

#: src/slices-and-lifetimes/str.md:6
msgid ""
"We can now understand the two string types in Rust: `&str` is almost like "
"`&[char]`, but with its data stored in a variable-length encoding (UTF-8)."
msgstr ""

#: src/slices-and-lifetimes/str.md:12
msgid "\"s1: {s1}\""
msgstr "\"s1: {s1}\""

#: src/slices-and-lifetimes/str.md:14
msgid "\"Hello \""
msgstr "\"Hallo \""

#: src/slices-and-lifetimes/str.md:20
msgid "\"s3: {s3}\""
msgstr "\"s3: {s3}\""

#: src/slices-and-lifetimes/str.md:24
msgid "Rust terminology:"
msgstr ""

#: src/slices-and-lifetimes/str.md:26
msgid "`&str` an immutable reference to a string slice."
msgstr ""

#: src/slices-and-lifetimes/str.md:27
msgid "`String` a mutable string buffer."
msgstr ""

#: src/slices-and-lifetimes/str.md:32
msgid ""
"`&str` introduces a string slice, which is an immutable reference to UTF-8 "
"encoded string data stored in a block of memory. String literals "
"(`‚ÄùHello‚Äù`), are stored in the program‚Äôs binary."
msgstr ""

#: src/slices-and-lifetimes/str.md:35
msgid ""
"Rust‚Äôs `String` type is a wrapper around a vector of bytes. As with a "
"`Vec<T>`, it is owned."
msgstr ""

#: src/slices-and-lifetimes/str.md:37
msgid ""
"As with many other types `String::from()` creates a string from a string "
"literal; `String::new()` creates a new empty string, to which string data "
"can be added using the `push()` and `push_str()` methods."
msgstr ""

#: src/slices-and-lifetimes/str.md:40
msgid ""
"The `format!()` macro is a convenient way to generate an owned string from "
"dynamic values. It accepts the same format specification as `println!()`."
msgstr ""

#: src/slices-and-lifetimes/str.md:43
msgid ""
"You can borrow `&str` slices from `String` via `&` and optionally range "
"selection.  If you select a byte range that is not aligned to character "
"boundaries, the expression will panic.  The `chars` iterator iterates over "
"characters and is preferred over trying to get character boundaries right."
msgstr ""

#: src/slices-and-lifetimes/str.md:48
msgid ""
"For C++ programmers: think of `&str` as `const char*` from C++, but the one "
"that always points to a valid string in memory. Rust `String` is a rough "
"equivalent of `std::string` from C++ (main difference: it can only contain "
"UTF-8 encoded bytes and will never use a small-string optimization)."
msgstr ""

#: src/slices-and-lifetimes/str.md:52
msgid "Byte strings literals allow you to create a `&[u8]` value directly:"
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:1
msgid "Lifetimes"
msgstr "Livstider"

#: src/slices-and-lifetimes/lifetime-annotations.md:3
msgid ""
"A reference has a _lifetime_, which must \"outlive\" the value it refers to. "
"This is verified by the borrow checker."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:6
msgid ""
"The lifetime can be implicit - this is what we have seen so far.  Lifetimes "
"can also be explicit: `&'a Point`, `&'document str`.  Lifetimes start with "
"`'` and `'a` is a typical default name.  Read `&'a Point` as \"a borrowed "
"`Point` which is valid for at least the lifetime `a`\"."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:11
msgid ""
"Lifetimes are always inferred by the compiler: you cannot assign a lifetime "
"yourself. Explicit lifetime annotations create constraints where there is "
"ambiguity; the compiler verifies that there is a valid solution."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:15
msgid ""
"Lifetimes become more complicated when considering passing values to and "
"returning values from functions."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:29
msgid "// What is the lifetime of p3?\n"
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:30
#, fuzzy
msgid "\"p3: {p3:?}\""
msgstr "\"v: {:?}\""

#: src/slices-and-lifetimes/lifetime-annotations.md:37
msgid ""
"In this example, the the compiler does not know what lifetime to infer for "
"`p3`. Looking inside the function body shows that it can only safely assume "
"that `p3`'s lifetime is the shorter of `p1` and `p2`. But just like types, "
"Rust requires explicit annotations of lifetimes on function arguments and "
"return values."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:43
msgid "Add `'a` appropriately to `left_most`:"
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:49
msgid ""
"This says, \"given p1 and p2 which both outlive `'a`, the return value lives "
"for at least `'a`."
msgstr ""

#: src/slices-and-lifetimes/lifetime-annotations.md:51
msgid ""
"In common cases, lifetimes can be elided, as described on the next slide."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:1
msgid "Lifetimes in Function Calls"
msgstr "Livstider i funktionskald"

#: src/slices-and-lifetimes/lifetime-elision.md:3
msgid ""
"Lifetimes for function arguments and return values must be fully specified, "
"but Rust allows lifetimes to be elided in most cases with [a few simple "
"rules](https://doc.rust-lang.org/nomicon/lifetime-elision.html). This is not "
"inference -- it is just a syntactic shorthand."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:8
msgid "Each argument which does not have a lifetime annotation is given one."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:9
msgid ""
"If there is only one argument lifetime, it is given to all un-annotated "
"return values."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:10
msgid ""
"If there are multiple argument lifetimes, but the first one is for `self`, "
"that lifetime is given to all un-annotated return values."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:50
msgid "In this example, `cab_distance` is trivially elided."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:52
msgid ""
"The `nearest` function provides another example of a function with multiple "
"references in its arguments that requires explicit annotation."
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:54
msgid "Try adjusting the signature to \"lie\" about the lifetimes returned:"
msgstr ""

#: src/slices-and-lifetimes/lifetime-elision.md:60
msgid ""
"This won't compile, demonstrating that the annotations are checked for "
"validity by the compiler.  Note that this is not the case for raw pointers "
"(unsafe), and this is a common source of errors with unsafe Rust."
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:1
msgid "Lifetimes in Data Structures"
msgstr "Livstider i datastrukturer"

#: src/slices-and-lifetimes/struct-lifetimes.md:3
msgid ""
"If a data type stores borrowed data, it must be annotated with a lifetime:"
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:10
msgid "\"Bye {text}!\""
msgstr "\"Farvel {text}!\""

#: src/slices-and-lifetimes/struct-lifetimes.md:14
msgid "\"The quick brown fox jumps over the lazy dog.\""
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:17
msgid "// erase(text);\n"
msgstr "// erase(text);\n"

#: src/slices-and-lifetimes/struct-lifetimes.md:18
msgid "\"{fox:?}\""
msgstr "\"{fox:?}\""

#: src/slices-and-lifetimes/struct-lifetimes.md:19
msgid "\"{dog:?}\""
msgstr "\"{dog:?}\""

#: src/slices-and-lifetimes/struct-lifetimes.md:26
msgid ""
"In the above example, the annotation on `Highlight` enforces that the data "
"underlying the contained `&str` lives at least as long as any instance of "
"`Highlight` that uses that data."
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:27
msgid ""
"If `text` is consumed before the end of the lifetime of `fox` (or `dog`), "
"the borrow checker throws an error."
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:28
msgid ""
"Types with borrowed data force users to hold on to the original data. This "
"can be useful for creating lightweight views, but it generally makes them "
"somewhat harder to use."
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:29
msgid "When possible, make data structures own their data directly."
msgstr ""

#: src/slices-and-lifetimes/struct-lifetimes.md:30
msgid ""
"Some structs with multiple references inside can have more than one lifetime "
"annotation. This can be necessary if there is a need to describe lifetime "
"relationships between the references themselves, in addition to the lifetime "
"of the struct itself. Those are very advanced use cases."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:3
msgid ""
"In this exercise, you will build a parser for the [protobuf binary encoding]"
"(https://protobuf.dev/programming-guides/encoding/). Don't worry, it's "
"simpler than it seems! This illustrates a common parsing pattern, passing "
"slices of data. The underlying data itself is never copied."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:8
msgid ""
"Fully parsing a protobuf message requires knowing the types of the fields, "
"indexed by their field numbers. That is typically provided in a `proto` "
"file. In this exercise, we'll encode that information into `match` "
"statements in functions that get called for each field."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:13
msgid "We'll use the following proto:"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:28
msgid ""
"A proto message is encoded as a series of fields, one after the next. Each "
"is implemented as a \"tag\" followed by the value. The tag contains a field "
"number (e.g., `2` for the `id` field of a `Person` message) and a wire type "
"defining how the payload should be determined from the byte stream."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:33
msgid ""
"Integers, including the tag, are represented with a variable-length encoding "
"called VARINT. Luckily, `parse_varint` is defined for you below. The given "
"code also defines callbacks to handle `Person` and `PhoneNumber` fields, and "
"to parse a message into a series of calls to those callbacks."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:38
msgid "What remains for you is to implement the `parse_field` function."
msgstr ""

#: src/slices-and-lifetimes/exercise.md:47
#: src/slices-and-lifetimes/solution.md:10
msgid "\"Invalid varint\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:49
#: src/slices-and-lifetimes/solution.md:12
msgid "\"Invalid wire-type\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:51
#: src/slices-and-lifetimes/solution.md:14
msgid "\"Unexpected EOF\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:53
#: src/slices-and-lifetimes/solution.md:16
msgid "\"Invalid length\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:55
#: src/slices-and-lifetimes/solution.md:18
msgid "\"Unexpected wire-type)\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:57
#: src/slices-and-lifetimes/solution.md:20
msgid "\"Invalid string (not UTF-8)\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:60
#: src/slices-and-lifetimes/solution.md:23
msgid "/// A wire type as seen on the wire.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:63
#: src/slices-and-lifetimes/solution.md:26
msgid "/// The Varint WireType indicates the value is a single VARINT.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:65
#: src/slices-and-lifetimes/solution.md:28
msgid ""
"//I64,  -- not needed for this exercise\n"
"    /// The Len WireType indicates that the value is a length represented as "
"a VARINT\n"
"    /// followed by exactly that number of bytes.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:69
#: src/slices-and-lifetimes/solution.md:32
msgid ""
"/// The I32 WireType indicates that the value is precisely 4 bytes in little-"
"endian order\n"
"    /// containing a 32-bit signed integer.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:74
#: src/slices-and-lifetimes/solution.md:37
msgid "/// A field's value, typed based on the wire type.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:78
#: src/slices-and-lifetimes/solution.md:41
msgid "//I64(i64),  -- not needed for this exercise\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:83
#: src/slices-and-lifetimes/solution.md:46
msgid "/// A field, containing the field number and its value.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:96
#: src/slices-and-lifetimes/solution.md:59
msgid "//1 => WireType::I64,  -- not needed for this exercise\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:126
#: src/slices-and-lifetimes/solution.md:89
msgid ""
"/// Parse a VARINT, returning the parsed value and the remaining bytes.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:134
#: src/slices-and-lifetimes/solution.md:97
msgid ""
"// This is the last byte of the VARINT, so convert it to\n"
"            // a u64 and return it.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:144
#: src/slices-and-lifetimes/solution.md:107
msgid "// More than 7 bytes is invalid.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:147
#: src/slices-and-lifetimes/solution.md:110
msgid "/// Convert a tag into a field number and a WireType.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:155
#: src/slices-and-lifetimes/solution.md:117
msgid "/// Parse a field, returning the remaining bytes\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:158
msgid ""
"// 1. Read and unpack the tag.\n"
"    // 2. Based on the wire type, build a Field, consuming as many bytes as\n"
"    //    necessary.\n"
"    // 3. Return the field, and any un-consumed bytes.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:164
#: src/slices-and-lifetimes/solution.md:154
msgid ""
"/// Parse a message in the given data, calling `field_callback` for each "
"field in the message.\n"
"///\n"
"/// The entire input is consumed.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:181
#: src/slices-and-lifetimes/solution.md:171
msgid "/// Handle a field in a Person message.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:184
#: src/slices-and-lifetimes/solution.md:174
#, fuzzy
msgid "\"name: {}\""
msgstr "\"nyt areal: {}\""

#: src/slices-and-lifetimes/exercise.md:185
#: src/slices-and-lifetimes/solution.md:175
#, fuzzy
msgid "\"id: {}\""
msgstr "\"int: {}\""

#: src/slices-and-lifetimes/exercise.md:187
#: src/slices-and-lifetimes/solution.md:177
msgid "\"phone:\""
msgstr ""

#: src/slices-and-lifetimes/exercise.md:190
#: src/slices-and-lifetimes/exercise.md:200
#: src/slices-and-lifetimes/solution.md:180
#: src/slices-and-lifetimes/solution.md:190
msgid "// skip everything else\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:195
#: src/slices-and-lifetimes/solution.md:185
msgid "/// Handle a field in a PhoneNumber message.\n"
msgstr ""

#: src/slices-and-lifetimes/exercise.md:198
#: src/slices-and-lifetimes/solution.md:188
#, fuzzy
msgid "\"  number: {}\""
msgstr "\"{numbers:?}\""

#: src/slices-and-lifetimes/exercise.md:199
#: src/slices-and-lifetimes/solution.md:189
#, fuzzy
msgid "\"  type: {}\""
msgstr "\"int: {}\""

#: src/slices-and-lifetimes/solution.md:141
msgid "// Unwrap error because `value` is definitely 4 bytes long.\n"
msgstr ""

#: src/slices-and-lifetimes/solution.md:216
#: src/slices-and-lifetimes/solution.md:223
#: src/slices-and-lifetimes/solution.md:230
#, fuzzy
msgid "b\"hello\""
msgstr "\"hallo\""

#: src/welcome-day-4.md:1
#, fuzzy
msgid "Welcome to Day 4"
msgstr "Velkommen til Dag 1"

#: src/welcome-day-4.md:3
msgid ""
"Today we will cover topics relating to building large-scale software in Rust:"
msgstr ""

#: src/welcome-day-4.md:5
msgid "Iterators: a deep dive on the `Iterator` trait."
msgstr ""

#: src/welcome-day-4.md:6
msgid "Modules and visibility."
msgstr ""

#: src/welcome-day-4.md:7
msgid "Testing."
msgstr ""

#: src/welcome-day-4.md:8
msgid "Error handling: panics, `Result`, and the try operator `?`."
msgstr ""

#: src/welcome-day-4.md:9
msgid ""
"Unsafe Rust: the escape hatch when you can't express yourself in safe Rust."
msgstr ""

#: src/welcome-day-4.md:14
msgid "[Welcome](./welcome-day-4.md) (3 minutes)"
msgstr ""

#: src/welcome-day-4.md:15
msgid "[Iterators](./iterators.md) (45 minutes)"
msgstr ""

#: src/welcome-day-4.md:16
msgid "[Modules](./modules.md) (45 minutes)"
msgstr ""

#: src/welcome-day-4.md:17
msgid "[Testing](./testing.md) (1 hour)"
msgstr ""

#: src/welcome-day-4.md:19
msgid ""
"Including 10 minute breaks, this session should take about 3 hours and 5 "
"minutes"
msgstr ""

#: src/iterators.md:4
msgid "[Iterators](./iterators/iterators.md) (5 minutes)"
msgstr ""

#: src/iterators.md:5
msgid "[IntoIterator](./iterators/intoiterator.md) (5 minutes)"
msgstr ""

#: src/iterators.md:6
msgid "[FromIterator](./iterators/fromiterator.md) (5 minutes)"
msgstr ""

#: src/iterators.md:7
msgid ""
"[Exercise: Iterator Method Chaining](./iterators/exercise.md) (30 minutes)"
msgstr ""

#: src/iterators/iterators.md:6
msgid ""
"The [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) "
"trait supports iterating over values in a collection. It requires a `next` "
"method and provides lots of methods. Many standard library types implement "
"`Iterator`, and you can implement it yourself, too:"
msgstr ""

#: src/iterators/iterators.md:30
msgid "\"fib({i}): {n}\""
msgstr "\"fib({i}): {n}\""

#: src/iterators/iterators.md:38
msgid ""
"The `Iterator` trait implements many common functional programming "
"operations over collections (e.g. `map`, `filter`, `reduce`, etc). This is "
"the trait where you can find all the documentation about them. In Rust these "
"functions should produce the code as efficient as equivalent imperative "
"implementations."
msgstr ""

#: src/iterators/iterators.md:43
msgid ""
"`IntoIterator` is the trait that makes for loops work. It is implemented by "
"collection types such as `Vec<T>` and references to them such as `&Vec<T>` "
"and `&[T]`. Ranges also implement it. This is why you can iterate over a "
"vector with `for i in some_vec { .. }` but `some_vec.next()` doesn't exist."
msgstr ""

#: src/iterators/intoiterator.md:1
msgid "`IntoIterator`"
msgstr "`IntoIterator`"

#: src/iterators/intoiterator.md:3
msgid ""
"The `Iterator` trait tells you how to _iterate_ once you have created an "
"iterator. The related trait [`IntoIterator`](https://doc.rust-lang.org/std/"
"iter/trait.IntoIterator.html) defines how to create an iterator for a type. "
"It is used automatically by the `for` loop."
msgstr ""

#: src/iterators/intoiterator.md:51
msgid "\"point = {x}, {y}\""
msgstr ""

#: src/iterators/intoiterator.md:59
msgid ""
"Click through to the docs for `IntoIterator`. Every implementation of "
"`IntoIterator` must declare two types:"
msgstr ""

#: src/iterators/intoiterator.md:62
msgid "`Item`: the type to iterate over, such as `i8`,"
msgstr ""

#: src/iterators/intoiterator.md:63
msgid "`IntoIter`: the `Iterator` type returned by the `into_iter` method."
msgstr ""

#: src/iterators/intoiterator.md:65
msgid ""
"Note that `IntoIter` and `Item` are linked: the iterator must have the same "
"`Item` type, which means that it returns `Option<Item>`"
msgstr ""

#: src/iterators/intoiterator.md:68
msgid "The example iterates over all combinations of x and y coordinates."
msgstr ""

#: src/iterators/intoiterator.md:70
msgid ""
"Try iterating over the grid twice in `main`. Why does this fail? Note that "
"`IntoIterator::into_iter` takes ownership of `self`."
msgstr ""

#: src/iterators/intoiterator.md:73
msgid ""
"Fix this issue by implementing `IntoIterator` for `&Grid` and storing a "
"reference to the `Grid` in `GridIter`."
msgstr ""

#: src/iterators/intoiterator.md:76
msgid ""
"The same problem can occur for standard library types: `for e in "
"some_vector` will take ownership of `some_vector` and iterate over owned "
"elements from that vector. Use `for e in &some_vector` instead, to iterate "
"over references to elements of `some_vector`."
msgstr ""

#: src/iterators/fromiterator.md:3
msgid ""
"[`FromIterator`](https://doc.rust-lang.org/std/iter/trait.FromIterator.html) "
"lets you build a collection from an [`Iterator`](https://doc.rust-lang.org/"
"std/iter/trait.Iterator.html)."
msgstr ""

#: src/iterators/fromiterator.md:12
msgid "\"prime_squares: {prime_squares:?}\""
msgstr ""

#: src/iterators/fromiterator.md:19
#, fuzzy
msgid "`Iterator` implements"
msgstr "`Iterator`"

#: src/iterators/fromiterator.md:28
msgid "There are two ways to specify `B` for this method:"
msgstr ""

#: src/iterators/fromiterator.md:30
msgid ""
"With the \"turbofish\": `some_iterator.collect::<COLLECTION_TYPE>()`, as "
"shown. The `_` shorthand used here lets Rust infer the type of the `Vec` "
"elements. "
msgstr ""

#: src/iterators/fromiterator.md:33
msgid ""
"With type inference: `let prime_squares: Vec<_> = some_iterator.collect()`. "
"Rewrite the example to use this form."
msgstr ""

#: src/iterators/fromiterator.md:36
msgid ""
"There are basic implementations of `FromIterator` for `Vec`, `HashMap`, etc. "
"There are also more specialized implementations which let you do cool things "
"like convert an `Iterator<Item = Result<V, E>>` into a `Result<Vec<V>, E>`."
msgstr ""

#: src/iterators/exercise.md:3
msgid ""
"In this exercise, you will need to find and use some of the provided methods "
"in the [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) "
"trait to implement a complex calculation."
msgstr ""

#: src/iterators/exercise.md:6
msgid ""
"Copy the following code to <https://play.rust-lang.org/> and make the tests "
"pass. Use an iterator expression and `collect` the result to construct the "
"return value."
msgstr ""

#: src/iterators/exercise.md:12 src/iterators/solution.md:4
msgid ""
"/// Calculate the differences between elements of `values` offset by "
"`offset`, wrapping\n"
"/// around from the end of `values` to the beginning.\n"
"///\n"
"/// Element `n` of the result is `values[(n+offset)%len] - values[n]`.\n"
msgstr ""

#: src/modules.md:4
msgid "[Modules](./modules/modules.md) (5 minutes)"
msgstr ""

#: src/modules.md:5
msgid "[Filesystem Hierarchy](./modules/filesystem.md) (5 minutes)"
msgstr ""

#: src/modules.md:6
msgid "[Visibility](./modules/visibility.md) (5 minutes)"
msgstr ""

#: src/modules.md:7
msgid "[use, super, self](./modules/paths.md) (10 minutes)"
msgstr ""

#: src/modules.md:8
msgid ""
"[Exercise: Modules for the GUI Library](./modules/exercise.md) (20 minutes)"
msgstr ""

#: src/modules/modules.md:3
msgid "We have seen how `impl` blocks let us namespace functions to a type."
msgstr ""

#: src/modules/modules.md:5
msgid "Similarly, `mod` lets us namespace types and functions:"
msgstr ""

#: src/modules/modules.md:10
msgid "\"In the foo module\""
msgstr ""

#: src/modules/modules.md:16
msgid "\"In the bar module\""
msgstr ""

#: src/modules/modules.md:29
msgid ""
"Packages provide functionality and include a `Cargo.toml` file that "
"describes how to build a bundle of 1+ crates."
msgstr ""

#: src/modules/modules.md:30
msgid ""
"Crates are a tree of modules, where a binary crate creates an executable and "
"a library crate compiles to a library."
msgstr ""

#: src/modules/modules.md:31
msgid "Modules define organization, scope, and are the focus of this section."
msgstr ""

#: src/modules/filesystem.md:3
msgid ""
"Omitting the module content will tell Rust to look for it in another file:"
msgstr ""

#: src/modules/filesystem.md:9
msgid ""
"This tells rust that the `garden` module content is found at `src/garden."
"rs`. Similarly, a `garden::vegetables` module can be found at `src/garden/"
"vegetables.rs`."
msgstr ""

#: src/modules/filesystem.md:12
msgid "The `crate` root is in:"
msgstr ""

#: src/modules/filesystem.md:14
msgid "`src/lib.rs` (for a library crate)"
msgstr ""

#: src/modules/filesystem.md:15
msgid "`src/main.rs` (for a binary crate)"
msgstr ""

#: src/modules/filesystem.md:17
msgid ""
"Modules defined in files can be documented, too, using \"inner doc "
"comments\". These document the item that contains them -- in this case, a "
"module."
msgstr ""

#: src/modules/filesystem.md:21
msgid ""
"//! This module implements the garden, including a highly performant "
"germination\n"
"//! implementation.\n"
msgstr ""

#: src/modules/filesystem.md:23
msgid "// Re-export types from this module.\n"
msgstr ""

#: src/modules/filesystem.md:27
msgid "/// Sow the given seed packets.\n"
msgstr ""

#: src/modules/filesystem.md:30
msgid "/// Harvest the produce in the garden that is ready.\n"
msgstr ""

#: src/modules/filesystem.md:38
msgid ""
"Before Rust 2018, modules needed to be located at `module/mod.rs` instead of "
"`module.rs`, and this is still a working alternative for editions after 2018."
msgstr ""

#: src/modules/filesystem.md:40
msgid ""
"The main reason to introduce `filename.rs` as alternative to `filename/mod."
"rs` was because many files named `mod.rs` can be hard to distinguish in IDEs."
msgstr ""

#: src/modules/filesystem.md:43
msgid "Deeper nesting can use folders, even if the main module is a file:"
msgstr ""

#: src/modules/filesystem.md:53
msgid ""
"The place rust will look for modules can be changed with a compiler "
"directive:"
msgstr ""

#: src/modules/filesystem.md:56
msgid "\"some/path.rs\""
msgstr ""

#: src/modules/filesystem.md:60
msgid ""
"This is useful, for example, if you would like to place tests for a module "
"in a file named `some_module_test.rs`, similar to the convention in Go."
msgstr ""

#: src/modules/visibility.md:3
msgid "Modules are a privacy boundary:"
msgstr ""

#: src/modules/visibility.md:5
msgid "Module items are private by default (hides implementation details)."
msgstr ""

#: src/modules/visibility.md:6
msgid "Parent and sibling items are always visible."
msgstr ""

#: src/modules/visibility.md:7
msgid ""
"In other words, if an item is visible in module `foo`, it's visible in all "
"the descendants of `foo`."
msgstr ""

#: src/modules/visibility.md:13
msgid "\"outer::private\""
msgstr ""

#: src/modules/visibility.md:17
msgid "\"outer::public\""
msgstr ""

#: src/modules/visibility.md:22
msgid "\"outer::inner::private\""
msgstr ""

#: src/modules/visibility.md:26
msgid "\"outer::inner::public\""
msgstr ""

#: src/modules/visibility.md:40
msgid "Use the `pub` keyword to make modules public."
msgstr ""

#: src/modules/visibility.md:42
msgid ""
"Additionally, there are advanced `pub(...)` specifiers to restrict the scope "
"of public visibility."
msgstr ""

#: src/modules/visibility.md:44
msgid ""
"See the [Rust Reference](https://doc.rust-lang.org/reference/visibility-and-"
"privacy.html#pubin-path-pubcrate-pubsuper-and-pubself)."
msgstr ""

#: src/modules/visibility.md:45
msgid "Configuring `pub(crate)` visibility is a common pattern."
msgstr ""

#: src/modules/visibility.md:46
msgid "Less commonly, you can give visibility to a specific path."
msgstr ""

#: src/modules/visibility.md:47
msgid ""
"In any case, visibility must be granted to an ancestor module (and all of "
"its descendants)."
msgstr ""

#: src/modules/paths.md:3
msgid ""
"A module can bring symbols from another module into scope with `use`. You "
"will typically see something like this at the top of each module:"
msgstr ""

#: src/modules/paths.md:11
msgid "Paths"
msgstr ""

#: src/modules/paths.md:13
msgid "Paths are resolved as follows:"
msgstr ""

#: src/modules/paths.md:15
msgid "As a relative path:"
msgstr ""

#: src/modules/paths.md:16
msgid "`foo` or `self::foo` refers to `foo` in the current module,"
msgstr ""

#: src/modules/paths.md:17
msgid "`super::foo` refers to `foo` in the parent module."
msgstr ""

#: src/modules/paths.md:19
msgid "As an absolute path:"
msgstr ""

#: src/modules/paths.md:20
msgid "`crate::foo` refers to `foo` in the root of the current crate,"
msgstr ""

#: src/modules/paths.md:21
msgid "`bar::foo` refers to `foo` in the `bar` crate."
msgstr ""

#: src/modules/paths.md:26
msgid ""
"It is common to \"re-export\" symbols at a shorter path. For example, the "
"top-level `lib.rs` in a crate might have"
msgstr ""

#: src/modules/paths.md:36
msgid ""
"making `DiskStorage` and `NetworkStorage` available to other crates with a "
"convenient, short path."
msgstr ""

#: src/modules/paths.md:39
msgid ""
"For the most part, only items that appear in a module need to be `use`'d. "
"However, a trait must be in scope to call any methods on that trait, even if "
"a type implementing that trait is already in scope. For example, to use the "
"`read_to_string` method on a type implementing the `Read` trait, you need to "
"`use std::io::Read`."
msgstr ""

#: src/modules/paths.md:45
msgid ""
"The `use` statement can have a wildcard: `use std::io::*`. This is "
"discouraged because it is not clear which items are imported, and those "
"might change over time."
msgstr ""

#: src/modules/exercise.md:3
msgid ""
"In this exercise, you will reorganize the GUI Library exercise from the "
"\"Methods and Traits\" segment of the course into a collection of modules. "
"It is typical to put each type or set of closely-related types into its own "
"module, so each widget type should get its own module."
msgstr ""

#: src/modules/exercise.md:8
msgid ""
"If you no longer have your version, that's fine - refer back to the "
"[provided solution](../methods-and-traits/solution.html)."
msgstr ""

#: src/modules/exercise.md:11
msgid "Cargo Setup"
msgstr ""

#: src/modules/exercise.md:13
msgid ""
"The Rust playground only supports one file, so you will need to make a Cargo "
"project on your local filesystem:"
msgstr ""

#: src/modules/exercise.md:22
msgid ""
"Edit `src/main.rs` to add `mod` statements, and add additional files in the "
"`src` directory."
msgstr ""

#: src/modules/exercise.md:28
msgid ""
"Encourage students to divide the code in a way that feels natural for them, "
"and get accustomed to the required `mod`, `use`, and `pub` declarations. "
"Afterward, discuss what organizations are most idiomatic."
msgstr ""

#: src/modules/solution.md:20
msgid "// ---- src/widgets.rs ----\n"
msgstr ""

#: src/modules/solution.md:42
msgid "// ---- src/widgets/label.rs ----\n"
msgstr ""

#: src/modules/solution.md:59
#, fuzzy
msgid "// ANCHOR_END: Label-width\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md:67
#, fuzzy
msgid "// ANCHOR: Label-draw_into\n"
msgstr "// ANCHOR: main\n"

#: src/modules/solution.md:69
#, fuzzy
msgid "// ANCHOR_END: Label-draw_into\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md:76
msgid "// ---- src/widgets/button.rs ----\n"
msgstr ""

#: src/modules/solution.md:93
#, fuzzy
msgid "// ANCHOR_END: Button-width\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md:97
#, fuzzy
msgid "// ANCHOR: Button-draw_into\n"
msgstr "// ANCHOR: main\n"

#: src/modules/solution.md:99
#, fuzzy
msgid "// ANCHOR_END: Button-draw_into\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md:114
msgid "// ---- src/widgets/window.rs ----\n"
msgstr ""

#: src/modules/solution.md:144
msgid ""
"// ANCHOR_END: Window-width\n"
"        // Add 4 paddings for borders\n"
msgstr ""

#: src/modules/solution.md:149
#, fuzzy
msgid "// ANCHOR: Window-draw_into\n"
msgstr "// ANCHOR: main\n"

#: src/modules/solution.md:151
#, fuzzy
msgid "// ANCHOR_END: Window-draw_into\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/modules/solution.md:174
msgid "// ---- src/main.rs ----\n"
msgstr ""

#: src/testing.md:4
msgid "[Test Modules](./testing/unit-tests.md) (5 minutes)"
msgstr ""

#: src/testing.md:5
msgid "[Other Types of Tests](./testing/other.md) (10 minutes)"
msgstr ""

#: src/testing.md:6
msgid "[Useful Crates](./testing/useful-crates.md) (3 minutes)"
msgstr ""

#: src/testing.md:7
msgid "[GoogleTest](./testing/googletest.md) (5 minutes)"
msgstr ""

#: src/testing.md:8
msgid "[Compiler lints and Clippy](./testing/lints.md) (5 minutes)"
msgstr ""

#: src/testing.md:9
msgid "[Exercise: Luhn Algorithm](./testing/exercise.md) (30 minutes)"
msgstr ""

#: src/testing/unit-tests.md:1
msgid "Unit Tests"
msgstr ""

#: src/testing/unit-tests.md:3
msgid "Rust and Cargo come with a simple unit test framework:"
msgstr ""

#: src/testing/unit-tests.md:5
msgid "Unit tests are supported throughout your code."
msgstr ""

#: src/testing/unit-tests.md:7
msgid "Integration tests are supported via the `tests/` directory."
msgstr ""

#: src/testing/unit-tests.md:9
msgid ""
"Tests are marked with `#[test]`.  Unit tests are often put in a nested "
"`tests` module, using `#[cfg(test)]` to conditionally compile them only when "
"building tests."
msgstr ""

#: src/testing/unit-tests.md:37
msgid "\"Hello World\""
msgstr "\"Hej verden\""

#: src/testing/unit-tests.md:42
msgid "This lets you unit test private helpers."
msgstr ""

#: src/testing/unit-tests.md:43
msgid "The `#[cfg(test)]` attribute is only active when you run `cargo test`."
msgstr ""

#: src/testing/unit-tests.md:48
msgid "Run the tests in the playground in order to show their results."
msgstr ""

#: src/testing/other.md:3
msgid "Integration Tests"
msgstr ""

#: src/testing/other.md:5
msgid "If you want to test your library as a client, use an integration test."
msgstr ""

#: src/testing/other.md:7
msgid "Create a `.rs` file under `tests/`:"
msgstr ""

#: src/testing/other.md:10
msgid "// tests/my_library.rs\n"
msgstr ""

#: src/testing/other.md:19
msgid "These tests only have access to the public API of your crate."
msgstr ""

#: src/testing/other.md:21
msgid "Documentation Tests"
msgstr ""

#: src/testing/other.md:23
msgid "Rust has built-in support for documentation tests:"
msgstr ""

#: src/testing/other.md:26
msgid ""
"/// Shortens a string to the given length.\n"
"///\n"
"/// ```\n"
"/// # use playground::shorten_string;\n"
"/// assert_eq!(shorten_string(\"Hello World\", 5), \"Hello\");\n"
"/// assert_eq!(shorten_string(\"Hello World\", 20), \"Hello World\");\n"
"/// ```\n"
msgstr ""

#: src/testing/other.md:38
msgid "Code blocks in `///` comments are automatically seen as Rust code."
msgstr ""

#: src/testing/other.md:39
msgid "The code will be compiled and executed as part of `cargo test`."
msgstr ""

#: src/testing/other.md:40
msgid ""
"Adding `# ` in the code will hide it from the docs, but will still compile/"
"run it."
msgstr ""

#: src/testing/other.md:41
msgid ""
"Test the above code on the [Rust Playground](https://play.rust-lang.org/?"
"version=stable&mode=debug&edition=2021&gist=3ce2ad13ea1302f6572cb15cd96becf0)."
msgstr ""

#: src/testing/useful-crates.md:3
msgid "Rust comes with only basic support for writing tests."
msgstr ""

#: src/testing/useful-crates.md:5
msgid "Here are some additional crates which we recommend for writing tests:"
msgstr ""

#: src/testing/useful-crates.md:7
msgid ""
"[googletest](https://docs.rs/googletest): Comprehensive test assertion "
"library in the tradition of GoogleTest for C++."
msgstr ""

#: src/testing/useful-crates.md:8
msgid "[proptest](https://docs.rs/proptest): Property-based testing for Rust."
msgstr ""

#: src/testing/useful-crates.md:9
msgid ""
"[rstest](https://docs.rs/rstest): Support for fixtures and parameterised "
"tests."
msgstr ""

#: src/testing/googletest.md:3
msgid ""
"The [GoogleTest](https://docs.rs/googletest/) crate allows for flexible test "
"assertions using _matchers_:"
msgstr ""

#: src/testing/googletest.md:11
msgid "\"baz\""
msgstr ""

#: src/testing/googletest.md:12
msgid "\"xyz\""
msgstr ""

#: src/testing/googletest.md:16
msgid ""
"If we change the last element to `\"!\"`, the test fails with a structured "
"error message pin-pointing the error:"
msgstr ""

#: src/testing/googletest.md:37
msgid ""
"GoogleTest is not part of the Rust Playground, so you need to run this "
"example in a local environment. Use `cargo add googletest` to quickly add it "
"to an existing Cargo project."
msgstr ""

#: src/testing/googletest.md:41
msgid ""
"The `use googletest::prelude::*;` line imports a number of [commonly used "
"macros and types](https://docs.rs/googletest/latest/googletest/prelude/index."
"html)."
msgstr ""

#: src/testing/googletest.md:44
msgid "This just scratches the surface, there are many builtin matchers."
msgstr ""

#: src/testing/googletest.md:46
msgid ""
"A particularly nice feature is that mismatches in multi-line strings strings "
"are shown as a diff:"
msgstr ""

#: src/testing/googletest.md:52
msgid ""
"\"Memory safety found,\\n\\\n"
"                 Rust's strong typing guides the way,\\n\\\n"
"                 Secure code you'll write.\""
msgstr ""

#: src/testing/googletest.md:57
msgid ""
"\"Memory safety found,\\n\\\n"
"            Rust's silly humor guides the way,\\n\\\n"
"            Secure code you'll write.\""
msgstr ""

#: src/testing/googletest.md:64
msgid "shows a color-coded diff (colors not shown here):"
msgstr ""

#: src/testing/googletest.md:80
msgid ""
"The crate is a Rust port of [GoogleTest for C++](https://google.github.io/"
"googletest/)."
msgstr ""

#: src/testing/googletest.md:85
msgid "GoogleTest is available for use in AOSP."
msgstr ""

#: src/testing/lints.md:1
msgid "Compiler Lints and Clippy"
msgstr ""

#: src/testing/lints.md:3
msgid ""
"The Rust compiler produces fantastic error messages, as well as helpful "
"built-in lints. [Clippy](https://doc.rust-lang.org/clippy/) provides even "
"more lints, organized into groups that can be enabled per-project."
msgstr ""

#: src/testing/lints.md:14
msgid "\"X probably fits in a u16, right? {}\""
msgstr ""

#: src/testing/lints.md:21
msgid ""
"Run the code sample and examine the error message. There are also lints "
"visible here, but those will not be shown once the code compiles. Switch to "
"the Playground site to show those lints."
msgstr ""

#: src/testing/lints.md:25
msgid ""
"After resolving the lints, run `clippy` on the playground site to show "
"clippy warnings. Clippy has extensive documentation of its lints, and adds "
"new lints (including default-deny lints) all the time."
msgstr ""

#: src/testing/lints.md:29
msgid ""
"Note that errors or warnings with `help: ...` can be fixed with `cargo fix` "
"or via your editor."
msgstr ""

#: src/testing/exercise.md:3
msgid "Luhn Algorithm"
msgstr "Luhn-algorithmen"

#: src/testing/exercise.md:5
msgid ""
"The [Luhn algorithm](https://en.wikipedia.org/wiki/Luhn_algorithm) is used "
"to validate credit card numbers. The algorithm takes a string as input and "
"does the following to validate the credit card number:"
msgstr ""

#: src/testing/exercise.md:9
msgid "Ignore all spaces. Reject number with less than two digits."
msgstr ""

#: src/testing/exercise.md:11
msgid ""
"Moving from **right to left**, double every second digit: for the number "
"`1234`, we double `3` and `1`. For the number `98765`, we double `6` and `8`."
msgstr ""

#: src/testing/exercise.md:14
msgid ""
"After doubling a digit, sum the digits if the result is greater than 9. So "
"doubling `7` becomes `14` which becomes `1 + 4 = 5`."
msgstr ""

#: src/testing/exercise.md:17
msgid "Sum all the undoubled and doubled digits."
msgstr ""

#: src/testing/exercise.md:19
msgid "The credit card number is valid if the sum ends with `0`."
msgstr ""

#: src/testing/exercise.md:21
msgid ""
"The provided code provides a buggy implementation of the luhn algorithm, "
"along with two basic unit tests that confirm that most the algorithm is "
"implemented correctly."
msgstr ""

#: src/testing/exercise.md:25
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and write additional "
"tests to uncover bugs in the provided implementation, fixing any bugs you "
"find."
msgstr ""

#: src/testing/exercise.md:60 src/testing/solution.md:75
msgid "\"4263 9826 4026 9299\""
msgstr "\"4263 9826 4026 9299\""

#: src/testing/exercise.md:61 src/testing/solution.md:76
msgid "\"4539 3195 0343 6467\""
msgstr "\"4539 3195 0343 6467\""

#: src/testing/exercise.md:62 src/testing/solution.md:77
msgid "\"7992 7398 713\""
msgstr "\"7992 7398 713\""

#: src/testing/exercise.md:67 src/testing/solution.md:82
msgid "\"4223 9826 4026 9299\""
msgstr "\"4223 9826 4026 9299\""

#: src/testing/exercise.md:68 src/testing/solution.md:83
msgid "\"4539 3195 0343 6476\""
msgstr "\"4539 3195 0343 6476\""

#: src/testing/exercise.md:69 src/testing/solution.md:84
msgid "\"8273 1232 7352 0569\""
msgstr "\"8273 1232 7352 0569\""

#: src/testing/solution.md:4
msgid "// This is the buggy version that appears in the problem.\n"
msgstr ""

#: src/testing/solution.md:30
msgid "// This is the solution and passes all of the tests below.\n"
msgstr ""

#: src/testing/solution.md:62
msgid "\"1234 5678 1234 5670\""
msgstr "\"1234 5678 1234 5670\""

#: src/testing/solution.md:64
msgid "\"Is {cc_number} a valid credit card number? {}\""
msgstr "\"Er {cc_number} et gyldigt kreditkortnummer? {}\""

#: src/testing/solution.md:65
msgid "\"yes\""
msgstr "\"ja\""

#: src/testing/solution.md:65
msgid "\"no\""
msgstr "\"nej\""

#: src/testing/solution.md:90
msgid "\"foo 0 0\""
msgstr "\"foo 0 0\""

#: src/testing/solution.md:96
msgid "\" \""
msgstr "\" \""

#: src/testing/solution.md:97
msgid "\"  \""
msgstr "\"  \""

#: src/testing/solution.md:98
msgid "\"    \""
msgstr "\"    \""

#: src/testing/solution.md:103
msgid "\"0\""
msgstr "\"0\""

#: src/testing/solution.md:108
msgid "\" 0 0 \""
msgstr "\" 0 0 \""

#: src/welcome-day-4-afternoon.md:4
msgid "[Error Handling](./error-handling.md) (45 minutes)"
msgstr ""

#: src/welcome-day-4-afternoon.md:5
msgid "[Unsafe Rust](./unsafe-rust.md) (1 hour and 5 minutes)"
msgstr ""

#: src/welcome-day-4-afternoon.md:7
msgid "Including 10 minute breaks, this session should take about 2 hours"
msgstr ""

#: src/error-handling.md:4
msgid "[Panics](./error-handling/panics.md) (3 minutes)"
msgstr ""

#: src/error-handling.md:5
msgid "[Try operator](./error-handling/try.md) (5 minutes)"
msgstr ""

#: src/error-handling.md:6
msgid "[Try Conversions](./error-handling/try-conversions.md) (5 minutes)"
msgstr ""

#: src/error-handling.md:7
msgid "[Error Trait](./error-handling/error.md) (5 minutes)"
msgstr ""

#: src/error-handling.md:8
msgid ""
"[thiserror and anyhow](./error-handling/thiserror-and-anyhow.md) (5 minutes)"
msgstr ""

#: src/error-handling.md:9
msgid ""
"[Exercise: Rewriting with Result](./error-handling/exercise.md) (20 minutes)"
msgstr ""

#: src/error-handling/panics.md:3
msgid "Rust handles fatal errors with a \"panic\"."
msgstr ""

#: src/error-handling/panics.md:5
msgid "Rust will trigger a panic if a fatal error happens at runtime:"
msgstr ""

#: src/error-handling/panics.md:10
msgid "\"v[100]: {}\""
msgstr "\"v[100]: {}\""

#: src/error-handling/panics.md:14
msgid "Panics are for unrecoverable and unexpected errors."
msgstr ""

#: src/error-handling/panics.md:15
msgid "Panics are symptoms of bugs in the program."
msgstr ""

#: src/error-handling/panics.md:16
msgid "Runtime failures like failed bounds checks can panic"
msgstr ""

#: src/error-handling/panics.md:17
msgid "Assertions (such as `assert!`) panic on failure"
msgstr ""

#: src/error-handling/panics.md:18
msgid "Purpose-specific panics can use the `panic!` macro."
msgstr ""

#: src/error-handling/panics.md:19
msgid ""
"A panic will \"unwind\" the stack, dropping values just as if the functions "
"had returned."
msgstr ""

#: src/error-handling/panics.md:20
msgid ""
"Use non-panicking APIs (such as `Vec::get`) if crashing is not acceptable."
msgstr ""

#: src/error-handling/panics.md:25
msgid ""
"By default, a panic will cause the stack to unwind. The unwinding can be "
"caught:"
msgstr ""

#: src/error-handling/panics.md:32
msgid "\"No problem here!\""
msgstr ""

#: src/error-handling/panics.md:34 src/error-handling/panics.md:39
#, fuzzy
msgid "\"{result:?}\""
msgstr "\"result: {:?}\""

#: src/error-handling/panics.md:37
msgid "\"oh no!\""
msgstr "\"√•h nej!\""

#: src/error-handling/panics.md:43
msgid ""
"Catching is unusual; do not attempt to implement exceptions with "
"`catch_unwind`!"
msgstr ""

#: src/error-handling/panics.md:44
msgid ""
"This can be useful in servers which should keep running even if a single "
"request crashes."
msgstr ""

#: src/error-handling/panics.md:46
msgid "This does not work if `panic = 'abort'` is set in your `Cargo.toml`."
msgstr ""

#: src/error-handling/try.md:1
msgid "Try Operator"
msgstr ""

#: src/error-handling/try.md:3
msgid ""
"Runtime errors like connection-refused or file-not-found are handled with "
"the `Result` type, but matching this type on every call can be cumbersome.  "
"The try-operator `?` is used to return errors to the caller. It lets you "
"turn the common"
msgstr ""

#: src/error-handling/try.md:15
msgid "into the much simpler"
msgstr ""

#: src/error-handling/try.md:21
msgid "We can use this to simplify our error handling code:"
msgstr ""

#: src/error-handling/try.md:42
msgid "//fs::write(\"config.dat\", \"alice\").unwrap();\n"
msgstr "//fs::write(\"config.dat\", \"alice\").unwrap();\n"

#: src/error-handling/try.md:43 src/error-handling/try-conversions.md:64
#: src/error-handling/thiserror-and-anyhow.md:31
msgid "\"config.dat\""
msgstr "\"config.dat\""

#: src/error-handling/try.md:44 src/error-handling/try-conversions.md:65
msgid "\"username or error: {username:?}\""
msgstr ""

#: src/error-handling/try.md:51
msgid "Simplify the `read_username` function to use `?`."
msgstr ""

#: src/error-handling/try.md:55
msgid "The `username` variable can be either `Ok(string)` or `Err(error)`."
msgstr ""

#: src/error-handling/try.md:56
msgid ""
"Use the `fs::write` call to test out the different scenarios: no file, empty "
"file, file with username."
msgstr ""

#: src/error-handling/try.md:57
msgid ""
"Note that `main` can return a `Result<(), E>` as long as it implements `std::"
"process:Termination`. In practice, this means that `E` implements `Debug`. "
"The executable will print the `Err` variant and return a nonzero exit status "
"on error."
msgstr ""

#: src/error-handling/try-conversions.md:3
msgid ""
"The effective expansion of `?` is a little more complicated than previously "
"indicated:"
msgstr ""

#: src/error-handling/try-conversions.md:9
msgid "works the same as"
msgstr ""

#: src/error-handling/try-conversions.md:18
msgid ""
"The `From::from` call here means we attempt to convert the error type to the "
"type returned by the function. This makes it easy to encapsulate errors into "
"higher-level errors."
msgstr ""

#: src/error-handling/try-conversions.md:41
msgid "\"IO error: {e}\""
msgstr "\"IO-fejl: {e}\""

#: src/error-handling/try-conversions.md:42
msgid "\"Found no username in {filename}\""
msgstr ""

#: src/error-handling/try-conversions.md:63
#: src/error-handling/thiserror-and-anyhow.md:30
msgid "//fs::write(\"config.dat\", \"\").unwrap();\n"
msgstr "//fs::write(\"config.dat\", \"\").unwrap();\n"

#: src/error-handling/try-conversions.md:72
msgid ""
"The return type of the function has to be compatible with the nested "
"functions it calls. For instance, a function returning a `Result<T, Err>` "
"can only apply the `?` operator on a function returning a `Result<AnyT, "
"Err>`. It cannot apply the `?` operator on a function returning an "
"`Option<AnyT>` or `Result<T, OtherErr>` unless `OtherErr` implements "
"`From<Err>`. Reciprocally, a function returning an `Option<T>` can only "
"apply the `?` operator on a function returning an `Option<AnyT>`."
msgstr ""

#: src/error-handling/try-conversions.md:78
msgid ""
"You can convert incompatible types into one another with the different "
"`Option` and `Result` methods such as `Option::ok_or`, `Result::ok`, "
"`Result::err`."
msgstr ""

#: src/error-handling/try-conversions.md:82
msgid ""
"It is good practice for all error types that don't need to be `no_std` to "
"implement `std::error::Error`, which requires `Debug` and `Display`. The "
"`Error` crate for `core` is only available in [nightly](https://github.com/"
"rust-lang/rust/issues/103765), so not fully `no_std` compatible yet."
msgstr ""

#: src/error-handling/try-conversions.md:84
msgid ""
"It's generally helpful for them to implement `Clone` and `Eq` too where "
"possible, to make life easier for tests and consumers of your library. In "
"this case we can't easily do so, because `io::Error` doesn't implement them."
msgstr ""

#: src/error-handling/try-conversions.md:88
msgid ""
"A common alternative to a `From` implementation is `Result::map_err`, "
"especially when the conversion only happens in one place."
msgstr ""

#: src/error-handling/error.md:1
msgid "Dynamic Error Types"
msgstr ""

#: src/error-handling/error.md:3
msgid ""
"Sometimes we want to allow any type of error to be returned without writing "
"our own enum covering all the different possibilities. The `std::error::"
"Error` trait makes it easy to create a trait object that can contain any "
"error."
msgstr ""

#: src/error-handling/error.md:20 src/error-handling/error.md:21
#, fuzzy
msgid "\"count.dat\""
msgstr "\"config.dat\""

#: src/error-handling/error.md:20
msgid "\"1i3\""
msgstr ""

#: src/error-handling/error.md:22
#, fuzzy
msgid "\"Count: {count}\""
msgstr "\"count: {}\""

#: src/error-handling/error.md:23
msgid "\"Error: {err}\""
msgstr "\"Fejl: {err}\""

#: src/error-handling/error.md:31
msgid ""
"The `read_count` function can return `std::io::Error` (from file operations) "
"or `std::num::ParseIntError` (from `String::parse`)."
msgstr ""

#: src/error-handling/error.md:34
msgid ""
"Boxing errors saves on code, but gives up the ability to cleanly handle "
"different error cases differently in the program. As such it's generally not "
"a good idea to use `Box<dyn Error>` in the public API of a library, but it "
"can be a good option in a program where you just want to display the error "
"message somewhere."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:1
#, fuzzy
msgid "`thiserror`  and `anyhow`"
msgstr "`From` og `Into`"

#: src/error-handling/thiserror-and-anyhow.md:3
msgid ""
"The [`thiserror`](https://docs.rs/thiserror/)  and [`anyhow`](https://docs."
"rs/anyhow/) crates are widley used to simplify error handling. `thiserror` "
"helps create custom error types that implement `From<T>`. `anyhow` helps "
"with error handling in functions, including adding contextual information to "
"your errors."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:14
msgid "\"Found no username in {0}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:20
msgid "\"Failed to open {path}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:22
msgid "\"Failed to read\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:32
msgid "\"Username: {username}\""
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:33
msgid "\"Error: {err:?}\""
msgstr "\"Fejl: {err:?}\""

#: src/error-handling/thiserror-and-anyhow.md:41
msgid ""
"The `Error` derive macro is provided by `thiserror`, and has lots of useful "
"attributes like `#[error]` to help define a useful error type."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:43
msgid "`anyhow::Result<V>` is a type alias for `Result<V, anyhow::Error>`."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:44
msgid ""
"`anyhow::Error` is essentially a wrapper around `Box<dyn Error>`. As such "
"it's again generally not a good choice for the public API of a library, but "
"is widely used in applications."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:46
msgid ""
"Actual error type inside of it can be extracted for examination if necessary."
msgstr ""

#: src/error-handling/thiserror-and-anyhow.md:47
msgid ""
"Functionality provided by `anyhow::Result<T>` may be familiar to Go "
"developers, as it provides similar usage patterns and ergonomics to `(T, "
"error)` from Go."
msgstr ""

#: src/error-handling/exercise.md:3
msgid ""
"The following implements a very simple parser for an expression language. "
"However, it handles errors by panicking. Rewrite it to instead use idiomatic "
"error handling and propagate errors to a return from `main`. Feel free to "
"use `thiserror` and `anyhow`."
msgstr ""

#: src/error-handling/exercise.md:8
msgid ""
"HINT: start by fixing error handling in the `parse` function. Once that is "
"working correctly, update `Tokenizer` to implement "
"`Iterator<Item=Result<Token, TokenizerError>>` and handle that in the parser."
msgstr ""

#: src/error-handling/exercise.md:15 src/error-handling/solution.md:8
#, fuzzy
msgid "/// An arithmetic operator.\n"
msgstr "/// Parity error.\n"

#: src/error-handling/exercise.md:22 src/error-handling/solution.md:15
msgid "/// A token in the expression language.\n"
msgstr ""

#: src/error-handling/exercise.md:30 src/error-handling/solution.md:23
msgid "/// An expression in the expression language.\n"
msgstr ""

#: src/error-handling/exercise.md:34 src/error-handling/solution.md:27
msgid "/// A reference to a variable.\n"
msgstr ""

#: src/error-handling/exercise.md:36 src/error-handling/solution.md:29
#, fuzzy
msgid "/// A literal number.\n"
msgstr "/// Analyze the numbers.\n"

#: src/error-handling/exercise.md:38 src/error-handling/solution.md:31
#, fuzzy
msgid "/// A binary operation.\n"
msgstr "/// Parity error.\n"

#: src/error-handling/exercise.md:64 src/error-handling/exercise.md:66
#: src/error-handling/solution.md:63 src/error-handling/solution.md:65
#, fuzzy
msgid "'z'"
msgstr "'x'"

#: src/error-handling/exercise.md:66 src/error-handling/solution.md:65
#, fuzzy
msgid "'_'"
msgstr "'x'"

#: src/error-handling/exercise.md:72 src/error-handling/solution.md:71
#, fuzzy
msgid "'+'"
msgstr "'x'"

#: src/error-handling/exercise.md:73 src/error-handling/solution.md:72
#, fuzzy
msgid "'-'"
msgstr "'x'"

#: src/error-handling/exercise.md:74
msgid "\"Unexpected character {c}\""
msgstr ""

#: src/error-handling/exercise.md:84 src/error-handling/solution.md:82
msgid "\"Unexpected end of input\""
msgstr ""

#: src/error-handling/exercise.md:88
msgid "\"Invalid 32-bit integer'\""
msgstr ""

#: src/error-handling/exercise.md:92 src/error-handling/exercise.md:100
msgid "\"Unexpected token {tok:?}\""
msgstr ""

#: src/error-handling/exercise.md:94 src/error-handling/solution.md:105
msgid "// Look ahead to parse a binary operation if present.\n"
msgstr ""

#: src/error-handling/exercise.md:108 src/error-handling/solution.md:120
msgid "\"10+foo+20-30\""
msgstr ""

#: src/error-handling/exercise.md:109 src/error-handling/solution.md:121
#, fuzzy
msgid "\"{expr:?}\""
msgstr "\"expr: {:?}\""

#: src/error-handling/solution.md:41
msgid "\"Unexpected character '{0}' in input\""
msgstr ""

#: src/error-handling/solution.md:80
#, fuzzy
msgid "\"Tokenizer error: {0}\""
msgstr "\"IO-fejl: {e}\""

#: src/error-handling/solution.md:84
msgid "\"Unexpected token {0:?}\""
msgstr ""

#: src/error-handling/solution.md:86
#, fuzzy
msgid "\"Invalid number\""
msgstr "\"analyze_numbers\""

#: src/unsafe-rust.md:4
msgid "[Unsafe](./unsafe-rust/unsafe.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md:5
msgid ""
"[Dereferencing Raw Pointers](./unsafe-rust/dereferencing.md) (10 minutes)"
msgstr ""

#: src/unsafe-rust.md:6
msgid "[Mutable Static Variables](./unsafe-rust/mutable-static.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md:7
msgid "[Unions](./unsafe-rust/unions.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md:8
msgid "[Unsafe Functions](./unsafe-rust/unsafe-functions.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md:9
msgid "[Unsafe Traits](./unsafe-rust/unsafe-traits.md) (5 minutes)"
msgstr ""

#: src/unsafe-rust.md:10
msgid "[Exercise: FFI Wrapper](./unsafe-rust/exercise.md) (30 minutes)"
msgstr ""

#: src/unsafe-rust/unsafe.md:3
msgid "The Rust language has two parts:"
msgstr ""

#: src/unsafe-rust/unsafe.md:5
msgid "**Safe Rust:** memory safe, no undefined behavior possible."
msgstr ""

#: src/unsafe-rust/unsafe.md:6
msgid ""
"**Unsafe Rust:** can trigger undefined behavior if preconditions are "
"violated."
msgstr ""

#: src/unsafe-rust/unsafe.md:8
msgid ""
"We saw mostly safe Rust in this course, but it's important to know what "
"Unsafe Rust is."
msgstr ""

#: src/unsafe-rust/unsafe.md:11
msgid ""
"Unsafe code is usually small and isolated, and its correctness should be "
"carefully documented. It is usually wrapped in a safe abstraction layer."
msgstr ""

#: src/unsafe-rust/unsafe.md:14
msgid "Unsafe Rust gives you access to five new capabilities:"
msgstr ""

#: src/unsafe-rust/unsafe.md:16
msgid "Dereference raw pointers."
msgstr ""

#: src/unsafe-rust/unsafe.md:17
msgid "Access or modify mutable static variables."
msgstr ""

#: src/unsafe-rust/unsafe.md:18
msgid "Access `union` fields."
msgstr ""

#: src/unsafe-rust/unsafe.md:19
msgid "Call `unsafe` functions, including `extern` functions."
msgstr ""

#: src/unsafe-rust/unsafe.md:20
msgid "Implement `unsafe` traits."
msgstr ""

#: src/unsafe-rust/unsafe.md:22
msgid ""
"We will briefly cover unsafe capabilities next. For full details, please see "
"[Chapter 19.1 in the Rust Book](https://doc.rust-lang.org/book/ch19-01-"
"unsafe-rust.html) and the [Rustonomicon](https://doc.rust-lang.org/nomicon/)."
msgstr ""

#: src/unsafe-rust/unsafe.md:29
msgid ""
"Unsafe Rust does not mean the code is incorrect. It means that developers "
"have turned off some compiler safety features and have to write correct code "
"by themselves. It means the compiler no longer enforces Rust's memory-safety "
"rules."
msgstr ""

#: src/unsafe-rust/dereferencing.md:3
msgid "Creating pointers is safe, but dereferencing them requires `unsafe`:"
msgstr ""

#: src/unsafe-rust/dereferencing.md:7
msgid "\"careful!\""
msgstr ""

#: src/unsafe-rust/dereferencing.md:12
msgid ""
"// Safe because r1 and r2 were obtained from references and so are\n"
"    // guaranteed to be non-null and properly aligned, the objects "
"underlying\n"
"    // the references from which they were obtained are live throughout the\n"
"    // whole unsafe block, and they are not accessed either through the\n"
"    // references or concurrently through any other pointers.\n"
msgstr ""

#: src/unsafe-rust/dereferencing.md:18
msgid "\"r1 is: {}\""
msgstr "\"r1 er: {}\""

#: src/unsafe-rust/dereferencing.md:19
msgid "\"uhoh\""
msgstr ""

#: src/unsafe-rust/dereferencing.md:20
msgid "\"r2 is: {}\""
msgstr "\"r2 er: {}\""

#: src/unsafe-rust/dereferencing.md:23
msgid ""
"// NOT SAFE. DO NOT DO THIS.\n"
"    /*\n"
"    let r3: &String = unsafe { &*r1 };\n"
"    drop(s);\n"
"    println!(\"r3 is: {}\", *r3);\n"
"    */"
msgstr ""

#: src/unsafe-rust/dereferencing.md:35
msgid ""
"It is good practice (and required by the Android Rust style guide) to write "
"a comment for each `unsafe` block explaining how the code inside it "
"satisfies the safety requirements of the unsafe operations it is doing."
msgstr ""

#: src/unsafe-rust/dereferencing.md:39
msgid ""
"In the case of pointer dereferences, this means that the pointers must be "
"[_valid_](https://doc.rust-lang.org/std/ptr/index.html#safety), i.e.:"
msgstr ""

#: src/unsafe-rust/dereferencing.md:42
msgid "The pointer must be non-null."
msgstr ""

#: src/unsafe-rust/dereferencing.md:43
msgid ""
"The pointer must be _dereferenceable_ (within the bounds of a single "
"allocated object)."
msgstr ""

#: src/unsafe-rust/dereferencing.md:44
msgid "The object must not have been deallocated."
msgstr ""

#: src/unsafe-rust/dereferencing.md:45
msgid "There must not be concurrent accesses to the same location."
msgstr ""

#: src/unsafe-rust/dereferencing.md:46
msgid ""
"If the pointer was obtained by casting a reference, the underlying object "
"must be live and no reference may be used to access the memory."
msgstr ""

#: src/unsafe-rust/dereferencing.md:49
msgid "In most cases the pointer must also be properly aligned."
msgstr ""

#: src/unsafe-rust/dereferencing.md:51
msgid ""
"The \"NOT SAFE\" sectoin gives an example of a common kind of UB bug: `*r1` "
"has the `'static` lifetime, so `r3` has type `&'static String`, and thus "
"outlives `s`. Creating a reference from a pointer requires _great care_."
msgstr ""

#: src/unsafe-rust/mutable-static.md:3
msgid "It is safe to read an immutable static variable:"
msgstr ""

#: src/unsafe-rust/mutable-static.md:6
msgid "\"Hello, world!\""
msgstr "\"Hej verden!\""

#: src/unsafe-rust/mutable-static.md:9
msgid "\"HELLO_WORLD: {HELLO_WORLD}\""
msgstr "\"HELLO_WORLD: {HELLO_WORLD}\""

#: src/unsafe-rust/mutable-static.md:13
msgid ""
"However, since data races can occur, it is unsafe to read and write mutable "
"static variables:"
msgstr ""

#: src/unsafe-rust/mutable-static.md:20 src/unsafe-rust/mutable-static.md:26
msgid "// Potential data race!\n"
msgstr ""

#: src/unsafe-rust/mutable-static.md:26
msgid "\"COUNTER: {COUNTER}\""
msgstr "\"COUNTER: {COUNTER}\""

#: src/unsafe-rust/mutable-static.md:33
msgid ""
"The program here is safe because it is single-threaded. However, the Rust "
"compiler is conservative and will assume the worst. Try removing the "
"`unsafe` and see how the compiler explains that it is undefined behavior to "
"mutate a static from multiple threads."
msgstr ""

#: src/unsafe-rust/mutable-static.md:37
msgid ""
"Using a mutable static is generally a bad idea, but there are some cases "
"where it might make sense in low-level `no_std` code, such as implementing a "
"heap allocator or working with some C APIs."
msgstr ""

#: src/unsafe-rust/unions.md:3
msgid "Unions are like enums, but you need to track the active field yourself:"
msgstr ""

#: src/unsafe-rust/unions.md:14
msgid "\"int: {}\""
msgstr "\"int: {}\""

#: src/unsafe-rust/unions.md:15
msgid "\"bool: {}\""
msgstr "\"bool: {}\""

#: src/unsafe-rust/unions.md:15
msgid "// Undefined behavior!\n"
msgstr ""

#: src/unsafe-rust/unions.md:22
msgid ""
"Unions are very rarely needed in Rust as you can usually use an enum. They "
"are occasionally needed for interacting with C library APIs."
msgstr ""

#: src/unsafe-rust/unions.md:25
msgid ""
"If you just want to reinterpret bytes as a different type, you probably want "
"[`std::mem::transmute`](https://doc.rust-lang.org/stable/std/mem/fn."
"transmute.html) or a safe wrapper such as the [`zerocopy`](https://crates.io/"
"crates/zerocopy) crate."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:3 src/unsafe-rust/unsafe-functions.md:74
msgid "Calling Unsafe Functions"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:5
msgid ""
"A function or method can be marked `unsafe` if it has extra preconditions "
"you must uphold to avoid undefined behaviour:"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:9 src/unsafe-rust/exercise.md:89
#: src/unsafe-rust/solution.md:41 src/android/interoperability/with-c.md:9
#: src/android/interoperability/with-c/rust.md:15
#: src/android/interoperability/with-c/rust.md:30
#: src/android/interoperability/cpp/cpp-bridge.md:29
#: src/android/interoperability/cpp/cpp-bridge.md:38
#: src/exercises/chromium/build-rules.md:7
#: src/exercises/chromium/build-rules.md:19
#: src/bare-metal/aps/inline-assembly.md:18
#: src/bare-metal/aps/better-uart/using.md:24
#: src/bare-metal/aps/logging/using.md:23 src/exercises/bare-metal/rtc.md:46
#: src/exercises/bare-metal/rtc.md:100 src/exercises/bare-metal/rtc.md:106
#: src/exercises/bare-metal/rtc.md:113 src/exercises/bare-metal/rtc.md:119
#: src/exercises/bare-metal/rtc.md:125 src/exercises/bare-metal/rtc.md:131
#: src/exercises/bare-metal/rtc.md:137 src/exercises/bare-metal/rtc.md:143
#: src/exercises/bare-metal/solutions-afternoon.md:43
msgid "\"C\""
msgstr "\"C\""

#: src/unsafe-rust/unsafe-functions.md:14
msgid "\"üóª‚ààüåè\""
msgstr "\"üóª‚ààüåè\""

#: src/unsafe-rust/unsafe-functions.md:16
msgid ""
"// Safe because the indices are in the correct order, within the bounds of\n"
"    // the string slice, and lie on UTF-8 sequence boundaries.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:19
#: src/unsafe-rust/unsafe-functions.md:20
#: src/unsafe-rust/unsafe-functions.md:21
msgid "\"emoji: {}\""
msgstr "\"emoji: {}\""

#: src/unsafe-rust/unsafe-functions.md:24
msgid "\"char count: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:27
msgid "// Undefined behavior if abs misbehaves.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:28
msgid "\"Absolute value of -3 according to C: {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:31
msgid ""
"// Not upholding the UTF-8 encoding requirement breaks memory safety!\n"
"    // println!(\"emoji: {}\", unsafe { emojis.get_unchecked(0..3) });\n"
"    // println!(\"char count: {}\", count_chars(unsafe { emojis."
"get_unchecked(0..3) }));\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:41
#: src/unsafe-rust/unsafe-functions.md:86
msgid "Writing Unsafe Functions"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:43
msgid ""
"You can mark your own functions as `unsafe` if they require particular "
"conditions to avoid undefined behaviour."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:47
msgid ""
"/// Swaps the values pointed to by the given pointers.\n"
"///\n"
"/// # Safety\n"
"///\n"
"/// The pointers must be valid and properly aligned.\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:62
msgid "// Safe because ...\n"
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:67
msgid "\"a = {}, b = {}\""
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:76
msgid ""
"`get_unchecked`, like most `_unchecked` functions, is unsafe, because it can "
"create UB if the range is incorrect. `abs` is incorrect for a different "
"reason: it is an external function (FFI).  Calling external functions is "
"usually only a problem when those functions do things with pointers which "
"might violate Rust's memory model, but in general any C function might have "
"undefined behaviour under any arbitrary circumstances."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:83
msgid ""
"The `\"C\"` in this example is the ABI; [other ABIs are available too]"
"(https://doc.rust-lang.org/reference/items/external-blocks.html)."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:88
msgid ""
"We wouldn't actually use pointers for a `swap` function - it can be done "
"safely with references."
msgstr ""

#: src/unsafe-rust/unsafe-functions.md:91
msgid ""
"Note that unsafe code is allowed within an unsafe function without an "
"`unsafe` block. We can prohibit this with `#[deny(unsafe_op_in_unsafe_fn)]`. "
"Try adding it and see what happens. This will likely change in a future Rust "
"edition."
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:1
msgid "Implementing Unsafe Traits"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:3
msgid ""
"Like with functions, you can mark a trait as `unsafe` if the implementation "
"must guarantee particular conditions to avoid undefined behaviour."
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:6
msgid ""
"For example, the `zerocopy` crate has an unsafe trait that looks [something "
"like this](https://docs.rs/zerocopy/latest/zerocopy/trait.AsBytes.html):"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:12
msgid ""
"/// ...\n"
"/// # Safety\n"
"/// The type must have a defined representation and no padding.\n"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:23
msgid "// Safe because u32 has a defined representation and no padding.\n"
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:31
msgid ""
"There should be a `# Safety` section on the Rustdoc for the trait explaining "
"the requirements for the trait to be safely implemented."
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:34
msgid ""
"The actual safety section for `AsBytes` is rather longer and more "
"complicated."
msgstr ""

#: src/unsafe-rust/unsafe-traits.md:36
msgid "The built-in `Send` and `Sync` traits are unsafe."
msgstr ""

#: src/unsafe-rust/exercise.md:1
msgid "Safe FFI Wrapper"
msgstr ""

#: src/unsafe-rust/exercise.md:3
msgid ""
"Rust has great support for calling functions through a _foreign function "
"interface_ (FFI). We will use this to build a safe wrapper for the `libc` "
"functions you would use from C to read the names of files in a directory."
msgstr ""

#: src/unsafe-rust/exercise.md:7
msgid "You will want to consult the manual pages:"
msgstr ""

#: src/unsafe-rust/exercise.md:9
msgid "[`opendir(3)`](https://man7.org/linux/man-pages/man3/opendir.3.html)"
msgstr ""

#: src/unsafe-rust/exercise.md:10
msgid "[`readdir(3)`](https://man7.org/linux/man-pages/man3/readdir.3.html)"
msgstr ""

#: src/unsafe-rust/exercise.md:11
msgid "[`closedir(3)`](https://man7.org/linux/man-pages/man3/closedir.3.html)"
msgstr ""

#: src/unsafe-rust/exercise.md:13
msgid ""
"You will also want to browse the [`std::ffi`](https://doc.rust-lang.org/std/"
"ffi/) module. There you find a number of string types which you need for the "
"exercise:"
msgstr ""

#: src/unsafe-rust/exercise.md:16
msgid "Encoding"
msgstr ""

#: src/unsafe-rust/exercise.md:16
msgid "Use"
msgstr ""

#: src/unsafe-rust/exercise.md:18
msgid ""
"[`str`](https://doc.rust-lang.org/std/primitive.str.html) and [`String`]"
"(https://doc.rust-lang.org/std/string/struct.String.html)"
msgstr ""

#: src/unsafe-rust/exercise.md:18
msgid "UTF-8"
msgstr "UTF-8"

#: src/unsafe-rust/exercise.md:18
msgid "Text processing in Rust"
msgstr ""

#: src/unsafe-rust/exercise.md:19
msgid ""
"[`CStr`](https://doc.rust-lang.org/std/ffi/struct.CStr.html) and [`CString`]"
"(https://doc.rust-lang.org/std/ffi/struct.CString.html)"
msgstr ""

#: src/unsafe-rust/exercise.md:19
msgid "NUL-terminated"
msgstr ""

#: src/unsafe-rust/exercise.md:19
msgid "Communicating with C functions"
msgstr ""

#: src/unsafe-rust/exercise.md:20
msgid ""
"[`OsStr`](https://doc.rust-lang.org/std/ffi/struct.OsStr.html) and "
"[`OsString`](https://doc.rust-lang.org/std/ffi/struct.OsString.html)"
msgstr ""

#: src/unsafe-rust/exercise.md:20
msgid "OS-specific"
msgstr ""

#: src/unsafe-rust/exercise.md:20
msgid "Communicating with the OS"
msgstr ""

#: src/unsafe-rust/exercise.md:22
msgid "You will convert between all these types:"
msgstr ""

#: src/unsafe-rust/exercise.md:24
msgid ""
"`&str` to `CString`: you need to allocate space for a trailing `\\0` "
"character,"
msgstr ""

#: src/unsafe-rust/exercise.md:25
msgid "`CString` to `*const i8`: you need a pointer to call C functions,"
msgstr ""

#: src/unsafe-rust/exercise.md:26
msgid ""
"`*const i8` to `&CStr`: you need something which can find the trailing `\\0` "
"character,"
msgstr ""

#: src/unsafe-rust/exercise.md:27
msgid ""
"`&CStr` to `&[u8]`: a slice of bytes is the universal interface for \"some "
"unknown data\","
msgstr ""

#: src/unsafe-rust/exercise.md:28
msgid ""
"`&[u8]` to `&OsStr`: `&OsStr` is a step towards `OsString`, use [`OsStrExt`]"
"(https://doc.rust-lang.org/std/os/unix/ffi/trait.OsStrExt.html) to create it,"
msgstr ""

#: src/unsafe-rust/exercise.md:31
msgid ""
"`&OsStr` to `OsString`: you need to clone the data in `&OsStr` to be able to "
"return it and call `readdir` again."
msgstr ""

#: src/unsafe-rust/exercise.md:34
msgid ""
"The [Nomicon](https://doc.rust-lang.org/nomicon/ffi.html) also has a very "
"useful chapter about FFI."
msgstr ""

#: src/unsafe-rust/exercise.md:45
msgid ""
"Copy the code below to <https://play.rust-lang.org/> and fill in the missing "
"functions and methods:"
msgstr ""

#: src/unsafe-rust/exercise.md:54 src/unsafe-rust/exercise.md:67
#: src/unsafe-rust/exercise.md:78 src/unsafe-rust/exercise.md:92
#: src/unsafe-rust/exercise.md:100 src/unsafe-rust/solution.md:6
#: src/unsafe-rust/solution.md:19 src/unsafe-rust/solution.md:30
#: src/unsafe-rust/solution.md:44 src/unsafe-rust/solution.md:52
msgid "\"macos\""
msgstr "\"macos\""

#: src/unsafe-rust/exercise.md:57 src/unsafe-rust/solution.md:9
msgid "// Opaque type. See https://doc.rust-lang.org/nomicon/ffi.html.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:64 src/unsafe-rust/solution.md:16
msgid ""
"// Layout according to the Linux man page for readdir(3), where ino_t and\n"
"    // off_t are resolved according to the definitions in\n"
"    // /usr/include/x86_64-linux-gnu/{sys/types.h, bits/typesizes.h}.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:77 src/unsafe-rust/solution.md:29
msgid "// Layout according to the macOS man page for dir(5).\n"
msgstr ""

#: src/unsafe-rust/exercise.md:92 src/unsafe-rust/exercise.md:100
#: src/unsafe-rust/solution.md:44 src/unsafe-rust/solution.md:52
msgid "\"x86_64\""
msgstr "\"x86_64\""

#: src/unsafe-rust/exercise.md:95 src/unsafe-rust/solution.md:47
msgid ""
"// See https://github.com/rust-lang/libc/issues/414 and the section on\n"
"        // _DARWIN_FEATURE_64_BIT_INODE in the macOS man page for stat(2).\n"
"        //\n"
"        // \"Platforms that existed before these updates were available\" "
"refers\n"
"        // to macOS (as opposed to iOS / wearOS / etc.) on Intel and "
"PowerPC.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:101 src/unsafe-rust/solution.md:53
msgid "\"readdir$INODE64\""
msgstr "\"readdir$INODE64\""

#: src/unsafe-rust/exercise.md:119 src/unsafe-rust/solution.md:71
msgid ""
"// Call opendir and return a Ok value if that worked,\n"
"        // otherwise return Err with a message.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:128
msgid "// Keep calling readdir until we get a NULL pointer back.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:135 src/unsafe-rust/solution.md:104
msgid "// Call closedir as needed.\n"
msgstr ""

#: src/unsafe-rust/exercise.md:141 src/unsafe-rust/solution.md:115
#: src/unsafe-rust/solution.md:139 src/unsafe-rust/solution.md:154
#: src/android/interoperability/with-c/rust.md:44
msgid "\".\""
msgstr "\".\""

#: src/unsafe-rust/exercise.md:142 src/unsafe-rust/solution.md:116
msgid "\"files: {:#?}\""
msgstr ""

#: src/unsafe-rust/solution.md:73
msgid "\"Invalid path: {err}\""
msgstr ""

#: src/unsafe-rust/solution.md:74
msgid "// SAFETY: path.as_ptr() cannot be NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md:77
msgid "\"Could not open {:?}\""
msgstr ""

#: src/unsafe-rust/solution.md:87
msgid ""
"// Keep calling readdir until we get a NULL pointer back.\n"
"        // SAFETY: self.dir is never NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md:91
msgid "// We have reached the end of the directory.\n"
msgstr ""

#: src/unsafe-rust/solution.md:94
msgid ""
"// SAFETY: dirent is not NULL and dirent.d_name is NUL\n"
"        // terminated.\n"
msgstr ""

#: src/unsafe-rust/solution.md:106
msgid "// SAFETY: self.dir is not NULL.\n"
msgstr ""

#: src/unsafe-rust/solution.md:108
msgid "\"Could not close {:?}\""
msgstr ""

#: src/unsafe-rust/solution.md:127
msgid "\"no-such-directory\""
msgstr ""

#: src/unsafe-rust/solution.md:135 src/unsafe-rust/solution.md:150
msgid "\"Non UTF-8 character in path\""
msgstr ""

#: src/unsafe-rust/solution.md:139 src/unsafe-rust/solution.md:154
msgid "\"..\""
msgstr "\"..\""

#: src/unsafe-rust/solution.md:146 src/unsafe-rust/solution.md:154
msgid "\"foo.txt\""
msgstr "\"foo.txt\""

#: src/unsafe-rust/solution.md:146
msgid "\"The Foo Diaries\\n\""
msgstr ""

#: src/unsafe-rust/solution.md:147 src/unsafe-rust/solution.md:154
msgid "\"bar.png\""
msgstr "\"bar.png\""

#: src/unsafe-rust/solution.md:147
msgid "\"<PNG>\\n\""
msgstr "\"<PNG>\\n\""

#: src/unsafe-rust/solution.md:148 src/unsafe-rust/solution.md:154
msgid "\"crab.rs\""
msgstr "\"crab.rs\""

#: src/unsafe-rust/solution.md:148
msgid "\"//! Crab\\n\""
msgstr ""

#: src/android.md:1
msgid "Welcome to Rust in Android"
msgstr ""

#: src/android.md:3
msgid ""
"Rust is supported for system software on Android. This means that you can "
"write new services, libraries, drivers or even firmware in Rust (or improve "
"existing code as needed)."
msgstr ""

#: src/android.md:7
msgid ""
"We will attempt to call Rust from one of your own projects today. So try to "
"find a little corner of your code base where we can move some lines of code "
"to Rust. The fewer dependencies and \"exotic\" types the better. Something "
"that parses some raw bytes would be ideal."
msgstr ""

#: src/android.md:14
msgid ""
"The speaker may mention any of the following given the increased use of Rust "
"in Android:"
msgstr ""

#: src/android.md:17
msgid ""
"Service example: [DNS over HTTP](https://security.googleblog.com/2022/07/dns-"
"over-http3-in-android.html)"
msgstr ""

#: src/android.md:19
msgid ""
"Libraries: [Rutabaga Virtual Graphics Interface](https://crosvm.dev/book/"
"appendix/rutabaga_gfx.html)"
msgstr ""

#: src/android.md:21
msgid ""
"Kernel Drivers: [Binder](https://lore.kernel.org/rust-for-linux/20231101-"
"rust-binder-v1-0-08ba9197f637@google.com/)"
msgstr ""

#: src/android.md:23
msgid ""
"Firmware: [pKVM firmware](https://security.googleblog.com/2023/10/bare-metal-"
"rust-in-android.html)"
msgstr ""

#: src/android/setup.md:3
msgid ""
"We will be using a Cuttlefish Android Virtual Device to test our code. Make "
"sure you have access to one or create a new one with:"
msgstr ""

#: src/android/setup.md:12
msgid ""
"Please see the [Android Developer Codelab](https://source.android.com/docs/"
"setup/start) for details."
msgstr ""

#: src/android/setup.md:19
msgid ""
"Cuttlefish is a reference Android device designed to work on generic Linux "
"desktops.  MacOS support is also planned."
msgstr ""

#: src/android/setup.md:21
msgid ""
"The Cuttlefish system image maintains high fidelity to real devices, and is "
"the ideal emulator to run many Rust use cases."
msgstr ""

#: src/android/build-rules.md:3
msgid "The Android build system (Soong) supports Rust via a number of modules:"
msgstr ""

#: src/android/build-rules.md:5
msgid "Module Type"
msgstr ""

#: src/android/build-rules.md:5
msgid "Description"
msgstr ""

#: src/android/build-rules.md:7
msgid "`rust_binary`"
msgstr "`rust_binary`"

#: src/android/build-rules.md:7
msgid "Produces a Rust binary."
msgstr ""

#: src/android/build-rules.md:8
msgid "`rust_library`"
msgstr "`rust_library`"

#: src/android/build-rules.md:8
msgid "Produces a Rust library, and provides both `rlib` and `dylib` variants."
msgstr ""

#: src/android/build-rules.md:9
msgid "`rust_ffi`"
msgstr "`rust_ffi`"

#: src/android/build-rules.md:9
msgid ""
"Produces a Rust C library usable by `cc` modules, and provides both static "
"and shared variants."
msgstr ""

#: src/android/build-rules.md:10
msgid "`rust_proc_macro`"
msgstr "`rust_proc_macro`"

#: src/android/build-rules.md:10
msgid ""
"Produces a `proc-macro` Rust library. These are analogous to compiler "
"plugins."
msgstr ""

#: src/android/build-rules.md:11
msgid "`rust_test`"
msgstr "`rust_test`"

#: src/android/build-rules.md:11
msgid "Produces a Rust test binary that uses the standard Rust test harness."
msgstr ""

#: src/android/build-rules.md:12
msgid "`rust_fuzz`"
msgstr "`rust_fuzz`"

#: src/android/build-rules.md:12
msgid "Produces a Rust fuzz binary leveraging `libfuzzer`."
msgstr ""

#: src/android/build-rules.md:13
msgid "`rust_protobuf`"
msgstr "`rust_protobuf`"

#: src/android/build-rules.md:13
msgid ""
"Generates source and produces a Rust library that provides an interface for "
"a particular protobuf."
msgstr ""

#: src/android/build-rules.md:14
msgid "`rust_bindgen`"
msgstr "`rust_bindgen`"

#: src/android/build-rules.md:14
msgid ""
"Generates source and produces a Rust library containing Rust bindings to C "
"libraries."
msgstr ""

#: src/android/build-rules.md:16
msgid "We will look at `rust_binary` and `rust_library` next."
msgstr ""

#: src/android/build-rules.md:20
msgid "Additional items speaker may mention:"
msgstr ""

#: src/android/build-rules.md:22
msgid ""
"cargo is not optimized for multi-language repos, and also downloads packages "
"from the internet."
msgstr ""

#: src/android/build-rules.md:24
msgid ""
"For compliance and performance, Android must have crates in-tree.  It must "
"also interop with C/C++/Java code.  Soong fills that gap."
msgstr ""

#: src/android/build-rules.md:26
msgid ""
"Soong has many similarities to Bazel, which is the open-source variant of "
"Blaze (used in google3)."
msgstr ""

#: src/android/build-rules.md:28
msgid ""
"There is a plan to transition [Android](https://source.android.com/docs/"
"setup/build/bazel/introduction), [ChromeOS](https://chromium.googlesource."
"com/chromiumos/bazel/), and [Fuchsia](https://source.android.com/docs/setup/"
"build/bazel/introduction) to Bazel."
msgstr ""

#: src/android/build-rules.md:30
msgid "Learning Bazel-like build rules is useful for all Rust OS developers."
msgstr ""

#: src/android/build-rules.md:32
msgid "Fun fact: Data from Star Trek is a Soong-type Android."
msgstr ""

#: src/android/build-rules/binary.md:1
msgid "Rust Binaries"
msgstr ""

#: src/android/build-rules/binary.md:3
msgid ""
"Let us start with a simple application. At the root of an AOSP checkout, "
"create the following files:"
msgstr ""

#: src/android/build-rules/binary.md:6 src/android/build-rules/library.md:13
msgid "_hello_rust/Android.bp_:"
msgstr "_hello_rust/Android.bp_:"

#: src/android/build-rules/binary.md:10 src/android/build-rules/binary.md:11
msgid "\"hello_rust\""
msgstr "\"hello_rust\""

#: src/android/build-rules/binary.md:12 src/android/build-rules/library.md:19
#: src/android/logging.md:12
msgid "\"src/main.rs\""
msgstr "\"src/main.rs\""

#: src/android/build-rules/binary.md:16 src/android/build-rules/library.md:33
msgid "_hello_rust/src/main.rs_:"
msgstr "_hello_rust/src/main.rs_:"

#: src/android/build-rules/binary.md:19 src/android/build-rules/library.md:36
msgid "//! Rust demo.\n"
msgstr ""

#: src/android/build-rules/binary.md:20 src/android/build-rules/library.md:40
msgid "/// Prints a greeting to standard output.\n"
msgstr ""

#: src/android/build-rules/binary.md:23 src/exercises/chromium/build-rules.md:8
msgid "\"Hello from Rust!\""
msgstr ""

#: src/android/build-rules/binary.md:27
msgid "You can now build, push, and run the binary:"
msgstr ""

#: src/android/build-rules/binary.md:29
msgid ""
"```shell\n"
"m hello_rust\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust /data/local/tmp\"\n"
"adb shell /data/local/tmp/hello_rust\n"
"```"
msgstr ""
"```shell\n"
"m hello_rust\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust /data/local/tmp\"\n"
"adb shell /data/local/tmp/hello_rust\n"
"```"

#: src/android/build-rules/library.md:1
msgid "Rust Libraries"
msgstr ""

#: src/android/build-rules/library.md:3
msgid "You use `rust_library` to create a new Rust library for Android."
msgstr ""

#: src/android/build-rules/library.md:5
msgid "Here we declare a dependency on two libraries:"
msgstr ""

#: src/android/build-rules/library.md:7
msgid "`libgreeting`, which we define below,"
msgstr ""

#: src/android/build-rules/library.md:8
msgid ""
"`libtextwrap`, which is a crate already vendored in [`external/rust/crates/`]"
"(https://cs.android.com/android/platform/superproject/+/master:external/rust/"
"crates/)."
msgstr ""

#: src/android/build-rules/library.md:17 src/android/build-rules/library.md:18
msgid "\"hello_rust_with_dep\""
msgstr "\"hello_rust_with_dep\""

#: src/android/build-rules/library.md:21 src/android/build-rules/library.md:27
msgid "\"libgreetings\""
msgstr "\"libgreetings\""

#: src/android/build-rules/library.md:22
msgid "\"libtextwrap\""
msgstr "\"libtextwrap\""

#: src/android/build-rules/library.md:28
msgid "\"greetings\""
msgstr "\"greetings\""

#: src/android/build-rules/library.md:29 src/android/aidl/implementation.md:31
#: src/android/interoperability/java.md:38
msgid "\"src/lib.rs\""
msgstr "\"src/lib.rs\""

#: src/android/build-rules/library.md:47
msgid "_hello_rust/src/lib.rs_:"
msgstr "_hello_rust/src/lib.rs_:"

#: src/android/build-rules/library.md:50
msgid "//! Greeting library.\n"
msgstr ""

#: src/android/build-rules/library.md:51
msgid "/// Greet `name`.\n"
msgstr ""

#: src/android/build-rules/library.md:54
msgid "\"Hello {name}, it is very nice to meet you!\""
msgstr ""

#: src/android/build-rules/library.md:58
msgid "You build, push, and run the binary like before:"
msgstr ""

#: src/android/build-rules/library.md:60
msgid ""
"```shell\n"
"m hello_rust_with_dep\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_with_dep /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/hello_rust_with_dep\n"
"```"
msgstr ""
"```shell\n"
"m hello_rust_with_dep\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_with_dep /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/hello_rust_with_dep\n"
"```"

#: src/android/aidl.md:3
msgid ""
"The [Android Interface Definition Language (AIDL)](https://developer.android."
"com/guide/components/aidl) is supported in Rust:"
msgstr ""

#: src/android/aidl.md:6
msgid "Rust code can call existing AIDL servers,"
msgstr ""

#: src/android/aidl.md:7
msgid "You can create new AIDL servers in Rust."
msgstr ""

#: src/android/aidl/interface.md:1
msgid "AIDL Interfaces"
msgstr ""

#: src/android/aidl/interface.md:3
msgid "You declare the API of your service using an AIDL interface:"
msgstr ""

#: src/android/aidl/interface.md:5
msgid ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"
msgstr ""
"_birthday_service/aidl/com/example/birthdayservice/IBirthdayService.aidl_:"

#: src/android/aidl/interface.md:9 src/android/aidl/changing.md:8
msgid "/** Birthday service interface. */"
msgstr ""

#: src/android/aidl/interface.md:12 src/android/aidl/changing.md:11
msgid "/** Generate a Happy Birthday message. */"
msgstr ""

#: src/android/aidl/interface.md:17
msgid "_birthday_service/aidl/Android.bp_:"
msgstr "_birthday_service/aidl/Android.bp_:"

#: src/android/aidl/interface.md:21
msgid "\"com.example.birthdayservice\""
msgstr "\"com.example.birthdayservice\""

#: src/android/aidl/interface.md:22
msgid "\"com/example/birthdayservice/*.aidl\""
msgstr "\"com/example/birthdayservice/*.aidl\""

#: src/android/aidl/interface.md:25
msgid "// Rust is not enabled by default\n"
msgstr ""

#: src/android/aidl/interface.md:32
msgid ""
"Add `vendor_available: true` if your AIDL file is used by a binary in the "
"vendor partition."
msgstr ""

#: src/android/aidl/implementation.md:1
msgid "Service Implementation"
msgstr ""

#: src/android/aidl/implementation.md:3
msgid "We can now implement the AIDL service:"
msgstr ""

#: src/android/aidl/implementation.md:5
msgid "_birthday_service/src/lib.rs_:"
msgstr "_birthday_service/src/lib.rs_:"

#: src/android/aidl/implementation.md:8
msgid "//! Implementation of the `IBirthdayService` AIDL interface.\n"
msgstr ""

#: src/android/aidl/implementation.md:11
msgid "/// The `IBirthdayService` implementation.\n"
msgstr ""

#: src/android/aidl/implementation.md:20
msgid "\"Happy Birthday {name}, congratulations with the {years} years!\""
msgstr ""

#: src/android/aidl/implementation.md:26 src/android/aidl/server.md:28
#: src/android/aidl/client.md:37
msgid "_birthday_service/Android.bp_:"
msgstr "_birthday_service/Android.bp_:"

#: src/android/aidl/implementation.md:30 src/android/aidl/server.md:38
msgid "\"libbirthdayservice\""
msgstr "\"libbirthdayservice\""

#: src/android/aidl/implementation.md:32 src/android/aidl/server.md:13
#: src/android/aidl/client.md:12
msgid "\"birthdayservice\""
msgstr "\"birthdayservice\""

#: src/android/aidl/implementation.md:34 src/android/aidl/server.md:36
#: src/android/aidl/client.md:45
msgid "\"com.example.birthdayservice-rust\""
msgstr "\"com.example.birthdayservice-rust\""

#: src/android/aidl/implementation.md:35 src/android/aidl/server.md:37
#: src/android/aidl/client.md:46
msgid "\"libbinder_rs\""
msgstr "\"libbinder_rs\""

#: src/android/aidl/server.md:1
msgid "AIDL Server"
msgstr ""

#: src/android/aidl/server.md:3
msgid "Finally, we can create a server which exposes the service:"
msgstr ""

#: src/android/aidl/server.md:5
msgid "_birthday_service/src/server.rs_:"
msgstr "_birthday_service/src/server.rs_:"

#: src/android/aidl/server.md:8 src/android/aidl/client.md:8
msgid "//! Birthday service.\n"
msgstr ""

#: src/android/aidl/server.md:14
msgid "/// Entry point for birthday service.\n"
msgstr ""

#: src/android/aidl/server.md:23
msgid "\"Failed to register service\""
msgstr ""

#: src/android/aidl/server.md:32 src/android/aidl/server.md:33
msgid "\"birthday_server\""
msgstr "\"birthday_server\""

#: src/android/aidl/server.md:34
msgid "\"src/server.rs\""
msgstr "\"src/server.rs\""

#: src/android/aidl/deploy.md:3
msgid "We can now build, push, and start the service:"
msgstr ""

#: src/android/aidl/deploy.md:5
msgid ""
"```shell\n"
"m birthday_server\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_server /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/birthday_server\n"
"```"
msgstr ""
"```shell\n"
"m birthday_server\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_server /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/birthday_server\n"
"```"

#: src/android/aidl/deploy.md:11
msgid "In another terminal, check that the service runs:"
msgstr ""

#: src/android/aidl/deploy.md:21
msgid "You can also call the service with `service call`:"
msgstr ""

#: src/android/aidl/client.md:1
msgid "AIDL Client"
msgstr ""

#: src/android/aidl/client.md:3
msgid "Finally, we can create a Rust client for our new service."
msgstr ""

#: src/android/aidl/client.md:5
msgid "_birthday_service/src/client.rs_:"
msgstr "_birthday_service/src/client.rs_:"

#: src/android/aidl/client.md:13
msgid "/// Connect to the BirthdayService.\n"
msgstr ""

#: src/android/aidl/client.md:18
msgid "/// Call the birthday service.\n"
msgstr ""

#: src/android/aidl/client.md:30
msgid "\"Failed to connect to BirthdayService\""
msgstr ""

#: src/android/aidl/client.md:32
msgid "\"{msg}\""
msgstr "\"{msg}\""

#: src/android/aidl/client.md:41 src/android/aidl/client.md:42
msgid "\"birthday_client\""
msgstr "\"birthday_client\""

#: src/android/aidl/client.md:43
msgid "\"src/client.rs\""
msgstr "\"src/client.rs\""

#: src/android/aidl/client.md:51
msgid "Notice that the client does not depend on `libbirthdayservice`."
msgstr ""

#: src/android/aidl/client.md:53
msgid "Build, push, and run the client on your device:"
msgstr ""

#: src/android/aidl/client.md:55
msgid ""
"```shell\n"
"m birthday_client\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_client /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/birthday_client Charlie 60\n"
"```"
msgstr ""
"```shell\n"
"m birthday_client\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/birthday_client /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/birthday_client Charlie 60\n"
"```"

#: src/android/aidl/changing.md:3
msgid ""
"Let us extend the API with more functionality: we want to let clients "
"specify a list of lines for the birthday card:"
msgstr ""

#: src/android/logging.md:3
msgid ""
"You should use the `log` crate to automatically log to `logcat` (on-device) "
"or `stdout` (on-host):"
msgstr ""

#: src/android/logging.md:6
msgid "_hello_rust_logs/Android.bp_:"
msgstr "_hello_rust_logs/Android.bp_:"

#: src/android/logging.md:10 src/android/logging.md:11
msgid "\"hello_rust_logs\""
msgstr "\"hello_rust_logs\""

#: src/android/logging.md:14
msgid "\"liblog_rust\""
msgstr "\"liblog_rust\""

#: src/android/logging.md:15
msgid "\"liblogger\""
msgstr "\"liblogger\""

#: src/android/logging.md:21
msgid "_hello_rust_logs/src/main.rs_:"
msgstr "_hello_rust_logs/src/main.rs_:"

#: src/android/logging.md:24
msgid "//! Rust logging demo.\n"
msgstr ""

#: src/android/logging.md:27
msgid "/// Logs a greeting.\n"
msgstr ""

#: src/android/logging.md:32
msgid "\"rust\""
msgstr "\"rust\""

#: src/android/logging.md:35
msgid "\"Starting program.\""
msgstr ""

#: src/android/logging.md:36
msgid "\"Things are going fine.\""
msgstr ""

#: src/android/logging.md:37
msgid "\"Something went wrong!\""
msgstr ""

#: src/android/logging.md:41 src/android/interoperability/with-c/bindgen.md:98
#: src/android/interoperability/with-c/rust.md:73
msgid "Build, push, and run the binary on your device:"
msgstr ""

#: src/android/logging.md:43
msgid ""
"```shell\n"
"m hello_rust_logs\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_logs /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/hello_rust_logs\n"
"```"
msgstr ""
"```shell\n"
"m hello_rust_logs\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/hello_rust_logs /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/hello_rust_logs\n"
"```"

#: src/android/logging.md:49
msgid "The logs show up in `adb logcat`:"
msgstr ""

#: src/android/interoperability.md:3
msgid ""
"Rust has excellent support for interoperability with other languages. This "
"means that you can:"
msgstr ""

#: src/android/interoperability.md:6
msgid "Call Rust functions from other languages."
msgstr ""

#: src/android/interoperability.md:7
msgid "Call functions written in other languages from Rust."
msgstr ""

#: src/android/interoperability.md:9
msgid ""
"When you call functions in a foreign language we say that you're using a "
"_foreign function interface_, also known as FFI."
msgstr ""

#: src/android/interoperability/with-c.md:1
msgid "Interoperability with C"
msgstr ""

#: src/android/interoperability/with-c.md:3
msgid ""
"Rust has full support for linking object files with a C calling convention. "
"Similarly, you can export Rust functions and call them from C."
msgstr ""

#: src/android/interoperability/with-c.md:6
msgid "You can do it by hand if you want:"
msgstr ""

#: src/android/interoperability/with-c.md:16
msgid "\"{x}, {abs_x}\""
msgstr "\"{x}, {abs_x}\""

#: src/android/interoperability/with-c.md:20
msgid ""
"We already saw this in the [Safe FFI Wrapper exercise](../../exercises/day-3/"
"safe-ffi-wrapper.md)."
msgstr ""

#: src/android/interoperability/with-c.md:23
msgid ""
"This assumes full knowledge of the target platform. Not recommended for "
"production."
msgstr ""

#: src/android/interoperability/with-c.md:26
msgid "We will look at better options next."
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:1
msgid "Using Bindgen"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:3
msgid ""
"The [bindgen](https://rust-lang.github.io/rust-bindgen/introduction.html) "
"tool can auto-generate bindings from a C header file."
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:6
msgid "First create a small C library:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:8
msgid "_interoperability/bindgen/libbirthday.h_:"
msgstr "_interoperability/bindgen/libbirthday.h_:"

#: src/android/interoperability/with-c/bindgen.md:19
msgid "_interoperability/bindgen/libbirthday.c_:"
msgstr "_interoperability/bindgen/libbirthday.c_:"

#: src/android/interoperability/with-c/bindgen.md:22
msgid "<stdio.h>"
msgstr "<stdio.h>"

#: src/android/interoperability/with-c/bindgen.md:23
#: src/android/interoperability/with-c/bindgen.md:50
msgid "\"libbirthday.h\""
msgstr "\"libbirthday.h\""

#: src/android/interoperability/with-c/bindgen.md:26
#: src/android/interoperability/with-c/bindgen.md:29
msgid "\"+--------------\\n\""
msgstr "\"+--------------\\n\""

#: src/android/interoperability/with-c/bindgen.md:27
msgid "\"| Happy Birthday %s!\\n\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:28
msgid "\"| Congratulations with the %i years!\\n\""
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:33
msgid "Add this to your `Android.bp` file:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:35
#: src/android/interoperability/with-c/bindgen.md:55
#: src/android/interoperability/with-c/bindgen.md:69
#: src/android/interoperability/with-c/bindgen.md:108
msgid "_interoperability/bindgen/Android.bp_:"
msgstr "_interoperability/bindgen/Android.bp_:"

#: src/android/interoperability/with-c/bindgen.md:39
#: src/android/interoperability/with-c/bindgen.md:63
msgid "\"libbirthday\""
msgstr "\"libbirthday\""

#: src/android/interoperability/with-c/bindgen.md:40
msgid "\"libbirthday.c\""
msgstr "\"libbirthday.c\""

#: src/android/interoperability/with-c/bindgen.md:44
msgid ""
"Create a wrapper header file for the library (not strictly needed in this "
"example):"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:47
msgid "_interoperability/bindgen/libbirthday_wrapper.h_:"
msgstr "_interoperability/bindgen/libbirthday_wrapper.h_:"

#: src/android/interoperability/with-c/bindgen.md:53
msgid "You can now auto-generate the bindings:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:59
#: src/android/interoperability/with-c/bindgen.md:75
msgid "\"libbirthday_bindgen\""
msgstr "\"libbirthday_bindgen\""

#: src/android/interoperability/with-c/bindgen.md:60
msgid "\"birthday_bindgen\""
msgstr "\"birthday_bindgen\""

#: src/android/interoperability/with-c/bindgen.md:61
msgid "\"libbirthday_wrapper.h\""
msgstr "\"libbirthday_wrapper.h\""

#: src/android/interoperability/with-c/bindgen.md:62
msgid "\"bindings\""
msgstr "\"bindings\""

#: src/android/interoperability/with-c/bindgen.md:67
msgid "Finally, we can use the bindings in our Rust program:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:73
msgid "\"print_birthday_card\""
msgstr "\"print_birthday_card\""

#: src/android/interoperability/with-c/bindgen.md:74
msgid "\"main.rs\""
msgstr "\"main.rs\""

#: src/android/interoperability/with-c/bindgen.md:79
msgid "_interoperability/bindgen/main.rs_:"
msgstr "_interoperability/bindgen/main.rs_:"

#: src/android/interoperability/with-c/bindgen.md:82
msgid "//! Bindgen demo.\n"
msgstr "//! Bindgen-demo.\n"

#: src/android/interoperability/with-c/bindgen.md:100
msgid ""
"```shell\n"
"m print_birthday_card\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/print_birthday_card /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/print_birthday_card\n"
"```"
msgstr ""
"```shell\n"
"m print_birthday_card\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/print_birthday_card /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/print_birthday_card\n"
"```"

#: src/android/interoperability/with-c/bindgen.md:106
msgid "Finally, we can run auto-generated tests to ensure the bindings work:"
msgstr ""

#: src/android/interoperability/with-c/bindgen.md:112
#: src/android/interoperability/with-c/bindgen.md:114
msgid "\"libbirthday_bindgen_test\""
msgstr "\"libbirthday_bindgen_test\""

#: src/android/interoperability/with-c/bindgen.md:113
msgid "\":libbirthday_bindgen\""
msgstr "\":libbirthday_bindgen\""

#: src/android/interoperability/with-c/bindgen.md:115
msgid "\"general-tests\""
msgstr "\"general-tests\""

#: src/android/interoperability/with-c/bindgen.md:117
#: src/android/interoperability/with-c/bindgen.md:118
msgid "\"none\""
msgstr "\"none\""

#: src/android/interoperability/with-c/bindgen.md:117
msgid "// Generated file, skip linting\n"
msgstr ""

#: src/android/interoperability/with-c/rust.md:1
msgid "Calling Rust"
msgstr ""

#: src/android/interoperability/with-c/rust.md:3
msgid "Exporting Rust functions and types to C is easy:"
msgstr ""

#: src/android/interoperability/with-c/rust.md:5
msgid "_interoperability/rust/libanalyze/analyze.rs_"
msgstr "_interoperability/rust/libanalyze/analyze.rs_"

#: src/android/interoperability/with-c/rust.md:8
msgid "//! Rust FFI demo.\n"
msgstr "//! Rust FFI-demo.\n"

#: src/android/interoperability/with-c/rust.md:12
msgid "/// Analyze the numbers.\n"
msgstr "/// Analyze the numbers.\n"

#: src/android/interoperability/with-c/rust.md:17
msgid "\"x ({x}) is smallest!\""
msgstr "\"x ({x}) er mindst!\""

#: src/android/interoperability/with-c/rust.md:19
msgid "\"y ({y}) is probably larger than x ({x})\""
msgstr "\"y ({y}) er muligvis st√∏rre end x ({x})\""

#: src/android/interoperability/with-c/rust.md:24
msgid "_interoperability/rust/libanalyze/analyze.h_"
msgstr "_interoperability/rust/libanalyze/analyze.h_"

#: src/android/interoperability/with-c/rust.md:37
msgid "_interoperability/rust/libanalyze/Android.bp_"
msgstr "_interoperability/rust/libanalyze/Android.bp_"

#: src/android/interoperability/with-c/rust.md:41
#: src/android/interoperability/with-c/rust.md:68
msgid "\"libanalyze_ffi\""
msgstr "\"libanalyze_ffi\""

#: src/android/interoperability/with-c/rust.md:42
msgid "\"analyze_ffi\""
msgstr "\"analyze_ffi\""

#: src/android/interoperability/with-c/rust.md:43
msgid "\"analyze.rs\""
msgstr "\"analyze.rs\""

#: src/android/interoperability/with-c/rust.md:48
msgid "We can now call this from a C binary:"
msgstr ""

#: src/android/interoperability/with-c/rust.md:50
msgid "_interoperability/rust/analyze/main.c_"
msgstr "_interoperability/rust/analyze/main.c_"

#: src/android/interoperability/with-c/rust.md:53
msgid "\"analyze.h\""
msgstr "\"analyze.h\""

#: src/android/interoperability/with-c/rust.md:62
msgid "_interoperability/rust/analyze/Android.bp_"
msgstr "_interoperability/rust/analyze/Android.bp_"

#: src/android/interoperability/with-c/rust.md:66
msgid "\"analyze_numbers\""
msgstr "\"analyze_numbers\""

#: src/android/interoperability/with-c/rust.md:67
msgid "\"main.c\""
msgstr "\"main.c\""

#: src/android/interoperability/with-c/rust.md:75
msgid ""
"```shell\n"
"m analyze_numbers\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/analyze_numbers /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/analyze_numbers\n"
"```"
msgstr ""
"```shell\n"
"m analyze_numbers\n"
"adb push \"$ANDROID_PRODUCT_OUT/system/bin/analyze_numbers /data/local/"
"tmp\"\n"
"adb shell /data/local/tmp/analyze_numbers\n"
"```"

#: src/android/interoperability/with-c/rust.md:83
msgid ""
"`#[no_mangle]` disables Rust's usual name mangling, so the exported symbol "
"will just be the name of the function. You can also use `#[export_name = "
"\"some_name\"]` to specify whatever name you want."
msgstr ""

#: src/android/interoperability/cpp.md:1
msgid "With C++"
msgstr ""

#: src/android/interoperability/cpp.md:3
msgid ""
"The [CXX crate](https://cxx.rs/) makes it possible to do safe "
"interoperability between Rust and C++."
msgstr ""

#: src/android/interoperability/cpp.md:6
msgid "The overall approach looks like this:"
msgstr ""

#: src/android/interoperability/cpp/bridge.md:3
msgid ""
"CXX relies on a description of the function signatures that will be exposed "
"from each language to the other. You provide this description using extern "
"blocks in a Rust module annotated with the `#[cxx::bridge]` attribute macro."
msgstr ""

#: src/android/interoperability/cpp/bridge.md:9
msgid "\"org::blobstore\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md:11
msgid "// Shared structs with fields visible to both languages.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md:17
#: src/android/interoperability/cpp/generated-cpp.md:6
msgid "// Rust types and signatures exposed to C++.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md:18
#: src/android/interoperability/cpp/rust-bridge.md:6
#: src/android/interoperability/cpp/generated-cpp.md:7
#: src/android/interoperability/cpp/rust-result.md:6
#: src/chromium/interoperability-with-cpp/example-bindings.md:9
#: src/chromium/interoperability-with-cpp/error-handling.md:11
#: src/chromium/interoperability-with-cpp/error-handling.md:26
#, fuzzy
msgid "\"Rust\""
msgstr "\"rust\""

#: src/android/interoperability/cpp/bridge.md:24
#: src/android/interoperability/cpp/cpp-bridge.md:6
msgid "// C++ types and signatures exposed to Rust.\n"
msgstr ""

#: src/android/interoperability/cpp/bridge.md:25
#: src/android/interoperability/cpp/cpp-bridge.md:7
#: src/android/interoperability/cpp/cpp-exception.md:6
#: src/chromium/interoperability-with-cpp/example-bindings.md:15
msgid "\"C++\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md:26
#: src/android/interoperability/cpp/cpp-bridge.md:8
msgid "\"include/blobstore.h\""
msgstr ""

#: src/android/interoperability/cpp/bridge.md:40
msgid "The bridge is generally declared in an `ffi` module within your crate."
msgstr ""

#: src/android/interoperability/cpp/bridge.md:41
msgid ""
"From the declarations made in the bridge module, CXX will generate matching "
"Rust and C++ type/function definitions in order to expose those items to "
"both languages."
msgstr ""

#: src/android/interoperability/cpp/bridge.md:44
msgid ""
"To view the generated Rust code, use [cargo-expand](https://github.com/"
"dtolnay/cargo-expand) to view the expanded proc macro. For most of the "
"examples you would use `cargo expand ::ffi` to expand just the `ffi` module "
"(though this doesn't apply for Android projects)."
msgstr ""

#: src/android/interoperability/cpp/bridge.md:47
msgid "To view the generated C++ code, look in `target/cxxbridge`."
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md:1
msgid "Rust Bridge Declarations"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md:7
msgid "// Opaque type\n"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md:8
msgid "// Method on `MyType`\n"
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md:9
#, fuzzy
msgid "// Free function\n"
msgstr "Funktioner"

#: src/android/interoperability/cpp/rust-bridge.md:28
msgid ""
"Items declared in the `extern \"Rust\"` reference items that are in scope in "
"the parent module."
msgstr ""

#: src/android/interoperability/cpp/rust-bridge.md:30
msgid ""
"The CXX code generator uses your `extern \"Rust\"` section(s) to produce a C+"
"+ header file containing the corresponding C++ declarations. The generated "
"header has the same path as the Rust source file containing the bridge, "
"except with a .rs.h file extension."
msgstr ""

#: src/android/interoperability/cpp/generated-cpp.md:15
msgid "Results in (roughly) the following C++:"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:1
msgid "C++ Bridge Declarations"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:20
msgid "Results in (roughly) the following Rust:"
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:30
msgid "\"org$blobstore$cxxbridge1$new_blobstore_client\""
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:39
msgid "\"org$blobstore$cxxbridge1$BlobstoreClient$put\""
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:56
msgid ""
"The programmer does not need to promise that the signatures they have typed "
"in are accurate. CXX performs static assertions that the signatures exactly "
"correspond with what is declared in C++."
msgstr ""

#: src/android/interoperability/cpp/cpp-bridge.md:59
msgid ""
"`unsafe extern` blocks allow you to declare C++ functions that are safe to "
"call from Rust."
msgstr ""

#: src/android/interoperability/cpp/shared-types.md:9
msgid "// A=1, J=11, Q=12, K=13\n"
msgstr ""

#: src/android/interoperability/cpp/shared-types.md:23
msgid "Only C-like (unit) enums are supported."
msgstr ""

#: src/android/interoperability/cpp/shared-types.md:24
msgid ""
"A limited number of traits are supported for `#[derive()]` on shared types. "
"Corresponding functionality is also generated for the C++ code, e.g. if you "
"derive `Hash` also generates an implementation of `std::hash` for the "
"corresponding C++ type."
msgstr ""

#: src/android/interoperability/cpp/shared-enums.md:15
#, fuzzy
msgid "Generated Rust:"
msgstr "\"general-tests\""

#: src/android/interoperability/cpp/shared-enums.md:33
msgid "Generated C++:"
msgstr ""

#: src/android/interoperability/cpp/shared-enums.md:46
msgid ""
"On the Rust side, the code generated for shared enums is actually a struct "
"wrapping a numeric value. This is because it is not UB in C++ for an enum "
"class to hold a value different from all of the listed variants, and our "
"Rust representation needs to have the same behavior."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:13
msgid "\"fallible1 requires depth > 0\""
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:16
msgid "\"Success!\""
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:22
msgid ""
"Rust functions that return `Result` are translated to exceptions on the C++ "
"side."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:24
msgid ""
"The exception thrown will always be of type `rust::Error`, which primarily "
"exposes a way to get the error message string. The error message will come "
"from the error type's `Display` impl."
msgstr ""

#: src/android/interoperability/cpp/rust-result.md:27
msgid ""
"A panic unwinding from Rust to C++ will always cause the process to "
"immediately terminate."
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md:7
msgid "\"example/include/example.h\""
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md:14
#, fuzzy
msgid "\"Error: {}\""
msgstr "\"Fejl: {err}\""

#: src/android/interoperability/cpp/cpp-exception.md:22
msgid ""
"C++ functions declared to return a `Result` will catch any thrown exception "
"on the C++ side and return it as an `Err` value to the calling Rust function."
msgstr ""

#: src/android/interoperability/cpp/cpp-exception.md:24
msgid ""
"If an exception is thrown from an extern \"C++\" function that is not "
"declared by the CXX bridge to return `Result`, the program calls C++'s `std::"
"terminate`. The behavior is equivalent to the same exception being thrown "
"through a `noexcept` C++ function."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:3
#, fuzzy
msgid "Rust Type"
msgstr "Rust by Example"

#: src/android/interoperability/cpp/type-mapping.md:3
msgid "C++ Type"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:5
#, fuzzy
msgid "`String`"
msgstr "`Path`, `OsString`"

#: src/android/interoperability/cpp/type-mapping.md:5
#, fuzzy
msgid "`rust::String`"
msgstr "`rust_bindgen`"

#: src/android/interoperability/cpp/type-mapping.md:6
msgid "`&str`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:6
#, fuzzy
msgid "`rust::Str`"
msgstr "`rust_test`"

#: src/android/interoperability/cpp/type-mapping.md:7
msgid "`CxxString`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:7
msgid "`std::string`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:8
msgid "`&[T]`/`&mut [T]`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:8
#, fuzzy
msgid "`rust::Slice`"
msgstr "`rust_ffi`"

#: src/android/interoperability/cpp/type-mapping.md:9
msgid "`rust::Box<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:10
msgid "`UniquePtr<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:10
msgid "`std::unique_ptr<T>`"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:11
#, fuzzy
msgid "`Vec<T>`"
msgstr "`Vec`"

#: src/android/interoperability/cpp/type-mapping.md:11
#, fuzzy
msgid "`rust::Vec<T>`"
msgstr "`mpsc::Receiver<T>`"

#: src/android/interoperability/cpp/type-mapping.md:12
#, fuzzy
msgid "`CxxVector<T>`"
msgstr "`Cell<T>`"

#: src/android/interoperability/cpp/type-mapping.md:12
#, fuzzy
msgid "`std::vector<T>`"
msgstr "`mpsc::Receiver<T>`"

#: src/android/interoperability/cpp/type-mapping.md:16
msgid ""
"These types can be used in the fields of shared structs and the arguments "
"and returns of extern functions."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:18
msgid ""
"Note that Rust's `String` does not map directly to `std::string`. There are "
"a few reasons for this:"
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:20
msgid ""
"`std::string` does not uphold the UTF-8 invariant that `String` requires."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:21
msgid ""
"The two types have different layouts in memory and so can't be passed "
"directly between languages."
msgstr ""

#: src/android/interoperability/cpp/type-mapping.md:23
msgid ""
"`std::string` requires move constructors that don't match Rust's move "
"semantics, so a `std::string` can't be passed by value to Rust."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:1
#: src/android/interoperability/cpp/android-cpp-genrules.md:1
#: src/android/interoperability/cpp/android-build-rust.md:1
#, fuzzy
msgid "Building in Android"
msgstr "Rust i Android"

#: src/android/interoperability/cpp/android-build-cpp.md:3
msgid ""
"Create a `cc_library_static` to build the C++ library, including the CXX "
"generated header and source file."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:8
#: src/android/interoperability/cpp/android-build-rust.md:10
#, fuzzy
msgid "\"libcxx_test_cpp\""
msgstr "\"libtextwrap\""

#: src/android/interoperability/cpp/android-build-cpp.md:9
msgid "\"cxx_test.cpp\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:11
msgid "\"cxx-bridge-header\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:12
#: src/android/interoperability/cpp/android-cpp-genrules.md:10
msgid "\"libcxx_test_bridge_header\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:14
#: src/android/interoperability/cpp/android-cpp-genrules.md:19
msgid "\"libcxx_test_bridge_code\""
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:20
msgid ""
"Point out that `libcxx_test_bridge_header` and `libcxx_test_bridge_code` are "
"the dependencies for the CXX-generated C++ bindings. We'll show how these "
"are setup on the next slide."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:23
msgid ""
"Note that you also need to depend on the `cxx-bridge-header` library in "
"order to pull in common CXX definitions."
msgstr ""

#: src/android/interoperability/cpp/android-build-cpp.md:25
msgid ""
"Full docs for using CXX in Android can be found in [the Android docs]"
"(https://source.android.com/docs/setup/build/rust/building-rust-modules/"
"android-rust-patterns#rust-cpp-interop-using-cxx). You may want to share "
"that link with the class so that students know where they can find these "
"instructions again in the future."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:3
msgid ""
"Create two genrules: One to generate the CXX header, and one to generate the "
"CXX source file. These are then used as inputs to the `cc_library_static`."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:7
msgid ""
"// Generate a C++ header containing the C++ bindings\n"
"// to the Rust exported functions in lib.rs.\n"
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:11
#: src/android/interoperability/cpp/android-cpp-genrules.md:20
msgid "\"cxxbridge\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:12
msgid "\"$(location cxxbridge) $(in) --header > $(out)\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:13
#: src/android/interoperability/cpp/android-cpp-genrules.md:22
#: src/android/interoperability/cpp/android-build-rust.md:8
#, fuzzy
msgid "\"lib.rs\""
msgstr "\"src/lib.rs\""

#: src/android/interoperability/cpp/android-cpp-genrules.md:14
#, fuzzy
msgid "\"lib.rs.h\""
msgstr "\"src/lib.rs\""

#: src/android/interoperability/cpp/android-cpp-genrules.md:16
msgid "// Generate the C++ code that Rust calls into.\n"
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:21
msgid "\"$(location cxxbridge) $(in) > $(out)\""
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:23
#, fuzzy
msgid "\"lib.rs.cc\""
msgstr "\"src/lib.rs\""

#: src/android/interoperability/cpp/android-cpp-genrules.md:29
msgid ""
"The `cxxbridge` tool is a standalone tool that generates the C++ side of the "
"bridge module. It is included in Android and available as a Soong tool."
msgstr ""

#: src/android/interoperability/cpp/android-cpp-genrules.md:31
msgid ""
"By convention, if your Rust source file is `lib.rs` your header file will be "
"named `lib.rs.h` and your source file will be named `lib.rs.cc`. This naming "
"convention isn't enforced, though."
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md:3
msgid ""
"Create a `rust_binary` that depends on `libcxx` and your `cc_library_static`."
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md:7
msgid "\"cxx_test\""
msgstr ""

#: src/android/interoperability/cpp/android-build-rust.md:9
#, fuzzy
msgid "\"libcxx\""
msgstr "\"libjni\""

#: src/android/interoperability/java.md:1
msgid "Interoperability with Java"
msgstr ""

#: src/android/interoperability/java.md:3
msgid ""
"Java can load shared objects via [Java Native Interface (JNI)](https://en."
"wikipedia.org/wiki/Java_Native_Interface). The [`jni` crate](https://docs.rs/"
"jni/) allows you to create a compatible library."
msgstr ""

#: src/android/interoperability/java.md:7
msgid "First, we create a Rust function to export to Java:"
msgstr ""

#: src/android/interoperability/java.md:9
msgid "_interoperability/java/src/lib.rs_:"
msgstr ""

#: src/android/interoperability/java.md:12
msgid "//! Rust <-> Java FFI demo.\n"
msgstr ""

#: src/android/interoperability/java.md:17
msgid "/// HelloWorld::hello method implementation.\n"
msgstr ""

#: src/android/interoperability/java.md:20
msgid "\"system\""
msgstr "\"system\""

#: src/android/interoperability/java.md:26
msgid "\"Hello, {input}!\""
msgstr ""

#: src/android/interoperability/java.md:32
#: src/android/interoperability/java.md:62
msgid "_interoperability/java/Android.bp_:"
msgstr "_interoperability/java/Android.bp_:"

#: src/android/interoperability/java.md:36
#: src/android/interoperability/java.md:69
msgid "\"libhello_jni\""
msgstr "\"libhello_jni\""

#: src/android/interoperability/java.md:37
#: src/android/interoperability/java.md:52
msgid "\"hello_jni\""
msgstr "\"hello_jni\""

#: src/android/interoperability/java.md:39
msgid "\"libjni\""
msgstr "\"libjni\""

#: src/android/interoperability/java.md:43
msgid "Finally, we can call this function from Java:"
msgstr ""

#: src/android/interoperability/java.md:45
msgid "_interoperability/java/HelloWorld.java_:"
msgstr ""

#: src/android/interoperability/java.md:66
msgid "\"helloworld_jni\""
msgstr "\"helloworld_jni\""

#: src/android/interoperability/java.md:67
msgid "\"HelloWorld.java\""
msgstr "\"HelloWorld.java\""

#: src/android/interoperability/java.md:68
msgid "\"HelloWorld\""
msgstr "\"HelloWorld\""

#: src/android/interoperability/java.md:73
msgid "Finally, you can build, sync, and run the binary:"
msgstr ""

#: src/exercises/android/morning.md:3
msgid ""
"This is a group exercise: We will look at one of the projects you work with "
"and try to integrate some Rust into it. Some suggestions:"
msgstr ""

#: src/exercises/android/morning.md:6
msgid "Call your AIDL service with a client written in Rust."
msgstr ""

#: src/exercises/android/morning.md:8
msgid "Move a function from your project to Rust and call it."
msgstr ""

#: src/exercises/android/morning.md:12
msgid ""
"No solution is provided here since this is open-ended: it relies on someone "
"in the class having a piece of code which you can turn in to Rust on the fly."
msgstr ""

#: src/chromium.md:1
#, fuzzy
msgid "Welcome to Rust in Chromium"
msgstr "\"Velkommen til RustOS 3.14\""

#: src/chromium.md:3
msgid ""
"Rust is supported for third-party libraries in Chromium, with first-party "
"glue code to connect between Rust and existing Chromium C++ code."
msgstr ""

#: src/chromium.md:6
msgid ""
"Today, we'll call into Rust to do something silly with strings. If you've "
"got a corner of the code where you're displaying a UTF8 string to the user, "
"feel free to follow this recipe in your part of the codebase instead of the "
"exact part we talk about."
msgstr ""

#: src/chromium/setup.md:3
msgid ""
"Make sure you can build and run Chromium. Any platform and set of build "
"flags is OK, so long as your code is relatively recent (commit position "
"1223636 onwards, corresponding to November 2023):"
msgstr ""

#: src/chromium/setup.md:13
msgid ""
"(A component, debug build is recommended for quickest iteration time. This "
"is the default!)"
msgstr ""

#: src/chromium/setup.md:16
msgid ""
"See [How to build Chromium](https://www.chromium.org/developers/how-tos/get-"
"the-code/) if you aren't already at that point. Be warned: setting up to "
"build Chromium takes time."
msgstr ""

#: src/chromium/setup.md:20
msgid "It's also recommended that you have Visual Studio code installed."
msgstr ""

#: src/chromium/setup.md:22
msgid "About the exercises"
msgstr ""

#: src/chromium/setup.md:24
msgid ""
"This part of the course has a series of exercises which build on each other. "
"We'll be doing them spread throughout the course instead of just at the end. "
"If you don't have time to complete a certain part, don't worry: you can "
"catch up in the next slot."
msgstr ""

#: src/chromium/cargo.md:3
msgid "Subjectively,"
msgstr ""

#: src/chromium/cargo.md:5
msgid ""
"```bob\n"
"High        ^\n"
"            |      x cargo\n"
"            |\n"
"Development |                     x \"cargo --offline\"\n"
"speed       |\n"
"            |                                  x  \"gn/ninja\"\n"
"            |                                     \"rust_executable(...)\" \n"
"Low         +---------------------------------------------------->\n"
"             Low               Determinism                 High\n"
"```"
msgstr ""

#: src/chromium/cargo.md:17
msgid ""
"`cargo` works great for pure-Rust tools, but isn't optimized for large "
"multi- language projects like Chromium. Chromium uses `gn` and `ninja`."
msgstr ""

#: src/chromium/cargo.md:20
msgid "When writing a tool in Rust, your choices are:"
msgstr ""

#: src/chromium/cargo.md:22
msgid ""
"Use `gn` and `ninja` (using the `rust_executable` template we'll meet later)"
msgstr ""

#: src/chromium/cargo.md:24
msgid ""
"Use `cargo`, but [restrict yourself to Chromium's audited toolchain and "
"crates](https://chromium.googlesource.com/chromium/src/+/refs/heads/main/"
"docs/rust.md#Using-cargo)"
msgstr ""

#: src/chromium/cargo.md:25
msgid ""
"Use `cargo`, trusting a [toolchain](https://rustup.rs/) and [crates "
"downloaded from the internet](https://crates.io/)"
msgstr ""

#: src/chromium/cargo.md:27
msgid ""
"Your organization's policy, and/or common sense, may prohibit you from doing "
"these things."
msgstr ""

#: src/chromium/cargo.md:30
msgid "From here on we'll be focusing on `gn` and `ninja`."
msgstr ""

#: src/chromium/cargo.md:32
#, fuzzy
msgid "Mini exercise"
msgstr "√òvelser"

#: src/chromium/cargo.md:34
msgid ""
"Discuss in small groups the policies within your own team and organization, "
"and come to a group agreement about what's an acceptable level of risk."
msgstr ""

#: src/chromium/cargo.md:39
msgid ""
"Talk about the cultural differences between the `cargo` world and the "
"Chromium world: for instance, that code reuse is cheap in `cargo` and that "
"it's encouraged to use (and create) lots of small single-purpose crates, "
"which is difficult in Chromium (for good reasons). The net effect is that "
"`cargo` ecosystem development feels more agile."
msgstr ""

#: src/chromium/cargo.md:45
msgid ""
"Explain that it might seem strange to write tools in Rust, but this is "
"increasingly popular across the industry --- Rust tools are quicker and work "
"more reliably."
msgstr ""

#: src/chromium/cargo.md:49
msgid ""
"Assuming folks taking the course are physically together, ask them to "
"discuss in small groups of 3-4 people. Then, ask each table whether they've "
"come to a consensus on the level of risk."
msgstr ""

#: src/chromium/cargo.md:53
msgid ""
"Later in the course, we'll be running an actual `cargo`\\-based tool, `gnrt`."
msgstr ""

#: src/chromium/policy.md:1
msgid "Chromium Rust policy"
msgstr ""

#: src/chromium/policy.md:3
msgid ""
"Chromium does not yet allow first-party Rust except in rare cases as "
"approved by Chromium's [Area Tech Leads](https://source.chromium.org/"
"chromium/chromium/src/+/main:ATL_OWNERS)."
msgstr ""

#: src/chromium/policy.md:6
msgid ""
"Chromium's policy on third party libraries is outlined [here](https://"
"chromium.googlesource.com/chromium/src/+/main/docs/adding_to_third_party."
"md#rust) - Rust is allowed for third party libraries under various "
"circumstances, including if they're the best option for performance or for "
"security."
msgstr ""

#: src/chromium/policy.md:10
msgid ""
"Very few Rust libraries directly expose a C/C++ API, so that means that "
"nearly all such libraries will require a small amount of first-party glue "
"code."
msgstr ""

#: src/chromium/policy.md:13
#, fuzzy
msgid ""
"```bob\n"
"C++                             Rust\n"
".- - - - - - - - - -.           .- - - - - - - - - - - - - - - - - - - - - - "
"-.\n"
":                   :           :                                             :\n"
": Existing Chromium :           :  Chromium Rust              Existing "
"Rust   :\n"
": \"C++\"             :           :  \"wrapper\"                  "
"crate           :\n"
": +---------------+ :           : +----------------+          +-------------"
"+ :\n"
": |               | :           : |                |          |             "
"| :\n"
": |         o-----+-+-----------+-+->            o-+----------+-->          "
"| :\n"
": |               | : Language  : |                | Crate    |             "
"| :\n"
": +---------------+ : boundary  : +----------------+ API      +-------------"
"+ :\n"
":                   :           :                                             :\n"
"`- - - - - - - - - -'           `- - - - - - - - - - - - - - - - - - - - - - "
"-'\n"
"```"
msgstr ""
"```bob\n"
" Stak                            Heap\n"
".- - - - - - - - - - - - -.     .- - - - - - - - - - - - - - - - - - - - - - "
"-.\n"
":                         :     :                                             :\n"
":    "
"list                 :     :                                             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":   | 1  | o--+-----------+-----+--->| 2  | o--+--->| // | null "
"|             :\n"
":   +----+----+           :     :    +----+----+    +----+------"
"+             :\n"
":                         :     :                                             :\n"
":                         :     :                                             :\n"
"`- - - - - - - - - - - - -'     '- - - - - - - - - - - - - - - - - - - - - - "
"-'\n"
"```"

#: src/chromium/policy.md:28
msgid ""
"First-party Rust glue code for a particular third-party crate should "
"normally be kept in `third_party/rust/<crate>/<version>/wrapper`."
msgstr ""

#: src/chromium/policy.md:31
msgid "Because of this, today's course will be heavily focused on:"
msgstr ""

#: src/chromium/policy.md:33
msgid "Bringing in third-party Rust libraries (\"crates\")"
msgstr ""

#: src/chromium/policy.md:34
msgid "Writing glue code to be able to use those crates from Chromium C++."
msgstr ""

#: src/chromium/policy.md:36
msgid "If this policy changes over time, the course will evolve to keep up."
msgstr ""

#: src/chromium/build-rules.md:1
msgid "Build rules"
msgstr ""

#: src/chromium/build-rules.md:3
msgid ""
"Rust code is usually built using `cargo`. Chromium builds with `gn` and "
"`ninja` for efficiency --- its static rules allow maximum parallelism. Rust "
"is no exception."
msgstr ""

#: src/chromium/build-rules.md:6
msgid "Adding Rust code to Chromium"
msgstr ""

#: src/chromium/build-rules.md:8
msgid ""
"In some existing Chromium `BUILD.gn` file, declare a `rust_static_library`:"
msgstr ""

#: src/chromium/build-rules.md:10
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules.md:19
msgid ""
"You can also add `deps` on other Rust targets. Later we'll use this to "
"depend upon third party code."
msgstr ""

#: src/chromium/build-rules.md:24
msgid ""
"You must specify _both_ the crate root, _and_ a full list of sources. The "
"`crate_root` is the file given to the Rust compiler representing the root "
"file of the compilation unit --- typically `lib.rs`. `sources` is a complete "
"list of all source files which `ninja` needs in order to determine when "
"rebuilds are necessary."
msgstr ""

#: src/chromium/build-rules.md:30
msgid ""
"(There's no such thing as a Rust `source_set`, because in Rust, an entire "
"crate is a compilation unit. A `static_library` is the smallest unit.)"
msgstr ""

#: src/chromium/build-rules.md:33
msgid ""
"Students might be wondering why we need a gn template, rather than using "
"[gn's built-in support for Rust static libraries](https://gn.googlesource."
"com/gn/+/main/docs/reference.md#func_static_library). The answer is that "
"this template provides support for cxx interop, Rust features, and unit "
"tests, some of which we'll use later."
msgstr ""

#: src/chromium/build-rules/unsafe.md:1
msgid "Including `unsafe` Rust code"
msgstr ""

#: src/chromium/build-rules/unsafe.md:3
msgid ""
"Unsafe Rust code is forbidden in `rust_static_library` by default --- it "
"won't compile. If you need unsafe Rust code, add `allow_unsafe = true` to "
"the gn target. (Later in the course we'll see circumstances where this is "
"necessary.)"
msgstr ""

#: src/chromium/build-rules/unsafe.md:7
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [\n"
"    \"lib.rs\",\n"
"    \"hippopotamus.rs\"\n"
"  ]\n"
"  allow_unsafe = true\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules/depending.md:3
msgid "Simply add the above target to the `deps` of some Chromium C++ target."
msgstr ""

#: src/chromium/build-rules/depending.md:5
msgid ""
"```gn\n"
"import(\"//build/rust/rust_static_library.gni\")\n"
"\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"}\n"
"\n"
"# or source_set, static_library etc.\n"
"component(\"preexisting_cpp\") {\n"
"  deps = [ \":my_rust_lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/build-rules/vscode.md:3
msgid ""
"Types are elided in Rust code, which makes a good IDE even more useful than "
"for C++. Visual Studio code works well for Rust in Chromium. To use it,"
msgstr ""

#: src/chromium/build-rules/vscode.md:6
msgid ""
"Ensure your VSCode has the `rust-analyzer` extension, not earlier forms of "
"Rust support"
msgstr ""

#: src/chromium/build-rules/vscode.md:8
msgid ""
"`gn gen out/Debug --export-rust-project` (or equivalent for your output "
"directory)"
msgstr ""

#: src/chromium/build-rules/vscode.md:10
msgid "`ln -s out/Debug/rust-project.json rust-project.json`"
msgstr ""

#: src/exercises/chromium/build-rules.md:1
msgid "Build rules exercise"
msgstr ""

#: src/exercises/chromium/build-rules.md:3
msgid ""
"In your Chromium build, add a new Rust target to `//ui/base/BUILD.gn` "
"containing:"
msgstr ""

#: src/exercises/chromium/build-rules.md:11
msgid ""
"**Important**: note that `no_mangle` here is considered a type of unsafety "
"by the Rust compiler, so you'll need to to allow unsafe code in your `gn` "
"target."
msgstr ""

#: src/exercises/chromium/build-rules.md:15
msgid ""
"Add this new Rust target as a dependency of `//ui/base:base`. Declare this "
"function at the top of `ui/base/resource/resource_bundle.cc` (later, we'll "
"see how this can be automated by bindings generation tools):"
msgstr ""

#: src/exercises/chromium/build-rules.md:22
msgid ""
"Call this function from somewhere in `ui/base/resource/resource_bundle.cc` - "
"we suggest the top of `ResourceBundle::MaybeMangleLocalizedString`. Build "
"and run Chromium, and ensure that \"Hello from Rust!\" is printed lots of "
"times."
msgstr ""

#: src/exercises/chromium/build-rules.md:26
msgid ""
"If you use VSCode, now set up Rust to work well in VSCode. It will be useful "
"in subsequent exercises. If you've succeeded, you will be able to use right-"
"click \"Go to definition\" on `println!`."
msgstr ""

#: src/exercises/chromium/build-rules.md:30
#: src/exercises/chromium/interoperability-with-cpp.md:47
msgid "Where to find help"
msgstr ""

#: src/exercises/chromium/build-rules.md:32
msgid ""
"The options available to the [`rust_static_library` gn template](https://"
"source.chromium.org/chromium/chromium/src/+/main:build/rust/"
"rust_static_library.gni;l=16)"
msgstr ""

#: src/exercises/chromium/build-rules.md:33
msgid ""
"Information about [`#[no_mangle]`](https://doc.rust-lang.org/beta/reference/"
"abi.html#the-no_mangle-attribute)"
msgstr ""

#: src/exercises/chromium/build-rules.md:34
msgid ""
"Information about [`extern \"C\"`](https://doc.rust-lang.org/std/keyword."
"extern.html)"
msgstr ""

#: src/exercises/chromium/build-rules.md:35
msgid ""
"Information about gn's [`--export-rust-project`](https://gn.googlesource.com/"
"gn/+/main/docs/reference.md#compilation-database) switch"
msgstr ""

#: src/exercises/chromium/build-rules.md:36
msgid ""
"[How to install rust-analyzer in VSCode](https://code.visualstudio.com/docs/"
"languages/rust)"
msgstr ""

#: src/exercises/chromium/build-rules.md:42
msgid ""
"This example is unusual because it boils down to the lowest-common-"
"denominator interop language, C. Both C++ and Rust can natively declare and "
"call C ABI functions. Later in the course, we'll connect C++ directly to "
"Rust."
msgstr ""

#: src/exercises/chromium/build-rules.md:46
msgid ""
"`allow_unsafe = true` is required here because `#[no_mangle]` might allow "
"Rust to generate two functions with the same name, and Rust can no longer "
"guarantee that the right one is called."
msgstr ""

#: src/exercises/chromium/build-rules.md:50
msgid ""
"If you need a pure Rust executable, you can also do that using the "
"`rust_executable` gn template."
msgstr ""

#: src/chromium/interoperability-with-cpp.md:3
msgid ""
"The Rust community offers multiple options for C++/Rust interop, with new "
"tools being developed all the time. At the moment, Chromium uses a tool "
"called \"cxx\"."
msgstr ""

#: src/chromium/interoperability-with-cpp.md:6
msgid ""
"You describe your whole language boundary in an interface definition "
"language (which looks a lot like Rust) and then cxx tools generate "
"declarations for functions and types in both Rust and C++."
msgstr ""

#: src/chromium/interoperability-with-cpp.md:12
msgid ""
"See the [CXX tutorial](https://cxx.rs/tutorial.html) for a full example of "
"using this."
msgstr ""

#: src/chromium/interoperability-with-cpp.md:21
msgid ""
"Talk through the diagram. Explain that behind the scenes, this is doing just "
"the same as you previously did --- but by programmatically ensuring that the "
"C++ and Rust sides match, cxx can ensure there aren't obvious errors with "
"object lifetimes, string lengths, etc. It reduces lots of fiddly boilerplate "
"and the resulting code feels more \"natural\"."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:3
msgid ""
"cxx requires you to declare the whole C++/Rust boundary in one of your `.rs` "
"files. For instance:"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:16
msgid "\"example/include/blobstore.h\""
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:24
msgid "// Definitions of Rust types and functions go here\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:31
msgid "Native support for C++'s `std::unique_ptr` in Rust"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:32
msgid "Native support for Rust slices in C++"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:33
msgid "Calls from C++ to Rust, and Rust types (in the top part)"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:34
msgid "Calls from Rust to C++, and C++ types (in the bottom part)"
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:35
msgid ""
"If the function definitions in C++ or Rust don't match the cxx::bridge, a "
"compilation failure results."
msgstr ""

#: src/chromium/interoperability-with-cpp/example-bindings.md:38
msgid ""
"**Common misconception**: It _looks_ like a C++ header is being parser by "
"Rust, but this is misleading. This header is never interpreted by Rust, but "
"simply `#include`d in the generated C++ code for the benefit of C++ "
"compilers."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:3
msgid ""
"By far the most useful page when using cxx is the [type reference](https://"
"cxx.rs/bindings.html)."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:5
msgid "cxx fundamentally suits cases where:"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:7
msgid ""
"Your Rust-C++ interface is sufficiently simple that you can declare all of "
"it."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:8
msgid ""
"You're using only the types natively supported by cxx already, for example "
"`std::unique_ptr`, `std::string`, `&[u8]` etc."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:11
msgid ""
"It has many limitations --- for example lack of support for Rust's `Option` "
"type."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:13
msgid ""
"These limitations constrain us to using Rust in Chromium only for well "
"isolated \"leaf nodes\" rather than for arbitrary Rust-C++ interop. When "
"considering a use-case for Rust in Chromium, a good starting point is to "
"draft the cxx bindings for the language boundary to see if it appears simple "
"enough."
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:26
msgid ""
"You should also discuss some of the other sticky points with cxx, for "
"example:"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:28
msgid ""
"Its error handling is based around C++ exceptions (given on the next slide)"
msgstr ""

#: src/chromium/interoperability-with-cpp/limitations-of-cxx.md:29
msgid "Function pointers are awkward to use."
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:3
msgid ""
"cxx's support for `Result<T,E>` relies on C++ exceptions, so we can't use "
"that in Chromium. Alternatives:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:6
msgid ""
"Where success can be represented as a simple Boolean, as done in our [QR "
"code generator](https://source.chromium.org/chromium/chromium/src/+/main:"
"components/qr_code_generator/qr_code_generator_ffi_glue.rs;l=10): Return a "
"Boolean representing success, and record results using out-parameters:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:9
msgid "\"qr_code_generator\""
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:21
msgid ""
"Where success is more complex, provide a Rust object which can be queried "
"for details of success or failure:"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:29
msgid "// whether successful\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:30
msgid "// or some more complex error type\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:32
msgid "// or some more complex success type\n"
msgstr ""

#: src/chromium/interoperability-with-cpp/error-handling.md:38
msgid "The best way to learn cxx is by doing, so, another exercise!"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:3
msgid ""
"In Chromium, we define an independent `#[cxx::bridge] mod` for each leaf-"
"node where we want to use Rust. You'd typically have one for each "
"`rust_static_library`. Just add"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:7
msgid ""
"```gn\n"
"cxx_bindings = [ \"my_rust_file.rs\" ]\n"
"   # list of files containing #[cxx::bridge], not all source files\n"
"allow_unsafe = true\n"
"```"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:13
msgid ""
"to your existing `rust_static_library` target alongside `crate_root` and "
"`sources`."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:16
msgid "C++ headers will be generated at a sensible location, so you can just"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:19
msgid "\"ui/base/my_rust_file.rs.h\""
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:22
msgid ""
"You will find some utility functions in `//base` to convert to/from Chromium "
"C++ types to cxx Rust types --- for example [`SpanToRustSlice`](https://"
"source.chromium.org/chromium/chromium/src/+/main:base/containers/span_rust.h;"
"l=21)."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:27
msgid "Students may ask --- why do we still need `allow_unsafe = true`?"
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:29
msgid ""
"The broad answer is that no C/C++ code is \"safe\" by the normal Rust "
"standards. Calling back and forth to C/C++ from Rust may do arbitrary things "
"to memory, and compromise the safety of Rust's own data layouts. Presence of "
"_too many_ `unsafe` keywords in C/C++ interop can harm the signal-to-noise "
"ratio of such a keyword, and is [controversial](https://steveklabnik.com/"
"writing/the-cxx-debate), but strictly, bringing any foreign code into a Rust "
"binary can cause unexpected behavior from Rust's perspective."
msgstr ""

#: src/chromium/interoperability-with-cpp/using-cxx-in-chromium.md:36
msgid ""
"The narrow answer lies in the diagram at the top of this page --- behind the "
"scenes, cxx generates Rust `unsafe` and `extern \"C\"` functions just like "
"we did manually in the previous section."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:1
msgid "Exercise: Interoperability with C++"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:3
msgid "Part one"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:5
msgid ""
"In the Rust file you previously created, add a `#[cxx::bridge]` which "
"specifies a single function, to be called from C++, called "
"`hello_from_rust`, taking no parameters and returning no value."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:8
msgid ""
"Modify your previous `hello_from_rust` function to remove `extern \"C\"` and "
"`#[no_mangle]`. This is now just a standard Rust function."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:10
msgid "Modify your `gn` target to build these bindings."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:11
msgid ""
"In your C++ code, remove the forward-declaration of `hello_from_rust`. "
"Instead, include the generated header file."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:13
msgid "Build and run!"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:15
msgid "Part two"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:17
msgid ""
"It's a good idea to play with cxx a little. It helps you think about how "
"flexible Rust in Chromium actually is."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:20
msgid "Some things to try:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:22
msgid "Call back into C++ from Rust. You will need:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:23
msgid ""
"An additional header file which you can `include!` from your `cxx::bridge`. "
"You'll need to declare your C++ function in that new header file."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:25
msgid ""
"An `unsafe` block to call such a function, or alternatively specify the "
"`unsafe` keyword in your `#[cxx::bridge]` [as described here](https://cxx.rs/"
"extern-c++.html#functions-and-member-functions)."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:27
msgid ""
"You may also need to `#include \"third_party/rust/cxx/v1/crate/include/cxx."
"h\"`"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:28
msgid "Pass a C++ string from C++ into Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:29
msgid "Pass a reference to a C++ object into Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:30
msgid ""
"Intentionally get the Rust function signatures mismatched from the `#[cxx::"
"bridge]`, and get used to the errors you see."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:32
msgid ""
"Intentionally get the C++ function signatures mismatched from the `#[cxx::"
"bridge]`, and get used to the errors you see."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:34
msgid ""
"Pass a `std::unique_ptr` of some type from C++ into Rust, so that Rust can "
"own some C++ object."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:36
msgid ""
"Create a Rust object and pass it into C++, so that C++ owns it. (Hint: you "
"need a `Box`)."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:38
msgid "Declare some methods on a C++ type. Call them from Rust."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:39
msgid "Declare some methods on a Rust type. Call them from C++."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:41
msgid "Part three"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:43
msgid ""
"Now you understand the strengths and limitations of cxx interop, think of a "
"couple of use-cases for Rust in Chromium where the interface would be "
"sufficiently simple. Sketch how you might define that interface."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:49
msgid "The [cxx binding reference](https://cxx.rs/bindings.html)"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:50
msgid ""
"The [`rust_static_library` gn template](https://source.chromium.org/chromium/"
"chromium/src/+/main:build/rust/rust_static_library.gni;l=16)"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:56
msgid "Some of the questions you may encounter:"
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:57
msgid ""
"I'm seeing a problem initializing a variable of type X with type Y, where X "
"and Y are both function types. This is because your C++ function doesn't "
"quite match the declaration in your `cxx::bridge`."
msgstr ""

#: src/exercises/chromium/interoperability-with-cpp.md:61
msgid ""
"I seem to be able to freely convert C++ references into Rust references. "
"Doesn't that risk UB? For cxx's _opaque_ types, no, because they are zero-"
"sized. For cxx trivial types yes, it's _possible_ to cause UB, although "
"cxx's design makes it quite difficult to craft such an example."
msgstr ""

#: src/chromium/adding-third-party-crates.md:3
msgid ""
"Rust libraries are called \"crates\" and are found at [crates.io](https://"
"crates.io). It's _very easy_ for Rust crates to depend upon one another. So "
"they do!"
msgstr ""

#: src/chromium/adding-third-party-crates.md:6
msgid "C++ library"
msgstr ""

#: src/chromium/adding-third-party-crates.md:6
#, fuzzy
msgid "Rust crate"
msgstr "Rust's √∏kosystem"

#: src/chromium/adding-third-party-crates.md:8
#, fuzzy
msgid "Build system"
msgstr "Rust's √∏kosystem"

#: src/chromium/adding-third-party-crates.md:8
#: src/chromium/adding-third-party-crates.md:10
msgid "Lots"
msgstr ""

#: src/chromium/adding-third-party-crates.md:8
msgid "Consistent: `Cargo.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates.md:9
msgid "Typical library size"
msgstr ""

#: src/chromium/adding-third-party-crates.md:9
msgid "Large-ish"
msgstr ""

#: src/chromium/adding-third-party-crates.md:9
msgid "Small"
msgstr ""

#: src/chromium/adding-third-party-crates.md:10
msgid "Transitive dependencies"
msgstr ""

#: src/chromium/adding-third-party-crates.md:10
msgid "Few"
msgstr ""

#: src/chromium/adding-third-party-crates.md:12
msgid "For a Chromium engineer, this has pros and cons:"
msgstr ""

#: src/chromium/adding-third-party-crates.md:14
msgid ""
"All crates use a common build system so we can automate their inclusion into "
"Chromium..."
msgstr ""

#: src/chromium/adding-third-party-crates.md:16
msgid ""
"... but, crates typically have transitive dependencies, so you will likely "
"have to bring in multiple libraries."
msgstr ""

#: src/chromium/adding-third-party-crates.md:19
msgid "We'll discuss:"
msgstr ""

#: src/chromium/adding-third-party-crates.md:21
msgid "How to put a crate in the Chromium source code tree"
msgstr ""

#: src/chromium/adding-third-party-crates.md:22
msgid "How to make `gn` build rules for it"
msgstr ""

#: src/chromium/adding-third-party-crates.md:23
msgid "How to audit its source code for sufficient safety."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:1
msgid "Configuring the `Cargo.toml` file to add crates"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:3
msgid ""
"Chromium has a single set of centrally-managed direct crate dependencies. "
"These are managed through a single [`Cargo.toml`](https://source.chromium."
"org/chromium/chromium/src/+/main:third_party/rust/chromium_crates_io/Cargo."
"toml):"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:6
msgid ""
"```toml\n"
"[dependencies]\n"
"bitflags = \"1\"\n"
"cfg-if = \"1\"\n"
"cxx = \"1\"\n"
"# lots more...\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:14
msgid ""
"As with any other `Cargo.toml`, you can specify [more details about the "
"dependencies](https://doc.rust-lang.org/cargo/reference/specifying-"
"dependencies.html) --- most commonly, you'll want to specify the `features` "
"that you wish to enable in the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-cargo-toml.md:18
msgid ""
"When adding a crate to Chromium, you'll often need to provide some extra "
"information in an additional file, `gnrt_config.toml`, which we'll meet next."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:1
msgid "Configuring `gnrt_config.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:3
msgid ""
"Alongside `Cargo.toml` is [`gnrt_config.toml`](https://source.chromium.org/"
"chromium/chromium/src/+/main:third_party/rust/chromium_crates_io/gnrt_config."
"toml). This contains Chromium-specific extensions to crate handling."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:6
msgid ""
"If you add a new crate, you should specify at least the `group`. This is one "
"of:"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:16
#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:15
msgid "For instance,"
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:23
msgid ""
"Depending on the crate source code layout, you may also need to use this "
"file to specify where its `LICENSE` file(s) can be found."
msgstr ""

#: src/chromium/adding-third-party-crates/configuring-gnrt-config-toml.md:26
msgid ""
"Later, we'll see some other things you will need to configure in this file "
"to resolve problems."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:3
msgid ""
"A tool called `gnrt` knows how to download crates and how to generate `BUILD."
"gn` rules."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:6
msgid "To start, download the crate you want like this:"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:13
msgid ""
"Although the `gnrt` tool is part of the Chromium source code, by running "
"this command you will be downloading and running its dependencies from "
"`crates.io`. See [the earlier section](../cargo.md) discussing this security "
"decision."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:18
msgid "This `vendor` command may download:"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:19
#, fuzzy
msgid "Your crate"
msgstr "\"Sokrates\""

#: src/chromium/adding-third-party-crates/downloading-crates.md:20
msgid "Direct and transitive dependencies"
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:21
msgid ""
"New versions of other crates, as required by `cargo` to resolve the complete "
"set of crates required by Chromium."
msgstr ""

#: src/chromium/adding-third-party-crates/downloading-crates.md:24
msgid ""
"Chromium maintains patches for some crates, kept in `//third_party/rust/"
"chromium_crates_io/patches`. These will be reapplied automatically, but if "
"patching fails you may need to take manual action."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:1
msgid "Generating `gn` build rules"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:3
msgid ""
"Once you've downloaded the crate, generate the `BUILD.gn` files like this:"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:9
msgid "Now run `git status`. You should find:"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:11
msgid ""
"At least one new crate source code in `third_party/rust/chromium_crates_io/"
"vendor`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:12
msgid ""
"At least one new `BUILD.gn` in `third_party/rust/<crate name>/v<major semver "
"version>`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:13
msgid "An appropriate `README.chromium`"
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:15
msgid ""
"The \"major semver version\" is a [Rust \"semver\" version number](https://"
"doc.rust-lang.org/cargo/reference/semver.html)."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:17
msgid ""
"Take a close look, especially at the things generated in `third_party/rust`."
msgstr ""

#: src/chromium/adding-third-party-crates/generating-gn-build-rules.md:21
msgid ""
"Talk a little about semver --- and specifically the way that in Chromium "
"it's to allow multiple incompatible versions of a crate, which is "
"discouraged but sometimes necessary in the cargo ecosystem."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:3
msgid ""
"If your build fails, it may be because of a `build.rs`: programs which do "
"arbitrary things at build time. This is fundamentally at odds with the "
"design of `gn` and `ninja` which aim for static, deterministic, build rules "
"to maximize parallelism and repeatability of builds."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:8
msgid ""
"Some `build.rs` actions are automatically supported; others require action:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:10
msgid "build script effect"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:10
msgid "Supported by our gn templates"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:10
msgid "Work required by you"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:12
msgid "Checking rustc version to configure features on and off"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:12
#: src/chromium/adding-third-party-crates/resolving-problems.md:13
msgid "None"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:13
msgid "Checking platform or CPU to configure features on and off"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:14
msgid "Generating code"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:14
msgid "Yes - specify in `gnrt_config.toml`"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:15
msgid "Building C/C++"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:15
#: src/chromium/adding-third-party-crates/resolving-problems.md:16
msgid "Patch around it"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:16
msgid "Arbitrary other actions"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems.md:18
msgid ""
"Fortunately, most crates don't contain a build script, and fortunately, most "
"build scripts only do the top two actions."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:3
msgid ""
"If `ninja` complains about missing files, check the `build.rs` to see if it "
"writes source code files."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:6
msgid ""
"If so, modify [`gnrt_config.toml`](../configuring-gnrt-config-toml.md) to "
"add `build-script-outputs` to the crate. If this is a transitive dependency, "
"that is, one on which Chromium code should not directly depend, also add "
"`allow-first-party-usage=false`. There are several examples already in that "
"file:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:11
msgid ""
"```toml\n"
"[crate.unicode-linebreak]\n"
"allow-first-party-usage = false\n"
"build-script-outputs = [ \"tables.rs\" ]\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-generate-code.md:17
msgid ""
"Now rerun [`gnrt.py -- gen`](../generating-gn-build-rules.md) to regenerate "
"`BUILD.gn` files to inform ninja that this particular output file is input "
"to subsequent build steps."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:3
msgid ""
"Some crates use the [`cc`](https://crates.io/crates/cc) crate to build and "
"link C/C++ libraries. Other crates parse C/C++ using [`bindgen`](https://"
"crates.io/crates/bindgen) within their build scripts. These actions can't be "
"supported in a Chromium context --- our gn, ninja and LLVM build system is "
"very specific in expressing relationships between build actions."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:9
msgid "So, your options are:"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:11
msgid "Avoid these crates"
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:12
msgid "Apply a patch to the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/resolving-problems/build-scripts-which-take-arbitrary-actions.md:14
msgid ""
"Patches should be kept in `third_party/rust/chromium_crates_io/patches/"
"<crate>` - see for example the [patches against the cxx crate](https://"
"source.chromium.org/chromium/chromium/src/+/main:third_party/rust/"
"chromium_crates_io/patches/cxx/) - and will be applied automatically by "
"`gnrt` each time it upgrades the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:3
msgid ""
"Once you've added a third-party crate and generated build rules, depending "
"on a crate is simple. Find your `rust_static_library` target, and add a "
"`dep` on the `:lib` target within your crate."
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:7
msgid "Specifically,"
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:9
msgid ""
"```bob\n"
"                     +------------+      +----------------------+\n"
"\"//third_party/rust\" | crate name | \"/v\" | major semver version | \"/:"
"lib\"\n"
"                     +------------+      +----------------------+\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/depending-on-a-crate.md:17
msgid ""
"```gn\n"
"rust_static_library(\"my_rust_lib\") {\n"
"  crate_root = \"lib.rs\"\n"
"  sources = [ \"lib.rs\" ]\n"
"  deps = [ \"//third_party/rust/example_rust_crate/v1:lib\" ]\n"
"}\n"
"```"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:1
msgid "Auditing third party crates"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:3
msgid ""
"Adding new libraries is subject to Chromium's standard [policies](https://"
"chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/rust."
"md#Third_party-review), but of course also subject to code review. As you "
"may be bringing in not just a single crate but also transitive dependencies, "
"there may be a lot of code to review. On the other hand, safe Rust code can "
"have limited negative side effects. How should you review it?"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:9
msgid ""
"Over time Chromium aims to move to a process based around [cargo vet]"
"(https://mozilla.github.io/cargo-vet/)."
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:11
msgid ""
"Meanwhile, for each new crate addition, we are checking for the following:"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:13
msgid ""
"Understand why each crate is used. What's the relationship between crates? "
"If the build system for each crate contains a `build.rs` or procedural "
"macros, work out what they're for. Are they compatible with the way Chromium "
"is normally built?"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:17
msgid "Check each crate seems to be reasonably well maintained"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:18
msgid ""
"Use `cd third-party/rust/chromium_crates_io; cargo audit` to check for known "
"vulnerabilities (first you'll need to `cargo install cargo-audit`, which "
"ironically involves downloading lots of dependencies from the internet[2](../"
"cargo.md))"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:21
msgid ""
"Ensure any unsafe code is good enough for the [Rule of Two](https://chromium."
"googlesource.com/chromium/src/+/main/docs/security/rule-of-2.md#unsafe-code-"
"in-safe-languages)"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:22
msgid "Check for any use of `fs` or `net` APIs"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:23
msgid ""
"Read all the code at a sufficient level to look for anything out of place "
"that might have been maliciously inserted. (You can't realistically aim for "
"100% perfection here: there's often just too much code.)"
msgstr ""

#: src/chromium/adding-third-party-crates/reviews-and-audits.md:27
msgid ""
"These are just guidelines --- work with reviewers from `security@chromium."
"org` to work out the right way to become confident of the crate."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:1
msgid "Checking crates into Chromium source code"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:3
msgid "`git status` should reveal:"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:4
msgid "Crate code in `//third_party/rust/chromium_crates_io`"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:5
msgid ""
"Metadata (`BUILD.gn` and `README.chromium`) in `//third_party/rust/<crate>/"
"<version>`"
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:7
msgid "Please also add an `OWNERS` file in the latter location."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:9
msgid ""
"You should land all this, along with your `Cargo.toml` and `gnrt_config."
"toml` changes, into the Chromium repo."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:12
msgid ""
"**Important**: you need to use `git add -f` because otherwise `.gitignore` "
"files may result in some files being skipped."
msgstr ""

#: src/chromium/adding-third-party-crates/checking-in.md:15
msgid ""
"As you do so, you might find presubmit checks fail because of non-inclusive "
"language. This is because Rust crate data tends to include names of git "
"branches, and many projects still use non-inclusive terminology there. So "
"you may need to run:"
msgstr ""

#: src/chromium/adding-third-party-crates/keeping-up-to-date.md:3
msgid ""
"As the OWNER of any third party Chromium dependency, you are [expected to "
"keep it up to date with any security fixes](https://chromium.googlesource."
"com/chromium/src/+/main/docs/adding_to_third_party.md#add-owners). It is "
"hoped that we will soon automate this for Rust crates, but for now, it's "
"still your responsibility just as it is for any other third party dependency."
msgstr ""

#: src/exercises/chromium/third-party.md:3
msgid ""
"Add [uwuify](https://crates.io/crates/uwuify) to Chromium, turning off the "
"crate's [default features](https://doc.rust-lang.org/cargo/reference/"
"features.html#the-default-feature). Assume that the crate will be used in "
"shipping Chromium, but won't be used to handle untrustworthy input."
msgstr ""

#: src/exercises/chromium/third-party.md:7
msgid ""
"(In the next exercise we'll use uwuify from Chromium, but feel free to skip "
"ahead and do that now if you like. Or, you could create a new "
"[`rust_executable` target](https://source.chromium.org/chromium/chromium/src/"
"+/main:build/rust/rust_executable.gni) which uses `uwuify`)."
msgstr ""

#: src/exercises/chromium/third-party.md:14
msgid ""
"The total crates needed are: uwuify, smallvec, scopeguard, parking_lot, "
"parking_lot_core, lock_api and instant. If students are downloading even "
"more than that, they probably forgot to turn off the default features."
msgstr ""

#: src/exercises/chromium/third-party.md:18
msgid ""
"Thanks to [Daniel Liu](https://github.com/Daniel-Liu-c0deb0t) for this "
"crate! "
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:1
msgid "Bringing it together --- Exercise"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:3
msgid ""
"In this exercise, you're going to add a whole new Chromium feature, bringing "
"together everything you already learned."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:6
msgid "The brief from Product Management"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:8
msgid ""
"A community of pixies has been discovered living in a remote rainforest. "
"It's important that we get Chromium for Pixies delivered to them as soon as "
"possible."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:12
msgid ""
"The requirement is to translate all Chromium's UI strings into Pixie "
"language."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:14
msgid ""
"There's not time to wait for proper translations, but fortunately pixie "
"language is very close to English, and it turns out there's a Rust crate "
"which does the translation."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:18
msgid ""
"In fact, you already [imported that crate in the previous exercise](https://"
"crates.io/crates/uwuify)."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:20
msgid ""
"(Obviously, real translations of Chrome require incredible care and "
"diligence. Don't ship this!)"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:23
msgid "Steps"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:25
msgid ""
"Modify `ResourceBundle::MaybeMangleLocalizedString` so that it uwuifies all "
"strings before display. In this special build of Chromium, it should always "
"do this irrespective of the setting of `mangle_localized_strings_`."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:29
msgid ""
"If you've done everything right across all these exercises, congratulations, "
"you should have created Chrome for pixies!"
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:37
msgid ""
"UTF16 vs UTF8. Students should be aware that Rust strings are always UTF8, "
"and will probably decide that it's better to do the conversion on the C++ "
"side using `base::UTF16ToUTF8` and back again."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:40
msgid ""
"If students decide to do the conversion on the Rust side, they'll need to "
"consider [`std::string::from_utf16`](https://doc.rust-lang.org/std/string/"
"struct.String.html#method.from_utf16), consider error handling, and consider "
"which [cxx supported types can transfer a lot of u16s](https://cxx.rs/"
"binding/slice.html)."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:43
msgid ""
"Students may design the C++/Rust boundary in several different ways, e.g. "
"taking and returning strings by value, or taking a mutable reference to a "
"string. If a mutable reference is used, cxx will likely tell the student "
"that they need to use [`Pin`](https://doc.rust-lang.org/std/pin/). You may "
"need to explain what `Pin` does, and then explain why `cxx` needs it for "
"mutable references to C++ data: the answer is that C++ data can't be moved "
"around like Rust data, because it may contain self-referential pointers."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:50
msgid ""
"The C++ target containing `ResourceBundle::MaybeMangleLocalizedString` will "
"need to depend on a `rust_static_library` target. The student probably "
"already did this."
msgstr ""

#: src/exercises/chromium/bringing-it-together.md:53
msgid ""
"The `rust_static_library` target will need to depend on `//third_party/rust/"
"uwuify/v0_2:lib`."
msgstr ""

#: src/bare-metal.md:1
msgid "Welcome to Bare Metal Rust"
msgstr "Velkommen til Rust p√• det r√• jern"

#: src/bare-metal.md:3
msgid ""
"This is a standalone one-day course about bare-metal Rust, aimed at people "
"who are familiar with the basics of Rust (perhaps from completing the "
"Comprehensive Rust course), and ideally also have some experience with bare-"
"metal programming in some other language such as C."
msgstr ""

#: src/bare-metal.md:7
msgid ""
"Today we will talk about 'bare-metal' Rust: running Rust code without an OS "
"underneath us. This will be divided into several parts:"
msgstr ""

#: src/bare-metal.md:10
msgid "What is `no_std` Rust?"
msgstr ""

#: src/bare-metal.md:11
msgid "Writing firmware for microcontrollers."
msgstr ""

#: src/bare-metal.md:12
msgid "Writing bootloader / kernel code for application processors."
msgstr ""

#: src/bare-metal.md:13
msgid "Some useful crates for bare-metal Rust development."
msgstr ""

#: src/bare-metal.md:15
msgid ""
"For the microcontroller part of the course we will use the [BBC micro:bit]"
"(https://microbit.org/) v2 as an example. It's a [development board](https://"
"tech.microbit.org/hardware/) based on the Nordic nRF51822 microcontroller "
"with some LEDs and buttons, an I2C-connected accelerometer and compass, and "
"an on-board SWD debugger."
msgstr ""

#: src/bare-metal.md:20
msgid ""
"To get started, install some tools we'll need later. On gLinux or Debian:"
msgstr ""

#: src/bare-metal.md:30
msgid ""
"And give users in the `plugdev` group access to the micro:bit programmer:"
msgstr ""

#: src/bare-metal.md:38 src/bare-metal/microcontrollers/debugging.md:27
msgid "On MacOS:"
msgstr "P√• MacOS:"

#: src/bare-metal/no_std.md:1
msgid "`no_std`"
msgstr "`no_std`"

#: src/bare-metal/no_std.md:7
msgid "`core`"
msgstr "`core`"

#: src/bare-metal/no_std.md:12 src/bare-metal/alloc.md:1
msgid "`alloc`"
msgstr "`alloc`"

#: src/bare-metal/no_std.md:17
msgid "`std`"
msgstr "`std`"

#: src/bare-metal/no_std.md:24
msgid "Slices, `&str`, `CStr`"
msgstr ""

#: src/bare-metal/no_std.md:25
msgid "`NonZeroU8`..."
msgstr "`NonZeroU8`..."

#: src/bare-metal/no_std.md:26
msgid "`Option`, `Result`"
msgstr "`Option`, `Result`"

#: src/bare-metal/no_std.md:27
msgid "`Display`, `Debug`, `write!`..."
msgstr "`Display`, `Debug`, `write!`..."

#: src/bare-metal/no_std.md:28
msgid "`Iterator`"
msgstr "`Iterator`"

#: src/bare-metal/no_std.md:29
msgid "`panic!`, `assert_eq!`..."
msgstr "`panic!`, `assert_eq!`..."

#: src/bare-metal/no_std.md:30
msgid "`NonNull` and all the usual pointer-related functions"
msgstr ""

#: src/bare-metal/no_std.md:31
msgid "`Future` and `async`/`await`"
msgstr "`Future` og `async`/`await`"

#: src/bare-metal/no_std.md:32
msgid "`fence`, `AtomicBool`, `AtomicPtr`, `AtomicU32`..."
msgstr "`fence`, `AtomicBool`, `AtomicPtr`, `AtomicU32`..."

#: src/bare-metal/no_std.md:33
msgid "`Duration`"
msgstr "`Duration`"

#: src/bare-metal/no_std.md:38
msgid "`Box`, `Cow`, `Arc`, `Rc`"
msgstr "`Box`, `Cow`, `Arc`, `Rc`"

#: src/bare-metal/no_std.md:39
msgid "`Vec`, `BinaryHeap`, `BtreeMap`, `LinkedList`, `VecDeque`"
msgstr "`Vec`, `BinaryHeap`, `BtreeMap`, `LinkedList`, `VecDeque`"

#: src/bare-metal/no_std.md:40
msgid "`String`, `CString`, `format!`"
msgstr "`String`, `CString`, `format!`"

#: src/bare-metal/no_std.md:45
msgid "`Error`"
msgstr "`Error`"

#: src/bare-metal/no_std.md:47
msgid "`Mutex`, `Condvar`, `Barrier`, `Once`, `RwLock`, `mpsc`"
msgstr "`Mutex`, `Condvar`, `Barrier`, `Once`, `RwLock`, `mpsc`"

#: src/bare-metal/no_std.md:48
msgid "`File` and the rest of `fs`"
msgstr "`File` og resten af `fs`"

#: src/bare-metal/no_std.md:49
msgid "`println!`, `Read`, `Write`, `Stdin`, `Stdout` and the rest of `io`"
msgstr "`println!`, `Read`, `Write`, `Stdin`, `Stdout` og resten af `io`"

#: src/bare-metal/no_std.md:50
msgid "`Path`, `OsString`"
msgstr "`Path`, `OsString`"

#: src/bare-metal/no_std.md:51
msgid "`net`"
msgstr "`net`"

#: src/bare-metal/no_std.md:52
msgid "`Command`, `Child`, `ExitCode`"
msgstr "`Command`, `Child`, `ExitCode`"

#: src/bare-metal/no_std.md:53
msgid "`spawn`, `sleep` and the rest of `thread`"
msgstr "`spawn`, `sleep` og resten af `thread`"

#: src/bare-metal/no_std.md:54
msgid "`SystemTime`, `Instant`"
msgstr "`SystemTime`, `Instant`"

#: src/bare-metal/no_std.md:62
msgid "`HashMap` depends on RNG."
msgstr ""

#: src/bare-metal/no_std.md:63
msgid "`std` re-exports the contents of both `core` and `alloc`."
msgstr ""

#: src/bare-metal/minimal.md:1
msgid "A minimal `no_std` program"
msgstr ""

#: src/bare-metal/minimal.md:17
msgid "This will compile to an empty binary."
msgstr ""

#: src/bare-metal/minimal.md:18
msgid "`std` provides a panic handler; without it we must provide our own."
msgstr ""

#: src/bare-metal/minimal.md:19
msgid "It can also be provided by another crate, such as `panic-halt`."
msgstr ""

#: src/bare-metal/minimal.md:20
msgid ""
"Depending on the target, you may need to compile with `panic = \"abort\"` to "
"avoid an error about `eh_personality`."
msgstr ""

#: src/bare-metal/minimal.md:22
msgid ""
"Note that there is no `main` or any other entry point; it's up to you to "
"define your own entry point. This will typically involve a linker script and "
"some assembly code to set things up ready for Rust code to run."
msgstr ""

#: src/bare-metal/alloc.md:3
msgid ""
"To use `alloc` you must implement a [global (heap) allocator](https://doc."
"rust-lang.org/stable/std/alloc/trait.GlobalAlloc.html)."
msgstr ""

#: src/bare-metal/alloc.md:23
msgid ""
"// Safe because `HEAP` is only used here and `entry` is only called once.\n"
msgstr ""
"// Safe because `HEAP` is only used here and `entry` is only called once.\n"

#: src/bare-metal/alloc.md:25
msgid "// Give the allocator some memory to allocate.\n"
msgstr "// Give the allocator some memory to allocate.\n"

#: src/bare-metal/alloc.md:31
msgid "// Now we can do things that require heap allocation.\n"
msgstr "// Now we can do things that require heap allocation.\n"

#: src/bare-metal/alloc.md:33
msgid "\"A string\""
msgstr "\"En streng\""

#: src/bare-metal/alloc.md:39
msgid ""
"`buddy_system_allocator` is a third-party crate implementing a basic buddy "
"system allocator. Other crates are available, or you can write your own or "
"hook into your existing allocator."
msgstr ""

#: src/bare-metal/alloc.md:41
msgid ""
"The const parameter of `LockedHeap` is the max order of the allocator; i.e. "
"in this case it can allocate regions of up to 2\\*\\*32 bytes."
msgstr ""

#: src/bare-metal/alloc.md:43
msgid ""
"If any crate in your dependency tree depends on `alloc` then you must have "
"exactly one global allocator defined in your binary. Usually this is done in "
"the top-level binary crate."
msgstr ""

#: src/bare-metal/alloc.md:45
msgid ""
"`extern crate panic_halt as _` is necessary to ensure that the `panic_halt` "
"crate is linked in so we get its panic handler."
msgstr ""

#: src/bare-metal/alloc.md:47
msgid "This example will build but not run, as it doesn't have an entry point."
msgstr ""

#: src/bare-metal/microcontrollers.md:3
msgid ""
"The `cortex_m_rt` crate provides (among other things) a reset handler for "
"Cortex M microcontrollers."
msgstr ""

#: src/bare-metal/microcontrollers.md:21
msgid ""
"Next we'll look at how to access peripherals, with increasing levels of "
"abstraction."
msgstr ""

#: src/bare-metal/microcontrollers.md:25
msgid ""
"The `cortex_m_rt::entry` macro requires that the function have type `fn() -"
"> !`, because returning to the reset handler doesn't make sense."
msgstr ""

#: src/bare-metal/microcontrollers.md:27
msgid "Run the example with `cargo embed --bin minimal`"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:3
msgid ""
"Most microcontrollers access peripherals via memory-mapped IO. Let's try "
"turning on an LED on our micro:bit:"
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:16
msgid "/// GPIO port 0 peripheral address\n"
msgstr "/// GPIO port 0 peripheral address\n"

#: src/bare-metal/microcontrollers/mmio.md:19
msgid "// GPIO peripheral offsets\n"
msgstr "// GPIO peripheral offsets\n"

#: src/bare-metal/microcontrollers/mmio.md:24
msgid "// PIN_CNF fields\n"
msgstr "// PIN_CNF fields\n"

#: src/bare-metal/microcontrollers/mmio.md:34
#: src/bare-metal/microcontrollers/pacs.md:21
#: src/bare-metal/microcontrollers/hals.md:25
msgid "// Configure GPIO 0 pins 21 and 28 as push-pull outputs.\n"
msgstr "// Configure GPIO 0 pins 21 and 28 as push-pull outputs.\n"

#: src/bare-metal/microcontrollers/mmio.md:37
#: src/bare-metal/microcontrollers/mmio.md:51
msgid ""
"// Safe because the pointers are to valid peripheral control registers, and\n"
"    // no aliases exist.\n"
msgstr ""
"// Safe because the pointers are to valid peripheral control registers, and\n"
"    // no aliases exist.\n"

#: src/bare-metal/microcontrollers/mmio.md:48
#: src/bare-metal/microcontrollers/pacs.md:39
#: src/bare-metal/microcontrollers/hals.md:29
msgid "// Set pin 28 low and pin 21 high to turn the LED on.\n"
msgstr "// Set pin 28 low and pin 21 high to turn the LED on.\n"

#: src/bare-metal/microcontrollers/mmio.md:64
msgid ""
"GPIO 0 pin 21 is connected to the first column of the LED matrix, and pin 28 "
"to the first row."
msgstr ""

#: src/bare-metal/microcontrollers/mmio.md:66
#: src/bare-metal/microcontrollers/pacs.md:59
#: src/bare-metal/microcontrollers/hals.md:43
#: src/bare-metal/microcontrollers/board-support.md:34
msgid "Run the example with:"
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md:1
msgid "Peripheral Access Crates"
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md:3
msgid ""
"[`svd2rust`](https://crates.io/crates/svd2rust) generates mostly-safe Rust "
"wrappers for memory-mapped peripherals from [CMSIS-SVD](https://www.keil.com/"
"pack/doc/CMSIS/SVD/html/index.html) files."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md:49
msgid ""
"SVD (System View Description) files are XML files typically provided by "
"silicon vendors which describe the memory map of the device."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md:51
msgid ""
"They are organised by peripheral, register, field and value, with names, "
"descriptions, addresses and so on."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md:53
msgid ""
"SVD files are often buggy and incomplete, so there are various projects "
"which patch the mistakes, add missing details, and publish the generated "
"crates."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md:55
msgid "`cortex-m-rt` provides the vector table, among other things."
msgstr ""

#: src/bare-metal/microcontrollers/pacs.md:56
msgid ""
"If you `cargo install cargo-binutils` then you can run `cargo objdump --bin "
"pac -- -d --no-show-raw-insn` to see the resulting binary."
msgstr ""

#: src/bare-metal/microcontrollers/hals.md:1
msgid "HAL crates"
msgstr ""

#: src/bare-metal/microcontrollers/hals.md:3
msgid ""
"[HAL crates](https://github.com/rust-embedded/awesome-embedded-rust#hal-"
"implementation-crates) for many microcontrollers provide wrappers around "
"various peripherals. These generally implement traits from [`embedded-hal`]"
"(https://crates.io/crates/embedded-hal)."
msgstr ""

#: src/bare-metal/microcontrollers/hals.md:22
msgid "// Create HAL wrapper for GPIO port 0.\n"
msgstr ""

#: src/bare-metal/microcontrollers/hals.md:39
msgid ""
"`set_low` and `set_high` are methods on the `embedded_hal` `OutputPin` trait."
msgstr ""

#: src/bare-metal/microcontrollers/hals.md:40
msgid ""
"HAL crates exist for many Cortex-M and RISC-V devices, including various "
"STM32, GD32, nRF, NXP, MSP430, AVR and PIC microcontrollers."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md:1
msgid "Board support crates"
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md:3
msgid ""
"Board support crates provide a further level of wrapping for a specific "
"board for convenience."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md:28
msgid ""
"In this case the board support crate is just providing more useful names, "
"and a bit of initialisation."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md:30
msgid ""
"The crate may also include drivers for some on-board devices outside of the "
"microcontroller itself."
msgstr ""

#: src/bare-metal/microcontrollers/board-support.md:32
msgid "`microbit-v2` includes a simple driver for the LED matrix."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:1
msgid "The type state pattern"
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:11
msgid "// let gpio0_01_again = gpio0.p0_01; // Error, moved.\n"
msgstr "// let gpio0_01_again = gpio0.p0_01; // Error, moved.\n"

#: src/bare-metal/microcontrollers/type-state.md:19
msgid "// pin_input.is_high(); // Error, moved.\n"
msgstr "// pin_input.is_high(); // Error, moved.\n"

#: src/bare-metal/microcontrollers/type-state.md:32
msgid ""
"Pins don't implement `Copy` or `Clone`, so only one instance of each can "
"exist. Once a pin is moved out of the port struct nobody else can take it."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:34
msgid ""
"Changing the configuration of a pin consumes the old pin instance, so you "
"can‚Äôt keep use the old instance afterwards."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:36
msgid ""
"The type of a value indicates the state that it is in: e.g. in this case, "
"the configuration state of a GPIO pin. This encodes the state machine into "
"the type system, and ensures that you don't try to use a pin in a certain "
"way without properly configuring it first. Illegal state transitions are "
"caught at compile time."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:40
msgid ""
"You can call `is_high` on an input pin and `set_high` on an output pin, but "
"not vice-versa."
msgstr ""

#: src/bare-metal/microcontrollers/type-state.md:41
msgid "Many HAL crates follow this pattern."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md:1
msgid "`embedded-hal`"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md:3
msgid ""
"The [`embedded-hal`](https://crates.io/crates/embedded-hal) crate provides a "
"number of traits covering common microcontroller peripherals."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md:6
msgid "GPIO"
msgstr "GPIO"

#: src/bare-metal/microcontrollers/embedded-hal.md:7
msgid "ADC"
msgstr "ADC"

#: src/bare-metal/microcontrollers/embedded-hal.md:8
msgid "I2C, SPI, UART, CAN"
msgstr "I2C, SPI, UART, CAN"

#: src/bare-metal/microcontrollers/embedded-hal.md:9
msgid "RNG"
msgstr "RNG"

#: src/bare-metal/microcontrollers/embedded-hal.md:10
msgid "Timers"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md:11
msgid "Watchdogs"
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md:13
msgid ""
"Other crates then implement [drivers](https://github.com/rust-embedded/"
"awesome-embedded-rust#driver-crates) in terms of these traits, e.g. an "
"accelerometer driver might need an I2C or SPI bus implementation."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md:19
msgid ""
"There are implementations for many microcontrollers, as well as other "
"platforms such as Linux on Raspberry Pi."
msgstr ""

#: src/bare-metal/microcontrollers/embedded-hal.md:21
msgid ""
"There is work in progress on an `async` version of `embedded-hal`, but it "
"isn't stable yet."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:1
msgid "`probe-rs`, `cargo-embed`"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:3
msgid ""
"[probe-rs](https://probe.rs/) is a handy toolset for embedded debugging, "
"like OpenOCD but better integrated."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:6
msgid ""
"SWD (Serial Wire Debug) and JTAG via CMSIS-DAP, ST-Link and J-Link probes"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:7
msgid "GDB stub and Microsoft DAP (Debug Adapter Protocol) server"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:8
msgid "Cargo integration"
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:10
msgid ""
"`cargo-embed` is a cargo subcommand to build and flash binaries, log RTT "
"(Real Time Transfers) output and connect GDB. It's configured by an `Embed."
"toml` file in your project directory."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:16
msgid ""
"[CMSIS-DAP](https://arm-software.github.io/CMSIS_5/DAP/html/index.html) is "
"an Arm standard protocol over USB for an in-circuit debugger to access the "
"CoreSight Debug Access Port of various Arm Cortex processors. It's what the "
"on-board debugger on the BBC micro:bit uses."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:19
msgid ""
"ST-Link is a range of in-circuit debuggers from ST Microelectronics, J-Link "
"is a range from SEGGER."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:21
msgid ""
"The Debug Access Port is usually either a 5-pin JTAG interface or 2-pin "
"Serial Wire Debug."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:22
msgid ""
"probe-rs is a library which you can integrate into your own tools if you "
"want to."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:23
msgid ""
"The [Microsoft Debug Adapter Protocol](https://microsoft.github.io/debug-"
"adapter-protocol/) lets VSCode and other IDEs debug code running on any "
"supported microcontroller."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:25
msgid "cargo-embed is a binary built using the probe-rs library."
msgstr ""

#: src/bare-metal/microcontrollers/probe-rs.md:26
msgid ""
"RTT (Real Time Transfers) is a mechanism to transfer data between the debug "
"host and the target through a number of ringbuffers."
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md:3
#, fuzzy
msgid "_Embed.toml_:"
msgstr "Embed.toml:"

#: src/bare-metal/microcontrollers/debugging.md:13
msgid "In one terminal under `src/bare-metal/microcontrollers/examples/`:"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md:19
msgid "In another terminal in the same directory:"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md:21
msgid "On gLinux or Debian:"
msgstr ""

#: src/bare-metal/microcontrollers/debugging.md:34
msgid "In GDB, try running:"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:1
#: src/bare-metal/aps/other-projects.md:1
msgid "Other projects"
msgstr "Andre projekter"

#: src/bare-metal/microcontrollers/other-projects.md:3
msgid "[RTIC](https://rtic.rs/)"
msgstr "[RTIC](https://rtic.rs/)"

#: src/bare-metal/microcontrollers/other-projects.md:4
msgid "\"Real-Time Interrupt-driven Concurrency\""
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:5
msgid ""
"Shared resource management, message passing, task scheduling, timer queue"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:6
msgid "[Embassy](https://embassy.dev/)"
msgstr "[Embassy](https://embassy.dev/)"

#: src/bare-metal/microcontrollers/other-projects.md:7
msgid "`async` executors with priorities, timers, networking, USB"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:8
msgid "[TockOS](https://www.tockos.org/documentation/getting-started)"
msgstr "[TockOS](https://www.tockos.org/documentation/getting-started)"

#: src/bare-metal/microcontrollers/other-projects.md:9
msgid ""
"Security-focused RTOS with preemptive scheduling and Memory Protection Unit "
"support"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:10
msgid "[Hubris](https://hubris.oxide.computer/)"
msgstr "[Hubris](https://hubris.oxide.computer/)"

#: src/bare-metal/microcontrollers/other-projects.md:11
msgid ""
"Microkernel RTOS from Oxide Computer Company with memory protection, "
"unprivileged drivers, IPC"
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:12
msgid "[Bindings for FreeRTOS](https://github.com/lobaro/FreeRTOS-rust)"
msgstr "[Bindinger til FreeRTOS](https://github.com/lobaro/FreeRTOS-rust)"

#: src/bare-metal/microcontrollers/other-projects.md:13
msgid ""
"Some platforms have `std` implementations, e.g. [esp-idf](https://esp-rs."
"github.io/book/overview/using-the-standard-library.html)."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:18
msgid "RTIC can be considered either an RTOS or a concurrency framework."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:19
msgid "It doesn't include any HALs."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:20
msgid ""
"It uses the Cortex-M NVIC (Nested Virtual Interrupt Controller) for "
"scheduling rather than a proper kernel."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:22
msgid "Cortex-M only."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:23
msgid ""
"Google uses TockOS on the Haven microcontroller for Titan security keys."
msgstr ""

#: src/bare-metal/microcontrollers/other-projects.md:24
msgid ""
"FreeRTOS is mostly written in C, but there are Rust bindings for writing "
"applications."
msgstr ""

#: src/exercises/bare-metal/morning.md:3
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port."
msgstr ""

#: src/exercises/bare-metal/morning.md:7
#: src/exercises/concurrency/morning.md:12
msgid ""
"After looking at the exercises, you can look at the [solutions](solutions-"
"morning.md) provided."
msgstr ""

#: src/exercises/bare-metal/compass.md:3
msgid ""
"We will read the direction from an I2C compass, and log the readings to a "
"serial port. If you have time, try displaying it on the LEDs somehow too, or "
"use the buttons somehow."
msgstr ""

#: src/exercises/bare-metal/compass.md:6
msgid "Hints:"
msgstr ""

#: src/exercises/bare-metal/compass.md:8
msgid ""
"Check the documentation for the [`lsm303agr`](https://docs.rs/lsm303agr/"
"latest/lsm303agr/) and [`microbit-v2`](https://docs.rs/microbit-v2/latest/"
"microbit/) crates, as well as the [micro:bit hardware](https://tech.microbit."
"org/hardware/)."
msgstr ""

#: src/exercises/bare-metal/compass.md:11
msgid ""
"The LSM303AGR Inertial Measurement Unit is connected to the internal I2C bus."
msgstr ""

#: src/exercises/bare-metal/compass.md:12
msgid ""
"TWI is another name for I2C, so the I2C master peripheral is called TWIM."
msgstr ""

#: src/exercises/bare-metal/compass.md:13
msgid ""
"The LSM303AGR driver needs something implementing the `embedded_hal::"
"blocking::i2c::WriteRead` trait. The [`microbit::hal::Twim`](https://docs.rs/"
"microbit-v2/latest/microbit/hal/struct.Twim.html) struct implements this."
msgstr ""

#: src/exercises/bare-metal/compass.md:17
msgid ""
"You have a [`microbit::Board`](https://docs.rs/microbit-v2/latest/microbit/"
"struct.Board.html) struct with fields for the various pins and peripherals."
msgstr ""

#: src/exercises/bare-metal/compass.md:19
msgid ""
"You can also look at the [nRF52833 datasheet](https://infocenter.nordicsemi."
"com/pdf/nRF52833_PS_v1.5.pdf) if you want, but it shouldn't be necessary for "
"this exercise."
msgstr ""

#: src/exercises/bare-metal/compass.md:23
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `compass` directory for the following files."
msgstr ""

#: src/exercises/bare-metal/compass.md:26 src/exercises/bare-metal/rtc.md:19
msgid "_src/main.rs_:"
msgstr "_src/main.rs_:"

#: src/exercises/bare-metal/compass.md:44
#: src/exercises/bare-metal/solutions-morning.md:32
msgid "// Configure serial port.\n"
msgstr ""

#: src/exercises/bare-metal/compass.md:52
msgid ""
"// Set up the I2C controller and Inertial Measurement Unit.\n"
"    // TODO\n"
msgstr ""

#: src/exercises/bare-metal/compass.md:55
#: src/exercises/bare-metal/solutions-morning.md:56
msgid "\"Ready.\""
msgstr ""

#: src/exercises/bare-metal/compass.md:58
msgid ""
"// Read compass data and log it to the serial port.\n"
"        // TODO\n"
msgstr ""

#: src/exercises/bare-metal/compass.md:64 src/exercises/bare-metal/rtc.md:385
msgid "_Cargo.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md:85
msgid "_Embed.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md:100 src/exercises/bare-metal/rtc.md:985
msgid "_.cargo/config.toml_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/compass.md:112
msgid "See the serial output on Linux with:"
msgstr ""

#: src/exercises/bare-metal/compass.md:118
msgid ""
"Or on Mac OS something like (the device name may be slightly different):"
msgstr ""

#: src/exercises/bare-metal/compass.md:124
msgid "Use Ctrl+A Ctrl+Q to quit picocom."
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:1
msgid "Bare Metal Rust Morning Exercise"
msgstr "Bar metal formiddags√∏velser"

#: src/exercises/bare-metal/solutions-morning.md:5
msgid "([back to exercise](compass.md))"
msgstr "([tilbage til √∏velsen](compass.md))"

#: src/exercises/bare-metal/solutions-morning.md:40
msgid "// Set up the I2C controller and Inertial Measurement Unit.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:41
msgid "\"Setting up IMU...\""
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:49
msgid "// Set up display and timer.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:59
msgid "// Read compass data and log it to the serial port.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-morning.md:67
msgid "\"{},{},{}\\t{},{},{}\""
msgstr "\"{},{},{}\\t{},{},{}\""

#: src/exercises/bare-metal/solutions-morning.md:103
msgid ""
"// If button A is pressed, switch to the next mode and briefly blink all "
"LEDs on.\n"
msgstr ""

#: src/bare-metal/aps.md:1
msgid "Application processors"
msgstr ""

#: src/bare-metal/aps.md:3
msgid ""
"So far we've talked about microcontrollers, such as the Arm Cortex-M series. "
"Now let's try writing something for Cortex-A. For simplicity we'll just work "
"with QEMU's aarch64 ['virt'](https://qemu-project.gitlab.io/qemu/system/arm/"
"virt.html) board."
msgstr ""

#: src/bare-metal/aps.md:9
msgid ""
"Broadly speaking, microcontrollers don't have an MMU or multiple levels of "
"privilege (exception levels on Arm CPUs, rings on x86), while application "
"processors do."
msgstr ""

#: src/bare-metal/aps.md:11
msgid ""
"QEMU supports emulating various different machines or board models for each "
"architecture. The 'virt' board doesn't correspond to any particular real "
"hardware, but is designed purely for virtual machines."
msgstr ""

#: src/bare-metal/aps/entry-point.md:3
msgid ""
"Before we can start running Rust code, we need to do some initialisation."
msgstr ""

#: src/bare-metal/aps/entry-point.md:5
msgid ""
"```armasm\n"
".section .init.entry, \"ax\"\n"
".global entry\n"
"entry:\n"
"    /*\n"
"     * Load and apply the memory management configuration, ready to enable "
"MMU and\n"
"     * caches.\n"
"     */\n"
"    adrp x30, idmap\n"
"    msr ttbr0_el1, x30\n"
"\n"
"    mov_i x30, .Lmairval\n"
"    msr mair_el1, x30\n"
"\n"
"    mov_i x30, .Ltcrval\n"
"    /* Copy the supported PA range into TCR_EL1.IPS. */\n"
"    mrs x29, id_aa64mmfr0_el1\n"
"    bfi x30, x29, #32, #4\n"
"\n"
"    msr tcr_el1, x30\n"
"\n"
"    mov_i x30, .Lsctlrval\n"
"\n"
"    /*\n"
"     * Ensure everything before this point has completed, then invalidate "
"any\n"
"     * potentially stale local TLB entries before they start being used.\n"
"     */\n"
"    isb\n"
"    tlbi vmalle1\n"
"    ic iallu\n"
"    dsb nsh\n"
"    isb\n"
"\n"
"    /*\n"
"     * Configure sctlr_el1 to enable MMU and cache and don't proceed until "
"this\n"
"     * has completed.\n"
"     */\n"
"    msr sctlr_el1, x30\n"
"    isb\n"
"\n"
"    /* Disable trapping floating point access in EL1. */\n"
"    mrs x30, cpacr_el1\n"
"    orr x30, x30, #(0x3 << 20)\n"
"    msr cpacr_el1, x30\n"
"    isb\n"
"\n"
"    /* Zero out the bss section. */\n"
"    adr_l x29, bss_begin\n"
"    adr_l x30, bss_end\n"
"0:  cmp x29, x30\n"
"    b.hs 1f\n"
"    stp xzr, xzr, [x29], #16\n"
"    b 0b\n"
"\n"
"1:  /* Prepare the stack. */\n"
"    adr_l x30, boot_stack_end\n"
"    mov sp, x30\n"
"\n"
"    /* Set up exception vector. */\n"
"    adr x30, vector_table_el1\n"
"    msr vbar_el1, x30\n"
"\n"
"    /* Call into Rust code. */\n"
"    bl main\n"
"\n"
"    /* Loop forever waiting for interrupts. */\n"
"2:  wfi\n"
"    b 2b\n"
"```"
msgstr ""

#: src/bare-metal/aps/entry-point.md:77
msgid ""
"This is the same as it would be for C: initialising the processor state, "
"zeroing the BSS, and setting up the stack pointer."
msgstr ""

#: src/bare-metal/aps/entry-point.md:79
msgid ""
"The BSS (block starting symbol, for historical reasons) is the part of the "
"object file which containing statically allocated variables which are "
"initialised to zero. They are omitted from the image, to avoid wasting space "
"on zeroes. The compiler assumes that the loader will take care of zeroing "
"them."
msgstr ""

#: src/bare-metal/aps/entry-point.md:83
msgid ""
"The BSS may already be zeroed, depending on how memory is initialised and "
"the image is loaded, but we zero it to be sure."
msgstr ""

#: src/bare-metal/aps/entry-point.md:85
msgid ""
"We need to enable the MMU and cache before reading or writing any memory. If "
"we don't:"
msgstr ""

#: src/bare-metal/aps/entry-point.md:86
msgid ""
"Unaligned accesses will fault. We build the Rust code for the `aarch64-"
"unknown-none` target which sets `+strict-align` to prevent the compiler "
"generating unaligned accesses, so it should be fine in this case, but this "
"is not necessarily the case in general."
msgstr ""

#: src/bare-metal/aps/entry-point.md:89
msgid ""
"If it were running in a VM, this can lead to cache coherency issues. The "
"problem is that the VM is accessing memory directly with the cache disabled, "
"while the host has cacheable aliases to the same memory. Even if the host "
"doesn't explicitly access the memory, speculative accesses can lead to cache "
"fills, and then changes from one or the other will get lost when the cache "
"is cleaned or the VM enables the cache. (Cache is keyed by physical address, "
"not VA or IPA.)"
msgstr ""

#: src/bare-metal/aps/entry-point.md:94
msgid ""
"For simplicity, we just use a hardcoded pagetable (see `idmap.S`) which "
"identity maps the first 1 GiB of address space for devices, the next 1 GiB "
"for DRAM, and another 1 GiB higher up for more devices. This matches the "
"memory layout that QEMU uses."
msgstr ""

#: src/bare-metal/aps/entry-point.md:97
msgid ""
"We also set up the exception vector (`vbar_el1`), which we'll see more about "
"later."
msgstr ""

#: src/bare-metal/aps/entry-point.md:98
msgid ""
"All examples this afternoon assume we will be running at exception level 1 "
"(EL1). If you need to run at a different exception level you'll need to "
"modify `entry.S` accordingly."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:1
msgid "Inline assembly"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:3
msgid ""
"Sometimes we need to use assembly to do things that aren't possible with "
"Rust code. For example, to make an HVC (hypervisor call) to tell the "
"firmware to power off the system:"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:19
msgid ""
"// Safe because this only uses the declared registers and doesn't do\n"
"    // anything with memory.\n"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:22
msgid "\"hvc #0\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:23
msgid "\"w0\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:24
msgid "\"w1\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:25
msgid "\"w2\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:26
msgid "\"w3\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:27
msgid "\"w4\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:28
msgid "\"w5\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:29
msgid "\"w6\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:30
msgid "\"w7\""
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:39
msgid ""
"(If you actually want to do this, use the [`smccc`](https://crates.io/crates/"
"smccc) crate which has wrappers for all these functions.)"
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:43
msgid ""
"PSCI is the Arm Power State Coordination Interface, a standard set of "
"functions to manage system and CPU power states, among other things. It is "
"implemented by EL3 firmware and hypervisors on many systems."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:46
msgid ""
"The `0 => _` syntax means initialise the register to 0 before running the "
"inline assembly code, and ignore its contents afterwards. We need to use "
"`inout` rather than `in` because the call could potentially clobber the "
"contents of the registers."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:49
msgid ""
"This `main` function needs to be `#[no_mangle]` and `extern \"C\"` because "
"it is called from our entry point in `entry.S`."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:51
msgid ""
"`_x0`‚Äì`_x3` are the values of registers `x0`‚Äì`x3`, which are conventionally "
"used by the bootloader to pass things like a pointer to the device tree. "
"According to the standard aarch64 calling convention (which is what `extern "
"\"C\"` specifies to use), registers `x0`‚Äì`x7` are used for the first 8 "
"arguments passed to a function, so `entry.S` doesn't need to do anything "
"special except make sure it doesn't change these registers."
msgstr ""

#: src/bare-metal/aps/inline-assembly.md:56
msgid ""
"Run the example in QEMU with `make qemu_psci` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/mmio.md:1
msgid "Volatile memory access for MMIO"
msgstr ""

#: src/bare-metal/aps/mmio.md:3
msgid "Use `pointer::read_volatile` and `pointer::write_volatile`."
msgstr ""

#: src/bare-metal/aps/mmio.md:4
msgid "Never hold a reference."
msgstr ""

#: src/bare-metal/aps/mmio.md:5
msgid ""
"`addr_of!` lets you get fields of structs without creating an intermediate "
"reference."
msgstr ""

#: src/bare-metal/aps/mmio.md:9
msgid ""
"Volatile access: read or write operations may have side-effects, so prevent "
"the compiler or hardware from reordering, duplicating or eliding them."
msgstr ""

#: src/bare-metal/aps/mmio.md:11
msgid ""
"Usually if you write and then read, e.g. via a mutable reference, the "
"compiler may assume that the value read is the same as the value just "
"written, and not bother actually reading memory."
msgstr ""

#: src/bare-metal/aps/mmio.md:13
msgid ""
"Some existing crates for volatile access to hardware do hold references, but "
"this is unsound. Whenever a reference exist, the compiler may choose to "
"dereference it."
msgstr ""

#: src/bare-metal/aps/mmio.md:15
msgid ""
"Use the `addr_of!` macro to get struct field pointers from a pointer to the "
"struct."
msgstr ""

#: src/bare-metal/aps/uart.md:1
msgid "Let's write a UART driver"
msgstr ""

#: src/bare-metal/aps/uart.md:3
msgid ""
"The QEMU 'virt' machine has a [PL011](https://developer.arm.com/"
"documentation/ddi0183/g) UART, so let's write a driver for that."
msgstr ""

#: src/bare-metal/aps/uart.md:9
msgid "/// Minimal driver for a PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/uart.md:17 src/bare-metal/aps/better-uart/driver.md:13
msgid ""
"/// Constructs a new instance of the UART driver for a PL011 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the 8 MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""

#: src/bare-metal/aps/uart.md:29 src/bare-metal/aps/better-uart/driver.md:27
#: src/exercises/bare-metal/rtc.md:336
msgid "/// Writes a single byte to the UART.\n"
msgstr "/// Writes a single byte to the UART.\n"

#: src/bare-metal/aps/uart.md:31 src/bare-metal/aps/better-uart/driver.md:29
#: src/exercises/bare-metal/rtc.md:338
msgid "// Wait until there is room in the TX buffer.\n"
msgstr "// Wait until there is room in the TX buffer.\n"

#: src/bare-metal/aps/uart.md:34 src/bare-metal/aps/uart.md:46
msgid ""
"// Safe because we know that the base address points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
msgstr ""

#: src/bare-metal/aps/uart.md:37 src/bare-metal/aps/better-uart/driver.md:35
#: src/exercises/bare-metal/rtc.md:344
msgid "// Write to the TX buffer.\n"
msgstr "// Write to the TX buffer.\n"

#: src/bare-metal/aps/uart.md:41 src/bare-metal/aps/better-uart/driver.md:39
#: src/exercises/bare-metal/rtc.md:348
msgid "// Wait until the UART is no longer busy.\n"
msgstr "// Wait until the UART is no longer busy.\n"

#: src/bare-metal/aps/uart.md:55
msgid ""
"Note that `Uart::new` is unsafe while the other methods are safe. This is "
"because as long as the caller of `Uart::new` guarantees that its safety "
"requirements are met (i.e. that there is only ever one instance of the "
"driver for a given UART, and nothing else aliasing its address space), then "
"it is always safe to call `write_byte` later because we can assume the "
"necessary preconditions."
msgstr ""

#: src/bare-metal/aps/uart.md:60
msgid ""
"We could have done it the other way around (making `new` safe but "
"`write_byte` unsafe), but that would be much less convenient to use as every "
"place that calls `write_byte` would need to reason about the safety"
msgstr ""

#: src/bare-metal/aps/uart.md:63
msgid ""
"This is a common pattern for writing safe wrappers of unsafe code: moving "
"the burden of proof for soundness from a large number of places to a smaller "
"number of places."
msgstr ""

#: src/bare-metal/aps/uart/traits.md:1
msgid "More traits"
msgstr ""

#: src/bare-metal/aps/uart/traits.md:3
msgid ""
"We derived the `Debug` trait. It would be useful to implement a few more "
"traits too."
msgstr ""

#: src/bare-metal/aps/uart/traits.md:16 src/exercises/bare-metal/rtc.md:379
#: src/exercises/bare-metal/solutions-afternoon.md:231
msgid ""
"// Safe because it just contains a pointer to device memory, which can be\n"
"// accessed from any context.\n"
msgstr ""
"// Safe because it just contains a pointer to device memory, which can be\n"
"// accessed from any context.\n"

#: src/bare-metal/aps/uart/traits.md:24
msgid ""
"Implementing `Write` lets us use the `write!` and `writeln!` macros with our "
"`Uart` type."
msgstr ""

#: src/bare-metal/aps/uart/traits.md:25
msgid ""
"Run the example in QEMU with `make qemu_minimal` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/better-uart.md:1
msgid "A better UART driver"
msgstr ""

#: src/bare-metal/aps/better-uart.md:3
msgid ""
"The PL011 actually has [a bunch more registers](https://developer.arm.com/"
"documentation/ddi0183/g/programmers-model/summary-of-registers), and adding "
"offsets to construct pointers to access them is error-prone and hard to "
"read. Plus, some of them are bit fields which would be nice to access in a "
"structured way."
msgstr ""

#: src/bare-metal/aps/better-uart.md:7
msgid "Offset"
msgstr ""

#: src/bare-metal/aps/better-uart.md:7
msgid "Register name"
msgstr ""

#: src/bare-metal/aps/better-uart.md:7
msgid "Width"
msgstr ""

#: src/bare-metal/aps/better-uart.md:9
msgid "0x00"
msgstr ""

#: src/bare-metal/aps/better-uart.md:9
msgid "DR"
msgstr ""

#: src/bare-metal/aps/better-uart.md:9
msgid "12"
msgstr ""

#: src/bare-metal/aps/better-uart.md:10
msgid "0x04"
msgstr ""

#: src/bare-metal/aps/better-uart.md:10
msgid "RSR"
msgstr ""

#: src/bare-metal/aps/better-uart.md:11
msgid "0x18"
msgstr ""

#: src/bare-metal/aps/better-uart.md:11
msgid "FR"
msgstr ""

#: src/bare-metal/aps/better-uart.md:11
msgid "9"
msgstr ""

#: src/bare-metal/aps/better-uart.md:12
msgid "0x20"
msgstr ""

#: src/bare-metal/aps/better-uart.md:12
msgid "ILPR"
msgstr ""

#: src/bare-metal/aps/better-uart.md:13
msgid "0x24"
msgstr ""

#: src/bare-metal/aps/better-uart.md:13
msgid "IBRD"
msgstr ""

#: src/bare-metal/aps/better-uart.md:13 src/bare-metal/aps/better-uart.md:16
msgid "16"
msgstr ""

#: src/bare-metal/aps/better-uart.md:14
msgid "0x28"
msgstr ""

#: src/bare-metal/aps/better-uart.md:14
msgid "FBRD"
msgstr ""

#: src/bare-metal/aps/better-uart.md:15
msgid "0x2c"
msgstr ""

#: src/bare-metal/aps/better-uart.md:15
msgid "LCR_H"
msgstr ""

#: src/bare-metal/aps/better-uart.md:16
msgid "0x30"
msgstr ""

#: src/bare-metal/aps/better-uart.md:16
msgid "CR"
msgstr ""

#: src/bare-metal/aps/better-uart.md:17
msgid "0x34"
msgstr ""

#: src/bare-metal/aps/better-uart.md:17
msgid "IFLS"
msgstr ""

#: src/bare-metal/aps/better-uart.md:18
msgid "0x38"
msgstr ""

#: src/bare-metal/aps/better-uart.md:18
msgid "IMSC"
msgstr ""

#: src/bare-metal/aps/better-uart.md:18 src/bare-metal/aps/better-uart.md:19
#: src/bare-metal/aps/better-uart.md:20 src/bare-metal/aps/better-uart.md:21
msgid "11"
msgstr ""

#: src/bare-metal/aps/better-uart.md:19
msgid "0x3c"
msgstr ""

#: src/bare-metal/aps/better-uart.md:19
msgid "RIS"
msgstr ""

#: src/bare-metal/aps/better-uart.md:20
msgid "0x40"
msgstr ""

#: src/bare-metal/aps/better-uart.md:20
msgid "MIS"
msgstr ""

#: src/bare-metal/aps/better-uart.md:21
msgid "0x44"
msgstr ""

#: src/bare-metal/aps/better-uart.md:21
msgid "ICR"
msgstr ""

#: src/bare-metal/aps/better-uart.md:22
msgid "0x48"
msgstr ""

#: src/bare-metal/aps/better-uart.md:22
msgid "DMACR"
msgstr ""

#: src/bare-metal/aps/better-uart.md:26
msgid "There are also some ID registers which have been omitted for brevity."
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:3
msgid ""
"The [`bitflags`](https://crates.io/crates/bitflags) crate is useful for "
"working with bitflags."
msgstr ""

#: src/bare-metal/aps/better-uart/bitflags.md:9
#: src/exercises/bare-metal/rtc.md:238
msgid "/// Flags from the UART flag register.\n"
msgstr "/// Flags from the UART flag register.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:13
#: src/exercises/bare-metal/rtc.md:242
msgid "/// Clear to send.\n"
msgstr "/// Clear to send.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:15
#: src/exercises/bare-metal/rtc.md:244
msgid "/// Data set ready.\n"
msgstr "/// Data set ready.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:17
#: src/exercises/bare-metal/rtc.md:246
msgid "/// Data carrier detect.\n"
msgstr "/// Data carrier detect.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:19
#: src/exercises/bare-metal/rtc.md:248
msgid "/// UART busy transmitting data.\n"
msgstr "/// UART busy transmitting data.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:21
#: src/exercises/bare-metal/rtc.md:250
msgid "/// Receive FIFO is empty.\n"
msgstr "/// Receive FIFO is empty.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:23
#: src/exercises/bare-metal/rtc.md:252
msgid "/// Transmit FIFO is full.\n"
msgstr "/// Transmit FIFO is full.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:25
#: src/exercises/bare-metal/rtc.md:254
msgid "/// Receive FIFO is full.\n"
msgstr "/// Receive FIFO is full.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:27
#: src/exercises/bare-metal/rtc.md:256
msgid "/// Transmit FIFO is empty.\n"
msgstr "/// Transmit FIFO is empty.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:29
#: src/exercises/bare-metal/rtc.md:258
msgid "/// Ring indicator.\n"
msgstr "/// Ring indicator.\n"

#: src/bare-metal/aps/better-uart/bitflags.md:37
msgid ""
"The `bitflags!` macro creates a newtype something like `Flags(u16)`, along "
"with a bunch of method implementations to get and set flags."
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md:1
msgid "Multiple registers"
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md:3
msgid ""
"We can use a struct to represent the memory layout of the UART's registers."
msgstr ""

#: src/bare-metal/aps/better-uart/registers.md:41
msgid ""
"[`#[repr(C)]`](https://doc.rust-lang.org/reference/type-layout.html#the-c-"
"representation) tells the compiler to lay the struct fields out in order, "
"following the same rules as C. This is necessary for our struct to have a "
"predictable layout, as default Rust representation allows the compiler to "
"(among other things) reorder fields however it sees fit."
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:3
msgid "Now let's use the new `Registers` struct in our driver."
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:6
msgid "/// Driver for a PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/driver.md:32
#: src/bare-metal/aps/better-uart/driver.md:55
#: src/exercises/bare-metal/rtc.md:341 src/exercises/bare-metal/rtc.md:364
msgid ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"
msgstr ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL011 device which is appropriately mapped.\n"

#: src/bare-metal/aps/better-uart/driver.md:43
#: src/exercises/bare-metal/rtc.md:352
msgid ""
"/// Reads and returns a pending byte, or `None` if nothing has been "
"received.\n"
msgstr ""
"/// Reads and returns a pending byte, or `None` if nothing has been "
"received.\n"

#: src/bare-metal/aps/better-uart/driver.md:49
#: src/exercises/bare-metal/rtc.md:358
msgid "// TODO: Check for error conditions in bits 8-11.\n"
msgstr "// TODO: Check for error conditions in bits 8-11.\n"

#: src/bare-metal/aps/better-uart/driver.md:64
msgid ""
"Note the use of `addr_of!` / `addr_of_mut!` to get pointers to individual "
"fields without creating an intermediate reference, which would be unsound."
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:1
#: src/bare-metal/aps/logging/using.md:1
msgid "Using it"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:3
msgid ""
"Let's write a small program using our driver to write to the serial console, "
"and echo incoming bytes."
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:19
#: src/bare-metal/aps/logging/using.md:18 src/exercises/bare-metal/rtc.md:41
#: src/exercises/bare-metal/solutions-afternoon.md:33
msgid "/// Base address of the primary PL011 UART.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:25
#: src/bare-metal/aps/logging/using.md:24 src/exercises/bare-metal/rtc.md:47
#: src/exercises/bare-metal/solutions-afternoon.md:44
msgid ""
"// Safe because `PL011_BASE_ADDRESS` is the base address of a PL011 device,\n"
"    // and nothing else accesses that address range.\n"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:29
#: src/bare-metal/aps/logging/using.md:29
msgid "\"main({x0:#x}, {x1:#x}, {x2:#x}, {x3:#x})\""
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:35
msgid "b'\\r'"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:36
#: src/async/pitfalls/cancellation.md:27
msgid "b'\\n'"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:38
msgid "b'q'"
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:44
msgid "\"Bye!\""
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:51
msgid ""
"As in the [inline assembly](../inline-assembly.md) example, this `main` "
"function is called from our entry point code in `entry.S`. See the speaker "
"notes there for details."
msgstr ""

#: src/bare-metal/aps/better-uart/using.md:53
msgid ""
"Run the example in QEMU with `make qemu` under `src/bare-metal/aps/examples`."
msgstr ""

#: src/bare-metal/aps/logging.md:3
msgid ""
"It would be nice to be able to use the logging macros from the [`log`]"
"(https://crates.io/crates/log) crate. We can do this by implementing the "
"`Log` trait."
msgstr ""

#: src/bare-metal/aps/logging.md:28 src/exercises/bare-metal/rtc.md:190
msgid "\"[{}] {}\""
msgstr "\"[{}] {}\""

#: src/bare-metal/aps/logging.md:37 src/exercises/bare-metal/rtc.md:199
msgid "/// Initialises UART logger.\n"
msgstr "/// Initialises UART logger.\n"

#: src/bare-metal/aps/logging.md:50
msgid ""
"The unwrap in `log` is safe because we initialise `LOGGER` before calling "
"`set_logger`."
msgstr ""

#: src/bare-metal/aps/logging/using.md:3
msgid "We need to initialise the logger before we use it."
msgstr ""

#: src/bare-metal/aps/logging/using.md:38 src/exercises/bare-metal/rtc.md:69
#: src/exercises/bare-metal/solutions-afternoon.md:121
msgid "\"{info}\""
msgstr ""

#: src/bare-metal/aps/logging/using.md:46
msgid "Note that our panic handler can now log details of panics."
msgstr ""

#: src/bare-metal/aps/logging/using.md:47
msgid ""
"Run the example in QEMU with `make qemu_logger` under `src/bare-metal/aps/"
"examples`."
msgstr ""

#: src/bare-metal/aps/exceptions.md:3
msgid ""
"AArch64 defines an exception vector table with 16 entries, for 4 types of "
"exceptions (synchronous, IRQ, FIQ, SError) from 4 states (current EL with "
"SP0, current EL with SPx, lower EL using AArch64, lower EL using AArch32). "
"We implement this in assembly to save volatile registers to the stack before "
"calling into Rust code:"
msgstr ""

#: src/bare-metal/aps/exceptions.md:64
msgid "EL is exception level; all our examples this afternoon run in EL1."
msgstr ""

#: src/bare-metal/aps/exceptions.md:65
msgid ""
"For simplicity we aren't distinguishing between SP0 and SPx for the current "
"EL exceptions, or between AArch32 and AArch64 for the lower EL exceptions."
msgstr ""

#: src/bare-metal/aps/exceptions.md:67
msgid ""
"For this example we just log the exception and power down, as we don't "
"expect any of them to actually happen."
msgstr ""

#: src/bare-metal/aps/exceptions.md:69
msgid ""
"We can think of exception handlers and our main execution context more or "
"less like different threads. [`Send` and `Sync`](../../concurrency/send-sync."
"md) will control what we can share between them, just like with threads. For "
"example, if we want to share some value between exception handlers and the "
"rest of the program, and it's `Send` but not `Sync`, then we'll need to wrap "
"it in something like a `Mutex` and put it in a static."
msgstr ""

#: src/bare-metal/aps/other-projects.md:3
msgid "[oreboot](https://github.com/oreboot/oreboot)"
msgstr ""

#: src/bare-metal/aps/other-projects.md:4
msgid "\"coreboot without the C\""
msgstr ""

#: src/bare-metal/aps/other-projects.md:5
msgid "Supports x86, aarch64 and RISC-V."
msgstr ""

#: src/bare-metal/aps/other-projects.md:6
msgid "Relies on LinuxBoot rather than having many drivers itself."
msgstr ""

#: src/bare-metal/aps/other-projects.md:7
msgid ""
"[Rust RaspberryPi OS tutorial](https://github.com/rust-embedded/rust-"
"raspberrypi-OS-tutorials)"
msgstr ""

#: src/bare-metal/aps/other-projects.md:8
msgid ""
"Initialisation, UART driver, simple bootloader, JTAG, exception levels, "
"exception handling, page tables"
msgstr ""

#: src/bare-metal/aps/other-projects.md:10
msgid ""
"Some dodginess around cache maintenance and initialisation in Rust, not "
"necessarily a good example to copy for production code."
msgstr ""

#: src/bare-metal/aps/other-projects.md:12
msgid "[`cargo-call-stack`](https://crates.io/crates/cargo-call-stack)"
msgstr ""

#: src/bare-metal/aps/other-projects.md:13
msgid "Static analysis to determine maximum stack usage."
msgstr ""

#: src/bare-metal/aps/other-projects.md:17
msgid ""
"The RaspberryPi OS tutorial runs Rust code before the MMU and caches are "
"enabled. This will read and write memory (e.g. the stack). However:"
msgstr ""

#: src/bare-metal/aps/other-projects.md:19
msgid ""
"Without the MMU and cache, unaligned accesses will fault. It builds with "
"`aarch64-unknown-none` which sets `+strict-align` to prevent the compiler "
"generating unaligned accesses so it should be alright, but this is not "
"necessarily the case in general."
msgstr ""

#: src/bare-metal/aps/other-projects.md:22
msgid ""
"If it were running in a VM, this can lead to cache coherency issues. The "
"problem is that the VM is accessing memory directly with the cache disabled, "
"while the host has cacheable aliases to the same memory. Even if the host "
"doesn't explicitly access the memory, speculative accesses can lead to cache "
"fills, and then changes from one or the other will get lost. Again this is "
"alright in this particular case (running directly on the hardware with no "
"hypervisor), but isn't a good pattern in general."
msgstr ""

#: src/bare-metal/useful-crates.md:1
msgid "Useful crates"
msgstr ""

#: src/bare-metal/useful-crates.md:3
msgid ""
"We'll go over a few crates which solve some common problems in bare-metal "
"programming."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md:1
msgid "`zerocopy`"
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md:3
msgid ""
"The [`zerocopy`](https://docs.rs/zerocopy/) crate (from Fuchsia) provides "
"traits and macros for safely converting between byte sequences and other "
"types."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md:40
msgid ""
"This is not suitable for MMIO (as it doesn't use volatile reads and writes), "
"but can be useful for working with structures shared with hardware e.g. by "
"DMA, or sent over some external interface."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md:45
msgid ""
"`FromBytes` can be implemented for types for which any byte pattern is "
"valid, and so can safely be converted from an untrusted sequence of bytes."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md:47
msgid ""
"Attempting to derive `FromBytes` for these types would fail, because "
"`RequestType` doesn't use all possible u32 values as discriminants, so not "
"all byte patterns are valid."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md:49
msgid ""
"`zerocopy::byteorder` has types for byte-order aware numeric primitives."
msgstr ""

#: src/bare-metal/useful-crates/zerocopy.md:50
msgid ""
"Run the example with `cargo run` under `src/bare-metal/useful-crates/"
"zerocopy-example/`. (It won't run in the Playground because of the crate "
"dependency.)"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:1
msgid "`aarch64-paging`"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:3
msgid ""
"The [`aarch64-paging`](https://crates.io/crates/aarch64-paging) crate lets "
"you create page tables according to the AArch64 Virtual Memory System "
"Architecture."
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:14
msgid "// Create a new page table with identity mapping.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:16
msgid "// Map a 2 MiB region of memory as read-only.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:21
msgid "// Set `TTBR0_EL1` to activate the page table.\n"
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:28
msgid ""
"For now it only supports EL1, but support for other exception levels should "
"be straightforward to add."
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:30
msgid ""
"This is used in Android for the [Protected VM Firmware](https://cs.android."
"com/android/platform/superproject/+/master:packages/modules/Virtualization/"
"pvmfw/)."
msgstr ""

#: src/bare-metal/useful-crates/aarch64-paging.md:31
msgid ""
"There's no easy way to run this example, as it needs to run on real hardware "
"or under QEMU."
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md:1
msgid "`buddy_system_allocator`"
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md:3
msgid ""
"[`buddy_system_allocator`](https://crates.io/crates/buddy_system_allocator) "
"is a third-party crate implementing a basic buddy system allocator. It can "
"be used both for [`LockedHeap`](https://docs.rs/buddy_system_allocator/0.9.0/"
"buddy_system_allocator/struct.LockedHeap.html) implementing [`GlobalAlloc`]"
"(https://doc.rust-lang.org/core/alloc/trait.GlobalAlloc.html) so you can use "
"the standard `alloc` crate (as we saw [before](../alloc.md)), or for "
"allocating other address space. For example, we might want to allocate MMIO "
"space for PCI BARs:"
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md:26
msgid "PCI BARs always have alignment equal to their size."
msgstr ""

#: src/bare-metal/useful-crates/buddy_system_allocator.md:27
msgid ""
"Run the example with `cargo run` under `src/bare-metal/useful-crates/"
"allocator-example/`. (It won't run in the Playground because of the crate "
"dependency.)"
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md:1
msgid "`tinyvec`"
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md:3
msgid ""
"Sometimes you want something which can be resized like a `Vec`, but without "
"heap allocation. [`tinyvec`](https://crates.io/crates/tinyvec) provides "
"this: a vector backed by an array or slice, which could be statically "
"allocated or on the stack, which keeps track of how many elements are used "
"and panics if you try to use more than are allocated."
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md:23
msgid ""
"`tinyvec` requires that the element type implement `Default` for "
"initialisation."
msgstr ""

#: src/bare-metal/useful-crates/tinyvec.md:24
msgid ""
"The Rust Playground includes `tinyvec`, so this example will run fine inline."
msgstr ""

#: src/bare-metal/useful-crates/spin.md:1
msgid "`spin`"
msgstr ""

#: src/bare-metal/useful-crates/spin.md:3
msgid ""
"`std::sync::Mutex` and the other synchronisation primitives from `std::sync` "
"are not available in `core` or `alloc`. How can we manage synchronisation or "
"interior mutability, such as for sharing state between different CPUs?"
msgstr ""

#: src/bare-metal/useful-crates/spin.md:7
msgid ""
"The [`spin`](https://crates.io/crates/spin) crate provides spinlock-based "
"equivalents of many of these primitives."
msgstr ""

#: src/bare-metal/useful-crates/spin.md:23
msgid "Be careful to avoid deadlock if you take locks in interrupt handlers."
msgstr ""

#: src/bare-metal/useful-crates/spin.md:24
msgid ""
"`spin` also has a ticket lock mutex implementation; equivalents of `RwLock`, "
"`Barrier` and `Once` from `std::sync`;  and `Lazy` for lazy initialisation."
msgstr ""

#: src/bare-metal/useful-crates/spin.md:26
msgid ""
"The [`once_cell`](https://crates.io/crates/once_cell) crate also has some "
"useful types for late initialisation with a slightly different approach to "
"`spin::once::Once`."
msgstr ""

#: src/bare-metal/useful-crates/spin.md:28
msgid ""
"The Rust Playground includes `spin`, so this example will run fine inline."
msgstr ""

#: src/bare-metal/android.md:3
msgid ""
"To build a bare-metal Rust binary in AOSP, you need to use a "
"`rust_ffi_static` Soong rule to build your Rust code, then a `cc_binary` "
"with a linker script to produce the binary itself, and then a `raw_binary` "
"to convert the ELF to a raw binary ready to be run."
msgstr ""

#: src/bare-metal/android/vmbase.md:3
msgid ""
"For VMs running under crosvm on aarch64, the [vmbase](https://android."
"googlesource.com/platform/packages/modules/Virtualization/+/refs/heads/"
"master/vmbase/) library provides a linker script and useful defaults for the "
"build rules, along with an entry point, UART console logging and more."
msgstr ""

#: src/bare-metal/android/vmbase.md:21
msgid ""
"The `main!` macro marks your main function, to be called from the `vmbase` "
"entry point."
msgstr ""

#: src/bare-metal/android/vmbase.md:22
msgid ""
"The `vmbase` entry point handles console initialisation, and issues a "
"PSCI_SYSTEM_OFF to shutdown the VM if your main function returns."
msgstr ""

#: src/exercises/bare-metal/afternoon.md:3
msgid "We will write a driver for the PL031 real-time clock device."
msgstr ""

#: src/exercises/bare-metal/afternoon.md:7
#: src/exercises/concurrency/afternoon.md:13
msgid ""
"After looking at the exercises, you can look at the [solutions](solutions-"
"afternoon.md) provided."
msgstr ""

#: src/exercises/bare-metal/rtc.md:1
#: src/exercises/bare-metal/solutions-afternoon.md:3
msgid "RTC driver"
msgstr ""

#: src/exercises/bare-metal/rtc.md:3
msgid ""
"The QEMU aarch64 virt machine has a [PL031](https://developer.arm.com/"
"documentation/ddi0224/c) real-time clock at 0x9010000. For this exercise, "
"you should write a driver for it."
msgstr ""

#: src/exercises/bare-metal/rtc.md:6
msgid ""
"Use it to print the current time to the serial console. You can use the "
"[`chrono`](https://crates.io/crates/chrono) crate for date/time formatting."
msgstr ""

#: src/exercises/bare-metal/rtc.md:8
msgid ""
"Use the match register and raw interrupt status to busy-wait until a given "
"time, e.g. 3 seconds in the future. (Call [`core::hint::spin_loop`](https://"
"doc.rust-lang.org/core/hint/fn.spin_loop.html) inside the loop.)"
msgstr ""

#: src/exercises/bare-metal/rtc.md:10
msgid ""
"_Extension if you have time:_ Enable and handle the interrupt generated by "
"the RTC match. You can use the driver provided in the [`arm-gic`](https://"
"docs.rs/arm-gic/) crate to configure the Arm Generic Interrupt Controller."
msgstr ""

#: src/exercises/bare-metal/rtc.md:12
msgid "Use the RTC interrupt, which is wired to the GIC as `IntId::spi(2)`."
msgstr ""

#: src/exercises/bare-metal/rtc.md:13
msgid ""
"Once the interrupt is enabled, you can put the core to sleep via `arm_gic::"
"wfi()`, which will cause the core to sleep until it receives an interrupt."
msgstr ""

#: src/exercises/bare-metal/rtc.md:16
msgid ""
"Download the [exercise template](../../comprehensive-rust-exercises.zip) and "
"look in the `rtc` directory for the following files."
msgstr ""

#: src/exercises/bare-metal/rtc.md:37
#: src/exercises/bare-metal/solutions-afternoon.md:29
msgid "/// Base addresses of the GICv3.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:52
#: src/exercises/bare-metal/solutions-afternoon.md:49
msgid "\"main({:#x}, {:#x}, {:#x}, {:#x})\""
msgstr ""

#: src/exercises/bare-metal/rtc.md:54
#: src/exercises/bare-metal/solutions-afternoon.md:51
msgid ""
"// Safe because `GICD_BASE_ADDRESS` and `GICR_BASE_ADDRESS` are the base\n"
"    // addresses of a GICv3 distributor and redistributor respectively, and\n"
"    // nothing else accesses those address ranges.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:60
msgid "// TODO: Create instance of RTC driver and print current time.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:62
msgid "// TODO: Wait for 3 seconds.\n"
msgstr ""

#: src/exercises/bare-metal/rtc.md:75
msgid ""
"_src/exceptions.rs_ (you should only need to change this for the 3rd part of "
"the exercise):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:80 src/exercises/bare-metal/rtc.md:154
#: src/exercises/bare-metal/rtc.md:215 src/exercises/bare-metal/rtc.md:415
msgid ""
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"
msgstr ""
"// Copyright 2023 Google LLC\n"
"//\n"
"// Licensed under the Apache License, Version 2.0 (the \"License\");\n"
"// you may not use this file except in compliance with the License.\n"
"// You may obtain a copy of the License at\n"
"//\n"
"//      http://www.apache.org/licenses/LICENSE-2.0\n"
"//\n"
"// Unless required by applicable law or agreed to in writing, software\n"
"// distributed under the License is distributed on an \"AS IS\" BASIS,\n"
"// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
"// See the License for the specific language governing permissions and\n"
"// limitations under the License.\n"

#: src/exercises/bare-metal/rtc.md:101
msgid "\"sync_exception_current\""
msgstr "\"sync_exception_current\""

#: src/exercises/bare-metal/rtc.md:107
msgid "\"irq_current\""
msgstr "\"irq_current\""

#: src/exercises/bare-metal/rtc.md:108
msgid "\"No pending interrupt\""
msgstr "\"No pending interrupt\""

#: src/exercises/bare-metal/rtc.md:109
msgid "\"IRQ {intid:?}\""
msgstr "\"IRQ {intid:?}\""

#: src/exercises/bare-metal/rtc.md:114
msgid "\"fiq_current\""
msgstr "\"fiq_current\""

#: src/exercises/bare-metal/rtc.md:120
msgid "\"serr_current\""
msgstr "\"serr_current\""

#: src/exercises/bare-metal/rtc.md:126
msgid "\"sync_lower\""
msgstr "\"sync_lower\""

#: src/exercises/bare-metal/rtc.md:132
msgid "\"irq_lower\""
msgstr "\"irq_lower\""

#: src/exercises/bare-metal/rtc.md:138
msgid "\"fiq_lower\""
msgstr "\"fiq_lower\""

#: src/exercises/bare-metal/rtc.md:144
msgid "\"serr_lower\""
msgstr "\"serr_lower\""

#: src/exercises/bare-metal/rtc.md:149
msgid "_src/logger.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:167
msgid "// ANCHOR: main\n"
msgstr "// ANCHOR: main\n"

#: src/exercises/bare-metal/rtc.md:210
msgid "_src/pl011.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:233
msgid "// ANCHOR: Flags\n"
msgstr "// ANCHOR: Flags\n"

#: src/exercises/bare-metal/rtc.md:261
msgid "// ANCHOR_END: Flags\n"
msgstr "// ANCHOR_END: Flags\n"

#: src/exercises/bare-metal/rtc.md:265
msgid ""
"/// Flags from the UART Receive Status Register / Error Clear Register.\n"
msgstr ""
"/// Flags from the UART Receive Status Register / Error Clear Register.\n"

#: src/exercises/bare-metal/rtc.md:269
msgid "/// Framing error.\n"
msgstr "/// Framing error.\n"

#: src/exercises/bare-metal/rtc.md:271
msgid "/// Parity error.\n"
msgstr "/// Parity error.\n"

#: src/exercises/bare-metal/rtc.md:273
msgid "/// Break error.\n"
msgstr "/// Break error.\n"

#: src/exercises/bare-metal/rtc.md:275
msgid "/// Overrun error.\n"
msgstr "/// Overrun error.\n"

#: src/exercises/bare-metal/rtc.md:279
msgid "// ANCHOR: Registers\n"
msgstr "// ANCHOR: Registers\n"

#: src/exercises/bare-metal/rtc.md:311
msgid "// ANCHOR_END: Registers\n"
msgstr "// ANCHOR_END: Registers\n"

#: src/exercises/bare-metal/rtc.md:313
msgid ""
"// ANCHOR: Uart\n"
"/// Driver for a PL011 UART.\n"
msgstr ""
"// ANCHOR: Uart\n"
"/// Driver for a PL011 UART.\n"

#: src/exercises/bare-metal/rtc.md:322
msgid ""
"/// Constructs a new instance of the UART driver for a PL011 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""
"/// Constructs a new instance of the UART driver for a PL011 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL011 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"

#: src/exercises/bare-metal/rtc.md:368
msgid "// ANCHOR_END: Uart\n"
msgstr "// ANCHOR_END: Uart\n"

#: src/exercises/bare-metal/rtc.md:410
msgid "_build.rs_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:433 src/exercises/bare-metal/rtc.md:435
msgid "\"linux\""
msgstr "\"linux\""

#: src/exercises/bare-metal/rtc.md:434 src/exercises/bare-metal/rtc.md:436
msgid "\"CROSS_COMPILE\""
msgstr "\"CROSS_COMPILE\""

#: src/exercises/bare-metal/rtc.md:434
msgid "\"aarch64-linux-gnu\""
msgstr "\"aarch64-linux-gnu\""

#: src/exercises/bare-metal/rtc.md:436
msgid "\"aarch64-none-elf\""
msgstr "\"aarch64-none-elf\""

#: src/exercises/bare-metal/rtc.md:439
msgid "\"entry.S\""
msgstr "\"entry.S\""

#: src/exercises/bare-metal/rtc.md:440
msgid "\"exceptions.S\""
msgstr "\"exceptions.S\""

#: src/exercises/bare-metal/rtc.md:441
msgid "\"idmap.S\""
msgstr "\"idmap.S\""

#: src/exercises/bare-metal/rtc.md:442
msgid "\"empty\""
msgstr "\"empty\""

#: src/exercises/bare-metal/rtc.md:446
msgid "_entry.S_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:450
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
".macro adr_l, reg:req, sym:req\n"
"\tadrp \\reg, \\sym\n"
"\tadd \\reg, \\reg, :lo12:\\sym\n"
".endm\n"
"\n"
".macro mov_i, reg:req, imm:req\n"
"\tmovz \\reg, :abs_g3:\\imm\n"
"\tmovk \\reg, :abs_g2_nc:\\imm\n"
"\tmovk \\reg, :abs_g1_nc:\\imm\n"
"\tmovk \\reg, :abs_g0_nc:\\imm\n"
".endm\n"
"\n"
".set .L_MAIR_DEV_nGnRE,\t0x04\n"
".set .L_MAIR_MEM_WBWA,\t0xff\n"
".set .Lmairval, .L_MAIR_DEV_nGnRE | (.L_MAIR_MEM_WBWA << 8)\n"
"\n"
"/* 4 KiB granule size for TTBR0_EL1. */\n"
".set .L_TCR_TG0_4KB, 0x0 << 14\n"
"/* 4 KiB granule size for TTBR1_EL1. */\n"
".set .L_TCR_TG1_4KB, 0x2 << 30\n"
"/* Disable translation table walk for TTBR1_EL1, generating a translation "
"fault instead. */\n"
".set .L_TCR_EPD1, 0x1 << 23\n"
"/* Translation table walks for TTBR0_EL1 are inner sharable. */\n"
".set .L_TCR_SH_INNER, 0x3 << 12\n"
"/*\n"
" * Translation table walks for TTBR0_EL1 are outer write-back read-allocate "
"write-allocate\n"
" * cacheable.\n"
" */\n"
".set .L_TCR_RGN_OWB, 0x1 << 10\n"
"/*\n"
" * Translation table walks for TTBR0_EL1 are inner write-back read-allocate "
"write-allocate\n"
" * cacheable.\n"
" */\n"
".set .L_TCR_RGN_IWB, 0x1 << 8\n"
"/* Size offset for TTBR0_EL1 is 2**39 bytes (512 GiB). */\n"
".set .L_TCR_T0SZ_512, 64 - 39\n"
".set .Ltcrval, .L_TCR_TG0_4KB | .L_TCR_TG1_4KB | .L_TCR_EPD1 | ."
"L_TCR_RGN_OWB\n"
".set .Ltcrval, .Ltcrval | .L_TCR_RGN_IWB | .L_TCR_SH_INNER | ."
"L_TCR_T0SZ_512\n"
"\n"
"/* Stage 1 instruction access cacheability is unaffected. */\n"
".set .L_SCTLR_ELx_I, 0x1 << 12\n"
"/* SP alignment fault if SP is not aligned to a 16 byte boundary. */\n"
".set .L_SCTLR_ELx_SA, 0x1 << 3\n"
"/* Stage 1 data access cacheability is unaffected. */\n"
".set .L_SCTLR_ELx_C, 0x1 << 2\n"
"/* EL0 and EL1 stage 1 MMU enabled. */\n"
".set .L_SCTLR_ELx_M, 0x1 << 0\n"
"/* Privileged Access Never is unchanged on taking an exception to EL1. */\n"
".set .L_SCTLR_EL1_SPAN, 0x1 << 23\n"
"/* SETEND instruction disabled at EL0 in aarch32 mode. */\n"
".set .L_SCTLR_EL1_SED, 0x1 << 8\n"
"/* Various IT instructions are disabled at EL0 in aarch32 mode. */\n"
".set .L_SCTLR_EL1_ITD, 0x1 << 7\n"
".set .L_SCTLR_EL1_RES1, (0x1 << 11) | (0x1 << 20) | (0x1 << 22) | (0x1 << "
"28) | (0x1 << 29)\n"
".set .Lsctlrval, .L_SCTLR_ELx_M | .L_SCTLR_ELx_C | .L_SCTLR_ELx_SA | ."
"L_SCTLR_EL1_ITD | .L_SCTLR_EL1_SED\n"
".set .Lsctlrval, .Lsctlrval | .L_SCTLR_ELx_I | .L_SCTLR_EL1_SPAN | ."
"L_SCTLR_EL1_RES1\n"
"\n"
"/**\n"
" * This is a generic entry point for an image. It carries out the operations "
"required to prepare the\n"
" * loaded image to be run. Specifically, it zeroes the bss section using "
"registers x25 and above,\n"
" * prepares the stack, enables floating point, and sets up the exception "
"vector. It preserves x0-x3\n"
" * for the Rust entry point, as these may contain boot parameters.\n"
" */\n"
".section .init.entry, \"ax\"\n"
".global entry\n"
"entry:\n"
"\t/* Load and apply the memory management configuration, ready to enable MMU "
"and caches. */\n"
"\tadrp x30, idmap\n"
"\tmsr ttbr0_el1, x30\n"
"\n"
"\tmov_i x30, .Lmairval\n"
"\tmsr mair_el1, x30\n"
"\n"
"\tmov_i x30, .Ltcrval\n"
"\t/* Copy the supported PA range into TCR_EL1.IPS. */\n"
"\tmrs x29, id_aa64mmfr0_el1\n"
"\tbfi x30, x29, #32, #4\n"
"\n"
"\tmsr tcr_el1, x30\n"
"\n"
"\tmov_i x30, .Lsctlrval\n"
"\n"
"\t/*\n"
"\t * Ensure everything before this point has completed, then invalidate any "
"potentially stale\n"
"\t * local TLB entries before they start being used.\n"
"\t */\n"
"\tisb\n"
"\ttlbi vmalle1\n"
"\tic iallu\n"
"\tdsb nsh\n"
"\tisb\n"
"\n"
"\t/*\n"
"\t * Configure sctlr_el1 to enable MMU and cache and don't proceed until "
"this has completed.\n"
"\t */\n"
"\tmsr sctlr_el1, x30\n"
"\tisb\n"
"\n"
"\t/* Disable trapping floating point access in EL1. */\n"
"\tmrs x30, cpacr_el1\n"
"\torr x30, x30, #(0x3 << 20)\n"
"\tmsr cpacr_el1, x30\n"
"\tisb\n"
"\n"
"\t/* Zero out the bss section. */\n"
"\tadr_l x29, bss_begin\n"
"\tadr_l x30, bss_end\n"
"0:\tcmp x29, x30\n"
"\tb.hs 1f\n"
"\tstp xzr, xzr, [x29], #16\n"
"\tb 0b\n"
"\n"
"1:\t/* Prepare the stack. */\n"
"\tadr_l x30, boot_stack_end\n"
"\tmov sp, x30\n"
"\n"
"\t/* Set up exception vector. */\n"
"\tadr x30, vector_table_el1\n"
"\tmsr vbar_el1, x30\n"
"\n"
"\t/* Call into Rust code. */\n"
"\tbl main\n"
"\n"
"\t/* Loop forever waiting for interrupts. */\n"
"2:\twfi\n"
"\tb 2b\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:595
msgid "_exceptions.S_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:599
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"/**\n"
" * Saves the volatile registers onto the stack. This currently takes 14\n"
" * instructions, so it can be used in exception handlers with 18 "
"instructions\n"
" * left.\n"
" *\n"
" * On return, x0 and x1 are initialised to elr_el2 and spsr_el2 "
"respectively,\n"
" * which can be used as the first and second arguments of a subsequent "
"call.\n"
" */\n"
".macro save_volatile_to_stack\n"
"\t/* Reserve stack space and save registers x0-x18, x29 & x30. */\n"
"\tstp x0, x1, [sp, #-(8 * 24)]!\n"
"\tstp x2, x3, [sp, #8 * 2]\n"
"\tstp x4, x5, [sp, #8 * 4]\n"
"\tstp x6, x7, [sp, #8 * 6]\n"
"\tstp x8, x9, [sp, #8 * 8]\n"
"\tstp x10, x11, [sp, #8 * 10]\n"
"\tstp x12, x13, [sp, #8 * 12]\n"
"\tstp x14, x15, [sp, #8 * 14]\n"
"\tstp x16, x17, [sp, #8 * 16]\n"
"\tstr x18, [sp, #8 * 18]\n"
"\tstp x29, x30, [sp, #8 * 20]\n"
"\n"
"\t/*\n"
"\t * Save elr_el1 & spsr_el1. This such that we can take nested exception\n"
"\t * and still be able to unwind.\n"
"\t */\n"
"\tmrs x0, elr_el1\n"
"\tmrs x1, spsr_el1\n"
"\tstp x0, x1, [sp, #8 * 22]\n"
".endm\n"
"\n"
"/**\n"
" * Restores the volatile registers from the stack. This currently takes 14\n"
" * instructions, so it can be used in exception handlers while still leaving "
"18\n"
" * instructions left; if paired with save_volatile_to_stack, there are 4\n"
" * instructions to spare.\n"
" */\n"
".macro restore_volatile_from_stack\n"
"\t/* Restore registers x2-x18, x29 & x30. */\n"
"\tldp x2, x3, [sp, #8 * 2]\n"
"\tldp x4, x5, [sp, #8 * 4]\n"
"\tldp x6, x7, [sp, #8 * 6]\n"
"\tldp x8, x9, [sp, #8 * 8]\n"
"\tldp x10, x11, [sp, #8 * 10]\n"
"\tldp x12, x13, [sp, #8 * 12]\n"
"\tldp x14, x15, [sp, #8 * 14]\n"
"\tldp x16, x17, [sp, #8 * 16]\n"
"\tldr x18, [sp, #8 * 18]\n"
"\tldp x29, x30, [sp, #8 * 20]\n"
"\n"
"\t/* Restore registers elr_el1 & spsr_el1, using x0 & x1 as scratch. */\n"
"\tldp x0, x1, [sp, #8 * 22]\n"
"\tmsr elr_el1, x0\n"
"\tmsr spsr_el1, x1\n"
"\n"
"\t/* Restore x0 & x1, and release stack space. */\n"
"\tldp x0, x1, [sp], #8 * 24\n"
".endm\n"
"\n"
"/**\n"
" * This is a generic handler for exceptions taken at the current EL while "
"using\n"
" * SP0. It behaves similarly to the SPx case by first switching to SPx, "
"doing\n"
" * the work, then switching back to SP0 before returning.\n"
" *\n"
" * Switching to SPx and calling the Rust handler takes 16 instructions. To\n"
" * restore and return we need an additional 16 instructions, so we can "
"implement\n"
" * the whole handler within the allotted 32 instructions.\n"
" */\n"
".macro current_exception_sp0 handler:req\n"
"\tmsr spsel, #1\n"
"\tsave_volatile_to_stack\n"
"\tbl \\handler\n"
"\trestore_volatile_from_stack\n"
"\tmsr spsel, #0\n"
"\teret\n"
".endm\n"
"\n"
"/**\n"
" * This is a generic handler for exceptions taken at the current EL while "
"using\n"
" * SPx. It saves volatile registers, calls the Rust handler, restores "
"volatile\n"
" * registers, then returns.\n"
" *\n"
" * This also works for exceptions taken from EL0, if we don't care about\n"
" * non-volatile registers.\n"
" *\n"
" * Saving state and jumping to the Rust handler takes 15 instructions, and\n"
" * restoring and returning also takes 15 instructions, so we can fit the "
"whole\n"
" * handler in 30 instructions, under the limit of 32.\n"
" */\n"
".macro current_exception_spx handler:req\n"
"\tsave_volatile_to_stack\n"
"\tbl \\handler\n"
"\trestore_volatile_from_stack\n"
"\teret\n"
".endm\n"
"\n"
".section .text.vector_table_el1, \"ax\"\n"
".global vector_table_el1\n"
".balign 0x800\n"
"vector_table_el1:\n"
"sync_cur_sp0:\n"
"\tcurrent_exception_sp0 sync_exception_current\n"
"\n"
".balign 0x80\n"
"irq_cur_sp0:\n"
"\tcurrent_exception_sp0 irq_current\n"
"\n"
".balign 0x80\n"
"fiq_cur_sp0:\n"
"\tcurrent_exception_sp0 fiq_current\n"
"\n"
".balign 0x80\n"
"serr_cur_sp0:\n"
"\tcurrent_exception_sp0 serr_current\n"
"\n"
".balign 0x80\n"
"sync_cur_spx:\n"
"\tcurrent_exception_spx sync_exception_current\n"
"\n"
".balign 0x80\n"
"irq_cur_spx:\n"
"\tcurrent_exception_spx irq_current\n"
"\n"
".balign 0x80\n"
"fiq_cur_spx:\n"
"\tcurrent_exception_spx fiq_current\n"
"\n"
".balign 0x80\n"
"serr_cur_spx:\n"
"\tcurrent_exception_spx serr_current\n"
"\n"
".balign 0x80\n"
"sync_lower_64:\n"
"\tcurrent_exception_spx sync_lower\n"
"\n"
".balign 0x80\n"
"irq_lower_64:\n"
"\tcurrent_exception_spx irq_lower\n"
"\n"
".balign 0x80\n"
"fiq_lower_64:\n"
"\tcurrent_exception_spx fiq_lower\n"
"\n"
".balign 0x80\n"
"serr_lower_64:\n"
"\tcurrent_exception_spx serr_lower\n"
"\n"
".balign 0x80\n"
"sync_lower_32:\n"
"\tcurrent_exception_spx sync_lower\n"
"\n"
".balign 0x80\n"
"irq_lower_32:\n"
"\tcurrent_exception_spx irq_lower\n"
"\n"
".balign 0x80\n"
"fiq_lower_32:\n"
"\tcurrent_exception_spx fiq_lower\n"
"\n"
".balign 0x80\n"
"serr_lower_32:\n"
"\tcurrent_exception_spx serr_lower\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:780
msgid "_idmap.S_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:784
msgid ""
"```armasm\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
".set .L_TT_TYPE_BLOCK, 0x1\n"
".set .L_TT_TYPE_PAGE,  0x3\n"
".set .L_TT_TYPE_TABLE, 0x3\n"
"\n"
"/* Access flag. */\n"
".set .L_TT_AF, 0x1 << 10\n"
"/* Not global. */\n"
".set .L_TT_NG, 0x1 << 11\n"
".set .L_TT_XN, 0x3 << 53\n"
"\n"
".set .L_TT_MT_DEV, 0x0 << 2\t\t\t// MAIR #0 (DEV_nGnRE)\n"
".set .L_TT_MT_MEM, (0x1 << 2) | (0x3 << 8)\t// MAIR #1 (MEM_WBWA), inner "
"shareable\n"
"\n"
".set .L_BLOCK_DEV, .L_TT_TYPE_BLOCK | .L_TT_MT_DEV | .L_TT_AF | .L_TT_XN\n"
".set .L_BLOCK_MEM, .L_TT_TYPE_BLOCK | .L_TT_MT_MEM | .L_TT_AF | .L_TT_NG\n"
"\n"
".section \".rodata.idmap\", \"a\", %progbits\n"
".global idmap\n"
".align 12\n"
"idmap:\n"
"\t/* level 1 */\n"
"\t.quad\t\t.L_BLOCK_DEV | 0x0\t\t    // 1 GiB of device mappings\n"
"\t.quad\t\t.L_BLOCK_MEM | 0x40000000\t// 1 GiB of DRAM\n"
"\t.fill\t\t254, 8, 0x0\t\t\t// 254 GiB of unmapped VA space\n"
"\t.quad\t\t.L_BLOCK_DEV | 0x4000000000 // 1 GiB of device mappings\n"
"\t.fill\t\t255, 8, 0x0\t\t\t// 255 GiB of remaining VA space\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:829
msgid "_image.ld_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:833
msgid ""
"```ld\n"
"/*\n"
" * Copyright 2023 Google LLC\n"
" *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");\n"
" * you may not use this file except in compliance with the License.\n"
" * You may obtain a copy of the License at\n"
" *\n"
" *     https://www.apache.org/licenses/LICENSE-2.0\n"
" *\n"
" * Unless required by applicable law or agreed to in writing, software\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"
" * See the License for the specific language governing permissions and\n"
" * limitations under the License.\n"
" */\n"
"\n"
"/*\n"
" * Code will start running at this symbol which is placed at the start of "
"the\n"
" * image.\n"
" */\n"
"ENTRY(entry)\n"
"\n"
"MEMORY\n"
"{\n"
"\timage : ORIGIN = 0x40080000, LENGTH = 2M\n"
"}\n"
"\n"
"SECTIONS\n"
"{\n"
"\t/*\n"
"\t * Collect together the code.\n"
"\t */\n"
"\t.init : ALIGN(4096) {\n"
"\t\ttext_begin = .;\n"
"\t\t*(.init.entry)\n"
"\t\t*(.init.*)\n"
"\t} >image\n"
"\t.text : {\n"
"\t\t*(.text.*)\n"
"\t} >image\n"
"\ttext_end = .;\n"
"\n"
"\t/*\n"
"\t * Collect together read-only data.\n"
"\t */\n"
"\t.rodata : ALIGN(4096) {\n"
"\t\trodata_begin = .;\n"
"\t\t*(.rodata.*)\n"
"\t} >image\n"
"\t.got : {\n"
"\t\t*(.got)\n"
"\t} >image\n"
"\trodata_end = .;\n"
"\n"
"\t/*\n"
"\t * Collect together the read-write data including .bss at the end which\n"
"\t * will be zero'd by the entry code.\n"
"\t */\n"
"\t.data : ALIGN(4096) {\n"
"\t\tdata_begin = .;\n"
"\t\t*(.data.*)\n"
"\t\t/*\n"
"\t\t * The entry point code assumes that .data is a multiple of 32\n"
"\t\t * bytes long.\n"
"\t\t */\n"
"\t\t. = ALIGN(32);\n"
"\t\tdata_end = .;\n"
"\t} >image\n"
"\n"
"\t/* Everything beyond this point will not be included in the binary. */\n"
"\tbin_end = .;\n"
"\n"
"\t/* The entry point code assumes that .bss is 16-byte aligned. */\n"
"\t.bss : ALIGN(16)  {\n"
"\t\tbss_begin = .;\n"
"\t\t*(.bss.*)\n"
"\t\t*(COMMON)\n"
"\t\t. = ALIGN(16);\n"
"\t\tbss_end = .;\n"
"\t} >image\n"
"\n"
"\t.stack (NOLOAD) : ALIGN(4096) {\n"
"\t\tboot_stack_begin = .;\n"
"\t\t. += 40 * 4096;\n"
"\t\t. = ALIGN(4096);\n"
"\t\tboot_stack_end = .;\n"
"\t} >image\n"
"\n"
"\t. = ALIGN(4K);\n"
"\tPROVIDE(dma_region = .);\n"
"\n"
"\t/*\n"
"\t * Remove unused sections from the image.\n"
"\t */\n"
"\t/DISCARD/ : {\n"
"\t\t/* The image loads itself so doesn't need these sections. */\n"
"\t\t*(.gnu.hash)\n"
"\t\t*(.hash)\n"
"\t\t*(.interp)\n"
"\t\t*(.eh_frame_hdr)\n"
"\t\t*(.eh_frame)\n"
"\t\t*(.note.gnu.build-id)\n"
"\t}\n"
"}\n"
"```"
msgstr ""

#: src/exercises/bare-metal/rtc.md:940
msgid "_Makefile_ (you shouldn't need to change this):"
msgstr ""

#: src/exercises/bare-metal/rtc.md:945
msgid "# Copyright 2023 Google LLC"
msgstr "# Copyright 2023 Google LLC"

#: src/exercises/bare-metal/rtc.md:959
msgid "$(shell uname -s)"
msgstr "$(shell uname -s)"

#: src/exercises/bare-metal/rtc.md:961
msgid "aarch64-linux-gnu"
msgstr "aarch64-linux-gnu"

#: src/exercises/bare-metal/rtc.md:978
msgid "stdio -display none -kernel $< -s"
msgstr "stdio -display none -kernel $< -s"

#: src/exercises/bare-metal/rtc.md:981
msgid "cargo clean"
msgstr "cargo clean"

#: src/exercises/bare-metal/rtc.md:995
msgid "Run the code in QEMU with `make qemu`."
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:1
msgid "Bare Metal Rust Afternoon"
msgstr "R√• jern Rust eftermiddag"

#: src/exercises/bare-metal/solutions-afternoon.md:5
msgid "([back to exercise](rtc.md))"
msgstr "([tilbage til √∏velsen](rtc.md))"

#: src/exercises/bare-metal/solutions-afternoon.md:7
#, fuzzy
msgid "_main.rs_:"
msgstr "_src/main.rs_:"

#: src/exercises/bare-metal/solutions-afternoon.md:36
msgid "/// Base address of the PL031 RTC.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:38
msgid "/// The IRQ used by the PL031 RTC.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:57
msgid ""
"// Safe because `PL031_BASE_ADDRESS` is the base address of a PL031 device,\n"
"    // and nothing else accesses that address range.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:62
msgid "\"RTC: {time}\""
msgstr "\"RTC: {time}\""

#: src/exercises/bare-metal/solutions-afternoon.md:70
msgid "// Wait for 3 seconds, without interrupts.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:74
#: src/exercises/bare-metal/solutions-afternoon.md:95
msgid "\"Waiting for {}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:78
#: src/exercises/bare-metal/solutions-afternoon.md:86
#: src/exercises/bare-metal/solutions-afternoon.md:102
#: src/exercises/bare-metal/solutions-afternoon.md:110
msgid "\"matched={}, interrupt_pending={}\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:90
#: src/exercises/bare-metal/solutions-afternoon.md:114
msgid "\"Finished waiting\""
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:92
msgid "// Wait another 3 seconds for an interrupt.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:127
#, fuzzy
msgid "_pl031.rs_:"
msgstr "`pl031.rs`:"

#: src/exercises/bare-metal/solutions-afternoon.md:134
msgid "/// Data register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:136
msgid "/// Match register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:138
msgid "/// Load register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:140
msgid "/// Control register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:143
msgid "/// Interrupt Mask Set or Clear register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:146
msgid "/// Raw Interrupt Status\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:149
msgid "/// Masked Interrupt Status\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:152
msgid "/// Interrupt Clear Register\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:156
msgid "/// Driver for a PL031 real-time clock.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:164
msgid ""
"/// Constructs a new instance of the RTC driver for a PL031 device at the\n"
"    /// given base address.\n"
"    ///\n"
"    /// # Safety\n"
"    ///\n"
"    /// The given base address must point to the MMIO control registers of "
"a\n"
"    /// PL031 device, which must be mapped into the address space of the "
"process\n"
"    /// as device memory and not have any other aliases.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:178
msgid "/// Reads the current RTC value.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:180
#: src/exercises/bare-metal/solutions-afternoon.md:188
#: src/exercises/bare-metal/solutions-afternoon.md:196
#: src/exercises/bare-metal/solutions-afternoon.md:207
#: src/exercises/bare-metal/solutions-afternoon.md:219
#: src/exercises/bare-metal/solutions-afternoon.md:226
msgid ""
"// Safe because we know that self.registers points to the control\n"
"        // registers of a PL031 device which is appropriately mapped.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:185
msgid ""
"/// Writes a match value. When the RTC value matches this then an interrupt\n"
"    /// will be generated (if it is enabled).\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:193
msgid ""
"/// Returns whether the match register matches the RTC value, whether or "
"not\n"
"    /// the interrupt is enabled.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:202
msgid ""
"/// Returns whether there is currently an interrupt pending.\n"
"    ///\n"
"    /// This should be true if and only if `matched` returns true and the\n"
"    /// interrupt is masked.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:213
msgid ""
"/// Sets or clears the interrupt mask.\n"
"    ///\n"
"    /// When the mask is true the interrupt is enabled; when it is false "
"the\n"
"    /// interrupt is disabled.\n"
msgstr ""

#: src/exercises/bare-metal/solutions-afternoon.md:224
msgid "/// Clears a pending interrupt, if any.\n"
msgstr ""

#: src/concurrency.md:1
msgid "Welcome to Concurrency in Rust"
msgstr "Velkommen til Concurrency i Rust"

#: src/concurrency.md:3
msgid ""
"Rust has full support for concurrency using OS threads with mutexes and "
"channels."
msgstr ""

#: src/concurrency.md:6
msgid ""
"The Rust type system plays an important role in making many concurrency bugs "
"compile time bugs. This is often referred to as _fearless concurrency_ since "
"you can rely on the compiler to ensure correctness at runtime."
msgstr ""

#: src/concurrency/threads.md:3
msgid "Rust threads work similarly to threads in other languages:"
msgstr "Tr√•de (eng: _threads_) i Rust virker p√• samme m√•de som i andre sprog:"

#: src/concurrency/threads.md:12
msgid "\"Count in thread: {i}!\""
msgstr "\"T√¶ller i tr√•den: {i}!\""

#: src/concurrency/threads.md:18
msgid "\"Main thread: {i}\""
msgstr "\"Hovedtr√•den: {i}\""

#: src/concurrency/threads.md:24
msgid "Threads are all daemon threads, the main thread does not wait for them."
msgstr ""
"Tr√•de er alle d√¶montr√•de (eng: _daemon threads_), hvilket vil sige at "
"hovedtr√•den ikke venter p√• dem."

#: src/concurrency/threads.md:25
msgid "Thread panics are independent of each other."
msgstr "Hver tr√•d kan g√• i panik uafh√¶ngigt af andre tr√•de."

#: src/concurrency/threads.md:26
msgid "Panics can carry a payload, which can be unpacked with `downcast_ref`."
msgstr "En panik kan have en nyttelast som kan udpakkes med `downcast_ref`."

#: src/concurrency/threads.md:32
#, fuzzy
msgid ""
"Notice that the thread is stopped before it reaches 10 --- the main thread "
"is not waiting."
msgstr "Bem√¶rk at tr√•den stopper f√∏r den n√•r 10 --- hovedtr√•den venter ikke."

#: src/concurrency/threads.md:35
msgid ""
"Use `let handle = thread::spawn(...)` and later `handle.join()` to wait for "
"the thread to finish."
msgstr ""
"Brug `let handle = thread::spawn(...)` og senere `handle.join()` for at "
"vente p√• at tr√•den afsluttes."

#: src/concurrency/threads.md:38
msgid "Trigger a panic in the thread, notice how this doesn't affect `main`."
msgstr "Skab en panik i tr√•den, bem√¶rk hvordan dette ikke p√•virker `main`."

#: src/concurrency/threads.md:40
msgid ""
"Use the `Result` return value from `handle.join()` to get access to the "
"panic payload. This is a good time to talk about [`Any`](https://doc.rust-"
"lang.org/std/any/index.html)."
msgstr ""
"Bruge `Result`\\-returv√¶rdien fra  `handle.join()` til at f√• adgang til "
"panikkens nyttelast. Dette er et godt tidspunkt til at snakke om [`Any`]"
"(https://doc.rust-lang.org/std/any/index.html)."

#: src/concurrency/scoped-threads.md:3
msgid "Normal threads cannot borrow from their environment:"
msgstr "Normale tr√•de kan ikke l√•ne fra deres omgivelser:"

#: src/concurrency/scoped-threads.md:20
msgid ""
"However, you can use a [scoped thread](https://doc.rust-lang.org/std/thread/"
"fn.scope.html) for this:"
msgstr ""
"Du kan dog bruge en [tr√•d med virkefelt (eng: _scoped thread_)](https://doc."
"rust-lang.org/std/thread/fn.scope.html) for at opn√• dette:"

#: src/concurrency/scoped-threads.md:40
msgid ""
"The reason for that is that when the `thread::scope` function completes, all "
"the threads are guaranteed to be joined, so they can return borrowed data."
msgstr ""
"Grunden er, at `thread::scope`\\-funktionen garanterer at alle tr√•dene er "
"blevet forenet med hovedtr√•den n√•r kaldet afsluttet. De vil s√•ledes "
"returnere det l√•nte data."

#: src/concurrency/scoped-threads.md:41
msgid ""
"Normal Rust borrowing rules apply: you can either borrow mutably by one "
"thread, or immutably by any number of threads."
msgstr ""
"De normale l√•neregler for Rust g√¶lder: du kan enten lade √©n tr√•d l√•ne data "
"for at √¶ndre p√• det, eller du kan lade flere tr√•de l√•ne data uden at √¶ndre "
"p√• det."

#: src/concurrency/channels.md:3
msgid ""
"Rust channels have two parts: a `Sender<T>` and a `Receiver<T>`. The two "
"parts are connected via the channel, but you only see the end-points."
msgstr ""

#: src/concurrency/channels.md:15 src/concurrency/channels.md:16
#: src/concurrency/channels.md:20
msgid "\"Received: {:?}\""
msgstr "\"Modtaget: {:?}\""

#: src/concurrency/channels.md:26
msgid ""
"`mpsc` stands for Multi-Producer, Single-Consumer. `Sender` and `SyncSender` "
"implement `Clone` (so you can make multiple producers) but `Receiver` does "
"not."
msgstr ""

#: src/concurrency/channels.md:28
msgid ""
"`send()` and `recv()` return `Result`. If they return `Err`, it means the "
"counterpart `Sender` or `Receiver` is dropped and the channel is closed."
msgstr ""

#: src/concurrency/channels/unbounded.md:3
msgid "You get an unbounded and asynchronous channel with `mpsc::channel()`:"
msgstr ""

#: src/concurrency/channels/unbounded.md:16
#: src/concurrency/channels/bounded.md:16
msgid "\"Message {i}\""
msgstr "\"Besked {i}\""

#: src/concurrency/channels/unbounded.md:17
#: src/concurrency/channels/bounded.md:17
msgid "\"{thread_id:?}: sent Message {i}\""
msgstr "\"{thread_id:?}: sendte Besked {i}\""

#: src/concurrency/channels/unbounded.md:19
#: src/concurrency/channels/bounded.md:19
msgid "\"{thread_id:?}: done\""
msgstr "\"{thread_id:?}: f√¶rdig\""

#: src/concurrency/channels/unbounded.md:24
#: src/concurrency/channels/bounded.md:24
msgid "\"Main: got {msg}\""
msgstr "\"Hovedtr√•den: modtog {msg}\""

#: src/concurrency/channels/bounded.md:3
msgid ""
"With bounded (synchronous) channels, `send` can block the current thread:"
msgstr ""

#: src/concurrency/channels/bounded.md:31
msgid ""
"Calling `send` will block the current thread until there is space in the "
"channel for the new message. The thread can be blocked indefinitely if there "
"is nobody who reads from the channel."
msgstr ""

#: src/concurrency/channels/bounded.md:32
msgid ""
"A call to `send` will abort with an error (that is why it returns `Result`) "
"if the channel is closed. A channel is closed when the receiver is dropped."
msgstr ""

#: src/concurrency/channels/bounded.md:33
msgid ""
"A bounded channel with a size of zero is called a \"rendezvous channel\". "
"Every send will block the current thread until another thread calls `read`."
msgstr ""

#: src/concurrency/send-sync.md:1
msgid "`Send` and `Sync`"
msgstr "`Send` og `Sync`"

#: src/concurrency/send-sync.md:3
msgid ""
"How does Rust know to forbid shared access across threads? The answer is in "
"two traits:"
msgstr ""

#: src/concurrency/send-sync.md:5
msgid ""
"[`Send`](https://doc.rust-lang.org/std/marker/trait.Send.html): a type `T` "
"is `Send` if it is safe to move a `T` across a thread boundary."
msgstr ""

#: src/concurrency/send-sync.md:7
msgid ""
"[`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html): a type `T` "
"is `Sync` if it is safe to move a `&T` across a thread boundary."
msgstr ""

#: src/concurrency/send-sync.md:10
msgid ""
"`Send` and `Sync` are [unsafe traits](../unsafe/unsafe-traits.md). The "
"compiler will automatically derive them for your types as long as they only "
"contain `Send` and `Sync` types. You can also implement them manually when "
"you know it is valid."
msgstr ""

#: src/concurrency/send-sync.md:20
msgid ""
"One can think of these traits as markers that the type has certain thread-"
"safety properties."
msgstr ""

#: src/concurrency/send-sync.md:21
msgid "They can be used in the generic constraints as normal traits."
msgstr ""

#: src/concurrency/send-sync/send.md:1
msgid "`Send`"
msgstr "`Send`"

#: src/concurrency/send-sync/send.md:3
msgid ""
"A type `T` is [`Send`](https://doc.rust-lang.org/std/marker/trait.Send.html) "
"if it is safe to move a `T` value to another thread."
msgstr ""

#: src/concurrency/send-sync/send.md:5
msgid ""
"The effect of moving ownership to another thread is that _destructors_ will "
"run in that thread. So the question is when you can allocate a value in one "
"thread and deallocate it in another."
msgstr ""

#: src/concurrency/send-sync/send.md:13
msgid ""
"As an example, a connection to the SQLite library must only be accessed from "
"a single thread."
msgstr ""

#: src/concurrency/send-sync/sync.md:1
msgid "`Sync`"
msgstr "`Sync`"

#: src/concurrency/send-sync/sync.md:3
msgid ""
"A type `T` is [`Sync`](https://doc.rust-lang.org/std/marker/trait.Sync.html) "
"if it is safe to access a `T` value from multiple threads at the same time."
msgstr ""

#: src/concurrency/send-sync/sync.md:6
msgid "More precisely, the definition is:"
msgstr ""

#: src/concurrency/send-sync/sync.md:8
msgid "`T` is `Sync` if and only if `&T` is `Send`"
msgstr ""

#: src/concurrency/send-sync/sync.md:14
msgid ""
"This statement is essentially a shorthand way of saying that if a type is "
"thread-safe for shared use, it is also thread-safe to pass references of it "
"across threads."
msgstr ""

#: src/concurrency/send-sync/sync.md:16
msgid ""
"This is because if a type is Sync it means that it can be shared across "
"multiple threads without the risk of data races or other synchronization "
"issues, so it is safe to move it to another thread. A reference to the type "
"is also safe to move to another thread, because the data it references can "
"be accessed from any thread safely."
msgstr ""

#: src/concurrency/send-sync/examples.md:3
msgid "`Send + Sync`"
msgstr "`Send + Sync`"

#: src/concurrency/send-sync/examples.md:5
msgid "Most types you come across are `Send + Sync`:"
msgstr ""

#: src/concurrency/send-sync/examples.md:7
msgid "`i8`, `f32`, `bool`, `char`, `&str`, ..."
msgstr "`i8`, `f32`, `bool`, `char`, `&str`, ..."

#: src/concurrency/send-sync/examples.md:8
msgid "`(T1, T2)`, `[T; N]`, `&[T]`, `struct { x: T }`, ..."
msgstr "`(T1, T2)`, `[T; N]`, `&[T]`, `struct { x: T }`, ..."

#: src/concurrency/send-sync/examples.md:9
msgid "`String`, `Option<T>`, `Vec<T>`, `Box<T>`, ..."
msgstr "`String`, `Option<T>`, `Vec<T>`, `Box<T>`, ..."

#: src/concurrency/send-sync/examples.md:10
msgid "`Arc<T>`: Explicitly thread-safe via atomic reference count."
msgstr ""

#: src/concurrency/send-sync/examples.md:11
msgid "`Mutex<T>`: Explicitly thread-safe via internal locking."
msgstr ""

#: src/concurrency/send-sync/examples.md:12
msgid "`AtomicBool`, `AtomicU8`, ...: Uses special atomic instructions."
msgstr ""

#: src/concurrency/send-sync/examples.md:14
msgid ""
"The generic types are typically `Send + Sync` when the type parameters are "
"`Send + Sync`."
msgstr ""

#: src/concurrency/send-sync/examples.md:17
msgid "`Send + !Sync`"
msgstr "`Send + !Sync`"

#: src/concurrency/send-sync/examples.md:19
msgid ""
"These types can be moved to other threads, but they're not thread-safe. "
"Typically because of interior mutability:"
msgstr ""

#: src/concurrency/send-sync/examples.md:22
msgid "`mpsc::Sender<T>`"
msgstr "`mpsc::Sender<T>`"

#: src/concurrency/send-sync/examples.md:23
msgid "`mpsc::Receiver<T>`"
msgstr "`mpsc::Receiver<T>`"

#: src/concurrency/send-sync/examples.md:24
msgid "`Cell<T>`"
msgstr "`Cell<T>`"

#: src/concurrency/send-sync/examples.md:25
msgid "`RefCell<T>`"
msgstr "`RefCell<T>`"

#: src/concurrency/send-sync/examples.md:27
msgid "`!Send + Sync`"
msgstr "`!Send + Sync`"

#: src/concurrency/send-sync/examples.md:29
msgid ""
"These types are thread-safe, but they cannot be moved to another thread:"
msgstr ""

#: src/concurrency/send-sync/examples.md:31
msgid ""
"`MutexGuard<T: Sync>`: Uses OS level primitives which must be deallocated on "
"the thread which created them."
msgstr ""

#: src/concurrency/send-sync/examples.md:34
msgid "`!Send + !Sync`"
msgstr "`!Send + !Sync`"

#: src/concurrency/send-sync/examples.md:36
msgid "These types are not thread-safe and cannot be moved to other threads:"
msgstr ""

#: src/concurrency/send-sync/examples.md:38
msgid ""
"`Rc<T>`: each `Rc<T>` has a reference to an `RcBox<T>`, which contains a non-"
"atomic reference count."
msgstr ""

#: src/concurrency/send-sync/examples.md:40
msgid ""
"`*const T`, `*mut T`: Rust assumes raw pointers may have special concurrency "
"considerations."
msgstr ""

#: src/concurrency/shared_state.md:3
msgid ""
"Rust uses the type system to enforce synchronization of shared data. This is "
"primarily done via two types:"
msgstr ""

#: src/concurrency/shared_state.md:6
msgid ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html), atomic "
"reference counted `T`: handles sharing between threads and takes care to "
"deallocate `T` when the last reference is dropped,"
msgstr ""

#: src/concurrency/shared_state.md:8
msgid ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html): ensures "
"mutually exclusive access to the `T` value."
msgstr ""

#: src/concurrency/shared_state/arc.md:1
msgid "`Arc`"
msgstr "`Arc`"

#: src/concurrency/shared_state/arc.md:3
msgid ""
"[`Arc<T>`](https://doc.rust-lang.org/std/sync/struct.Arc.html) allows shared "
"read-only access via `Arc::clone`:"
msgstr ""

#: src/concurrency/shared_state/arc.md:16
msgid "\"{thread_id:?}: {v:?}\""
msgstr ""

#: src/concurrency/shared_state/arc.md:21
#: src/concurrency/shared_state/example.md:17
#: src/concurrency/shared_state/example.md:45
msgid "\"v: {v:?}\""
msgstr ""

#: src/concurrency/shared_state/arc.md:29
msgid ""
"`Arc` stands for \"Atomic Reference Counted\", a thread safe version of `Rc` "
"that uses atomic operations."
msgstr ""

#: src/concurrency/shared_state/arc.md:31
msgid ""
"`Arc<T>` implements `Clone` whether or not `T` does. It implements `Send` "
"and `Sync` if and only if `T` implements them both."
msgstr ""

#: src/concurrency/shared_state/arc.md:33
msgid ""
"`Arc::clone()` has the cost of atomic operations that get executed, but "
"after that the use of the `T` is free."
msgstr ""

#: src/concurrency/shared_state/arc.md:35
msgid ""
"Beware of reference cycles, `Arc` does not use a garbage collector to detect "
"them."
msgstr ""

#: src/concurrency/shared_state/arc.md:36
msgid "`std::sync::Weak` can help."
msgstr "`std::sync::Weak` kan hj√¶lpe."

#: src/concurrency/shared_state/mutex.md:1
msgid "`Mutex`"
msgstr "`Mutex`"

#: src/concurrency/shared_state/mutex.md:3
msgid ""
"[`Mutex<T>`](https://doc.rust-lang.org/std/sync/struct.Mutex.html) ensures "
"mutual exclusion _and_ allows mutable access to `T` behind a read-only "
"interface:"
msgstr ""

#: src/concurrency/shared_state/mutex.md:11
#: src/concurrency/shared_state/mutex.md:18
msgid "\"v: {:?}\""
msgstr "\"v: {:?}\""

#: src/concurrency/shared_state/mutex.md:22
msgid ""
"Notice how we have a [`impl<T: Send> Sync for Mutex<T>`](https://doc.rust-"
"lang.org/std/sync/struct.Mutex.html#impl-Sync-for-Mutex%3CT%3E) blanket "
"implementation."
msgstr ""

#: src/concurrency/shared_state/mutex.md:31
msgid ""
"`Mutex` in Rust looks like a collection with just one element --- the "
"protected data."
msgstr ""

#: src/concurrency/shared_state/mutex.md:32
msgid ""
"It is not possible to forget to acquire the mutex before accessing the "
"protected data."
msgstr ""

#: src/concurrency/shared_state/mutex.md:33
msgid ""
"You can get an `&mut T` from an `&Mutex<T>` by taking the lock. The "
"`MutexGuard` ensures that the `&mut T` doesn't outlive the lock being held."
msgstr ""

#: src/concurrency/shared_state/mutex.md:35
msgid ""
"`Mutex<T>` implements both `Send` and `Sync` iff (if and only if) `T` "
"implements `Send`."
msgstr ""

#: src/concurrency/shared_state/mutex.md:36
msgid "A read-write lock counterpart: `RwLock`."
msgstr ""

#: src/concurrency/shared_state/mutex.md:37
msgid "Why does `lock()` return a `Result`? "
msgstr ""

#: src/concurrency/shared_state/mutex.md:38
msgid ""
"If the thread that held the `Mutex` panicked, the `Mutex` becomes "
"\"poisoned\" to signal that the data it protected might be in an "
"inconsistent state. Calling `lock()` on a poisoned mutex fails with a "
"[`PoisonError`](https://doc.rust-lang.org/std/sync/struct.PoisonError.html). "
"You can call `into_inner()` on the error to recover the data regardless."
msgstr ""

#: src/concurrency/shared_state/example.md:3
msgid "Let us see `Arc` and `Mutex` in action:"
msgstr ""

#: src/concurrency/shared_state/example.md:6
msgid "// use std::sync::{Arc, Mutex};\n"
msgstr "// use std::sync::{Arc, Mutex};\n"

#: src/concurrency/shared_state/example.md:23
msgid "Possible solution:"
msgstr ""

#: src/concurrency/shared_state/example.md:49
msgid "Notable parts:"
msgstr ""

#: src/concurrency/shared_state/example.md:51
msgid ""
"`v` is wrapped in both `Arc` and `Mutex`, because their concerns are "
"orthogonal."
msgstr ""

#: src/concurrency/shared_state/example.md:52
msgid ""
"Wrapping a `Mutex` in an `Arc` is a common pattern to share mutable state "
"between threads."
msgstr ""

#: src/concurrency/shared_state/example.md:53
msgid ""
"`v: Arc<_>` needs to be cloned as `v2` before it can be moved into another "
"thread. Note `move` was added to the lambda signature."
msgstr ""

#: src/concurrency/shared_state/example.md:54
msgid ""
"Blocks are introduced to narrow the scope of the `LockGuard` as much as "
"possible."
msgstr ""

#: src/exercises/concurrency/morning.md:3
msgid "Let us practice our new concurrency skills with"
msgstr ""

#: src/exercises/concurrency/morning.md:5
msgid "Dining philosophers: a classic problem in concurrency."
msgstr ""

#: src/exercises/concurrency/morning.md:7
msgid ""
"Multi-threaded link checker: a larger project where you'll use Cargo to "
"download dependencies and then check links in parallel."
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:3
msgid "The dining philosophers problem is a classic problem in concurrency:"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:5
msgid ""
"Five philosophers dine together at the same table. Each philosopher has "
"their own place at the table. There is a fork between each plate. The dish "
"served is a kind of spaghetti which has to be eaten with two forks. Each "
"philosopher can only alternately think and eat. Moreover, a philosopher can "
"only eat their spaghetti when they have both a left and right fork. Thus two "
"forks will only be available when their two nearest neighbors are thinking, "
"not eating. After an individual philosopher finishes eating, they will put "
"down both forks."
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:13
msgid ""
"You will need a local [Cargo installation](../../cargo/running-locally.md) "
"for this exercise. Copy the code below to a file called `src/main.rs`, fill "
"out the blanks, and test that `cargo run` does not deadlock:"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:28
#: src/exercises/concurrency/dining-philosophers-async.md:23
msgid ""
"// left_fork: ...\n"
"    // right_fork: ...\n"
"    // thoughts: ...\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:36
#: src/exercises/concurrency/solutions-morning.md:24
#: src/exercises/concurrency/dining-philosophers-async.md:31
#: src/exercises/concurrency/solutions-afternoon.md:25
msgid "\"Eureka! {} has a new idea!\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:41
#: src/exercises/concurrency/dining-philosophers-async.md:36
#: src/exercises/concurrency/solutions-afternoon.md:30
msgid "// Pick up forks...\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:42
#: src/exercises/concurrency/solutions-morning.md:33
#: src/exercises/concurrency/dining-philosophers-async.md:37
#: src/exercises/concurrency/solutions-afternoon.md:37
msgid "\"{} is eating...\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:48
#: src/exercises/concurrency/solutions-morning.md:39
#: src/exercises/concurrency/dining-philosophers-async.md:43
#: src/exercises/concurrency/solutions-afternoon.md:45
msgid "\"Socrates\""
msgstr "\"Sokrates\""

#: src/exercises/concurrency/dining-philosophers.md:48
#: src/exercises/concurrency/solutions-morning.md:39
#: src/exercises/concurrency/dining-philosophers-async.md:43
#: src/exercises/concurrency/solutions-afternoon.md:45
msgid "\"Hypatia\""
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:48
#: src/exercises/concurrency/solutions-morning.md:39
#: src/exercises/concurrency/dining-philosophers-async.md:43
#: src/exercises/concurrency/solutions-afternoon.md:45
msgid "\"Plato\""
msgstr "\"Plato\""

#: src/exercises/concurrency/dining-philosophers.md:48
#: src/exercises/concurrency/solutions-morning.md:39
#: src/exercises/concurrency/dining-philosophers-async.md:43
#: src/exercises/concurrency/solutions-afternoon.md:45
msgid "\"Aristotle\""
msgstr "\"Aristoteles\""

#: src/exercises/concurrency/dining-philosophers.md:48
#: src/exercises/concurrency/solutions-morning.md:39
#: src/exercises/concurrency/dining-philosophers-async.md:43
#: src/exercises/concurrency/solutions-afternoon.md:45
msgid "\"Pythagoras\""
msgstr "\"Pythagoras\""

#: src/exercises/concurrency/dining-philosophers.md:51
#: src/exercises/concurrency/dining-philosophers-async.md:47
#: src/exercises/concurrency/solutions-afternoon.md:49
msgid "// Create forks\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:53
#: src/exercises/concurrency/dining-philosophers-async.md:49
#: src/exercises/concurrency/solutions-afternoon.md:53
msgid "// Create philosophers\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:55
msgid "// Make each of them think and eat 100 times\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:57
#: src/exercises/concurrency/dining-philosophers-async.md:53
#: src/exercises/concurrency/solutions-afternoon.md:88
msgid "// Output their thoughts\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:61
msgid "You can use the following `Cargo.toml`:"
msgstr ""

#: src/exercises/concurrency/dining-philosophers.md:65
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"```"

#: src/exercises/concurrency/link-checker.md:3
msgid ""
"Let us use our new knowledge to create a multi-threaded link checker. It "
"should start at a webpage and check that links on the page are valid. It "
"should recursively check other pages on the same domain and keep doing this "
"until all pages have been validated."
msgstr ""

#: src/exercises/concurrency/link-checker.md:8
msgid ""
"For this, you will need an HTTP client such as [`reqwest`](https://docs.rs/"
"reqwest/). Create a new Cargo project and `reqwest` it as a dependency with:"
msgstr ""

#: src/exercises/concurrency/link-checker.md:17
msgid ""
"If `cargo add` fails with `error: no such subcommand`, then please edit the "
"`Cargo.toml` file by hand. Add the dependencies listed below."
msgstr ""

#: src/exercises/concurrency/link-checker.md:20
msgid ""
"You will also need a way to find links. We can use [`scraper`](https://docs."
"rs/scraper/) for that:"
msgstr ""

#: src/exercises/concurrency/link-checker.md:26
msgid ""
"Finally, we'll need some way of handling errors. We use [`thiserror`]"
"(https://docs.rs/thiserror/) for that:"
msgstr ""

#: src/exercises/concurrency/link-checker.md:33
msgid ""
"The `cargo add` calls will update the `Cargo.toml` file to look like this:"
msgstr ""

#: src/exercises/concurrency/link-checker.md:37
msgid ""
"```toml\n"
"[package]\n"
"name = \"link-checker\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"reqwest = { version = \"0.11.12\", features = [\"blocking\", \"rustls-"
"tls\"] }\n"
"scraper = \"0.13.0\"\n"
"thiserror = \"1.0.37\"\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"link-checker\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"publish = false\n"
"\n"
"[dependencies]\n"
"reqwest = { version = \"0.11.12\", features = [\"blocking\", \"rustls-"
"tls\"] }\n"
"scraper = \"0.13.0\"\n"
"thiserror = \"1.0.37\"\n"
"```"

#: src/exercises/concurrency/link-checker.md:50
msgid ""
"You can now download the start page. Try with a small site such as `https://"
"www.google.org/`."
msgstr ""

#: src/exercises/concurrency/link-checker.md:53
msgid "Your `src/main.rs` file should look something like this:"
msgstr ""

#: src/exercises/concurrency/link-checker.md:64
#: src/exercises/concurrency/solutions-morning.md:95
msgid "\"request error: {0}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:66
#: src/exercises/concurrency/solutions-morning.md:97
msgid "\"bad http response: {0}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:77
#: src/exercises/concurrency/solutions-morning.md:108
msgid "\"Checking {:#}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:95
#: src/exercises/concurrency/solutions-morning.md:126
msgid "\"href\""
msgstr "\"href\""

#: src/exercises/concurrency/link-checker.md:102
#: src/exercises/concurrency/solutions-morning.md:133
msgid "\"On {base_url:#}: ignored unparsable {href:?}: {err}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:111
#: src/exercises/concurrency/solutions-morning.md:249
msgid "\"https://www.google.org\""
msgstr "\"https://www.google.org\""

#: src/exercises/concurrency/link-checker.md:114
msgid "\"Links: {links:#?}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:115
msgid "\"Could not extract links: {err:#}\""
msgstr ""

#: src/exercises/concurrency/link-checker.md:120
msgid "Run the code in `src/main.rs` with"
msgstr ""

#: src/exercises/concurrency/link-checker.md:128
msgid ""
"Use threads to check the links in parallel: send the URLs to be checked to a "
"channel and let a few threads check the URLs in parallel."
msgstr ""

#: src/exercises/concurrency/link-checker.md:130
msgid ""
"Extend this to recursively extract links from all pages on the `www.google."
"org` domain. Put an upper limit of 100 pages or so so that you don't end up "
"being blocked by the site."
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:1
msgid "Concurrency Morning Exercise"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:5
msgid "([back to exercise](dining-philosophers.md))"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:29
msgid "\"{} is trying to eat\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:53
msgid ""
"// To avoid a deadlock, we have to break the symmetry\n"
"        // somewhere. This will swap the forks without deinitializing\n"
"        // either of them.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:77
msgid "\"{thought}\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:82
msgid "Link Checker"
msgstr "Linktjekker"

#: src/exercises/concurrency/solutions-morning.md:84
msgid "([back to exercise](link-checker.md))"
msgstr "([tilbage til √∏velsen](link-checker.md))"

#: src/exercises/concurrency/solutions-morning.md:155
msgid ""
"/// Determine whether links within the given page should be extracted.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:163
msgid ""
"/// Mark the given page as visited, returning false if it had already\n"
"    /// been visited.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:189
msgid "// The sender got dropped. No more commands coming in.\n"
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:233
msgid "\"Got crawling error: {:#}\""
msgstr ""

#: src/exercises/concurrency/solutions-morning.md:251
msgid "\"Bad URLs: {:#?}\""
msgstr ""

#: src/async.md:1
msgid "Async Rust"
msgstr ""

#: src/async.md:3
msgid ""
"\"Async\" is a concurrency model where multiple tasks are executed "
"concurrently by executing each task until it would block, then switching to "
"another task that is ready to make progress. The model allows running a "
"larger number of tasks on a limited number of threads. This is because the "
"per-task overhead is typically very low and operating systems provide "
"primitives for efficiently identifying I/O that is able to proceed."
msgstr ""

#: src/async.md:10
msgid ""
"Rust's asynchronous operation is based on \"futures\", which represent work "
"that may be completed in the future. Futures are \"polled\" until they "
"signal that they are complete."
msgstr ""

#: src/async.md:14
msgid ""
"Futures are polled by an async runtime, and several different runtimes are "
"available."
msgstr ""

#: src/async.md:19
msgid ""
"Python has a similar model in its `asyncio`. However, its `Future` type is "
"callback-based, and not polled. Async Python programs require a \"loop\", "
"similar to a runtime in Rust."
msgstr ""

#: src/async.md:23
msgid ""
"JavaScript's `Promise` is similar, but again callback-based. The language "
"runtime implements the event loop, so many of the details of Promise "
"resolution are hidden."
msgstr ""

#: src/async/async-await.md:1
msgid "`async`/`await`"
msgstr "`async`/`await`"

#: src/async/async-await.md:3
msgid ""
"At a high level, async Rust code looks very much like \"normal\" sequential "
"code:"
msgstr ""

#: src/async/async-await.md:10
msgid "\"Count is: {i}!\""
msgstr ""

#: src/async/async-await.md:27
msgid ""
"Note that this is a simplified example to show the syntax. There is no long "
"running operation or any real concurrency in it!"
msgstr ""

#: src/async/async-await.md:30
msgid "What is the return type of an async call?"
msgstr ""

#: src/async/async-await.md:31
msgid "Use `let future: () = async_main(10);` in `main` to see the type."
msgstr ""

#: src/async/async-await.md:33
msgid ""
"The \"async\" keyword is syntactic sugar. The compiler replaces the return "
"type with a future. "
msgstr ""

#: src/async/async-await.md:36
msgid ""
"You cannot make `main` async, without additional instructions to the "
"compiler on how to use the returned future."
msgstr ""

#: src/async/async-await.md:39
msgid ""
"You need an executor to run async code. `block_on` blocks the current thread "
"until the provided future has run to completion. "
msgstr ""

#: src/async/async-await.md:42
msgid ""
"`.await` asynchronously waits for the completion of another operation. "
"Unlike `block_on`, `.await` doesn't block the current thread."
msgstr ""

#: src/async/async-await.md:45
msgid ""
"`.await` can only be used inside an `async` function (or block; these are "
"introduced later). "
msgstr ""

#: src/async/futures.md:3
msgid ""
"[`Future`](https://doc.rust-lang.org/std/future/trait.Future.html) is a "
"trait, implemented by objects that represent an operation that may not be "
"complete yet. A future can be polled, and `poll` returns a [`Poll`](https://"
"doc.rust-lang.org/std/task/enum.Poll.html)."
msgstr ""

#: src/async/futures.md:23
msgid ""
"An async function returns an `impl Future`. It's also possible (but "
"uncommon) to implement `Future` for your own types. For example, the "
"`JoinHandle` returned from `tokio::spawn` implements `Future` to allow "
"joining to it."
msgstr ""

#: src/async/futures.md:27
msgid ""
"The `.await` keyword, applied to a Future, causes the current async function "
"to pause until that Future is ready, and then evaluates to its output."
msgstr ""

#: src/async/futures.md:32
msgid ""
"The `Future` and `Poll` types are implemented exactly as shown; click the "
"links to show the implementations in the docs."
msgstr ""

#: src/async/futures.md:35
msgid ""
"We will not get to `Pin` and `Context`, as we will focus on writing async "
"code, rather than building new async primitives. Briefly:"
msgstr ""

#: src/async/futures.md:38
msgid ""
"`Context` allows a Future to schedule itself to be polled again when an "
"event occurs."
msgstr ""

#: src/async/futures.md:41
msgid ""
"`Pin` ensures that the Future isn't moved in memory, so that pointers into "
"that future remain valid. This is required to allow references to remain "
"valid after an `.await`."
msgstr ""

#: src/async/runtimes.md:3
msgid ""
"A _runtime_ provides support for performing operations asynchronously (a "
"_reactor_) and is responsible for executing futures (an _executor_). Rust "
"does not have a \"built-in\" runtime, but several options are available:"
msgstr ""

#: src/async/runtimes.md:7
msgid ""
"[Tokio](https://tokio.rs/): performant, with a well-developed ecosystem of "
"functionality like [Hyper](https://hyper.rs/) for HTTP or [Tonic](https://"
"github.com/hyperium/tonic) for gRPC."
msgstr ""

#: src/async/runtimes.md:10
msgid ""
"[async-std](https://async.rs/): aims to be a \"std for async\", and includes "
"a basic runtime in `async::task`."
msgstr ""

#: src/async/runtimes.md:12
msgid "[smol](https://docs.rs/smol/latest/smol/): simple and lightweight"
msgstr ""

#: src/async/runtimes.md:14
msgid ""
"Several larger applications have their own runtimes. For example, [Fuchsia]"
"(https://fuchsia.googlesource.com/fuchsia/+/refs/heads/main/src/lib/fuchsia-"
"async/src/lib.rs) already has one."
msgstr ""

#: src/async/runtimes.md:20
msgid ""
"Note that of the listed runtimes, only Tokio is supported in the Rust "
"playground. The playground also does not permit any I/O, so most interesting "
"async things can't run in the playground."
msgstr ""

#: src/async/runtimes.md:24
msgid ""
"Futures are \"inert\" in that they do not do anything (not even start an I/O "
"operation) unless there is an executor polling them. This differs from JS "
"Promises, for example, which will run to completion even if they are never "
"used."
msgstr ""

#: src/async/runtimes/tokio.md:4
msgid "Tokio provides: "
msgstr ""

#: src/async/runtimes/tokio.md:6
msgid "A multi-threaded runtime for executing asynchronous code."
msgstr ""

#: src/async/runtimes/tokio.md:7
msgid "An asynchronous version of the standard library."
msgstr ""

#: src/async/runtimes/tokio.md:8
msgid "A large ecosystem of libraries."
msgstr ""

#: src/async/runtimes/tokio.md:15
msgid "\"Count in task: {i}!\""
msgstr ""

#: src/async/runtimes/tokio.md:25
msgid "\"Main task: {i}\""
msgstr ""

#: src/async/runtimes/tokio.md:33
msgid "With the `tokio::main` macro we can now make `main` async."
msgstr ""

#: src/async/runtimes/tokio.md:35
msgid "The `spawn` function creates a new, concurrent \"task\"."
msgstr ""

#: src/async/runtimes/tokio.md:37
msgid "Note: `spawn` takes a `Future`, you don't call `.await` on `count_to`."
msgstr ""

#: src/async/runtimes/tokio.md:39
msgid "**Further exploration:**"
msgstr ""

#: src/async/runtimes/tokio.md:41
msgid ""
"Why does `count_to` not (usually) get to 10? This is an example of async "
"cancellation. `tokio::spawn` returns a handle which can be awaited to wait "
"until it finishes."
msgstr ""

#: src/async/runtimes/tokio.md:45
msgid "Try `count_to(10).await` instead of spawning."
msgstr ""

#: src/async/runtimes/tokio.md:47
msgid "Try awaiting the task returned from `tokio::spawn`."
msgstr ""

#: src/async/tasks.md:3
msgid "Rust has a task system, which is a form of lightweight threading."
msgstr ""

#: src/async/tasks.md:5
msgid ""
"A task has a single top-level future which the executor polls to make "
"progress. That future may have one or more nested futures that its `poll` "
"method polls, corresponding loosely to a call stack. Concurrency within a "
"task is possible by polling multiple child futures, such as racing a timer "
"and an I/O operation."
msgstr ""

#: src/async/tasks.md:16
msgid "\"127.0.0.1:6142\""
msgstr "\"127.0.0.1:6142\""

#: src/async/tasks.md:17
msgid "\"listening on port 6142\""
msgstr ""

#: src/async/tasks.md:22
msgid "\"connection from {addr:?}\""
msgstr ""

#: src/async/tasks.md:25
msgid "b\"Who are you?\\n\""
msgstr ""

#: src/async/tasks.md:26 src/async/tasks.md:37 src/async/tasks.md:43
msgid "\"socket error: {e:?}\""
msgstr ""

#: src/async/tasks.md:34
msgid "\"Thanks for dialing in, {name}!\\n\""
msgstr ""

#: src/async/tasks.md:52 src/async/control-flow/join.md:36
msgid ""
"Copy this example into your prepared `src/main.rs` and run it from there."
msgstr ""

#: src/async/tasks.md:54
msgid ""
"Try connecting to it with a TCP connection tool like [nc](https://www.unix."
"com/man-page/linux/1/nc/) or [telnet](https://www.unix.com/man-page/linux/1/"
"telnet/)."
msgstr ""

#: src/async/tasks.md:56
msgid ""
"Ask students to visualize what the state of the example server would be with "
"a few connected clients. What tasks exist? What are their Futures?"
msgstr ""

#: src/async/tasks.md:59
msgid ""
"This is the first time we've seen an `async` block. This is similar to a "
"closure, but does not take any arguments. Its return value is a Future, "
"similar to an `async fn`. "
msgstr ""

#: src/async/tasks.md:63
msgid ""
"Refactor the async block into a function, and improve the error handling "
"using `?`. "
msgstr ""

#: src/async/channels.md:3
msgid ""
"Several crates have support for asynchronous channels. For instance `tokio`:"
msgstr ""

#: src/async/channels.md:13
msgid "\"Received {count} pings so far.\""
msgstr ""

#: src/async/channels.md:16
msgid "\"ping_handler complete\""
msgstr ""

#: src/async/channels.md:24
msgid "\"Failed to send ping.\""
msgstr ""

#: src/async/channels.md:25
msgid "\"Sent {} pings so far.\""
msgstr ""

#: src/async/channels.md:29
msgid "\"Something went wrong in ping handler task.\""
msgstr ""

#: src/async/channels.md:35
msgid "Change the channel size to `3` and see how it affects the execution."
msgstr ""

#: src/async/channels.md:37
msgid ""
"Overall, the interface is similar to the `sync` channels as seen in the "
"[morning class](concurrency/channels.md)."
msgstr ""

#: src/async/channels.md:40
msgid "Try removing the `std::mem::drop` call. What happens? Why?"
msgstr ""

#: src/async/channels.md:42
msgid ""
"The [Flume](https://docs.rs/flume/latest/flume/) crate has channels that "
"implement both `sync` and `async` `send` and `recv`. This can be convenient "
"for complex applications with both IO and heavy CPU processing tasks."
msgstr ""

#: src/async/channels.md:46
msgid ""
"What makes working with `async` channels preferable is the ability to "
"combine them with other `future`s to combine them and create complex control "
"flow."
msgstr ""

#: src/async/control-flow.md:1
msgid "Futures Control Flow"
msgstr ""

#: src/async/control-flow.md:3
msgid ""
"Futures can be combined together to produce concurrent compute flow graphs. "
"We have already seen tasks, that function as independent threads of "
"execution."
msgstr ""

#: src/async/control-flow.md:6
msgid "[Join](control-flow/join.md)"
msgstr "[Join](control-flow/join.md)"

#: src/async/control-flow.md:7
msgid "[Select](control-flow/select.md)"
msgstr "[Select](control-flow/select.md)"

#: src/async/control-flow/join.md:3
msgid ""
"A join operation waits until all of a set of futures are ready, and returns "
"a collection of their results. This is similar to `Promise.all` in "
"JavaScript or `asyncio.gather` in Python."
msgstr ""

#: src/async/control-flow/join.md:21
msgid "\"https://google.com\""
msgstr "\"https://google.com\""

#: src/async/control-flow/join.md:22
msgid "\"https://httpbin.org/ip\""
msgstr "\"https://httpbin.org/ip\""

#: src/async/control-flow/join.md:23
msgid "\"https://play.rust-lang.org/\""
msgstr "\"https://play.rust-lang.org/\""

#: src/async/control-flow/join.md:24
msgid "\"BAD_URL\""
msgstr "\"BAD_URL\""

#: src/async/control-flow/join.md:38
msgid ""
"For multiple futures of disjoint types, you can use `std::future::join!` but "
"you must know how many futures you will have at compile time. This is "
"currently in the `futures` crate, soon to be stabilised in `std::future`."
msgstr ""

#: src/async/control-flow/join.md:42
msgid ""
"The risk of `join` is that one of the futures may never resolve, this would "
"cause your program to stall. "
msgstr ""

#: src/async/control-flow/join.md:45
msgid ""
"You can also combine `join_all` with `join!` for instance to join all "
"requests to an http service as well as a database query. Try adding a "
"`tokio::time::sleep` to the future, using `futures::join!`. This is not a "
"timeout (that requires `select!`, explained in the next chapter), but "
"demonstrates `join!`."
msgstr ""

#: src/async/control-flow/select.md:3
msgid ""
"A select operation waits until any of a set of futures is ready, and "
"responds to that future's result. In JavaScript, this is similar to `Promise."
"race`. In Python, it compares to `asyncio.wait(task_set, return_when=asyncio."
"FIRST_COMPLETED)`."
msgstr ""

#: src/async/control-flow/select.md:8
msgid ""
"Similar to a match statement, the body of `select!` has a number of arms, "
"each of the form `pattern = future => statement`. When the `future` is "
"ready, the `statement` is executed with the variables in `pattern` bound to "
"the `future`'s result."
msgstr ""

#: src/async/control-flow/select.md:40
msgid "\"Felix\""
msgstr "\"Felix\""

#: src/async/control-flow/select.md:42
msgid "\"Failed to send cat.\""
msgstr "\"Kunne ikke sende katten.\""

#: src/async/control-flow/select.md:47
msgid "\"Rex\""
msgstr "\"Rex\""

#: src/async/control-flow/select.md:49
msgid "\"Failed to send dog.\""
msgstr "\"Kunne ikke sende hunden.\""

#: src/async/control-flow/select.md:54
msgid "\"Failed to receive winner\""
msgstr "\"Kunne ikke modtage vinderen\""

#: src/async/control-flow/select.md:56
msgid "\"Winner is {winner:?}\""
msgstr "\"Vinderen er {winner:?}\""

#: src/async/control-flow/select.md:62
msgid ""
"In this example, we have a race between a cat and a dog. "
"`first_animal_to_finish_race` listens to both channels and will pick "
"whichever arrives first. Since the dog takes 50ms, it wins against the cat "
"that take 500ms."
msgstr ""

#: src/async/control-flow/select.md:67
msgid ""
"You can use `oneshot` channels in this example as the channels are supposed "
"to receive only one `send`."
msgstr ""

#: src/async/control-flow/select.md:70
msgid ""
"Try adding a deadline to the race, demonstrating selecting different sorts "
"of futures."
msgstr ""

#: src/async/control-flow/select.md:73
msgid ""
"Note that `select!` drops unmatched branches, which cancels their futures. "
"It is easiest to use when every execution of `select!` creates new futures."
msgstr ""

#: src/async/control-flow/select.md:76
msgid ""
"An alternative is to pass `&mut future` instead of the future itself, but "
"this can lead to issues, further discussed in the pinning slide."
msgstr ""

#: src/async/pitfalls.md:1
msgid "Pitfalls of async/await"
msgstr "Faldgruber ved async/await"

#: src/async/pitfalls.md:3
msgid ""
"Async / await provides convenient and efficient abstraction for concurrent "
"asynchronous programming. However, the async/await model in Rust also comes "
"with its share of pitfalls and footguns. We illustrate some of them in this "
"chapter:"
msgstr ""

#: src/async/pitfalls.md:5
msgid "[Blocking the Executor](pitfalls/blocking-executor.md)"
msgstr ""

#: src/async/pitfalls.md:6
msgid "[Pin](pitfalls/pin.md)"
msgstr "[Pin](pitfalls/pin.md)"

#: src/async/pitfalls.md:7
msgid "[Async Traits](pitfalls/async-traits.md)"
msgstr ""

#: src/async/pitfalls.md:8
msgid "[Cancellation](pitfalls/cancellation.md)"
msgstr ""

#: src/async/pitfalls/blocking-executor.md:1
msgid "Blocking the executor"
msgstr ""

#: src/async/pitfalls/blocking-executor.md:3
msgid ""
"Most async runtimes only allow IO tasks to run concurrently. This means that "
"CPU blocking tasks will block the executor and prevent other tasks from "
"being executed. An easy workaround is to use async equivalent methods where "
"possible."
msgstr ""

#: src/async/pitfalls/blocking-executor.md:14
msgid "\"future {id} slept for {duration_ms}ms, finished after {}ms\""
msgstr ""

#: src/async/pitfalls/blocking-executor.md:19
msgid "\"current_thread\""
msgstr ""

#: src/async/pitfalls/blocking-executor.md:29
msgid ""
"Run the code and see that the sleeps happen consecutively rather than "
"concurrently."
msgstr ""

#: src/async/pitfalls/blocking-executor.md:32
msgid ""
"The `\"current_thread\"` flavor puts all tasks on a single thread. This "
"makes the effect more obvious, but the bug is still present in the multi-"
"threaded flavor."
msgstr ""

#: src/async/pitfalls/blocking-executor.md:36
msgid ""
"Switch the `std::thread::sleep` to `tokio::time::sleep` and await its result."
msgstr ""

#: src/async/pitfalls/blocking-executor.md:38
msgid ""
"Another fix would be to `tokio::task::spawn_blocking` which spawns an actual "
"thread and transforms its handle into a future without blocking the executor."
msgstr ""

#: src/async/pitfalls/blocking-executor.md:41
msgid ""
"You should not think of tasks as OS threads. They do not map 1 to 1 and most "
"executors will allow many tasks to run on a single OS thread. This is "
"particularly problematic when interacting with other libraries via FFI, "
"where that library might depend on thread-local storage or map to specific "
"OS threads (e.g., CUDA). Prefer `tokio::task::spawn_blocking` in such "
"situations."
msgstr ""

#: src/async/pitfalls/blocking-executor.md:47
msgid ""
"Use sync mutexes with care. Holding a mutex over an `.await` may cause "
"another task to block, and that task may be running on the same thread."
msgstr ""

#: src/async/pitfalls/pin.md:3
msgid ""
"When you await a future, all local variables (that would ordinarily be "
"stored on a stack frame) are instead stored in the Future for the current "
"async block. If your future has pointers to data on the stack, those "
"pointers might get invalidated. This is unsafe."
msgstr ""

#: src/async/pitfalls/pin.md:8
msgid ""
"Therefore, you must guarantee that the addresses your future points to don't "
"change. That is why we need to `pin` futures. Using the same future "
"repeatedly in a `select!` often leads to issues with pinned values."
msgstr ""

#: src/async/pitfalls/pin.md:16
msgid ""
"// A work item. In this case, just sleep for the given time and respond\n"
"// with a message on the `respond_on` channel.\n"
msgstr ""

#: src/async/pitfalls/pin.md:24
msgid "// A worker which listens for work on a queue and performs it.\n"
msgstr ""

#: src/async/pitfalls/pin.md:31
msgid "// Pretend to work.\n"
msgstr ""

#: src/async/pitfalls/pin.md:34
msgid "\"failed to send response\""
msgstr ""

#: src/async/pitfalls/pin.md:37
msgid "// TODO: report number of iterations every 100ms\n"
msgstr ""

#: src/async/pitfalls/pin.md:41
msgid "// A requester which requests work and waits for it to complete.\n"
msgstr ""

#: src/async/pitfalls/pin.md:51
msgid "\"failed to send on work queue\""
msgstr ""

#: src/async/pitfalls/pin.md:52
msgid "\"failed waiting for response\""
msgstr ""

#: src/async/pitfalls/pin.md:61
msgid "\"work result for iteration {i}: {resp}\""
msgstr ""

#: src/async/pitfalls/pin.md:68
msgid ""
"You may recognize this as an example of the actor pattern. Actors typically "
"call `select!` in a loop."
msgstr ""

#: src/async/pitfalls/pin.md:71
msgid ""
"This serves as a summation of a few of the previous lessons, so take your "
"time with it."
msgstr ""

#: src/async/pitfalls/pin.md:74
msgid ""
"Naively add a `_ = sleep(Duration::from_millis(100)) => { println!(..) }` to "
"the `select!`. This will never execute. Why?"
msgstr ""

#: src/async/pitfalls/pin.md:77
msgid ""
"Instead, add a `timeout_fut` containing that future outside of the `loop`:"
msgstr ""

#: src/async/pitfalls/pin.md:88
msgid ""
"This still doesn't work. Follow the compiler errors, adding `&mut` to the "
"`timeout_fut` in the `select!` to work around the move, then using `Box::"
"pin`:"
msgstr ""

#: src/async/pitfalls/pin.md:102
msgid ""
"This compiles, but once the timeout expires it is `Poll::Ready` on every "
"iteration (a fused future would help with this). Update to reset "
"`timeout_fut` every time it expires."
msgstr ""

#: src/async/pitfalls/pin.md:106
msgid ""
"Box allocates on the heap. In some cases, `std::pin::pin!` (only recently "
"stabilized, with older code often using `tokio::pin!`) is also an option, "
"but that is difficult to use for a future that is reassigned."
msgstr ""

#: src/async/pitfalls/pin.md:110
msgid ""
"Another alternative is to not use `pin` at all but spawn another task that "
"will send to a `oneshot` channel every 100ms."
msgstr ""

#: src/async/pitfalls/async-traits.md:3
msgid ""
"Async methods in traits are not yet supported in the stable channel ([An "
"experimental feature exists in nightly and should be stabilized in the mid "
"term.](https://blog.rust-lang.org/inside-rust/2022/11/17/async-fn-in-trait-"
"nightly.html))"
msgstr ""

#: src/async/pitfalls/async-traits.md:5
msgid ""
"The crate [async_trait](https://docs.rs/async-trait/latest/async_trait/) "
"provides a workaround through a macro:"
msgstr ""

#: src/async/pitfalls/async-traits.md:30
msgid "\"running all sleepers..\""
msgstr ""

#: src/async/pitfalls/async-traits.md:34
msgid "\"slept for {}ms\""
msgstr ""

#: src/async/pitfalls/async-traits.md:51
msgid ""
"`async_trait` is easy to use, but note that it's using heap allocations to "
"achieve this. This heap allocation has performance overhead."
msgstr ""

#: src/async/pitfalls/async-traits.md:54
msgid ""
"The challenges in language support for `async trait` are deep Rust and "
"probably not worth describing in-depth. Niko Matsakis did a good job of "
"explaining them in [this post](https://smallcultfollowing.com/babysteps/"
"blog/2019/10/26/async-fn-in-traits-are-hard/) if you are interested in "
"digging deeper."
msgstr ""

#: src/async/pitfalls/async-traits.md:60
msgid ""
"Try creating a new sleeper struct that will sleep for a random amount of "
"time and adding it to the Vec."
msgstr ""

#: src/async/pitfalls/cancellation.md:3
msgid ""
"Dropping a future implies it can never be polled again. This is called "
"_cancellation_ and it can occur at any `await` point. Care is needed to "
"ensure the system works correctly even when futures are cancelled. For "
"example, it shouldn't deadlock or lose data."
msgstr ""

#: src/async/pitfalls/cancellation.md:35
msgid "\"not UTF-8\""
msgstr ""

#: src/async/pitfalls/cancellation.md:51
msgid "\"hi\\nthere\\n\""
msgstr ""

#: src/async/pitfalls/cancellation.md:57
msgid "\"tick!\""
msgstr ""

#: src/async/pitfalls/cancellation.md:72
msgid ""
"The compiler doesn't help with cancellation-safety. You need to read API "
"documentation and consider what state your `async fn` holds."
msgstr ""

#: src/async/pitfalls/cancellation.md:75
msgid ""
"Unlike `panic` and `?`, cancellation is part of normal control flow (vs "
"error-handling)."
msgstr ""

#: src/async/pitfalls/cancellation.md:78
msgid "The example loses parts of the string."
msgstr ""

#: src/async/pitfalls/cancellation.md:80
msgid ""
"Whenever the `tick()` branch finishes first, `next()` and its `buf` are "
"dropped."
msgstr ""

#: src/async/pitfalls/cancellation.md:82
msgid ""
"`LinesReader` can be made cancellation-safe by making `buf` part of the "
"struct:"
msgstr ""

#: src/async/pitfalls/cancellation.md:95
msgid "// prefix buf and bytes with self.\n"
msgstr ""

#: src/async/pitfalls/cancellation.md:104
msgid ""
"[`Interval::tick`](https://docs.rs/tokio/latest/tokio/time/struct.Interval."
"html#method.tick) is cancellation-safe because it keeps track of whether a "
"tick has been 'delivered'."
msgstr ""

#: src/async/pitfalls/cancellation.md:107
msgid ""
"[`AsyncReadExt::read`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncReadExt.html#method.read) is cancellation-safe because it either "
"returns or doesn't read data."
msgstr ""

#: src/async/pitfalls/cancellation.md:110
msgid ""
"[`AsyncBufReadExt::read_line`](https://docs.rs/tokio/latest/tokio/io/trait."
"AsyncBufReadExt.html#method.read_line) is similar to the example and _isn't_ "
"cancellation-safe. See its documentation for details and alternatives."
msgstr ""

#: src/exercises/concurrency/afternoon.md:3
msgid ""
"To practice your Async Rust skills, we have again two exercises for you:"
msgstr ""

#: src/exercises/concurrency/afternoon.md:5
msgid ""
"Dining philosophers: we already saw this problem in the morning. This time "
"you are going to implement it with Async Rust."
msgstr ""

#: src/exercises/concurrency/afternoon.md:8
msgid ""
"A Broadcast Chat Application: this is a larger project that allows you "
"experiment with more advanced Async Rust features."
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:1
#: src/exercises/concurrency/solutions-afternoon.md:3
#, fuzzy
msgid "Dining Philosophers --- Async"
msgstr "Filosoffer omkring spisebordet"

#: src/exercises/concurrency/dining-philosophers-async.md:3
msgid ""
"See [dining philosophers](dining-philosophers.md) for a description of the "
"problem."
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:6
msgid ""
"As before, you will need a local [Cargo installation](../../cargo/running-"
"locally.md) for this exercise. Copy the code below to a file called `src/"
"main.rs`, fill out the blanks, and test that `cargo run` does not deadlock:"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:51
#: src/exercises/concurrency/solutions-afternoon.md:77
msgid "// Make them think and eat\n"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:57
msgid ""
"Since this time you are using Async Rust, you'll need a `tokio` dependency. "
"You can use the following `Cargo.toml`:"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:62
msgid ""
"```toml\n"
"[package]\n"
"name = \"dining-philosophers-async-dine\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"\n"
"[dependencies]\n"
"tokio = {version = \"1.26.0\", features = [\"sync\", \"time\", \"macros\", "
"\"rt-multi-thread\"]}\n"
"```"
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:72
msgid ""
"Also note that this time you have to use the `Mutex` and the `mpsc` module "
"from the `tokio` crate."
msgstr ""

#: src/exercises/concurrency/dining-philosophers-async.md:77
msgid "Can you make your implementation single-threaded? "
msgstr ""

#: src/exercises/concurrency/chat-app.md:3
msgid ""
"In this exercise, we want to use our new knowledge to implement a broadcast "
"chat application. We have a chat server that the clients connect to and "
"publish their messages. The client reads user messages from the standard "
"input, and sends them to the server. The chat server broadcasts each message "
"that it receives to all the clients."
msgstr ""

#: src/exercises/concurrency/chat-app.md:9
msgid ""
"For this, we use [a broadcast channel](https://docs.rs/tokio/latest/tokio/"
"sync/broadcast/fn.channel.html) on the server, and [`tokio_websockets`]"
"(https://docs.rs/tokio-websockets/0.4.0/tokio_websockets/) for the "
"communication between the client and the server."
msgstr ""

#: src/exercises/concurrency/chat-app.md:13
msgid "Create a new Cargo project and add the following dependencies:"
msgstr ""

#: src/exercises/concurrency/chat-app.md:15
msgid "_Cargo.toml_:"
msgstr ""

#: src/exercises/concurrency/chat-app.md:19
msgid ""
"```toml\n"
"[package]\n"
"name = \"chat-async\"\n"
"version = \"0.1.0\"\n"
"edition = \"2021\"\n"
"\n"
"[dependencies]\n"
"futures-util = { version = \"0.3.28\", features = [\"sink\"] }\n"
"http = \"0.2.9\"\n"
"tokio = { version = \"1.28.1\", features = [\"full\"] }\n"
"tokio-websockets = { version = \"0.4.0\", features = [\"client\", "
"\"fastrand\", \"server\", \"sha1_smol\"] }\n"
"```"
msgstr ""

#: src/exercises/concurrency/chat-app.md:32
msgid "The required APIs"
msgstr ""

#: src/exercises/concurrency/chat-app.md:33
msgid ""
"You are going to need the following functions from `tokio` and "
"[`tokio_websockets`](https://docs.rs/tokio-websockets/0.4.0/"
"tokio_websockets/). Spend a few minutes to familiarize yourself with the "
"API. "
msgstr ""

#: src/exercises/concurrency/chat-app.md:37
msgid ""
"[StreamExt::next()](https://docs.rs/futures-util/0.3.28/futures_util/stream/"
"trait.StreamExt.html#method.next) implemented by `WebsocketStream`: for "
"asynchronously reading messages from a Websocket Stream."
msgstr ""

#: src/exercises/concurrency/chat-app.md:39
msgid ""
"[SinkExt::send()](https://docs.rs/futures-util/0.3.28/futures_util/sink/"
"trait.SinkExt.html#method.send) implemented by `WebsocketStream`: for "
"asynchronously sending messages on a Websocket Stream."
msgstr ""

#: src/exercises/concurrency/chat-app.md:41
msgid ""
"[Lines::next_line()](https://docs.rs/tokio/latest/tokio/io/struct.Lines."
"html#method.next_line): for asynchronously reading user messages from the "
"standard input."
msgstr ""

#: src/exercises/concurrency/chat-app.md:43
msgid ""
"[Sender::subscribe()](https://docs.rs/tokio/latest/tokio/sync/broadcast/"
"struct.Sender.html#method.subscribe): for subscribing to a broadcast channel."
msgstr ""

#: src/exercises/concurrency/chat-app.md:46
msgid "Two binaries"
msgstr ""

#: src/exercises/concurrency/chat-app.md:48
msgid ""
"Normally in a Cargo project, you can have only one binary, and one `src/main."
"rs` file. In this project, we need two binaries. One for the client, and one "
"for the server. You could potentially make them two separate Cargo projects, "
"but we are going to put them in a single Cargo project with two binaries. "
"For this to work, the client and the server code should go under `src/bin` "
"(see the [documentation](https://doc.rust-lang.org/cargo/reference/cargo-"
"targets.html#binaries)). "
msgstr ""

#: src/exercises/concurrency/chat-app.md:55
msgid ""
"Copy the following server and client code into `src/bin/server.rs` and `src/"
"bin/client.rs`, respectively. Your task is to complete these files as "
"described below. "
msgstr ""

#: src/exercises/concurrency/chat-app.md:59
#: src/exercises/concurrency/solutions-afternoon.md:99
msgid "_src/bin/server.rs_:"
msgstr "_src/bin/server.rs_:"

#: src/exercises/concurrency/chat-app.md:78
#: src/exercises/concurrency/chat-app.md:125
msgid "// TODO: For a hint, see the description of the task below.\n"
msgstr ""

#: src/exercises/concurrency/chat-app.md:86
#: src/exercises/concurrency/solutions-afternoon.md:149
msgid "\"127.0.0.1:2000\""
msgstr "\"127.0.0.1:2000\""

#: src/exercises/concurrency/chat-app.md:87
#: src/exercises/concurrency/solutions-afternoon.md:150
msgid "\"listening on port 2000\""
msgstr ""

#: src/exercises/concurrency/chat-app.md:91
#: src/exercises/concurrency/solutions-afternoon.md:154
msgid "\"New connection from {addr:?}\""
msgstr ""

#: src/exercises/concurrency/chat-app.md:94
#: src/exercises/concurrency/solutions-afternoon.md:157
msgid "// Wrap the raw TCP stream into a websocket.\n"
msgstr ""

#: src/exercises/concurrency/chat-app.md:103
#: src/exercises/concurrency/solutions-afternoon.md:166
msgid "_src/bin/client.rs_:"
msgstr "_src/bin/client.rs_:"

#: src/exercises/concurrency/chat-app.md:117
#: src/exercises/concurrency/solutions-afternoon.md:178
msgid "\"ws://127.0.0.1:2000\""
msgstr "\"ws://127.0.0.1:2000\""

#: src/exercises/concurrency/chat-app.md:130
msgid "Running the binaries"
msgstr "Afvikling af bin√¶re filer"

#: src/exercises/concurrency/chat-app.md:131
msgid "Run the server with:"
msgstr ""

#: src/exercises/concurrency/chat-app.md:137
msgid "and the client with:"
msgstr ""

#: src/exercises/concurrency/chat-app.md:145
msgid "Implement the `handle_connection` function in `src/bin/server.rs`."
msgstr ""

#: src/exercises/concurrency/chat-app.md:146
msgid ""
"Hint: Use `tokio::select!` for concurrently performing two tasks in a "
"continuous loop. One task receives messages from the client and broadcasts "
"them. The other sends messages received by the server to the client."
msgstr ""

#: src/exercises/concurrency/chat-app.md:149
msgid "Complete the main function in `src/bin/client.rs`."
msgstr ""

#: src/exercises/concurrency/chat-app.md:150
msgid ""
"Hint: As before, use `tokio::select!` in a continuous loop for concurrently "
"performing two tasks: (1) reading user messages from standard input and "
"sending them to the server, and (2) receiving messages from the server, and "
"displaying them for the user."
msgstr ""

#: src/exercises/concurrency/chat-app.md:154
msgid ""
"Optional: Once you are done, change the code to broadcast messages to all "
"clients, but the sender of the message."
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:1
msgid "Concurrency Afternoon Exercise"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:5
msgid "([back to exercise](dining-philosophers-async.md))"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:32
msgid ""
"// Add a delay before picking the second fork to allow the execution\n"
"        // to transfer to another task\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:40
msgid "// The locks are dropped here\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:60
msgid ""
"// To avoid a deadlock, we have to break the symmetry\n"
"            // somewhere. This will swap the forks without deinitializing\n"
"            // either of them.\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:74
msgid "// tx is dropped here, so we don't need to explicitly drop it later\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:90
msgid "\"Here is a thought: {thought}\""
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:97
msgid "([back to exercise](chat-app.md))"
msgstr "([tilbage til √∏velsen](chat-app.md))"

#: src/exercises/concurrency/solutions-afternoon.md:117
msgid "\"Welcome to chat! Type a message\""
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:121
msgid ""
"// A continuous loop for concurrently performing two tasks: (1) receiving\n"
"    // messages from `ws_stream` and broadcasting them, and (2) receiving\n"
"    // messages on `bcast_rx` and sending them to the client.\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:130
msgid "\"From client {addr:?} {text:?}\""
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:185
msgid "// Continuous loop for concurrently sending and receiving messages.\n"
msgstr ""

#: src/exercises/concurrency/solutions-afternoon.md:192
msgid "\"From server: {}\""
msgstr ""

#: src/thanks.md:3
msgid ""
"_Thank you for taking Comprehensive Rust ü¶Ä!_ We hope you enjoyed it and "
"that it was useful."
msgstr ""
"_Tak for at tage Comprehensive Rust ü¶Ä!_ Vi h√•ber du har nydt det og at det "
"har v√¶ret hj√¶lpsomt."

#: src/thanks.md:6
msgid ""
"We've had a lot of fun putting the course together. The course is not "
"perfect, so if you spotted any mistakes or have ideas for improvements, "
"please get in [contact with us on GitHub](https://github.com/google/"
"comprehensive-rust/discussions). We would love to hear from you."
msgstr ""

#: src/glossary.md:3
msgid ""
"The following is a glossary which aims to give a short definition of many "
"Rust terms. For translations, this also serves to connect the term back to "
"the English original."
msgstr ""

#: src/glossary.md:30
msgid ""
"allocate:  \n"
"Dynamic memory allocation on [the heap](memory-management/stack-vs-heap.md)."
msgstr ""

#: src/glossary.md:32
msgid ""
"argument:  \n"
"Information that is passed into a function or method."
msgstr ""

#: src/glossary.md:34
msgid ""
"Bare-metal Rust:  \n"
"Low-level Rust development, often deployed to a system without an operating "
"system. See [Bare-metal Rust](bare-metal.md)."
msgstr ""

#: src/glossary.md:37
msgid ""
"block:  \n"
"See [Blocks](control-flow/blocks.md) and _scope_."
msgstr ""

#: src/glossary.md:39
msgid ""
"borrow:  \n"
"See [Borrowing](ownership/borrowing.md)."
msgstr ""

#: src/glossary.md:41
msgid ""
"borrow checker:  \n"
"The part of the Rust compiler which checks that all borrows are valid."
msgstr ""

#: src/glossary.md:43
msgid ""
"brace:  \n"
"`{` and `}`. Also called _curly brace_, they delimit _blocks_."
msgstr ""

#: src/glossary.md:45
msgid ""
"build:  \n"
"The process of converting source code into executable code or a usable "
"program."
msgstr ""

#: src/glossary.md:47
msgid ""
"call:  \n"
"To invoke or execute a function or method."
msgstr ""

#: src/glossary.md:49
msgid ""
"channel:  \n"
"Used to safely pass messages [between threads](concurrency/channels.md)."
msgstr ""

#: src/glossary.md:51
msgid ""
"Comprehensive Rust ü¶Ä:  \n"
"The courses here are jointly called Comprehensive Rust ü¶Ä."
msgstr ""

#: src/glossary.md:53
msgid ""
"concurrency:  \n"
"The execution of multiple tasks or processes at the same time."
msgstr ""

#: src/glossary.md:55
msgid ""
"Concurrency in Rust:  \n"
"See [Concurrency in Rust](concurrency.md)."
msgstr ""

#: src/glossary.md:57
msgid ""
"constant:  \n"
"A value that does not change during the execution of a program."
msgstr ""

#: src/glossary.md:59
msgid ""
"control flow:  \n"
"The order in which the individual statements or instructions are executed in "
"a program."
msgstr ""

#: src/glossary.md:61
msgid ""
"crash:  \n"
"An unexpected and unhandled failure or termination of a program."
msgstr ""

#: src/glossary.md:63
msgid ""
"enumeration:  \n"
"A data type that consists of named constant values."
msgstr ""

#: src/glossary.md:65
msgid ""
"error:  \n"
"An unexpected condition or result that deviates from the expected behavior."
msgstr ""

#: src/glossary.md:67
msgid ""
"error handling:  \n"
"The process of managing and responding to errors that occur during program "
"execution."
msgstr ""

#: src/glossary.md:69
msgid ""
"exercise:  \n"
"A task or problem designed to practice and test programming skills."
msgstr ""

#: src/glossary.md:71
msgid ""
"function:  \n"
"A reusable block of code that performs a specific task."
msgstr ""

#: src/glossary.md:73
msgid ""
"garbage collector:  \n"
"A mechanism that automatically frees up memory occupied by objects that are "
"no longer in use."
msgstr ""

#: src/glossary.md:75
msgid ""
"generics:  \n"
"A feature that allows writing code with placeholders for types, enabling "
"code reuse with different data types."
msgstr ""

#: src/glossary.md:77
msgid ""
"immutable:  \n"
"Unable to be changed after creation."
msgstr ""

#: src/glossary.md:79
msgid ""
"integration test:  \n"
"A type of test that verifies the interactions between different parts or "
"components of a system."
msgstr ""

#: src/glossary.md:81
msgid ""
"keyword:  \n"
"A reserved word in a programming language that has a specific meaning and "
"cannot be used as an identifier."
msgstr ""

#: src/glossary.md:83
msgid ""
"library:  \n"
"A collection of precompiled routines or code that can be used by programs."
msgstr ""

#: src/glossary.md:85
msgid ""
"macro:  \n"
"Rust macros can be recognized by a `!` in the name. Macros are used when "
"normal functions are not enough. A typical example is `format!`, which takes "
"a variable number of arguments, which isn't supported by Rust functions."
msgstr ""

#: src/glossary.md:90
msgid ""
"`main` function:  \n"
"Rust programs start executing with the `main` function."
msgstr ""

#: src/glossary.md:92
msgid ""
"match:  \n"
"A control flow construct in Rust that allows for pattern matching on the "
"value of an expression."
msgstr ""

#: src/glossary.md:94
msgid ""
"memory leak:  \n"
"A situation where a program fails to release memory that is no longer "
"needed, leading to a gradual increase in memory usage."
msgstr ""

#: src/glossary.md:96
msgid ""
"method:  \n"
"A function associated with an object or a type in Rust."
msgstr ""

#: src/glossary.md:98
msgid ""
"module:  \n"
"A namespace that contains definitions, such as functions, types, or traits, "
"to organize code in Rust."
msgstr ""

#: src/glossary.md:100
msgid ""
"move:  \n"
"The transfer of ownership of a value from one variable to another in Rust."
msgstr ""

#: src/glossary.md:102
msgid ""
"mutable:  \n"
"A property in Rust that allows variables to be modified after they have been "
"declared."
msgstr ""

#: src/glossary.md:104
msgid ""
"ownership:  \n"
"The concept in Rust that defines which part of the code is responsible for "
"managing the memory associated with a value."
msgstr ""

#: src/glossary.md:106
msgid ""
"panic:  \n"
"An unrecoverable error condition in Rust that results in the termination of "
"the program."
msgstr ""

#: src/glossary.md:108
msgid ""
"parameter:  \n"
"A value that is passed into a function or method when it is called."
msgstr ""

#: src/glossary.md:110
msgid ""
"pattern:  \n"
"A combination of values, literals, or structures that can be matched against "
"an expression in Rust."
msgstr ""

#: src/glossary.md:112
msgid ""
"payload:  \n"
"The data or information carried by a message, event, or data structure."
msgstr ""

#: src/glossary.md:114
msgid ""
"program:  \n"
"A set of instructions that a computer can execute to perform a specific task "
"or solve a particular problem."
msgstr ""

#: src/glossary.md:116
msgid ""
"programming language:  \n"
"A formal system used to communicate instructions to a computer, such as Rust."
msgstr ""

#: src/glossary.md:118
msgid ""
"receiver:  \n"
"The first parameter in a Rust method that represents the instance on which "
"the method is called."
msgstr ""

#: src/glossary.md:120
msgid ""
"reference counting:  \n"
"A memory management technique in which the number of references to an object "
"is tracked, and the object is deallocated when the count reaches zero."
msgstr ""

#: src/glossary.md:122
msgid ""
"return:  \n"
"A keyword in Rust used to indicate the value to be returned from a function."
msgstr ""

#: src/glossary.md:124
msgid ""
"Rust:  \n"
"A systems programming language that focuses on safety, performance, and "
"concurrency."
msgstr ""

#: src/glossary.md:126
msgid ""
"Rust Fundamentals:  \n"
"Days 1 to 3 of this course."
msgstr ""

#: src/glossary.md:128
msgid ""
"Rust in Android:  \n"
"See [Rust in Android](android.md)."
msgstr ""

#: src/glossary.md:130
msgid ""
"Rust in Chromium:  \n"
"See [Rust in Chromium](chromium.md)."
msgstr ""

#: src/glossary.md:132
msgid ""
"safe:  \n"
"Refers to code that adheres to Rust's ownership and borrowing rules, "
"preventing memory-related errors."
msgstr ""

#: src/glossary.md:134
msgid ""
"scope:  \n"
"The region of a program where a variable is valid and can be used."
msgstr ""

#: src/glossary.md:136
msgid ""
"standard library:  \n"
"A collection of modules providing essential functionality in Rust."
msgstr ""

#: src/glossary.md:138
msgid ""
"static:  \n"
"A keyword in Rust used to define static variables or items with a `'static` "
"lifetime."
msgstr ""

#: src/glossary.md:140
msgid ""
"string:  \n"
"A data type storing textual data. See [`String` vs `str`](basic-syntax/"
"string-slices.html) for more."
msgstr ""

#: src/glossary.md:142
msgid ""
"struct:  \n"
"A composite data type in Rust that groups together variables of different "
"types under a single name."
msgstr ""

#: src/glossary.md:144
msgid ""
"test:  \n"
"A Rust module containing functions that test the correctness of other "
"functions."
msgstr ""

#: src/glossary.md:146
msgid ""
"thread:  \n"
"A separate sequence of execution in a program, allowing concurrent execution."
msgstr ""

#: src/glossary.md:148
msgid ""
"thread safety:  \n"
"The property of a program that ensures correct behavior in a multithreaded "
"environment."
msgstr ""

#: src/glossary.md:150
msgid ""
"trait:  \n"
"A collection of methods defined for an unknown type, providing a way to "
"achieve polymorphism in Rust."
msgstr ""

#: src/glossary.md:152
msgid ""
"type:  \n"
"A classification that specifies which operations can be performed on values "
"of a particular kind in Rust."
msgstr ""

#: src/glossary.md:154
msgid ""
"type inference:  \n"
"The ability of the Rust compiler to deduce the type of a variable or "
"expression."
msgstr ""

#: src/glossary.md:156
msgid ""
"undefined behavior:  \n"
"Actions or conditions in Rust that have no specified result, often leading "
"to unpredictable program behavior."
msgstr ""

#: src/glossary.md:158
msgid ""
"union:  \n"
"A data type that can hold values of different types but only one at a time."
msgstr ""

#: src/glossary.md:160
msgid ""
"unit test:  \n"
"Rust comes with built-in support for running small unit tests and larger "
"integration tests. See [Unit Tests](testing/unit-tests.html)."
msgstr ""

#: src/glossary.md:163
msgid ""
"unsafe:  \n"
"The subset of Rust which allows you to trigger _undefined behavior_. See "
"[Unsafe Rust](unsafe.html)."
msgstr ""

#: src/glossary.md:165
msgid ""
"variable:  \n"
"A memory location storing data. Variables are valid in a _scope_. "
msgstr ""

#: src/other-resources.md:1
msgid "Other Rust Resources"
msgstr "Andre Rust-resourcer"

#: src/other-resources.md:3
msgid ""
"The Rust community has created a wealth of high-quality and free resources "
"online."
msgstr ""

#: src/other-resources.md:6
msgid "Official Documentation"
msgstr "Officiel dokumentation"

#: src/other-resources.md:8
msgid "The Rust project hosts many resources. These cover Rust in general:"
msgstr ""

#: src/other-resources.md:10
msgid ""
"[The Rust Programming Language](https://doc.rust-lang.org/book/): the "
"canonical free book about Rust. Covers the language in detail and includes a "
"few projects for people to build."
msgstr ""

#: src/other-resources.md:13
msgid ""
"[Rust By Example](https://doc.rust-lang.org/rust-by-example/): covers the "
"Rust syntax via a series of examples which showcase different constructs. "
"Sometimes includes small exercises where you are asked to expand on the code "
"in the examples."
msgstr ""

#: src/other-resources.md:17
msgid ""
"[Rust Standard Library](https://doc.rust-lang.org/std/): full documentation "
"of the standard library for Rust."
msgstr ""

#: src/other-resources.md:19
msgid ""
"[The Rust Reference](https://doc.rust-lang.org/reference/): an incomplete "
"book which describes the Rust grammar and memory model."
msgstr ""

#: src/other-resources.md:22
msgid "More specialized guides hosted on the official Rust site:"
msgstr ""

#: src/other-resources.md:24
msgid ""
"[The Rustonomicon](https://doc.rust-lang.org/nomicon/): covers unsafe Rust, "
"including working with raw pointers and interfacing with other languages "
"(FFI)."
msgstr ""

#: src/other-resources.md:27
msgid ""
"[Asynchronous Programming in Rust](https://rust-lang.github.io/async-book/): "
"covers the new asynchronous programming model which was introduced after the "
"Rust Book was written."
msgstr ""

#: src/other-resources.md:30
msgid ""
"[The Embedded Rust Book](https://doc.rust-lang.org/stable/embedded-book/): "
"an introduction to using Rust on embedded devices without an operating "
"system."
msgstr ""

#: src/other-resources.md:33
msgid "Unofficial Learning Material"
msgstr ""

#: src/other-resources.md:35
msgid "A small selection of other guides and tutorial for Rust:"
msgstr ""

#: src/other-resources.md:37
msgid ""
"[Learn Rust the Dangerous Way](http://cliffle.com/p/dangerust/): covers Rust "
"from the perspective of low-level C programmers."
msgstr ""

#: src/other-resources.md:39
msgid ""
"[Rust for Embedded C Programmers](https://docs.opentitan.org/doc/ug/"
"rust_for_c/): covers Rust from the perspective of developers who write "
"firmware in C."
msgstr ""

#: src/other-resources.md:42
msgid ""
"[Rust for professionals](https://overexact.com/rust-for-professionals/): "
"covers the syntax of Rust using side-by-side comparisons with other "
"languages such as C, C++, Java, JavaScript, and Python."
msgstr ""

#: src/other-resources.md:45
msgid ""
"[Rust on Exercism](https://exercism.org/tracks/rust): 100+ exercises to help "
"you learn Rust."
msgstr ""

#: src/other-resources.md:47
msgid ""
"[Ferrous Teaching Material](https://ferrous-systems.github.io/teaching-"
"material/index.html): a series of small presentations covering both basic "
"and advanced part of the Rust language. Other topics such as WebAssembly, "
"and async/await are also covered."
msgstr ""

#: src/other-resources.md:52
msgid ""
"[Beginner's Series to Rust](https://docs.microsoft.com/en-us/shows/beginners-"
"series-to-rust/) and [Take your first steps with Rust](https://docs."
"microsoft.com/en-us/learn/paths/rust-first-steps/): two Rust guides aimed at "
"new developers. The first is a set of 35 videos and the second is a set of "
"11 modules which covers Rust syntax and basic constructs."
msgstr ""

#: src/other-resources.md:58
msgid ""
"[Learn Rust With Entirely Too Many Linked Lists](https://rust-unofficial."
"github.io/too-many-lists/): in-depth exploration of Rust's memory management "
"rules, through implementing a few different types of list structures."
msgstr ""

#: src/other-resources.md:63
msgid ""
"Please see the [Little Book of Rust Books](https://lborb.github.io/book/) "
"for even more Rust books."
msgstr ""

#: src/credits.md:3
msgid ""
"The material here builds on top of the many great sources of Rust "
"documentation. See the page on [other resources](other-resources.md) for a "
"full list of useful resources."
msgstr ""

#: src/credits.md:7
msgid ""
"The material of Comprehensive Rust is licensed under the terms of the Apache "
"2.0 license, please see [`LICENSE`](https://github.com/google/comprehensive-"
"rust/blob/main/LICENSE) for details."
msgstr ""

#: src/credits.md:12
msgid "Rust by Example"
msgstr "Rust by Example"

#: src/credits.md:14
msgid ""
"Some examples and exercises have been copied and adapted from [Rust by "
"Example](https://doc.rust-lang.org/rust-by-example/). Please see the "
"`third_party/rust-by-example/` directory for details, including the license "
"terms."
msgstr ""

#: src/credits.md:19
msgid "Rust on Exercism"
msgstr "Rust p√• Exercism"

#: src/credits.md:21
msgid ""
"Some exercises have been copied and adapted from [Rust on Exercism](https://"
"exercism.org/tracks/rust). Please see the `third_party/rust-on-exercism/` "
"directory for details, including the license terms."
msgstr ""

#: src/credits.md:26
msgid "CXX"
msgstr "CXX"

#: src/credits.md:28
msgid ""
"The [Interoperability with C++](android/interoperability/cpp.md) section "
"uses an image from [CXX](https://cxx.rs/). Please see the `third_party/cxx/` "
"directory for details, including the license terms."
msgstr ""
